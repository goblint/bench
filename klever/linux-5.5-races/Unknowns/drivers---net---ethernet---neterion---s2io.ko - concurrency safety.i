/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 uint64_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_113 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_113 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_114 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_114 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
struct wait_queue_entry;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_entry {
   unsigned int flags ;
   void *private ;
   int (*func)(struct wait_queue_entry *, unsigned int , int , void *) ;
   struct list_head entry ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 195 
struct hrtimer;
#line 196 
enum hrtimer_restart;
#line 220 
struct workqueue_struct;
#line 221 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_128 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_127 {
   struct __anonstruct_128 __anonCompField___anonunion_127_28 ;
   struct __anonstruct_129 __anonCompField___anonunion_127_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_127 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_130 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_130 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   struct list_head slab_list ;
   struct __anonstruct_136 __anonCompField___anonunion_135_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_138 __anonCompField___anonunion_137_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   union __anonunion_135 __anonCompField___anonstruct_134_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_137 __anonCompField___anonstruct_134_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_142 __anonCompField___anonstruct_141_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_131 {
   struct __anonstruct_132 __anonCompField___anonunion_131_31 ;
   struct __anonstruct_133 __anonCompField___anonunion_131_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_131_37 ;
   struct __anonstruct_139 __anonCompField___anonunion_131_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_131_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_131_41 ;
   struct __anonstruct_143 __anonCompField___anonunion_131_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_131 __anonCompField_page_43 ;
   union __anonunion_144 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_145 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_146 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_146 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_237 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_236 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 325 
struct poll_table_struct;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_256 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_256 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_259 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_259 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_267 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_267 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_307 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_307 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_308 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_309 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_310 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_311 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_314 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_315 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_313 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_314 _addr_bnd ;
   struct __anonstruct__addr_pkey_315 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_312 {
   void *_addr ;
   union __anonunion_313 __anonCompField___anonstruct__sigfault_312_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_316 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_317 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_308 _kill ;
   struct __anonstruct__timer_309 _timer ;
   struct __anonstruct__rt_310 _rt ;
   struct __anonstruct__sigchld_311 _sigchld ;
   struct __anonstruct__sigfault_312 _sigfault ;
   struct __anonstruct__sigpoll_316 _sigpoll ;
   struct __anonstruct__sigsys_317 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_322 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_322 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_327 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_327 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_329 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_329 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
typedef enum irqreturn irqreturn_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_406 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_406 __anonCompField_pci_dev_59 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_420 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_419 {
   struct __anonstruct_420 __anonCompField___anonunion_419_60 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_419 __anonCompField_lockref_61 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_422 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_421 {
   struct __anonstruct_422 __anonCompField___anonunion_421_62 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_421 __anonCompField_qstr_63 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_423 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_424 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_423 __anonCompField_dentry_64 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_424 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_431 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_432 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_431 __anonCompField_io_cq_65 ;
   union __anonunion_432 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_433 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_433 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_434 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_434 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_436 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_435 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_436 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_435 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_439 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_440 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_439 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_440 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_441 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_442 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_443 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_443 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_445 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_444 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_445 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_444 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_463 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_465 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_464 {
   unsigned long nr_segs ;
   struct __anonstruct_465 __anonCompField___anonunion_464_73 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_463 __anonCompField_iov_iter_72 ;
   union __anonunion_464 __anonCompField_iov_iter_74 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_468 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_468 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_469 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_469 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_470 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_470 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_471 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_471 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_472 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_472 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_473 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_473 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_474 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_474 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_475 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_475 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_476 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_477 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_476 ifr_ifrn ;
   union __anonunion_ifr_ifru_477 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_11221 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_11221 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_512 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_512 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_513 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_513 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_524 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_525 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_526 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_527 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_524 ports ;
   struct __anonstruct_icmpt_525 icmpt ;
   struct __anonstruct_dnports_526 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_527 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_528 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_528 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_534 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_535 __anonCompField___anonstruct_534_90 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   struct __anonstruct_534 __anonCompField___anonunion_533_91 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_536 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_537 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_539 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   struct __anonstruct_539 __anonCompField___anonunion_538_95 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_541 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   __wsum csum ;
   struct __anonstruct_541 __anonCompField___anonunion_540_97 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_543 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_544 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_533 __anonCompField_sk_buff_92 ;
   union __anonunion_536 __anonCompField_sk_buff_93 ;
   union __anonunion_537 __anonCompField_sk_buff_94 ;
   char cb[48U] ;
   union __anonunion_538 __anonCompField_sk_buff_96 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_540 __anonCompField_sk_buff_98 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_542 __anonCompField_sk_buff_99 ;
   __u32 secmark ;
   union __anonunion_543 __anonCompField_sk_buff_100 ;
   union __anonunion_544 __anonCompField_sk_buff_101 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_570 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_570 __anonCompField_ethtool_rxnfc_103 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_573 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_573 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_574 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_574 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_575 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_575 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_576 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_576 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_577 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_577 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_579 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_579 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_592 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct __anonstruct_592 __anonCompField___anonunion_591_104 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_591 __anonCompField_keyring_index_key_105 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_594 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   struct keyring_index_key index_key ;
   struct __anonstruct_596 __anonCompField___anonunion_595_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_598 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_597 {
   union key_payload payload ;
   struct __anonstruct_598 __anonCompField___anonunion_597_110 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_593 __anonCompField_key_106 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_594 __anonCompField_key_107 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_595 __anonCompField_key_109 ;
   union __anonunion_597 __anonCompField_key_111 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_601 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_601 __anonCompField_cred_112 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_602 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_602 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_604 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_603 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_604 __anonCompField___anonunion_603_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_603 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_608 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_608 __anonCompField___anonstruct_607_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_610 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_612 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_614 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_613 {
   union __anonunion_614 __anonCompField___anonstruct_613_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_615 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_616 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_617 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_618 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_619 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_606 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_610 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_611 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_612 test ;
   struct __anonstruct_613 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_615 info ;
   struct __anonstruct_query_616 query ;
   struct __anonstruct_raw_tracepoint_617 raw_tracepoint ;
   struct __anonstruct_618 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_619 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_646 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_646 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_648 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct __anonstruct_tail_call_648 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_647 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_649 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_649 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_651 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_651 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_653 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_652 {
   struct __anonstruct_653 __anonCompField___anonunion_652_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_652 __anonCompField_sock_cgroup_data_154 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_676 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_676 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_682 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_683 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_684 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   struct __anonstruct_681 __anonCompField___anonunion_680_157 ;
   struct __anonstruct_682 __anonCompField___anonunion_680_158 ;
   struct __anonstruct_683 __anonCompField___anonunion_680_159 ;
   struct __anonstruct_xsk_684 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_680 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15272 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15273 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_685 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_686 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_685 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15272 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15273 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_686 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_703 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_703 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_704 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_704 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_707 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_708 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_710 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_711 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_709 {
   struct __anonstruct_elv_710 elv ;
   struct __anonstruct_flush_711 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_712 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_707 __anonCompField_request_164 ;
   union __anonunion_708 __anonCompField_request_165 ;
   union __anonunion_709 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_712 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_729 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_728 {
   void *validation_data ;
   struct __anonstruct_729 __anonCompField___anonunion_728_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_728 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_803 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_804 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_802 {
   struct __anonstruct_803 __anonCompField___anonunion_802_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_804 __anonCompField___anonunion_802_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_802 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_806 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_806 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_819 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_819 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_841 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_841 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_843 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   __addrpair skc_addrpair ;
   struct __anonstruct_843 __anonCompField___anonunion_842_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_844 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_846 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   __portpair skc_portpair ;
   struct __anonstruct_846 __anonCompField___anonunion_845_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_844 __anonCompField_sock_common_179 ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_847 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_848 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_849 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_850 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_851 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_852 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_852 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_853 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_854 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_889 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_889 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
union __anonunion_986 {
   struct hlist_head head ;
   struct hlist_nulls_head nulls_head ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   unsigned int count ;
   union __anonunion_986 __anonCompField_inet_listen_hashbucket_196 ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   unsigned int lhash2_mask ;
   struct inet_listen_hashbucket *lhash2 ;
   struct inet_listen_hashbucket listening_hash[32U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock_reuseport.h"
struct sock_reuseport {
   struct callback_head rcu ;
   u16 max_socks ;
   u16 num_socks ;
   unsigned int synq_overflow_ts ;
   unsigned int reuseport_id ;
   unsigned int bind_inany : 1 ;
   unsigned int has_conns : 1 ;
   struct bpf_prog *prog ;
   struct sock *socks[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_989 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_989 __anonCompField_ip_ra_chain_197 ;
   struct callback_head rcu ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
enum tcp_ca_event {
    CA_EVENT_TX_START = 0,
    CA_EVENT_CWND_RESTART = 1,
    CA_EVENT_COMPLETE_CWR = 2,
    CA_EVENT_LOSS = 3,
    CA_EVENT_ECN_NO_CE = 4,
    CA_EVENT_ECN_IS_CE = 5
};
#line 994 
union tcp_cc_info;
#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct ack_sample {
   u32 pkts_acked ;
   s32 rtt_us ;
   u32 in_flight ;
};
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct rate_sample {
   u64 prior_mstamp ;
   u32 prior_delivered ;
   s32 delivered ;
   long interval_us ;
   u32 snd_interval_us ;
   u32 rcv_interval_us ;
   long rtt_us ;
   int losses ;
   u32 acked_sacked ;
   u32 prior_in_flight ;
   bool is_app_limited ;
   bool is_retrans ;
   bool is_ack_delayed ;
};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_congestion_ops {
   struct list_head list ;
   u32 key ;
   u32 flags ;
   void (*init)(struct sock *) ;
   void (*release)(struct sock *) ;
   u32 (*ssthresh)(struct sock *) ;
   void (*cong_avoid)(struct sock *, u32 , u32 ) ;
   void (*set_state)(struct sock *, u8 ) ;
   void (*cwnd_event)(struct sock *, enum tcp_ca_event ) ;
   void (*in_ack_event)(struct sock *, u32 ) ;
   u32 (*undo_cwnd)(struct sock *) ;
   void (*pkts_acked)(struct sock *, struct ack_sample *) ;
   u32 (*min_tso_segs)(struct sock *) ;
   u32 (*sndbuf_expand)(struct sock *) ;
   void (*cong_control)(struct sock *, struct rate_sample *) ;
   size_t (*get_info)(struct sock *, u32 , int *, union tcp_cc_info *) ;
   char name[16U] ;
   struct module *owner ;
};
#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_fastopen_context {
   siphash_key_t key[2U] ;
   int num ;
   struct callback_head rcu ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct swStat {
   unsigned long long single_ecc_errs ;
   unsigned long long double_ecc_errs ;
   unsigned long long parity_err_cnt ;
   unsigned long long serious_err_cnt ;
   unsigned long long soft_reset_cnt ;
   unsigned long long fifo_full_cnt ;
   unsigned long long ring_full_cnt[8U] ;
   unsigned long long clubbed_frms_cnt ;
   unsigned long long sending_both ;
   unsigned long long outof_sequence_pkts ;
   unsigned long long flush_max_pkts ;
   unsigned long long sum_avg_pkts_aggregated ;
   unsigned long long num_aggregations ;
   unsigned long long mem_alloc_fail_cnt ;
   unsigned long long pci_map_fail_cnt ;
   unsigned long long watchdog_timer_cnt ;
   unsigned long long mem_allocated ;
   unsigned long long mem_freed ;
   unsigned long long link_up_cnt ;
   unsigned long long link_down_cnt ;
   unsigned long long link_up_time ;
   unsigned long long link_down_time ;
   unsigned long long tx_buf_abort_cnt ;
   unsigned long long tx_desc_abort_cnt ;
   unsigned long long tx_parity_err_cnt ;
   unsigned long long tx_link_loss_cnt ;
   unsigned long long tx_list_proc_err_cnt ;
   unsigned long long rx_parity_err_cnt ;
   unsigned long long rx_abort_cnt ;
   unsigned long long rx_parity_abort_cnt ;
   unsigned long long rx_rda_fail_cnt ;
   unsigned long long rx_unkn_prot_cnt ;
   unsigned long long rx_fcs_err_cnt ;
   unsigned long long rx_buf_size_err_cnt ;
   unsigned long long rx_rxd_corrupt_cnt ;
   unsigned long long rx_unkn_err_cnt ;
   unsigned long long tda_err_cnt ;
   unsigned long long pfc_err_cnt ;
   unsigned long long pcc_err_cnt ;
   unsigned long long tti_err_cnt ;
   unsigned long long lso_err_cnt ;
   unsigned long long tpa_err_cnt ;
   unsigned long long sm_err_cnt ;
   unsigned long long mac_tmac_err_cnt ;
   unsigned long long mac_rmac_err_cnt ;
   unsigned long long xgxs_txgxs_err_cnt ;
   unsigned long long xgxs_rxgxs_err_cnt ;
   unsigned long long rc_err_cnt ;
   unsigned long long prc_pcix_err_cnt ;
   unsigned long long rpa_err_cnt ;
   unsigned long long rda_err_cnt ;
   unsigned long long rti_err_cnt ;
   unsigned long long mc_err_cnt ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct xpakStat {
   u64 alarm_transceiver_temp_high ;
   u64 alarm_transceiver_temp_low ;
   u64 alarm_laser_bias_current_high ;
   u64 alarm_laser_bias_current_low ;
   u64 alarm_laser_output_power_high ;
   u64 alarm_laser_output_power_low ;
   u64 warn_transceiver_temp_high ;
   u64 warn_transceiver_temp_low ;
   u64 warn_laser_bias_current_high ;
   u64 warn_laser_bias_current_low ;
   u64 warn_laser_output_power_high ;
   u64 warn_laser_output_power_low ;
   u64 xpak_regs_stat ;
   u32 xpak_timer_count ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct stat_block {
   __le32 tmac_data_octets ;
   __le32 tmac_frms ;
   __le64 tmac_drop_frms ;
   __le32 tmac_bcst_frms ;
   __le32 tmac_mcst_frms ;
   __le64 tmac_pause_ctrl_frms ;
   __le32 tmac_ucst_frms ;
   __le32 tmac_ttl_octets ;
   __le32 tmac_any_err_frms ;
   __le32 tmac_nucst_frms ;
   __le64 tmac_ttl_less_fb_octets ;
   __le64 tmac_vld_ip_octets ;
   __le32 tmac_drop_ip ;
   __le32 tmac_vld_ip ;
   __le32 tmac_rst_tcp ;
   __le32 tmac_icmp ;
   __le64 tmac_tcp ;
   __le32 reserved_0 ;
   __le32 tmac_udp ;
   __le32 rmac_data_octets ;
   __le32 rmac_vld_frms ;
   __le64 rmac_fcs_err_frms ;
   __le64 rmac_drop_frms ;
   __le32 rmac_vld_bcst_frms ;
   __le32 rmac_vld_mcst_frms ;
   __le32 rmac_out_rng_len_err_frms ;
   __le32 rmac_in_rng_len_err_frms ;
   __le64 rmac_long_frms ;
   __le64 rmac_pause_ctrl_frms ;
   __le64 rmac_unsup_ctrl_frms ;
   __le32 rmac_accepted_ucst_frms ;
   __le32 rmac_ttl_octets ;
   __le32 rmac_discarded_frms ;
   __le32 rmac_accepted_nucst_frms ;
   __le32 reserved_1 ;
   __le32 rmac_drop_events ;
   __le64 rmac_ttl_less_fb_octets ;
   __le64 rmac_ttl_frms ;
   __le64 reserved_2 ;
   __le32 rmac_usized_frms ;
   __le32 reserved_3 ;
   __le32 rmac_frag_frms ;
   __le32 rmac_osized_frms ;
   __le32 reserved_4 ;
   __le32 rmac_jabber_frms ;
   __le64 rmac_ttl_64_frms ;
   __le64 rmac_ttl_65_127_frms ;
   __le64 reserved_5 ;
   __le64 rmac_ttl_128_255_frms ;
   __le64 rmac_ttl_256_511_frms ;
   __le64 reserved_6 ;
   __le64 rmac_ttl_512_1023_frms ;
   __le64 rmac_ttl_1024_1518_frms ;
   __le32 rmac_ip ;
   __le32 reserved_7 ;
   __le64 rmac_ip_octets ;
   __le32 rmac_drop_ip ;
   __le32 rmac_hdr_err_ip ;
   __le32 reserved_8 ;
   __le32 rmac_icmp ;
   __le64 rmac_tcp ;
   __le32 rmac_err_drp_udp ;
   __le32 rmac_udp ;
   __le64 rmac_xgmii_err_sym ;
   __le64 rmac_frms_q0 ;
   __le64 rmac_frms_q1 ;
   __le64 rmac_frms_q2 ;
   __le64 rmac_frms_q3 ;
   __le64 rmac_frms_q4 ;
   __le64 rmac_frms_q5 ;
   __le64 rmac_frms_q6 ;
   __le64 rmac_frms_q7 ;
   __le16 rmac_full_q3 ;
   __le16 rmac_full_q2 ;
   __le16 rmac_full_q1 ;
   __le16 rmac_full_q0 ;
   __le16 rmac_full_q7 ;
   __le16 rmac_full_q6 ;
   __le16 rmac_full_q5 ;
   __le16 rmac_full_q4 ;
   __le32 reserved_9 ;
   __le32 rmac_pause_cnt ;
   __le64 rmac_xgmii_data_err_cnt ;
   __le64 rmac_xgmii_ctrl_err_cnt ;
   __le32 rmac_err_tcp ;
   __le32 rmac_accepted_ip ;
   __le32 new_rd_req_cnt ;
   __le32 rd_req_cnt ;
   __le32 rd_rtry_cnt ;
   __le32 new_rd_req_rtry_cnt ;
   __le32 wr_req_cnt ;
   __le32 wr_rtry_rd_ack_cnt ;
   __le32 new_wr_req_rtry_cnt ;
   __le32 new_wr_req_cnt ;
   __le32 wr_disc_cnt ;
   __le32 wr_rtry_cnt ;
   __le32 txp_wr_cnt ;
   __le32 rd_rtry_wr_ack_cnt ;
   __le32 txd_wr_cnt ;
   __le32 txd_rd_cnt ;
   __le32 rxd_wr_cnt ;
   __le32 rxd_rd_cnt ;
   __le32 rxf_wr_cnt ;
   __le32 txf_rd_cnt ;
   __le32 tmac_data_octets_oflow ;
   __le32 tmac_frms_oflow ;
   __le32 tmac_bcst_frms_oflow ;
   __le32 tmac_mcst_frms_oflow ;
   __le32 tmac_ucst_frms_oflow ;
   __le32 tmac_ttl_octets_oflow ;
   __le32 tmac_any_err_frms_oflow ;
   __le32 tmac_nucst_frms_oflow ;
   __le64 tmac_vlan_frms ;
   __le32 tmac_drop_ip_oflow ;
   __le32 tmac_vld_ip_oflow ;
   __le32 tmac_rst_tcp_oflow ;
   __le32 tmac_icmp_oflow ;
   __le32 tpa_unknown_protocol ;
   __le32 tmac_udp_oflow ;
   __le32 reserved_10 ;
   __le32 tpa_parse_failure ;
   __le32 rmac_data_octets_oflow ;
   __le32 rmac_vld_frms_oflow ;
   __le32 rmac_vld_bcst_frms_oflow ;
   __le32 rmac_vld_mcst_frms_oflow ;
   __le32 rmac_accepted_ucst_frms_oflow ;
   __le32 rmac_ttl_octets_oflow ;
   __le32 rmac_discarded_frms_oflow ;
   __le32 rmac_accepted_nucst_frms_oflow ;
   __le32 rmac_usized_frms_oflow ;
   __le32 rmac_drop_events_oflow ;
   __le32 rmac_frag_frms_oflow ;
   __le32 rmac_osized_frms_oflow ;
   __le32 rmac_ip_oflow ;
   __le32 rmac_jabber_frms_oflow ;
   __le32 rmac_icmp_oflow ;
   __le32 rmac_drop_ip_oflow ;
   __le32 rmac_err_drp_udp_oflow ;
   __le32 rmac_udp_oflow ;
   __le32 reserved_11 ;
   __le32 rmac_pause_cnt_oflow ;
   __le64 rmac_ttl_1519_4095_frms ;
   __le64 rmac_ttl_4096_8191_frms ;
   __le64 rmac_ttl_8192_max_frms ;
   __le64 rmac_ttl_gt_max_frms ;
   __le64 rmac_osized_alt_frms ;
   __le64 rmac_jabber_alt_frms ;
   __le64 rmac_gt_max_alt_frms ;
   __le64 rmac_vlan_frms ;
   __le32 rmac_len_discard ;
   __le32 rmac_fcs_discard ;
   __le32 rmac_pf_discard ;
   __le32 rmac_da_discard ;
   __le32 rmac_red_discard ;
   __le32 rmac_rts_discard ;
   __le32 reserved_12 ;
   __le32 rmac_ingm_full_discard ;
   __le32 reserved_13 ;
   __le32 rmac_accepted_ip_oflow ;
   __le32 reserved_14 ;
   __le32 link_fault_cnt ;
   u8 buffer[20U] ;
   struct swStat sw_stat ;
   struct xpakStat xpak_stat ;
};
#line 378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct tx_fifo_config {
   u32 fifo_len ;
   u8 fifo_priority ;
   u8 f_no_snoop ;
};
#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct rx_ring_config {
   u32 num_rxd ;
   u8 ring_priority ;
   u8 ring_org ;
   u8 f_no_snoop ;
};
#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct config_param {
   u32 tx_fifo_num ;
   u8 tx_steering_type ;
   u8 fifo_mapping[8U] ;
   struct tx_fifo_config tx_cfg[8U] ;
   u32 max_txds ;
   u64 tx_intr_type ;
   u8 intr_type ;
   u8 napi ;
   u32 rx_ring_num ;
   struct rx_ring_config rx_cfg[8U] ;
   u16 bus_speed ;
   int max_mc_addr ;
   int max_mac_addr ;
   int mc_start_offset ;
   u8 multiq ;
};
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct mac_addr {
   u8 mac_addr[6U] ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct TxFIFO_element {
   u64 TxDL_Pointer ;
   u64 List_Control ;
};
#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct TxD {
   u64 Control_1 ;
   u64 Control_2 ;
   u64 Buffer_Pointer ;
   u64 Host_Control ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct list_info_hold {
   dma_addr_t list_phy_addr ;
   void *list_virt_addr ;
};
#line 533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct RxD_t {
   u64 Host_Control ;
   u64 Control_1 ;
   u64 Control_2 ;
};
#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct RxD1 {
   struct RxD_t h ;
   u64 Buffer0_ptr ;
};
#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct RxD3 {
   struct RxD_t h ;
   u64 Buffer0_ptr ;
   u64 Buffer1_ptr ;
   u64 Buffer2_ptr ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct RxD_block {
   struct RxD1 rxd[127U] ;
   u64 reserved_0 ;
   u64 reserved_1 ;
   u64 reserved_2_pNext_RxD_block ;
   u64 pNext_RxD_Blk_physical ;
};
#line 620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct buffAdd {
   void *ba_0_org ;
   void *ba_1_org ;
   void *ba_0 ;
   void *ba_1 ;
};
#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct rx_curr_get_info {
   u32 block_index ;
   u32 offset ;
   u32 ring_len ;
};
#line 639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct rx_curr_put_info {
   u32 block_index ;
   u32 offset ;
   u32 ring_len ;
};
#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct tx_curr_get_info {
   u32 offset ;
   u32 fifo_len ;
};
#line 654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct tx_curr_put_info {
   u32 offset ;
   u32 fifo_len ;
};
#line 659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct rxd_info {
   void *virt_addr ;
   dma_addr_t dma_addr ;
};
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct rx_block_info {
   void *block_virt_addr ;
   dma_addr_t block_dma_addr ;
   struct rxd_info *rxds ;
};
#line 672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct lro {
   struct sk_buff *parent ;
   struct sk_buff *last_frag ;
   u8 *l2h ;
   struct iphdr *iph ;
   struct tcphdr *tcph ;
   u32 tcp_next_seq ;
   __be32 tcp_ack ;
   int total_len ;
   int frags_len ;
   int sg_num ;
   int in_use ;
   __be16 window ;
   u16 vlan_tag ;
   u32 cur_tsval ;
   __be32 cur_tsecr ;
   u8 saw_ts ;
} __attribute__((__aligned__(64)));
#line 692 
struct s2io_nic;
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct ring_info {
   int ring_no ;
   u32 rx_bufs_left ;
   struct lro lro0_n[32U] ;
   u8 lro ;
   int rxd_mode ;
   int rxd_count ;
   struct s2io_nic *nic ;
   struct net_device *dev ;
   struct pci_dev *pdev ;
   struct napi_struct napi ;
   unsigned long interrupt_count ;
   struct rx_block_info rx_blocks[150U] ;
   int block_count ;
   int pkt_cnt ;
   struct rx_curr_put_info rx_curr_put_info ;
   struct rx_curr_get_info rx_curr_get_info ;
   unsigned int mtu ;
   struct buffAdd **ba ;
} __attribute__((__aligned__(64)));
#line 751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct fifo_info {
   int fifo_no ;
   int max_txds ;
   struct list_info_hold *list_info ;
   struct tx_curr_put_info tx_curr_put_info ;
   struct tx_curr_get_info tx_curr_get_info ;
   int queue_state ;
   struct net_device *dev ;
   u8 multiq ;
   spinlock_t tx_lock ;
   u64 *ufo_in_band_v ;
   struct s2io_nic *nic ;
} __attribute__((__aligned__(64)));
#line 794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct mac_info {
   struct TxFIFO_element *tx_FIFO_start[8U] ;
   struct fifo_info fifos[8U] ;
   void *zerodma_virt_addr ;
   struct ring_info rings[8U] ;
   u16 rmac_pause_time ;
   u16 mc_pause_threshold_q0q3 ;
   u16 mc_pause_threshold_q4q7 ;
   void *stats_mem ;
   dma_addr_t stats_mem_phy ;
   u32 stats_mem_sz ;
   struct stat_block *stats_info ;
};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct s2io_msix_entry {
   u16 vector ;
   u16 entry ;
   void *arg ;
   u8 type ;
   u8 in_use ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct msix_info_st {
   u64 addr ;
   u64 data ;
};
#line 857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
struct s2io_nic {
   int rxd_mode ;
   int pkts_to_process ;
   struct net_device *dev ;
   struct mac_info mac_control ;
   struct config_param config ;
   struct pci_dev *pdev ;
   void *bar0 ;
   void *bar1 ;
   struct mac_addr def_mac_addr[256U] ;
   struct net_device_stats stats ;
   int high_dma_flag ;
   int device_enabled_once ;
   char name[60U] ;
   struct timer_list alarm_timer ;
   u32 config_space[64U] ;
   u16 mc_addr_count ;
   u16 m_cast_flg ;
   u16 all_multi_pos ;
   u16 promisc_flg ;
   struct work_struct rst_timer_task ;
   struct work_struct set_link_task ;
   int rx_csum ;
   u16 fifo_selector[8U] ;
   u8 total_tcp_fifos ;
   u8 udp_fifo_idx ;
   u8 total_udp_fifos ;
   u8 other_fifo_idx ;
   struct napi_struct napi ;
   u64 adapt_ctrl_org ;
   u16 last_link_state ;
   int task_flag ;
   unsigned long long start_time ;
   int vlan_strip_flag ;
   int num_entries ;
   struct msix_entry *entries ;
   int msi_detected ;
   wait_queue_head_t msi_wait ;
   struct s2io_msix_entry *s2io_entries ;
   char desc[9U][25U] ;
   int avail_msix_vectors ;
   struct msix_info_st msix_info[63U] ;
   u8 device_type ;
   unsigned long clubbed_frms_cnt ;
   unsigned long sending_both ;
   u16 lro_max_aggr_per_sess ;
   unsigned long state ;
   u64 general_int_mask ;
   u8 product_name[80U] ;
   u8 serial_num[80U] ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io-regs.h"
struct XENA_dev_config {
   u64 general_int_status ;
   u64 general_int_mask ;
   u8 unused0[240U] ;
   u64 sw_reset ;
   u64 adapter_status ;
   u64 adapter_control ;
   u64 serr_source ;
   u64 pci_mode ;
   u8 unused_0[1752U] ;
   u64 pic_int_status ;
   u64 pic_int_mask ;
   u64 txpic_int_reg ;
   u64 txpic_int_mask ;
   u64 txpic_alarms ;
   u64 rxpic_int_reg ;
   u64 rxpic_int_mask ;
   u64 rxpic_alarms ;
   u64 flsh_int_reg ;
   u64 flsh_int_mask ;
   u64 flash_alarms ;
   u64 mdio_int_reg ;
   u64 mdio_int_mask ;
   u64 mdio_alarms ;
   u64 iic_int_reg ;
   u64 iic_int_mask ;
   u64 iic_alarms ;
   u8 unused4[8U] ;
   u64 gpio_int_reg ;
   u64 gpio_int_mask ;
   u64 gpio_alarms ;
   u8 unused5[56U] ;
   u64 tx_traffic_int ;
   u64 tx_traffic_mask ;
   u64 rx_traffic_int ;
   u64 rx_traffic_mask ;
   u64 pic_control ;
   u64 swapper_ctrl ;
   u64 pif_rd_swapper_fb ;
   u64 scheduled_int_ctrl ;
   u64 txreqtimeout ;
   u64 statsreqtimeout ;
   u64 read_retry_delay ;
   u64 read_retry_acceleration ;
   u64 write_retry_delay ;
   u64 write_retry_acceleration ;
   u64 xmsi_control ;
   u64 xmsi_access ;
   u64 xmsi_address ;
   u64 xmsi_data ;
   u64 rx_mat ;
   u8 unused6[8U] ;
   u64 tx_mat0_n[8U] ;
   u64 xmsi_mask_reg ;
   u64 stat_byte_cnt ;
   u64 stat_cfg ;
   u64 stat_addr ;
   u64 mdio_control ;
   u64 dtx_control ;
   u64 i2c_control ;
   u64 gpio_control ;
   u64 misc_control ;
   u8 unused7_1[40U] ;
   u64 pic_control2 ;
   u64 ini_dperr_ctrl ;
   u64 wreq_split_mask ;
   u8 unused7_2[1464U] ;
   u64 txdma_int_status ;
   u64 txdma_int_mask ;
   u64 pfc_err_reg ;
   u64 pfc_err_mask ;
   u64 pfc_err_alarm ;
   u64 tda_err_reg ;
   u64 tda_err_mask ;
   u64 tda_err_alarm ;
   u64 pcc_err_reg ;
   u64 pcc_err_mask ;
   u64 pcc_err_alarm ;
   u64 tti_err_reg ;
   u64 tti_err_mask ;
   u64 tti_err_alarm ;
   u64 lso_err_reg ;
   u64 lso_err_mask ;
   u64 lso_err_alarm ;
   u64 tpa_err_reg ;
   u64 tpa_err_mask ;
   u64 tpa_err_alarm ;
   u64 sm_err_reg ;
   u64 sm_err_mask ;
   u64 sm_err_alarm ;
   u8 unused8[72U] ;
   u64 tx_dma_wrap_stat ;
   u64 tx_fifo_partition_0 ;
   u64 tx_fifo_partition_1 ;
   u64 tx_fifo_partition_2 ;
   u64 tx_fifo_partition_3 ;
   u64 tx_w_round_robin_0 ;
   u64 tx_w_round_robin_1 ;
   u64 tx_w_round_robin_2 ;
   u64 tx_w_round_robin_3 ;
   u64 tx_w_round_robin_4 ;
   u64 tti_command_mem ;
   u64 tti_data1_mem ;
   u64 tti_data2_mem ;
   u64 tx_pa_cfg ;
   u64 pcc_enable ;
   u8 unused9[1416U] ;
   u64 txdma_debug_ctrl ;
   u8 unused10[248U] ;
   u64 rxdma_int_status ;
   u64 rxdma_int_mask ;
   u64 rda_err_reg ;
   u64 rda_err_mask ;
   u64 rda_err_alarm ;
   u64 rc_err_reg ;
   u64 rc_err_mask ;
   u64 rc_err_alarm ;
   u64 prc_pcix_err_reg ;
   u64 prc_pcix_err_mask ;
   u64 prc_pcix_err_alarm ;
   u64 rpa_err_reg ;
   u64 rpa_err_mask ;
   u64 rpa_err_alarm ;
   u64 rti_err_reg ;
   u64 rti_err_mask ;
   u64 rti_err_alarm ;
   u8 unused11[120U] ;
   u64 rx_queue_priority ;
   u64 rx_w_round_robin_0 ;
   u64 rx_w_round_robin_1 ;
   u64 rx_w_round_robin_2 ;
   u64 rx_w_round_robin_3 ;
   u64 rx_w_round_robin_4 ;
   u64 prc_rxd0_n[8U] ;
   u64 prc_ctrl_n[8U] ;
   u64 prc_alarm_action ;
   u64 rti_command_mem ;
   u64 rti_data1_mem ;
   u64 rti_data2_mem ;
   u64 rx_pa_cfg ;
   u64 unused_11_1 ;
   u64 ring_bump_counter1 ;
   u64 ring_bump_counter2 ;
   u8 unused12[1296U] ;
   u64 rxdma_debug_ctrl ;
   u8 unused13[248U] ;
   u64 mac_int_status ;
   u64 mac_int_mask ;
   u64 mac_tmac_err_reg ;
   u64 mac_tmac_err_mask ;
   u64 mac_tmac_err_alarm ;
   u64 mac_rmac_err_reg ;
   u64 mac_rmac_err_mask ;
   u64 mac_rmac_err_alarm ;
   u8 unused14[192U] ;
   u64 mac_cfg ;
   u64 tmac_avg_ipg ;
   u64 rmac_max_pyld_len ;
   u64 rmac_err_cfg ;
   u64 rmac_cfg_key ;
   u64 rmac_addr_cmd_mem ;
   u64 rmac_addr_data0_mem ;
   u64 rmac_addr_data1_mem ;
   u8 unused15[8U] ;
   u64 tmac_ipg_cfg ;
   u64 rmac_pause_cfg ;
   u64 rmac_red_cfg ;
   u64 rmac_red_rate_q0q3 ;
   u64 rmac_red_rate_q4q7 ;
   u64 mac_link_util ;
   u64 rmac_invalid_ipg ;
   u64 rts_frm_len_n[8U] ;
   u64 rts_qos_steering ;
   u64 rts_dix_map_n[4U] ;
   u64 rts_q_alternates ;
   u64 rts_default_q ;
   u64 rts_ctrl ;
   u64 rts_pn_cam_ctrl ;
   u64 rts_pn_cam_data ;
   u64 rts_ds_mem_ctrl ;
   u64 rts_ds_mem_data ;
   u8 unused16[1248U] ;
   u64 mac_debug_ctrl ;
   u8 unused17[248U] ;
   u64 mc_int_status ;
   u64 mc_int_mask ;
   u64 mc_err_reg ;
   u64 mc_err_mask ;
   u64 mc_err_alarm ;
   u8 unused18[216U] ;
   u64 rx_queue_cfg ;
   u64 mc_rldram_mrs ;
   u64 mc_rldram_interleave ;
   u64 mc_pause_thresh_q0q3 ;
   u64 mc_pause_thresh_q4q7 ;
   u64 mc_red_thresh_q[8U] ;
   u8 unused19[152U] ;
   u64 mc_rldram_ref_per ;
   u8 unused20[24U] ;
   u64 mc_rldram_test_ctrl ;
   u8 unused21[24U] ;
   u64 mc_rldram_test_add ;
   u8 unused22[24U] ;
   u64 mc_rldram_test_d0 ;
   u8 unused23[24U] ;
   u64 mc_rldram_test_d1 ;
   u8 unused24[120U] ;
   u64 mc_rldram_test_d2 ;
   u8 unused24_1[88U] ;
   u64 mc_rldram_ctrl ;
   u8 unused24_2[728U] ;
   u64 mc_rldram_ref_per_herc ;
   u8 unused24_3[24U] ;
   u64 mc_rldram_mrs_herc ;
   u8 unused25[152U] ;
   u64 mc_debug_ctrl ;
   u8 unused26[248U] ;
   u64 xgxs_int_status ;
   u64 xgxs_int_mask ;
   u64 xgxs_txgxs_err_reg ;
   u64 xgxs_txgxs_err_mask ;
   u64 xgxs_txgxs_err_alarm ;
   u64 xgxs_rxgxs_err_reg ;
   u64 xgxs_rxgxs_err_mask ;
   u64 xgxs_rxgxs_err_alarm ;
   u8 unused27[192U] ;
   u64 xgxs_cfg ;
   u64 xgxs_status ;
   u64 xgxs_cfg_key ;
   u64 xgxs_efifo_cfg ;
   u64 rxgxs_ber_0 ;
   u64 rxgxs_ber_1 ;
   u64 spi_control ;
   u64 spi_data ;
};
#line 1019  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
typedef int ldv_func_ret_type;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2825 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_2825 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2826 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_2826 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2842 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_2842 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_2846 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_2846 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2847 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2848 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_2847 __anonCompField_media_link_90 ;
   union __anonunion_2848 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_2850 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_2849 {
   struct __anonstruct_dev_2850 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_2849 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_2864 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_2865 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_2863 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_2864 i2c ;
   struct __anonstruct_custom_2865 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_2863 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_3766 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_3766 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 15  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_s2io_isr_13 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_s2io_ethtool_gdrvinfo_17 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_s2io_driver_18 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_6_19 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 299  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 306  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 63 
#line 63 
char *strcpy(char *, char *);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 82 
#line 992  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static char *cif_strstr(char *s1, char *s2);
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 1008  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_spin_unlock_irqrestore_tx_lock_of_fifo_info(spinlock_t *lock, unsigned long flags);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 999 
static void cif___ldv_spin_lock_tx_lock_of_fifo_info(spinlock_t *lock);
#line 35 
#line 35 
int __ldv_spin_trylock(spinlock_t *);
#line 37 
#line 1017 
static int cif___ldv_spin_trylock_tx_lock_of_fifo_info(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 27 
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 28 
char *ldv_strstr(char *cs, char *ct);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 200 
#line 200 
void __wake_up(struct wait_queue_head *, unsigned int, int, void *);
#line 248 
#line 248 
void init_wait_entry(struct wait_queue_entry *, int);
#line 1128 
#line 1128 
long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
#line 1129 
#line 1129 
void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 1055  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 1063  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 863  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void *addr)
{
  #line 57 
  unsigned char ret;
  #line 58 
  ldv_inline_asm();
  #line 57 
  return ret;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val, void *addr)
{
  #line 67 
  ldv_inline_asm();
  #line 68 
  return;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static u64 readq(void *addr)
{
  #line 95 
  u64 ret;
  #line 96 
  ldv_inline_asm();
  #line 95 
  return ret;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeq(u64 val, void *addr)
{
  #line 99 
  ldv_inline_asm();
  #line 100 
  return;
}

#line 209 
#line 209 
void iounmap(void *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 219 
long schedule_timeout(long);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1047  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 237 
void disable_irq(unsigned int);
#line 239 
#line 239 
void enable_irq(unsigned int);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 621  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 635  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 656  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_channel_offline(struct pci_dev *pdev)
{
  #line 490 
  return pdev->error_state != 1U;
}

#line 1019 
#line 1019 
void pci_dev_put(struct pci_dev *);
#line 1048 
#line 1048 
struct pci_dev *pci_get_device(unsigned int, unsigned int, struct pci_dev *);
#line 1083 
#line 1083 
int pci_read_config_byte(struct pci_dev *, int, u8 *);
#line 1084 
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1085 
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1086 
#line 1086 
int pci_write_config_byte(struct pci_dev *, int, u8);
#line 1087 
#line 1087 
int pci_write_config_word(struct pci_dev *, int, u16);
#line 1088 
#line 1088 
int pci_write_config_dword(struct pci_dev *, int, u32);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 1103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 2022 
#line 2022 
void *pci_ioremap_bar(struct pci_dev *, int);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void *pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle)
{
  #line 20 
  return dma_alloc_coherent(& hwdev->dev,size,dma_handle,2592U);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_free_consistent(struct pci_dev *hwdev, size_t size, void *vaddr, dma_addr_t dma_handle)
{
  #line 34 
  dma_free_coherent(& hwdev->dev,size,vaddr,dma_handle);
  #line 35 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  #line 40 
  return dma_map_single_attrs(& hwdev->dev,ptr,size,
                           (enum dma_data_direction)direction,0UL);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  #line 47 
  dma_unmap_single_attrs(& hwdev->dev,dma_addr,size,(enum dma_data_direction)direction,0UL);
  #line 48 
  return;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  #line 61 
  dma_unmap_page_attrs(& hwdev->dev,dma_address,size,(enum dma_data_direction)direction,0UL);
  #line 62 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 82 
  dma_sync_single_for_cpu(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 83 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 89 
  dma_sync_single_for_device(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 90 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  #line 109 
  return dma_mapping_error(& pdev->dev,dma_addr);
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 11 
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static __sum16 csum16_add(__sum16 csum, __be16 addend)
{
  #line 72 
  u16 res = csum;
  #line 74 
  res = (unsigned short)((int)res + (int)addend);
  #line 75 
  return (unsigned short)(((int)res < (int)addend) + (int)res);
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static __sum16 csum16_sub(__sum16 csum, __be16 addend)
{
  #line 80 
  return csum16_add((unsigned short)((int)csum),
                 (unsigned short)(~ ((int)addend)));
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static void csum_replace2(__sum16 *sum, __be16 old, __be16 new)
{
  #line 139 
  ;
  #line 139 
  *sum = (unsigned short)(~ ((int)csum16_add((unsigned short)((int)csum16_sub((unsigned short)(~ ((int)*sum)),(unsigned short)((int)old))),
                   (unsigned short)((int)new))));
  #line 140 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_tail_pointer(struct sk_buff *skb)
{
  #line 2158 
  skb->tail = (unsigned int)(skb->data - skb->head);
  #line 2159 
  return;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2245 
#line 2245 
void *skb_push(struct sk_buff *, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2679 
#line 1095  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  #line 3141 
  netif_tx_wake_queue(netdev_get_tx_queue(dev,0U));
  #line 3142 
  return;
}

#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_queue_stopped(struct net_device *dev)
{
  #line 3187 
  return netif_tx_queue_stopped(netdev_get_tx_queue(dev,0U));
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device *dev, u16 queue_index)
{
  #line 3436 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3438 
  return netif_tx_queue_stopped(txq);
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3456 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3458 
  netif_tx_wake_queue(txq);
  #line 3459 
  return;
}

#line 3616 
#line 3616 
void __dev_kfree_skb_irq(struct sk_buff *, enum skb_free_reason);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_irq(struct sk_buff *skb)
{
  #line 3640 
  __dev_kfree_skb_irq(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3641 
  return;
}

#line 3643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_consume_skb_irq(struct sk_buff *skb)
{
  #line 3645 
  __dev_kfree_skb_irq(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  #line 3646 
  return;
}

#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3660 
#line 3660 
int netif_rx(struct sk_buff *);
#line 3662 
#line 3662 
int netif_receive_skb(struct sk_buff *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 4131 
#line 1079  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1087  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 1071  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
__inline static bool ip_is_fragment(struct iphdr *iph)
{
  #line 387 
  return (_Bool)(((int)iph->frag_off & 65343) != 0);
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dsfield.h"
__inline static __u8 ipv4_get_dsfield(struct iphdr *iph)
{
  #line 18 
  return iph->tos;
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_ecn.h"
__inline static int INET_ECN_is_ce(__u8 dsfield)
{
  #line 23 
  return ((int)dsfield & 3) == 3;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
static int debug_level = 0;
#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
static int fifo_map[8U][8U] = {[1] = {[4] = 1, 1, 1, 1}, {[3] = 1, 1, 1, 2, 2}, {[2] = 1, 1, 2, 2, 3, 3}, {[2] = 1, 1, 2, 2, 3, 4}, {[2] = 1, 1, 2, 3, 4, 5}, {[2] = 1, 2, 3, 4, 5, 6}, {[1] = 1, 2, 3, 4, 5, 6, 7}};
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
static u16 fifo_selector[8U] = {[1] = (unsigned short)1U, (unsigned short)3U, (unsigned short)3U, (unsigned short)7U, (unsigned short)7U, (unsigned short)7U, (unsigned short)7U};
#line 982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
__inline static void SPECIAL_REG_WRITE(u64 val, void *addr, int order)
{
  #line 984 
  if (order == 2) {
    #line 985 
    writel((unsigned int)val,addr);
    #line 986 
    readl(addr);
    #line 987 
    writel((unsigned int)(val >> 32),addr + 4U);
    #line 988 
    readl(addr + 4U);
  }
  else {
    #line 990 
    writel((unsigned int)(val >> 32),addr + 4U);
    #line 991 
    readl(addr + 4U);
    #line 992 
    writel((unsigned int)val,addr);
    #line 993 
    readl(addr);
  }
  #line 995 
  return;
}

#line 1058 
#line 7651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_init_nic(struct pci_dev *pdev, struct pci_device_id *pre);
#line 1059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 8142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_rem_nic(struct pci_dev *pdev);
#line 1060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int init_shared_mem(struct s2io_nic *nic);
#line 1061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void free_shared_mem(struct s2io_nic *nic);
#line 1062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 1185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int init_nic(struct s2io_nic *nic);
#line 1063  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 2883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int rx_intr_handler(struct ring_info *ring_data, int budget);
#line 1064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 4259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_txpic_intr_handle(struct s2io_nic *sp);
#line 1065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 2992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void tx_intr_handler(struct fifo_info *fifo_data);
#line 1066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 4351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_handle_errors(void *dev_id);
#line 1068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 7241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_tx_watchdog(struct net_device *dev);
#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 4876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_set_multicast(struct net_device *dev);
#line 1070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 7270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int rx_osm_handler(struct ring_info *ring_data, struct RxD_t *rxdp);
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 7454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_link(struct s2io_nic *sp, int link);
#line 1072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 3391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_reset(struct s2io_nic *sp);
#line 1073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 2754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_poll_msix(struct napi_struct *napi_0, int budget);
#line 1074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 2783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_poll_inta(struct napi_struct *napi_0, int budget);
#line 1075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 7494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_init_pci(struct s2io_nic *sp);
#line 1076  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 5204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int do_s2io_prog_unicast(struct net_device *dev, u8 *addr);
#line 1077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_alarm_handle(struct timer_list *t);
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 4195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static irqreturn_t s2io_msix_ring_handle(int irq, void *dev_id);
#line 1081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 4222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static irqreturn_t s2io_msix_fifo_handle(int irq, void *dev_id);
#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 4653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static irqreturn_t s2io_isr(int irq, void *dev_id);
#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 2110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int verify_xena_quiescence(struct s2io_nic *sp);
#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 6584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static struct ethtool_ops netdev_ethtool_ops;
#line 1085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 6664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_set_link(struct work_struct *work);
#line 1086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 3514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_set_swapper(struct s2io_nic *sp);
#line 1087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 7086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_card_down(struct s2io_nic *sp);
#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 7091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_card_up(struct s2io_nic *sp);
#line 1089  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 3328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int wait_for_cmd_complete(void *addr, u64 busy_bit, int bit_state);
#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 6907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_add_isr(struct s2io_nic *sp);
#line 1092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 7003  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_rem_isr(struct s2io_nic *sp);
#line 1094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 3667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void restore_xmsi_data(struct s2io_nic *nic);
#line 1095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 5042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void do_s2io_store_unicast_mc(struct s2io_nic *sp);
#line 1096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 5059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void do_s2io_restore_unicast_mc(struct s2io_nic *sp);
#line 1097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 5156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static u64 do_s2io_read_unicast_mc(struct s2io_nic *sp, int offset);
#line 1098  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 5075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int do_s2io_add_mc(struct s2io_nic *sp, u8 *addr);
#line 1099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 5110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int do_s2io_add_mac(struct s2io_nic *sp, u64 addr, int off);
#line 1100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 5132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int do_s2io_delete_unicast_mc(struct s2io_nic *sp, u64 addr);
#line 1102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 8360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_club_tcp_session(struct ring_info *ring_data, u8 *buffer, u8 **tcp, u32 *tcp_len, struct lro **lro, struct RxD_t *rxdp, struct s2io_nic *sp);
#line 1105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 8458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void clear_lro_session(struct lro *lro);
#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 8465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void queue_rx_frame(struct sk_buff *skb, u16 vlan_tag);
#line 1107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 8251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void update_L3L4_header(struct s2io_nic *sp, struct lro *lro);
#line 1108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 8479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void lro_append_pkt(struct s2io_nic *sp, struct lro *lro, struct sk_buff *skb, u32 tcp_len);
#line 1110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 7597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int rts_ds_steer(struct s2io_nic *nic, u8 ds_codepoint, u8 ring);
#line 1112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 8505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static pci_ers_result_t s2io_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state);
#line 1114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 8534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static pci_ers_result_t s2io_io_slot_reset(struct pci_dev *pdev);
#line 1115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.h"
#line 8557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_io_resume(struct pci_dev *pdev);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static char s2io_driver_name[9U] = {(char)'N', (char)'e', (char)'t', (char)'e', (char)'r', (char)'i', (char)'o', (char)'n'};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static char s2io_driver_version[10U] = {(char)'2', (char)'.', (char)'0', (char)'.', (char)'2', (char)'6', (char)'.', (char)'2', (char)'8'};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int rxd_size[2U] = {32, 48};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int rxd_count[2U] = {127, 85};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
__inline static int RXD_IS_UP2DT(struct RxD_t *rxdp)
{
  #line 102 
  int ret;
  #line 104 
  ret = ((rxdp->Control_1 & 72057594037927936ULL) == 0ULL && rxdp->Control_2 >> 62 != 3ULL) != 0;
  #line 107 
  return ret;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
__inline static int is_s2io_card_up(struct s2io_nic *sp)
{
  #line 125 
  return (int)test_bit(1L,& sp->state);
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static char s2io_gstrings[5U][32U] = {{(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)'\t', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'E', (char)'e', (char)'p', (char)'r', (char)'o', (char)'m', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)'\t', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)'\t', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'R', (char)'L', (char)'D', (char)'R', (char)'A', (char)'M', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)'\t', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'B', (char)'I', (char)'S', (char)'T', (char)' ', (char)'T', (char)'e', (char)'s', (char)'t', (char)'\t', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static char ethtool_xena_stats_keys[94U][32U] = {{(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'d', (char)'a', (char)'t', (char)'a', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'m', (char)'c', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'b', (char)'c', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'u', (char)'c', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'n', (char)'u', (char)'c', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'a', (char)'n', (char)'y', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'l', (char)'e', (char)'s', (char)'s', (char)'_', (char)'f', (char)'b', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'v', (char)'l', (char)'d', (char)'_', (char)'i', (char)'p', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'v', (char)'l', (char)'d', (char)'_', (char)'i', (char)'p'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'i', (char)'p'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'i', (char)'c', (char)'m', (char)'p'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'s', (char)'t', (char)'_', (char)'t', (char)'c', (char)'p'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'c', (char)'p'}, {(char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'u', (char)'d', (char)'p'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'v', (char)'l', (char)'d', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'d', (char)'a', (char)'t', (char)'a', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'c', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'v', (char)'l', (char)'d', (char)'_', (char)'m', (char)'c', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'v', (char)'l', (char)'d', (char)'_', (char)'b', (char)'c', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'i', (char)'n', (char)'_', (char)'r', (char)'n', (char)'g', (char)'_', (char)'l', (char)'e', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'r', (char)'n', (char)'g', (char)'_', (char)'l', (char)'e', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'u', (char)'n', (char)'s', (char)'u', (char)'p', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'a', (char)'c', (char)'c', (char)'e', (char)'p', (char)'t', (char)'e', (char)'d', (char)'_', (char)'u', (char)'c', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'a', (char)'c', (char)'c', (char)'e', (char)'p', (char)'t', (char)'e', (char)'d', (char)'_', (char)'n', (char)'u', (char)'c', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'e', (char)'d', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'e', (char)'v', (char)'e', (char)'n', (char)'t', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'l', (char)'e', (char)'s', (char)'s', (char)'_', (char)'f', (char)'b', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'u', (char)'s', (char)'i', (char)'z', (char)'e', (char)'d', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'o', (char)'s', (char)'i', (char)'z', (char)'e', (char)'d', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'6', (char)'4', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'6', (char)'5', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'i', (char)'p'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'i', (char)'p', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'h', (char)'d', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'i', (char)'p'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'i', (char)'p'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'i', (char)'c', (char)'m', (char)'p'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'c', (char)'p'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'u', (char)'d', (char)'p'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'d', (char)'r', (char)'p', (char)'_', (char)'u', (char)'d', (char)'p'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'x', (char)'g', (char)'m', (char)'i', (char)'i', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'s', (char)'y', (char)'m'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s', (char)'_', (char)'q', (char)'0'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s', (char)'_', (char)'q', (char)'1'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s', (char)'_', (char)'q', (char)'2'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s', (char)'_', (char)'q', (char)'3'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s', (char)'_', (char)'q', (char)'4'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s', (char)'_', (char)'q', (char)'5'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s', (char)'_', (char)'q', (char)'6'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s', (char)'_', (char)'q', (char)'7'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'q', (char)'0'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'q', (char)'1'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'q', (char)'2'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'q', (char)'3'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'q', (char)'4'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'q', (char)'5'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'q', (char)'6'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'q', (char)'7'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'x', (char)'g', (char)'m', (char)'i', (char)'i', (char)'_', (char)'d', (char)'a', (char)'t', (char)'a', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'x', (char)'g', (char)'m', (char)'i', (char)'i', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'a', (char)'c', (char)'c', (char)'e', (char)'p', (char)'t', (char)'e', (char)'d', (char)'_', (char)'i', (char)'p'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'t', (char)'c', (char)'p'}, {(char)'r', (char)'d', (char)'_', (char)'r', (char)'e', (char)'q', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'n', (char)'e', (char)'w', (char)'_', (char)'r', (char)'d', (char)'_', (char)'r', (char)'e', (char)'q', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'n', (char)'e', (char)'w', (char)'_', (char)'r', (char)'d', (char)'_', (char)'r', (char)'e', (char)'q', (char)'_', (char)'r', (char)'t', (char)'r', (char)'y', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'d', (char)'_', (char)'r', (char)'t', (char)'r', (char)'y', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'w', (char)'r', (char)'_', (char)'r', (char)'t', (char)'r', (char)'y', (char)'_', (char)'r', (char)'d', (char)'_', (char)'a', (char)'c', (char)'k', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'w', (char)'r', (char)'_', (char)'r', (char)'e', (char)'q', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'n', (char)'e', (char)'w', (char)'_', (char)'w', (char)'r', (char)'_', (char)'r', (char)'e', (char)'q', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'n', (char)'e', (char)'w', (char)'_', (char)'w', (char)'r', (char)'_', (char)'r', (char)'e', (char)'q', (char)'_', (char)'r', (char)'t', (char)'r', (char)'y', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'w', (char)'r', (char)'_', (char)'r', (char)'t', (char)'r', (char)'y', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'w', (char)'r', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'d', (char)'_', (char)'r', (char)'t', (char)'r', (char)'y', (char)'_', (char)'w', (char)'r', (char)'_', (char)'a', (char)'c', (char)'k', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'t', (char)'x', (char)'p', (char)'_', (char)'w', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'t', (char)'x', (char)'d', (char)'_', (char)'r', (char)'d', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'t', (char)'x', (char)'d', (char)'_', (char)'w', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'x', (char)'d', (char)'_', (char)'r', (char)'d', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'x', (char)'d', (char)'_', (char)'w', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'t', (char)'x', (char)'f', (char)'_', (char)'r', (char)'d', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'x', (char)'f', (char)'_', (char)'w', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}};
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static char ethtool_enhanced_stats_keys[16U][32U] = {{(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'4', (char)'0', (char)'9', (char)'5', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'4', (char)'0', (char)'9', (char)'6', (char)'_', (char)'8', (char)'1', (char)'9', (char)'1', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'8', (char)'1', (char)'9', (char)'2', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'t', (char)'l', (char)'_', (char)'g', (char)'t', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'o', (char)'s', (char)'i', (char)'z', (char)'e', (char)'d', (char)'_', (char)'a', (char)'l', (char)'t', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'a', (char)'l', (char)'t', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'g', (char)'t', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'a', (char)'l', (char)'t', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'v', (char)'l', (char)'a', (char)'n', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'l', (char)'e', (char)'n', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'c', (char)'s', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'p', (char)'f', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'d', (char)'a', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'e', (char)'d', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'t', (char)'s', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d'}, {(char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'i', (char)'n', (char)'g', (char)'m', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d'}, {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'f', (char)'a', (char)'u', (char)'l', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}};
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static char ethtool_driver_stats_keys[72U][32U] = {{(char)'\n', (char)' ', (char)'D', (char)'R', (char)'I', (char)'V', (char)'E', (char)'R', (char)' ', (char)'S', (char)'T', (char)'A', (char)'T', (char)'I', (char)'S', (char)'T', (char)'I', (char)'C', (char)'S'}, {(char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'_', (char)'b', (char)'i', (char)'t', (char)'_', (char)'e', (char)'c', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'s'}, {(char)'d', (char)'o', (char)'u', (char)'b', (char)'l', (char)'e', (char)'_', (char)'b', (char)'i', (char)'t', (char)'_', (char)'e', (char)'c', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'s'}, {(char)'p', (char)'a', (char)'r', (char)'i', (char)'t', (char)'y', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'s', (char)'e', (char)'r', (char)'i', (char)'o', (char)'u', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'s', (char)'o', (char)'f', (char)'t', (char)'_', (char)'r', (char)'e', (char)'s', (char)'e', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'0', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'1', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'2', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'3', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'4', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'5', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'6', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'7', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'a', (char)'l', (char)'a', (char)'r', (char)'m', (char)'_', (char)'t', (char)'r', (char)'a', (char)'n', (char)'s', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'r', (char)'_', (char)'t', (char)'e', (char)'m', (char)'p', (char)'_', (char)'h', (char)'i', (char)'g', (char)'h'}, {(char)'a', (char)'l', (char)'a', (char)'r', (char)'m', (char)'_', (char)'t', (char)'r', (char)'a', (char)'n', (char)'s', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'r', (char)'_', (char)'t', (char)'e', (char)'m', (char)'p', (char)'_', (char)'l', (char)'o', (char)'w'}, {(char)'a', (char)'l', (char)'a', (char)'r', (char)'m', (char)'_', (char)'l', (char)'a', (char)'s', (char)'e', (char)'r', (char)'_', (char)'b', (char)'i', (char)'a', (char)'s', (char)'_', (char)'c', (char)'u', (char)'r', (char)'r', (char)'e', (char)'n', (char)'t', (char)'_', (char)'h', (char)'i', (char)'g', (char)'h'}, {(char)'a', (char)'l', (char)'a', (char)'r', (char)'m', (char)'_', (char)'l', (char)'a', (char)'s', (char)'e', (char)'r', (char)'_', (char)'b', (char)'i', (char)'a', (char)'s', (char)'_', (char)'c', (char)'u', (char)'r', (char)'r', (char)'e', (char)'n', (char)'t', (char)'_', (char)'l', (char)'o', (char)'w'}, {(char)'a', (char)'l', (char)'a', (char)'r', (char)'m', (char)'_', (char)'l', (char)'a', (char)'s', (char)'e', (char)'r', (char)'_', (char)'o', (char)'u', (char)'t', (char)'p', (char)'u', (char)'t', (char)'_', (char)'p', (char)'o', (char)'w', (char)'e', (char)'r', (char)'_', (char)'h', (char)'i', (char)'g', (char)'h'}, {(char)'a', (char)'l', (char)'a', (char)'r', (char)'m', (char)'_', (char)'l', (char)'a', (char)'s', (char)'e', (char)'r', (char)'_', (char)'o', (char)'u', (char)'t', (char)'p', (char)'u', (char)'t', (char)'_', (char)'p', (char)'o', (char)'w', (char)'e', (char)'r', (char)'_', (char)'l', (char)'o', (char)'w'}, {(char)'w', (char)'a', (char)'r', (char)'n', (char)'_', (char)'t', (char)'r', (char)'a', (char)'n', (char)'s', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'r', (char)'_', (char)'t', (char)'e', (char)'m', (char)'p', (char)'_', (char)'h', (char)'i', (char)'g', (char)'h'}, {(char)'w', (char)'a', (char)'r', (char)'n', (char)'_', (char)'t', (char)'r', (char)'a', (char)'n', (char)'s', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'r', (char)'_', (char)'t', (char)'e', (char)'m', (char)'p', (char)'_', (char)'l', (char)'o', (char)'w'}, {(char)'w', (char)'a', (char)'r', (char)'n', (char)'_', (char)'l', (char)'a', (char)'s', (char)'e', (char)'r', (char)'_', (char)'b', (char)'i', (char)'a', (char)'s', (char)'_', (char)'c', (char)'u', (char)'r', (char)'r', (char)'e', (char)'n', (char)'t', (char)'_', (char)'h', (char)'i', (char)'g', (char)'h'}, {(char)'w', (char)'a', (char)'r', (char)'n', (char)'_', (char)'l', (char)'a', (char)'s', (char)'e', (char)'r', (char)'_', (char)'b', (char)'i', (char)'a', (char)'s', (char)'_', (char)'c', (char)'u', (char)'r', (char)'r', (char)'e', (char)'n', (char)'t', (char)'_', (char)'l', (char)'o', (char)'w'}, {(char)'w', (char)'a', (char)'r', (char)'n', (char)'_', (char)'l', (char)'a', (char)'s', (char)'e', (char)'r', (char)'_', (char)'o', (char)'u', (char)'t', (char)'p', (char)'u', (char)'t', (char)'_', (char)'p', (char)'o', (char)'w', (char)'e', (char)'r', (char)'_', (char)'h', (char)'i', (char)'g', (char)'h'}, {(char)'w', (char)'a', (char)'r', (char)'n', (char)'_', (char)'l', (char)'a', (char)'s', (char)'e', (char)'r', (char)'_', (char)'o', (char)'u', (char)'t', (char)'p', (char)'u', (char)'t', (char)'_', (char)'p', (char)'o', (char)'w', (char)'e', (char)'r', (char)'_', (char)'l', (char)'o', (char)'w'}, {(char)'l', (char)'r', (char)'o', (char)'_', (char)'a', (char)'g', (char)'g', (char)'r', (char)'e', (char)'g', (char)'a', (char)'t', (char)'e', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'l', (char)'r', (char)'o', (char)'_', (char)'f', (char)'l', (char)'u', (char)'s', (char)'h', (char)'_', (char)'b', (char)'o', (char)'t', (char)'h', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, {(char)'l', (char)'r', (char)'o', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'o', (char)'f', (char)'_', (char)'s', (char)'e', (char)'q', (char)'u', (char)'e', (char)'n', (char)'c', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'l', (char)'r', (char)'o', (char)'_', (char)'f', (char)'l', (char)'u', (char)'s', (char)'h', (char)'_', (char)'d', (char)'u', (char)'e', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'l', (char)'r', (char)'o', (char)'_', (char)'a', (char)'v', (char)'g', (char)'_', (char)'a', (char)'g', (char)'g', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'e', (char)'m', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'p', (char)'c', (char)'i', (char)'_', (char)'m', (char)'a', (char)'p', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'w', (char)'a', (char)'t', (char)'c', (char)'h', (char)'d', (char)'o', (char)'g', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'m', (char)'e', (char)'m', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'a', (char)'t', (char)'e', (char)'d'}, {(char)'m', (char)'e', (char)'m', (char)'_', (char)'f', (char)'r', (char)'e', (char)'e', (char)'d'}, {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'u', (char)'p', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'d', (char)'o', (char)'w', (char)'n', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'u', (char)'p', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e'}, {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'d', (char)'o', (char)'w', (char)'n', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e'}, {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'b', (char)'u', (char)'f', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'p', (char)'a', (char)'r', (char)'i', (char)'t', (char)'y', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'l', (char)'o', (char)'s', (char)'s', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'l', (char)'i', (char)'s', (char)'t', (char)'_', (char)'p', (char)'r', (char)'o', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'p', (char)'a', (char)'r', (char)'i', (char)'t', (char)'y', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'p', (char)'a', (char)'r', (char)'i', (char)'t', (char)'y', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'r', (char)'d', (char)'a', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'u', (char)'n', (char)'k', (char)'n', (char)'_', (char)'p', (char)'r', (char)'o', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'f', (char)'c', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'b', (char)'u', (char)'f', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'r', (char)'x', (char)'d', (char)'_', (char)'c', (char)'o', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'u', (char)'n', (char)'k', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'t', (char)'d', (char)'a', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'p', (char)'f', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'p', (char)'c', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'t', (char)'t', (char)'i', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'t', (char)'p', (char)'a', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'s', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'l', (char)'s', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'m', (char)'a', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'m', (char)'a', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'x', (char)'g', (char)'x', (char)'s', (char)'_', (char)'t', (char)'x', (char)'g', (char)'x', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'x', (char)'g', (char)'x', (char)'s', (char)'_', (char)'r', (char)'x', (char)'g', (char)'x', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'p', (char)'r', (char)'c', (char)'_', (char)'p', (char)'c', (char)'i', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'p', (char)'a', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'d', (char)'a', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'r', (char)'t', (char)'i', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'m', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void do_s2io_copy_mac_addr(struct s2io_nic *sp, int offset, u64 mac_addr)
{
  #line 344 
  sp->def_mac_addr[offset].mac_addr[5] = (unsigned char)mac_addr;
  #line 345 
  sp->def_mac_addr[offset].mac_addr[4] = (unsigned char)(mac_addr >> 8);
  #line 346 
  sp->def_mac_addr[offset].mac_addr[3] = (unsigned char)(mac_addr >> 16);
  #line 347 
  sp->def_mac_addr[offset].mac_addr[2] = (unsigned char)(mac_addr >> 24);
  #line 348 
  sp->def_mac_addr[offset].mac_addr[1] = (unsigned char)(mac_addr >> 32);
  #line 349 
  sp->def_mac_addr[offset].mac_addr[0] = (unsigned char)(mac_addr >> 40);
  #line 350 
  return;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static u64 herc_act_dtx_cfg[17U] = {9223377625520865280ULL, 9223377625520865504ULL, 9223377625520865284ULL, 9223377625520865508ULL, 9223659099588067328ULL, 9223659099588067552ULL, 9223659099588067332ULL, 9223659099588067556ULL, 9228444174410579968ULL, 9228444174410580192ULL, 9228444174410579972ULL, 9228444174410580196ULL, 9223940578621784064ULL, 9223940578621784288ULL, 9223940578621784068ULL, 9223940578621784292ULL};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static u64 xena_dtx_cfg[13U] = {9223377624607227904ULL, 9223377624607228128ULL, 9223377628251357188ULL, 9223377628251357412ULL, 9223659099583938560ULL, 9223659099583938784ULL, 9223659099585904644ULL, 9223659099585904868ULL, 9223940574560649216ULL, 9223940574560649440ULL, 9223940578621784068ULL, 9223940578621784292ULL};
#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static u64 fix_mac[29U] = {};
#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int tx_fifo_num = 5U;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int rx_ring_num = 1U;
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int multiq = 0U;
#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int rx_ring_mode = 1U;
#line 426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int use_continuous_tx_intrs = 1U;
#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int rmac_pause_time = 256U;
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int mc_pause_threshold_q0q3 = 187U;
#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int mc_pause_threshold_q4q7 = 187U;
#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int shared_splits = 0U;
#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int tmac_util_period = 5U;
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int rmac_util_period = 5U;
#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int tx_steering_type = 2U;
#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int rxsync_frequency = 3U;
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int intr_type = 2U;
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int lro_max_pkts = 65535U;
#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int indicate_max_pkts = 0U;
#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int napi = 1U;
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int vlan_tag_strip = 2U;
#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int tx_fifo_len[8U] = {4096U, 512U, 512U, 512U, 512U, 512U, 512U, 512U};
#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int rx_ring_sz[8U] = {30U, 30U, 30U, 30U, 30U, 30U, 30U, 30U};
#line 455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static unsigned int rts_frm_len[8U] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U};
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static struct pci_device_id s2io_tbl[5U] = {{.vendor = 6101U, .device = 22321U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6101U, .device = 22577U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6101U, .device = 22322U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6101U, .device = 22578U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
struct pci_device_id __mod_pci__s2io_tbl_device_table[5U];
#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static struct pci_error_handlers s2io_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& s2io_io_error_detected), .slot_reset = & s2io_io_slot_reset, .resume = & s2io_io_resume};
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static struct pci_driver s2io_driver = {.name = (char *)"S2IO", .id_table = (struct pci_device_id *)(& s2io_tbl), .probe = & s2io_init_nic, .remove = & s2io_rem_nic, .err_handler = & s2io_err_handler};
#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
__inline static void s2io_stop_all_tx_queue(struct s2io_nic *sp)
{
  #line 500 
  if ((unsigned int)sp->config.multiq == 0U) {
    #line 501 
    int i;
    #line 503 
    i = 0;
    #line 503 
    while (sp->config.tx_fifo_num > (unsigned int)i) {
      #line 504 
      sp->mac_control.fifos[i].queue_state = 1;
      #line 503 
      i ++;
    }
  }
  #line 506 
  netif_tx_stop_all_queues(sp->dev);
  #line 507 
  return;
}

#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
__inline static void s2io_stop_tx_queue(struct s2io_nic *sp, int fifo_no)
{
  #line 511 
  if ((unsigned int)sp->config.multiq == 0U) 
                                             #line 512 
                                             sp->mac_control.fifos[fifo_no].queue_state = 1;
  #line 515 
  netif_tx_stop_all_queues(sp->dev);
  #line 516 
  return;
}

#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
__inline static void s2io_start_all_tx_queue(struct s2io_nic *sp)
{
  #line 520 
  if ((unsigned int)sp->config.multiq == 0U) {
    #line 521 
    int i;
    #line 523 
    i = 0;
    #line 523 
    while (sp->config.tx_fifo_num > (unsigned int)i) {
      #line 524 
      sp->mac_control.fifos[i].queue_state = 0;
      #line 523 
      i ++;
    }
  }
  #line 526 
  netif_tx_start_all_queues(sp->dev);
  #line 527 
  return;
}

#line 529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
__inline static void s2io_wake_all_tx_queue(struct s2io_nic *sp)
{
  #line 531 
  if ((unsigned int)sp->config.multiq == 0U) {
    #line 532 
    int i;
    #line 534 
    i = 0;
    #line 534 
    while (sp->config.tx_fifo_num > (unsigned int)i) {
      #line 535 
      sp->mac_control.fifos[i].queue_state = 0;
      #line 534 
      i ++;
    }
  }
  #line 537 
  netif_tx_wake_all_queues(sp->dev);
  #line 538 
  return;
}

#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
__inline static void s2io_wake_tx_queue(struct fifo_info *fifo, int cnt, u8 multiq_0)
{
  #line 544 
  if ((unsigned int)multiq_0 != 0U) {
    #line 545 
    if (cnt != 0) {
      #line 545 
      if ((int)__netif_subqueue_stopped(fifo->dev,
                               (unsigned short)((int)((unsigned short)fifo->fifo_no))) != 0) 
        #line 546 
        netif_wake_subqueue(fifo->dev,(unsigned short)((int)((unsigned short)fifo->fifo_no)));
    }
  }
  else 
    #line 547 
    if (cnt != 0 && fifo->queue_state == 1) {
      #line 548 
      if ((int)netif_queue_stopped(fifo->dev) != 0) {
        #line 549 
        fifo->queue_state = 0;
        #line 550 
        netif_wake_queue(fifo->dev);
      }
    }
  #line 552 
  return;
}

#line 563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int init_shared_mem(struct s2io_nic *nic)
{
  #line 565 
  u32 size;
  #line 566 
  void *tmp_v_addr;
  #line 566 
  void *tmp_v_addr_next;
  #line 567 
  dma_addr_t tmp_p_addr;
  #line 567 
  dma_addr_t tmp_p_addr_next;
  #line 569 
  int i;
  #line 569 
  int j;
  #line 569 
  int blk_cnt;
  #line 570 
  int lst_size;
  #line 570 
  int lst_per_page;
  #line 572 
  unsigned long tmp;
  #line 573 
  struct buffAdd *ba;
  #line 568 
  struct RxD_block *pre_rxd_blk = (struct RxD_block *)0;
  #line 571 
  struct net_device *dev = nic->dev;
  #line 574 
  struct config_param *config = & nic->config;
  #line 575 
  struct mac_info *mac_control = & nic->mac_control;
  #line 576 
  unsigned long long mem_allocated = 0ULL;
  #line 579 
  size = 0U;
  #line 580 
  i = 0;
  #line 580 
  while (config->tx_fifo_num > (unsigned int)i) {
    {
      #line 581 
      struct tx_fifo_config *tx_cfg = & config->tx_cfg[i];
      #line 583 
      size = tx_cfg->fifo_len + size;
    }
    #line 580 
    i ++;
  }
  #line 585 
  if (size > 8192U) {
    #line 586 
    if (debug_level >= 0) 
                          #line 586 
                          printk((char *)"\001",size,8192);
    #line 589 
    return -22;
  }
  #line 592 
  size = 0U;
  #line 593 
  i = 0;
  #line 593 
  while (config->tx_fifo_num > (unsigned int)i) {
    {
      #line 594 
      struct tx_fifo_config *tx_cfg_0 = & config->tx_cfg[i];
      #line 596 
      size = tx_cfg_0->fifo_len;
      #line 600 
      if (size <= 1U) {
        #line 601 
        if (debug_level >= 0) 
                              #line 601 
                              printk((char *)"\001",i,size);
        #line 604 
        return -22;
      }
    }
    #line 593 
    i ++;
  }
  #line 608 
  lst_size = (int)(config->max_txds * 32U);
  #line 609 
  lst_per_page = (int)(4096UL / (unsigned long)lst_size);
  #line 611 
  i = 0;
  #line 611 
  while (config->tx_fifo_num > (unsigned int)i) {
    {
      #line 612 
      struct fifo_info *fifo = & mac_control->fifos[i];
      #line 613 
      struct tx_fifo_config *tx_cfg_1 = & config->tx_cfg[i];
      #line 614 
      int fifo_len = (int)tx_cfg_1->fifo_len;
      #line 615 
      int list_holder_size = (int)((unsigned long)fifo_len * (unsigned long)16U);
      #line 617 
      fifo->list_info = (struct list_info_hold *)kzalloc((unsigned long)list_holder_size,3264U);
      #line 618 
      if (fifo->list_info == (struct list_info_hold *)0) {
        #line 619 
        if (debug_level > 1) 
                             #line 619 
                             printk((char *)"\001");
        #line 620 
        return -12;
      }
      #line 622 
      mem_allocated = (unsigned long long)list_holder_size + mem_allocated;
    }
    #line 611 
    i ++;
  }
  #line 624 
  i = 0;
  #line 624 
  while (config->tx_fifo_num > (unsigned int)i) {
    {
      #line 625 
      int page_num = (int)(((config->tx_cfg[i].fifo_len + (unsigned int)lst_per_page) + 4294967295U) / (unsigned int)lst_per_page);
      #line 627 
      struct fifo_info *fifo_0 = & mac_control->fifos[i];
      #line 628 
      struct tx_fifo_config *tx_cfg_2 = & config->tx_cfg[i];
      #line 630 
      fifo_0->tx_curr_put_info.offset = 0U;
      #line 631 
      fifo_0->tx_curr_put_info.fifo_len = tx_cfg_2->fifo_len + 4294967295U;
      #line 632 
      fifo_0->tx_curr_get_info.offset = 0U;
      #line 633 
      fifo_0->tx_curr_get_info.fifo_len = tx_cfg_2->fifo_len + 4294967295U;
      #line 634 
      fifo_0->fifo_no = i;
      #line 635 
      fifo_0->nic = nic;
      #line 636 
      fifo_0->max_txds = 19;
      #line 637 
      fifo_0->dev = dev;
      #line 639 
      j = 0;
      #line 639 
      while (j < page_num) {
        {
          #line 641 
          dma_addr_t tmp_p;
          #line 642 
          void *tmp_v;
          #line 640 
          int k = 0;
          #line 643 
          tmp_v = pci_alloc_consistent(nic->pdev,4096UL,& tmp_p);
          #line 645 
          if (tmp_v == (void *)0) {
            #line 646 
            if (debug_level > 1) 
                                 #line 646 
                                 printk((char *)"\001");
            #line 648 
            return -12;
          }
          #line 655 
          if (tmp_p == 0ULL) {
            #line 656 
            mac_control->zerodma_virt_addr = tmp_v;
            #line 657 
            if (debug_level > 0) 
                                 #line 657 
                                 printk((char *)"\001",(char *)(& dev->name),tmp_v);
            #line 661 
            tmp_v = pci_alloc_consistent(nic->pdev,4096UL,& tmp_p);
            #line 663 
            if (tmp_v == (void *)0) {
              #line 664 
              if (debug_level > 1) 
                                   #line 664 
                                   printk((char *)"\001");
              #line 666 
              return -12;
            }
            #line 668 
            mem_allocated += 4096ULL;
          }
          #line 670 
          while (k < lst_per_page) {
            #line 671 
            int l = j * lst_per_page + k;
            #line 672 
            if (tx_cfg_2->fifo_len == (unsigned int)l) 
                                                       #line 673 
                                                       break;
            #line 674 
            (fifo_0->list_info + (unsigned long)l)->list_virt_addr = tmp_v + (unsigned long)(k * lst_size);
            #line 676 
            (fifo_0->list_info + (unsigned long)l)->list_phy_addr = (unsigned long long)(k * lst_size) + tmp_p;
            #line 678 
            k ++;
          }
        }
        #line 639 
        j ++;
      }
    }
    #line 624 
    i ++;
  }
  #line 683 
  i = 0;
  #line 683 
  while (config->tx_fifo_num > (unsigned int)i) {
    {
      #line 684 
      struct fifo_info *fifo_1 = & mac_control->fifos[i];
      #line 685 
      struct tx_fifo_config *tx_cfg_3 = & config->tx_cfg[i];
      #line 687 
      size = tx_cfg_3->fifo_len;
      #line 688 
      fifo_1->ufo_in_band_v = (u64 *)kcalloc((unsigned long)size,8UL,3264U);
      #line 689 
      if (fifo_1->ufo_in_band_v == (u64 *)0ULL) 
                                                #line 690 
                                                return -12;
      #line 691 
      mem_allocated = (unsigned long long)((unsigned long)size * 8UL) + mem_allocated;
    }
    #line 683 
    i ++;
  }
  #line 695 
  size = 0U;
  #line 696 
  i = 0;
  #line 696 
  while (config->rx_ring_num > (unsigned int)i) {
    {
      #line 697 
      struct rx_ring_config *rx_cfg = & config->rx_cfg[i];
      #line 698 
      struct ring_info *ring = & mac_control->rings[i];
      #line 700 
      if (rx_cfg->num_rxd % (unsigned int)(rxd_count[nic->rxd_mode] + 1) != 0U) {
        #line 701 
        if (debug_level >= 0) 
                              #line 701 
                              printk((char *)"\001",(char *)(& dev->name),i);
        #line 704 
        return -1;
      }
      #line 706 
      size = rx_cfg->num_rxd + size;
      #line 707 
      ring->block_count = (int)(rx_cfg->num_rxd / (unsigned int)(rxd_count[nic->rxd_mode] + 1));
      #line 709 
      ring->pkt_cnt = (int)(rx_cfg->num_rxd - (unsigned int)ring->block_count);
    }
    #line 696 
    i ++;
  }
  #line 711 
  if (nic->rxd_mode == 0) 
                          #line 712 
                          size *= 32U; else 
                                            #line 714 
                                            size *= 48U;
  #line 716 
  i = 0;
  #line 716 
  while (config->rx_ring_num > (unsigned int)i) {
    {
      #line 717 
      struct rx_ring_config *rx_cfg_0 = & config->rx_cfg[i];
      #line 718 
      struct ring_info *ring_0 = & mac_control->rings[i];
      #line 720 
      ring_0->rx_curr_get_info.block_index = 0U;
      #line 721 
      ring_0->rx_curr_get_info.offset = 0U;
      #line 722 
      ring_0->rx_curr_get_info.ring_len = rx_cfg_0->num_rxd + 4294967295U;
      #line 723 
      ring_0->rx_curr_put_info.block_index = 0U;
      #line 724 
      ring_0->rx_curr_put_info.offset = 0U;
      #line 725 
      ring_0->rx_curr_put_info.ring_len = rx_cfg_0->num_rxd + 4294967295U;
      #line 726 
      ring_0->nic = nic;
      #line 727 
      ring_0->ring_no = i;
      #line 729 
      blk_cnt = (int)(rx_cfg_0->num_rxd / (unsigned int)(rxd_count[nic->rxd_mode] + 1));
      #line 731 
      j = 0;
      #line 731 
      while (j < blk_cnt) {
        {
          #line 732 
          struct rx_block_info *rx_blocks;
          #line 733 
          int l_0;
          #line 735 
          rx_blocks = & ring_0->rx_blocks[j];
          #line 736 
          size = 4096U;
          #line 737 
          tmp_v_addr = pci_alloc_consistent(nic->pdev,(unsigned long)size,& tmp_p_addr);
          #line 739 
          if (tmp_v_addr == (void *)0) {
            #line 746 
            rx_blocks->block_virt_addr = tmp_v_addr;
            #line 747 
            return -12;
          }
          #line 749 
          mem_allocated = (unsigned long long)size + mem_allocated;
          #line 751 
          size = (unsigned int)((unsigned long)rxd_count[nic->rxd_mode]) * 16U;
          #line 753 
          rx_blocks->block_virt_addr = tmp_v_addr;
          #line 754 
          rx_blocks->block_dma_addr = tmp_p_addr;
          #line 755 
          rx_blocks->rxds = (struct rxd_info *)kmalloc((unsigned long)size,3264U);
          #line 756 
          if (rx_blocks->rxds == (struct rxd_info *)0) 
                                                       #line 757 
                                                       return -12;
          #line 758 
          mem_allocated = (unsigned long long)size + mem_allocated;
          #line 759 
          l_0 = 0;
          #line 759 
          while (rxd_count[nic->rxd_mode] > l_0) {
            #line 760 
            (rx_blocks->rxds + (unsigned long)l_0)->virt_addr = rx_blocks->block_virt_addr + (unsigned long)(rxd_size[nic->rxd_mode] * l_0);
            #line 763 
            (rx_blocks->rxds + (unsigned long)l_0)->dma_addr = rx_blocks->block_dma_addr + (unsigned long long)(rxd_size[nic->rxd_mode] * l_0);
            #line 759 
            l_0 ++;
          }
        }
        #line 731 
        j ++;
      }
      #line 769 
      j = 0;
      #line 769 
      while (j < blk_cnt) {
        {
          #line 770 
          int next = (j + 1) % blk_cnt;
          #line 771 
          tmp_v_addr = ring_0->rx_blocks[j].block_virt_addr;
          #line 772 
          tmp_v_addr_next = ring_0->rx_blocks[next].block_virt_addr;
          #line 773 
          tmp_p_addr = ring_0->rx_blocks[j].block_dma_addr;
          #line 774 
          tmp_p_addr_next = ring_0->rx_blocks[next].block_dma_addr;
          #line 776 
          pre_rxd_blk = (struct RxD_block *)tmp_v_addr;
          #line 777 
          pre_rxd_blk->reserved_2_pNext_RxD_block = (unsigned long long)tmp_v_addr_next;
          #line 779 
          pre_rxd_blk->pNext_RxD_Blk_physical = tmp_p_addr_next;
        }
        #line 769 
        j ++;
      }
    }
    #line 716 
    i ++;
  }
  #line 783 
  if (nic->rxd_mode == 1) {
    #line 788 
    i = 0;
    #line 788 
    while (config->rx_ring_num > (unsigned int)i) {
      {
        #line 789 
        struct rx_ring_config *rx_cfg_1 = & config->rx_cfg[i];
        #line 790 
        struct ring_info *ring_1 = & mac_control->rings[i];
        #line 792 
        blk_cnt = (int)(rx_cfg_1->num_rxd / (unsigned int)(rxd_count[nic->rxd_mode] + 1));
        #line 794 
        size = (unsigned int)((unsigned long)blk_cnt) * 8U;
        #line 795 
        ring_1->ba = (struct buffAdd **)kmalloc((unsigned long)size,3264U);
        #line 796 
        if (ring_1->ba == (struct buffAdd **)0) 
                                                #line 797 
                                                return -12;
        #line 798 
        mem_allocated = (unsigned long long)size + mem_allocated;
        #line 799 
        j = 0;
        #line 799 
        while (j < blk_cnt) {
          {
            #line 800 
            int k_0 = 0;
            #line 802 
            size = (unsigned int)((unsigned long)(rxd_count[nic->rxd_mode] + 1)) * 32U;
            #line 804 
            *(ring_1->ba + (unsigned long)j) = (struct buffAdd *)kmalloc((unsigned long)size,3264U);
            #line 805 
            if (*(ring_1->ba + (unsigned long)j) == (struct buffAdd *)0) 
              #line 806 
              return -12;
            #line 807 
            mem_allocated = (unsigned long long)size + mem_allocated;
            #line 808 
            while (rxd_count[nic->rxd_mode] != k_0) {
              #line 809 
              ba = *(ring_1->ba + (unsigned long)j) + (unsigned long)k_0;
              #line 810 
              size = 167U;
              #line 811 
              ba->ba_0_org = kmalloc((unsigned long)size,3264U);
              #line 812 
              if (ba->ba_0_org == (void *)0) 
                                             #line 813 
                                             return -12;
              #line 814 
              mem_allocated = (unsigned long long)size + mem_allocated;
              #line 815 
              tmp = (unsigned long)ba->ba_0_org;
              #line 816 
              tmp += 127UL;
              #line 817 
              tmp &= 18446744073709551488UL;
              #line 818 
              ba->ba_0 = (void *)tmp;
              #line 820 
              size = 128U;
              #line 821 
              ba->ba_1_org = kmalloc((unsigned long)size,3264U);
              #line 822 
              if (ba->ba_1_org == (void *)0) 
                                             #line 823 
                                             return -12;
              #line 824 
              mem_allocated = (unsigned long long)size + mem_allocated;
              #line 825 
              tmp = (unsigned long)ba->ba_1_org;
              #line 826 
              tmp += 127UL;
              #line 827 
              tmp &= 18446744073709551488UL;
              #line 828 
              ba->ba_1 = (void *)tmp;
              #line 829 
              k_0 ++;
            }
          }
          #line 799 
          j ++;
        }
      }
      #line 788 
      i ++;
    }
  }
  #line 836 
  size = 1416U;
  #line 837 
  mac_control->stats_mem = pci_alloc_consistent(nic->pdev,(unsigned long)size,& mac_control->stats_mem_phy);
  #line 841 
  if (mac_control->stats_mem == (void *)0) 
                                           #line 847 
                                           return -12;
  #line 849 
  mem_allocated = (unsigned long long)size + mem_allocated;
  #line 850 
  mac_control->stats_mem_sz = size;
  #line 852 
  tmp_v_addr = mac_control->stats_mem;
  #line 853 
  mac_control->stats_info = (struct stat_block *)tmp_v_addr;
  #line 854 
  memset(tmp_v_addr,0,(unsigned long)size);
  #line 855 
  if (debug_level > 0) {
    #line 855 
    ;
    #line 855 
    printk((char *)"\001",dev_name(& (nic->pdev)->dev),tmp_p_addr);
  }
  #line 857 
  (mac_control->stats_info)->sw_stat.mem_allocated += mem_allocated;
  #line 858 
  return 0;
}

#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void free_shared_mem(struct s2io_nic *nic)
{
  #line 870 
  int i;
  #line 870 
  int j;
  #line 870 
  int blk_cnt;
  #line 870 
  int size;
  #line 871 
  void *tmp_v_addr;
  #line 872 
  dma_addr_t tmp_p_addr;
  #line 873 
  int lst_size;
  #line 873 
  int lst_per_page;
  #line 874 
  struct net_device *dev;
  #line 876 
  struct config_param *config;
  #line 877 
  struct mac_info *mac_control;
  #line 878 
  struct stat_block *stats;
  #line 879 
  struct swStat *swstats;
  #line 875 
  int page_num = 0;
  #line 881 
  if (nic == (struct s2io_nic *)0) 
                                   #line 882 
                                   return;
  #line 884 
  dev = nic->dev;
  #line 886 
  config = & nic->config;
  #line 887 
  mac_control = & nic->mac_control;
  #line 888 
  stats = mac_control->stats_info;
  #line 889 
  swstats = & stats->sw_stat;
  #line 891 
  lst_size = (int)(config->max_txds * 32U);
  #line 892 
  lst_per_page = (int)(4096UL / (unsigned long)lst_size);
  #line 894 
  i = 0;
  #line 894 
  while (config->tx_fifo_num > (unsigned int)i) {
    {
      #line 895 
      struct fifo_info *fifo = & mac_control->fifos[i];
      #line 896 
      struct tx_fifo_config *tx_cfg = & config->tx_cfg[i];
      #line 898 
      page_num = (int)(((tx_cfg->fifo_len + (unsigned int)lst_per_page) + 4294967295U) / (unsigned int)lst_per_page);
      #line 899 
      j = 0;
      #line 899 
      while (j < page_num) {
        {
          #line 901 
          struct list_info_hold *fli;
          #line 900 
          int mem_blks = j * lst_per_page;
          #line 903 
          if (fifo->list_info == (struct list_info_hold *)0) 
                                                             #line 904 
                                                             return;
          #line 906 
          fli = fifo->list_info + (unsigned long)mem_blks;
          #line 907 
          if (fli->list_virt_addr == (void *)0) 
                                                #line 908 
                                                break;
          #line 909 
          pci_free_consistent(nic->pdev,4096UL,fli->list_virt_addr,fli->list_phy_addr);
          #line 912 
          swstats->mem_freed += 4096ULL;
        }
        #line 899 
        j ++;
      }
      #line 917 
      if (mac_control->zerodma_virt_addr != (void *)0) {
        #line 918 
        pci_free_consistent(nic->pdev,4096UL,mac_control->zerodma_virt_addr,0ULL);
        #line 921 
        if (debug_level > 0) 
                             #line 921 
                             printk((char *)"\001",(char *)(& dev->name),mac_control->zerodma_virt_addr);
        #line 925 
        swstats->mem_freed += 4096ULL;
      }
      #line 927 
      kfree((void *)fifo->list_info);
      #line 928 
      swstats->mem_freed += (unsigned long long)((unsigned long)tx_cfg->fifo_len * 16UL);
    }
    #line 894 
    i ++;
  }
  #line 932 
  size = 4096;
  #line 933 
  i = 0;
  #line 933 
  while (config->rx_ring_num > (unsigned int)i) {
    {
      #line 934 
      struct ring_info *ring = & mac_control->rings[i];
      #line 936 
      blk_cnt = ring->block_count;
      #line 937 
      j = 0;
      #line 937 
      while (j < blk_cnt) {
        #line 938 
        tmp_v_addr = ring->rx_blocks[j].block_virt_addr;
        #line 939 
        tmp_p_addr = ring->rx_blocks[j].block_dma_addr;
        #line 940 
        if (tmp_v_addr == (void *)0) 
                                     #line 941 
                                     break;
        #line 942 
        pci_free_consistent(nic->pdev,(unsigned long)size,tmp_v_addr,tmp_p_addr);
        #line 944 
        swstats->mem_freed += (unsigned long long)size;
        #line 945 
        kfree((void *)ring->rx_blocks[j].rxds);
        #line 946 
        swstats->mem_freed += (unsigned long long)((unsigned long)rxd_count[nic->rxd_mode] * 16UL);
        #line 937 
        j ++;
      }
    }
    #line 933 
    i ++;
  }
  #line 951 
  if (nic->rxd_mode == 1) {
    #line 953 
    i = 0;
    #line 953 
    while (config->rx_ring_num > (unsigned int)i) {
      {
        #line 954 
        struct rx_ring_config *rx_cfg = & config->rx_cfg[i];
        #line 955 
        struct ring_info *ring_0 = & mac_control->rings[i];
        #line 957 
        blk_cnt = (int)(rx_cfg->num_rxd / (unsigned int)(rxd_count[nic->rxd_mode] + 1));
        #line 959 
        j = 0;
        #line 959 
        while (j < blk_cnt) {
          {
            #line 960 
            int k = 0;
            #line 961 
            if (*(ring_0->ba + (unsigned long)j) == (struct buffAdd *)0) 
              #line 962 
              goto __Cont;
            #line 963 
            while (rxd_count[nic->rxd_mode] != k) {
              #line 964 
              struct buffAdd *ba = *(ring_0->ba + (unsigned long)j) + (unsigned long)k;
              #line 965 
              kfree(ba->ba_0_org);
              #line 966 
              swstats->mem_freed += 167ULL;
              #line 968 
              kfree(ba->ba_1_org);
              #line 969 
              swstats->mem_freed += 128ULL;
              #line 971 
              k ++;
            }
            #line 973 
            kfree((void *)*(ring_0->ba + (unsigned long)j));
            #line 974 
            swstats->mem_freed += (unsigned long long)((unsigned long)(rxd_count[nic->rxd_mode] + 1) * 32UL);
          }
          #line 959 
          __Cont: 
                  #line 959 
          j ++;
        }
        #line 977 
        kfree((void *)ring_0->ba);
        #line 978 
        swstats->mem_freed += (unsigned long long)((unsigned long)blk_cnt * 8UL);
      }
      #line 953 
      i ++;
    }
  }
  #line 983 
  i = 0;
  #line 983 
  while (nic->config.tx_fifo_num > (unsigned int)i) {
    {
      #line 984 
      struct fifo_info *fifo_0 = & mac_control->fifos[i];
      #line 985 
      struct tx_fifo_config *tx_cfg_0 = & config->tx_cfg[i];
      #line 987 
      if (fifo_0->ufo_in_band_v != (u64 *)0ULL) {
        #line 988 
        swstats->mem_freed += (unsigned long long)((unsigned long)tx_cfg_0->fifo_len * 8UL);
        #line 990 
        kfree((void *)fifo_0->ufo_in_band_v);
      }
    }
    #line 983 
    i ++;
  }
  #line 994 
  if (mac_control->stats_mem != (void *)0) {
    #line 995 
    swstats->mem_freed += (unsigned long long)mac_control->stats_mem_sz;
    #line 996 
    pci_free_consistent(nic->pdev,(unsigned long)mac_control->stats_mem_sz,mac_control->stats_mem,mac_control->stats_mem_phy);
  }
  #line 1001 
  return;
}

#line 1007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_verify_pci_mode(struct s2io_nic *nic)
{
  #line 1011 
  int mode;
  #line 1009 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 1010 
  register u64 val64 = 0ULL;
  #line 1013 
  val64 = readq((void *)(& bar0->pci_mode));
  #line 1014 
  mode = (int)((unsigned char)(val64 >> 60));
  #line 1016 
  if ((val64 & 18014398509481984ULL) != 0ULL) 
                                              #line 1017 
                                              return -1;
  #line 1018 
  return mode;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_on_nec_bridge(struct pci_dev *s2io_pdev)
{
  #line 1025 
  struct pci_dev *tdev = (struct pci_dev *)0;
  #line 1026 
  while (1) {
    #line 1026 
    tdev = pci_get_device(4294967295U,4294967295U,tdev);
    #line 1026 
    if (! (tdev != (struct pci_dev *)0)) 
                                         #line 1026 
                                         break;
    #line 1027 
    if ((unsigned int)tdev->vendor == 4147U && (unsigned int)tdev->device == 293U) 
      #line 1028 
      if (tdev->bus == (s2io_pdev->bus)->parent) {
        #line 1029 
        pci_dev_put(tdev);
        #line 1030 
        return 1;
      }
  }
  #line 1034 
  return 0;
}

#line 1037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int bus_speed[8U] = {33, 133, 133, 200, 266, 133, 200, 266};
#line 1041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_print_pci_mode(struct s2io_nic *nic)
{
  #line 1045 
  int mode;
  #line 1047 
  char *pcimode;
  #line 1043 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 1044 
  register u64 val64 = 0ULL;
  #line 1046 
  struct config_param *config = & nic->config;
  #line 1049 
  val64 = readq((void *)(& bar0->pci_mode));
  #line 1050 
  mode = (int)((unsigned char)(val64 >> 60));
  #line 1052 
  if ((val64 & 18014398509481984ULL) != 0ULL) 
                                              #line 1053 
                                              return -1;
  #line 1055 
  config->bus_speed = (unsigned short)bus_speed[mode];
  #line 1057 
  if (s2io_on_nec_bridge(nic->pdev) != 0) {
    #line 1058 
    if (debug_level >= 0) 
                          #line 1058 
                          printk((char *)"\001",(char *)(& (nic->dev)->name));
    #line 1060 
    return mode;
  }
  #line 1063 
  switch (mode) {
    #line 1064 
    case 0: 
            #line 1064 
    ;
    #line 1065 
    pcimode = (char *)"33MHz PCI bus";
    #line 1066 
    break;
    #line 1067 
    case 1: 
            #line 1067 
    ;
    #line 1068 
    pcimode = (char *)"66MHz PCI bus";
    #line 1069 
    break;
    #line 1070 
    case 2: 
            #line 1070 
    ;
    #line 1071 
    pcimode = (char *)"66MHz PCIX(M1) bus";
    #line 1072 
    break;
    #line 1073 
    case 3: 
            #line 1073 
    ;
    #line 1074 
    pcimode = (char *)"100MHz PCIX(M1) bus";
    #line 1075 
    break;
    #line 1076 
    case 4: 
            #line 1076 
    ;
    #line 1077 
    pcimode = (char *)"133MHz PCIX(M1) bus";
    #line 1078 
    break;
    #line 1079 
    case 5: 
            #line 1079 
    ;
    #line 1080 
    pcimode = (char *)"133MHz PCIX(M2) bus";
    #line 1081 
    break;
    #line 1082 
    case 6: 
            #line 1082 
    ;
    #line 1083 
    pcimode = (char *)"200MHz PCIX(M2) bus";
    #line 1084 
    break;
    #line 1085 
    case 7: 
            #line 1085 
    ;
    #line 1086 
    pcimode = (char *)"266MHz PCIX(M2) bus";
    #line 1087 
    break;
    #line 1088 
    default: 
             #line 1088 
    ;
    #line 1089 
    pcimode = (char *)"unsupported bus!";
    #line 1090 
    mode = -1;
  }
  #line 1093 
  if (debug_level >= 0) {
    #line 1093 
    int tmp_0;
    #line 1093 
    ;
    #line 1093 
    if ((val64 & 36028797018963968ULL) != 0ULL) 
                                                #line 1093 
                                                tmp_0 = 32; else 
                                                                 #line 1093 
                                                                 tmp_0 = 64;
    #line 1093 
    ;
    #line 1093 
    printk((char *)"\001",(char *)(& (nic->dev)->name),tmp_0,pcimode);
  }
  #line 1096 
  return mode;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int init_tti(struct s2io_nic *nic, int link)
{
  #line 1113 
  int i;
  #line 1111 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 1112 
  register u64 val64 = 0ULL;
  #line 1114 
  struct config_param *config = & nic->config;
  #line 1116 
  i = 0;
  #line 1116 
  while (config->tx_fifo_num > (unsigned int)i) {
    {
      #line 1122 
      if ((unsigned int)nic->device_type == 2U) {
        #line 1123 
        int count = ((int)nic->config.bus_speed * 125) / 2;
        #line 1124 
        val64 = (unsigned long long)count << 32;
      }
      else 
           #line 1126 
           val64 = 35699768164352ULL;
      #line 1128 
      val64 |= 34213936ULL;
      #line 1132 
      if (i == 0) 
        #line 1133 
        if (use_continuous_tx_intrs != 0U && link == 2) 
                                                        #line 1134 
                                                        val64 |= 16777216ULL;
      #line 1135 
      writeq(val64,(void *)(& bar0->tti_data1_mem));
      #line 1137 
      if ((unsigned int)nic->config.intr_type == 2U) 
                                                     #line 1138 
                                                     val64 = 4504699172553472ULL;
      else 
        #line 1143 
        if ((((unsigned int)nic->config.tx_steering_type == 2U && config->tx_fifo_num > 1U) && (int)nic->udp_fifo_idx <= i) && (int)nic->udp_fifo_idx + (int)nic->total_udp_fifos > i) 
          #line 1149 
          val64 = 22518547909443872ULL; else 
                                             #line 1154 
                                             val64 = 4503737070518400ULL;
      #line 1160 
      writeq(val64,(void *)(& bar0->tti_data2_mem));
      #line 1162 
      val64 = ((unsigned long long)i << 32) | 72339069014638592ULL;
      #line 1165 
      writeq(val64,(void *)(& bar0->tti_command_mem));
      #line 1167 
      if (wait_for_cmd_complete((void *)(& bar0->tti_command_mem),
                            281474976710656ULL,1) != 0) 
        #line 1170 
        return -1;
    }
    #line 1116 
    i ++;
  }
  #line 1173 
  return 0;
}

#line 1185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int init_nic(struct s2io_nic *nic)
{
  #line 1190 
  void *add;
  #line 1191 
  u32 time;
  #line 1192 
  int i;
  #line 1192 
  int j;
  #line 1194 
  unsigned long long mem_share;
  #line 1195 
  int mem_size;
  #line 1187 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 1188 
  struct net_device *dev = nic->dev;
  #line 1189 
  register u64 val64 = 0ULL;
  #line 1193 
  int dtx_cnt = 0;
  #line 1196 
  struct config_param *config = & nic->config;
  #line 1197 
  struct mac_info *mac_control = & nic->mac_control;
  #line 1200 
  if (s2io_set_swapper(nic) != 0) {
    #line 1201 
    if (debug_level >= 0) 
                          #line 1201 
                          printk((char *)"\001");
    #line 1202 
    return -5;
  }
  #line 1208 
  if (((int)nic->device_type & 2) != 0) {
    #line 1209 
    val64 = 708669603840ULL;
    #line 1210 
    writeq(val64,(void *)(& bar0->sw_reset));
    #line 1211 
    msleep(500U);
    #line 1212 
    val64 = readq((void *)(& bar0->sw_reset));
  }
  #line 1216 
  val64 = 0ULL;
  #line 1217 
  writeq(val64,(void *)(& bar0->sw_reset));
  #line 1218 
  msleep(500U);
  #line 1219 
  val64 = readq((void *)(& bar0->sw_reset));
  #line 1224 
  if ((unsigned int)nic->device_type == 2U) {
    #line 1225 
    i = 0;
    #line 1225 
    while (i <= 49) {
      #line 1226 
      val64 = readq((void *)(& bar0->adapter_status));
      #line 1227 
      if ((val64 & 137438953472ULL) == 0ULL) 
                                             #line 1228 
                                             break;
      #line 1229 
      msleep(10U);
      #line 1225 
      i ++;
    }
    #line 1231 
    if (i == 50) 
                 #line 1232 
                 return -19;
  }
  #line 1236 
  add = (void *)(& bar0->mac_cfg);
  #line 1237 
  val64 = readq((void *)(& bar0->mac_cfg));
  #line 1238 
  val64 |= 18014398509481984ULL;
  #line 1239 
  writeq(5480036321579761664ULL,(void *)(& bar0->rmac_cfg_key));
  #line 1240 
  writel((unsigned int)val64,add);
  #line 1241 
  writeq(5480036321579761664ULL,(void *)(& bar0->rmac_cfg_key));
  #line 1242 
  writel((unsigned int)(val64 >> 32),add + 4U);
  #line 1245 
  val64 = readq((void *)(& bar0->mac_int_mask));
  #line 1246 
  val64 = readq((void *)(& bar0->mc_int_mask));
  #line 1247 
  val64 = readq((void *)(& bar0->xgxs_int_mask));
  #line 1250 
  val64 = (unsigned long long)dev->mtu;
  #line 1251 
  writeq(val64 << 48,(void *)(& bar0->rmac_max_pyld_len));
  #line 1253 
  if (((int)nic->device_type & 2) != 0) 
    #line 1254 
    while (herc_act_dtx_cfg[dtx_cnt] != 0ULL) {
      #line 1255 
      SPECIAL_REG_WRITE(herc_act_dtx_cfg[dtx_cnt],(void *)(& bar0->dtx_control),1);
      #line 1257 
      if ((dtx_cnt & 1) != 0) 
                              #line 1258 
                              msleep(1U);
      #line 1259 
      dtx_cnt ++;
    }
  else 
    #line 1262 
    while (xena_dtx_cfg[dtx_cnt] != 0ULL) {
      #line 1263 
      SPECIAL_REG_WRITE(xena_dtx_cfg[dtx_cnt],(void *)(& bar0->dtx_control),1);
      #line 1265 
      val64 = readq((void *)(& bar0->dtx_control));
      #line 1266 
      dtx_cnt ++;
    }
  #line 1271 
  val64 = 0ULL;
  #line 1272 
  writeq(val64,(void *)(& bar0->tx_fifo_partition_0));
  #line 1273 
  writeq(val64,(void *)(& bar0->tx_fifo_partition_1));
  #line 1274 
  writeq(val64,(void *)(& bar0->tx_fifo_partition_2));
  #line 1275 
  writeq(val64,(void *)(& bar0->tx_fifo_partition_3));
  #line 1277 
  i = 0;
  #line 1277 
  j = 0;
  #line 1277 
  while (config->tx_fifo_num > (unsigned int)i) {
    {
      #line 1278 
      struct tx_fifo_config *tx_cfg = & config->tx_cfg[i];
      #line 1280 
      val64 = ((((unsigned long long)tx_cfg->fifo_len + 18446744073709551615ULL) << (1 - j) * 32) | ((unsigned long long)tx_cfg->fifo_priority << (56 - j * 32))) | val64;
      #line 1283 
      if (config->tx_fifo_num + 4294967295U == (unsigned int)i) 
        #line 1284 
        if (((unsigned int)i & 1U) == 0U) 
                                          #line 1285 
                                          i ++;
      #line 1288 
      switch (i) {
        #line 1289 
        case 1: 
                #line 1289 
        ;
        #line 1290 
        writeq(val64,(void *)(& bar0->tx_fifo_partition_0));
        #line 1291 
        val64 = 0ULL;
        #line 1292 
        j = 0;
        #line 1293 
        break;
        #line 1294 
        case 3: 
                #line 1294 
        ;
        #line 1295 
        writeq(val64,(void *)(& bar0->tx_fifo_partition_1));
        #line 1296 
        val64 = 0ULL;
        #line 1297 
        j = 0;
        #line 1298 
        break;
        #line 1299 
        case 5: 
                #line 1299 
        ;
        #line 1300 
        writeq(val64,(void *)(& bar0->tx_fifo_partition_2));
        #line 1301 
        val64 = 0ULL;
        #line 1302 
        j = 0;
        #line 1303 
        break;
        #line 1304 
        case 7: 
                #line 1304 
        ;
        #line 1305 
        writeq(val64,(void *)(& bar0->tx_fifo_partition_3));
        #line 1306 
        val64 = 0ULL;
        #line 1307 
        j = 0;
        #line 1308 
        break;
        #line 1309 
        default: 
                 #line 1309 
        ;
        #line 1310 
        j ++;
        #line 1311 
        break;
      }
    }
    #line 1277 
    i ++;
  }
  #line 1319 
  if ((unsigned int)nic->device_type == 1U && (unsigned int)(nic->pdev)->revision <= 3U) 
    #line 1320 
    writeq(1080863910568919040ULL,(void *)(& bar0->pcc_enable));
  #line 1322 
  val64 = readq((void *)(& bar0->tx_fifo_partition_0));
  #line 1323 
  if (debug_level > 0) 
                       #line 1323 
                       printk((char *)"\001",& bar0->tx_fifo_partition_0,val64);
  #line 1330 
  val64 = readq((void *)(& bar0->tx_pa_cfg));
  #line 1331 
  val64 |= 8214565720323784704ULL;
  #line 1335 
  writeq(val64,(void *)(& bar0->tx_pa_cfg));
  #line 1338 
  val64 = 0ULL;
  #line 1339 
  i = 0;
  #line 1339 
  while (config->rx_ring_num > (unsigned int)i) {
    {
      #line 1340 
      struct rx_ring_config *rx_cfg = & config->rx_cfg[i];
      #line 1342 
      val64 = ((unsigned long long)rx_cfg->ring_priority << (7 - i) * 8) | val64;
    }
    #line 1339 
    i ++;
  }
  #line 1344 
  writeq(val64,(void *)(& bar0->rx_queue_priority));
  #line 1350 
  val64 = 0ULL;
  #line 1351 
  if (((int)nic->device_type & 2) != 0) 
                                        #line 1352 
                                        mem_size = 32; else 
                                                            #line 1354 
                                                            mem_size = 64;
  #line 1356 
  i = 0;
  #line 1356 
  while (config->rx_ring_num > (unsigned int)i) {
    #line 1357 
    switch (i) {
      #line 1358 
      case 0: 
              #line 1358 
      ;
      #line 1359 
      mem_share = (unsigned long long)((unsigned int)mem_size / config->rx_ring_num + (unsigned int)mem_size % config->rx_ring_num);
      #line 1361 
      val64 = (mem_share << 56) | val64;
      #line 1362 
      goto __Cont;
      #line 1363 
      case 1: 
              #line 1363 
      ;
      #line 1364 
      mem_share = (unsigned long long)((unsigned int)mem_size / config->rx_ring_num);
      #line 1365 
      val64 = (mem_share << 48) | val64;
      #line 1366 
      goto __Cont;
      #line 1367 
      case 2: 
              #line 1367 
      ;
      #line 1368 
      mem_share = (unsigned long long)((unsigned int)mem_size / config->rx_ring_num);
      #line 1369 
      val64 = (mem_share << 40) | val64;
      #line 1370 
      goto __Cont;
      #line 1371 
      case 3: 
              #line 1371 
      ;
      #line 1372 
      mem_share = (unsigned long long)((unsigned int)mem_size / config->rx_ring_num);
      #line 1373 
      val64 = (mem_share << 32) | val64;
      #line 1374 
      goto __Cont;
      #line 1375 
      case 4: 
              #line 1375 
      ;
      #line 1376 
      mem_share = (unsigned long long)((unsigned int)mem_size / config->rx_ring_num);
      #line 1377 
      val64 = (mem_share << 24) | val64;
      #line 1378 
      goto __Cont;
      #line 1379 
      case 5: 
              #line 1379 
      ;
      #line 1380 
      mem_share = (unsigned long long)((unsigned int)mem_size / config->rx_ring_num);
      #line 1381 
      val64 = (mem_share << 16) | val64;
      #line 1382 
      goto __Cont;
      #line 1383 
      case 6: 
              #line 1383 
      ;
      #line 1384 
      mem_share = (unsigned long long)((unsigned int)mem_size / config->rx_ring_num);
      #line 1385 
      val64 = (mem_share << 8) | val64;
      #line 1386 
      goto __Cont;
      #line 1387 
      case 7: 
              #line 1387 
      ;
      #line 1388 
      mem_share = (unsigned long long)((unsigned int)mem_size / config->rx_ring_num);
      #line 1389 
      val64 |= mem_share;
      #line 1390 
      goto __Cont;
    }
    #line 1356 
    __Cont: 
            #line 1356 
    i ++;
  }
  #line 1393 
  writeq(val64,(void *)(& bar0->rx_queue_cfg));
  #line 1399 
  switch (config->tx_fifo_num) {
    #line 1400 
    case (u32)1: 
                 #line 1400 
    ;
    #line 1401 
    val64 = 0ULL;
    #line 1402 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_0));
    #line 1403 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_1));
    #line 1404 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_2));
    #line 1405 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_3));
    #line 1406 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_4));
    #line 1407 
    break;
    #line 1408 
    case (u32)2: 
                 #line 1408 
    ;
    #line 1409 
    val64 = 281479271743489ULL;
    #line 1410 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_0));
    #line 1411 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_1));
    #line 1412 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_2));
    #line 1413 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_3));
    #line 1414 
    val64 = 281479271677952ULL;
    #line 1415 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_4));
    #line 1416 
    break;
    #line 1417 
    case (u32)3: 
                 #line 1417 
    ;
    #line 1418 
    val64 = 283674016874497ULL;
    #line 1419 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_0));
    #line 1420 
    val64 = 144116296177484288ULL;
    #line 1421 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_1));
    #line 1422 
    val64 = 72620548319871234ULL;
    #line 1423 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_2));
    #line 1424 
    val64 = 283674016874497ULL;
    #line 1425 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_3));
    #line 1426 
    val64 = 144116296177418240ULL;
    #line 1427 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_4));
    #line 1428 
    break;
    #line 1429 
    case (u32)4: 
                 #line 1429 
    ;
    #line 1430 
    val64 = 283686884934147ULL;
    #line 1431 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_0));
    #line 1432 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_1));
    #line 1433 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_2));
    #line 1434 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_3));
    #line 1435 
    val64 = 283686884868096ULL;
    #line 1436 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_4));
    #line 1437 
    break;
    #line 1438 
    case (u32)5: 
                 #line 1438 
    ;
    #line 1439 
    val64 = 283686951977218ULL;
    #line 1440 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_0));
    #line 1441 
    val64 = 217298686349345792ULL;
    #line 1442 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_1));
    #line 1443 
    val64 = 72623859706167811ULL;
    #line 1444 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_2));
    #line 1445 
    val64 = 288231484303867905ULL;
    #line 1446 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_3));
    #line 1447 
    val64 = 144964011052498944ULL;
    #line 1448 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_4));
    #line 1449 
    break;
    #line 1450 
    case (u32)6: 
                 #line 1450 
    ;
    #line 1451 
    val64 = 283686952304641ULL;
    #line 1452 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_0));
    #line 1453 
    val64 = 144964032527401475ULL;
    #line 1454 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_1));
    #line 1455 
    val64 = 289637755363984389ULL;
    #line 1456 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_2));
    #line 1457 
    val64 = 283686952304641ULL;
    #line 1458 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_3));
    #line 1459 
    val64 = 144964032527335424ULL;
    #line 1460 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_4));
    #line 1461 
    break;
    #line 1462 
    case (u32)7: 
                 #line 1462 
    ;
    #line 1463 
    val64 = 283686952306176ULL;
    #line 1464 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_0));
    #line 1465 
    val64 = 72623859790381057ULL;
    #line 1466 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_1));
    #line 1467 
    val64 = 144964032627998978ULL;
    #line 1468 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_2));
    #line 1469 
    val64 = 217304205348635139ULL;
    #line 1470 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_3));
    #line 1471 
    val64 = 289644348105031680ULL;
    #line 1472 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_4));
    #line 1473 
    break;
    #line 1474 
    case (u32)8: 
                 #line 1474 
    ;
    #line 1475 
    val64 = 283686952306183ULL;
    #line 1476 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_0));
    #line 1477 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_1));
    #line 1478 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_2));
    #line 1479 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_3));
    #line 1480 
    val64 = 283686884868096ULL;
    #line 1481 
    writeq(val64,(void *)(& bar0->tx_w_round_robin_4));
    #line 1482 
    break;
  }
  #line 1486 
  val64 = readq((void *)(& bar0->tx_fifo_partition_0));
  #line 1487 
  val64 |= 9223372036854775808ULL;
  #line 1488 
  writeq(val64,(void *)(& bar0->tx_fifo_partition_0));
  #line 1494 
  switch (config->rx_ring_num) {
    #line 1495 
    case (u32)1: 
                 #line 1495 
    ;
    #line 1496 
    val64 = 0ULL;
    #line 1497 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_0));
    #line 1498 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_1));
    #line 1499 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_2));
    #line 1500 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_3));
    #line 1501 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_4));
    #line 1503 
    val64 = 9259542123273814144ULL;
    #line 1504 
    writeq(val64,(void *)(& bar0->rts_qos_steering));
    #line 1505 
    break;
    #line 1506 
    case (u32)2: 
                 #line 1506 
    ;
    #line 1507 
    val64 = 281479271743489ULL;
    #line 1508 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_0));
    #line 1509 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_1));
    #line 1510 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_2));
    #line 1511 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_3));
    #line 1512 
    val64 = 281479271677952ULL;
    #line 1513 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_4));
    #line 1515 
    val64 = 9259542122195861568ULL;
    #line 1516 
    writeq(val64,(void *)(& bar0->rts_qos_steering));
    #line 1517 
    break;
    #line 1518 
    case (u32)3: 
                 #line 1518 
    ;
    #line 1519 
    val64 = 283674016874497ULL;
    #line 1520 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_0));
    #line 1521 
    val64 = 144116296177484288ULL;
    #line 1522 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_1));
    #line 1523 
    val64 = 72620548319871234ULL;
    #line 1524 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_2));
    #line 1525 
    val64 = 283674016874497ULL;
    #line 1526 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_3));
    #line 1527 
    val64 = 144116296177418240ULL;
    #line 1528 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_4));
    #line 1530 
    val64 = 9259541847317946400ULL;
    #line 1531 
    writeq(val64,(void *)(& bar0->rts_qos_steering));
    #line 1532 
    break;
    #line 1533 
    case (u32)4: 
                 #line 1533 
    ;
    #line 1534 
    val64 = 283686884934147ULL;
    #line 1535 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_0));
    #line 1536 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_1));
    #line 1537 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_2));
    #line 1538 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_3));
    #line 1539 
    val64 = 283686884868096ULL;
    #line 1540 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_4));
    #line 1542 
    val64 = 9259471478034796560ULL;
    #line 1543 
    writeq(val64,(void *)(& bar0->rts_qos_steering));
    #line 1544 
    break;
    #line 1545 
    case (u32)5: 
                 #line 1545 
    ;
    #line 1546 
    val64 = 283686951977218ULL;
    #line 1547 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_0));
    #line 1548 
    val64 = 217298686349345792ULL;
    #line 1549 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_1));
    #line 1550 
    val64 = 72623859706167811ULL;
    #line 1551 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_2));
    #line 1552 
    val64 = 288231484303867905ULL;
    #line 1553 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_3));
    #line 1554 
    val64 = 144964011052498944ULL;
    #line 1555 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_4));
    #line 1557 
    val64 = 9259471478034796552ULL;
    #line 1558 
    writeq(val64,(void *)(& bar0->rts_qos_steering));
    #line 1559 
    break;
    #line 1560 
    case (u32)6: 
                 #line 1560 
    ;
    #line 1561 
    val64 = 283686952304641ULL;
    #line 1562 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_0));
    #line 1563 
    val64 = 144964032527401475ULL;
    #line 1564 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_1));
    #line 1565 
    val64 = 289637755363984389ULL;
    #line 1566 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_2));
    #line 1567 
    val64 = 283686952304641ULL;
    #line 1568 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_3));
    #line 1569 
    val64 = 144964032527335424ULL;
    #line 1570 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_4));
    #line 1572 
    val64 = 9259471478033745924ULL;
    #line 1573 
    writeq(val64,(void *)(& bar0->rts_qos_steering));
    #line 1574 
    break;
    #line 1575 
    case (u32)7: 
                 #line 1575 
    ;
    #line 1576 
    val64 = 283686952306176ULL;
    #line 1577 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_0));
    #line 1578 
    val64 = 72623859790381057ULL;
    #line 1579 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_1));
    #line 1580 
    val64 = 144964032627998978ULL;
    #line 1581 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_2));
    #line 1582 
    val64 = 217304205348635139ULL;
    #line 1583 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_3));
    #line 1584 
    val64 = 289644348105031680ULL;
    #line 1585 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_4));
    #line 1587 
    val64 = 9259471340325831682ULL;
    #line 1588 
    writeq(val64,(void *)(& bar0->rts_qos_steering));
    #line 1589 
    break;
    #line 1590 
    case (u32)8: 
                 #line 1590 
    ;
    #line 1591 
    val64 = 283686952306183ULL;
    #line 1592 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_0));
    #line 1593 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_1));
    #line 1594 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_2));
    #line 1595 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_3));
    #line 1596 
    val64 = 283686884868096ULL;
    #line 1597 
    writeq(val64,(void *)(& bar0->rx_w_round_robin_4));
    #line 1599 
    val64 = 9241421688590303745ULL;
    #line 1600 
    writeq(val64,(void *)(& bar0->rts_qos_steering));
    #line 1601 
    break;
  }
  #line 1605 
  val64 = 0ULL;
  #line 1606 
  i = 0;
  #line 1606 
  while (i <= 7) {
    #line 1607 
    writeq(val64,(void *)(& bar0->rts_frm_len_n[i]));
    #line 1606 
    i ++;
  }
  #line 1610 
  val64 = ((unsigned long long)dev->mtu + 22ULL) << 48;
  #line 1611 
  i = 0;
  #line 1611 
  while (config->rx_ring_num > (unsigned int)i) {
    #line 1612 
    writeq(val64,(void *)(& bar0->rts_frm_len_n[i]));
    #line 1611 
    i ++;
  }
  #line 1617 
  i = 0;
  #line 1617 
  while (config->rx_ring_num > (unsigned int)i) {
    #line 1624 
    if (rts_frm_len[i] != 0U) 
                              #line 1625 
                              writeq((unsigned long long)rts_frm_len[i] << 48,(void *)(& bar0->rts_frm_len_n[i]));
    #line 1617 
    i ++;
  }
  #line 1631 
  i = 0;
  #line 1631 
  while (i <= 63) {
    #line 1632 
    if (rts_ds_steer(nic,(unsigned char)((int)((unsigned char)i)),
                     (unsigned char)0) == -1) {
      #line 1633 
      if (debug_level >= 0) 
                            #line 1633 
                            printk((char *)"\001",(char *)(& dev->name),i);
      #line 1636 
      return -19;
    }
    #line 1631 
    i ++;
  }
  #line 1641 
  writeq(mac_control->stats_mem_phy,(void *)(& bar0->stat_addr));
  #line 1643 
  if ((unsigned int)nic->device_type == 2U) {
    #line 1644 
    val64 = 225179981368524800ULL;
    #line 1645 
    writeq(val64,(void *)(& bar0->stat_byte_cnt));
  }
  #line 1652 
  val64 = ((unsigned long long)tmac_util_period << 52) | ((unsigned long long)rmac_util_period << 20);
  #line 1654 
  writeq(val64,(void *)(& bar0->mac_link_util));
  #line 1662 
  if (init_tti(nic,(int)nic->last_link_state) != 0) 
                                                    #line 1663 
                                                    return -19;
  #line 1666 
  if ((unsigned int)nic->device_type == 2U) {
    #line 1671 
    int count = ((int)nic->config.bus_speed * 125) / 4;
    #line 1672 
    val64 = (unsigned long long)count << 32;
  }
  else 
       #line 1674 
       val64 = 17587891077120ULL;
  #line 1675 
  val64 |= 34213936ULL;
  #line 1680 
  writeq(val64,(void *)(& bar0->rti_data1_mem));
  #line 1682 
  val64 = 281483566645248ULL;
  #line 1684 
  if ((unsigned int)nic->config.intr_type == 2U) 
                                                 #line 1685 
                                                 val64 |= 2097216ULL; else 
                                                                    #line 1688 
                                                                    val64 |= 4194432ULL;
  #line 1690 
  writeq(val64,(void *)(& bar0->rti_data2_mem));
  #line 1692 
  i = 0;
  #line 1692 
  while (config->rx_ring_num > (unsigned int)i) {
    #line 1693 
    val64 = ((unsigned long long)i << 32) | 72339069014638592ULL;
    #line 1696 
    writeq(val64,(void *)(& bar0->rti_command_mem));
    #line 1705 
    time = 0U;
    #line 1706 
    while (1) {
      #line 1707 
      val64 = readq((void *)(& bar0->rti_command_mem));
      #line 1708 
      if ((val64 & 281474976710656ULL) == 0ULL) 
                                                #line 1709 
                                                break;
      #line 1711 
      if (time > 10U) {
        #line 1712 
        if (debug_level >= 0) 
                              #line 1712 
                              printk((char *)"\001",(char *)(& dev->name));
        #line 1714 
        return -19;
      }
      #line 1716 
      time ++;
      #line 1717 
      msleep(50U);
    }
    #line 1692 
    i ++;
  }
  #line 1725 
  writeq(18427603483230994363ULL,(void *)(& bar0->mc_pause_thresh_q0q3));
  #line 1726 
  writeq(18427603483230994363ULL,(void *)(& bar0->mc_pause_thresh_q4q7));
  #line 1729 
  add = (void *)(& bar0->mac_cfg);
  #line 1730 
  val64 = readq((void *)(& bar0->mac_cfg));
  #line 1731 
  val64 &= 18302628885633695743ULL;
  #line 1732 
  writeq(5480036321579761664ULL,(void *)(& bar0->rmac_cfg_key));
  #line 1733 
  writel((unsigned int)val64,add);
  #line 1734 
  writeq(5480036321579761664ULL,(void *)(& bar0->rmac_cfg_key));
  #line 1735 
  writel((unsigned int)(val64 >> 32),add + 4U);
  #line 1736 
  val64 = readq((void *)(& bar0->mac_cfg));
  #line 1739 
  add = (void *)(& bar0->mac_cfg);
  #line 1740 
  val64 = readq((void *)(& bar0->mac_cfg));
  #line 1741 
  val64 |= 288230376151711744ULL;
  #line 1742 
  if ((unsigned int)nic->device_type == 2U) 
                                            #line 1743 
                                            writeq(val64,(void *)(& bar0->mac_cfg));
  else {
    #line 1745 
    writeq(5480036321579761664ULL,(void *)(& bar0->rmac_cfg_key));
    #line 1746 
    writel((unsigned int)val64,add);
    #line 1747 
    writeq(5480036321579761664ULL,(void *)(& bar0->rmac_cfg_key));
    #line 1748 
    writel((unsigned int)(val64 >> 32),add + 4U);
  }
  #line 1755 
  val64 = readq((void *)(& bar0->rmac_pause_cfg));
  #line 1756 
  val64 &= 18446462603027808255ULL;
  #line 1757 
  val64 = ((unsigned long long)nic->mac_control.rmac_pause_time << 32) | val64;
  #line 1758 
  writeq(val64,(void *)(& bar0->rmac_pause_cfg));
  #line 1766 
  val64 = 0ULL;
  #line 1767 
  i = 0;
  #line 1767 
  while (i <= 3) {
    #line 1768 
    val64 = ((unsigned long long)((unsigned int)nic->mac_control.mc_pause_threshold_q0q3 | 65280U) << i * 16) | val64;
    #line 1767 
    i ++;
  }
  #line 1772 
  writeq(val64,(void *)(& bar0->mc_pause_thresh_q0q3));
  #line 1774 
  val64 = 0ULL;
  #line 1775 
  i = 0;
  #line 1775 
  while (i <= 3) {
    #line 1776 
    val64 = ((unsigned long long)((unsigned int)nic->mac_control.mc_pause_threshold_q4q7 | 65280U) << i * 16) | val64;
    #line 1775 
    i ++;
  }
  #line 1780 
  writeq(val64,(void *)(& bar0->mc_pause_thresh_q4q7));
  #line 1786 
  val64 = readq((void *)(& bar0->pic_control));
  #line 1787 
  val64 = ((unsigned long long)shared_splits << 48) | val64;
  #line 1788 
  writeq(val64,(void *)(& bar0->pic_control));
  #line 1790 
  if ((unsigned int)nic->config.bus_speed == 266U) {
    #line 1791 
    writeq(545460846593ULL,(void *)(& bar0->txreqtimeout));
    #line 1792 
    writeq(0ULL,(void *)(& bar0->read_retry_delay));
    #line 1793 
    writeq(0ULL,(void *)(& bar0->write_retry_delay));
  }
  #line 1800 
  if ((unsigned int)nic->device_type == 2U) {
    #line 1801 
    val64 = 13835058068167065600ULL;
    #line 1803 
    writeq(val64,(void *)(& bar0->misc_control));
    #line 1804 
    val64 = readq((void *)(& bar0->pic_control2));
    #line 1805 
    val64 &= 18444773748872577023ULL;
    #line 1806 
    writeq(val64,(void *)(& bar0->pic_control2));
  }
  #line 1808 
  if (cif_strstr((char *)(& nic->product_name),(char *)"CX4") != (char *)0) {
    #line 1809 
    val64 = 1657324662872342528ULL;
    #line 1810 
    writeq(val64,(void *)(& bar0->tmac_avg_ipg));
  }
  #line 1813 
  return 0;
}

#line 1818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_link_fault_indication(struct s2io_nic *nic)
{
  #line 1820 
  if ((unsigned int)nic->device_type == 2U) 
                                            #line 1821 
                                            return 1; else 
                                                           #line 1823 
                                                           return 2;
}

#line 1835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void do_s2io_write_bits(u64 value, int flag, void *addr)
{
  #line 1837 
  u64 temp64;
  #line 1839 
  temp64 = readq(addr);
  #line 1841 
  if (flag == 1) 
                 #line 1842 
                 temp64 = ~ value & temp64; else 
                                                 #line 1844 
                                                 temp64 |= value;
  #line 1845 
  writeq(temp64,addr);
  #line 1846 
  return;
}

#line 1848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void en_dis_err_alarms(struct s2io_nic *nic, u16 mask, int flag)
{
  #line 1852 
  u64 interruptible;
  #line 1850 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 1851 
  register u64 gen_int_mask = 0ULL;
  #line 1854 
  writeq(18446744073709551615ULL,(void *)(& bar0->general_int_mask));
  #line 1855 
  if (((int)mask & 2) != 0) {
    #line 1856 
    gen_int_mask |= 4611686018427387904ULL;
    #line 1858 
    do_s2io_write_bits(18302628885633695744ULL,flag,(void *)(& bar0->txdma_int_mask));
    #line 1863 
    do_s2io_write_bits(72340174985494528ULL,flag,(void *)(& bar0->pfc_err_mask));
    #line 1868 
    do_s2io_write_bits(18446465897284501504ULL,flag,(void *)(& bar0->tda_err_mask));
    #line 1872 
    do_s2io_write_bits(18446744073709551600ULL,flag,(void *)(& bar0->pcc_err_mask));
    #line 1880 
    do_s2io_write_bits(72340168526266368ULL,flag,(void *)(& bar0->tti_err_mask));
    #line 1883 
    do_s2io_write_bits(4225423185543168ULL,flag,(void *)(& bar0->lso_err_mask));
    #line 1888 
    do_s2io_write_bits(72058693549555712ULL,flag,(void *)(& bar0->tpa_err_mask));
    #line 1891 
    do_s2io_write_bits(281474976710656ULL,flag,(void *)(& bar0->sm_err_mask));
  }
  #line 1894 
  if (((int)mask & 4) != 0) {
    #line 1895 
    gen_int_mask |= 2305843009213693952ULL;
    #line 1896 
    do_s2io_write_bits(9223372036854775808ULL,flag,(void *)(& bar0->mac_int_mask));
    #line 1898 
    do_s2io_write_bits(72340168543109376ULL,flag,(void *)(& bar0->mac_tmac_err_mask));
  }
  #line 1904 
  if (((int)mask & 8) != 0) {
    #line 1905 
    gen_int_mask |= 1152921504606846976ULL;
    #line 1906 
    do_s2io_write_bits(9223372036854775808ULL,flag,(void *)(& bar0->xgxs_int_mask));
    #line 1908 
    do_s2io_write_bits(72339073326383104ULL,flag,(void *)(& bar0->xgxs_txgxs_err_mask));
  }
  #line 1913 
  if (((int)mask & 64) != 0) {
    #line 1914 
    gen_int_mask |= 1073741824ULL;
    #line 1915 
    do_s2io_write_bits(17293822569102704640ULL,flag,(void *)(& bar0->rxdma_int_mask));
    #line 1918 
    do_s2io_write_bits(18446463706817756928ULL,flag,(void *)(& bar0->rc_err_mask));
    #line 1922 
    do_s2io_write_bits(18446744073709486080ULL,flag,(void *)(& bar0->prc_pcix_err_mask));
    #line 1926 
    do_s2io_write_bits(72340172821233664ULL,flag,(void *)(& bar0->rpa_err_mask));
    #line 1929 
    do_s2io_write_bits(18446463702589833473ULL,flag,(void *)(& bar0->rda_err_mask));
    #line 1935 
    do_s2io_write_bits(72340168526266368ULL,flag,(void *)(& bar0->rti_err_mask));
  }
  #line 1940 
  if (((int)mask & 128) != 0) {
    #line 1941 
    gen_int_mask |= 536870912ULL;
    #line 1942 
    do_s2io_write_bits(4611686018427387904ULL,flag,(void *)(& bar0->mac_int_mask));
    #line 1944 
    interruptible = 12103406406388940800ULL;
    #line 1947 
    if (s2io_link_fault_indication(nic) == 2) 
                                              #line 1948 
                                              interruptible |= 4294967296ULL;
    #line 1949 
    do_s2io_write_bits(interruptible,flag,(void *)(& bar0->mac_rmac_err_mask));
  }
  #line 1953 
  if (((int)mask & 256) != 0) {
    #line 1954 
    gen_int_mask |= 134217728ULL;
    #line 1955 
    do_s2io_write_bits(4611686018427387904ULL,flag,(void *)(& bar0->xgxs_int_mask));
    #line 1957 
    do_s2io_write_bits(72057594054705152ULL,flag,(void *)(& bar0->xgxs_rxgxs_err_mask));
  }
  #line 1961 
  if (((int)mask & 1024) != 0) {
    #line 1962 
    gen_int_mask |= 268435456ULL;
    #line 1963 
    do_s2io_write_bits(9223372036854775808ULL,flag,(void *)(& bar0->mc_int_mask));
    #line 1965 
    do_s2io_write_bits(4340476086585393152ULL,flag,(void *)(& bar0->mc_err_mask));
  }
  #line 1969 
  nic->general_int_mask = gen_int_mask;
  #line 1972 
  nic->general_int_mask = 0ULL;
  #line 1973 
  return;
}

#line 1986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void en_dis_able_nic_intrs(struct s2io_nic *nic, u16 mask, int flag)
{
  #line 1988 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 1989 
  register u64 temp64 = 0ULL;
  #line 1989 
  register u64 intr_mask = 0ULL;
  #line 1991 
  intr_mask = nic->general_int_mask;
  #line 1995 
  if (((int)mask & 1) != 0) {
    #line 1997 
    intr_mask |= 9223372036854775808ULL;
    #line 1998 
    if (flag == 1) {
      #line 2005 
      if (s2io_link_fault_indication(nic) == 1) {
        #line 2007 
        do_s2io_write_bits(576460752303423488ULL,flag,(void *)(& bar0->pic_int_mask));
        #line 2009 
        do_s2io_write_bits(2305843009213693952ULL,flag,(void *)(& bar0->gpio_int_mask));
      }
      else 
           #line 2012 
           writeq(18446744073709551615ULL,(void *)(& bar0->pic_int_mask));
    }
    else 
      #line 2013 
      if (flag == 2) 
                     #line 2018 
                     writeq(18446744073709551615ULL,(void *)(& bar0->pic_int_mask));
  }
  #line 2023 
  if (((int)mask & 16) != 0) {
    #line 2024 
    intr_mask |= 36028797018963968ULL;
    #line 2025 
    if (flag == 1) 
                   #line 2030 
                   writeq(0ULL,(void *)(& bar0->tx_traffic_mask));
    else 
      #line 2031 
      if (flag == 2) 
                     #line 2036 
                     writeq(18446744073709551615ULL,(void *)(& bar0->tx_traffic_mask));
  }
  #line 2041 
  if (((int)mask & 512) != 0) {
    #line 2042 
    intr_mask |= 8388608ULL;
    #line 2043 
    if (flag == 1) 
                   #line 2045 
                   writeq(0ULL,(void *)(& bar0->rx_traffic_mask));
    else 
      #line 2046 
      if (flag == 2) 
                     #line 2051 
                     writeq(18446744073709551615ULL,(void *)(& bar0->rx_traffic_mask));
  }
  #line 2055 
  temp64 = readq((void *)(& bar0->general_int_mask));
  #line 2056 
  if (flag == 1) 
                 #line 2057 
                 temp64 = ~ intr_mask & temp64; else 
                                                     #line 2059 
                                                     temp64 = 18446744073709551615ULL;
  #line 2060 
  writeq(temp64,(void *)(& bar0->general_int_mask));
  #line 2062 
  nic->general_int_mask = readq((void *)(& bar0->general_int_mask));
  #line 2063 
  return;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int verify_pcc_quiescent(struct s2io_nic *sp, int flag)
{
  #line 2072 
  int herc;
  #line 2072 
  int ret = 0;
  #line 2073 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 2074 
  u64 val64 = readq((void *)(& bar0->adapter_status));
  #line 2076 
  herc = (unsigned int)sp->device_type == 2U;
  #line 2078 
  if (flag == 0) {
    #line 2079 
    if (herc == 0 && (unsigned int)(sp->pdev)->revision > 3U || herc != 0) {
      #line 2080 
      if ((val64 & 71776119061217280ULL) == 0ULL) 
                                                  #line 2081 
                                                  ret = 1;
    }
    else 
      #line 2083 
      if ((val64 & 4222124650659840ULL) == 0ULL) 
                                                 #line 2084 
                                                 ret = 1;
  }
  else 
    #line 2087 
    if (herc == 0 && (unsigned int)(sp->pdev)->revision > 3U || herc != 0) {
      #line 2088 
      if ((val64 & 71776119061217280ULL) == 71776119061217280ULL) 
                                                                  #line 2090 
                                                                  ret = 1;
    }
    else 
      #line 2092 
      if ((val64 & 4222124650659840ULL) == 4222124650659840ULL) 
                                                                #line 2094 
                                                                ret = 1;
  #line 2098 
  return ret;
}

#line 2110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int verify_xena_quiescence(struct s2io_nic *sp)
{
  #line 2112 
  int mode;
  #line 2113 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 2114 
  u64 val64 = readq((void *)(& bar0->adapter_status));
  #line 2115 
  mode = s2io_verify_pci_mode(sp);
  #line 2117 
  if ((val64 & 9223372036854775808ULL) == 0ULL) {
    #line 2118 
    if (debug_level >= 0) 
                          #line 2118 
                          printk((char *)"\001");
    #line 2119 
    return 0;
  }
  #line 2121 
  if ((val64 & 4611686018427387904ULL) == 0ULL) {
    #line 2122 
    if (debug_level >= 0) 
                          #line 2122 
                          printk((char *)"\001");
    #line 2123 
    return 0;
  }
  #line 2125 
  if ((val64 & 2305843009213693952ULL) == 0ULL) {
    #line 2126 
    if (debug_level >= 0) 
                          #line 2126 
                          printk((char *)"\001");
    #line 2127 
    return 0;
  }
  #line 2129 
  if ((val64 & 1152921504606846976ULL) == 0ULL) {
    #line 2130 
    if (debug_level >= 0) 
                          #line 2130 
                          printk((char *)"\001");
    #line 2131 
    return 0;
  }
  #line 2133 
  if ((val64 & 288230376151711744ULL) == 0ULL) {
    #line 2134 
    if (debug_level >= 0) 
                          #line 2134 
                          printk((char *)"\001");
    #line 2135 
    return 0;
  }
  #line 2137 
  if ((val64 & 549755813888ULL) == 0ULL) {
    #line 2138 
    if (debug_level >= 0) 
                          #line 2138 
                          printk((char *)"\001");
    #line 2139 
    return 0;
  }
  #line 2141 
  if ((val64 & 274877906944ULL) == 0ULL) {
    #line 2142 
    if (debug_level >= 0) 
                          #line 2142 
                          printk((char *)"\001");
    #line 2143 
    return 0;
  }
  #line 2145 
  if ((val64 & 8589934592ULL) == 0ULL) {
    #line 2146 
    if (debug_level >= 0) 
                          #line 2146 
                          printk((char *)"\001");
    #line 2147 
    return 0;
  }
  #line 2155 
  if (((val64 & 4294967296ULL) == 0ULL && (unsigned int)sp->device_type == 2U) && mode != 0) {
    #line 2158 
    if (debug_level >= 0) 
                          #line 2158 
                          printk((char *)"\001");
    #line 2159 
    return 0;
  }
  #line 2161 
  if ((val64 & 280375465082880ULL) != 280375465082880ULL) {
    #line 2163 
    if (debug_level >= 0) 
                          #line 2163 
                          printk((char *)"\001");
    #line 2164 
    return 0;
  }
  #line 2166 
  return 1;
}

#line 2177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void fix_mac_address(struct s2io_nic *sp)
{
  #line 2179 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 2180 
  int i = 0;
  #line 2182 
  while (fix_mac[i] != 0ULL) {
    #line 2183 
    int tmp;
    #line 2183 
    ;
    #line 2183 
    tmp = i;
    #line 2183 
    i ++;
    #line 2183 
    ;
    #line 2183 
    writeq(fix_mac[tmp],(void *)(& bar0->gpio_control));
    #line 2184 
    __const_udelay(42950UL);
    #line 2185 
    readq((void *)(& bar0->gpio_control));
  }
  #line 2187 
  return;
}

#line 2202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int start_nic(struct s2io_nic *nic)
{
  #line 2207 
  u16 subid;
  #line 2207 
  u16 i;
  #line 2204 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 2205 
  struct net_device *dev = nic->dev;
  #line 2206 
  register u64 val64 = 0ULL;
  #line 2208 
  struct config_param *config = & nic->config;
  #line 2209 
  struct mac_info *mac_control = & nic->mac_control;
  #line 2212 
  i = (unsigned short)0U;
  #line 2212 
  while ((unsigned int)i < config->rx_ring_num) {
    {
      #line 2213 
      struct ring_info *ring = & mac_control->rings[(int)i];
      #line 2215 
      writeq(ring->rx_blocks[0].block_dma_addr,(void *)(& bar0->prc_rxd0_n[(int)i]));
      #line 2218 
      val64 = readq((void *)(& bar0->prc_ctrl_n[(int)i]));
      #line 2219 
      if (nic->rxd_mode == 0) 
                              #line 2220 
                              val64 |= 72057594037927936ULL; else 
                                                                  #line 2222 
                                                                  val64 |= 72339069014638592ULL;
      #line 2223 
      if ((unsigned int)nic->device_type == 2U) 
                                                #line 2224 
                                                val64 |= 33554432ULL;
      #line 2225 
      val64 &= 18446744073692774400ULL;
      #line 2226 
      val64 |= 4096ULL;
      #line 2227 
      writeq(val64,(void *)(& bar0->prc_ctrl_n[(int)i]));
    }
    #line 2212 
    i = (u16)((int)i + 1);
  }
  #line 2230 
  if (nic->rxd_mode == 1) {
    #line 2232 
    val64 = readq((void *)(& bar0->rx_pa_cfg));
    #line 2233 
    val64 |= 144115188075855872ULL;
    #line 2234 
    writeq(val64,(void *)(& bar0->rx_pa_cfg));
  }
  #line 2237 
  if (vlan_tag_strip == 0U) {
    #line 2238 
    val64 = readq((void *)(& bar0->rx_pa_cfg));
    #line 2239 
    val64 &= 18446462598732840959ULL;
    #line 2240 
    writeq(val64,(void *)(& bar0->rx_pa_cfg));
    #line 2241 
    nic->vlan_strip_flag = 0;
  }
  #line 2249 
  val64 = readq((void *)(& bar0->mc_rldram_mrs));
  #line 2250 
  val64 |= 16842752ULL;
  #line 2251 
  SPECIAL_REG_WRITE(val64,(void *)(& bar0->mc_rldram_mrs),1);
  #line 2252 
  val64 = readq((void *)(& bar0->mc_rldram_mrs));
  #line 2254 
  msleep(100U);
  #line 2257 
  val64 = readq((void *)(& bar0->adapter_control));
  #line 2258 
  val64 &= 18446744073709551359ULL;
  #line 2259 
  writeq(val64,(void *)(& bar0->adapter_control));
  #line 2265 
  val64 = readq((void *)(& bar0->adapter_status));
  #line 2266 
  if (verify_xena_quiescence(nic) == 0) {
    #line 2267 
    if (debug_level >= 0) 
                          #line 2267 
                          printk((char *)"\001",(char *)(& dev->name),val64);
    #line 2270 
    return -1;
  }
  #line 2282 
  val64 = readq((void *)(& bar0->adapter_control));
  #line 2283 
  val64 |= 281474976710656ULL;
  #line 2284 
  writeq(val64,(void *)(& bar0->adapter_control));
  #line 2286 
  if (s2io_link_fault_indication(nic) == 2) 
                                            #line 2291 
                                            cif_schedule_work(& nic->set_link_task);
  #line 2294 
  subid = (nic->pdev)->subsystem_device;
  #line 2295 
  if (((int)subid & 255) > 6 && (unsigned int)nic->device_type == 1U) {
    #line 2297 
    val64 = readq((void *)(& bar0->gpio_control));
    #line 2298 
    val64 |= 140737488355328ULL;
    #line 2299 
    writeq(val64,(void *)(& bar0->gpio_control));
    #line 2300 
    val64 = 293019865982173184ULL;
    #line 2301 
    writeq(val64,(void *)bar0 + 9984U);
  }
  #line 2304 
  return 0;
}

#line 2309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static struct sk_buff *s2io_txdl_getskb(struct fifo_info *fifo_data, struct TxD *txdlp, int get_off)
{
  #line 2313 
  struct sk_buff *skb;
  #line 2314 
  struct TxD *txds;
  #line 2315 
  u16 j;
  #line 2315 
  u16 frg_cnt;
  #line 2312 
  struct s2io_nic *nic = fifo_data->nic;
  #line 2317 
  txds = txdlp;
  #line 2318 
  if (txds->Host_Control == (unsigned long long)fifo_data->ufo_in_band_v) {
    #line 2319 
    pci_unmap_single(nic->pdev,txds->Buffer_Pointer,8UL,1);
    #line 2321 
    txds ++;
  }
  #line 2324 
  skb = (struct sk_buff *)txds->Host_Control;
  #line 2325 
  if (skb == (struct sk_buff *)0) {
    #line 2326 
    memset((void *)txdlp,0,(unsigned long)fifo_data->max_txds * 32UL);
    #line 2327 
    return (struct sk_buff *)0;
  }
  #line 2329 
  ;
  #line 2329 
  ;
  #line 2329 
  pci_unmap_single(nic->pdev,txds->Buffer_Pointer,(unsigned long)skb_headlen(skb),1);
  #line 2331 
  frg_cnt = (unsigned short)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 2332 
  if ((unsigned int)frg_cnt != 0U) {
    #line 2333 
    txds ++;
    #line 2334 
    j = (unsigned short)0U;
    #line 2334 
    while ((int)j < (int)frg_cnt) {
      {
        #line 2335 
        skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[(int)j];
        #line 2336 
        if (txds->Buffer_Pointer == 0ULL) 
                                          #line 2337 
                                          break;
        #line 2338 
        ;
        #line 2338 
        ;
        #line 2338 
        pci_unmap_page(nic->pdev,txds->Buffer_Pointer,(unsigned long)skb_frag_size(frag),1);
      }
      #line 2334 
      j = (u16)((int)j + 1);
      #line 2334 
      txds ++;
    }
  }
  #line 2343 
  memset((void *)txdlp,0,(unsigned long)fifo_data->max_txds * 32UL);
  #line 2344 
  return skb;
}

#line 2355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void free_tx_buffers(struct s2io_nic *nic)
{
  #line 2358 
  struct sk_buff *skb;
  #line 2359 
  struct TxD *txdp;
  #line 2360 
  int i;
  #line 2360 
  int j;
  #line 2357 
  struct net_device *dev = nic->dev;
  #line 2361 
  int cnt = 0;
  #line 2362 
  struct config_param *config = & nic->config;
  #line 2363 
  struct mac_info *mac_control = & nic->mac_control;
  #line 2364 
  struct stat_block *stats = mac_control->stats_info;
  #line 2365 
  struct swStat *swstats = & stats->sw_stat;
  #line 2367 
  i = 0;
  #line 2367 
  while (config->tx_fifo_num > (unsigned int)i) {
    {
      #line 2370 
      unsigned long flags;
      #line 2368 
      struct tx_fifo_config *tx_cfg = & config->tx_cfg[i];
      #line 2369 
      struct fifo_info *fifo = & mac_control->fifos[i];
      #line 2372 
      cif___ldv_spin_lock_tx_lock_of_fifo_info(& fifo->tx_lock);
      #line 2373 
      j = 0;
      #line 2373 
      while (tx_cfg->fifo_len > (unsigned int)j) {
        #line 2374 
        txdp = (struct TxD *)(fifo->list_info + (unsigned long)j)->list_virt_addr;
        #line 2375 
        skb = s2io_txdl_getskb(& mac_control->fifos[i],txdp,j);
        #line 2376 
        if (skb != (struct sk_buff *)0) {
          #line 2377 
          swstats->mem_freed += (unsigned long long)skb->truesize;
          #line 2378 
          consume_skb(skb);
          #line 2379 
          cnt ++;
        }
        #line 2373 
        j ++;
      }
      #line 2382 
      if (debug_level > 3) 
                           #line 2382 
                           printk((char *)"\001",(char *)(& dev->name),cnt,i);
      #line 2385 
      fifo->tx_curr_get_info.offset = 0U;
      #line 2386 
      fifo->tx_curr_put_info.offset = 0U;
      #line 2387 
      cif_spin_unlock_irqrestore_tx_lock_of_fifo_info(& fifo->tx_lock,flags);
    }
    #line 2367 
    i ++;
  }
  #line 2389 
  return;
}

#line 2401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void stop_nic(struct s2io_nic *nic)
{
  #line 2405 
  u16 interruptible;
  #line 2403 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 2404 
  register u64 val64 = 0ULL;
  #line 2408 
  en_dis_err_alarms(nic,(unsigned short)2047,2);
  #line 2409 
  interruptible = (unsigned short)528U;
  #line 2410 
  interruptible = (unsigned short)((unsigned int)interruptible | 1U);
  #line 2411 
  en_dis_able_nic_intrs(nic,(unsigned short)((int)interruptible),2);
  #line 2414 
  val64 = readq((void *)(& bar0->adapter_control));
  #line 2415 
  val64 &= 18374686479671623679ULL;
  #line 2416 
  writeq(val64,(void *)(& bar0->adapter_control));
  #line 2417 
  return;
}

#line 2441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int fill_rx_buffers(struct s2io_nic *nic, struct ring_info *ring, int from_card_up)
{
  #line 2444 
  struct sk_buff *skb;
  #line 2445 
  struct RxD_t *rxdp;
  #line 2446 
  int off;
  #line 2446 
  int size;
  #line 2446 
  int block_no;
  #line 2446 
  int block_no1;
  #line 2448 
  u32 alloc_cnt;
  #line 2449 
  u64 tmp;
  #line 2450 
  struct buffAdd *ba;
  #line 2453 
  struct RxD1 *rxdp1;
  #line 2454 
  struct RxD3 *rxdp3;
  #line 2447 
  u32 alloc_tab = 0U;
  #line 2451 
  struct RxD_t *first_rxdp = (struct RxD_t *)0;
  #line 2452 
  u64 Buffer0_ptr = 0ULL;
  #line 2452 
  u64 Buffer1_ptr = 0ULL;
  #line 2455 
  struct swStat *swstats = & ((ring->nic)->mac_control.stats_info)->sw_stat;
  #line 2457 
  alloc_cnt = (unsigned int)ring->pkt_cnt - ring->rx_bufs_left;
  #line 2459 
  block_no1 = (int)ring->rx_curr_get_info.block_index;
  #line 2460 
  while (alloc_tab < alloc_cnt) {
    #line 2461 
    block_no = (int)ring->rx_curr_put_info.block_index;
    #line 2463 
    off = (int)ring->rx_curr_put_info.offset;
    #line 2465 
    rxdp = (struct RxD_t *)(ring->rx_blocks[block_no].rxds + (unsigned long)off)->virt_addr;
    #line 2467 
    if ((block_no == block_no1 && ring->rx_curr_get_info.offset == (unsigned int)off) && rxdp->Host_Control != 0ULL) {
      #line 2470 
      if (debug_level > 3) 
                           #line 2470 
                           printk((char *)"\001",(char *)(& (ring->dev)->name));
      #line 2472 
      goto end;
    }
    #line 2474 
    if (off != 0 && ring->rxd_count == off) {
      #line 2475 
      (ring->rx_curr_put_info.block_index) ++;
      #line 2476 
      if (ring->rx_curr_put_info.block_index == (unsigned int)ring->block_count) 
        #line 2478 
        ring->rx_curr_put_info.block_index = 0U;
      #line 2479 
      block_no = (int)ring->rx_curr_put_info.block_index;
      #line 2480 
      off = 0;
      #line 2481 
      ring->rx_curr_put_info.offset = (unsigned int)off;
      #line 2482 
      rxdp = (struct RxD_t *)ring->rx_blocks[block_no].block_virt_addr;
      #line 2483 
      if (debug_level > 3) 
                           #line 2483 
                           printk((char *)"\001",(char *)(& (ring->dev)->name),rxdp);
    }
    #line 2488 
    if ((ring->rxd_mode == 1 && (rxdp->Control_2 & 9223372036854775808ULL) != 0ULL) && (rxdp->Control_1 & 72057594037927936ULL) != 0ULL) {
      #line 2491 
      ring->rx_curr_put_info.offset = (unsigned int)off;
      #line 2492 
      goto end;
    }
    #line 2495 
    size = (int)(ring->mtu + 22U);
    #line 2498 
    if (ring->rxd_mode == 0) 
                             #line 2499 
                             size = size; else 
                                               #line 2501 
                                               size = (int)(ring->mtu + 171U);
    #line 2504 
    skb = netdev_alloc_skb(nic->dev,(unsigned int)size);
    #line 2505 
    if (skb == (struct sk_buff *)0) {
      #line 2506 
      if (debug_level > 1) 
                           #line 2506 
                           printk((char *)"\001",(char *)(& (ring->dev)->name));
      #line 2508 
      if (first_rxdp != (struct RxD_t *)0) {
        #line 2510 
        ldv_inline_asm();
        #line 2510 
        first_rxdp->Control_1 |= 72057594037927936ULL;
      }
      #line 2512 
      (swstats->mem_alloc_fail_cnt) ++;
      #line 2514 
      return -12;
    }
    #line 2516 
    swstats->mem_allocated += (unsigned long long)skb->truesize;
    #line 2518 
    if (ring->rxd_mode == 0) {
      #line 2520 
      rxdp1 = (struct RxD1 *)rxdp;
      #line 2521 
      memset((void *)rxdp,0,32UL);
      #line 2522 
      skb_reserve(skb,0);
      #line 2523 
      rxdp1->Buffer0_ptr = pci_map_single(ring->pdev,(void *)skb->data,(unsigned long)size,2);
      #line 2527 
      if (pci_dma_mapping_error(nic->pdev,rxdp1->Buffer0_ptr) != 0) 
                                                                    #line 2529 
                                                                    goto pci_map_failed;
      #line 2531 
      rxdp->Control_2 = (unsigned long long)size << 48;
      #line 2533 
      rxdp->Host_Control = (unsigned long long)skb;
    }
    else 
      #line 2534 
      if (ring->rxd_mode == 1) {
        #line 2541 
        rxdp3 = (struct RxD3 *)rxdp;
        #line 2543 
        Buffer0_ptr = rxdp3->Buffer0_ptr;
        #line 2544 
        Buffer1_ptr = rxdp3->Buffer1_ptr;
        #line 2545 
        memset((void *)rxdp,0,48UL);
        #line 2547 
        rxdp3->Buffer0_ptr = Buffer0_ptr;
        #line 2548 
        rxdp3->Buffer1_ptr = Buffer1_ptr;
        #line 2550 
        ba = *(ring->ba + (unsigned long)block_no) + (unsigned long)off;
        #line 2551 
        skb_reserve(skb,40);
        #line 2552 
        tmp = (unsigned long long)skb->data;
        #line 2553 
        tmp += 127ULL;
        #line 2554 
        tmp &= 18446744073709551488ULL;
        #line 2555 
        skb->data = (unsigned char *)tmp;
        #line 2556 
        skb_reset_tail_pointer(skb);
        #line 2558 
        if (from_card_up != 0) {
          #line 2559 
          rxdp3->Buffer0_ptr = pci_map_single(ring->pdev,ba->ba_0,40UL,2);
          #line 2563 
          if (pci_dma_mapping_error(nic->pdev,rxdp3->Buffer0_ptr) != 0) 
            #line 2565 
            goto pci_map_failed;
        }
        else 
             #line 2567 
             pci_dma_sync_single_for_device(ring->pdev,rxdp3->Buffer0_ptr,40UL,2);
        #line 2572 
        rxdp->Control_2 = 11258999068426240ULL;
        #line 2573 
        if (ring->rxd_mode == 1) {
          #line 2580 
          rxdp3->Buffer2_ptr = pci_map_single(ring->pdev,(void *)skb->data,(unsigned long)(ring->mtu + 4U),2);
          #line 2585 
          if (pci_dma_mapping_error(nic->pdev,rxdp3->Buffer2_ptr) != 0) 
            #line 2587 
            goto pci_map_failed;
          #line 2589 
          if (from_card_up != 0) {
            #line 2590 
            rxdp3->Buffer1_ptr = pci_map_single(ring->pdev,ba->ba_1,1UL,2);
            #line 2596 
            if (pci_dma_mapping_error(nic->pdev,rxdp3->Buffer1_ptr) != 0) {
              #line 2598 
              pci_unmap_single(ring->pdev,(unsigned long long)skb->data,(unsigned long)(ring->mtu + 4U),2);
              #line 2603 
              goto pci_map_failed;
            }
          }
          #line 2606 
          rxdp->Control_2 |= 4294967296ULL;
          #line 2607 
          rxdp->Control_2 |= ((unsigned long long)ring->mtu + 4ULL) << 16;
        }
        #line 2610 
        rxdp->Control_2 |= 9223372036854775808ULL;
        #line 2611 
        rxdp->Host_Control = (unsigned long long)skb;
      }
    #line 2613 
    if (((unsigned int)((1 << rxsync_frequency) + -1) & alloc_tab) != 0U) 
      #line 2614 
      rxdp->Control_1 |= 72057594037927936ULL;
    #line 2615 
    off ++;
    #line 2616 
    if (ring->rxd_count + 1 == off) 
                                    #line 2617 
                                    off = 0;
    #line 2618 
    ring->rx_curr_put_info.offset = (unsigned int)off;
    #line 2620 
    rxdp->Control_2 |= 13835058055282163712ULL;
    #line 2621 
    if (((unsigned int)((1 << rxsync_frequency) + -1) & alloc_tab) == 0U) {
      #line 2622 
      if (first_rxdp != (struct RxD_t *)0) {
        #line 2624 
        ldv_inline_asm();
        #line 2624 
        first_rxdp->Control_1 |= 72057594037927936ULL;
      }
      #line 2626 
      first_rxdp = rxdp;
    }
    #line 2628 
    (ring->rx_bufs_left) ++;
    #line 2629 
    alloc_tab ++;
  }
  #line 2632 
  end: 
       #line 2632 
  ;
  #line 2637 
  if (first_rxdp != (struct RxD_t *)0) {
    #line 2639 
    ldv_inline_asm();
    #line 2639 
    first_rxdp->Control_1 |= 72057594037927936ULL;
  }
  #line 2642 
  return 0;
  #line 2644 
  pci_map_failed: 
                  #line 2644 
  ;
  #line 2645 
  (swstats->pci_map_fail_cnt) ++;
  #line 2646 
  swstats->mem_freed += (unsigned long long)skb->truesize;
  #line 2647 
  dev_kfree_skb_irq(skb);
  #line 2648 
  return -12;
}

#line 2651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void free_rxd_blk(struct s2io_nic *sp, int ring_no, int blk)
{
  #line 2654 
  int j;
  #line 2655 
  struct sk_buff *skb;
  #line 2656 
  struct RxD_t *rxdp;
  #line 2657 
  struct RxD1 *rxdp1;
  #line 2658 
  struct RxD3 *rxdp3;
  #line 2653 
  struct net_device *dev = sp->dev;
  #line 2659 
  struct mac_info *mac_control = & sp->mac_control;
  #line 2660 
  struct stat_block *stats = mac_control->stats_info;
  #line 2661 
  struct swStat *swstats = & stats->sw_stat;
  #line 2663 
  j = 0;
  #line 2663 
  while (rxd_count[sp->rxd_mode] > j) {
    #line 2664 
    rxdp = (struct RxD_t *)(mac_control->rings[ring_no].rx_blocks[blk].rxds + (unsigned long)j)->virt_addr;
    #line 2666 
    skb = (struct sk_buff *)rxdp->Host_Control;
    #line 2667 
    if (skb == (struct sk_buff *)0) 
                                    #line 2668 
                                    goto __Cont;
    #line 2669 
    if (sp->rxd_mode == 0) {
      #line 2670 
      rxdp1 = (struct RxD1 *)rxdp;
      #line 2671 
      pci_unmap_single(sp->pdev,rxdp1->Buffer0_ptr,(unsigned long)(dev->mtu + 22U),2);
      #line 2677 
      memset((void *)rxdp,0,32UL);
    }
    else 
      #line 2678 
      if (sp->rxd_mode == 1) {
        #line 2679 
        rxdp3 = (struct RxD3 *)rxdp;
        #line 2680 
        pci_unmap_single(sp->pdev,rxdp3->Buffer0_ptr,40UL,2);
        #line 2684 
        pci_unmap_single(sp->pdev,rxdp3->Buffer1_ptr,1UL,2);
        #line 2688 
        pci_unmap_single(sp->pdev,rxdp3->Buffer2_ptr,(unsigned long)(dev->mtu + 4U),2);
        #line 2692 
        memset((void *)rxdp,0,48UL);
      }
    #line 2694 
    swstats->mem_freed += (unsigned long long)skb->truesize;
    #line 2695 
    consume_skb(skb);
    #line 2696 
    mac_control->rings[ring_no].rx_bufs_left += 4294967295U;
    #line 2663 
    __Cont: 
            #line 2663 
    j ++;
  }
  #line 2698 
  return;
}

#line 2709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void free_rx_buffers(struct s2io_nic *sp)
{
  #line 2712 
  int i;
  #line 2711 
  struct net_device *dev = sp->dev;
  #line 2712 
  int blk = 0;
  #line 2712 
  int buf_cnt = 0;
  #line 2713 
  struct config_param *config = & sp->config;
  #line 2714 
  struct mac_info *mac_control = & sp->mac_control;
  #line 2716 
  i = 0;
  #line 2716 
  while (config->rx_ring_num > (unsigned int)i) {
    {
      #line 2717 
      struct ring_info *ring = & mac_control->rings[i];
      #line 2719 
      blk = 0;
      #line 2719 
      while (rx_ring_sz[i] > (unsigned int)blk) {
        #line 2720 
        free_rxd_blk(sp,i,blk);
        #line 2719 
        blk ++;
      }
      #line 2722 
      ring->rx_curr_put_info.block_index = 0U;
      #line 2723 
      ring->rx_curr_get_info.block_index = 0U;
      #line 2724 
      ring->rx_curr_put_info.offset = 0U;
      #line 2725 
      ring->rx_curr_get_info.offset = 0U;
      #line 2726 
      ring->rx_bufs_left = 0U;
      #line 2727 
      if (debug_level > 0) 
                           #line 2727 
                           printk((char *)"\001",(char *)(& dev->name),buf_cnt,i);
    }
    #line 2716 
    i ++;
  }
  #line 2729 
  return;
}

#line 2732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_chk_rx_buffers(struct s2io_nic *nic, struct ring_info *ring)
{
  #line 2734 
  if (fill_rx_buffers(nic,ring,0) == -12) 
    #line 2735 
    if (debug_level > 1) 
                         #line 2735 
                         printk((char *)"\001",(char *)(& (ring->dev)->name));
  #line 2738 
  return 0;
}

#line 2754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_poll_msix(struct napi_struct *napi_0, int budget)
{
  #line 2756 
  void *__mptr;
  #line 2756 
  __mptr = (void *)napi_0;
  #line 2756 
  struct ring_info *ring = ((struct ring_info *)(__mptr + 18446744073709547416U));
  #line 2757 
  struct net_device *dev = ring->dev;
  #line 2758 
  int pkts_processed = 0;
  #line 2759 
  u8 *addr = (u8 *)0U;
  #line 2760 
  u8 val8 = (unsigned char)0U;
  #line 2761 
  struct s2io_nic *nic = netdev_priv(dev);
  #line 2762 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 2763 
  int budget_org = budget;
  #line 2765 
  if ((long)(is_s2io_card_up(nic) == 0) != 0L) 
                                               #line 2766 
                                               return 0;
  #line 2768 
  pkts_processed = rx_intr_handler(ring,budget);
  #line 2769 
  s2io_chk_rx_buffers(nic,ring);
  #line 2771 
  if (pkts_processed < budget_org) {
    #line 2772 
    napi_complete_done(napi_0,pkts_processed);
    #line 2774 
    addr = (u8 *)(& bar0->xmsi_mask_reg);
    #line 2775 
    addr += (unsigned long)(7 - ring->ring_no);
    #line 2776 
    if (ring->ring_no == 0) 
                            #line 2776 
                            val8 = (unsigned char)63U; else 
                                                            #line 2776 
                                                            val8 = (unsigned char)191U;
    #line 2777 
    writeb((unsigned char)((int)val8),(void *)addr);
    #line 2778 
    val8 = readb((void *)addr);
  }
  #line 2780 
  return pkts_processed;
}

#line 2783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_poll_inta(struct napi_struct *napi_0, int budget)
{
  #line 2785 
  void *__mptr;
  #line 2787 
  int ring_pkts_processed;
  #line 2787 
  int i;
  #line 2785 
  __mptr = (void *)napi_0;
  #line 2785 
  struct s2io_nic *nic = ((struct s2io_nic *)(__mptr + 18446744073709481232U));
  #line 2786 
  int pkts_processed = 0;
  #line 2788 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 2789 
  int budget_org = budget;
  #line 2790 
  struct config_param *config = & nic->config;
  #line 2791 
  struct mac_info *mac_control = & nic->mac_control;
  #line 2793 
  if ((long)(is_s2io_card_up(nic) == 0) != 0L) 
                                               #line 2794 
                                               return 0;
  #line 2796 
  i = 0;
  #line 2796 
  while (config->rx_ring_num > (unsigned int)i) {
    {
      #line 2797 
      struct ring_info *ring = & mac_control->rings[i];
      #line 2798 
      ring_pkts_processed = rx_intr_handler(ring,budget);
      #line 2799 
      s2io_chk_rx_buffers(nic,ring);
      #line 2800 
      pkts_processed += ring_pkts_processed;
      #line 2801 
      budget -= ring_pkts_processed;
      #line 2802 
      if (budget <= 0) 
                       #line 2803 
                       break;
    }
    #line 2796 
    i ++;
  }
  #line 2805 
  if (pkts_processed < budget_org) {
    #line 2806 
    napi_complete_done(napi_0,pkts_processed);
    #line 2808 
    writeq(0ULL,(void *)(& bar0->rx_traffic_mask));
    #line 2809 
    readl((void *)(& bar0->rx_traffic_mask));
  }
  #line 2811 
  return pkts_processed;
}

#line 2824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_netpoll(struct net_device *dev)
{
  #line 2830 
  int i;
  #line 2826 
  struct s2io_nic *nic = netdev_priv(dev);
  #line 2827 
  int irq = (int)(nic->pdev)->irq;
  #line 2828 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 2829 
  u64 val64 = 18446744073709551615ULL;
  #line 2831 
  struct config_param *config = & nic->config;
  #line 2832 
  struct mac_info *mac_control = & nic->mac_control;
  #line 2834 
  if (pci_channel_offline(nic->pdev) != 0) 
                                           #line 2835 
                                           return;
  #line 2837 
  disable_irq((unsigned int)irq);
  #line 2839 
  writeq(val64,(void *)(& bar0->rx_traffic_int));
  #line 2840 
  writeq(val64,(void *)(& bar0->tx_traffic_int));
  #line 2846 
  i = 0;
  #line 2846 
  while (config->tx_fifo_num > (unsigned int)i) {
    #line 2847 
    tx_intr_handler(& mac_control->fifos[i]);
    #line 2846 
    i ++;
  }
  #line 2850 
  i = 0;
  #line 2850 
  while (config->rx_ring_num > (unsigned int)i) {
    {
      #line 2851 
      struct ring_info *ring = & mac_control->rings[i];
      #line 2853 
      rx_intr_handler(ring,0);
    }
    #line 2850 
    i ++;
  }
  #line 2856 
  i = 0;
  #line 2856 
  while (config->rx_ring_num > (unsigned int)i) {
    {
      #line 2857 
      struct ring_info *ring_0 = & mac_control->rings[i];
      #line 2859 
      if (fill_rx_buffers(nic,ring_0,0) == -12) {
        #line 2860 
        if (debug_level > 1) 
                             #line 2860 
                             printk((char *)"\001",(char *)(& dev->name));
        #line 2863 
        break;
      }
    }
    #line 2856 
    i ++;
  }
  #line 2866 
  enable_irq((unsigned int)irq);
  #line 2867 
  return;
}

#line 2883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int rx_intr_handler(struct ring_info *ring_data, int budget)
{
  #line 2885 
  int get_block;
  #line 2885 
  int put_block;
  #line 2886 
  struct rx_curr_get_info get_info;
  #line 2886 
  struct rx_curr_get_info put_info;
  #line 2887 
  struct RxD_t *rxdp;
  #line 2888 
  struct sk_buff *skb;
  #line 2890 
  int i;
  #line 2891 
  struct RxD1 *rxdp1;
  #line 2892 
  struct RxD3 *rxdp3;
  #line 2889 
  int pkt_cnt = 0;
  #line 2889 
  int napi_pkts = 0;
  #line 2894 
  if (budget <= 0) 
                   #line 2895 
                   return napi_pkts;
  #line 2897 
  get_info = ring_data->rx_curr_get_info;
  #line 2898 
  get_block = (int)get_info.block_index;
  #line 2899 
  memcpy((void *)(& put_info),(void *)(& ring_data->rx_curr_put_info),12UL);
  #line 2900 
  put_block = (int)put_info.block_index;
  #line 2901 
  rxdp = (struct RxD_t *)(ring_data->rx_blocks[get_block].rxds + (unsigned long)get_info.offset)->virt_addr;
  #line 2903 
  while (1) {
    #line 2903 
    if (! (RXD_IS_UP2DT(rxdp) != 0)) 
                                     #line 2903 
                                     break;
    #line 2908 
    if (get_block == put_block && get_info.offset + 1U == put_info.offset) {
      #line 2910 
      if (debug_level > 3) 
                           #line 2910 
                           printk((char *)"\001",(char *)(& (ring_data->dev)->name));
      #line 2912 
      break;
    }
    #line 2914 
    skb = (struct sk_buff *)rxdp->Host_Control;
    #line 2915 
    if (skb == (struct sk_buff *)0) {
      #line 2916 
      if (debug_level >= 0) 
                            #line 2916 
                            printk((char *)"\001",(char *)(& (ring_data->dev)->name));
      #line 2918 
      return 0;
    }
    #line 2920 
    if (ring_data->rxd_mode == 0) {
      #line 2921 
      rxdp1 = (struct RxD1 *)rxdp;
      #line 2922 
      pci_unmap_single(ring_data->pdev,rxdp1->Buffer0_ptr,(unsigned long)(ring_data->mtu + 22U),2);
    }
    else 
      #line 2929 
      if (ring_data->rxd_mode == 1) {
        #line 2930 
        rxdp3 = (struct RxD3 *)rxdp;
        #line 2931 
        pci_dma_sync_single_for_cpu(ring_data->pdev,rxdp3->Buffer0_ptr,40UL,2);
        #line 2935 
        pci_unmap_single(ring_data->pdev,rxdp3->Buffer2_ptr,(unsigned long)(ring_data->mtu + 4U),2);
      }
    #line 2940 
    __builtin_prefetch((void const *)((void *)skb->data));
    #line 2941 
    rx_osm_handler(ring_data,rxdp);
    #line 2942 
    (get_info.offset) ++;
    #line 2943 
    ring_data->rx_curr_get_info.offset = get_info.offset;
    #line 2944 
    rxdp = (struct RxD_t *)(ring_data->rx_blocks[get_block].rxds + (unsigned long)get_info.offset)->virt_addr;
    #line 2946 
    if (get_info.offset == (unsigned int)rxd_count[ring_data->rxd_mode]) {
      #line 2947 
      get_info.offset = 0U;
      #line 2948 
      ring_data->rx_curr_get_info.offset = get_info.offset;
      #line 2949 
      get_block ++;
      #line 2950 
      if (ring_data->block_count == get_block) 
                                               #line 2951 
                                               get_block = 0;
      #line 2952 
      ring_data->rx_curr_get_info.block_index = (unsigned int)get_block;
      #line 2953 
      rxdp = (struct RxD_t *)ring_data->rx_blocks[get_block].block_virt_addr;
    }
    #line 2956 
    if ((unsigned int)(ring_data->nic)->config.napi != 0U) {
      #line 2957 
      budget --;
      #line 2958 
      napi_pkts ++;
      #line 2959 
      if (budget == 0) 
                       #line 2960 
                       break;
    }
    #line 2962 
    pkt_cnt ++;
    #line 2963 
    if (indicate_max_pkts != 0U && (unsigned int)pkt_cnt > indicate_max_pkts) 
      #line 2964 
      break;
  }
  #line 2966 
  if ((unsigned int)ring_data->lro != 0U) {
    #line 2968 
    i = 0;
    #line 2968 
    while (i <= 31) {
      {
        #line 2969 
        struct lro *lro = & ring_data->lro0_n[i];
        #line 2970 
        if (lro->in_use != 0) {
          #line 2971 
          update_L3L4_header(ring_data->nic,lro);
          #line 2972 
          queue_rx_frame(lro->parent,(unsigned short)((int)lro->vlan_tag));
          #line 2973 
          clear_lro_session(lro);
        }
      }
      #line 2968 
      i ++;
    }
  }
  #line 2977 
  return napi_pkts;
}

#line 2992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void tx_intr_handler(struct fifo_info *fifo_data)
{
  #line 2995 
  struct tx_curr_get_info get_info;
  #line 2995 
  struct tx_curr_get_info put_info;
  #line 2997 
  struct TxD *txdlp;
  #line 3000 
  u8 err_mask;
  #line 2994 
  struct s2io_nic *nic = fifo_data->nic;
  #line 2996 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 2998 
  int pkt_cnt = 0;
  #line 2999 
  unsigned long flags = 0UL;
  #line 3001 
  struct stat_block *stats = nic->mac_control.stats_info;
  #line 3002 
  struct swStat *swstats = & stats->sw_stat;
  #line 3004 
  if (cif___ldv_spin_trylock_tx_lock_of_fifo_info(& fifo_data->tx_lock) == 0) 
    #line 3005 
    return;
  #line 3007 
  get_info = fifo_data->tx_curr_get_info;
  #line 3008 
  memcpy((void *)(& put_info),(void *)(& fifo_data->tx_curr_put_info),8UL);
  #line 3009 
  txdlp = (struct TxD *)(fifo_data->list_info + (unsigned long)get_info.offset)->list_virt_addr;
  #line 3010 
  while (((txdlp->Control_1 & 72057594037927936ULL) == 0ULL && get_info.offset != put_info.offset) && txdlp->Host_Control != 0ULL) {
    #line 3014 
    if ((txdlp->Control_1 & 4222124650659840ULL) != 0ULL) {
      #line 3015 
      unsigned long long err;
      #line 3016 
      err = txdlp->Control_1 & 4222124650659840ULL;
      #line 3017 
      if ((err & 1ULL) != 0ULL) 
                                #line 3018 
                                (swstats->parity_err_cnt) ++;
      #line 3022 
      err_mask = (unsigned char)(err >> 48);
      #line 3023 
      switch ((int)err_mask) {
        #line 3024 
        case 2: 
                #line 3024 
        ;
        #line 3025 
        (swstats->tx_buf_abort_cnt) ++;
        #line 3026 
        break;
        #line 3028 
        case 3: 
                #line 3028 
        ;
        #line 3029 
        (swstats->tx_desc_abort_cnt) ++;
        #line 3030 
        break;
        #line 3032 
        case 7: 
                #line 3032 
        ;
        #line 3033 
        (swstats->tx_parity_err_cnt) ++;
        #line 3034 
        break;
        #line 3036 
        case 10: 
                 #line 3036 
        ;
        #line 3037 
        (swstats->tx_link_loss_cnt) ++;
        #line 3038 
        break;
        #line 3040 
        case 15: 
                 #line 3040 
        ;
        #line 3041 
        (swstats->tx_list_proc_err_cnt) ++;
        #line 3042 
        break;
      }
    }
    #line 3046 
    skb = s2io_txdl_getskb(fifo_data,txdlp,(int)get_info.offset);
    #line 3047 
    if (skb == (struct sk_buff *)0) {
      #line 3048 
      cif_spin_unlock_irqrestore_tx_lock_of_fifo_info(& fifo_data->tx_lock,flags);
      #line 3049 
      if (debug_level >= 0) 
                            #line 3049 
                            printk((char *)"\001",(char *)"tx_intr_handler");
      #line 3051 
      return;
    }
    #line 3053 
    pkt_cnt ++;
    #line 3056 
    swstats->mem_freed += (unsigned long long)skb->truesize;
    #line 3057 
    dev_consume_skb_irq(skb);
    #line 3059 
    (get_info.offset) ++;
    #line 3060 
    if (get_info.offset == get_info.fifo_len + 1U) 
                                                   #line 3061 
                                                   get_info.offset = 0U;
    #line 3062 
    txdlp = (struct TxD *)(fifo_data->list_info + (unsigned long)get_info.offset)->list_virt_addr;
    #line 3063 
    fifo_data->tx_curr_get_info.offset = get_info.offset;
  }
  #line 3066 
  s2io_wake_tx_queue(fifo_data,pkt_cnt,(unsigned char)((int)nic->config.multiq));
  #line 3068 
  cif_spin_unlock_irqrestore_tx_lock_of_fifo_info(& fifo_data->tx_lock,flags);
  #line 3069 
  return;
}

#line 3081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_mdio_write(u32 mmd_type, u64 addr, u16 value, struct net_device *dev)
{
  #line 3084 
  u64 val64;
  #line 3085 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 3086 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 3089 
  val64 = (addr << 48) | ((unsigned long long)mmd_type << 40);
  #line 3092 
  writeq(val64,(void *)(& bar0->mdio_control));
  #line 3093 
  val64 |= 224ULL;
  #line 3094 
  writeq(val64,(void *)(& bar0->mdio_control));
  #line 3095 
  __const_udelay(429500UL);
  #line 3098 
  val64 = (((addr << 48) | ((unsigned long long)mmd_type << 40)) | ((unsigned long long)value << 16)) | 4ULL;
  #line 3103 
  writeq(val64,(void *)(& bar0->mdio_control));
  #line 3104 
  val64 |= 224ULL;
  #line 3105 
  writeq(val64,(void *)(& bar0->mdio_control));
  #line 3106 
  __const_udelay(429500UL);
  #line 3108 
  val64 = ((addr << 48) | ((unsigned long long)mmd_type << 40)) | 12ULL;
  #line 3112 
  writeq(val64,(void *)(& bar0->mdio_control));
  #line 3113 
  val64 |= 224ULL;
  #line 3114 
  writeq(val64,(void *)(& bar0->mdio_control));
  #line 3115 
  __const_udelay(429500UL);
  #line 3117 
  return;
}

#line 3127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static u64 s2io_mdio_read(u32 mmd_type, u64 addr, struct net_device *dev)
{
  #line 3129 
  u64 val64 = 0ULL;
  #line 3130 
  u64 rval64 = 0ULL;
  #line 3131 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 3132 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 3135 
  val64 = ((addr << 48) | ((unsigned long long)mmd_type << 40)) | val64;
  #line 3138 
  writeq(val64,(void *)(& bar0->mdio_control));
  #line 3139 
  val64 |= 224ULL;
  #line 3140 
  writeq(val64,(void *)(& bar0->mdio_control));
  #line 3141 
  __const_udelay(429500UL);
  #line 3144 
  val64 = ((addr << 48) | ((unsigned long long)mmd_type << 40)) | 12ULL;
  #line 3148 
  writeq(val64,(void *)(& bar0->mdio_control));
  #line 3149 
  val64 |= 224ULL;
  #line 3150 
  writeq(val64,(void *)(& bar0->mdio_control));
  #line 3151 
  __const_udelay(429500UL);
  #line 3154 
  rval64 = readq((void *)(& bar0->mdio_control));
  #line 3155 
  rval64 &= 4294901760ULL;
  #line 3156 
  rval64 >>= 16;
  #line 3157 
  return rval64;
}

#line 3170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_chk_xpak_counter(u64 *counter, u64 *regs_stat, u32 index, u16 flag, u16 type)
{
  #line 3174 
  u64 val64;
  #line 3175 
  int i;
  #line 3173 
  u64 mask = 3ULL;
  #line 3176 
  i = 0;
  #line 3176 
  while ((unsigned int)i < index) {
    #line 3177 
    mask <<= 2;
    #line 3176 
    i ++;
  }
  #line 3179 
  if ((unsigned int)flag != 0U) {
    #line 3180 
    (*counter) ++;
    #line 3181 
    val64 = *regs_stat & mask;
    #line 3182 
    val64 >>= index * 2U;
    #line 3183 
    val64 ++;
    #line 3184 
    if (val64 == 3ULL) {
      #line 3185 
      switch ((int)type) {
        #line 3186 
        case 1: 
                #line 3186 
        ;
        #line 3187 
        if (debug_level >= 0) 
                              #line 3187 
                              printk((char *)"\001");
        #line 3189 
        if (debug_level >= 0) 
                              #line 3189 
                              printk((char *)"\001");
        #line 3191 
        break;
        #line 3192 
        case 2: 
                #line 3192 
        ;
        #line 3193 
        if (debug_level >= 0) 
                              #line 3193 
                              printk((char *)"\001");
        #line 3195 
        if (debug_level >= 0) 
                              #line 3195 
                              printk((char *)"\001");
        #line 3197 
        break;
        #line 3198 
        case 3: 
                #line 3198 
        ;
        #line 3199 
        if (debug_level >= 0) 
                              #line 3199 
                              printk((char *)"\001");
        #line 3201 
        if (debug_level >= 0) 
                              #line 3201 
                              printk((char *)"\001");
        #line 3203 
        break;
        #line 3204 
        default: 
                 #line 3204 
        ;
        #line 3205 
        if (debug_level >= 0) 
                              #line 3205 
                              printk((char *)"\001");
      }
      #line 3208 
      val64 = 0ULL;
    }
    #line 3210 
    val64 <<= index * 2U;
    #line 3211 
    *regs_stat = (*regs_stat & ~ mask) | val64;
  }
  else 
       #line 3214 
       *regs_stat &= ~ mask;
  #line 3215 
  return;
}

#line 3225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_updt_xpak_counter(struct net_device *dev)
{
  #line 3227 
  u16 flag = (unsigned short)0U;
  #line 3228 
  u16 type = (unsigned short)0U;
  #line 3229 
  u16 val16 = (unsigned short)0U;
  #line 3230 
  u64 val64 = 0ULL;
  #line 3231 
  u64 addr = 0ULL;
  #line 3233 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 3234 
  struct stat_block *stats = sp->mac_control.stats_info;
  #line 3235 
  struct xpakStat *xstats = & stats->xpak_stat;
  #line 3238 
  addr = 0ULL;
  #line 3239 
  val64 = 0ULL;
  #line 3240 
  val64 = s2io_mdio_read(1U,addr,dev);
  #line 3241 
  if (val64 == 65535ULL || val64 == 0ULL) {
    #line 3242 
    if (debug_level >= 0) 
                          #line 3242 
                          printk((char *)"\001",val64);
    #line 3245 
    return;
  }
  #line 3249 
  if (val64 != 8256ULL) {
    #line 3250 
    if (debug_level >= 0) 
                          #line 3250 
                          printk((char *)"\001",val64,8256);
    #line 3253 
    return;
  }
  #line 3257 
  addr = 41216ULL;
  #line 3258 
  s2io_mdio_write(1U,addr,(unsigned short)((int)val16),dev);
  #line 3259 
  val64 = s2io_mdio_read(1U,addr,dev);
  #line 3262 
  addr = 41072ULL;
  #line 3263 
  val64 = 0ULL;
  #line 3264 
  val64 = s2io_mdio_read(1U,addr,dev);
  #line 3266 
  flag = (unsigned short)((unsigned int)((unsigned short)val64) & 128U);
  #line 3267 
  type = (unsigned short)1U;
  #line 3268 
  s2io_chk_xpak_counter(& xstats->alarm_transceiver_temp_high,& xstats->xpak_regs_stat,0U,(unsigned short)((int)flag),(unsigned short)((int)type));
  #line 3272 
  if ((val64 & 64ULL) != 0ULL) 
                               #line 3273 
                               (xstats->alarm_transceiver_temp_low) ++;
  #line 3275 
  flag = (unsigned short)((unsigned int)((unsigned short)val64) & 8U);
  #line 3276 
  type = (unsigned short)2U;
  #line 3277 
  s2io_chk_xpak_counter(& xstats->alarm_laser_bias_current_high,& xstats->xpak_regs_stat,2U,(unsigned short)((int)flag),(unsigned short)((int)type));
  #line 3281 
  if ((val64 & 4ULL) != 0ULL) 
                              #line 3282 
                              (xstats->alarm_laser_bias_current_low) ++;
  #line 3284 
  flag = (unsigned short)((unsigned int)((unsigned short)val64) & 2U);
  #line 3285 
  type = (unsigned short)3U;
  #line 3286 
  s2io_chk_xpak_counter(& xstats->alarm_laser_output_power_high,& xstats->xpak_regs_stat,4U,(unsigned short)((int)flag),(unsigned short)((int)type));
  #line 3290 
  if ((val64 & 1ULL) != 0ULL) 
                              #line 3291 
                              (xstats->alarm_laser_output_power_low) ++;
  #line 3294 
  addr = 41076ULL;
  #line 3295 
  val64 = 0ULL;
  #line 3296 
  val64 = s2io_mdio_read(1U,addr,dev);
  #line 3298 
  if ((val64 & 128ULL) != 0ULL) 
                                #line 3299 
                                (xstats->warn_transceiver_temp_high) ++;
  #line 3301 
  if ((val64 & 64ULL) != 0ULL) 
                               #line 3302 
                               (xstats->warn_transceiver_temp_low) ++;
  #line 3304 
  if ((val64 & 8ULL) != 0ULL) 
                              #line 3305 
                              (xstats->warn_laser_bias_current_high) ++;
  #line 3307 
  if ((val64 & 4ULL) != 0ULL) 
                              #line 3308 
                              (xstats->warn_laser_bias_current_low) ++;
  #line 3310 
  if ((val64 & 2ULL) != 0ULL) 
                              #line 3311 
                              (xstats->warn_laser_output_power_high) ++;
  #line 3313 
  if ((val64 & 1ULL) != 0ULL) 
                              #line 3314 
                              (xstats->warn_laser_output_power_low) ++;
  #line 3315 
  return;
}

#line 3328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int wait_for_cmd_complete(void *addr, u64 busy_bit, int bit_state)
{
  #line 3332 
  u64 val64;
  #line 3331 
  int ret = -1;
  #line 3331 
  int cnt = 0;
  #line 3331 
  int delay = 1;
  #line 3334 
  if ((unsigned int)bit_state + 4294967295U > 1U) 
                                                  #line 3335 
                                                  return -1;
  #line 3337 
  while (1) {
    {
      #line 3338 
      val64 = readq(addr);
      #line 3339 
      if (bit_state == 1) {
        #line 3340 
        if ((val64 & busy_bit) == 0ULL) {
          #line 3341 
          ret = 0;
          #line 3342 
          break;
        }
      }
      else 
        #line 3345 
        if ((val64 & busy_bit) != 0ULL) {
          #line 3346 
          ret = 0;
          #line 3347 
          break;
        }
      #line 3351 
      if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
        #line 3352 
        if (0 != 0 && delay <= 5) 
          #line 3352 
          if (0 != 0) 
            #line 3352 
            if (delay > 19) 
                            #line 3352 
                            __bad_udelay(); else 
                                                 #line 3352 
                                                 __const_udelay((unsigned long)(delay * 1000) * 4295UL);
          else 
               #line 3352 
               __udelay((unsigned long)(delay * 1000));
        else {
          #line 3352 
          unsigned long __ms = (unsigned long)delay;
          #line 3352 
          while (1) {
            #line 3352 
            unsigned long tmp;
            #line 3352 
            tmp = __ms;
            #line 3352 
            __ms --;
            #line 3352 
            ;
            #line 3352 
            if (! (tmp != 0UL)) 
                                #line 3352 
                                break;
            #line 3352 
            __const_udelay(4295000UL);
          }
        }
      else 
           #line 3354 
           msleep((unsigned int)delay);
      #line 3356 
      cnt ++;
      #line 3356 
      if (cnt > 9) 
                   #line 3357 
                   delay = 50;
    }
    #line 3358 
    if (! (cnt <= 19)) 
                       #line 3337 
                       break;
  }
  #line 3359 
  return ret;
}

#line 3367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static u16 check_pci_device_id(u16 id)
{
  #line 3369 
  switch ((int)id) {
    #line 3370 
    case 22322: 
                #line 3370 
    ;
    #line 3371 
    case 22578: 
                #line 3371 
    ;
    #line 3372 
    return (unsigned short)2U;
    #line 3373 
    case 22577: 
                #line 3373 
    ;
    #line 3374 
    case 22321: 
                #line 3374 
    ;
    #line 3375 
    return (unsigned short)1U;
    #line 3376 
    default: 
             #line 3376 
    ;
    #line 3377 
    return (unsigned short)65535U;
  }
}

#line 3391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_reset(struct s2io_nic *sp)
{
  #line 3394 
  u64 val64;
  #line 3395 
  u16 subid;
  #line 3395 
  u16 pci_cmd;
  #line 3396 
  int i;
  #line 3397 
  u16 val16;
  #line 3398 
  unsigned long long up_cnt;
  #line 3398 
  unsigned long long down_cnt;
  #line 3398 
  unsigned long long up_time;
  #line 3398 
  unsigned long long down_time;
  #line 3398 
  unsigned long long reset_cnt;
  #line 3399 
  unsigned long long mem_alloc_cnt;
  #line 3399 
  unsigned long long mem_free_cnt;
  #line 3399 
  unsigned long long watchdog_cnt;
  #line 3400 
  struct stat_block *stats;
  #line 3401 
  struct swStat *swstats;
  #line 3393 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 3403 
  if (debug_level > 0) {
    #line 3403 
    printk((char *)"\001",(char *)"s2io_reset",pci_name(sp->pdev));
  }
  #line 3407 
  pci_read_config_word(sp->pdev,98,& pci_cmd);
  #line 3409 
  val64 = 11936127806833950720ULL;
  #line 3410 
  writeq(val64,(void *)(& bar0->sw_reset));
  #line 3411 
  if (cif_strstr((char *)(& sp->product_name),(char *)"CX4") != (char *)0) 
    #line 3412 
    msleep(750U);
  #line 3413 
  msleep(250U);
  #line 3414 
  i = 0;
  #line 3414 
  while (i <= 99) {
    {
      #line 3417 
      pci_restore_state(sp->pdev);
      #line 3418 
      pci_save_state(sp->pdev);
      #line 3419 
      pci_read_config_word(sp->pdev,2,& val16);
      #line 3420 
      if ((unsigned int)check_pci_device_id((unsigned short)((int)val16)) != 65535U) 
        #line 3421 
        break;
      #line 3422 
      msleep(200U);
    }
    #line 3414 
    i ++;
  }
  #line 3425 
  if ((unsigned int)check_pci_device_id((unsigned short)((int)val16)) == 65535U) 
    #line 3426 
    if (debug_level >= 0) 
                          #line 3426 
                          printk((char *)"\001",(char *)"s2io_reset");
  #line 3428 
  pci_write_config_word(sp->pdev,98,(unsigned short)((int)pci_cmd));
  #line 3430 
  s2io_init_pci(sp);
  #line 3433 
  s2io_set_swapper(sp);
  #line 3436 
  do_s2io_restore_unicast_mc(sp);
  #line 3439 
  restore_xmsi_data(sp);
  #line 3442 
  if ((unsigned int)sp->device_type == 2U) {
    #line 3444 
    pci_write_config_word(sp->pdev,6,(unsigned short)32768);
    #line 3447 
    pci_write_config_dword(sp->pdev,104,124U);
    #line 3450 
    writeq(2ULL,(void *)(& bar0->txpic_int_reg));
  }
  #line 3454 
  memset((void *)(& sp->stats),0,184UL);
  #line 3456 
  stats = sp->mac_control.stats_info;
  #line 3457 
  swstats = & stats->sw_stat;
  #line 3460 
  up_cnt = swstats->link_up_cnt;
  #line 3461 
  down_cnt = swstats->link_down_cnt;
  #line 3462 
  up_time = swstats->link_up_time;
  #line 3463 
  down_time = swstats->link_down_time;
  #line 3464 
  reset_cnt = swstats->soft_reset_cnt;
  #line 3465 
  mem_alloc_cnt = swstats->mem_allocated;
  #line 3466 
  mem_free_cnt = swstats->mem_freed;
  #line 3467 
  watchdog_cnt = swstats->watchdog_timer_cnt;
  #line 3469 
  memset((void *)stats,0,1416UL);
  #line 3472 
  swstats->link_up_cnt = up_cnt;
  #line 3473 
  swstats->link_down_cnt = down_cnt;
  #line 3474 
  swstats->link_up_time = up_time;
  #line 3475 
  swstats->link_down_time = down_time;
  #line 3476 
  swstats->soft_reset_cnt = reset_cnt;
  #line 3477 
  swstats->mem_allocated = mem_alloc_cnt;
  #line 3478 
  swstats->mem_freed = mem_free_cnt;
  #line 3479 
  swstats->watchdog_timer_cnt = watchdog_cnt;
  #line 3482 
  subid = (sp->pdev)->subsystem_device;
  #line 3483 
  if (((int)subid & 255) > 6 && (unsigned int)sp->device_type == 1U) {
    #line 3485 
    val64 = readq((void *)(& bar0->gpio_control));
    #line 3486 
    val64 |= 140737488355328ULL;
    #line 3487 
    writeq(val64,(void *)(& bar0->gpio_control));
    #line 3488 
    val64 = 293019865982173184ULL;
    #line 3489 
    writeq(val64,(void *)bar0 + 9984U);
  }
  #line 3496 
  if ((unsigned int)sp->device_type == 2U) {
    #line 3497 
    val64 = readq((void *)(& bar0->pcc_err_reg));
    #line 3498 
    writeq(val64,(void *)(& bar0->pcc_err_reg));
  }
  #line 3501 
  sp->device_enabled_once = 0;
  #line 3502 
  return;
}

#line 3514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_set_swapper(struct s2io_nic *sp)
{
  #line 3518 
  u64 val64;
  #line 3518 
  u64 valt;
  #line 3518 
  u64 valr;
  #line 3516 
  struct net_device *dev = sp->dev;
  #line 3517 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 3525 
  val64 = readq((void *)(& bar0->pif_rd_swapper_fb));
  #line 3526 
  if (val64 != 81985529216486895ULL) {
    #line 3527 
    int i = 0;
    #line 3528 
    u64 value[4U] = {14051231678186127555ULL, 9295430187107745921ULL, 4755801491078381634ULL, 0ULL};
    #line 3535 
    while (i <= 3) {
      #line 3536 
      writeq(value[i],(void *)(& bar0->swapper_ctrl));
      #line 3537 
      val64 = readq((void *)(& bar0->pif_rd_swapper_fb));
      #line 3538 
      if (val64 == 81985529216486895ULL) 
                                         #line 3539 
                                         break;
      #line 3540 
      i ++;
    }
    #line 3542 
    if (i == 4) {
      #line 3543 
      if (debug_level >= 0) 
                            #line 3543 
                            printk((char *)"\001",(char *)(& dev->name),val64);
      #line 3546 
      return -1;
    }
    #line 3548 
    valr = value[i];
  }
  else 
       #line 3550 
       valr = readq((void *)(& bar0->swapper_ctrl));
  #line 3553 
  valt = 81985529216486895ULL;
  #line 3554 
  writeq(valt,(void *)(& bar0->xmsi_address));
  #line 3555 
  val64 = readq((void *)(& bar0->xmsi_address));
  #line 3557 
  if (val64 != valt) {
    #line 3558 
    int i_0 = 0;
    #line 3559 
    u64 value_0[4U] = {55102025238823680ULL, 36452109004144896ULL, 18649916234678784ULL, 0ULL};
    #line 3566 
    while (i_0 <= 3) {
      #line 3567 
      writeq(value_0[i_0] | valr,(void *)(& bar0->swapper_ctrl));
      #line 3568 
      writeq(valt,(void *)(& bar0->xmsi_address));
      #line 3569 
      val64 = readq((void *)(& bar0->xmsi_address));
      #line 3570 
      if (val64 == valt) 
                         #line 3571 
                         break;
      #line 3572 
      i_0 ++;
    }
    #line 3574 
    if (i_0 == 4) {
      #line 3575 
      unsigned long long x = val64;
      #line 3576 
      if (debug_level >= 0) 
                            #line 3576 
                            printk((char *)"\001",x);
      #line 3578 
      return -1;
    }
  }
  #line 3581 
  val64 = readq((void *)(& bar0->swapper_ctrl));
  #line 3582 
  val64 &= 18446462598732840960ULL;
  #line 3609 
  val64 |= 279280122642432ULL;
  #line 3624 
  if ((unsigned int)sp->config.intr_type == 0U) 
                                                #line 3625 
                                                val64 |= 4194304ULL;
  #line 3626 
  writeq(val64,(void *)(& bar0->swapper_ctrl));
  #line 3628 
  val64 = readq((void *)(& bar0->swapper_ctrl));
  #line 3634 
  val64 = readq((void *)(& bar0->pif_rd_swapper_fb));
  #line 3635 
  if (val64 != 81985529216486895ULL) {
    #line 3637 
    if (debug_level >= 0) 
                          #line 3637 
                          printk((char *)"\001",(char *)(& dev->name),val64);
    #line 3640 
    return -1;
  }
  #line 3643 
  return 0;
}

#line 3646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int wait_for_msix_trans(struct s2io_nic *nic, int i)
{
  #line 3649 
  u64 val64;
  #line 3648 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 3650 
  int ret = 0;
  #line 3650 
  int cnt = 0;
  #line 3652 
  while (1) {
    #line 3653 
    val64 = readq((void *)(& bar0->xmsi_access));
    #line 3654 
    if ((val64 & 281474976710656ULL) == 0ULL) 
                                              #line 3655 
                                              break;
    #line 3656 
    __const_udelay(4295000UL);
    #line 3657 
    cnt ++;
    #line 3658 
    if (! (cnt <= 4)) 
                      #line 3652 
                      break;
  }
  #line 3659 
  if (cnt == 5) {
    #line 3660 
    if (debug_level >= 0) 
                          #line 3660 
                          printk((char *)"\001",i);
    #line 3661 
    ret = 1;
  }
  #line 3664 
  return ret;
}

#line 3667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void restore_xmsi_data(struct s2io_nic *nic)
{
  #line 3670 
  u64 val64;
  #line 3671 
  int i;
  #line 3671 
  int msix_index;
  #line 3669 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 3673 
  if ((unsigned int)nic->device_type == 1U) 
                                            #line 3674 
                                            return;
  #line 3676 
  i = 0;
  #line 3676 
  while (i <= 8) {
    {
      #line 3677 
      if (i != 0) 
                  #line 3677 
                  msix_index = (i + -1) * 8 + 1; else 
                                                      #line 3677 
                                                      msix_index = 0;
      #line 3678 
      writeq(nic->msix_info[i].addr,(void *)(& bar0->xmsi_address));
      #line 3679 
      writeq(nic->msix_info[i].data,(void *)(& bar0->xmsi_data));
      #line 3680 
      val64 = ((unsigned long long)msix_index << 32) | 72339069014638592ULL;
      #line 3681 
      writeq(val64,(void *)(& bar0->xmsi_access));
      #line 3682 
      if (wait_for_msix_trans(nic,msix_index) != 0) 
        #line 3683 
        if (debug_level >= 0) 
                              #line 3683 
                              printk((char *)"\001",(char *)"restore_xmsi_data",msix_index);
    }
    #line 3676 
    i ++;
  }
  #line 3685 
  return;
}

#line 3688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void store_xmsi_data(struct s2io_nic *nic)
{
  #line 3691 
  u64 val64;
  #line 3691 
  u64 addr;
  #line 3691 
  u64 data;
  #line 3692 
  int i;
  #line 3692 
  int msix_index;
  #line 3690 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 3694 
  if ((unsigned int)nic->device_type == 1U) 
                                            #line 3695 
                                            return;
  #line 3698 
  i = 0;
  #line 3698 
  while (i <= 8) {
    {
      #line 3699 
      if (i != 0) 
                  #line 3699 
                  msix_index = (i + -1) * 8 + 1; else 
                                                      #line 3699 
                                                      msix_index = 0;
      #line 3700 
      val64 = ((unsigned long long)msix_index << 32) | 281474976710656ULL;
      #line 3701 
      writeq(val64,(void *)(& bar0->xmsi_access));
      #line 3702 
      if (wait_for_msix_trans(nic,msix_index) != 0) {
        #line 3703 
        if (debug_level >= 0) 
                              #line 3703 
                              printk((char *)"\001",(char *)"store_xmsi_data",msix_index);
        #line 3705 
        goto __Cont;
      }
      #line 3707 
      addr = readq((void *)(& bar0->xmsi_address));
      #line 3708 
      data = readq((void *)(& bar0->xmsi_data));
      #line 3709 
      if (addr != 0ULL && data != 0ULL) {
        #line 3710 
        nic->msix_info[i].addr = addr;
        #line 3711 
        nic->msix_info[i].data = data;
      }
    }
    #line 3698 
    __Cont: 
            #line 3698 
    i ++;
  }
  #line 3714 
  return;
}

#line 3716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_enable_msi_x(struct s2io_nic *nic)
{
  #line 3719 
  u64 rx_mat;
  #line 3720 
  u16 msi_control;
  #line 3721 
  int ret;
  #line 3721 
  int i;
  #line 3721 
  int j;
  #line 3722 
  int size;
  #line 3718 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 3721 
  int msix_indx = 1;
  #line 3723 
  struct stat_block *stats = nic->mac_control.stats_info;
  #line 3724 
  struct swStat *swstats = & stats->sw_stat;
  #line 3726 
  size = (int)((unsigned long)nic->num_entries * (unsigned long)8U);
  #line 3727 
  nic->entries = (struct msix_entry *)kzalloc((unsigned long)size,3264U);
  #line 3728 
  if (nic->entries == (struct msix_entry *)0) {
    #line 3729 
    if (debug_level > 1) 
                         #line 3729 
                         printk((char *)"\001",(char *)"s2io_enable_msi_x");
    #line 3731 
    (swstats->mem_alloc_fail_cnt) ++;
    #line 3732 
    return -12;
  }
  #line 3734 
  swstats->mem_allocated += (unsigned long long)size;
  #line 3736 
  size = (int)((unsigned long)nic->num_entries * (unsigned long)24U);
  #line 3737 
  nic->s2io_entries = (struct s2io_msix_entry *)kzalloc((unsigned long)size,3264U);
  #line 3738 
  if (nic->s2io_entries == (struct s2io_msix_entry *)0) {
    #line 3739 
    if (debug_level > 1) 
                         #line 3739 
                         printk((char *)"\001",(char *)"s2io_enable_msi_x");
    #line 3741 
    (swstats->mem_alloc_fail_cnt) ++;
    #line 3742 
    kfree((void *)nic->entries);
    #line 3744 
    swstats->mem_freed += (unsigned long long)((unsigned long)nic->num_entries * 8UL);
    #line 3745 
    return -12;
  }
  #line 3747 
  swstats->mem_allocated += (unsigned long long)size;
  #line 3749 
  (nic->entries)->entry = (unsigned short)0U;
  #line 3750 
  (nic->s2io_entries)->entry = (unsigned short)0U;
  #line 3751 
  (nic->s2io_entries)->in_use = (unsigned char)165U;
  #line 3752 
  (nic->s2io_entries)->type = (unsigned char)1U;
  #line 3753 
  (nic->s2io_entries)->arg = (void *)(& nic->mac_control.fifos);
  #line 3755 
  i = 1;
  #line 3755 
  while (nic->num_entries > i) {
    #line 3756 
    (nic->entries + (unsigned long)i)->entry = (unsigned short)((unsigned int)((unsigned short)(i + -1)) * 8U + 1U);
    #line 3757 
    (nic->s2io_entries + (unsigned long)i)->entry = (unsigned short)((unsigned int)((unsigned short)(i + -1)) * 8U + 1U);
    #line 3758 
    (nic->s2io_entries + (unsigned long)i)->arg = (void *)0;
    #line 3759 
    (nic->s2io_entries + (unsigned long)i)->in_use = (unsigned char)0U;
    #line 3755 
    i ++;
  }
  #line 3762 
  rx_mat = readq((void *)(& bar0->rx_mat));
  #line 3763 
  j = 0;
  #line 3763 
  while (nic->config.rx_ring_num > (unsigned int)j) {
    #line 3764 
    rx_mat = ((unsigned long long)msix_indx << (7 - j) * 8) | rx_mat;
    #line 3765 
    (nic->s2io_entries + ((unsigned long)j + (unsigned long)1U))->arg = (void *)(& nic->mac_control.rings[j]);
    #line 3766 
    (nic->s2io_entries + ((unsigned long)j + (unsigned long)1U))->type = (unsigned char)2U;
    #line 3767 
    (nic->s2io_entries + ((unsigned long)j + (unsigned long)1U))->in_use = (unsigned char)165U;
    #line 3768 
    msix_indx += 8;
    #line 3763 
    j ++;
  }
  #line 3770 
  writeq(rx_mat,(void *)(& bar0->rx_mat));
  #line 3771 
  readq((void *)(& bar0->rx_mat));
  #line 3773 
  ret = pci_enable_msix_range(nic->pdev,nic->entries,nic->num_entries,nic->num_entries);
  #line 3776 
  if (ret < 0) {
    #line 3777 
    if (debug_level >= 0) 
                          #line 3777 
                          printk((char *)"\001");
    #line 3778 
    kfree((void *)nic->entries);
    #line 3779 
    swstats->mem_freed += (unsigned long long)((unsigned long)nic->num_entries * 8UL);
    #line 3781 
    kfree((void *)nic->s2io_entries);
    #line 3782 
    swstats->mem_freed += (unsigned long long)((unsigned long)nic->num_entries * 24UL);
    #line 3784 
    nic->entries = (struct msix_entry *)0;
    #line 3785 
    nic->s2io_entries = (struct s2io_msix_entry *)0;
    #line 3786 
    return -12;
  }
  #line 3793 
  pci_read_config_word(nic->pdev,66,& msi_control);
  #line 3794 
  msi_control = (unsigned short)((unsigned int)msi_control | 1U);
  #line 3795 
  pci_write_config_word(nic->pdev,66,(unsigned short)((int)msi_control));
  #line 3797 
  return 0;
}

#line 3801  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static irqreturn_t s2io_test_intr(int irq, void *dev_id)
{
  #line 3803 
  struct s2io_nic *sp = (struct s2io_nic *)dev_id;
  #line 3805 
  sp->msi_detected = 1;
  #line 3806 
  __wake_up(& sp->msi_wait,3U,1,(void *)0);
  #line 3808 
  return IRQ_HANDLED;
}

#line 3812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_test_msi(struct s2io_nic *sp)
{
  #line 3816 
  int err;
  #line 3817 
  u64 val64;
  #line 3817 
  u64 saved64;
  #line 3814 
  struct pci_dev *pdev = sp->pdev;
  #line 3815 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 3819 
  err = cif_request_irq((sp->entries + 1U)->vector,& s2io_test_intr,0UL,(char *)(& sp->name),(void *)sp);
  #line 3821 
  if (err != 0) {
    #line 3822 
    if (debug_level >= 0) {
      #line 3822 
      ;
      #line 3822 
      ;
      #line 3822 
      printk((char *)"\001",(char *)(& (sp->dev)->name),pci_name(pdev),pdev->irq);
    }
    #line 3824 
    return err;
  }
  {
    #line 3827 
    struct lock_class_key __key;
    #line 3827 
    __init_waitqueue_head(& sp->msi_wait,(char *)"&sp->msi_wait",& __key);
  }
  #line 3828 
  sp->msi_detected = 0;
  #line 3830 
  val64 = readq((void *)(& bar0->scheduled_int_ctrl));
  #line 3830 
  saved64 = val64;
  #line 3831 
  val64 |= 4611686018427387904ULL;
  #line 3832 
  val64 |= 9223372036854775808ULL;
  #line 3833 
  val64 |= 281474976710656ULL;
  #line 3834 
  writeq(val64,(void *)(& bar0->scheduled_int_ctrl));
  {
    #line 3836 
    long __ret = 25L;
    #line 3836 
    __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c",3836,0);
    {
      #line 3836 
      bool __cond_0;
      #line 3836 
      __cond_0 = (_Bool)(sp->msi_detected != 0);
      #line 3836 
      if ((int)__cond_0 != 0 && __ret == 0L) 
                                             #line 3836 
                                             __ret = 1L;
      #line 3836 
      if ((((int)__cond_0 != 0 || __ret == 0L) != 0) == 0) {
        #line 3836 
        long __ret_0;
        {
          #line 3836 
          struct wait_queue_entry __wq_entry;
          #line 3836 
          __ret_0 = 25L;
          #line 3836 
          init_wait_entry(& __wq_entry,0);
          #line 3836 
          while (1) {
            #line 3836 
            bool __cond;
            #line 3836 
            long __int = prepare_to_wait_event(& sp->msi_wait,& __wq_entry,2);
            #line 3836 
            __cond = (_Bool)(sp->msi_detected != 0);
            #line 3836 
            if ((int)__cond != 0 && __ret_0 == 0L) 
                                                   #line 3836 
                                                   __ret_0 = 1L;
            #line 3836 
            if ((((int)__cond != 0 || __ret_0 == 0L) != 0) != 0) 
                                                                 #line 3836 
                                                                 break;
            #line 3836 
            __ret_0 = schedule_timeout(__ret_0);
          }
          #line 3836 
          finish_wait(& sp->msi_wait,& __wq_entry);
          #line 3836 
          __out_0: 
                   #line 3836 
          ;
          }
        #line 3836 
        __ret = __ret_0;
      }
    }
    #line 3836 
    long tmp_4 = __ret;
  }
  #line 3838 
  if (sp->msi_detected == 0) {
    #line 3840 
    if (debug_level >= 0) {
      #line 3840 
      ;
      #line 3840 
      printk((char *)"\001",(char *)(& (sp->dev)->name),pci_name(pdev));
    }
    #line 3844 
    err = -95;
  }
  #line 3847 
  cif_free_irq((sp->entries + 1U)->vector,(void *)sp);
  #line 3849 
  writeq(saved64,(void *)(& bar0->scheduled_int_ctrl));
  #line 3851 
  return err;
}

#line 3854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void remove_msix_isr(struct s2io_nic *sp)
{
  #line 3856 
  int i;
  #line 3857 
  u16 msi_control;
  #line 3859 
  i = 0;
  #line 3859 
  while (sp->num_entries > i) {
    #line 3860 
    if ((unsigned int)(sp->s2io_entries + (unsigned long)i)->in_use == 170U) {
      #line 3861 
      int vector = (int)(sp->entries + (unsigned long)i)->vector;
      #line 3862 
      void *arg = (sp->s2io_entries + (unsigned long)i)->arg;
      #line 3863 
      cif_free_irq((unsigned int)vector,arg);
    }
    #line 3859 
    i ++;
  }
  #line 3867 
  kfree((void *)sp->entries);
  #line 3868 
  kfree((void *)sp->s2io_entries);
  #line 3869 
  sp->entries = (struct msix_entry *)0;
  #line 3870 
  sp->s2io_entries = (struct s2io_msix_entry *)0;
  #line 3872 
  pci_read_config_word(sp->pdev,66,& msi_control);
  #line 3873 
  msi_control = (unsigned short)((unsigned int)msi_control & 65534U);
  #line 3874 
  pci_write_config_word(sp->pdev,66,(unsigned short)((int)msi_control));
  #line 3876 
  pci_disable_msix(sp->pdev);
  #line 3877 
  return;
}

#line 3879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void remove_inta_isr(struct s2io_nic *sp)
{
  #line 3881 
  cif_free_irq((sp->pdev)->irq,(void *)sp->dev);
  #line 3882 
  return;
}

#line 3900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_open(struct net_device *dev)
{
  #line 3902 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 3903 
  struct swStat *swstats = & (sp->mac_control.stats_info)->sw_stat;
  #line 3904 
  int err = 0;
  #line 3910 
  netif_carrier_off(dev);
  #line 3911 
  sp->last_link_state = (unsigned short)0U;
  #line 3914 
  err = s2io_card_up(sp);
  #line 3915 
  if (err != 0) {
    #line 3916 
    if (debug_level >= 0) 
                          #line 3916 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 3918 
    goto hw_init_failed;
  }
  #line 3921 
  if (do_s2io_prog_unicast(dev,dev->dev_addr) == -1) {
    #line 3922 
    if (debug_level >= 0) 
                          #line 3922 
                          printk((char *)"\001");
    #line 3923 
    s2io_card_down(sp);
    #line 3924 
    err = -19;
    #line 3925 
    goto hw_init_failed;
  }
  #line 3927 
  s2io_start_all_tx_queue(sp);
  #line 3928 
  return 0;
  #line 3930 
  hw_init_failed: 
                  #line 3930 
  ;
  #line 3931 
  if ((unsigned int)sp->config.intr_type == 2U) {
    #line 3932 
    if (sp->entries != (struct msix_entry *)0) {
      #line 3933 
      kfree((void *)sp->entries);
      #line 3934 
      swstats->mem_freed += (unsigned long long)((unsigned long)sp->num_entries * 8UL);
    }
    #line 3937 
    if (sp->s2io_entries != (struct s2io_msix_entry *)0) {
      #line 3938 
      kfree((void *)sp->s2io_entries);
      #line 3939 
      swstats->mem_freed += (unsigned long long)((unsigned long)sp->num_entries * 24UL);
    }
  }
  #line 3943 
  return err;
}

#line 3959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_close(struct net_device *dev)
{
  #line 3963 
  u64 tmp64;
  #line 3964 
  int offset;
  #line 3961 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 3962 
  struct config_param *config = & sp->config;
  #line 3969 
  if (is_s2io_card_up(sp) == 0) 
                                #line 3970 
                                return 0;
  #line 3972 
  s2io_stop_all_tx_queue(sp);
  #line 3974 
  offset = 1;
  #line 3974 
  while (config->max_mc_addr > offset) {
    #line 3975 
    tmp64 = do_s2io_read_unicast_mc(sp,offset);
    #line 3976 
    if (tmp64 != 281474976710655ULL) 
                                     #line 3977 
                                     do_s2io_delete_unicast_mc(sp,tmp64);
    #line 3974 
    offset ++;
  }
  #line 3980 
  s2io_card_down(sp);
  #line 3982 
  return 0;
}

#line 3998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static netdev_tx_t s2io_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 4001 
  u16 frg_cnt;
  #line 4001 
  u16 frg_len;
  #line 4001 
  u16 i;
  #line 4001 
  u16 queue;
  #line 4001 
  u16 queue_len;
  #line 4001 
  u16 put_off;
  #line 4001 
  u16 get_off;
  #line 4002 
  register u64 val64;
  #line 4003 
  struct TxD *txdp;
  #line 4004 
  struct TxFIFO_element *tx_fifo;
  #line 4008 
  int offload_type;
  #line 4161 
  int tmp_19;
  #line 4000 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 4005 
  unsigned long flags = 0UL;
  #line 4006 
  u16 vlan_tag = (unsigned short)0U;
  #line 4007 
  struct fifo_info *fifo = (struct fifo_info *)0;
  #line 4009 
  int enable_per_list_interrupt = 0;
  #line 4010 
  struct config_param *config = & sp->config;
  #line 4011 
  struct mac_info *mac_control = & sp->mac_control;
  #line 4012 
  struct stat_block *stats = mac_control->stats_info;
  #line 4013 
  struct swStat *swstats = & stats->sw_stat;
  #line 4015 
  if (debug_level > 2) 
                       #line 4015 
                       printk((char *)"\001",(char *)(& dev->name));
  #line 4017 
  if ((long)(skb->len == 0U) != 0L) {
    #line 4018 
    if (debug_level > 2) 
                         #line 4018 
                         printk((char *)"\001",(char *)(& dev->name));
    #line 4019 
    dev_kfree_skb_any(skb);
    #line 4020 
    return NETDEV_TX_OK;
  }
  #line 4023 
  if (is_s2io_card_up(sp) == 0) {
    #line 4024 
    if (debug_level > 2) 
                         #line 4024 
                         printk((char *)"\001",(char *)(& dev->name));
    #line 4026 
    dev_kfree_skb_any(skb);
    #line 4027 
    return NETDEV_TX_OK;
  }
  #line 4030 
  queue = (unsigned short)0U;
  #line 4031 
  if ((unsigned int)skb->vlan_present != 0U) 
                                             #line 4032 
                                             vlan_tag = skb->vlan_tci;
  #line 4033 
  if ((unsigned int)sp->config.tx_steering_type == 2U) {
    #line 4034 
    if ((unsigned int)skb->protocol == 8U) {
      #line 4035 
      struct iphdr *ip;
      #line 4036 
      struct tcphdr *th;
      #line 4037 
      ip = ip_hdr(skb);
      #line 4039 
      if (! ip_is_fragment(ip)) {
        #line 4040 
        th = (struct tcphdr *)((unsigned char *)ip + (unsigned long)((int)ip->ihl * 4));
        #line 4043 
        if ((unsigned int)ip->protocol == 6U) {
          #line 4044 
          queue_len = (unsigned short)sp->total_tcp_fifos;
          #line 4045 
          queue = (unsigned short)(((int)__builtin_bswap16((unsigned short)((int)th->source)) + (int)__builtin_bswap16((unsigned short)((int)th->dest))) & (int)sp->fifo_selector[(int)queue_len + -1]);
          #line 4048 
          if ((int)queue >= (int)queue_len) 
                                            #line 4049 
                                            queue = (unsigned short)((unsigned int)queue_len + 65535U);
        }
        else 
          #line 4050 
          if ((unsigned int)ip->protocol == 17U) {
            #line 4051 
            queue_len = (unsigned short)sp->total_udp_fifos;
            #line 4052 
            queue = (unsigned short)(((int)__builtin_bswap16((unsigned short)((int)th->source)) + (int)__builtin_bswap16((unsigned short)((int)th->dest))) & (int)sp->fifo_selector[(int)queue_len + -1]);
            #line 4055 
            if ((int)queue >= (int)queue_len) 
                                              #line 4056 
                                              queue = (unsigned short)((unsigned int)queue_len + 65535U);
            #line 4057 
            queue = (unsigned short)((int)((unsigned short)sp->udp_fifo_idx) + (int)queue);
            #line 4058 
            if (skb->len > 1024U) 
                                  #line 4059 
                                  enable_per_list_interrupt = 1;
          }
      }
    }
  }
  else 
    #line 4063 
    if ((unsigned int)sp->config.tx_steering_type == 1U) 
                                                         #line 4065 
                                                         queue = (unsigned short)config->fifo_mapping[skb->priority & 7U];
  #line 4067 
  fifo = & mac_control->fifos[(int)queue];
  #line 4069 
  cif___ldv_spin_lock_tx_lock_of_fifo_info(& fifo->tx_lock);
  #line 4071 
  if ((unsigned int)sp->config.multiq != 0U) {
    #line 4072 
    if ((int)__netif_subqueue_stopped(dev,
                                 (unsigned short)((int)((unsigned short)fifo->fifo_no))) != 0) {
      #line 4073 
      cif_spin_unlock_irqrestore_tx_lock_of_fifo_info(& fifo->tx_lock,flags);
      #line 4074 
      return NETDEV_TX_BUSY;
    }
  }
  else 
    #line 4076 
    if ((long)(fifo->queue_state == 1) != 0L) {
      #line 4077 
      if ((int)netif_queue_stopped(dev) != 0) {
        #line 4078 
        cif_spin_unlock_irqrestore_tx_lock_of_fifo_info(& fifo->tx_lock,flags);
        #line 4079 
        return NETDEV_TX_BUSY;
      }
    }
  #line 4083 
  put_off = (unsigned short)fifo->tx_curr_put_info.offset;
  #line 4084 
  get_off = (unsigned short)fifo->tx_curr_get_info.offset;
  #line 4085 
  txdp = (struct TxD *)(fifo->list_info + (unsigned long)put_off)->list_virt_addr;
  #line 4087 
  queue_len = (unsigned short)((unsigned int)((unsigned short)fifo->tx_curr_put_info.fifo_len) + 1U);
  #line 4089 
  if (txdp->Host_Control != 0ULL) 
                                  #line 4089 
                                  goto _LOR;
  else {
    #line 4089 
    int tmp_8;
    #line 4089 
    if ((int)put_off + 1 != (int)queue_len) 
                                            #line 4089 
                                            tmp_8 = (int)put_off + 1; else 
                                                                    #line 4089 
                                                                    tmp_8 = 0;
    #line 4089 
    ;
    #line 4089 
    if (tmp_8 == (int)get_off) {
      #line 4089 
      _LOR: {
              #line 4091 
              if (debug_level > 2) 
                                   #line 4091 
                                   printk((char *)"\001");
              #line 4092 
              s2io_stop_tx_queue(sp,fifo->fifo_no);
              #line 4093 
              dev_kfree_skb_any(skb);
              #line 4094 
              cif_spin_unlock_irqrestore_tx_lock_of_fifo_info(& fifo->tx_lock,flags);
              #line 4095 
              return NETDEV_TX_OK;
            }
    }
  }
  #line 4098 
  offload_type = (int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_type;
  #line 4099 
  if ((offload_type & 17) != 0) {
    #line 4100 
    txdp->Control_1 |= 8589934592ULL;
    #line 4101 
    txdp->Control_1 |= (unsigned long long)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size << 16;
  }
  #line 4103 
  if ((unsigned int)skb->ip_summed == 3U) 
                                          #line 4104 
                                          txdp->Control_2 |= 504403158265495552ULL;
  #line 4108 
  txdp->Control_1 |= 2199023255552ULL;
  #line 4109 
  txdp->Control_1 |= 72057594037927936ULL;
  #line 4110 
  txdp->Control_2 |= (unsigned long long)fifo->fifo_no << 24;
  #line 4111 
  if (enable_per_list_interrupt != 0) 
    #line 4112 
    if ((unsigned int)(((int)queue_len >> 5) & (int)put_off) != 0U) 
                                                                    #line 4113 
                                                                    txdp->Control_2 |= 65536ULL;
  #line 4114 
  if ((unsigned int)vlan_tag != 0U) {
    #line 4115 
    txdp->Control_2 |= 281474976710656ULL;
    #line 4116 
    txdp->Control_2 |= (unsigned long long)vlan_tag << 32;
  }
  #line 4119 
  frg_len = (unsigned short)skb_headlen(skb);
  #line 4120 
  txdp->Buffer_Pointer = pci_map_single(sp->pdev,(void *)skb->data,(unsigned long)frg_len,1);
  #line 4122 
  if (pci_dma_mapping_error(sp->pdev,txdp->Buffer_Pointer) != 0) 
                                                                 #line 4123 
                                                                 goto pci_map_failed;
  #line 4125 
  txdp->Host_Control = (unsigned long long)skb;
  #line 4126 
  txdp->Control_1 |= (unsigned long long)frg_len;
  #line 4128 
  frg_cnt = (unsigned short)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 4130 
  i = (unsigned short)0U;
  #line 4130 
  while ((int)i < (int)frg_cnt) {
    {
      #line 4131 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[(int)i];
      #line 4133 
      if (skb_frag_size(frag) == 0U) 
                                     #line 4134 
                                     goto __Cont;
      #line 4135 
      txdp ++;
      #line 4136 
      ;
      #line 4136 
      ;
      #line 4136 
      txdp->Buffer_Pointer = skb_frag_dma_map(& (sp->pdev)->dev,frag,0UL,
                          (unsigned long)skb_frag_size(frag),
                          (enum dma_data_direction)DMA_TO_DEVICE);
      #line 4140 
      txdp->Control_1 = (unsigned long long)skb_frag_size(frag);
    }
    #line 4130 
    __Cont: 
            #line 4130 
    i = (u16)((int)i + 1);
  }
  #line 4142 
  txdp->Control_1 |= 1099511627776ULL;
  #line 4144 
  tx_fifo = mac_control->tx_FIFO_start[(int)queue];
  #line 4145 
  val64 = (fifo->list_info + (unsigned long)put_off)->list_phy_addr;
  #line 4146 
  writeq(val64,(void *)(& tx_fifo->TxDL_Pointer));
  #line 4148 
  val64 = ((unsigned long long)frg_cnt << 56) | 844424930131968ULL;
  #line 4150 
  if (offload_type != 0) 
                         #line 4151 
                         val64 |= 1099511627776ULL;
  #line 4153 
  writeq(val64,(void *)(& tx_fifo->List_Control));
  #line 4155 
  put_off = (u16)((int)put_off + 1);
  #line 4156 
  if ((unsigned int)put_off == fifo->tx_curr_put_info.fifo_len + 1U) 
    #line 4157 
    put_off = (unsigned short)0U;
  #line 4158 
  fifo->tx_curr_put_info.offset = (unsigned int)put_off;
  #line 4161 
  if ((int)put_off + 1 != (int)queue_len) 
                                          #line 4161 
                                          tmp_19 = (int)put_off + 1; else 
                                                                    #line 4161 
                                                                    tmp_19 = 0;
  #line 4161 
  ;
  #line 4161 
  if (tmp_19 == (int)get_off) {
    #line 4162 
    (swstats->fifo_full_cnt) ++;
    #line 4163 
    if (debug_level > 2) 
                         #line 4163 
                         printk((char *)"\001",(int)put_off,(int)get_off);
    #line 4166 
    s2io_stop_tx_queue(sp,fifo->fifo_no);
  }
  #line 4168 
  swstats->mem_allocated += (unsigned long long)skb->truesize;
  #line 4169 
  cif_spin_unlock_irqrestore_tx_lock_of_fifo_info(& fifo->tx_lock,flags);
  #line 4171 
  if ((unsigned int)sp->config.intr_type == 2U) 
                                                #line 4172 
                                                tx_intr_handler(fifo);
  #line 4174 
  return NETDEV_TX_OK;
  #line 4176 
  pci_map_failed: 
                  #line 4176 
  ;
  #line 4177 
  (swstats->pci_map_fail_cnt) ++;
  #line 4178 
  s2io_stop_tx_queue(sp,fifo->fifo_no);
  #line 4179 
  swstats->mem_freed += (unsigned long long)skb->truesize;
  #line 4180 
  dev_kfree_skb_any(skb);
  #line 4181 
  cif_spin_unlock_irqrestore_tx_lock_of_fifo_info(& fifo->tx_lock,flags);
  #line 4182 
  return NETDEV_TX_OK;
}

#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_alarm_handle(struct timer_list *t)
{
  #line 4188 
  void *__mptr;
  #line 4188 
  __mptr = (void *)t;
  #line 4188 
  struct s2io_nic *sp = ((struct s2io_nic *)(__mptr + 18446744073709481768U));
  #line 4189 
  struct net_device *dev = sp->dev;
  #line 4191 
  s2io_handle_errors((void *)dev);
  #line 4192 
  cif_mod_timer(& sp->alarm_timer,jiffies + 125UL);
  #line 4193 
  return;
}

#line 4195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static irqreturn_t s2io_msix_ring_handle(int irq, void *dev_id)
{
  #line 4197 
  struct ring_info *ring = (struct ring_info *)dev_id;
  #line 4198 
  struct s2io_nic *sp = ring->nic;
  #line 4199 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 4201 
  if ((long)(is_s2io_card_up(sp) == 0) != 0L) 
                                              #line 4202 
                                              return IRQ_HANDLED;
  #line 4204 
  if ((unsigned int)sp->config.napi != 0U) {
    #line 4205 
    u8 *addr = (u8 *)0U;
    #line 4206 
    u8 val8 = (unsigned char)0U;
    #line 4208 
    addr = (u8 *)(& bar0->xmsi_mask_reg);
    #line 4209 
    addr += (unsigned long)(7 - ring->ring_no);
    #line 4210 
    if (ring->ring_no == 0) 
                            #line 4210 
                            val8 = (unsigned char)127U; else 
                                                             #line 4210 
                                                             val8 = (unsigned char)255U;
    #line 4211 
    writeb((unsigned char)((int)val8),(void *)addr);
    #line 4212 
    val8 = readb((void *)addr);
    #line 4213 
    napi_schedule(& ring->napi);
  }
  else {
    #line 4215 
    rx_intr_handler(ring,0);
    #line 4216 
    s2io_chk_rx_buffers(sp,ring);
  }
  #line 4219 
  return IRQ_HANDLED;
}

#line 4222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static irqreturn_t s2io_msix_fifo_handle(int irq, void *dev_id)
{
  #line 4224 
  int i;
  #line 4229 
  u64 reason;
  #line 4225 
  struct fifo_info *fifos = (struct fifo_info *)dev_id;
  #line 4226 
  struct s2io_nic *sp = fifos->nic;
  #line 4227 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 4228 
  struct config_param *config = & sp->config;
  #line 4231 
  if ((long)(is_s2io_card_up(sp) == 0) != 0L) 
                                              #line 4232 
                                              return IRQ_NONE;
  #line 4234 
  reason = readq((void *)(& bar0->general_int_status));
  #line 4235 
  if ((long)(reason == 18446744073709551615ULL) != 0L) 
                                                       #line 4237 
                                                       return IRQ_HANDLED;
  #line 4239 
  if ((reason & 9259400833873739776ULL) != 0ULL) {
    #line 4240 
    writeq(18446744073709551615ULL,(void *)(& bar0->general_int_mask));
    #line 4242 
    if ((reason & 9223372036854775808ULL) != 0ULL) 
                                                   #line 4243 
                                                   s2io_txpic_intr_handle(sp);
    #line 4245 
    if ((reason & 36028797018963968ULL) != 0ULL) 
                                                 #line 4246 
                                                 writeq(18446744073709551615ULL,(void *)(& bar0->tx_traffic_int));
    #line 4248 
    i = 0;
    #line 4248 
    while (config->tx_fifo_num > (unsigned int)i) {
      #line 4249 
      tx_intr_handler(fifos + (unsigned long)i);
      #line 4248 
      i ++;
    }
    #line 4251 
    writeq(sp->general_int_mask,(void *)(& bar0->general_int_mask));
    #line 4252 
    readl((void *)(& bar0->general_int_status));
    #line 4253 
    return IRQ_HANDLED;
  }
  #line 4256 
  return IRQ_NONE;
}

#line 4259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_txpic_intr_handle(struct s2io_nic *sp)
{
  #line 4262 
  u64 val64;
  #line 4261 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 4264 
  val64 = readq((void *)(& bar0->pic_int_status));
  #line 4265 
  if ((val64 & 576460752303423488ULL) != 0ULL) {
    #line 4266 
    val64 = readq((void *)(& bar0->gpio_int_reg));
    #line 4267 
    if ((val64 & 4611686018427387904ULL) != 0ULL && (val64 & 2305843009213693952ULL) != 0ULL) {
      #line 4273 
      val64 |= 4611686018427387904ULL;
      #line 4274 
      val64 |= 2305843009213693952ULL;
      #line 4275 
      writeq(val64,(void *)(& bar0->gpio_int_reg));
      #line 4276 
      val64 = readq((void *)(& bar0->gpio_int_mask));
      #line 4277 
      val64 &= 11529215046068469759ULL;
      #line 4279 
      writeq(val64,(void *)(& bar0->gpio_int_mask));
    }
    else 
      #line 4280 
      if ((val64 & 2305843009213693952ULL) != 0ULL) {
        #line 4281 
        val64 = readq((void *)(& bar0->adapter_status));
        #line 4283 
        val64 = readq((void *)(& bar0->adapter_control));
        #line 4284 
        val64 |= 72057594037927936ULL;
        #line 4285 
        writeq(val64,(void *)(& bar0->adapter_control));
        #line 4286 
        val64 |= 1099511627776ULL;
        #line 4287 
        writeq(val64,(void *)(& bar0->adapter_control));
        #line 4288 
        if (sp->device_enabled_once == 0) 
                                          #line 4289 
                                          sp->device_enabled_once = 1;
        #line 4291 
        s2io_link(sp,2);
        #line 4296 
        val64 = readq((void *)(& bar0->gpio_int_mask));
        #line 4297 
        val64 &= 13835058055282163711ULL;
        #line 4298 
        val64 |= 2305843009213693952ULL;
        #line 4299 
        writeq(val64,(void *)(& bar0->gpio_int_mask));
      }
      else 
        #line 4301 
        if ((val64 & 4611686018427387904ULL) != 0ULL) {
          #line 4302 
          val64 = readq((void *)(& bar0->adapter_status));
          #line 4303 
          s2io_link(sp,1);
          #line 4305 
          val64 = readq((void *)(& bar0->gpio_int_mask));
          #line 4306 
          val64 &= 16140901064495857663ULL;
          #line 4307 
          val64 |= 4611686018427387904ULL;
          #line 4308 
          writeq(val64,(void *)(& bar0->gpio_int_mask));
          #line 4311 
          val64 = readq((void *)(& bar0->adapter_control));
          #line 4312 
          val64 &= 18446742974197923839ULL;
          #line 4313 
          writeq(val64,(void *)(& bar0->adapter_control));
        }
  }
  #line 4316 
  val64 = readq((void *)(& bar0->gpio_int_mask));
  #line 4317 
  return;
}

#line 4329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int do_s2io_chk_alarm_bit(u64 value, void *addr, unsigned long long *cnt)
{
  #line 4332 
  u64 val64;
  #line 4333 
  val64 = readq(addr);
  #line 4334 
  if ((val64 & value) != 0ULL) {
    #line 4335 
    writeq(val64,addr);
    #line 4336 
    (*cnt) ++;
    #line 4337 
    return 1;
  }
  #line 4339 
  return 0;
}

#line 4351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_handle_errors(void *dev_id)
{
  #line 4353 
  struct net_device *dev = (struct net_device *)dev_id;
  #line 4354 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 4355 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 4356 
  u64 temp64 = 0ULL;
  #line 4356 
  u64 val64 = 0ULL;
  #line 4357 
  int i = 0;
  #line 4359 
  struct swStat *sw_stat = & (sp->mac_control.stats_info)->sw_stat;
  #line 4360 
  struct xpakStat *stats = & (sp->mac_control.stats_info)->xpak_stat;
  #line 4362 
  if (is_s2io_card_up(sp) == 0) 
                                #line 4363 
                                return;
  #line 4365 
  if (pci_channel_offline(sp->pdev) != 0) 
                                          #line 4366 
                                          return;
  #line 4368 
  memset((void *)(& sw_stat->ring_full_cnt),0,64UL);
  #line 4372 
  if (stats->xpak_timer_count <= 71999U) 
                                         #line 4374 
                                         (stats->xpak_timer_count) ++;
  else {
    #line 4376 
    s2io_updt_xpak_counter(dev);
    #line 4378 
    stats->xpak_timer_count = 0U;
  }
  #line 4382 
  if (s2io_link_fault_indication(sp) == 2) {
    #line 4383 
    val64 = readq((void *)(& bar0->mac_rmac_err_reg));
    #line 4384 
    writeq(val64,(void *)(& bar0->mac_rmac_err_reg));
    #line 4385 
    if ((val64 & 4294967296ULL) != 0ULL) 
                                         #line 4386 
                                         cif_schedule_work(& sp->set_link_task);
  }
  #line 4390 
  if (do_s2io_chk_alarm_bit(18158513697557839872ULL,
                              (void *)(& bar0->serr_source),
                              & sw_stat->serious_err_cnt) != 0) 
    #line 4392 
    goto reset;
  #line 4395 
  if (do_s2io_chk_alarm_bit(9223372036854775808ULL,
                              (void *)(& bar0->gpio_int_reg),
                              & sw_stat->parity_err_cnt) != 0) 
    #line 4397 
    goto reset;
  #line 4400 
  if ((unsigned int)sp->device_type == 2U) {
    #line 4401 
    val64 = readq((void *)(& bar0->ring_bump_counter1));
    #line 4402 
    i = 0;
    #line 4402 
    while (i <= 3) {
      #line 4403 
      temp64 = (65535ULL << (3 - i) * 16) & val64;
      #line 4404 
      temp64 >>= (3 - i) * 16;
      #line 4405 
      sw_stat->ring_full_cnt[i] += temp64;
      #line 4402 
      i ++;
    }
    #line 4408 
    val64 = readq((void *)(& bar0->ring_bump_counter2));
    #line 4409 
    i = 0;
    #line 4409 
    while (i <= 3) {
      #line 4410 
      temp64 = (65535ULL << (3 - i) * 16) & val64;
      #line 4411 
      temp64 >>= (3 - i) * 16;
      #line 4412 
      sw_stat->ring_full_cnt[i + 4] += temp64;
      #line 4409 
      i ++;
    }
  }
  #line 4416 
  val64 = readq((void *)(& bar0->txdma_int_status));
  #line 4418 
  if ((val64 & 9223372036854775808ULL) != 0ULL) {
    #line 4419 
    if (do_s2io_chk_alarm_bit(282580947566592ULL,
                              (void *)(& bar0->pfc_err_reg),
                              & sw_stat->pfc_err_cnt) != 0) 
      #line 4424 
      goto reset;
    #line 4425 
    do_s2io_chk_alarm_bit(72057594037927936ULL,(void *)(& bar0->pfc_err_reg),& sw_stat->pfc_err_cnt);
  }
  #line 4431 
  if ((val64 & 4611686018427387904ULL) != 0ULL) {
    #line 4432 
    if (do_s2io_chk_alarm_bit(71779417596100608ULL,
                              (void *)(& bar0->tda_err_reg),
                              & sw_stat->tda_err_cnt) != 0) 
      #line 4437 
      goto reset;
    #line 4438 
    do_s2io_chk_alarm_bit(18374686479688400896ULL,(void *)(& bar0->tda_err_reg),& sw_stat->tda_err_cnt);
  }
  #line 4443 
  if ((val64 & 2305843009213693952ULL) != 0ULL) {
    #line 4444 
    if (do_s2io_chk_alarm_bit(281474976710640ULL,
                              (void *)(& bar0->pcc_err_reg),
                              & sw_stat->pcc_err_cnt) != 0) 
      #line 4451 
      goto reset;
    #line 4452 
    do_s2io_chk_alarm_bit(18446462598732840960ULL,(void *)(& bar0->pcc_err_reg),& sw_stat->pcc_err_cnt);
  }
  #line 4458 
  if ((val64 & 1152921504606846976ULL) != 0ULL) {
    #line 4459 
    if (do_s2io_chk_alarm_bit(1099511627776ULL,(void *)(& bar0->tti_err_reg),
                              & sw_stat->tti_err_cnt) != 0) 
      #line 4462 
      goto reset;
    #line 4463 
    do_s2io_chk_alarm_bit(72339069014638592ULL,(void *)(& bar0->tti_err_reg),& sw_stat->tti_err_cnt);
  }
  #line 4469 
  if ((val64 & 576460752303423488ULL) != 0ULL) {
    #line 4470 
    if (do_s2io_chk_alarm_bit(847723465015296ULL,
                              (void *)(& bar0->lso_err_reg),
                              & sw_stat->lso_err_cnt) != 0) 
      #line 4474 
      goto reset;
    #line 4475 
    do_s2io_chk_alarm_bit(3377699720527872ULL,(void *)(& bar0->lso_err_reg),& sw_stat->lso_err_cnt);
  }
  #line 4481 
  if ((val64 & 288230376151711744ULL) != 0ULL) {
    #line 4482 
    if (do_s2io_chk_alarm_bit(1099511627776ULL,
                               (void *)(& bar0->tpa_err_reg),
                               & sw_stat->tpa_err_cnt) != 0) 
      #line 4485 
      goto reset;
    #line 4486 
    do_s2io_chk_alarm_bit(72057594037927936ULL,(void *)(& bar0->tpa_err_reg),& sw_stat->tpa_err_cnt);
  }
  #line 4492 
  if ((val64 & 144115188075855872ULL) != 0ULL) {
    #line 4493 
    if (do_s2io_chk_alarm_bit(281474976710656ULL,
                               (void *)(& bar0->sm_err_reg),
                               & sw_stat->sm_err_cnt) != 0) 
      #line 4496 
      goto reset;
  }
  #line 4499 
  val64 = readq((void *)(& bar0->mac_int_status));
  #line 4500 
  if ((val64 & 9223372036854775808ULL) != 0ULL) {
    #line 4501 
    if (do_s2io_chk_alarm_bit(1099528404992ULL,
                               (void *)(& bar0->mac_tmac_err_reg),
                               & sw_stat->mac_tmac_err_cnt) != 0) 
      #line 4504 
      goto reset;
    #line 4505 
    do_s2io_chk_alarm_bit(72339069014704384ULL,(void *)(& bar0->mac_tmac_err_reg),& sw_stat->mac_tmac_err_cnt);
  }
  #line 4512 
  val64 = readq((void *)(& bar0->xgxs_int_status));
  #line 4513 
  if ((val64 & 9223372036854775808ULL) != 0ULL) {
    #line 4514 
    if (do_s2io_chk_alarm_bit(4311744512ULL,
                               (void *)(& bar0->xgxs_txgxs_err_reg),
                               & sw_stat->xgxs_txgxs_err_cnt) != 0) 
      #line 4517 
      goto reset;
    #line 4518 
    do_s2io_chk_alarm_bit(72339069014638592ULL,(void *)(& bar0->xgxs_txgxs_err_reg),& sw_stat->xgxs_txgxs_err_cnt);
  }
  #line 4523 
  val64 = readq((void *)(& bar0->rxdma_int_status));
  #line 4524 
  if ((val64 & 9223372036854775808ULL) != 0ULL) {
    #line 4525 
    if (do_s2io_chk_alarm_bit(71776127634440192ULL,
                               (void *)(& bar0->rc_err_reg),
                               & sw_stat->rc_err_cnt) != 0) 
      #line 4531 
      goto reset;
    #line 4532 
    do_s2io_chk_alarm_bit(18374687579183316736ULL,(void *)(& bar0->rc_err_reg),& sw_stat->rc_err_cnt);
    #line 4536 
    if (do_s2io_chk_alarm_bit(18374966859414896640ULL,
                               (void *)(& bar0->prc_pcix_err_reg),
                               & sw_stat->prc_pcix_err_cnt) != 0) 
      #line 4541 
      goto reset;
    #line 4542 
    do_s2io_chk_alarm_bit(71777214294589440ULL,(void *)(& bar0->prc_pcix_err_reg),& sw_stat->prc_pcix_err_cnt);
  }
  #line 4549 
  if ((val64 & 4611686018427387904ULL) != 0ULL) {
    #line 4550 
    if (do_s2io_chk_alarm_bit(1103806595072ULL,
                               (void *)(& bar0->rpa_err_reg),
                               & sw_stat->rpa_err_cnt) != 0) 
      #line 4553 
      goto reset;
    #line 4554 
    do_s2io_chk_alarm_bit(72339069014638592ULL,(void *)(& bar0->rpa_err_reg),& sw_stat->rpa_err_cnt);
  }
  #line 4559 
  if ((val64 & 2305843009213693952ULL) != 0ULL) {
    #line 4560 
    if (do_s2io_chk_alarm_bit(71776123406516225ULL,
                               (void *)(& bar0->rda_err_reg),
                               & sw_stat->rda_err_cnt) != 0) 
      #line 4567 
      goto reset;
    #line 4568 
    do_s2io_chk_alarm_bit(18374687579183317248ULL,(void *)(& bar0->rda_err_reg),& sw_stat->rda_err_cnt);
  }
  #line 4576 
  if ((val64 & 1152921504606846976ULL) != 0ULL) {
    #line 4577 
    if (do_s2io_chk_alarm_bit(1099511627776ULL,
                               (void *)(& bar0->rti_err_reg),
                               & sw_stat->rti_err_cnt) != 0) 
      #line 4580 
      goto reset;
    #line 4581 
    do_s2io_chk_alarm_bit(72339069014638592ULL,(void *)(& bar0->rti_err_reg),& sw_stat->rti_err_cnt);
  }
  #line 4586 
  val64 = readq((void *)(& bar0->mac_int_status));
  #line 4587 
  if ((val64 & 4611686018427387904ULL) != 0ULL) {
    #line 4588 
    if (do_s2io_chk_alarm_bit(9223372036871553024ULL,
                               (void *)(& bar0->mac_rmac_err_reg),
                               & sw_stat->mac_rmac_err_cnt) != 0) 
      #line 4591 
      goto reset;
    #line 4592 
    do_s2io_chk_alarm_bit(2880034369517387776ULL,(void *)(& bar0->mac_rmac_err_reg),& sw_stat->mac_rmac_err_cnt);
  }
  #line 4599 
  val64 = readq((void *)(& bar0->xgxs_int_status));
  #line 4600 
  if ((val64 & 4611686018427387904ULL) != 0ULL) {
    #line 4601 
    if (do_s2io_chk_alarm_bit(72057594054705152ULL,
                               (void *)(& bar0->xgxs_rxgxs_err_reg),
                               & sw_stat->xgxs_rxgxs_err_cnt) != 0) 
      #line 4604 
      goto reset;
  }
  #line 4607 
  val64 = readq((void *)(& bar0->mc_int_status));
  #line 4608 
  if ((val64 & 9223372036854775808ULL) != 0ULL) {
    #line 4609 
    if (do_s2io_chk_alarm_bit(4294967296ULL,(void *)(& bar0->mc_err_reg),
                               & sw_stat->mc_err_cnt) != 0) 
      #line 4612 
      goto reset;
    #line 4615 
    if ((val64 & 4340476082273648640ULL) != 0ULL) {
      #line 4616 
      writeq(val64,(void *)(& bar0->mc_err_reg));
      #line 4617 
      if ((val64 & 16932479067750400ULL) != 0ULL) {
        #line 4618 
        (sw_stat->double_ecc_errs) ++;
        #line 4619 
        if ((unsigned int)sp->device_type != 2U) 
          #line 4623 
          if ((val64 & 43980465111040ULL) != 0ULL) 
                                                   #line 4626 
                                                   goto reset;
      }
      else 
           #line 4629 
           (sw_stat->single_ecc_errs) ++;
    }
  }
  #line 4632 
  return;
  #line 4634 
  reset: 
         #line 4634 
  ;
  #line 4635 
  s2io_stop_all_tx_queue(sp);
  #line 4636 
  cif_schedule_work(& sp->rst_timer_task);
  #line 4637 
  (sw_stat->soft_reset_cnt) ++;
  #line 4638 
  return;
}

#line 4653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static irqreturn_t s2io_isr(int irq, void *dev_id)
{
  #line 4658 
  int i;
  #line 4660 
  struct mac_info *mac_control;
  #line 4661 
  struct config_param *config;
  #line 4655 
  struct net_device *dev = (struct net_device *)dev_id;
  #line 4656 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 4657 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 4659 
  u64 reason = 0ULL;
  #line 4664 
  if (pci_channel_offline(sp->pdev) != 0) 
                                          #line 4665 
                                          return IRQ_NONE;
  #line 4667 
  if (is_s2io_card_up(sp) == 0) 
                                #line 4668 
                                return IRQ_NONE;
  #line 4670 
  config = & sp->config;
  #line 4671 
  mac_control = & sp->mac_control;
  #line 4680 
  reason = readq((void *)(& bar0->general_int_status));
  #line 4682 
  if ((long)(reason == 18446744073709551615ULL) != 0L) 
                                                       #line 4683 
                                                       return IRQ_HANDLED;
  #line 4685 
  if ((reason & 9259400833882128384ULL) != 0ULL) {
    #line 4687 
    writeq(18446744073709551615ULL,(void *)(& bar0->general_int_mask));
    #line 4689 
    if ((unsigned int)config->napi != 0U) {
      #line 4690 
      if ((reason & 8388608ULL) != 0ULL) {
        #line 4691 
        napi_schedule(& sp->napi);
        #line 4692 
        writeq(18446744073709551615ULL,(void *)(& bar0->rx_traffic_mask));
        #line 4693 
        writeq(18446744073709551615ULL,(void *)(& bar0->rx_traffic_int));
        #line 4694 
        readl((void *)(& bar0->rx_traffic_int));
      }
    }
    else {
      #line 4702 
      if ((reason & 8388608ULL) != 0ULL) 
                                         #line 4703 
                                         writeq(18446744073709551615ULL,(void *)(& bar0->rx_traffic_int));
      #line 4705 
      i = 0;
      #line 4705 
      while (config->rx_ring_num > (unsigned int)i) {
        {
          #line 4706 
          struct ring_info *ring = & mac_control->rings[i];
          #line 4708 
          rx_intr_handler(ring,0);
        }
        #line 4705 
        i ++;
      }
    }
    #line 4717 
    if ((reason & 36028797018963968ULL) != 0ULL) 
                                                 #line 4718 
                                                 writeq(18446744073709551615ULL,(void *)(& bar0->tx_traffic_int));
    #line 4720 
    i = 0;
    #line 4720 
    while (config->tx_fifo_num > (unsigned int)i) {
      #line 4721 
      tx_intr_handler(& mac_control->fifos[i]);
      #line 4720 
      i ++;
    }
    #line 4723 
    if ((reason & 9223372036854775808ULL) != 0ULL) 
                                                   #line 4724 
                                                   s2io_txpic_intr_handle(sp);
    #line 4729 
    if ((unsigned int)config->napi == 0U) {
      #line 4730 
      i = 0;
      #line 4730 
      while (config->rx_ring_num > (unsigned int)i) {
        {
          #line 4731 
          struct ring_info *ring_0 = & mac_control->rings[i];
          #line 4733 
          s2io_chk_rx_buffers(sp,ring_0);
        }
        #line 4730 
        i ++;
      }
    }
    #line 4736 
    writeq(sp->general_int_mask,(void *)(& bar0->general_int_mask));
    #line 4737 
    readl((void *)(& bar0->general_int_status));
    #line 4739 
    return IRQ_HANDLED;
  }
  else 
    #line 4741 
    if (reason == 0ULL) 
                        #line 4743 
                        return IRQ_NONE;
  #line 4746 
  return IRQ_HANDLED;
}

#line 4752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_updt_stats(struct s2io_nic *sp)
{
  #line 4755 
  u64 val64;
  #line 4754 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 4756 
  int cnt = 0;
  #line 4758 
  if (is_s2io_card_up(sp) != 0) {
    #line 4760 
    val64 = 13835058055282163722ULL;
    #line 4762 
    writeq(val64,(void *)(& bar0->stat_cfg));
    #line 4763 
    while (1) {
      #line 4764 
      __const_udelay(429500UL);
      #line 4765 
      val64 = readq((void *)(& bar0->stat_cfg));
      #line 4766 
      if ((val64 & 9223372036854775808ULL) == 0ULL) 
                                                    #line 4767 
                                                    break;
      #line 4768 
      cnt ++;
      #line 4769 
      if (cnt == 5) 
                    #line 4770 
                    break;
    }
  }
  #line 4773 
  return;
}

#line 4784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static struct net_device_stats *s2io_get_stats(struct net_device *dev)
{
  #line 4789 
  u64 delta;
  #line 4786 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 4787 
  struct mac_info *mac_control = & sp->mac_control;
  #line 4788 
  struct stat_block *stats = mac_control->stats_info;
  #line 4792 
  s2io_updt_stats(sp);
  #line 4801 
  delta = (((unsigned long long)stats->rmac_vld_frms_oflow << 32) | (unsigned long long)stats->rmac_vld_frms) - (unsigned long long)sp->stats.rx_packets;
  #line 4803 
  sp->stats.rx_packets = (unsigned long)((unsigned long long)sp->stats.rx_packets + delta);
  #line 4804 
  dev->stats.rx_packets = (unsigned long)((unsigned long long)dev->stats.rx_packets + delta);
  #line 4806 
  delta = (((unsigned long long)stats->tmac_frms_oflow << 32) | (unsigned long long)stats->tmac_frms) - (unsigned long long)sp->stats.tx_packets;
  #line 4808 
  sp->stats.tx_packets = (unsigned long)((unsigned long long)sp->stats.tx_packets + delta);
  #line 4809 
  dev->stats.tx_packets = (unsigned long)((unsigned long long)dev->stats.tx_packets + delta);
  #line 4811 
  delta = (((unsigned long long)stats->rmac_data_octets_oflow << 32) | (unsigned long long)stats->rmac_data_octets) - (unsigned long long)sp->stats.rx_bytes;
  #line 4813 
  sp->stats.rx_bytes = (unsigned long)((unsigned long long)sp->stats.rx_bytes + delta);
  #line 4814 
  dev->stats.rx_bytes = (unsigned long)((unsigned long long)dev->stats.rx_bytes + delta);
  #line 4816 
  delta = (((unsigned long long)stats->tmac_data_octets_oflow << 32) | (unsigned long long)stats->tmac_data_octets) - (unsigned long long)sp->stats.tx_bytes;
  #line 4818 
  sp->stats.tx_bytes = (unsigned long)((unsigned long long)sp->stats.tx_bytes + delta);
  #line 4819 
  dev->stats.tx_bytes = (unsigned long)((unsigned long long)dev->stats.tx_bytes + delta);
  #line 4821 
  delta = stats->rmac_drop_frms - (unsigned long long)sp->stats.rx_errors;
  #line 4822 
  sp->stats.rx_errors = (unsigned long)((unsigned long long)sp->stats.rx_errors + delta);
  #line 4823 
  dev->stats.rx_errors = (unsigned long)((unsigned long long)dev->stats.rx_errors + delta);
  #line 4825 
  delta = (((unsigned long long)stats->tmac_any_err_frms_oflow << 32) | (unsigned long long)stats->tmac_any_err_frms) - (unsigned long long)sp->stats.tx_errors;
  #line 4827 
  sp->stats.tx_errors = (unsigned long)((unsigned long long)sp->stats.tx_errors + delta);
  #line 4828 
  dev->stats.tx_errors = (unsigned long)((unsigned long long)dev->stats.tx_errors + delta);
  #line 4830 
  delta = stats->rmac_drop_frms - (unsigned long long)sp->stats.rx_dropped;
  #line 4831 
  sp->stats.rx_dropped = (unsigned long)((unsigned long long)sp->stats.rx_dropped + delta);
  #line 4832 
  dev->stats.rx_dropped = (unsigned long)((unsigned long long)dev->stats.rx_dropped + delta);
  #line 4834 
  delta = stats->tmac_drop_frms - (unsigned long long)sp->stats.tx_dropped;
  #line 4835 
  sp->stats.tx_dropped = (unsigned long)((unsigned long long)sp->stats.tx_dropped + delta);
  #line 4836 
  dev->stats.tx_dropped = (unsigned long)((unsigned long long)dev->stats.tx_dropped + delta);
  #line 4843 
  delta = ((unsigned long long)stats->rmac_vld_mcst_frms_oflow << 32) | (unsigned long long)stats->rmac_vld_mcst_frms;
  #line 4845 
  delta -= stats->rmac_pause_ctrl_frms;
  #line 4846 
  delta -= (unsigned long long)sp->stats.multicast;
  #line 4847 
  sp->stats.multicast = (unsigned long)((unsigned long long)sp->stats.multicast + delta);
  #line 4848 
  dev->stats.multicast = (unsigned long)((unsigned long long)dev->stats.multicast + delta);
  #line 4850 
  delta = ((((unsigned long long)stats->rmac_usized_frms_oflow << 32) | (unsigned long long)stats->rmac_usized_frms) + stats->rmac_long_frms) - (unsigned long long)sp->stats.rx_length_errors;
  #line 4853 
  sp->stats.rx_length_errors = (unsigned long)((unsigned long long)sp->stats.rx_length_errors + delta);
  #line 4854 
  dev->stats.rx_length_errors = (unsigned long)((unsigned long long)dev->stats.rx_length_errors + delta);
  #line 4856 
  delta = stats->rmac_fcs_err_frms - (unsigned long long)sp->stats.rx_crc_errors;
  #line 4857 
  sp->stats.rx_crc_errors = (unsigned long)((unsigned long long)sp->stats.rx_crc_errors + delta);
  #line 4858 
  dev->stats.rx_crc_errors = (unsigned long)((unsigned long long)dev->stats.rx_crc_errors + delta);
  #line 4860 
  return & dev->stats;
}

#line 4876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_set_multicast(struct net_device *dev)
{
  #line 4878 
  int i;
  #line 4878 
  int j;
  #line 4878 
  int prev_cnt;
  #line 4879 
  struct netdev_hw_addr *ha;
  #line 4885 
  void *add;
  #line 4880 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 4881 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 4882 
  u64 val64 = 0ULL;
  #line 4882 
  u64 multi_mac = 1108152157446ULL;
  #line 4882 
  u64 mask = 280375465082879ULL;
  #line 4884 
  u64 dis_addr = 281474976710655ULL;
  #line 4884 
  u64 mac_addr = 0ULL;
  #line 4886 
  struct config_param *config = & sp->config;
  #line 4888 
  if ((dev->flags & 512U) != 0U && (unsigned int)sp->m_cast_flg == 0U) {
    #line 4890 
    writeq(multi_mac << 16,(void *)(& bar0->rmac_addr_data0_mem));
    #line 4892 
    writeq(mask << 16,(void *)(& bar0->rmac_addr_data1_mem));
    #line 4894 
    val64 = (((unsigned long long)config->max_mc_addr + 18446744073709551615ULL) << 32) | 72339069014638592ULL;
    #line 4897 
    writeq(val64,(void *)(& bar0->rmac_addr_cmd_mem));
    #line 4899 
    wait_for_cmd_complete((void *)(& bar0->rmac_addr_cmd_mem),281474976710656ULL,1);
    #line 4903 
    sp->m_cast_flg = (unsigned short)1U;
    #line 4904 
    sp->all_multi_pos = (unsigned short)((unsigned int)((unsigned short)config->max_mc_addr) + 65535U);
  }
  else 
    #line 4905 
    if ((dev->flags & 512U) != 0U && (unsigned int)sp->m_cast_flg != 0U) {
      #line 4907 
      writeq(dis_addr << 16,(void *)(& bar0->rmac_addr_data0_mem));
      #line 4909 
      writeq(0ULL,(void *)(& bar0->rmac_addr_data1_mem));
      #line 4911 
      val64 = ((unsigned long long)sp->all_multi_pos << 32) | 72339069014638592ULL;
      #line 4914 
      writeq(val64,(void *)(& bar0->rmac_addr_cmd_mem));
      #line 4916 
      wait_for_cmd_complete((void *)(& bar0->rmac_addr_cmd_mem),281474976710656ULL,1);
      #line 4920 
      sp->m_cast_flg = (unsigned short)0U;
      #line 4921 
      sp->all_multi_pos = (unsigned short)0U;
    }
  #line 4924 
  if ((dev->flags & 256U) != 0U && (unsigned int)sp->promisc_flg == 0U) {
    #line 4926 
    add = (void *)(& bar0->mac_cfg);
    #line 4927 
    val64 = readq((void *)(& bar0->mac_cfg));
    #line 4928 
    val64 |= 72057594037927936ULL;
    #line 4930 
    writeq(5480036321579761664ULL,(void *)(& bar0->rmac_cfg_key));
    #line 4931 
    writel((unsigned int)val64,add);
    #line 4932 
    writeq(5480036321579761664ULL,(void *)(& bar0->rmac_cfg_key));
    #line 4933 
    writel((unsigned int)(val64 >> 32),add + 4U);
    #line 4935 
    if (vlan_tag_strip != 1U) {
      #line 4936 
      val64 = readq((void *)(& bar0->rx_pa_cfg));
      #line 4937 
      val64 &= 18446462598732840959ULL;
      #line 4938 
      writeq(val64,(void *)(& bar0->rx_pa_cfg));
      #line 4939 
      sp->vlan_strip_flag = 0;
    }
    #line 4942 
    val64 = readq((void *)(& bar0->mac_cfg));
    #line 4943 
    sp->promisc_flg = (unsigned short)1U;
    #line 4944 
    if (debug_level > 1) 
                         #line 4944 
                         printk((char *)"\001",(char *)(& dev->name));
  }
  else 
    #line 4946 
    if ((dev->flags & 256U) == 0U && (unsigned int)sp->promisc_flg != 0U) {
      #line 4948 
      add = (void *)(& bar0->mac_cfg);
      #line 4949 
      val64 = readq((void *)(& bar0->mac_cfg));
      #line 4950 
      val64 &= 18374686479671623679ULL;
      #line 4952 
      writeq(5480036321579761664ULL,(void *)(& bar0->rmac_cfg_key));
      #line 4953 
      writel((unsigned int)val64,add);
      #line 4954 
      writeq(5480036321579761664ULL,(void *)(& bar0->rmac_cfg_key));
      #line 4955 
      writel((unsigned int)(val64 >> 32),add + 4U);
      #line 4957 
      if (vlan_tag_strip != 0U) {
        #line 4958 
        val64 = readq((void *)(& bar0->rx_pa_cfg));
        #line 4959 
        val64 |= 281474976710656ULL;
        #line 4960 
        writeq(val64,(void *)(& bar0->rx_pa_cfg));
        #line 4961 
        sp->vlan_strip_flag = 1;
      }
      #line 4964 
      val64 = readq((void *)(& bar0->mac_cfg));
      #line 4965 
      sp->promisc_flg = (unsigned short)0U;
      #line 4966 
      if (debug_level > 1) 
                           #line 4966 
                           printk((char *)"\001",(char *)(& dev->name));
    }
  #line 4970 
  if ((unsigned int)sp->m_cast_flg == 0U && dev->mc.count != 0) {
    #line 5008 
    void *__mptr;
    #line 4971 
    if (dev->mc.count > config->max_mc_addr - config->max_mac_addr) {
      #line 4973 
      if (debug_level >= 0) 
                            #line 4973 
                            printk((char *)"\001",(char *)(& dev->name));
      #line 4977 
      return;
    }
    #line 4980 
    prev_cnt = (int)sp->mc_addr_count;
    #line 4981 
    sp->mc_addr_count = (unsigned short)dev->mc.count;
    #line 4984 
    i = 0;
    #line 4984 
    while (i < prev_cnt) {
      {
        #line 4985 
        writeq(dis_addr << 16,(void *)(& bar0->rmac_addr_data0_mem));
        #line 4987 
        writeq(0ULL,(void *)(& bar0->rmac_addr_data1_mem));
        #line 4989 
        val64 = (((unsigned long long)config->mc_start_offset + (unsigned long long)i) << 32) | 72339069014638592ULL;
        #line 4993 
        writeq(val64,(void *)(& bar0->rmac_addr_cmd_mem));
        #line 4996 
        if (wait_for_cmd_complete((void *)(& bar0->rmac_addr_cmd_mem),
                              281474976710656ULL,1) != 0) {
          #line 4999 
          if (debug_level >= 0) 
                                #line 4999 
                                printk((char *)"\001",(char *)(& dev->name));
          #line 5002 
          return;
        }
      }
      #line 4984 
      i ++;
    }
    #line 5007 
    i = 0;
    #line 5008 
    __mptr = (void *)dev->mc.list.next;
    #line 5008 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 5008 
    while (& ha->list != & dev->mc.list) {
      #line 5008 
      void *__mptr_0;
      {
        #line 5009 
        mac_addr = 0ULL;
        #line 5010 
        j = 0;
        #line 5010 
        while (j <= 5) {
          #line 5011 
          mac_addr = (unsigned long long)ha->addr[j] | mac_addr;
          #line 5012 
          mac_addr <<= 8;
          #line 5010 
          j ++;
        }
        #line 5014 
        mac_addr >>= 8;
        #line 5015 
        writeq(mac_addr << 16,(void *)(& bar0->rmac_addr_data0_mem));
        #line 5017 
        writeq(0ULL,(void *)(& bar0->rmac_addr_data1_mem));
        #line 5019 
        val64 = (((unsigned long long)i + (unsigned long long)config->mc_start_offset) << 32) | 72339069014638592ULL;
        #line 5023 
        writeq(val64,(void *)(& bar0->rmac_addr_cmd_mem));
        #line 5026 
        if (wait_for_cmd_complete((void *)(& bar0->rmac_addr_cmd_mem),
                              281474976710656ULL,1) != 0) {
          #line 5029 
          if (debug_level >= 0) 
                                #line 5029 
                                printk((char *)"\001",(char *)(& dev->name));
          #line 5032 
          return;
        }
        #line 5034 
        i ++;
      }
      #line 5008 
      __mptr_0 = (void *)ha->list.next;
      #line 5008 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
  }
  #line 5037 
  return;
}

#line 5042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void do_s2io_store_unicast_mc(struct s2io_nic *sp)
{
  #line 5044 
  int offset;
  #line 5045 
  u64 mac_addr = 0ULL;
  #line 5046 
  struct config_param *config = & sp->config;
  #line 5049 
  offset = 0;
  #line 5049 
  while (config->max_mc_addr > offset) {
    #line 5050 
    mac_addr = do_s2io_read_unicast_mc(sp,offset);
    #line 5052 
    if (mac_addr == 18446744073709551615ULL) 
                                             #line 5053 
                                             mac_addr = 281474976710655ULL;
    #line 5054 
    do_s2io_copy_mac_addr(sp,offset,mac_addr);
    #line 5049 
    offset ++;
  }
  #line 5056 
  return;
}

#line 5059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void do_s2io_restore_unicast_mc(struct s2io_nic *sp)
{
  #line 5061 
  int offset;
  #line 5062 
  struct config_param *config = & sp->config;
  #line 5064 
  offset = 0;
  #line 5064 
  while (config->max_mac_addr > offset) {
    #line 5065 
    do_s2io_prog_unicast(sp->dev,(u8 *)(& sp->def_mac_addr[offset].mac_addr));
    #line 5064 
    offset ++;
  }
  #line 5069 
  offset = config->mc_start_offset;
  #line 5069 
  while (config->max_mc_addr > offset) {
    #line 5071 
    do_s2io_add_mc(sp,(u8 *)(& sp->def_mac_addr[offset].mac_addr));
    #line 5070 
    offset ++;
  }
  #line 5072 
  return;
}

#line 5075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int do_s2io_add_mc(struct s2io_nic *sp, u8 *addr)
{
  #line 5077 
  int i;
  #line 5078 
  u64 mac_addr = 0ULL;
  #line 5079 
  struct config_param *config = & sp->config;
  #line 5081 
  i = 0;
  #line 5081 
  while (i <= 5) {
    #line 5082 
    mac_addr <<= 8;
    #line 5083 
    mac_addr = (unsigned long long)*(addr + (unsigned long)i) | mac_addr;
    #line 5081 
    i ++;
  }
  #line 5085 
  if (mac_addr == 0ULL || mac_addr == 281474976710655ULL) 
                                                          #line 5086 
                                                          return 0;
  #line 5089 
  i = config->mc_start_offset;
  #line 5089 
  while (config->max_mc_addr > i) {
    {
      #line 5090 
      u64 tmp64;
      #line 5091 
      tmp64 = do_s2io_read_unicast_mc(sp,i);
      #line 5092 
      if (tmp64 == 281474976710655ULL) 
                                       #line 5093 
                                       break;
      #line 5095 
      if (tmp64 == mac_addr) 
                             #line 5096 
                             return 0;
    }
    #line 5089 
    i ++;
  }
  #line 5098 
  if (config->max_mc_addr == i) {
    #line 5099 
    if (debug_level >= 0) 
                          #line 5099 
                          printk((char *)"\001");
    #line 5101 
    return -1;
  }
  #line 5104 
  do_s2io_copy_mac_addr(sp,i,mac_addr);
  #line 5106 
  return do_s2io_add_mac(sp,mac_addr,i);
}

#line 5110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int do_s2io_add_mac(struct s2io_nic *sp, u64 addr, int off)
{
  #line 5112 
  u64 val64;
  #line 5113 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 5115 
  writeq(addr << 16,(void *)(& bar0->rmac_addr_data0_mem));
  #line 5118 
  val64 = ((unsigned long long)off << 32) | 72339069014638592ULL;
  #line 5120 
  writeq(val64,(void *)(& bar0->rmac_addr_cmd_mem));
  #line 5123 
  if (wait_for_cmd_complete((void *)(& bar0->rmac_addr_cmd_mem),
                            281474976710656ULL,1) != 0) {
    #line 5126 
    if (debug_level > 1) 
                         #line 5126 
                         printk((char *)"\001");
    #line 5127 
    return -1;
  }
  #line 5129 
  return 0;
}

#line 5132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int do_s2io_delete_unicast_mc(struct s2io_nic *sp, u64 addr)
{
  #line 5134 
  int offset;
  #line 5135 
  u64 tmp64;
  #line 5135 
  u64 dis_addr = 281474976710655ULL;
  #line 5136 
  struct config_param *config = & sp->config;
  #line 5138 
  offset = 1;
  #line 5138 
  while (config->max_mc_addr > offset) {
    #line 5140 
    tmp64 = do_s2io_read_unicast_mc(sp,offset);
    #line 5141 
    if (tmp64 == addr) {
      #line 5143 
      if (do_s2io_add_mac(sp,dis_addr,offset) == -1) 
                                                     #line 5144 
                                                     return -1;
      #line 5146 
      do_s2io_store_unicast_mc(sp);
      #line 5147 
      return 0;
    }
    #line 5139 
    offset ++;
  }
  #line 5150 
  if (debug_level >= 0) 
                        #line 5150 
                        printk((char *)"\001",addr);
  #line 5152 
  return -1;
}

#line 5156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static u64 do_s2io_read_unicast_mc(struct s2io_nic *sp, int offset)
{
  #line 5158 
  u64 val64;
  #line 5158 
  u64 tmp64 = 18446744073709486080ULL;
  #line 5159 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 5162 
  val64 = ((unsigned long long)offset << 32) | 281474976710656ULL;
  #line 5164 
  writeq(val64,(void *)(& bar0->rmac_addr_cmd_mem));
  #line 5167 
  if (wait_for_cmd_complete((void *)(& bar0->rmac_addr_cmd_mem),
                            281474976710656ULL,1) != 0) {
    #line 5170 
    if (debug_level > 1) 
                         #line 5170 
                         printk((char *)"\001");
    #line 5171 
    return 18446744073709551615ULL;
  }
  #line 5173 
  tmp64 = readq((void *)(& bar0->rmac_addr_data0_mem));
  #line 5175 
  return tmp64 >> 16;
}

#line 5182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_set_mac_addr(struct net_device *dev, void *p)
{
  #line 5184 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 5186 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 5187 
                                                      return -99;
  #line 5189 
  memcpy((void *)dev->dev_addr,(void *)(& addr->sa_data),(unsigned long)dev->addr_len);
  #line 5192 
  return do_s2io_prog_unicast(dev,dev->dev_addr);
}

#line 5204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int do_s2io_prog_unicast(struct net_device *dev, u8 *addr)
{
  #line 5208 
  int i;
  #line 5209 
  u64 tmp64;
  #line 5206 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 5207 
  register u64 mac_addr = 0ULL;
  #line 5207 
  register u64 perm_addr = 0ULL;
  #line 5210 
  struct config_param *config = & sp->config;
  #line 5217 
  i = 0;
  #line 5217 
  while (i <= 5) {
    #line 5218 
    mac_addr <<= 8;
    #line 5219 
    mac_addr = (unsigned long long)*(addr + (unsigned long)i) | mac_addr;
    #line 5220 
    perm_addr <<= 8;
    #line 5221 
    perm_addr = (unsigned long long)sp->def_mac_addr[0].mac_addr[i] | perm_addr;
    #line 5217 
    i ++;
  }
  #line 5225 
  if (mac_addr == perm_addr) 
                             #line 5226 
                             return 0;
  #line 5229 
  i = 1;
  #line 5229 
  while (config->max_mac_addr > i) {
    #line 5230 
    tmp64 = do_s2io_read_unicast_mc(sp,i);
    #line 5231 
    if (tmp64 == 281474976710655ULL) 
                                     #line 5232 
                                     break;
    #line 5234 
    if (tmp64 == mac_addr) {
      #line 5235 
      if (debug_level > 1) 
                           #line 5235 
                           printk((char *)"\001",mac_addr);
      #line 5238 
      return 0;
    }
    #line 5229 
    i ++;
  }
  #line 5241 
  if (config->max_mac_addr == i) {
    #line 5242 
    if (debug_level >= 0) 
                          #line 5242 
                          printk((char *)"\001");
    #line 5243 
    return -1;
  }
  #line 5246 
  do_s2io_copy_mac_addr(sp,i,mac_addr);
  #line 5248 
  return do_s2io_add_mac(sp,mac_addr,i);
}

#line 5265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_ethtool_set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 5268 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 5269 
  if (((unsigned int)cmd->base.autoneg == 1U || cmd->base.speed != 10000U) || (unsigned int)cmd->base.duplex != 1U) 
    #line 5272 
    return -22;
  else {
    #line 5274 
    s2io_close(sp->dev);
    #line 5275 
    s2io_open(sp->dev);
  }
  #line 5278 
  return 0;
}

#line 5294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_ethtool_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 5297 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 5299 
  cif_bitmap_zero((unsigned long *)(& cmd->link_modes.supported),74U);
  #line 5300 
  __set_bit(12L,(unsigned long *)(& cmd->link_modes.supported));
  #line 5301 
  __set_bit(10L,(unsigned long *)(& cmd->link_modes.supported));
  #line 5303 
  cif_bitmap_zero((unsigned long *)(& cmd->link_modes.advertising),74U);
  #line 5304 
  __set_bit(12L,(unsigned long *)(& cmd->link_modes.advertising));
  #line 5305 
  __set_bit(10L,(unsigned long *)(& cmd->link_modes.advertising));
  #line 5307 
  cmd->base.port = (unsigned char)3U;
  #line 5309 
  if ((int)netif_carrier_ok(sp->dev) != 0) {
    #line 5310 
    cmd->base.speed = 10000U;
    #line 5311 
    cmd->base.duplex = (unsigned char)1U;
  }
  else {
    #line 5313 
    cmd->base.speed = 4294967295U;
    #line 5314 
    cmd->base.duplex = (unsigned char)255U;
  }
  #line 5317 
  cmd->base.autoneg = (unsigned char)0U;
  #line 5318 
  return 0;
}

#line 5333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_ethtool_gdrvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 5336 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 5338 
  strlcpy((char *)(& info->driver),(char *)(& s2io_driver_name),32UL);
  #line 5339 
  strlcpy((char *)(& info->version),(char *)(& s2io_driver_version),32UL);
  #line 5340 
  ;
  #line 5340 
  strlcpy((char *)(& info->bus_info),pci_name(sp->pdev),32UL);
  #line 5341 
  return;
}

#line 5357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_ethtool_gregs(struct net_device *dev, struct ethtool_regs *regs, void *space)
{
  #line 5360 
  int i;
  #line 5361 
  u64 reg;
  #line 5362 
  u8 *reg_space = (u8 *)space;
  #line 5363 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 5365 
  regs->len = 12608U;
  #line 5366 
  regs->version = (unsigned int)(sp->pdev)->subsystem_device;
  #line 5368 
  i = 0;
  #line 5368 
  while (regs->len > (unsigned int)i) {
    #line 5369 
    reg = readq(sp->bar0 + (unsigned long)i);
    #line 5370 
    memcpy((void *)(reg_space + (unsigned long)i),(void *)(& reg),8UL);
    #line 5368 
    i += 8;
  }
  #line 5372 
  return;
}

#line 5377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_set_led(struct s2io_nic *sp, bool on)
{
  #line 5381 
  u64 val64;
  #line 5379 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 5380 
  u16 subid = (sp->pdev)->subsystem_device;
  #line 5383 
  if ((unsigned int)sp->device_type == 2U || ((int)subid & 255) > 6) {
    #line 5385 
    val64 = readq((void *)(& bar0->gpio_control));
    #line 5386 
    if ((int)on != 0) 
                      #line 5387 
                      val64 |= 36028797018963968ULL; else 
                                                          #line 5389 
                                                          val64 &= 18410715276690587647ULL;
    #line 5391 
    writeq(val64,(void *)(& bar0->gpio_control));
  }
  else {
    #line 5393 
    val64 = readq((void *)(& bar0->adapter_control));
    #line 5394 
    if ((int)on != 0) 
                      #line 5395 
                      val64 |= 1099511627776ULL; else 
                                                      #line 5397 
                                                      val64 &= 18446742974197923839ULL;
    #line 5399 
    writeq(val64,(void *)(& bar0->adapter_control));
  }
  #line 5401 
  return;
}

#line 5416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_ethtool_set_led(struct net_device *dev, enum ethtool_phys_id_state state)
{
  #line 5419 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 5420 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 5421 
  u16 subid = (sp->pdev)->subsystem_device;
  #line 5423 
  if ((unsigned int)sp->device_type == 1U && ((int)subid & 255) <= 6) {
    #line 5424 
    u64 val64 = readq((void *)(& bar0->adapter_control));
    #line 5425 
    if ((val64 & 72057594037927936ULL) == 0ULL) {
      #line 5426 
      printk((char *)"\001");
      #line 5427 
      return -11;
    }
  }
  #line 5431 
  switch ((unsigned int)state) {
    #line 5432 
    case (unsigned int)1: 
                          #line 5432 
    ;
    #line 5433 
    sp->adapt_ctrl_org = readq((void *)(& bar0->gpio_control));
    #line 5434 
    return 1;
    #line 5436 
    case (unsigned int)2: 
                          #line 5436 
    ;
    #line 5437 
    s2io_set_led(sp,(_Bool)1);
    #line 5438 
    break;
    #line 5440 
    case (unsigned int)3: 
                          #line 5440 
    ;
    #line 5441 
    s2io_set_led(sp,(_Bool)0);
    #line 5442 
    break;
    #line 5444 
    case (unsigned int)0: 
                          #line 5444 
    ;
    #line 5445 
    if ((unsigned int)sp->device_type == 1U && ((unsigned int)subid + 40949U <= 2U || (unsigned int)subid + 39925U <= 2U)) 
      #line 5446 
      writeq(sp->adapt_ctrl_org,(void *)(& bar0->gpio_control));
  }
  #line 5449 
  return 0;
}

#line 5452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_ethtool_gringparam(struct net_device *dev, struct ethtool_ringparam *ering)
{
  #line 5456 
  int i;
  #line 5455 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 5456 
  int tx_desc_count = 0;
  #line 5456 
  int rx_desc_count = 0;
  #line 5458 
  if (sp->rxd_mode == 0) {
    #line 5459 
    ering->rx_max_pending = 153600U;
    #line 5460 
    ering->rx_jumbo_max_pending = 153600U;
  }
  else {
    #line 5462 
    ering->rx_max_pending = 103200U;
    #line 5463 
    ering->rx_jumbo_max_pending = 103200U;
  }
  #line 5466 
  ering->tx_max_pending = 8192U;
  #line 5468 
  i = 0;
  #line 5468 
  while (sp->config.rx_ring_num > (unsigned int)i) {
    #line 5469 
    rx_desc_count = (int)(sp->config.rx_cfg[i].num_rxd + (unsigned int)rx_desc_count);
    #line 5468 
    i ++;
  }
  #line 5470 
  ering->rx_pending = (unsigned int)rx_desc_count;
  #line 5471 
  ering->rx_jumbo_pending = (unsigned int)rx_desc_count;
  #line 5473 
  i = 0;
  #line 5473 
  while (sp->config.tx_fifo_num > (unsigned int)i) {
    #line 5474 
    tx_desc_count = (int)(sp->config.tx_cfg[i].fifo_len + (unsigned int)tx_desc_count);
    #line 5473 
    i ++;
  }
  #line 5475 
  ering->tx_pending = (unsigned int)tx_desc_count;
  #line 5476 
  if (debug_level > 1) 
                       #line 5476 
                       printk((char *)"\001",sp->config.max_txds);
  #line 5477 
  return;
}

#line 5489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_ethtool_getpause_data(struct net_device *dev, struct ethtool_pauseparam *ep)
{
  #line 5492 
  u64 val64;
  #line 5493 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 5494 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 5496 
  val64 = readq((void *)(& bar0->rmac_pause_cfg));
  #line 5497 
  if ((val64 & 9223372036854775808ULL) != 0ULL) 
                                                #line 5498 
                                                ep->tx_pause = 1U;
  #line 5499 
  if ((val64 & 4611686018427387904ULL) != 0ULL) 
                                                #line 5500 
                                                ep->rx_pause = 1U;
  #line 5501 
  ep->autoneg = 0U;
  #line 5502 
  return;
}

#line 5516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_ethtool_setpause_data(struct net_device *dev, struct ethtool_pauseparam *ep)
{
  #line 5519 
  u64 val64;
  #line 5520 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 5521 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 5523 
  val64 = readq((void *)(& bar0->rmac_pause_cfg));
  #line 5524 
  if (ep->tx_pause != 0U) 
                          #line 5525 
                          val64 |= 9223372036854775808ULL; else 
                                                                #line 5527 
                                                                val64 &= 9223372036854775807ULL;
  #line 5528 
  if (ep->rx_pause != 0U) 
                          #line 5529 
                          val64 |= 4611686018427387904ULL; else 
                                                                #line 5531 
                                                                val64 &= 13835058055282163711ULL;
  #line 5532 
  writeq(val64,(void *)(& bar0->rmac_pause_cfg));
  #line 5533 
  return 0;
}

#line 5553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int read_eeprom(struct s2io_nic *sp, int off, u64 *data)
{
  #line 5557 
  u64 val64;
  #line 5555 
  int ret = -1;
  #line 5556 
  u32 exit_cnt = 0U;
  #line 5558 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 5560 
  if ((unsigned int)sp->device_type == 1U) {
    #line 5561 
    val64 = ((unsigned long long)off << 48) | 5764611431454474240ULL;
    #line 5566 
    SPECIAL_REG_WRITE(val64,(void *)(& bar0->i2c_control),2);
    #line 5568 
    while (exit_cnt <= 4U) {
      #line 5569 
      val64 = readq((void *)(& bar0->i2c_control));
      #line 5570 
      if ((val64 & 4294967296ULL) != 0ULL) {
        #line 5571 
        *data = (unsigned long long)((unsigned int)val64);
        #line 5572 
        ret = 0;
        #line 5573 
        break;
      }
      #line 5575 
      msleep(50U);
      #line 5576 
      exit_cnt ++;
    }
  }
  #line 5580 
  if ((unsigned int)sp->device_type == 2U) {
    #line 5581 
    val64 = (unsigned long long)off | 10952754306700279808ULL;
    #line 5584 
    SPECIAL_REG_WRITE(val64,(void *)(& bar0->spi_control),2);
    #line 5585 
    val64 |= 72057594037927936ULL;
    #line 5586 
    SPECIAL_REG_WRITE(val64,(void *)(& bar0->spi_control),2);
    #line 5587 
    while (exit_cnt <= 4U) {
      #line 5588 
      val64 = readq((void *)(& bar0->spi_control));
      #line 5589 
      if ((val64 & 288230376151711744ULL) != 0ULL) {
        #line 5590 
        ret = 1;
        #line 5591 
        break;
      }
      else 
        #line 5592 
        if ((val64 & 144115188075855872ULL) != 0ULL) {
          #line 5593 
          *data = readq((void *)(& bar0->spi_data));
          #line 5594 
          *data &= 16777215ULL;
          #line 5595 
          ret = 0;
          #line 5596 
          break;
        }
      #line 5598 
      msleep(50U);
      #line 5599 
      exit_cnt ++;
    }
  }
  #line 5602 
  return ret;
}

#line 5620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int write_eeprom(struct s2io_nic *sp, int off, u64 data, int cnt)
{
  #line 5623 
  u64 val64;
  #line 5622 
  int exit_cnt = 0;
  #line 5622 
  int ret = -1;
  #line 5624 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 5626 
  if ((unsigned int)sp->device_type == 1U) {
    #line 5627 
    val64 = ((((unsigned long long)off << 48) | ((unsigned long long)cnt << 40)) | (unsigned long long)((unsigned int)data)) | 5764607583163777024ULL;
    #line 5632 
    SPECIAL_REG_WRITE(val64,(void *)(& bar0->i2c_control),2);
    #line 5634 
    while (exit_cnt <= 4) {
      #line 5635 
      val64 = readq((void *)(& bar0->i2c_control));
      #line 5636 
      if ((val64 & 4294967296ULL) != 0ULL) {
        #line 5637 
        if ((val64 & 274877906944ULL) == 0ULL) 
                                               #line 5638 
                                               ret = 0;
        #line 5639 
        break;
      }
      #line 5641 
      msleep(50U);
      #line 5642 
      exit_cnt ++;
    }
  }
  #line 5646 
  if ((unsigned int)sp->device_type == 2U) {
    #line 5647 
    int tmp;
    #line 5647 
    if (cnt != 8) 
                  #line 5647 
                  tmp = cnt; else 
                                  #line 5647 
                                  tmp = 0;
    #line 5647 
    int write_cnt = tmp;
    #line 5648 
    writeq(data << (64 - (cnt << 3)),(void *)(& bar0->spi_data));
    #line 5650 
    val64 = (((unsigned long long)write_cnt << 32) | (unsigned long long)off) | 10952754293798600704ULL;
    #line 5653 
    SPECIAL_REG_WRITE(val64,(void *)(& bar0->spi_control),2);
    #line 5654 
    val64 |= 72057594037927936ULL;
    #line 5655 
    SPECIAL_REG_WRITE(val64,(void *)(& bar0->spi_control),2);
    #line 5656 
    while (exit_cnt <= 4) {
      #line 5657 
      val64 = readq((void *)(& bar0->spi_control));
      #line 5658 
      if ((val64 & 288230376151711744ULL) != 0ULL) {
        #line 5659 
        ret = 1;
        #line 5660 
        break;
      }
      else 
        #line 5661 
        if ((val64 & 144115188075855872ULL) != 0ULL) {
          #line 5662 
          ret = 0;
          #line 5663 
          break;
        }
      #line 5665 
      msleep(50U);
      #line 5666 
      exit_cnt ++;
    }
  }
  #line 5669 
  return ret;
}

#line 5671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_vpd_read(struct s2io_nic *nic)
{
  #line 5673 
  u8 *vpd_data;
  #line 5674 
  u8 data;
  #line 5675 
  int cnt;
  #line 5675 
  int len;
  #line 5675 
  int i = 0;
  #line 5675 
  int fail = 0;
  #line 5676 
  int vpd_addr = 128;
  #line 5677 
  struct swStat *swstats = & (nic->mac_control.stats_info)->sw_stat;
  #line 5679 
  if ((unsigned int)nic->device_type == 2U) {
    #line 5680 
    strcpy((char *)(& nic->product_name),(char *)"Xframe II 10GbE network adapter");
    #line 5681 
    vpd_addr = 128;
  }
  else {
    #line 5683 
    strcpy((char *)(& nic->product_name),(char *)"Xframe I 10GbE network adapter");
    #line 5684 
    vpd_addr = 80;
  }
  #line 5686 
  strcpy((char *)(& nic->serial_num),(char *)"NOT AVAILABLE");
  #line 5688 
  vpd_data = (u8 *)kmalloc(256UL,3264U);
  #line 5689 
  if (vpd_data == (u8 *)0U) {
    #line 5690 
    (swstats->mem_alloc_fail_cnt) ++;
    #line 5691 
    return;
  }
  #line 5693 
  swstats->mem_allocated += 256ULL;
  #line 5695 
  i = 0;
  #line 5695 
  while (i <= 255) {
    #line 5696 
    pci_write_config_byte(nic->pdev,vpd_addr + 2,(unsigned char)((int)((unsigned char)i)));
    #line 5697 
    pci_read_config_byte(nic->pdev,vpd_addr + 2,& data);
    #line 5698 
    pci_write_config_byte(nic->pdev,vpd_addr + 3,(unsigned char)0);
    #line 5699 
    cnt = 0;
    #line 5699 
    while (cnt <= 4) {
      #line 5700 
      msleep(2U);
      #line 5701 
      pci_read_config_byte(nic->pdev,vpd_addr + 3,& data);
      #line 5702 
      if ((unsigned int)data == 128U) 
                                      #line 5703 
                                      break;
      #line 5699 
      cnt ++;
    }
    #line 5705 
    if (cnt > 4) {
      #line 5706 
      if (debug_level >= 0) 
                            #line 5706 
                            printk((char *)"\001");
      #line 5707 
      fail = 1;
      #line 5708 
      break;
    }
    #line 5710 
    pci_read_config_dword(nic->pdev,vpd_addr + 4,(u32 *)(vpd_data + (unsigned long)i));
    #line 5695 
    i += 4;
  }
  #line 5714 
  if (fail == 0) {
    #line 5716 
    cnt = 0;
    #line 5716 
    while (cnt <= 251) {
      #line 5717 
      if ((unsigned int)*(vpd_data + (unsigned long)cnt) == 83U && (unsigned int)*(vpd_data + ((unsigned long)cnt + (unsigned long)1U)) == 78U) {
        #line 5720 
        int tmp_0;
        #line 5720 
        int __UNIQUE_ID___x576;
        #line 5719 
        len = (int)*(vpd_data + ((unsigned long)cnt + (unsigned long)2U));
        {
          #line 5720 
          __UNIQUE_ID___x576 = 80;
          #line 5720 
          int __UNIQUE_ID___y577 = 254 - cnt;
          #line 5720 
          if (__UNIQUE_ID___x576 < __UNIQUE_ID___y577) 
                                                       #line 5720 
                                                       tmp_0 = __UNIQUE_ID___x576; else 
                                                                    #line 5720 
                                                                    tmp_0 = __UNIQUE_ID___y577;
          }
        #line 5720 
        ;
        #line 5720 
        if (tmp_0 > len) {
          #line 5721 
          memcpy((void *)(& nic->serial_num),(void *)(vpd_data + ((unsigned long)cnt + (unsigned long)3U)),(unsigned long)len);
          #line 5724 
          memset((void *)((u8 *)(& nic->serial_num) + (unsigned long)len),0,(unsigned long)(80 - len));
          #line 5727 
          break;
        }
      }
      #line 5716 
      cnt ++;
    }
  }
  #line 5733 
  if (fail == 0 && (unsigned int)*(vpd_data + 1U) <= 79U) {
    #line 5734 
    len = (int)*(vpd_data + 1U);
    #line 5735 
    memcpy((void *)(& nic->product_name),(void *)(vpd_data + 3U),(unsigned long)len);
    #line 5736 
    nic->product_name[len] = (unsigned char)0U;
  }
  #line 5738 
  kfree((void *)vpd_data);
  #line 5739 
  swstats->mem_freed += 256ULL;
  #line 5740 
  return;
}

#line 5756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_ethtool_geeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *data_buf)
{
  #line 5759 
  u32 i;
  #line 5759 
  u32 valid;
  #line 5760 
  u64 data;
  #line 5761 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 5763 
  eeprom->magic = (unsigned int)((int)(sp->pdev)->vendor | ((int)(sp->pdev)->device << 16));
  #line 5765 
  if (eeprom->offset + eeprom->len > 2048U) 
                                            #line 5766 
                                            eeprom->len = 2048U - eeprom->offset;
  #line 5768 
  i = 0U;
  #line 5768 
  while (eeprom->len > i) {
    {
      #line 5769 
      if (read_eeprom(sp,(int)(eeprom->offset + i),& data) != 0) {
        #line 5770 
        if (debug_level >= 0) 
                              #line 5770 
                              printk((char *)"\001");
        #line 5771 
        return -14;
      }
      #line 5773 
      valid = ((((unsigned int)data << 24U) | (((unsigned int)(data >> 8) << 16U) & 16711680U)) | (((unsigned int)(data >> 16) << 8U) & 65535U)) | ((unsigned int)(data >> 24) & 255U);
      #line 5774 
      memcpy((void *)(data_buf + (unsigned long)i),(void *)(& valid),4UL);
    }
    #line 5768 
    i += 4U;
  }
  #line 5776 
  return 0;
}

#line 5793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_ethtool_seeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *data_buf)
{
  #line 5798 
  u64 data;
  #line 5797 
  int len = (int)eeprom->len;
  #line 5797 
  int cnt = 0;
  #line 5798 
  u64 valid = 0ULL;
  #line 5799 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 5801 
  if (eeprom->magic != (unsigned int)((int)(sp->pdev)->vendor | ((int)(sp->pdev)->device << 16))) {
    #line 5802 
    if (debug_level >= 0) 
                          #line 5802 
                          printk((char *)"\001",(int)(sp->pdev)->vendor | ((int)(sp->pdev)->device << 16),eeprom->magic);
    #line 5807 
    return -14;
  }
  #line 5810 
  while (len != 0) {
    #line 5811 
    data = (unsigned long long)*(data_buf + (unsigned long)cnt);
    #line 5812 
    if (data != 0ULL) 
                      #line 5813 
                      valid = (unsigned long long)((unsigned int)data << 24U); else 
                                                                    #line 5815 
                                                                    valid = data;
    #line 5817 
    if (write_eeprom(sp,(int)(eeprom->offset + (unsigned int)cnt),valid,0) != 0) {
      #line 5818 
      if (debug_level >= 0) 
                            #line 5818 
                            printk((char *)"\001");
      #line 5821 
      return -14;
    }
    #line 5823 
    cnt ++;
    #line 5824 
    len --;
  }
  #line 5827 
  return 0;
}

#line 5843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_register_test(struct s2io_nic *sp, uint64_t *data)
{
  #line 5846 
  u64 exp_val;
  #line 5845 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 5846 
  u64 val64 = 0ULL;
  #line 5847 
  int fail = 0;
  #line 5849 
  val64 = readq((void *)(& bar0->pif_rd_swapper_fb));
  #line 5850 
  if (val64 != 81985529216486895ULL) {
    #line 5851 
    fail = 1;
    #line 5852 
    if (debug_level > 1) 
                         #line 5852 
                         printk((char *)"\001",1);
  }
  #line 5855 
  val64 = readq((void *)(& bar0->rmac_pause_cfg));
  #line 5856 
  if (val64 != 13835339525963907072ULL) {
    #line 5857 
    fail = 1;
    #line 5858 
    if (debug_level > 1) 
                         #line 5858 
                         printk((char *)"\001",2);
  }
  #line 5861 
  val64 = readq((void *)(& bar0->rx_queue_cfg));
  #line 5862 
  if ((unsigned int)sp->device_type == 2U) 
                                           #line 5863 
                                           exp_val = 289360691352306692ULL; else 
                                                                    #line 5865 
                                                                    exp_val = 578721382704613384ULL;
  #line 5866 
  if (val64 != exp_val) {
    #line 5867 
    fail = 1;
    #line 5868 
    if (debug_level > 1) 
                         #line 5868 
                         printk((char *)"\001",3);
  }
  #line 5871 
  val64 = readq((void *)(& bar0->xgxs_efifo_cfg));
  #line 5872 
  if (val64 != 421729310ULL) {
    #line 5873 
    fail = 1;
    #line 5874 
    if (debug_level > 1) 
                         #line 5874 
                         printk((char *)"\001",4);
  }
  #line 5877 
  val64 = 6510615555426900570ULL;
  #line 5878 
  writeq(val64,(void *)(& bar0->xmsi_data));
  #line 5879 
  val64 = readq((void *)(& bar0->xmsi_data));
  #line 5880 
  if (val64 != 6510615555426900570ULL) {
    #line 5881 
    fail = 1;
    #line 5882 
    if (debug_level >= 0) 
                          #line 5882 
                          printk((char *)"\001",1);
  }
  #line 5885 
  val64 = 11936128518282651045ULL;
  #line 5886 
  writeq(val64,(void *)(& bar0->xmsi_data));
  #line 5887 
  val64 = readq((void *)(& bar0->xmsi_data));
  #line 5888 
  if (val64 != 11936128518282651045ULL) {
    #line 5889 
    fail = 1;
    #line 5890 
    if (debug_level >= 0) 
                          #line 5890 
                          printk((char *)"\001",2);
  }
  #line 5893 
  *data = (unsigned long long)fail;
  #line 5894 
  return fail;
}

#line 5910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_eeprom_test(struct s2io_nic *sp, uint64_t *data)
{
  #line 5913 
  u64 ret_data;
  #line 5913 
  u64 org_4F0;
  #line 5913 
  u64 org_7F0;
  #line 5912 
  int fail = 0;
  #line 5914 
  u8 saved_4F0 = (unsigned char)0U;
  #line 5914 
  u8 saved_7F0 = (unsigned char)0U;
  #line 5915 
  struct net_device *dev = sp->dev;
  #line 5921 
  if ((unsigned int)sp->device_type == 1U) {
    #line 5922 
    if (write_eeprom(sp,0,0ULL,3) == 0) 
                                        #line 5923 
                                        fail = 1;
  }
  #line 5926 
  if (read_eeprom(sp,1264,& org_4F0) == 0) 
                                           #line 5927 
                                           saved_4F0 = (unsigned char)1U;
  #line 5928 
  if (read_eeprom(sp,2032,& org_7F0) == 0) 
                                           #line 5929 
                                           saved_7F0 = (unsigned char)1U;
  #line 5932 
  if (write_eeprom(sp,1264,74565ULL,3) != 0) 
                                             #line 5933 
                                             fail = 1;
  #line 5934 
  if (read_eeprom(sp,1264,& ret_data) != 0) 
                                            #line 5935 
                                            fail = 1;
  #line 5937 
  if (ret_data != 74565ULL) {
    #line 5938 
    if (debug_level >= 0) 
                          #line 5938 
                          printk((char *)"\001",(char *)(& dev->name),74565ULL,ret_data);
    #line 5942 
    fail = 1;
  }
  #line 5946 
  write_eeprom(sp,1264,16777215ULL,3);
  #line 5949 
  if ((unsigned int)sp->device_type == 1U) {
    #line 5950 
    if (write_eeprom(sp,124,0ULL,3) == 0) 
                                          #line 5951 
                                          fail = 1;
  }
  #line 5954 
  if (write_eeprom(sp,2032,74565ULL,3) != 0) 
                                             #line 5955 
                                             fail = 1;
  #line 5956 
  if (read_eeprom(sp,2032,& ret_data) != 0) 
                                            #line 5957 
                                            fail = 1;
  #line 5959 
  if (ret_data != 74565ULL) {
    #line 5960 
    if (debug_level >= 0) 
                          #line 5960 
                          printk((char *)"\001",(char *)(& dev->name),74565ULL,ret_data);
    #line 5964 
    fail = 1;
  }
  #line 5968 
  write_eeprom(sp,2032,16777215ULL,3);
  #line 5970 
  if ((unsigned int)sp->device_type == 1U) {
    #line 5972 
    if (write_eeprom(sp,128,0ULL,3) == 0) 
                                          #line 5973 
                                          fail = 1;
    #line 5976 
    if (write_eeprom(sp,252,0ULL,3) == 0) 
                                          #line 5977 
                                          fail = 1;
    #line 5980 
    if (write_eeprom(sp,256,0ULL,3) == 0) 
                                          #line 5981 
                                          fail = 1;
    #line 5984 
    if (write_eeprom(sp,1260,0ULL,3) == 0) 
                                           #line 5985 
                                           fail = 1;
  }
  #line 5989 
  if ((unsigned int)saved_4F0 != 0U) 
                                     #line 5990 
                                     write_eeprom(sp,1264,org_4F0,3);
  #line 5991 
  if ((unsigned int)saved_7F0 != 0U) 
                                     #line 5992 
                                     write_eeprom(sp,2032,org_7F0,3);
  #line 5994 
  *data = (unsigned long long)fail;
  #line 5995 
  return fail;
}

#line 6012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_bist_test(struct s2io_nic *sp, uint64_t *data)
{
  #line 6014 
  u8 bist = (unsigned char)0U;
  #line 6015 
  int cnt = 0;
  #line 6015 
  int ret = -1;
  #line 6017 
  pci_read_config_byte(sp->pdev,15,& bist);
  #line 6018 
  bist = (unsigned char)((unsigned int)bist | 64U);
  #line 6019 
  pci_write_config_word(sp->pdev,15,(unsigned short)((int)bist));
  #line 6021 
  while (cnt <= 19) {
    #line 6022 
    pci_read_config_byte(sp->pdev,15,& bist);
    #line 6023 
    if (((int)bist & 64) == 0) {
      #line 6024 
      *data = (unsigned long long)bist & 15ULL;
      #line 6025 
      ret = 0;
      #line 6026 
      break;
    }
    #line 6028 
    msleep(100U);
    #line 6029 
    cnt ++;
  }
  #line 6032 
  return ret;
}

#line 6048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_link_test(struct s2io_nic *sp, uint64_t *data)
{
  #line 6051 
  u64 val64;
  #line 6050 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 6053 
  val64 = readq((void *)(& bar0->adapter_status));
  #line 6054 
  if ((val64 & 216172782113783808ULL) != 0ULL) 
                                               #line 6055 
                                               *data = 1ULL; else 
                                                                  #line 6057 
                                                                  *data = 0ULL;
  #line 6059 
  return (int)*data;
}

#line 6075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_rldram_test(struct s2io_nic *sp, uint64_t *data)
{
  #line 6078 
  u64 val64;
  #line 6079 
  int cnt;
  #line 6077 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 6079 
  int iteration = 0;
  #line 6079 
  int test_fail = 0;
  #line 6081 
  val64 = readq((void *)(& bar0->adapter_control));
  #line 6082 
  val64 &= 18446744073709551359ULL;
  #line 6083 
  writeq(val64,(void *)(& bar0->adapter_control));
  #line 6085 
  val64 = readq((void *)(& bar0->mc_rldram_test_ctrl));
  #line 6086 
  val64 |= 65536ULL;
  #line 6087 
  SPECIAL_REG_WRITE(val64,(void *)(& bar0->mc_rldram_test_ctrl),2);
  #line 6089 
  val64 = readq((void *)(& bar0->mc_rldram_mrs));
  #line 6090 
  val64 |= 16777216ULL;
  #line 6091 
  SPECIAL_REG_WRITE(val64,(void *)(& bar0->mc_rldram_mrs),1);
  #line 6093 
  val64 |= 65536ULL;
  #line 6094 
  SPECIAL_REG_WRITE(val64,(void *)(& bar0->mc_rldram_mrs),1);
  #line 6096 
  while (iteration <= 1) {
    #line 6097 
    val64 = 6148914692668129280ULL;
    #line 6098 
    if (iteration == 1) 
                        #line 6099 
                        val64 ^= 18446744073709486080ULL;
    #line 6100 
    writeq(val64,(void *)(& bar0->mc_rldram_test_d0));
    #line 6102 
    val64 = 12297741055038914560ULL;
    #line 6103 
    if (iteration == 1) 
                        #line 6104 
                        val64 ^= 18446744073709486080ULL;
    #line 6105 
    writeq(val64,(void *)(& bar0->mc_rldram_test_d1));
    #line 6107 
    val64 = 6172933889243873280ULL;
    #line 6108 
    if (iteration == 1) 
                        #line 6109 
                        val64 ^= 18446744073709486080ULL;
    #line 6110 
    writeq(val64,(void *)(& bar0->mc_rldram_test_d2));
    #line 6112 
    val64 = 274877776128ULL;
    #line 6113 
    writeq(val64,(void *)(& bar0->mc_rldram_test_add));
    #line 6115 
    val64 = 72339069014704128ULL;
    #line 6118 
    SPECIAL_REG_WRITE(val64,(void *)(& bar0->mc_rldram_test_ctrl),2);
    #line 6120 
    cnt = 0;
    #line 6120 
    while (cnt <= 4) {
      #line 6121 
      val64 = readq((void *)(& bar0->mc_rldram_test_ctrl));
      #line 6122 
      if ((val64 & 1099511627776ULL) != 0ULL) 
                                              #line 6123 
                                              break;
      #line 6124 
      msleep(200U);
      #line 6120 
      cnt ++;
    }
    #line 6127 
    if (cnt == 5) 
                  #line 6128 
                  break;
    #line 6130 
    val64 = 281474976776192ULL;
    #line 6131 
    SPECIAL_REG_WRITE(val64,(void *)(& bar0->mc_rldram_test_ctrl),2);
    #line 6133 
    cnt = 0;
    #line 6133 
    while (cnt <= 4) {
      #line 6134 
      val64 = readq((void *)(& bar0->mc_rldram_test_ctrl));
      #line 6135 
      if ((val64 & 1099511627776ULL) != 0ULL) 
                                              #line 6136 
                                              break;
      #line 6137 
      msleep(500U);
      #line 6133 
      cnt ++;
    }
    #line 6140 
    if (cnt == 5) 
                  #line 6141 
                  break;
    #line 6143 
    val64 = readq((void *)(& bar0->mc_rldram_test_ctrl));
    #line 6144 
    if ((val64 & 4294967296ULL) == 0ULL) 
                                         #line 6145 
                                         test_fail = 1;
    #line 6147 
    iteration ++;
  }
  #line 6150 
  *data = (unsigned long long)test_fail;
  #line 6153 
  SPECIAL_REG_WRITE(0ULL,(void *)(& bar0->mc_rldram_test_ctrl),2);
  #line 6155 
  return test_fail;
}

#line 6173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_ethtool_test(struct net_device *dev, struct ethtool_test *ethtest, uint64_t *data)
{
  #line 6177 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 6178 
  int orig_state = (int)netif_running(sp->dev);
  #line 6180 
  if (ethtest->flags == 1U) {
    #line 6182 
    if (orig_state != 0) 
                         #line 6183 
                         s2io_close(sp->dev);
    #line 6185 
    if (s2io_register_test(sp,data) != 0) 
                                          #line 6186 
                                          ethtest->flags |= 2U;
    #line 6188 
    s2io_reset(sp);
    #line 6190 
    if (s2io_rldram_test(sp,data + 3U) != 0) 
                                             #line 6191 
                                             ethtest->flags |= 2U;
    #line 6193 
    s2io_reset(sp);
    #line 6195 
    if (s2io_eeprom_test(sp,data + 1U) != 0) 
                                             #line 6196 
                                             ethtest->flags |= 2U;
    #line 6198 
    if (s2io_bist_test(sp,data + 4U) != 0) 
                                           #line 6199 
                                           ethtest->flags |= 2U;
    #line 6201 
    if (orig_state != 0) 
                         #line 6202 
                         s2io_open(sp->dev);
    #line 6204 
    *(data + 2U) = 0ULL;
  }
  else {
    #line 6207 
    if (orig_state == 0) {
      #line 6208 
      if (debug_level >= 0) 
                            #line 6208 
                            printk((char *)"\001",(char *)(& dev->name));
      #line 6210 
      *data = 18446744073709551615ULL;
      #line 6211 
      *(data + 1U) = 18446744073709551615ULL;
      #line 6212 
      *(data + 2U) = 18446744073709551615ULL;
      #line 6213 
      *(data + 3U) = 18446744073709551615ULL;
      #line 6214 
      *(data + 4U) = 18446744073709551615ULL;
    }
    #line 6217 
    if (s2io_link_test(sp,data + 2U) != 0) 
                                           #line 6218 
                                           ethtest->flags |= 2U;
    #line 6220 
    *data = 0ULL;
    #line 6221 
    *(data + 1U) = 0ULL;
    #line 6222 
    *(data + 3U) = 0ULL;
    #line 6223 
    *(data + 4U) = 0ULL;
  }
  #line 6225 
  return;
}

#line 6227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *estats, u64 *tmp_stats)
{
  #line 6231 
  int k;
  #line 6238 
  int tmp_0;
  #line 6241 
  int tmp_1;
  #line 6244 
  int tmp_2;
  #line 6245 
  int tmp_3;
  #line 6248 
  int tmp_4;
  #line 6251 
  int tmp_5;
  #line 6252 
  int tmp_6;
  #line 6255 
  int tmp_7;
  #line 6258 
  int tmp_8;
  #line 6261 
  int tmp_9;
  #line 6264 
  int tmp_10;
  #line 6265 
  int tmp_11;
  #line 6266 
  int tmp_12;
  #line 6269 
  int tmp_13;
  #line 6272 
  int tmp_14;
  #line 6275 
  int tmp_15;
  #line 6278 
  int tmp_16;
  #line 6279 
  int tmp_17;
  #line 6281 
  int tmp_18;
  #line 6284 
  int tmp_19;
  #line 6287 
  int tmp_20;
  #line 6288 
  int tmp_21;
  #line 6289 
  int tmp_22;
  #line 6292 
  int tmp_23;
  #line 6295 
  int tmp_24;
  #line 6296 
  int tmp_25;
  #line 6297 
  int tmp_26;
  #line 6298 
  int tmp_27;
  #line 6299 
  int tmp_28;
  #line 6300 
  int tmp_29;
  #line 6303 
  int tmp_30;
  #line 6306 
  int tmp_31;
  #line 6309 
  int tmp_32;
  #line 6312 
  int tmp_33;
  #line 6315 
  int tmp_34;
  #line 6316 
  int tmp_35;
  #line 6317 
  int tmp_36;
  #line 6320 
  int tmp_37;
  #line 6323 
  int tmp_38;
  #line 6326 
  int tmp_39;
  #line 6329 
  int tmp_40;
  #line 6330 
  int tmp_41;
  #line 6331 
  int tmp_42;
  #line 6332 
  int tmp_43;
  #line 6333 
  int tmp_44;
  #line 6334 
  int tmp_45;
  #line 6335 
  int tmp_46;
  #line 6338 
  int tmp_47;
  #line 6339 
  int tmp_48;
  #line 6340 
  int tmp_49;
  #line 6343 
  int tmp_50;
  #line 6346 
  int tmp_51;
  #line 6347 
  int tmp_52;
  #line 6350 
  int tmp_53;
  #line 6353 
  int tmp_54;
  #line 6354 
  int tmp_55;
  #line 6355 
  int tmp_56;
  #line 6356 
  int tmp_57;
  #line 6357 
  int tmp_58;
  #line 6358 
  int tmp_59;
  #line 6359 
  int tmp_60;
  #line 6360 
  int tmp_61;
  #line 6361 
  int tmp_62;
  #line 6362 
  int tmp_63;
  #line 6363 
  int tmp_64;
  #line 6364 
  int tmp_65;
  #line 6365 
  int tmp_66;
  #line 6366 
  int tmp_67;
  #line 6367 
  int tmp_68;
  #line 6368 
  int tmp_69;
  #line 6369 
  int tmp_70;
  #line 6370 
  int tmp_71;
  #line 6373 
  int tmp_72;
  #line 6374 
  int tmp_73;
  #line 6375 
  int tmp_74;
  #line 6378 
  int tmp_75;
  #line 6379 
  int tmp_76;
  #line 6380 
  int tmp_77;
  #line 6381 
  int tmp_78;
  #line 6382 
  int tmp_79;
  #line 6383 
  int tmp_80;
  #line 6384 
  int tmp_81;
  #line 6385 
  int tmp_82;
  #line 6386 
  int tmp_83;
  #line 6387 
  int tmp_84;
  #line 6388 
  int tmp_85;
  #line 6389 
  int tmp_86;
  #line 6390 
  int tmp_87;
  #line 6391 
  int tmp_88;
  #line 6392 
  int tmp_89;
  #line 6393 
  int tmp_90;
  #line 6394 
  int tmp_91;
  #line 6395 
  int tmp_92;
  #line 6396 
  int tmp_93;
  #line 6421 
  int tmp_110;
  #line 6422 
  int tmp_111;
  #line 6423 
  int tmp_112;
  #line 6424 
  int tmp_113;
  #line 6425 
  int tmp_114;
  #line 6426 
  int tmp_115;
  #line 6427 
  int tmp_116;
  #line 6430 
  int tmp_118;
  #line 6431 
  int tmp_119;
  #line 6432 
  int tmp_120;
  #line 6433 
  int tmp_121;
  #line 6434 
  int tmp_122;
  #line 6435 
  int tmp_123;
  #line 6436 
  int tmp_124;
  #line 6437 
  int tmp_125;
  #line 6438 
  int tmp_126;
  #line 6439 
  int tmp_127;
  #line 6440 
  int tmp_128;
  #line 6441 
  int tmp_129;
  #line 6442 
  int tmp_130;
  #line 6443 
  int tmp_131;
  #line 6444 
  int tmp_132;
  #line 6445 
  int tmp_133;
  #line 6460 
  int tmp_137;
  #line 6461 
  int tmp_138;
  #line 6462 
  int tmp_139;
  #line 6463 
  int tmp_140;
  #line 6464 
  int tmp_141;
  #line 6465 
  int tmp_142;
  #line 6466 
  int tmp_143;
  #line 6467 
  int tmp_144;
  #line 6468 
  int tmp_145;
  #line 6470 
  int tmp_146;
  #line 6471 
  int tmp_147;
  #line 6472 
  int tmp_148;
  #line 6473 
  int tmp_149;
  #line 6474 
  int tmp_150;
  #line 6476 
  int tmp_151;
  #line 6477 
  int tmp_152;
  #line 6478 
  int tmp_153;
  #line 6479 
  int tmp_154;
  #line 6480 
  int tmp_155;
  #line 6481 
  int tmp_156;
  #line 6482 
  int tmp_157;
  #line 6483 
  int tmp_158;
  #line 6484 
  int tmp_159;
  #line 6485 
  int tmp_160;
  #line 6486 
  int tmp_161;
  #line 6487 
  int tmp_162;
  #line 6488 
  int tmp_163;
  #line 6489 
  int tmp_164;
  #line 6490 
  int tmp_165;
  #line 6491 
  int tmp_166;
  #line 6492 
  int tmp_167;
  #line 6493 
  int tmp_168;
  #line 6494 
  int tmp_169;
  #line 6495 
  int tmp_170;
  #line 6496 
  int tmp_171;
  #line 6497 
  int tmp_172;
  #line 6498 
  int tmp_173;
  #line 6499 
  int tmp_174;
  #line 6500 
  int tmp_175;
  #line 6501 
  int tmp_176;
  #line 6231 
  int i = 0;
  #line 6232 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 6233 
  struct stat_block *stats = sp->mac_control.stats_info;
  #line 6234 
  struct swStat *swstats = & stats->sw_stat;
  #line 6235 
  struct xpakStat *xstats = & stats->xpak_stat;
  #line 6237 
  s2io_updt_stats(sp);
  #line 6238 
  tmp_0 = i;
  #line 6238 
  i ++;
  #line 6238 
  *(tmp_stats + (unsigned long)tmp_0) = ((unsigned long long)stats->tmac_frms_oflow << 32) | (unsigned long long)stats->tmac_frms;
  #line 6241 
  tmp_1 = i;
  #line 6241 
  i ++;
  #line 6241 
  *(tmp_stats + (unsigned long)tmp_1) = ((unsigned long long)stats->tmac_data_octets_oflow << 32) | (unsigned long long)stats->tmac_data_octets;
  #line 6244 
  tmp_2 = i;
  #line 6244 
  i ++;
  #line 6244 
  *(tmp_stats + (unsigned long)tmp_2) = stats->tmac_drop_frms;
  #line 6245 
  tmp_3 = i;
  #line 6245 
  i ++;
  #line 6245 
  *(tmp_stats + (unsigned long)tmp_3) = ((unsigned long long)stats->tmac_mcst_frms_oflow << 32) | (unsigned long long)stats->tmac_mcst_frms;
  #line 6248 
  tmp_4 = i;
  #line 6248 
  i ++;
  #line 6248 
  *(tmp_stats + (unsigned long)tmp_4) = ((unsigned long long)stats->tmac_bcst_frms_oflow << 32) | (unsigned long long)stats->tmac_bcst_frms;
  #line 6251 
  tmp_5 = i;
  #line 6251 
  i ++;
  #line 6251 
  *(tmp_stats + (unsigned long)tmp_5) = stats->tmac_pause_ctrl_frms;
  #line 6252 
  tmp_6 = i;
  #line 6252 
  i ++;
  #line 6252 
  *(tmp_stats + (unsigned long)tmp_6) = ((unsigned long long)stats->tmac_ttl_octets_oflow << 32) | (unsigned long long)stats->tmac_ttl_octets;
  #line 6255 
  tmp_7 = i;
  #line 6255 
  i ++;
  #line 6255 
  *(tmp_stats + (unsigned long)tmp_7) = ((unsigned long long)stats->tmac_ucst_frms_oflow << 32) | (unsigned long long)stats->tmac_ucst_frms;
  #line 6258 
  tmp_8 = i;
  #line 6258 
  i ++;
  #line 6258 
  *(tmp_stats + (unsigned long)tmp_8) = ((unsigned long long)stats->tmac_nucst_frms_oflow << 32) | (unsigned long long)stats->tmac_nucst_frms;
  #line 6261 
  tmp_9 = i;
  #line 6261 
  i ++;
  #line 6261 
  *(tmp_stats + (unsigned long)tmp_9) = ((unsigned long long)stats->tmac_any_err_frms_oflow << 32) | (unsigned long long)stats->tmac_any_err_frms;
  #line 6264 
  tmp_10 = i;
  #line 6264 
  i ++;
  #line 6264 
  *(tmp_stats + (unsigned long)tmp_10) = stats->tmac_ttl_less_fb_octets;
  #line 6265 
  tmp_11 = i;
  #line 6265 
  i ++;
  #line 6265 
  *(tmp_stats + (unsigned long)tmp_11) = stats->tmac_vld_ip_octets;
  #line 6266 
  tmp_12 = i;
  #line 6266 
  i ++;
  #line 6266 
  *(tmp_stats + (unsigned long)tmp_12) = ((unsigned long long)stats->tmac_vld_ip_oflow << 32) | (unsigned long long)stats->tmac_vld_ip;
  #line 6269 
  tmp_13 = i;
  #line 6269 
  i ++;
  #line 6269 
  *(tmp_stats + (unsigned long)tmp_13) = ((unsigned long long)stats->tmac_drop_ip_oflow << 32) | (unsigned long long)stats->tmac_drop_ip;
  #line 6272 
  tmp_14 = i;
  #line 6272 
  i ++;
  #line 6272 
  *(tmp_stats + (unsigned long)tmp_14) = ((unsigned long long)stats->tmac_icmp_oflow << 32) | (unsigned long long)stats->tmac_icmp;
  #line 6275 
  tmp_15 = i;
  #line 6275 
  i ++;
  #line 6275 
  *(tmp_stats + (unsigned long)tmp_15) = ((unsigned long long)stats->tmac_rst_tcp_oflow << 32) | (unsigned long long)stats->tmac_rst_tcp;
  #line 6278 
  tmp_16 = i;
  #line 6278 
  i ++;
  #line 6278 
  *(tmp_stats + (unsigned long)tmp_16) = stats->tmac_tcp;
  #line 6279 
  tmp_17 = i;
  #line 6279 
  i ++;
  #line 6279 
  *(tmp_stats + (unsigned long)tmp_17) = ((unsigned long long)stats->tmac_udp_oflow << 32) | (unsigned long long)stats->tmac_udp;
  #line 6281 
  tmp_18 = i;
  #line 6281 
  i ++;
  #line 6281 
  *(tmp_stats + (unsigned long)tmp_18) = ((unsigned long long)stats->rmac_vld_frms_oflow << 32) | (unsigned long long)stats->rmac_vld_frms;
  #line 6284 
  tmp_19 = i;
  #line 6284 
  i ++;
  #line 6284 
  *(tmp_stats + (unsigned long)tmp_19) = ((unsigned long long)stats->rmac_data_octets_oflow << 32) | (unsigned long long)stats->rmac_data_octets;
  #line 6287 
  tmp_20 = i;
  #line 6287 
  i ++;
  #line 6287 
  *(tmp_stats + (unsigned long)tmp_20) = stats->rmac_fcs_err_frms;
  #line 6288 
  tmp_21 = i;
  #line 6288 
  i ++;
  #line 6288 
  *(tmp_stats + (unsigned long)tmp_21) = stats->rmac_drop_frms;
  #line 6289 
  tmp_22 = i;
  #line 6289 
  i ++;
  #line 6289 
  *(tmp_stats + (unsigned long)tmp_22) = ((unsigned long long)stats->rmac_vld_mcst_frms_oflow << 32) | (unsigned long long)stats->rmac_vld_mcst_frms;
  #line 6292 
  tmp_23 = i;
  #line 6292 
  i ++;
  #line 6292 
  *(tmp_stats + (unsigned long)tmp_23) = ((unsigned long long)stats->rmac_vld_bcst_frms_oflow << 32) | (unsigned long long)stats->rmac_vld_bcst_frms;
  #line 6295 
  tmp_24 = i;
  #line 6295 
  i ++;
  #line 6295 
  *(tmp_stats + (unsigned long)tmp_24) = (unsigned long long)stats->rmac_in_rng_len_err_frms;
  #line 6296 
  tmp_25 = i;
  #line 6296 
  i ++;
  #line 6296 
  *(tmp_stats + (unsigned long)tmp_25) = (unsigned long long)stats->rmac_out_rng_len_err_frms;
  #line 6297 
  tmp_26 = i;
  #line 6297 
  i ++;
  #line 6297 
  *(tmp_stats + (unsigned long)tmp_26) = stats->rmac_long_frms;
  #line 6298 
  tmp_27 = i;
  #line 6298 
  i ++;
  #line 6298 
  *(tmp_stats + (unsigned long)tmp_27) = stats->rmac_pause_ctrl_frms;
  #line 6299 
  tmp_28 = i;
  #line 6299 
  i ++;
  #line 6299 
  *(tmp_stats + (unsigned long)tmp_28) = stats->rmac_unsup_ctrl_frms;
  #line 6300 
  tmp_29 = i;
  #line 6300 
  i ++;
  #line 6300 
  *(tmp_stats + (unsigned long)tmp_29) = ((unsigned long long)stats->rmac_ttl_octets_oflow << 32) | (unsigned long long)stats->rmac_ttl_octets;
  #line 6303 
  tmp_30 = i;
  #line 6303 
  i ++;
  #line 6303 
  *(tmp_stats + (unsigned long)tmp_30) = ((unsigned long long)stats->rmac_accepted_ucst_frms_oflow << 32) | (unsigned long long)stats->rmac_accepted_ucst_frms;
  #line 6306 
  tmp_31 = i;
  #line 6306 
  i ++;
  #line 6306 
  *(tmp_stats + (unsigned long)tmp_31) = ((unsigned long long)stats->rmac_accepted_nucst_frms_oflow << 32) | (unsigned long long)stats->rmac_accepted_nucst_frms;
  #line 6309 
  tmp_32 = i;
  #line 6309 
  i ++;
  #line 6309 
  *(tmp_stats + (unsigned long)tmp_32) = ((unsigned long long)stats->rmac_discarded_frms_oflow << 32) | (unsigned long long)stats->rmac_discarded_frms;
  #line 6312 
  tmp_33 = i;
  #line 6312 
  i ++;
  #line 6312 
  *(tmp_stats + (unsigned long)tmp_33) = ((unsigned long long)stats->rmac_drop_events_oflow << 32) | (unsigned long long)stats->rmac_drop_events;
  #line 6315 
  tmp_34 = i;
  #line 6315 
  i ++;
  #line 6315 
  *(tmp_stats + (unsigned long)tmp_34) = stats->rmac_ttl_less_fb_octets;
  #line 6316 
  tmp_35 = i;
  #line 6316 
  i ++;
  #line 6316 
  *(tmp_stats + (unsigned long)tmp_35) = stats->rmac_ttl_frms;
  #line 6317 
  tmp_36 = i;
  #line 6317 
  i ++;
  #line 6317 
  *(tmp_stats + (unsigned long)tmp_36) = ((unsigned long long)stats->rmac_usized_frms_oflow << 32) | (unsigned long long)stats->rmac_usized_frms;
  #line 6320 
  tmp_37 = i;
  #line 6320 
  i ++;
  #line 6320 
  *(tmp_stats + (unsigned long)tmp_37) = ((unsigned long long)stats->rmac_osized_frms_oflow << 32) | (unsigned long long)stats->rmac_osized_frms;
  #line 6323 
  tmp_38 = i;
  #line 6323 
  i ++;
  #line 6323 
  *(tmp_stats + (unsigned long)tmp_38) = ((unsigned long long)stats->rmac_frag_frms_oflow << 32) | (unsigned long long)stats->rmac_frag_frms;
  #line 6326 
  tmp_39 = i;
  #line 6326 
  i ++;
  #line 6326 
  *(tmp_stats + (unsigned long)tmp_39) = ((unsigned long long)stats->rmac_jabber_frms_oflow << 32) | (unsigned long long)stats->rmac_jabber_frms;
  #line 6329 
  tmp_40 = i;
  #line 6329 
  i ++;
  #line 6329 
  *(tmp_stats + (unsigned long)tmp_40) = stats->rmac_ttl_64_frms;
  #line 6330 
  tmp_41 = i;
  #line 6330 
  i ++;
  #line 6330 
  *(tmp_stats + (unsigned long)tmp_41) = stats->rmac_ttl_65_127_frms;
  #line 6331 
  tmp_42 = i;
  #line 6331 
  i ++;
  #line 6331 
  *(tmp_stats + (unsigned long)tmp_42) = stats->rmac_ttl_128_255_frms;
  #line 6332 
  tmp_43 = i;
  #line 6332 
  i ++;
  #line 6332 
  *(tmp_stats + (unsigned long)tmp_43) = stats->rmac_ttl_256_511_frms;
  #line 6333 
  tmp_44 = i;
  #line 6333 
  i ++;
  #line 6333 
  *(tmp_stats + (unsigned long)tmp_44) = stats->rmac_ttl_512_1023_frms;
  #line 6334 
  tmp_45 = i;
  #line 6334 
  i ++;
  #line 6334 
  *(tmp_stats + (unsigned long)tmp_45) = stats->rmac_ttl_1024_1518_frms;
  #line 6335 
  tmp_46 = i;
  #line 6335 
  i ++;
  #line 6335 
  *(tmp_stats + (unsigned long)tmp_46) = ((unsigned long long)stats->rmac_ip_oflow << 32) | (unsigned long long)stats->rmac_ip;
  #line 6338 
  tmp_47 = i;
  #line 6338 
  i ++;
  #line 6338 
  *(tmp_stats + (unsigned long)tmp_47) = stats->rmac_ip_octets;
  #line 6339 
  tmp_48 = i;
  #line 6339 
  i ++;
  #line 6339 
  *(tmp_stats + (unsigned long)tmp_48) = (unsigned long long)stats->rmac_hdr_err_ip;
  #line 6340 
  tmp_49 = i;
  #line 6340 
  i ++;
  #line 6340 
  *(tmp_stats + (unsigned long)tmp_49) = ((unsigned long long)stats->rmac_drop_ip_oflow << 32) | (unsigned long long)stats->rmac_drop_ip;
  #line 6343 
  tmp_50 = i;
  #line 6343 
  i ++;
  #line 6343 
  *(tmp_stats + (unsigned long)tmp_50) = ((unsigned long long)stats->rmac_icmp_oflow << 32) | (unsigned long long)stats->rmac_icmp;
  #line 6346 
  tmp_51 = i;
  #line 6346 
  i ++;
  #line 6346 
  *(tmp_stats + (unsigned long)tmp_51) = stats->rmac_tcp;
  #line 6347 
  tmp_52 = i;
  #line 6347 
  i ++;
  #line 6347 
  *(tmp_stats + (unsigned long)tmp_52) = ((unsigned long long)stats->rmac_udp_oflow << 32) | (unsigned long long)stats->rmac_udp;
  #line 6350 
  tmp_53 = i;
  #line 6350 
  i ++;
  #line 6350 
  *(tmp_stats + (unsigned long)tmp_53) = ((unsigned long long)stats->rmac_err_drp_udp_oflow << 32) | (unsigned long long)stats->rmac_err_drp_udp;
  #line 6353 
  tmp_54 = i;
  #line 6353 
  i ++;
  #line 6353 
  *(tmp_stats + (unsigned long)tmp_54) = stats->rmac_xgmii_err_sym;
  #line 6354 
  tmp_55 = i;
  #line 6354 
  i ++;
  #line 6354 
  *(tmp_stats + (unsigned long)tmp_55) = stats->rmac_frms_q0;
  #line 6355 
  tmp_56 = i;
  #line 6355 
  i ++;
  #line 6355 
  *(tmp_stats + (unsigned long)tmp_56) = stats->rmac_frms_q1;
  #line 6356 
  tmp_57 = i;
  #line 6356 
  i ++;
  #line 6356 
  *(tmp_stats + (unsigned long)tmp_57) = stats->rmac_frms_q2;
  #line 6357 
  tmp_58 = i;
  #line 6357 
  i ++;
  #line 6357 
  *(tmp_stats + (unsigned long)tmp_58) = stats->rmac_frms_q3;
  #line 6358 
  tmp_59 = i;
  #line 6358 
  i ++;
  #line 6358 
  *(tmp_stats + (unsigned long)tmp_59) = stats->rmac_frms_q4;
  #line 6359 
  tmp_60 = i;
  #line 6359 
  i ++;
  #line 6359 
  *(tmp_stats + (unsigned long)tmp_60) = stats->rmac_frms_q5;
  #line 6360 
  tmp_61 = i;
  #line 6360 
  i ++;
  #line 6360 
  *(tmp_stats + (unsigned long)tmp_61) = stats->rmac_frms_q6;
  #line 6361 
  tmp_62 = i;
  #line 6361 
  i ++;
  #line 6361 
  *(tmp_stats + (unsigned long)tmp_62) = stats->rmac_frms_q7;
  #line 6362 
  tmp_63 = i;
  #line 6362 
  i ++;
  #line 6362 
  *(tmp_stats + (unsigned long)tmp_63) = (unsigned long long)stats->rmac_full_q0;
  #line 6363 
  tmp_64 = i;
  #line 6363 
  i ++;
  #line 6363 
  *(tmp_stats + (unsigned long)tmp_64) = (unsigned long long)stats->rmac_full_q1;
  #line 6364 
  tmp_65 = i;
  #line 6364 
  i ++;
  #line 6364 
  *(tmp_stats + (unsigned long)tmp_65) = (unsigned long long)stats->rmac_full_q2;
  #line 6365 
  tmp_66 = i;
  #line 6365 
  i ++;
  #line 6365 
  *(tmp_stats + (unsigned long)tmp_66) = (unsigned long long)stats->rmac_full_q3;
  #line 6366 
  tmp_67 = i;
  #line 6366 
  i ++;
  #line 6366 
  *(tmp_stats + (unsigned long)tmp_67) = (unsigned long long)stats->rmac_full_q4;
  #line 6367 
  tmp_68 = i;
  #line 6367 
  i ++;
  #line 6367 
  *(tmp_stats + (unsigned long)tmp_68) = (unsigned long long)stats->rmac_full_q5;
  #line 6368 
  tmp_69 = i;
  #line 6368 
  i ++;
  #line 6368 
  *(tmp_stats + (unsigned long)tmp_69) = (unsigned long long)stats->rmac_full_q6;
  #line 6369 
  tmp_70 = i;
  #line 6369 
  i ++;
  #line 6369 
  *(tmp_stats + (unsigned long)tmp_70) = (unsigned long long)stats->rmac_full_q7;
  #line 6370 
  tmp_71 = i;
  #line 6370 
  i ++;
  #line 6370 
  *(tmp_stats + (unsigned long)tmp_71) = ((unsigned long long)stats->rmac_pause_cnt_oflow << 32) | (unsigned long long)stats->rmac_pause_cnt;
  #line 6373 
  tmp_72 = i;
  #line 6373 
  i ++;
  #line 6373 
  *(tmp_stats + (unsigned long)tmp_72) = stats->rmac_xgmii_data_err_cnt;
  #line 6374 
  tmp_73 = i;
  #line 6374 
  i ++;
  #line 6374 
  *(tmp_stats + (unsigned long)tmp_73) = stats->rmac_xgmii_ctrl_err_cnt;
  #line 6375 
  tmp_74 = i;
  #line 6375 
  i ++;
  #line 6375 
  *(tmp_stats + (unsigned long)tmp_74) = ((unsigned long long)stats->rmac_accepted_ip_oflow << 32) | (unsigned long long)stats->rmac_accepted_ip;
  #line 6378 
  tmp_75 = i;
  #line 6378 
  i ++;
  #line 6378 
  *(tmp_stats + (unsigned long)tmp_75) = (unsigned long long)stats->rmac_err_tcp;
  #line 6379 
  tmp_76 = i;
  #line 6379 
  i ++;
  #line 6379 
  *(tmp_stats + (unsigned long)tmp_76) = (unsigned long long)stats->rd_req_cnt;
  #line 6380 
  tmp_77 = i;
  #line 6380 
  i ++;
  #line 6380 
  *(tmp_stats + (unsigned long)tmp_77) = (unsigned long long)stats->new_rd_req_cnt;
  #line 6381 
  tmp_78 = i;
  #line 6381 
  i ++;
  #line 6381 
  *(tmp_stats + (unsigned long)tmp_78) = (unsigned long long)stats->new_rd_req_rtry_cnt;
  #line 6382 
  tmp_79 = i;
  #line 6382 
  i ++;
  #line 6382 
  *(tmp_stats + (unsigned long)tmp_79) = (unsigned long long)stats->rd_rtry_cnt;
  #line 6383 
  tmp_80 = i;
  #line 6383 
  i ++;
  #line 6383 
  *(tmp_stats + (unsigned long)tmp_80) = (unsigned long long)stats->wr_rtry_rd_ack_cnt;
  #line 6384 
  tmp_81 = i;
  #line 6384 
  i ++;
  #line 6384 
  *(tmp_stats + (unsigned long)tmp_81) = (unsigned long long)stats->wr_req_cnt;
  #line 6385 
  tmp_82 = i;
  #line 6385 
  i ++;
  #line 6385 
  *(tmp_stats + (unsigned long)tmp_82) = (unsigned long long)stats->new_wr_req_cnt;
  #line 6386 
  tmp_83 = i;
  #line 6386 
  i ++;
  #line 6386 
  *(tmp_stats + (unsigned long)tmp_83) = (unsigned long long)stats->new_wr_req_rtry_cnt;
  #line 6387 
  tmp_84 = i;
  #line 6387 
  i ++;
  #line 6387 
  *(tmp_stats + (unsigned long)tmp_84) = (unsigned long long)stats->wr_rtry_cnt;
  #line 6388 
  tmp_85 = i;
  #line 6388 
  i ++;
  #line 6388 
  *(tmp_stats + (unsigned long)tmp_85) = (unsigned long long)stats->wr_disc_cnt;
  #line 6389 
  tmp_86 = i;
  #line 6389 
  i ++;
  #line 6389 
  *(tmp_stats + (unsigned long)tmp_86) = (unsigned long long)stats->rd_rtry_wr_ack_cnt;
  #line 6390 
  tmp_87 = i;
  #line 6390 
  i ++;
  #line 6390 
  *(tmp_stats + (unsigned long)tmp_87) = (unsigned long long)stats->txp_wr_cnt;
  #line 6391 
  tmp_88 = i;
  #line 6391 
  i ++;
  #line 6391 
  *(tmp_stats + (unsigned long)tmp_88) = (unsigned long long)stats->txd_rd_cnt;
  #line 6392 
  tmp_89 = i;
  #line 6392 
  i ++;
  #line 6392 
  *(tmp_stats + (unsigned long)tmp_89) = (unsigned long long)stats->txd_wr_cnt;
  #line 6393 
  tmp_90 = i;
  #line 6393 
  i ++;
  #line 6393 
  *(tmp_stats + (unsigned long)tmp_90) = (unsigned long long)stats->rxd_rd_cnt;
  #line 6394 
  tmp_91 = i;
  #line 6394 
  i ++;
  #line 6394 
  *(tmp_stats + (unsigned long)tmp_91) = (unsigned long long)stats->rxd_wr_cnt;
  #line 6395 
  tmp_92 = i;
  #line 6395 
  i ++;
  #line 6395 
  *(tmp_stats + (unsigned long)tmp_92) = (unsigned long long)stats->txf_rd_cnt;
  #line 6396 
  tmp_93 = i;
  #line 6396 
  i ++;
  #line 6396 
  *(tmp_stats + (unsigned long)tmp_93) = (unsigned long long)stats->rxf_wr_cnt;
  #line 6399 
  if ((unsigned int)sp->device_type == 2U) {
    #line 6400 
    int tmp_94;
    #line 6402 
    int tmp_95;
    #line 6404 
    int tmp_96;
    #line 6406 
    int tmp_97;
    #line 6407 
    int tmp_98;
    #line 6408 
    int tmp_99;
    #line 6409 
    int tmp_100;
    #line 6410 
    int tmp_101;
    #line 6411 
    int tmp_102;
    #line 6412 
    int tmp_103;
    #line 6413 
    int tmp_104;
    #line 6414 
    int tmp_105;
    #line 6415 
    int tmp_106;
    #line 6416 
    int tmp_107;
    #line 6417 
    int tmp_108;
    #line 6418 
    int tmp_109;
    #line 6400 
    tmp_94 = i;
    #line 6400 
    i ++;
    #line 6400 
    *(tmp_stats + (unsigned long)tmp_94) = stats->rmac_ttl_1519_4095_frms;
    #line 6402 
    tmp_95 = i;
    #line 6402 
    i ++;
    #line 6402 
    *(tmp_stats + (unsigned long)tmp_95) = stats->rmac_ttl_4096_8191_frms;
    #line 6404 
    tmp_96 = i;
    #line 6404 
    i ++;
    #line 6404 
    *(tmp_stats + (unsigned long)tmp_96) = stats->rmac_ttl_8192_max_frms;
    #line 6406 
    tmp_97 = i;
    #line 6406 
    i ++;
    #line 6406 
    *(tmp_stats + (unsigned long)tmp_97) = stats->rmac_ttl_gt_max_frms;
    #line 6407 
    tmp_98 = i;
    #line 6407 
    i ++;
    #line 6407 
    *(tmp_stats + (unsigned long)tmp_98) = stats->rmac_osized_alt_frms;
    #line 6408 
    tmp_99 = i;
    #line 6408 
    i ++;
    #line 6408 
    *(tmp_stats + (unsigned long)tmp_99) = stats->rmac_jabber_alt_frms;
    #line 6409 
    tmp_100 = i;
    #line 6409 
    i ++;
    #line 6409 
    *(tmp_stats + (unsigned long)tmp_100) = stats->rmac_gt_max_alt_frms;
    #line 6410 
    tmp_101 = i;
    #line 6410 
    i ++;
    #line 6410 
    *(tmp_stats + (unsigned long)tmp_101) = stats->rmac_vlan_frms;
    #line 6411 
    tmp_102 = i;
    #line 6411 
    i ++;
    #line 6411 
    *(tmp_stats + (unsigned long)tmp_102) = (unsigned long long)stats->rmac_len_discard;
    #line 6412 
    tmp_103 = i;
    #line 6412 
    i ++;
    #line 6412 
    *(tmp_stats + (unsigned long)tmp_103) = (unsigned long long)stats->rmac_fcs_discard;
    #line 6413 
    tmp_104 = i;
    #line 6413 
    i ++;
    #line 6413 
    *(tmp_stats + (unsigned long)tmp_104) = (unsigned long long)stats->rmac_pf_discard;
    #line 6414 
    tmp_105 = i;
    #line 6414 
    i ++;
    #line 6414 
    *(tmp_stats + (unsigned long)tmp_105) = (unsigned long long)stats->rmac_da_discard;
    #line 6415 
    tmp_106 = i;
    #line 6415 
    i ++;
    #line 6415 
    *(tmp_stats + (unsigned long)tmp_106) = (unsigned long long)stats->rmac_red_discard;
    #line 6416 
    tmp_107 = i;
    #line 6416 
    i ++;
    #line 6416 
    *(tmp_stats + (unsigned long)tmp_107) = (unsigned long long)stats->rmac_rts_discard;
    #line 6417 
    tmp_108 = i;
    #line 6417 
    i ++;
    #line 6417 
    *(tmp_stats + (unsigned long)tmp_108) = (unsigned long long)stats->rmac_ingm_full_discard;
    #line 6418 
    tmp_109 = i;
    #line 6418 
    i ++;
    #line 6418 
    *(tmp_stats + (unsigned long)tmp_109) = (unsigned long long)stats->link_fault_cnt;
  }
  #line 6421 
  tmp_110 = i;
  #line 6421 
  i ++;
  #line 6421 
  *(tmp_stats + (unsigned long)tmp_110) = 0ULL;
  #line 6422 
  tmp_111 = i;
  #line 6422 
  i ++;
  #line 6422 
  *(tmp_stats + (unsigned long)tmp_111) = swstats->single_ecc_errs;
  #line 6423 
  tmp_112 = i;
  #line 6423 
  i ++;
  #line 6423 
  *(tmp_stats + (unsigned long)tmp_112) = swstats->double_ecc_errs;
  #line 6424 
  tmp_113 = i;
  #line 6424 
  i ++;
  #line 6424 
  *(tmp_stats + (unsigned long)tmp_113) = swstats->parity_err_cnt;
  #line 6425 
  tmp_114 = i;
  #line 6425 
  i ++;
  #line 6425 
  *(tmp_stats + (unsigned long)tmp_114) = swstats->serious_err_cnt;
  #line 6426 
  tmp_115 = i;
  #line 6426 
  i ++;
  #line 6426 
  *(tmp_stats + (unsigned long)tmp_115) = swstats->soft_reset_cnt;
  #line 6427 
  tmp_116 = i;
  #line 6427 
  i ++;
  #line 6427 
  *(tmp_stats + (unsigned long)tmp_116) = swstats->fifo_full_cnt;
  #line 6428 
  k = 0;
  #line 6428 
  while (k <= 7) {
    #line 6429 
    int tmp_117;
    #line 6429 
    tmp_117 = i;
    #line 6429 
    i ++;
    #line 6429 
    *(tmp_stats + (unsigned long)tmp_117) = swstats->ring_full_cnt[k];
    #line 6428 
    k ++;
  }
  #line 6430 
  tmp_118 = i;
  #line 6430 
  i ++;
  #line 6430 
  *(tmp_stats + (unsigned long)tmp_118) = xstats->alarm_transceiver_temp_high;
  #line 6431 
  tmp_119 = i;
  #line 6431 
  i ++;
  #line 6431 
  *(tmp_stats + (unsigned long)tmp_119) = xstats->alarm_transceiver_temp_low;
  #line 6432 
  tmp_120 = i;
  #line 6432 
  i ++;
  #line 6432 
  *(tmp_stats + (unsigned long)tmp_120) = xstats->alarm_laser_bias_current_high;
  #line 6433 
  tmp_121 = i;
  #line 6433 
  i ++;
  #line 6433 
  *(tmp_stats + (unsigned long)tmp_121) = xstats->alarm_laser_bias_current_low;
  #line 6434 
  tmp_122 = i;
  #line 6434 
  i ++;
  #line 6434 
  *(tmp_stats + (unsigned long)tmp_122) = xstats->alarm_laser_output_power_high;
  #line 6435 
  tmp_123 = i;
  #line 6435 
  i ++;
  #line 6435 
  *(tmp_stats + (unsigned long)tmp_123) = xstats->alarm_laser_output_power_low;
  #line 6436 
  tmp_124 = i;
  #line 6436 
  i ++;
  #line 6436 
  *(tmp_stats + (unsigned long)tmp_124) = xstats->warn_transceiver_temp_high;
  #line 6437 
  tmp_125 = i;
  #line 6437 
  i ++;
  #line 6437 
  *(tmp_stats + (unsigned long)tmp_125) = xstats->warn_transceiver_temp_low;
  #line 6438 
  tmp_126 = i;
  #line 6438 
  i ++;
  #line 6438 
  *(tmp_stats + (unsigned long)tmp_126) = xstats->warn_laser_bias_current_high;
  #line 6439 
  tmp_127 = i;
  #line 6439 
  i ++;
  #line 6439 
  *(tmp_stats + (unsigned long)tmp_127) = xstats->warn_laser_bias_current_low;
  #line 6440 
  tmp_128 = i;
  #line 6440 
  i ++;
  #line 6440 
  *(tmp_stats + (unsigned long)tmp_128) = xstats->warn_laser_output_power_high;
  #line 6441 
  tmp_129 = i;
  #line 6441 
  i ++;
  #line 6441 
  *(tmp_stats + (unsigned long)tmp_129) = xstats->warn_laser_output_power_low;
  #line 6442 
  tmp_130 = i;
  #line 6442 
  i ++;
  #line 6442 
  *(tmp_stats + (unsigned long)tmp_130) = swstats->clubbed_frms_cnt;
  #line 6443 
  tmp_131 = i;
  #line 6443 
  i ++;
  #line 6443 
  *(tmp_stats + (unsigned long)tmp_131) = swstats->sending_both;
  #line 6444 
  tmp_132 = i;
  #line 6444 
  i ++;
  #line 6444 
  *(tmp_stats + (unsigned long)tmp_132) = swstats->outof_sequence_pkts;
  #line 6445 
  tmp_133 = i;
  #line 6445 
  i ++;
  #line 6445 
  *(tmp_stats + (unsigned long)tmp_133) = swstats->flush_max_pkts;
  #line 6446 
  if (swstats->num_aggregations != 0ULL) {
    #line 6457 
    int tmp_135;
    #line 6447 
    u64 tmp = swstats->sum_avg_pkts_aggregated;
    #line 6448 
    int count = 0;
    #line 6453 
    while (swstats->num_aggregations <= tmp) {
      #line 6454 
      tmp -= swstats->num_aggregations;
      #line 6455 
      count ++;
    }
    #line 6457 
    tmp_135 = i;
    #line 6457 
    i ++;
    #line 6457 
    *(tmp_stats + (unsigned long)tmp_135) = (unsigned long long)count;
  }
  else {
    #line 6459 
    int tmp_136;
    #line 6459 
    tmp_136 = i;
    #line 6459 
    i ++;
    #line 6459 
    *(tmp_stats + (unsigned long)tmp_136) = 0ULL;
  }
  #line 6460 
  tmp_137 = i;
  #line 6460 
  i ++;
  #line 6460 
  *(tmp_stats + (unsigned long)tmp_137) = swstats->mem_alloc_fail_cnt;
  #line 6461 
  tmp_138 = i;
  #line 6461 
  i ++;
  #line 6461 
  *(tmp_stats + (unsigned long)tmp_138) = swstats->pci_map_fail_cnt;
  #line 6462 
  tmp_139 = i;
  #line 6462 
  i ++;
  #line 6462 
  *(tmp_stats + (unsigned long)tmp_139) = swstats->watchdog_timer_cnt;
  #line 6463 
  tmp_140 = i;
  #line 6463 
  i ++;
  #line 6463 
  *(tmp_stats + (unsigned long)tmp_140) = swstats->mem_allocated;
  #line 6464 
  tmp_141 = i;
  #line 6464 
  i ++;
  #line 6464 
  *(tmp_stats + (unsigned long)tmp_141) = swstats->mem_freed;
  #line 6465 
  tmp_142 = i;
  #line 6465 
  i ++;
  #line 6465 
  *(tmp_stats + (unsigned long)tmp_142) = swstats->link_up_cnt;
  #line 6466 
  tmp_143 = i;
  #line 6466 
  i ++;
  #line 6466 
  *(tmp_stats + (unsigned long)tmp_143) = swstats->link_down_cnt;
  #line 6467 
  tmp_144 = i;
  #line 6467 
  i ++;
  #line 6467 
  *(tmp_stats + (unsigned long)tmp_144) = swstats->link_up_time;
  #line 6468 
  tmp_145 = i;
  #line 6468 
  i ++;
  #line 6468 
  *(tmp_stats + (unsigned long)tmp_145) = swstats->link_down_time;
  #line 6470 
  tmp_146 = i;
  #line 6470 
  i ++;
  #line 6470 
  *(tmp_stats + (unsigned long)tmp_146) = swstats->tx_buf_abort_cnt;
  #line 6471 
  tmp_147 = i;
  #line 6471 
  i ++;
  #line 6471 
  *(tmp_stats + (unsigned long)tmp_147) = swstats->tx_desc_abort_cnt;
  #line 6472 
  tmp_148 = i;
  #line 6472 
  i ++;
  #line 6472 
  *(tmp_stats + (unsigned long)tmp_148) = swstats->tx_parity_err_cnt;
  #line 6473 
  tmp_149 = i;
  #line 6473 
  i ++;
  #line 6473 
  *(tmp_stats + (unsigned long)tmp_149) = swstats->tx_link_loss_cnt;
  #line 6474 
  tmp_150 = i;
  #line 6474 
  i ++;
  #line 6474 
  *(tmp_stats + (unsigned long)tmp_150) = swstats->tx_list_proc_err_cnt;
  #line 6476 
  tmp_151 = i;
  #line 6476 
  i ++;
  #line 6476 
  *(tmp_stats + (unsigned long)tmp_151) = swstats->rx_parity_err_cnt;
  #line 6477 
  tmp_152 = i;
  #line 6477 
  i ++;
  #line 6477 
  *(tmp_stats + (unsigned long)tmp_152) = swstats->rx_abort_cnt;
  #line 6478 
  tmp_153 = i;
  #line 6478 
  i ++;
  #line 6478 
  *(tmp_stats + (unsigned long)tmp_153) = swstats->rx_parity_abort_cnt;
  #line 6479 
  tmp_154 = i;
  #line 6479 
  i ++;
  #line 6479 
  *(tmp_stats + (unsigned long)tmp_154) = swstats->rx_rda_fail_cnt;
  #line 6480 
  tmp_155 = i;
  #line 6480 
  i ++;
  #line 6480 
  *(tmp_stats + (unsigned long)tmp_155) = swstats->rx_unkn_prot_cnt;
  #line 6481 
  tmp_156 = i;
  #line 6481 
  i ++;
  #line 6481 
  *(tmp_stats + (unsigned long)tmp_156) = swstats->rx_fcs_err_cnt;
  #line 6482 
  tmp_157 = i;
  #line 6482 
  i ++;
  #line 6482 
  *(tmp_stats + (unsigned long)tmp_157) = swstats->rx_buf_size_err_cnt;
  #line 6483 
  tmp_158 = i;
  #line 6483 
  i ++;
  #line 6483 
  *(tmp_stats + (unsigned long)tmp_158) = swstats->rx_rxd_corrupt_cnt;
  #line 6484 
  tmp_159 = i;
  #line 6484 
  i ++;
  #line 6484 
  *(tmp_stats + (unsigned long)tmp_159) = swstats->rx_unkn_err_cnt;
  #line 6485 
  tmp_160 = i;
  #line 6485 
  i ++;
  #line 6485 
  *(tmp_stats + (unsigned long)tmp_160) = swstats->tda_err_cnt;
  #line 6486 
  tmp_161 = i;
  #line 6486 
  i ++;
  #line 6486 
  *(tmp_stats + (unsigned long)tmp_161) = swstats->pfc_err_cnt;
  #line 6487 
  tmp_162 = i;
  #line 6487 
  i ++;
  #line 6487 
  *(tmp_stats + (unsigned long)tmp_162) = swstats->pcc_err_cnt;
  #line 6488 
  tmp_163 = i;
  #line 6488 
  i ++;
  #line 6488 
  *(tmp_stats + (unsigned long)tmp_163) = swstats->tti_err_cnt;
  #line 6489 
  tmp_164 = i;
  #line 6489 
  i ++;
  #line 6489 
  *(tmp_stats + (unsigned long)tmp_164) = swstats->tpa_err_cnt;
  #line 6490 
  tmp_165 = i;
  #line 6490 
  i ++;
  #line 6490 
  *(tmp_stats + (unsigned long)tmp_165) = swstats->sm_err_cnt;
  #line 6491 
  tmp_166 = i;
  #line 6491 
  i ++;
  #line 6491 
  *(tmp_stats + (unsigned long)tmp_166) = swstats->lso_err_cnt;
  #line 6492 
  tmp_167 = i;
  #line 6492 
  i ++;
  #line 6492 
  *(tmp_stats + (unsigned long)tmp_167) = swstats->mac_tmac_err_cnt;
  #line 6493 
  tmp_168 = i;
  #line 6493 
  i ++;
  #line 6493 
  *(tmp_stats + (unsigned long)tmp_168) = swstats->mac_rmac_err_cnt;
  #line 6494 
  tmp_169 = i;
  #line 6494 
  i ++;
  #line 6494 
  *(tmp_stats + (unsigned long)tmp_169) = swstats->xgxs_txgxs_err_cnt;
  #line 6495 
  tmp_170 = i;
  #line 6495 
  i ++;
  #line 6495 
  *(tmp_stats + (unsigned long)tmp_170) = swstats->xgxs_rxgxs_err_cnt;
  #line 6496 
  tmp_171 = i;
  #line 6496 
  i ++;
  #line 6496 
  *(tmp_stats + (unsigned long)tmp_171) = swstats->rc_err_cnt;
  #line 6497 
  tmp_172 = i;
  #line 6497 
  i ++;
  #line 6497 
  *(tmp_stats + (unsigned long)tmp_172) = swstats->prc_pcix_err_cnt;
  #line 6498 
  tmp_173 = i;
  #line 6498 
  i ++;
  #line 6498 
  *(tmp_stats + (unsigned long)tmp_173) = swstats->rpa_err_cnt;
  #line 6499 
  tmp_174 = i;
  #line 6499 
  i ++;
  #line 6499 
  *(tmp_stats + (unsigned long)tmp_174) = swstats->rda_err_cnt;
  #line 6500 
  tmp_175 = i;
  #line 6500 
  i ++;
  #line 6500 
  *(tmp_stats + (unsigned long)tmp_175) = swstats->rti_err_cnt;
  #line 6501 
  tmp_176 = i;
  #line 6501 
  i ++;
  #line 6501 
  *(tmp_stats + (unsigned long)tmp_176) = swstats->mc_err_cnt;
  #line 6502 
  return;
}

#line 6504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_ethtool_get_regs_len(struct net_device *dev)
{
  #line 6506 
  return 12608;
}

#line 6510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_get_eeprom_len(struct net_device *dev)
{
  #line 6512 
  return 2048;
}

#line 6515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_get_sset_count(struct net_device *dev, int sset)
{
  #line 6517 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 6519 
  switch (sset) {
    #line 6520 
    case 0: 
            #line 6520 
    ;
    #line 6521 
    return 5;
    #line 6522 
    case 1: 
            #line 6522 
    ;
    #line 6523 
    switch ((int)sp->device_type) {
      #line 6524 
      case 1: 
              #line 6524 
      ;
      #line 6525 
      return 166;
      #line 6526 
      case 2: 
              #line 6526 
      ;
      #line 6527 
      return 182;
      #line 6528 
      default: 
               #line 6528 
      ;
      #line 6529 
      return 0;
    }
    #line 6531 
    default: 
             #line 6531 
    ;
    #line 6532 
    return -95;
  }
}

#line 6536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_ethtool_get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  #line 6539 
  int stat_size = 0;
  #line 6540 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 6542 
  switch (stringset) {
    #line 6543 
    case (u32)0: 
                 #line 6543 
    ;
    #line 6544 
    memcpy((void *)data,(void *)(& s2io_gstrings),160UL);
    #line 6545 
    break;
    #line 6546 
    case (u32)1: 
                 #line 6546 
    ;
    #line 6547 
    stat_size = 3008;
    #line 6548 
    memcpy((void *)data,(void *)(& ethtool_xena_stats_keys),(unsigned long)stat_size);
    #line 6549 
    if ((unsigned int)sp->device_type == 2U) {
      #line 6550 
      memcpy((void *)(data + (unsigned long)stat_size),(void *)(& ethtool_enhanced_stats_keys),512UL);
      #line 6553 
      stat_size = (int)((unsigned int)stat_size + 512U);
    }
    #line 6556 
    memcpy((void *)(data + (unsigned long)stat_size),(void *)(& ethtool_driver_stats_keys),2304UL);
  }
  #line 6558 
  return;
}

#line 6561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 6563 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 6564 
  netdev_features_t changed = (dev->features ^ features) & 32768ULL;
  #line 6566 
  if (changed != 0ULL) {
    #line 6566 
    if ((int)netif_running(dev) != 0) {
      #line 6567 
      int rc;
      #line 6578 
      int tmp_0;
      #line 6569 
      s2io_stop_all_tx_queue(sp);
      #line 6570 
      s2io_card_down(sp);
      #line 6571 
      dev->features = features;
      #line 6572 
      rc = s2io_card_up(sp);
      #line 6573 
      if (rc != 0) 
                   #line 6574 
                   s2io_reset(sp); else 
                                        #line 6576 
                                        s2io_start_all_tx_queue(sp);
      #line 6578 
      if (rc != 0) 
                   #line 6578 
                   tmp_0 = rc; else 
                                    #line 6578 
                                    tmp_0 = 1;
      #line 6578 
      return tmp_0;
    }
  }
  #line 6581 
  return 0;
}

#line 6584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static struct ethtool_ops netdev_ethtool_ops = {.get_drvinfo = & s2io_ethtool_gdrvinfo, .get_regs_len = & s2io_ethtool_get_regs_len, .get_regs = & s2io_ethtool_gregs, .get_link = & ethtool_op_get_link, .get_eeprom_len = & s2io_get_eeprom_len, .get_eeprom = & s2io_ethtool_geeprom, .set_eeprom = & s2io_ethtool_seeprom, .get_ringparam = & s2io_ethtool_gringparam, .get_pauseparam = & s2io_ethtool_getpause_data, .set_pauseparam = & s2io_ethtool_setpause_data, .self_test = & s2io_ethtool_test, .get_strings = & s2io_ethtool_get_strings, .set_phys_id = & s2io_ethtool_set_led, .get_ethtool_stats = & s2io_get_ethtool_stats, .get_sset_count = & s2io_get_sset_count, .get_link_ksettings = & s2io_ethtool_get_link_ksettings, .set_link_ksettings = & s2io_ethtool_set_link_ksettings};
#line 6616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
{
  #line 6618 
  return -95;
}

#line 6632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 6634 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 6635 
  int ret = 0;
  #line 6637 
  dev->mtu = (unsigned int)new_mtu;
  #line 6638 
  if ((int)netif_running(dev) != 0) {
    #line 6639 
    s2io_stop_all_tx_queue(sp);
    #line 6640 
    s2io_card_down(sp);
    #line 6641 
    ret = s2io_card_up(sp);
    #line 6642 
    if (ret != 0) {
      #line 6643 
      if (debug_level >= 0) 
                            #line 6643 
                            printk((char *)"\001",(char *)"s2io_change_mtu");
      #line 6645 
      return ret;
    }
    #line 6647 
    s2io_wake_all_tx_queue(sp);
  }
  else {
    #line 6649 
    struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
    #line 6650 
    u64 val64 = (unsigned long long)new_mtu;
    #line 6652 
    writeq(val64 << 48,(void *)(& bar0->rmac_max_pyld_len));
  }
  #line 6655 
  return ret;
}

#line 6664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_set_link(struct work_struct *work)
{
  #line 6666 
  void *__mptr;
  #line 6670 
  register u64 val64;
  #line 6671 
  u16 subid;
  #line 6666 
  __mptr = (void *)work;
  #line 6666 
  struct s2io_nic *nic = ((struct s2io_nic *)(__mptr + 18446744073709481336U));
  #line 6668 
  struct net_device *dev = nic->dev;
  #line 6669 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 6673 
  rtnl_lock();
  #line 6675 
  if (! netif_running(dev)) 
                            #line 6676 
                            goto out_unlock;
  #line 6678 
  if ((int)test_and_set_bit(0L,& nic->state) != 0) 
                                                   #line 6680 
                                                   goto out_unlock;
  #line 6683 
  subid = (nic->pdev)->subsystem_device;
  #line 6684 
  if (s2io_link_fault_indication(nic) == 2) 
                                            #line 6689 
                                            msleep(100U);
  #line 6692 
  val64 = readq((void *)(& bar0->adapter_status));
  #line 6693 
  if ((val64 & 216172782113783808ULL) == 0ULL) {
    #line 6694 
    if ((readq((void *)(& bar0->adapter_control)) & 72057594037927936ULL) == 0ULL) {
      #line 6695 
      if (verify_xena_quiescence(nic) != 0) {
        #line 6696 
        val64 = readq((void *)(& bar0->adapter_control));
        #line 6697 
        val64 |= 72057594037927936ULL;
        #line 6698 
        writeq(val64,(void *)(& bar0->adapter_control));
        #line 6699 
        if ((unsigned int)nic->device_type == 1U && ((unsigned int)subid + 40949U <= 2U || (unsigned int)subid + 39925U <= 2U)) {
          #line 6701 
          val64 = readq((void *)(& bar0->gpio_control));
          #line 6702 
          val64 |= 36028797018963968ULL;
          #line 6703 
          writeq(val64,(void *)(& bar0->gpio_control));
          #line 6704 
          val64 = readq((void *)(& bar0->gpio_control));
        }
        else {
          #line 6706 
          val64 |= 1099511627776ULL;
          #line 6707 
          writeq(val64,(void *)(& bar0->adapter_control));
        }
        #line 6709 
        nic->device_enabled_once = 1;
      }
      else {
        #line 6711 
        if (debug_level >= 0) 
                              #line 6711 
                              printk((char *)"\001",(char *)(& dev->name));
        #line 6714 
        s2io_stop_all_tx_queue(nic);
      }
    }
    #line 6717 
    val64 = readq((void *)(& bar0->adapter_control));
    #line 6718 
    val64 |= 1099511627776ULL;
    #line 6719 
    writeq(val64,(void *)(& bar0->adapter_control));
    #line 6720 
    s2io_link(nic,2);
  }
  else {
    #line 6722 
    if ((unsigned int)nic->device_type == 1U && ((unsigned int)subid + 40949U <= 2U || (unsigned int)subid + 39925U <= 2U)) {
      #line 6724 
      val64 = readq((void *)(& bar0->gpio_control));
      #line 6725 
      val64 &= 18410715276690587647ULL;
      #line 6726 
      writeq(val64,(void *)(& bar0->gpio_control));
      #line 6727 
      val64 = readq((void *)(& bar0->gpio_control));
    }
    #line 6730 
    val64 = readq((void *)(& bar0->adapter_control));
    #line 6731 
    val64 &= 18446742974197923839ULL;
    #line 6732 
    writeq(val64,(void *)(& bar0->adapter_control));
    #line 6733 
    s2io_link(nic,1);
  }
  #line 6735 
  cif_clear_bit(0L,& nic->state);
  #line 6737 
  out_unlock: 
              #line 6737 
  ;
  #line 6738 
  rtnl_unlock();
  #line 6739 
  return;
}

#line 6741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int set_rxd_buffer_pointer(struct s2io_nic *sp, struct RxD_t *rxdp, struct buffAdd *ba, struct sk_buff **skb, u64 *temp0, u64 *temp1, u64 *temp2, int size)
{
  #line 6746 
  struct net_device *dev = sp->dev;
  #line 6747 
  struct swStat *stats = & (sp->mac_control.stats_info)->sw_stat;
  #line 6749 
  if (sp->rxd_mode == 0 && rxdp->Host_Control == 0ULL) {
    #line 6750 
    struct RxD1 *rxdp1 = (struct RxD1 *)rxdp;
    #line 6752 
    if (*skb != (struct sk_buff *)0) {
      #line 6753 
      if (debug_level > 1) 
                           #line 6753 
                           printk((char *)"\001");
      #line 6759 
      rxdp1->Buffer0_ptr = *temp0;
    }
    else {
      #line 6761 
      *skb = netdev_alloc_skb(dev,(unsigned int)size);
      #line 6762 
      if (*skb == (struct sk_buff *)0) {
        #line 6763 
        if (debug_level > 1) 
                             #line 6763 
                             printk((char *)"\001",(char *)(& dev->name),(char *)"1 buf mode SKBs");
        #line 6766 
        (stats->mem_alloc_fail_cnt) ++;
        #line 6767 
        return -12;
      }
      #line 6769 
      stats->mem_allocated += (unsigned long long)(*skb)->truesize;
      #line 6774 
      *temp0 = pci_map_single(sp->pdev,(void *)(*skb)->data,(unsigned long)size,2);
      #line 6774 
      rxdp1->Buffer0_ptr = pci_map_single(sp->pdev,(void *)(*skb)->data,(unsigned long)size,2);
      #line 6778 
      if (pci_dma_mapping_error(sp->pdev,rxdp1->Buffer0_ptr) != 0) 
                                                                   #line 6779 
                                                                   goto memalloc_failed;
      #line 6780 
      rxdp->Host_Control = (unsigned long long)*skb;
    }
  }
  else 
    #line 6782 
    if (sp->rxd_mode == 1 && rxdp->Host_Control == 0ULL) {
      #line 6783 
      struct RxD3 *rxdp3 = (struct RxD3 *)rxdp;
      #line 6785 
      if (*skb != (struct sk_buff *)0) {
        #line 6786 
        rxdp3->Buffer2_ptr = *temp2;
        #line 6787 
        rxdp3->Buffer0_ptr = *temp0;
        #line 6788 
        rxdp3->Buffer1_ptr = *temp1;
      }
      else {
        #line 6790 
        *skb = netdev_alloc_skb(dev,(unsigned int)size);
        #line 6791 
        if (*skb == (struct sk_buff *)0) {
          #line 6792 
          if (debug_level > 1) 
                               #line 6792 
                               printk((char *)"\001",(char *)(& dev->name),(char *)"2 buf mode SKBs");
          #line 6796 
          (stats->mem_alloc_fail_cnt) ++;
          #line 6797 
          return -12;
        }
        #line 6799 
        stats->mem_allocated += (unsigned long long)(*skb)->truesize;
        #line 6800 
        *temp2 = pci_map_single(sp->pdev,(void *)(*skb)->data,
                       (unsigned long)(dev->mtu + 4U),2);
        #line 6800 
        rxdp3->Buffer2_ptr = pci_map_single(sp->pdev,(void *)(*skb)->data,
                       (unsigned long)(dev->mtu + 4U),2);
        #line 6804 
        if (pci_dma_mapping_error(sp->pdev,rxdp3->Buffer2_ptr) != 0) 
          #line 6805 
          goto memalloc_failed;
        #line 6806 
        *temp0 = pci_map_single(sp->pdev,ba->ba_0,40UL,2);
        #line 6806 
        rxdp3->Buffer0_ptr = pci_map_single(sp->pdev,ba->ba_0,40UL,2);
        #line 6809 
        if (pci_dma_mapping_error(sp->pdev,rxdp3->Buffer0_ptr) != 0) {
          #line 6811 
          pci_unmap_single(sp->pdev,rxdp3->Buffer2_ptr,(unsigned long)(dev->mtu + 4U),2);
          #line 6815 
          goto memalloc_failed;
        }
        #line 6817 
        rxdp->Host_Control = (unsigned long long)*skb;
        #line 6820 
        *temp1 = pci_map_single(sp->pdev,ba->ba_1,1UL,2);
        #line 6820 
        rxdp3->Buffer1_ptr = pci_map_single(sp->pdev,ba->ba_1,1UL,2);
        #line 6823 
        if (pci_dma_mapping_error(sp->pdev,rxdp3->Buffer1_ptr) != 0) {
          #line 6825 
          pci_unmap_single(sp->pdev,rxdp3->Buffer0_ptr,40UL,2);
          #line 6828 
          pci_unmap_single(sp->pdev,rxdp3->Buffer2_ptr,(unsigned long)(dev->mtu + 4U),2);
          #line 6832 
          goto memalloc_failed;
        }
      }
    }
  #line 6836 
  return 0;
  #line 6838 
  memalloc_failed: 
                   #line 6838 
  ;
  #line 6839 
  (stats->pci_map_fail_cnt) ++;
  #line 6840 
  stats->mem_freed += (unsigned long long)(*skb)->truesize;
  #line 6841 
  consume_skb(*skb);
  #line 6842 
  return -12;
}

#line 6845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void set_rxd_buffer_size(struct s2io_nic *sp, struct RxD_t *rxdp, int size)
{
  #line 6848 
  struct net_device *dev = sp->dev;
  #line 6849 
  if (sp->rxd_mode == 0) 
                         #line 6850 
                         rxdp->Control_2 = (unsigned long long)size << 48;
  else 
    #line 6851 
    if (sp->rxd_mode == 1) {
      #line 6852 
      rxdp->Control_2 = 11258999068426240ULL;
      #line 6853 
      rxdp->Control_2 |= 4294967296ULL;
      #line 6854 
      rxdp->Control_2 |= ((unsigned long long)dev->mtu + 4ULL) << 16;
    }
  #line 6856 
  return;
}

#line 6858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int rxd_owner_bit_reset(struct s2io_nic *sp)
{
  #line 6860 
  int i;
  #line 6860 
  int j;
  #line 6860 
  int k;
  #line 6860 
  int size;
  #line 6860 
  int blk_cnt = 0;
  #line 6861 
  struct config_param *config = & sp->config;
  #line 6862 
  struct mac_info *mac_control = & sp->mac_control;
  #line 6863 
  struct net_device *dev = sp->dev;
  #line 6864 
  struct RxD_t *rxdp = (struct RxD_t *)0;
  #line 6865 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 6866 
  struct buffAdd *ba = (struct buffAdd *)0;
  #line 6867 
  u64 temp0_64 = 0ULL;
  #line 6867 
  u64 temp1_64 = 0ULL;
  #line 6867 
  u64 temp2_64 = 0ULL;
  #line 6870 
  size = (int)(dev->mtu + 22U);
  #line 6872 
  if (sp->rxd_mode == 0) 
                         #line 6873 
                         size = size;
  else 
    #line 6874 
    if (sp->rxd_mode == 1) 
                           #line 6875 
                           size = (int)(dev->mtu + 171U);
  #line 6877 
  i = 0;
  #line 6877 
  while (config->rx_ring_num > (unsigned int)i) {
    {
      #line 6878 
      struct rx_ring_config *rx_cfg = & config->rx_cfg[i];
      #line 6879 
      struct ring_info *ring = & mac_control->rings[i];
      #line 6881 
      blk_cnt = (int)(rx_cfg->num_rxd / (unsigned int)(rxd_count[sp->rxd_mode] + 1));
      #line 6883 
      j = 0;
      #line 6883 
      while (j < blk_cnt) {
        #line 6884 
        k = 0;
        #line 6884 
        while (rxd_count[sp->rxd_mode] > k) {
          {
            #line 6885 
            rxdp = (struct RxD_t *)(ring->rx_blocks[j].rxds + (unsigned long)k)->virt_addr;
            #line 6886 
            if (sp->rxd_mode == 1) 
                                   #line 6887 
                                   ba = *(ring->ba + (unsigned long)j) + (unsigned long)k;
            #line 6888 
            if (set_rxd_buffer_pointer(sp,rxdp,ba,& skb,& temp0_64,& temp1_64,
                             & temp2_64,size) == -12) 
              #line 6893 
              return 0;
            #line 6896 
            set_rxd_buffer_size(sp,rxdp,size);
            #line 6897 
            ldv_inline_asm();
            #line 6899 
            rxdp->Control_1 |= 72057594037927936ULL;
          }
          #line 6884 
          k ++;
        }
        #line 6883 
        j ++;
      }
    }
    #line 6877 
    i ++;
  }
  #line 6903 
  return 0;
}

#line 6907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_add_isr(struct s2io_nic *sp)
{
  #line 6909 
  int ret = 0;
  #line 6910 
  struct net_device *dev = sp->dev;
  #line 6911 
  int err = 0;
  #line 6913 
  if ((unsigned int)sp->config.intr_type == 2U) 
                                                #line 6914 
                                                ret = s2io_enable_msi_x(sp);
  #line 6915 
  if (ret != 0) {
    #line 6916 
    if (debug_level >= 0) 
                          #line 6916 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 6917 
    sp->config.intr_type = (unsigned char)0U;
  }
  #line 6924 
  store_xmsi_data(sp);
  #line 6927 
  if ((unsigned int)sp->config.intr_type == 2U) {
    #line 6928 
    int i;
    #line 6928 
    int msix_rx_cnt = 0;
    #line 6930 
    i = 0;
    #line 6930 
    while (sp->num_entries > i) {
      #line 6931 
      if ((unsigned int)(sp->s2io_entries + (unsigned long)i)->in_use == 165U) {
        #line 6932 
        if ((unsigned int)(sp->s2io_entries + (unsigned long)i)->type == 2U) {
          #line 6934 
          snprintf((char *)(& sp->desc[i]),25UL,(char *)"%s:MSI-X-%d-RX",(char *)(& dev->name),i);
          #line 6938 
          err = cif_request_irq((sp->entries + (unsigned long)i)->vector,& s2io_msix_ring_handle,0UL,(char *)(& sp->desc[i]),(sp->s2io_entries + (unsigned long)i)->arg);
        }
        else 
          #line 6943 
          if ((unsigned int)(sp->s2io_entries + (unsigned long)i)->type == 1U) {
            #line 6945 
            snprintf((char *)(& sp->desc[i]),25UL,(char *)"%s:MSI-X-%d-TX",(char *)(& dev->name),i);
            #line 6949 
            err = cif_request_irq((sp->entries + (unsigned long)i)->vector,& s2io_msix_fifo_handle,0UL,(char *)(& sp->desc[i]),(sp->s2io_entries + (unsigned long)i)->arg);
          }
        #line 6957 
        if (sp->msix_info[i].addr == 0ULL || sp->msix_info[i].data == 0ULL) {
          #line 6959 
          if (debug_level >= 0) {
            #line 6959 
            ;
            #line 6959 
            ;
            #line 6959 
            printk((char *)"\001",(char *)(& sp->desc[i]),sp->msix_info[i].addr,(unsigned long long)__builtin_bswap32((unsigned int)sp->msix_info[i].data));
          }
        }
        else 
             #line 6967 
             msix_rx_cnt ++;
        #line 6968 
        if (err != 0) {
          #line 6969 
          remove_msix_isr(sp);
          #line 6971 
          if (debug_level >= 0) 
                                #line 6971 
                                printk((char *)"\001",(char *)(& dev->name),i);
          #line 6975 
          if (debug_level >= 0) 
                                #line 6975 
                                printk((char *)"\001",(char *)(& dev->name));
          #line 6978 
          sp->config.intr_type = (unsigned char)0U;
          #line 6979 
          break;
        }
        #line 6981 
        (sp->s2io_entries + (unsigned long)i)->in_use = (unsigned char)170U;
      }
      #line 6930 
      i ++;
    }
    #line 6985 
    if (err == 0) {
      #line 6986 
      msix_rx_cnt --;
      #line 6986 
      printk((char *)"\001",msix_rx_cnt);
      #line 6987 
      if (debug_level > 1) 
                           #line 6987 
                           printk((char *)"\001");
    }
  }
  #line 6991 
  if ((unsigned int)sp->config.intr_type == 0U) {
    #line 6992 
    err = cif_request_irq((sp->pdev)->irq,& s2io_isr,128UL,(char *)(& sp->name),(void *)dev);
    #line 6994 
    if (err != 0) {
      #line 6995 
      if (debug_level >= 0) 
                            #line 6995 
                            printk((char *)"\001",(char *)(& dev->name));
      #line 6997 
      return -1;
    }
  }
  #line 7000 
  return 0;
}

#line 7003  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_rem_isr(struct s2io_nic *sp)
{
  #line 7005 
  if ((unsigned int)sp->config.intr_type == 2U) 
                                                #line 7006 
                                                remove_msix_isr(sp); else 
                                                                    #line 7008 
                                                                    remove_inta_isr(sp);
  #line 7009 
  return;
}

#line 7011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void do_s2io_card_down(struct s2io_nic *sp, int do_io)
{
  #line 7016 
  struct config_param *config;
  #line 7013 
  int cnt = 0;
  #line 7014 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 7015 
  register u64 val64 = 0ULL;
  #line 7017 
  config = & sp->config;
  #line 7019 
  if (is_s2io_card_up(sp) == 0) 
                                #line 7020 
                                return;
  #line 7022 
  cif_del_timer_sync(& sp->alarm_timer);
  #line 7024 
  while (1) {
    #line 7024 
    if (! ((int)test_and_set_bit(0L,& sp->state) != 0)) 
                                                        #line 7024 
                                                        break;
    #line 7025 
    msleep(50U);
  }
  #line 7026 
  cif_clear_bit(1L,& sp->state);
  #line 7029 
  if ((unsigned int)sp->config.napi != 0U) {
    #line 7030 
    int off = 0;
    #line 7031 
    if ((unsigned int)config->intr_type == 2U) 
      #line 7032 
      while (sp->config.rx_ring_num > (unsigned int)off) {
        #line 7033 
        napi_disable(& sp->mac_control.rings[off].napi);
        #line 7032 
        off ++;
      }
    else 
         #line 7036 
         napi_disable(& sp->napi);
  }
  #line 7040 
  if (do_io != 0) 
                  #line 7041 
                  stop_nic(sp);
  #line 7043 
  s2io_rem_isr(sp);
  #line 7046 
  s2io_link(sp,1);
  #line 7049 
  while (do_io != 0) {
    #line 7057 
    rxd_owner_bit_reset(sp);
    #line 7059 
    val64 = readq((void *)(& bar0->adapter_status));
    #line 7060 
    if (verify_xena_quiescence(sp) != 0) {
      #line 7061 
      if (verify_pcc_quiescent(sp,sp->device_enabled_once) != 0) 
                                                                 #line 7062 
                                                                 break;
    }
    #line 7065 
    msleep(50U);
    #line 7066 
    cnt ++;
    #line 7067 
    if (cnt == 10) {
      #line 7068 
      if (debug_level >= 0) 
                            #line 7068 
                            printk((char *)"\001",val64);
      #line 7071 
      break;
    }
  }
  #line 7074 
  if (do_io != 0) 
                  #line 7075 
                  s2io_reset(sp);
  #line 7078 
  free_tx_buffers(sp);
  #line 7081 
  free_rx_buffers(sp);
  #line 7083 
  cif_clear_bit(0L,& sp->state);
  #line 7084 
  return;
}

#line 7086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_card_down(struct s2io_nic *sp)
{
  #line 7088 
  do_s2io_card_down(sp,1);
  #line 7089 
  return;
}

#line 7091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_card_up(struct s2io_nic *sp)
{
  #line 7093 
  int i;
  #line 7094 
  struct config_param *config;
  #line 7095 
  struct mac_info *mac_control;
  #line 7097 
  u16 interruptible;
  #line 7093 
  int ret = 0;
  #line 7096 
  struct net_device *dev = sp->dev;
  #line 7100 
  ret = init_nic(sp);
  #line 7101 
  if (ret != 0) {
    #line 7102 
    if (debug_level >= 0) 
                          #line 7102 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 7104 
    if (ret != -5) 
                   #line 7105 
                   s2io_reset(sp);
    #line 7106 
    return ret;
  }
  #line 7113 
  config = & sp->config;
  #line 7114 
  mac_control = & sp->mac_control;
  #line 7116 
  i = 0;
  #line 7116 
  while (config->rx_ring_num > (unsigned int)i) {
    {
      #line 7117 
      struct ring_info *ring = & mac_control->rings[i];
      #line 7119 
      ring->mtu = dev->mtu;
      #line 7120 
      ring->lro = (unsigned char)((dev->features & 32768ULL) != 0ULL);
      #line 7121 
      ret = fill_rx_buffers(sp,ring,1);
      #line 7122 
      if (ret != 0) {
        #line 7123 
        if (debug_level >= 0) 
                              #line 7123 
                              printk((char *)"\001",(char *)(& dev->name));
        #line 7125 
        s2io_reset(sp);
        #line 7126 
        free_rx_buffers(sp);
        #line 7127 
        return -12;
      }
      #line 7129 
      if (debug_level > 1) 
                           #line 7129 
                           printk((char *)"\001",i,ring->rx_bufs_left);
    }
    #line 7116 
    i ++;
  }
  #line 7134 
  if ((unsigned int)config->napi != 0U) 
    #line 7135 
    if ((unsigned int)config->intr_type == 2U) {
      #line 7136 
      i = 0;
      #line 7136 
      while (sp->config.rx_ring_num > (unsigned int)i) {
        #line 7137 
        napi_enable(& sp->mac_control.rings[i].napi);
        #line 7136 
        i ++;
      }
    }
    else 
         #line 7139 
         napi_enable(& sp->napi);
  #line 7144 
  if ((unsigned int)sp->promisc_flg != 0U) 
                                           #line 7145 
                                           sp->promisc_flg = (unsigned short)0U;
  #line 7146 
  if ((unsigned int)sp->m_cast_flg != 0U) {
    #line 7147 
    sp->m_cast_flg = (unsigned short)0U;
    #line 7148 
    sp->all_multi_pos = (unsigned short)0U;
  }
  #line 7152 
  s2io_set_multicast(dev);
  #line 7154 
  if ((dev->features & 32768ULL) != 0ULL) {
    #line 7156 
    sp->lro_max_aggr_per_sess = (unsigned short)(65535U / dev->mtu);
    #line 7158 
    if ((unsigned int)sp->lro_max_aggr_per_sess > lro_max_pkts) 
                                                                #line 7159 
                                                                sp->lro_max_aggr_per_sess = (unsigned short)lro_max_pkts;
  }
  #line 7163 
  if (start_nic(sp) != 0) {
    #line 7164 
    if (debug_level >= 0) 
                          #line 7164 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 7165 
    s2io_reset(sp);
    #line 7166 
    free_rx_buffers(sp);
    #line 7167 
    return -19;
  }
  #line 7171 
  if (s2io_add_isr(sp) != 0) {
    #line 7172 
    if ((unsigned int)sp->config.intr_type == 2U) 
                                                  #line 7173 
                                                  s2io_rem_isr(sp);
    #line 7174 
    s2io_reset(sp);
    #line 7175 
    free_rx_buffers(sp);
    #line 7176 
    return -19;
  }
  {
    #line 7179 
    struct lock_class_key __key;
    #line 7179 
    init_timer_key(& sp->alarm_timer,& s2io_alarm_handle,0U,(char *)"(&sp->alarm_timer)",& __key);
  }
  #line 7180 
  cif_mod_timer(& sp->alarm_timer,jiffies + 125UL);
  #line 7182 
  cif_set_bit(1L,& sp->state);
  #line 7185 
  en_dis_err_alarms(sp,(unsigned short)2047,1);
  #line 7186 
  if ((unsigned int)sp->config.intr_type != 0U) {
    #line 7187 
    interruptible = (unsigned short)17U;
    #line 7188 
    en_dis_able_nic_intrs(sp,(unsigned short)((int)interruptible),1);
  }
  else {
    #line 7190 
    interruptible = (unsigned short)528U;
    #line 7191 
    interruptible = (unsigned short)((unsigned int)interruptible | 1U);
    #line 7192 
    en_dis_able_nic_intrs(sp,(unsigned short)((int)interruptible),1);
  }
  #line 7195 
  return 0;
}

#line 7208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_restart_nic(struct work_struct *work)
{
  #line 7210 
  void *__mptr;
  #line 7210 
  __mptr = (void *)work;
  #line 7210 
  struct s2io_nic *sp = ((struct s2io_nic *)(__mptr + 18446744073709481416U));
  #line 7211 
  struct net_device *dev = sp->dev;
  #line 7213 
  rtnl_lock();
  #line 7215 
  if (! netif_running(dev)) 
                            #line 7216 
                            goto out_unlock;
  #line 7218 
  s2io_card_down(sp);
  #line 7219 
  if (s2io_card_up(sp) != 0) 
    #line 7220 
    if (debug_level >= 0) 
                          #line 7220 
                          printk((char *)"\001",(char *)(& dev->name));
  #line 7222 
  s2io_wake_all_tx_queue(sp);
  #line 7223 
  if (debug_level >= 0) 
                        #line 7223 
                        printk((char *)"\001",(char *)(& dev->name));
  #line 7224 
  out_unlock: 
              #line 7224 
  ;
  #line 7225 
  rtnl_unlock();
  #line 7226 
  return;
}

#line 7241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_tx_watchdog(struct net_device *dev)
{
  #line 7243 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 7244 
  struct swStat *swstats = & (sp->mac_control.stats_info)->sw_stat;
  #line 7246 
  if ((int)netif_carrier_ok(dev) != 0) {
    #line 7247 
    (swstats->watchdog_timer_cnt) ++;
    #line 7248 
    cif_schedule_work(& sp->rst_timer_task);
    #line 7249 
    (swstats->soft_reset_cnt) ++;
  }
  #line 7251 
  return;
}

#line 7270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int rx_osm_handler(struct ring_info *ring_data, struct RxD_t *rxdp)
{
  #line 7277 
  u16 l3_csum;
  #line 7277 
  u16 l4_csum;
  #line 7280 
  u8 err_mask;
  #line 7272 
  struct s2io_nic *sp = ring_data->nic;
  #line 7273 
  struct net_device *dev = ring_data->dev;
  #line 7274 
  struct sk_buff *skb = (struct sk_buff *)rxdp->Host_Control;
  #line 7276 
  int ring_no = ring_data->ring_no;
  #line 7278 
  unsigned long long err = rxdp->Control_1 & 4222124650659840ULL;
  #line 7279 
  struct lro *lro = lro;
  #line 7281 
  struct swStat *swstats = & (sp->mac_control.stats_info)->sw_stat;
  #line 7283 
  skb->__anonCompField_sk_buff_92.__anonCompField___anonunion_533_91.__anonCompField___anonstruct_534_90.dev = dev;
  #line 7285 
  if (err != 0ULL) {
    #line 7287 
    if ((err & 1ULL) != 0ULL) 
                              #line 7288 
                              (swstats->parity_err_cnt) ++;
    #line 7290 
    err_mask = (unsigned char)(err >> 48);
    #line 7291 
    switch ((int)err_mask) {
      #line 7292 
      case 1: 
              #line 7292 
      ;
      #line 7293 
      (swstats->rx_parity_err_cnt) ++;
      #line 7294 
      break;
      #line 7296 
      case 2: 
              #line 7296 
      ;
      #line 7297 
      (swstats->rx_abort_cnt) ++;
      #line 7298 
      break;
      #line 7300 
      case 3: 
              #line 7300 
      ;
      #line 7301 
      (swstats->rx_parity_abort_cnt) ++;
      #line 7302 
      break;
      #line 7304 
      case 4: 
              #line 7304 
      ;
      #line 7305 
      (swstats->rx_rda_fail_cnt) ++;
      #line 7306 
      break;
      #line 7308 
      case 5: 
              #line 7308 
      ;
      #line 7309 
      (swstats->rx_unkn_prot_cnt) ++;
      #line 7310 
      break;
      #line 7312 
      case 6: 
              #line 7312 
      ;
      #line 7313 
      (swstats->rx_fcs_err_cnt) ++;
      #line 7314 
      break;
      #line 7316 
      case 7: 
              #line 7316 
      ;
      #line 7317 
      (swstats->rx_buf_size_err_cnt) ++;
      #line 7318 
      break;
      #line 7320 
      case 8: 
              #line 7320 
      ;
      #line 7321 
      (swstats->rx_rxd_corrupt_cnt) ++;
      #line 7322 
      break;
      #line 7324 
      case 15: 
               #line 7324 
      ;
      #line 7325 
      (swstats->rx_unkn_err_cnt) ++;
      #line 7326 
      break;
    }
    #line 7335 
    if ((unsigned int)err_mask != 5U) {
      #line 7336 
      if (debug_level >= 0) 
                            #line 7336 
                            printk((char *)"\001",(char *)(& dev->name),(int)err_mask);
      #line 7338 
      (dev->stats.rx_crc_errors) ++;
      #line 7340 
      swstats->mem_freed += (unsigned long long)skb->truesize;
      #line 7341 
      consume_skb(skb);
      #line 7342 
      ring_data->rx_bufs_left += 4294967295U;
      #line 7343 
      rxdp->Host_Control = 0ULL;
      #line 7344 
      return 0;
    }
  }
  #line 7348 
  rxdp->Host_Control = 0ULL;
  #line 7349 
  if (sp->rxd_mode == 0) {
    #line 7350 
    int len = (int)((unsigned short)(rxdp->Control_2 >> 48)) & 16383;
    #line 7352 
    skb_put(skb,(unsigned int)len);
  }
  else 
    #line 7353 
    if (sp->rxd_mode == 1) {
      #line 7354 
      int get_block = (int)ring_data->rx_curr_get_info.block_index;
      #line 7355 
      int get_off = (int)ring_data->rx_curr_get_info.offset;
      #line 7356 
      int buf0_len = (int)((unsigned char)(rxdp->Control_2 >> 48));
      #line 7357 
      int buf2_len = (int)((unsigned short)(rxdp->Control_2 >> 16));
      #line 7358 
      unsigned char *buff = skb_push(skb,(unsigned int)buf0_len);
      #line 7360 
      struct buffAdd *ba = *(ring_data->ba + (unsigned long)get_block) + (unsigned long)get_off;
      #line 7361 
      memcpy((void *)buff,ba->ba_0,(unsigned long)buf0_len);
      #line 7362 
      skb_put(skb,(unsigned int)buf2_len);
    }
  #line 7365 
  if (((rxdp->Control_1 & 12884901888ULL) != 0ULL && ((unsigned int)ring_data->lro == 0U || (rxdp->Control_1 & 17179869184ULL) == 0ULL)) && (dev->features & 549755813888ULL) != 0ULL) {
    #line 7369 
    l3_csum = (unsigned short)(rxdp->Control_1 >> 16);
    #line 7370 
    l4_csum = (unsigned short)rxdp->Control_1;
    #line 7371 
    if ((unsigned int)l3_csum == 65535U && (unsigned int)l4_csum == 65535U) {
      #line 7377 
      skb->ip_summed = (unsigned char)1U;
      #line 7378 
      if ((unsigned int)ring_data->lro != 0U) {
        #line 7380 
        u8 *tcp;
        #line 7379 
        u32 tcp_len = 0U;
        #line 7381 
        int ret = 0;
        #line 7383 
        ret = s2io_club_tcp_session(ring_data,skb->data,& tcp,& tcp_len,& lro,rxdp,sp);
        #line 7387 
        switch (ret) {
          #line 7388 
          case 3: 
                  #line 7388 
          ;
          #line 7389 
          lro->parent = skb;
          #line 7390 
          goto aggregate;
          #line 7391 
          case 1: 
                  #line 7391 
          ;
          #line 7392 
          lro_append_pkt(sp,lro,skb,tcp_len);
          #line 7393 
          goto aggregate;
          #line 7394 
          case 4: 
                  #line 7394 
          ;
          #line 7395 
          lro_append_pkt(sp,lro,skb,tcp_len);
          #line 7396 
          queue_rx_frame(lro->parent,(unsigned short)((int)lro->vlan_tag));
          #line 7398 
          clear_lro_session(lro);
          #line 7399 
          (swstats->flush_max_pkts) ++;
          #line 7400 
          goto aggregate;
          #line 7401 
          case 2: 
                  #line 7401 
          ;
          #line 7402 
          (lro->parent)->data_len = (unsigned int)lro->frags_len;
          #line 7403 
          (swstats->sending_both) ++;
          #line 7404 
          queue_rx_frame(lro->parent,(unsigned short)((int)lro->vlan_tag));
          #line 7406 
          clear_lro_session(lro);
          #line 7407 
          goto send_up;
          #line 7408 
          case 0: 
                  #line 7408 
          ;
          #line 7409 
          case -1: 
                   #line 7409 
          ;
          #line 7410 
          case 5: 
                  #line 7410 
          ;
          #line 7414 
          break;
          #line 7415 
          default: 
                   #line 7415 
          ;
          #line 7416 
          if (debug_level >= 0) 
                                #line 7416 
                                printk((char *)"\001",(char *)"rx_osm_handler");
          #line 7420 
          ldv_inline_asm();
          #line 7421 
          ldv_inline_asm();
          #line 7422 
          ldv_inline_asm();
          #line 7419 
          ;
        }
      }
    }
    else 
         #line 7427 
         skb_checksum_none_assert(skb);
  }
  else 
       #line 7430 
       skb_checksum_none_assert(skb);
  #line 7432 
  swstats->mem_freed += (unsigned long long)skb->truesize;
  #line 7433 
  send_up: 
           #line 7433 
  ;
  #line 7434 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)ring_no)));
  #line 7435 
  queue_rx_frame(skb,(unsigned short)((int)((unsigned short)rxdp->Control_2)));
  #line 7436 
  aggregate: 
             #line 7436 
  ;
  #line 7437 
  sp->mac_control.rings[ring_no].rx_bufs_left += 4294967295U;
  #line 7438 
  return 0;
}

#line 7454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_link(struct s2io_nic *sp, int link)
{
  #line 7456 
  struct net_device *dev = sp->dev;
  #line 7457 
  struct swStat *swstats = & (sp->mac_control.stats_info)->sw_stat;
  #line 7459 
  if ((int)sp->last_link_state != link) {
    #line 7460 
    init_tti(sp,link);
    #line 7461 
    if (link == 1) {
      #line 7462 
      if (debug_level >= 0) 
                            #line 7462 
                            printk((char *)"\001",(char *)(& dev->name));
      #line 7463 
      s2io_stop_all_tx_queue(sp);
      #line 7464 
      netif_carrier_off(dev);
      #line 7465 
      if (swstats->link_up_cnt != 0ULL) 
                                        #line 7466 
                                        swstats->link_up_time = (unsigned long long)jiffies - sp->start_time;
      #line 7468 
      (swstats->link_down_cnt) ++;
    }
    else {
      #line 7470 
      if (debug_level >= 0) 
                            #line 7470 
                            printk((char *)"\001",(char *)(& dev->name));
      #line 7471 
      if (swstats->link_down_cnt != 0ULL) 
                                          #line 7472 
                                          swstats->link_down_time = (unsigned long long)jiffies - sp->start_time;
      #line 7474 
      (swstats->link_up_cnt) ++;
      #line 7475 
      netif_carrier_on(dev);
      #line 7476 
      s2io_wake_all_tx_queue(sp);
    }
  }
  #line 7479 
  sp->last_link_state = (unsigned short)link;
  #line 7480 
  sp->start_time = (unsigned long long)jiffies;
  #line 7481 
  return;
}

#line 7494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_init_pci(struct s2io_nic *sp)
{
  #line 7496 
  u16 pci_cmd = (unsigned short)0U;
  #line 7496 
  u16 pcix_cmd = (unsigned short)0U;
  #line 7499 
  pci_read_config_word(sp->pdev,98,& pcix_cmd);
  #line 7501 
  pci_write_config_word(sp->pdev,98,(unsigned short)((int)((unsigned int)pcix_cmd | 1U)));
  #line 7503 
  pci_read_config_word(sp->pdev,98,& pcix_cmd);
  #line 7507 
  pci_read_config_word(sp->pdev,4,& pci_cmd);
  #line 7508 
  pci_write_config_word(sp->pdev,4,(unsigned short)((int)((unsigned int)pci_cmd | 64U)));
  #line 7510 
  pci_read_config_word(sp->pdev,4,& pci_cmd);
  #line 7511 
  return;
}

#line 7513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_verify_parm(struct pci_dev *pdev, u8 *dev_intr_type, u8 *dev_multiq)
{
  #line 7516 
  int i;
  #line 7518 
  if (tx_fifo_num + 4294967295U > 7U) {
    #line 7519 
    if (debug_level >= 0) 
                          #line 7519 
                          printk((char *)"\001",tx_fifo_num);
    #line 7522 
    if (tx_fifo_num == 0U) 
                           #line 7523 
                           tx_fifo_num = 1U; else 
                                                  #line 7525 
                                                  tx_fifo_num = 8U;
    #line 7527 
    if (debug_level >= 0) 
                          #line 7527 
                          printk((char *)"\001",tx_fifo_num);
  }
  #line 7530 
  if (multiq != 0U) 
                    #line 7531 
                    *dev_multiq = (unsigned char)multiq;
  #line 7533 
  if (tx_steering_type != 0U && tx_fifo_num == 1U) {
    #line 7534 
    if (tx_steering_type != 2U) 
      #line 7535 
      if (debug_level >= 0) 
                            #line 7535 
                            printk((char *)"\001");
    #line 7538 
    tx_steering_type = 0U;
  }
  #line 7541 
  if (tx_steering_type > 2U) {
    #line 7543 
    if (debug_level >= 0) 
                          #line 7543 
                          printk((char *)"\001");
    #line 7545 
    if (debug_level >= 0) 
                          #line 7545 
                          printk((char *)"\001");
    #line 7546 
    tx_steering_type = 0U;
  }
  #line 7549 
  if (rx_ring_num > 8U) {
    #line 7550 
    if (debug_level >= 0) 
                          #line 7550 
                          printk((char *)"\001");
    #line 7552 
    if (debug_level >= 0) 
                          #line 7552 
                          printk((char *)"\001",8);
    #line 7554 
    rx_ring_num = 8U;
  }
  #line 7557 
  if ((unsigned int)*dev_intr_type != 0U && (unsigned int)*dev_intr_type != 2U) {
    #line 7558 
    if (debug_level >= 0) 
                          #line 7558 
                          printk((char *)"\001");
    #line 7560 
    *dev_intr_type = (unsigned char)0U;
  }
  #line 7563 
  if ((unsigned int)*dev_intr_type == 2U && ((unsigned int)pdev->device != 22322U && (unsigned int)pdev->device != 22578U)) {
    #line 7566 
    if (debug_level >= 0) 
                          #line 7566 
                          printk((char *)"\001");
    #line 7568 
    *dev_intr_type = (unsigned char)0U;
  }
  #line 7571 
  if (rx_ring_mode + 4294967295U > 1U) {
    #line 7572 
    if (debug_level >= 0) 
                          #line 7572 
                          printk((char *)"\001");
    #line 7573 
    if (debug_level >= 0) 
                          #line 7573 
                          printk((char *)"\001");
    #line 7574 
    rx_ring_mode = 1U;
  }
  #line 7577 
  i = 0;
  #line 7577 
  while (i <= 7) {
    #line 7578 
    if (rx_ring_sz[i] > 150U) {
      #line 7579 
      if (debug_level >= 0) 
                            #line 7579 
                            printk((char *)"\001",150);
      #line 7582 
      rx_ring_sz[i] = 150U;
    }
    #line 7577 
    i ++;
  }
  #line 7585 
  return 0;
}

#line 7597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int rts_ds_steer(struct s2io_nic *nic, u8 ds_codepoint, u8 ring)
{
  #line 7599 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)nic->bar0;
  #line 7600 
  register u64 val64 = 0ULL;
  #line 7602 
  if ((unsigned int)ds_codepoint > 63U) 
                                        #line 7603 
                                        return -1;
  #line 7605 
  val64 = (unsigned long long)ring << 56;
  #line 7606 
  writeq(val64,(void *)(& bar0->rts_ds_mem_data));
  #line 7608 
  val64 = ((unsigned long long)ds_codepoint << 32) | 72339069014638592ULL;
  #line 7612 
  writeq(val64,(void *)(& bar0->rts_ds_mem_ctrl));
  #line 7614 
  return wait_for_cmd_complete((void *)(& bar0->rts_ds_mem_ctrl),
                            281474976710656ULL,1);
}

#line 7619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static struct net_device_ops s2io_netdev_ops = {.ndo_open = & s2io_open, .ndo_stop = & s2io_close, .ndo_start_xmit = & s2io_xmit, .ndo_set_rx_mode = & s2io_set_multicast, .ndo_set_mac_address = & s2io_set_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & s2io_ioctl, .ndo_change_mtu = & s2io_change_mtu, .ndo_tx_timeout = & s2io_tx_watchdog, .ndo_get_stats = & s2io_get_stats, .ndo_poll_controller = & s2io_netpoll, .ndo_set_features = & s2io_set_features};
#line 7651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_init_nic(struct pci_dev *pdev, struct pci_device_id *pre)
{
  #line 7653 
  struct s2io_nic *sp;
  #line 7654 
  struct net_device *dev;
  #line 7655 
  int i;
  #line 7655 
  int j;
  #line 7655 
  int ret;
  #line 7657 
  u32 mac_up;
  #line 7657 
  u32 mac_down;
  #line 7660 
  u16 subid;
  #line 7661 
  struct config_param *config;
  #line 7662 
  struct mac_info *mac_control;
  #line 7663 
  int mode;
  #line 7656 
  int dma_flag = 0;
  #line 7658 
  u64 val64 = 0ULL;
  #line 7658 
  u64 tmp64 = 0ULL;
  #line 7659 
  struct XENA_dev_config *bar0 = (struct XENA_dev_config *)0;
  #line 7664 
  u8 dev_intr_type = (unsigned char)intr_type;
  #line 7665 
  u8 dev_multiq = (unsigned char)0U;
  #line 7667 
  ret = s2io_verify_parm(pdev,& dev_intr_type,& dev_multiq);
  #line 7668 
  if (ret != 0) 
                #line 7669 
                return ret;
  #line 7671 
  ret = pci_enable_device(pdev);
  #line 7672 
  if (ret != 0) {
    #line 7673 
    if (debug_level >= 0) 
                          #line 7673 
                          printk((char *)"\001",(char *)"s2io_init_nic");
    #line 7675 
    return ret;
  }
  #line 7678 
  if (pci_set_dma_mask(pdev,18446744073709551615ULL) == 0) {
    #line 7679 
    if (debug_level > 0) 
                         #line 7679 
                         printk((char *)"\001",(char *)"s2io_init_nic");
    #line 7680 
    dma_flag = 1;
    #line 7681 
    if (pci_set_consistent_dma_mask(pdev,18446744073709551615ULL) != 0) {
      #line 7682 
      if (debug_level >= 0) 
                            #line 7682 
                            printk((char *)"\001");
      #line 7685 
      pci_disable_device(pdev);
      #line 7686 
      return -12;
    }
  }
  else {
    #line 7688 
    if (pci_set_dma_mask(pdev,4294967295ULL) == 0) {
      #line 7689 
      if (debug_level > 0) 
                           #line 7689 
                           printk((char *)"\001",(char *)"s2io_init_nic");
    }
    else {
      #line 7691 
      pci_disable_device(pdev);
      #line 7692 
      return -12;
    }
  }
  #line 7694 
  ret = pci_request_regions(pdev,(char *)(& s2io_driver_name));
  #line 7695 
  if (ret != 0) {
    #line 7696 
    if (debug_level >= 0) 
                          #line 7696 
                          printk((char *)"\001",(char *)"s2io_init_nic",ret);
    #line 7698 
    pci_disable_device(pdev);
    #line 7699 
    return -19;
  }
  #line 7701 
  if ((unsigned int)dev_multiq != 0U) 
                                      #line 7702 
                                      dev = cif_alloc_etherdev_mqs(72384,tx_fifo_num,tx_fifo_num); else 
                                                                    #line 7704 
                                                                    dev = cif_alloc_etherdev_mqs(72384,1U,1U);
  #line 7705 
  if (dev == (struct net_device *)0) {
    #line 7706 
    pci_disable_device(pdev);
    #line 7707 
    pci_release_regions(pdev);
    #line 7708 
    return -19;
  }
  #line 7711 
  pci_set_master(pdev);
  #line 7712 
  pci_set_drvdata(pdev,(void *)dev);
  #line 7713 
  dev->dev.parent = & pdev->dev;
  #line 7716 
  sp = (struct s2io_nic *)netdev_priv(dev);
  #line 7717 
  sp->dev = dev;
  #line 7718 
  sp->pdev = pdev;
  #line 7719 
  sp->high_dma_flag = dma_flag;
  #line 7720 
  sp->device_enabled_once = 0;
  #line 7721 
  if (rx_ring_mode == 1U) 
                          #line 7722 
                          sp->rxd_mode = 0;
  #line 7723 
  if (rx_ring_mode == 2U) 
                          #line 7724 
                          sp->rxd_mode = 1;
  #line 7726 
  sp->config.intr_type = dev_intr_type;
  #line 7728 
  if ((unsigned int)pdev->device == 22322U || (unsigned int)pdev->device == 22578U) 
    #line 7730 
    sp->device_type = (unsigned char)2U; else 
                                              #line 7732 
                                              sp->device_type = (unsigned char)1U;
  #line 7736 
  s2io_init_pci(sp);
  #line 7745 
  config = & sp->config;
  #line 7746 
  mac_control = & sp->mac_control;
  #line 7748 
  config->napi = (unsigned char)napi;
  #line 7749 
  config->tx_steering_type = (unsigned char)tx_steering_type;
  #line 7752 
  if ((unsigned int)config->tx_steering_type == 1U) 
                                                    #line 7753 
                                                    config->tx_fifo_num = 8U; else 
                                                                    #line 7755 
                                                                    config->tx_fifo_num = tx_fifo_num;
  #line 7758 
  if (config->tx_fifo_num <= 4U) {
    #line 7759 
    if (config->tx_fifo_num == 1U) 
                                   #line 7760 
                                   sp->total_tcp_fifos = (unsigned char)1U; else 
                                                                    #line 7762 
                                                                    sp->total_tcp_fifos = (unsigned char)((unsigned int)((unsigned char)config->tx_fifo_num) + 255U);
    #line 7763 
    sp->udp_fifo_idx = (unsigned char)((unsigned int)((unsigned char)config->tx_fifo_num) + 255U);
    #line 7764 
    sp->total_udp_fifos = (unsigned char)1U;
    #line 7765 
    sp->other_fifo_idx = (unsigned char)((unsigned int)sp->total_tcp_fifos + 255U);
  }
  else {
    #line 7767 
    sp->total_tcp_fifos = (unsigned char)((unsigned int)((unsigned char)tx_fifo_num) + 253U);
    #line 7769 
    sp->udp_fifo_idx = sp->total_tcp_fifos;
    #line 7770 
    sp->total_udp_fifos = (unsigned char)2U;
    #line 7771 
    sp->other_fifo_idx = (unsigned char)((unsigned int)sp->udp_fifo_idx + 2U);
  }
  #line 7774 
  config->multiq = dev_multiq;
  #line 7775 
  i = 0;
  #line 7775 
  while (config->tx_fifo_num > (unsigned int)i) {
    {
      #line 7776 
      struct tx_fifo_config *tx_cfg = & config->tx_cfg[i];
      #line 7778 
      tx_cfg->fifo_len = tx_fifo_len[i];
      #line 7779 
      tx_cfg->fifo_priority = (unsigned char)i;
    }
    #line 7775 
    i ++;
  }
  #line 7783 
  i = 0;
  #line 7783 
  while (i <= 7) {
    #line 7784 
    config->fifo_mapping[i] = (unsigned char)fifo_map[config->tx_fifo_num + 4294967295U][i];
    #line 7783 
    i ++;
  }
  #line 7787 
  i = 0;
  #line 7787 
  while (config->tx_fifo_num > (unsigned int)i) {
    #line 7788 
    sp->fifo_selector[i] = fifo_selector[i];
    #line 7787 
    i ++;
  }
  #line 7791 
  config->tx_intr_type = 131072ULL;
  #line 7792 
  i = 0;
  #line 7792 
  while (config->tx_fifo_num > (unsigned int)i) {
    {
      #line 7793 
      struct tx_fifo_config *tx_cfg_0 = & config->tx_cfg[i];
      #line 7795 
      tx_cfg_0->f_no_snoop = (unsigned char)3U;
      #line 7796 
      if (tx_cfg_0->fifo_len <= 64U) {
        #line 7797 
        config->tx_intr_type = 65536ULL;
        #line 7798 
        break;
      }
    }
    #line 7792 
    i ++;
  }
  #line 7802 
  config->max_txds = 19U;
  #line 7805 
  config->rx_ring_num = rx_ring_num;
  #line 7806 
  i = 0;
  #line 7806 
  while (config->rx_ring_num > (unsigned int)i) {
    {
      #line 7807 
      struct rx_ring_config *rx_cfg = & config->rx_cfg[i];
      #line 7808 
      struct ring_info *ring = & mac_control->rings[i];
      #line 7810 
      rx_cfg->num_rxd = rx_ring_sz[i] * (unsigned int)(rxd_count[sp->rxd_mode] + 1);
      #line 7811 
      rx_cfg->ring_priority = (unsigned char)i;
      #line 7812 
      ring->rx_bufs_left = 0U;
      #line 7813 
      ring->rxd_mode = sp->rxd_mode;
      #line 7814 
      ring->rxd_count = rxd_count[sp->rxd_mode];
      #line 7815 
      ring->pdev = sp->pdev;
      #line 7816 
      ring->dev = sp->dev;
    }
    #line 7806 
    i ++;
  }
  #line 7819 
  i = 0;
  #line 7819 
  while ((unsigned int)i < rx_ring_num) {
    {
      #line 7820 
      struct rx_ring_config *rx_cfg_0 = & config->rx_cfg[i];
      #line 7822 
      rx_cfg_0->ring_org = (unsigned char)1U;
      #line 7823 
      rx_cfg_0->f_no_snoop = (unsigned char)3U;
    }
    #line 7819 
    i ++;
  }
  #line 7827 
  mac_control->rmac_pause_time = (unsigned short)rmac_pause_time;
  #line 7828 
  mac_control->mc_pause_threshold_q0q3 = (unsigned short)mc_pause_threshold_q0q3;
  #line 7829 
  mac_control->mc_pause_threshold_q4q7 = (unsigned short)mc_pause_threshold_q4q7;
  #line 7833 
  if (init_shared_mem(sp) != 0) {
    #line 7834 
    if (debug_level >= 0) 
                          #line 7834 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 7835 
    ret = -12;
    #line 7836 
    goto mem_alloc_failed;
  }
  #line 7839 
  sp->bar0 = pci_ioremap_bar(pdev,0);
  #line 7840 
  if (sp->bar0 == (void *)0) {
    #line 7841 
    if (debug_level >= 0) 
                          #line 7841 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 7843 
    ret = -12;
    #line 7844 
    goto bar0_remap_failed;
  }
  #line 7847 
  sp->bar1 = pci_ioremap_bar(pdev,2);
  #line 7848 
  if (sp->bar1 == (void *)0) {
    #line 7849 
    if (debug_level >= 0) 
                          #line 7849 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 7851 
    ret = -12;
    #line 7852 
    goto bar1_remap_failed;
  }
  #line 7856 
  j = 0;
  #line 7856 
  while (j <= 7) {
    #line 7857 
    mac_control->tx_FIFO_start[j] = (struct TxFIFO_element *)(sp->bar1 + (unsigned long)(j * 131072));
    #line 7856 
    j ++;
  }
  #line 7861 
  dev->netdev_ops = & s2io_netdev_ops;
  #line 7862 
  dev->ethtool_ops = & netdev_ethtool_ops;
  #line 7863 
  dev->hw_features = 549756960771ULL;
  #line 7866 
  dev->features = (dev->features | dev->hw_features) | 384ULL;
  #line 7868 
  if (sp->high_dma_flag == 1) 
                              #line 7869 
                              dev->features |= 32ULL;
  #line 7870 
  dev->watchdog_timeo = 3750;
  {
    #line 7871 
    struct lock_class_key __key;
    #line 7871 
    __init_work(& sp->rst_timer_task,0);
    #line 7871 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 7871 
    sp->rst_timer_task.data = __constr_expr_44;
    #line 7871 
    lockdep_init_map(& sp->rst_timer_task.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 7871 
    INIT_LIST_HEAD(& sp->rst_timer_task.entry);
    #line 7871 
    sp->rst_timer_task.func = & s2io_restart_nic;
  }
  {
    #line 7872 
    struct lock_class_key __key_0;
    #line 7872 
    __init_work(& sp->set_link_task,0);
    #line 7872 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 7872 
    sp->set_link_task.data = __constr_expr_45;
    #line 7872 
    lockdep_init_map(& sp->set_link_task.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 7872 
    INIT_LIST_HEAD(& sp->set_link_task.entry);
    #line 7872 
    sp->set_link_task.func = & s2io_set_link;
  }
  #line 7874 
  pci_save_state(sp->pdev);
  #line 7877 
  if (s2io_set_swapper(sp) != 0) {
    #line 7878 
    if (debug_level >= 0) 
                          #line 7878 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 7880 
    ret = -11;
    #line 7881 
    goto set_swap_failed;
  }
  #line 7885 
  if (((int)sp->device_type & 2) != 0) {
    #line 7886 
    mode = s2io_verify_pci_mode(sp);
    #line 7887 
    if (mode < 0) {
      #line 7888 
      if (debug_level >= 0) 
                            #line 7888 
                            printk((char *)"\001",(char *)"s2io_init_nic");
      #line 7890 
      ret = -57;
      #line 7891 
      goto set_swap_failed;
    }
  }
  #line 7895 
  if ((unsigned int)sp->config.intr_type == 2U) {
    #line 7896 
    sp->num_entries = (int)(config->rx_ring_num + 1U);
    #line 7897 
    ret = s2io_enable_msi_x(sp);
    #line 7899 
    if (ret == 0) {
      #line 7900 
      ret = s2io_test_msi(sp);
      #line 7902 
      remove_msix_isr(sp);
    }
    #line 7904 
    if (ret != 0) {
      #line 7906 
      if (debug_level >= 0) 
                            #line 7906 
                            printk((char *)"\001");
      #line 7908 
      sp->config.intr_type = (unsigned char)0U;
    }
  }
  #line 7912 
  if ((unsigned int)config->intr_type == 2U) {
    #line 7913 
    i = 0;
    #line 7913 
    while (config->rx_ring_num > (unsigned int)i) {
      {
        #line 7914 
        struct ring_info *ring_0 = & mac_control->rings[i];
        #line 7916 
        netif_napi_add(dev,& ring_0->napi,& s2io_poll_msix,64);
      }
      #line 7913 
      i ++;
    }
  }
  else 
       #line 7919 
       netif_napi_add(dev,& sp->napi,& s2io_poll_inta,64);
  #line 7923 
  if (((int)sp->device_type & 1) != 0) {
    #line 7928 
    fix_mac_address(sp);
    #line 7929 
    s2io_reset(sp);
  }
  #line 7936 
  bar0 = (struct XENA_dev_config *)sp->bar0;
  #line 7937 
  val64 = 281474976710656ULL;
  #line 7939 
  writeq(val64,(void *)(& bar0->rmac_addr_cmd_mem));
  #line 7940 
  wait_for_cmd_complete((void *)(& bar0->rmac_addr_cmd_mem),281474976710656ULL,1);
  #line 7943 
  tmp64 = readq((void *)(& bar0->rmac_addr_data0_mem));
  #line 7944 
  mac_down = (unsigned int)tmp64;
  #line 7945 
  mac_up = (unsigned int)(tmp64 >> 32);
  #line 7947 
  sp->def_mac_addr[0].mac_addr[3] = (unsigned char)mac_up;
  #line 7948 
  sp->def_mac_addr[0].mac_addr[2] = (unsigned char)(mac_up >> 8);
  #line 7949 
  sp->def_mac_addr[0].mac_addr[1] = (unsigned char)(mac_up >> 16);
  #line 7950 
  sp->def_mac_addr[0].mac_addr[0] = (unsigned char)(mac_up >> 24);
  #line 7951 
  sp->def_mac_addr[0].mac_addr[5] = (unsigned char)(mac_down >> 16);
  #line 7952 
  sp->def_mac_addr[0].mac_addr[4] = (unsigned char)(mac_down >> 24);
  #line 7955 
  dev->addr_len = (unsigned char)6U;
  #line 7956 
  memcpy((void *)dev->dev_addr,(void *)(& sp->def_mac_addr),6UL);
  #line 7959 
  if ((unsigned int)sp->device_type == 1U) {
    #line 7960 
    config->max_mc_addr = 64;
    #line 7961 
    config->max_mac_addr = 16;
    #line 7962 
    config->mc_start_offset = 16;
  }
  else 
    #line 7963 
    if ((unsigned int)sp->device_type == 2U) {
      #line 7964 
      config->max_mc_addr = 256;
      #line 7965 
      config->max_mac_addr = 64;
      #line 7966 
      config->mc_start_offset = 64;
    }
  #line 7970 
  dev->min_mtu = 46U;
  #line 7971 
  dev->max_mtu = 9600U;
  #line 7974 
  do_s2io_store_unicast_mc(sp);
  #line 7977 
  if ((unsigned int)sp->device_type == 2U && (unsigned int)config->intr_type == 2U) 
    #line 7979 
    sp->num_entries = (int)(config->rx_ring_num + 1U);
  #line 7982 
  store_xmsi_data(sp);
  #line 7984 
  s2io_reset(sp);
  #line 7990 
  sp->state = 0UL;
  #line 7993 
  i = 0;
  #line 7993 
  while (sp->config.tx_fifo_num > (unsigned int)i) {
    {
      #line 7994 
      struct fifo_info *fifo = & mac_control->fifos[i];
      #line 7996 
      spinlock_check(& fifo->tx_lock);
      {
        #line 7996 
        struct lock_class_key __key_1;
        #line 7996 
        __raw_spin_lock_init(& fifo->tx_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&fifo->tx_lock)->rlock",& __key_1);
      }
    }
    #line 7993 
    i ++;
  }
  #line 8003 
  subid = (sp->pdev)->subsystem_device;
  #line 8004 
  if (((int)subid & 255) > 6) {
    #line 8005 
    val64 = readq((void *)(& bar0->gpio_control));
    #line 8006 
    val64 |= 140737488355328ULL;
    #line 8007 
    writeq(val64,(void *)(& bar0->gpio_control));
    #line 8008 
    val64 = 293019865982173184ULL;
    #line 8009 
    writeq(val64,(void *)bar0 + 9984U);
    #line 8010 
    val64 = readq((void *)(& bar0->gpio_control));
  }
  #line 8013 
  sp->rx_csum = 1;
  #line 8015 
  if (cif_register_netdev(dev) != 0) {
    #line 8016 
    if (debug_level >= 0) 
                          #line 8016 
                          printk((char *)"\001");
    #line 8017 
    ret = -19;
    #line 8018 
    goto register_failed;
  }
  #line 8020 
  s2io_vpd_read(sp);
  #line 8021 
  if (debug_level >= 0) 
                        #line 8021 
                        printk((char *)"\001");
  #line 8022 
  if (debug_level >= 0) 
                        #line 8022 
                        printk((char *)"\001",(char *)(& dev->name),(u8 *)(& sp->product_name),(int)pdev->revision);
  #line 8024 
  if (debug_level >= 0) 
                        #line 8024 
                        printk((char *)"\001",(char *)(& dev->name),(char *)(& s2io_driver_version));
  #line 8026 
  if (debug_level >= 0) 
                        #line 8026 
                        printk((char *)"\001",(char *)(& dev->name),dev->dev_addr);
  #line 8027 
  if (debug_level >= 0) 
                        #line 8027 
                        printk((char *)"\001",(u8 *)(& sp->serial_num));
  #line 8028 
  if (((int)sp->device_type & 2) != 0) {
    #line 8029 
    mode = s2io_print_pci_mode(sp);
    #line 8030 
    if (mode < 0) {
      #line 8031 
      ret = -57;
      #line 8032 
      cif_unregister_netdev(dev);
      #line 8033 
      goto set_swap_failed;
    }
  }
  #line 8036 
  switch (sp->rxd_mode) {
    #line 8037 
    case 0: 
            #line 8037 
    ;
    #line 8038 
    if (debug_level >= 0) 
                          #line 8038 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 8040 
    break;
    #line 8041 
    case 1: 
            #line 8041 
    ;
    #line 8042 
    if (debug_level >= 0) 
                          #line 8042 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 8044 
    break;
  }
  #line 8047 
  switch ((int)sp->config.napi) {
    #line 8048 
    case 0: 
            #line 8048 
    ;
    #line 8049 
    if (debug_level >= 0) 
                          #line 8049 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 8050 
    break;
    #line 8051 
    case 1: 
            #line 8051 
    ;
    #line 8052 
    if (debug_level >= 0) 
                          #line 8052 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 8053 
    break;
  }
  #line 8056 
  if (debug_level >= 0) 
                        #line 8056 
                        printk((char *)"\001",(char *)(& dev->name),sp->config.tx_fifo_num);
  #line 8059 
  if (debug_level >= 0) 
                        #line 8059 
                        printk((char *)"\001",(char *)(& dev->name),sp->config.rx_ring_num);
  #line 8062 
  switch ((int)sp->config.intr_type) {
    #line 8063 
    case 0: 
            #line 8063 
    ;
    #line 8064 
    if (debug_level >= 0) 
                          #line 8064 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 8065 
    break;
    #line 8066 
    case 2: 
            #line 8066 
    ;
    #line 8067 
    if (debug_level >= 0) 
                          #line 8067 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 8068 
    break;
  }
  #line 8070 
  if ((unsigned int)sp->config.multiq != 0U) {
    #line 8071 
    i = 0;
    #line 8071 
    while (sp->config.tx_fifo_num > (unsigned int)i) {
      {
        #line 8072 
        struct fifo_info *fifo_0 = & mac_control->fifos[i];
        #line 8074 
        fifo_0->multiq = config->multiq;
      }
      #line 8071 
      i ++;
    }
    #line 8076 
    if (debug_level >= 0) 
                          #line 8076 
                          printk((char *)"\001",(char *)(& dev->name));
  }
  else 
    #line 8079 
    if (debug_level >= 0) 
                          #line 8079 
                          printk((char *)"\001",(char *)(& dev->name));
  #line 8082 
  switch ((int)sp->config.tx_steering_type) {
    #line 8083 
    case 0: 
            #line 8083 
    ;
    #line 8084 
    if (debug_level >= 0) 
                          #line 8084 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 8086 
    break;
    #line 8087 
    case 1: 
            #line 8087 
    ;
    #line 8088 
    if (debug_level >= 0) 
                          #line 8088 
                          printk((char *)"\001",(char *)(& dev->name));
    #line 8091 
    break;
    #line 8092 
    case 2: 
            #line 8092 
    ;
    #line 8093 
    if (debug_level >= 0) 
                          #line 8093 
                          printk((char *)"\001",(char *)(& dev->name));
  }
  #line 8098 
  if (debug_level >= 0) 
                        #line 8098 
                        printk((char *)"\001",(char *)(& dev->name));
  #line 8101 
  snprintf((char *)(& sp->name),60UL,(char *)"%s Neterion %s",(char *)(& dev->name),(u8 *)(& sp->product_name));
  #line 8104 
  if (vlan_tag_strip != 0U) 
                            #line 8105 
                            sp->vlan_strip_flag = 1; else 
                                                          #line 8107 
                                                          sp->vlan_strip_flag = 0;
  #line 8114 
  netif_carrier_off(dev);
  #line 8116 
  return 0;
  #line 8118 
  register_failed: 
                   #line 8118 
  ;
  #line 8119 
  set_swap_failed: 
                   #line 8119 
  ;
  #line 8120 
  iounmap(sp->bar1);
  #line 8121 
  bar1_remap_failed: 
                     #line 8121 
  ;
  #line 8122 
  iounmap(sp->bar0);
  #line 8123 
  bar0_remap_failed: 
                     #line 8123 
  ;
  #line 8124 
  mem_alloc_failed: 
                    #line 8124 
  ;
  #line 8125 
  free_shared_mem(sp);
  #line 8126 
  pci_disable_device(pdev);
  #line 8127 
  pci_release_regions(pdev);
  #line 8128 
  cif_free_netdev(dev);
  #line 8130 
  return ret;
}

#line 8142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_rem_nic(struct pci_dev *pdev)
{
  #line 8145 
  struct s2io_nic *sp;
  #line 8144 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 8147 
  if (dev == (struct net_device *)0) {
    #line 8148 
    if (debug_level >= 0) 
                          #line 8148 
                          printk((char *)"\001");
    #line 8149 
    return;
  }
  #line 8152 
  sp = (struct s2io_nic *)netdev_priv(dev);
  #line 8154 
  cancel_work_sync(& sp->rst_timer_task);
  #line 8155 
  cancel_work_sync(& sp->set_link_task);
  #line 8157 
  cif_unregister_netdev(dev);
  #line 8159 
  free_shared_mem(sp);
  #line 8160 
  iounmap(sp->bar0);
  #line 8161 
  iounmap(sp->bar1);
  #line 8162 
  pci_release_regions(pdev);
  #line 8163 
  cif_free_netdev(dev);
  #line 8164 
  pci_disable_device(pdev);
  #line 8165 
  return;
}

#line 8167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_driver_init(void)
{
  #line 8167 
  return cif___pci_register_driver(& s2io_driver,& __this_module,(char *)"s2io");
}

#line 8167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_driver_exit(void)
{
  #line 8167 
  cif_pci_unregister_driver(& s2io_driver);
  #line 8168 
  return;
}

#line 8169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int check_L2_lro_capable(u8 *buffer, struct iphdr **ip, struct tcphdr **tcp, struct RxD_t *rxdp, struct s2io_nic *sp)
{
  #line 8173 
  int ip_off;
  #line 8174 
  u8 ip_len;
  #line 8174 
  u8 l2_type = (unsigned char)((unsigned int)((unsigned char)(rxdp->Control_1 >> 37)) & 7U);
  #line 8176 
  if ((rxdp->Control_1 & 8589934592ULL) == 0ULL) {
    #line 8177 
    if (debug_level > 0) 
                         #line 8177 
                         printk((char *)"\001",(char *)"check_L2_lro_capable");
    #line 8180 
    return -1;
  }
  #line 8184 
  if ((unsigned int)l2_type == 0U || (unsigned int)l2_type == 4U) {
    #line 8185 
    ip_off = 14;
    #line 8190 
    if (sp->vlan_strip_flag == 0 && (rxdp->Control_1 & 549755813888ULL) != 0ULL) 
      #line 8192 
      ip_off += 4;
  }
  else 
       #line 8195 
       return -1;
  #line 8198 
  *ip = (struct iphdr *)(buffer + (unsigned long)ip_off);
  #line 8199 
  ip_len = (unsigned char)(*ip)->ihl;
  #line 8200 
  ip_len = (unsigned char)((int)ip_len << 2U);
  #line 8201 
  *tcp = (struct tcphdr *)((unsigned long)*ip + (unsigned long)ip_len);
  #line 8203 
  return 0;
}

#line 8206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int check_for_socket_match(struct lro *lro, struct iphdr *ip, struct tcphdr *tcp)
{
  #line 8209 
  if (debug_level > 1) 
                       #line 8209 
                       printk((char *)"\001",(char *)"check_for_socket_match");
  #line 8210 
  if ((((lro->iph)->saddr != ip->saddr || (lro->iph)->daddr != ip->daddr) || (int)(lro->tcph)->source != (int)tcp->source) || (int)(lro->tcph)->dest != (int)tcp->dest) 
    #line 8214 
    return -1;
  #line 8215 
  return 0;
}

#line 8218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
__inline static int get_l4_pyld_length(struct iphdr *ip, struct tcphdr *tcp)
{
  #line 8220 
  ;
  #line 8220 
  return ((int)__builtin_bswap16((unsigned short)((int)ip->tot_len)) - ((int)ip->ihl << 2)) - ((int)tcp->doff << 2);
}

#line 8223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void initiate_new_session(struct lro *lro, u8 *l2h, struct iphdr *ip, struct tcphdr *tcp, u32 tcp_pyld_len, u16 vlan_tag)
{
  #line 8227 
  if (debug_level > 1) 
                       #line 8227 
                       printk((char *)"\001",(char *)"initiate_new_session");
  #line 8228 
  lro->l2h = l2h;
  #line 8229 
  lro->iph = ip;
  #line 8230 
  lro->tcph = tcp;
  #line 8231 
  lro->tcp_next_seq = __builtin_bswap32(tcp->seq) + tcp_pyld_len;
  #line 8232 
  lro->tcp_ack = tcp->ack_seq;
  #line 8233 
  lro->sg_num = 1;
  #line 8234 
  lro->total_len = (int)__builtin_bswap16((unsigned short)((int)ip->tot_len));
  #line 8235 
  lro->frags_len = 0;
  #line 8236 
  lro->vlan_tag = vlan_tag;
  #line 8241 
  if ((unsigned int)tcp->doff == 8U) {
    #line 8242 
    __be32 *ptr;
    #line 8243 
    ptr = (__be32 *)(tcp + 1U);
    #line 8244 
    lro->saw_ts = (unsigned char)1U;
    #line 8245 
    lro->cur_tsval = __builtin_bswap32(*(ptr + 1U));
    #line 8246 
    lro->cur_tsecr = *(ptr + 2U);
  }
  #line 8248 
  lro->in_use = 1;
  #line 8249 
  return;
}

#line 8251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void update_L3L4_header(struct s2io_nic *sp, struct lro *lro)
{
  #line 8253 
  struct iphdr *ip = lro->iph;
  #line 8254 
  struct tcphdr *tcp = lro->tcph;
  #line 8255 
  struct swStat *swstats = & (sp->mac_control.stats_info)->sw_stat;
  #line 8257 
  if (debug_level > 1) 
                       #line 8257 
                       printk((char *)"\001",(char *)"update_L3L4_header");
  #line 8260 
  ;
  #line 8260 
  ;
  #line 8260 
  csum_replace2(& ip->check,(unsigned short)((int)ip->tot_len),(unsigned short)((int)__builtin_bswap16((unsigned short)((int)((unsigned short)lro->total_len)))));
  #line 8261 
  ip->tot_len = __builtin_bswap16((unsigned short)((int)((unsigned short)lro->total_len)));
  #line 8264 
  tcp->ack_seq = lro->tcp_ack;
  #line 8265 
  tcp->window = lro->window;
  #line 8268 
  if ((unsigned int)lro->saw_ts != 0U) {
    #line 8269 
    __be32 *ptr = (__be32 *)(tcp + 1U);
    #line 8270 
    *(ptr + 2U) = lro->cur_tsecr;
  }
  #line 8276 
  swstats->sum_avg_pkts_aggregated += (unsigned long long)lro->sg_num;
  #line 8277 
  (swstats->num_aggregations) ++;
  #line 8278 
  return;
}

#line 8280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void aggregate_new_rx(struct lro *lro, struct iphdr *ip, struct tcphdr *tcp, u32 l4_pyld)
{
  #line 8283 
  if (debug_level > 1) 
                       #line 8283 
                       printk((char *)"\001",(char *)"aggregate_new_rx");
  #line 8284 
  lro->total_len = (int)((unsigned int)lro->total_len + l4_pyld);
  #line 8285 
  lro->frags_len = (int)((unsigned int)lro->frags_len + l4_pyld);
  #line 8286 
  lro->tcp_next_seq += l4_pyld;
  #line 8287 
  (lro->sg_num) ++;
  #line 8290 
  lro->tcp_ack = tcp->ack_seq;
  #line 8291 
  lro->window = tcp->window;
  #line 8293 
  if ((unsigned int)lro->saw_ts != 0U) {
    #line 8294 
    __be32 *ptr;
    #line 8296 
    ptr = (__be32 *)(tcp + 1U);
    #line 8297 
    lro->cur_tsval = __builtin_bswap32(*(ptr + 1U));
    #line 8298 
    lro->cur_tsecr = *(ptr + 2U);
  }
  #line 8300 
  return;
}

#line 8302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int verify_l3_l4_lro_capable(struct lro *l_lro, struct iphdr *ip, struct tcphdr *tcp, u32 tcp_pyld_len)
{
  #line 8305 
  u8 *ptr;
  #line 8307 
  if (debug_level > 1) 
                       #line 8307 
                       printk((char *)"\001",(char *)"verify_l3_l4_lro_capable");
  #line 8309 
  if (tcp_pyld_len == 0U) 
                          #line 8311 
                          return -1;
  #line 8314 
  if ((unsigned int)ip->ihl != 5U) 
                                   #line 8315 
                                   return -1;
  #line 8318 
  if (INET_ECN_is_ce((unsigned char)((int)ipv4_get_dsfield(ip))) != 0) 
    #line 8319 
    return -1;
  #line 8322 
  if ((((((((unsigned int)tcp->urg != 0U || (unsigned int)tcp->psh != 0U) || (unsigned int)tcp->rst != 0U) || (unsigned int)tcp->syn != 0U) || (unsigned int)tcp->fin != 0U) || (unsigned int)tcp->ece != 0U) || (unsigned int)tcp->cwr != 0U) || (unsigned int)tcp->ack == 0U) 
    #line 8330 
    return -1;
  #line 8337 
  if ((unsigned int)tcp->doff != 5U && (unsigned int)tcp->doff != 8U) 
    #line 8338 
    return -1;
  #line 8340 
  if ((unsigned int)tcp->doff == 8U) {
    #line 8341 
    ptr = (u8 *)(tcp + 1U);
    #line 8342 
    while ((unsigned int)*ptr == 1U) 
                                     #line 8343 
                                     ptr ++;
    #line 8344 
    if ((unsigned int)*ptr != 8U || (unsigned int)*(ptr + 1U) != 10U) 
      #line 8345 
      return -1;
    #line 8348 
    if (l_lro != (struct lro *)0) {
      #line 8349 
      ;
      #line 8349 
      if (l_lro->cur_tsval > __builtin_bswap32(*((__be32 *)(ptr + 2U)))) 
        #line 8350 
        return -1;
    }
    #line 8353 
    if (*((__be32 *)(ptr + 6U)) == 0U) 
                                       #line 8354 
                                       return -1;
  }
  #line 8357 
  return 0;
}

#line 8360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static int s2io_club_tcp_session(struct ring_info *ring_data, u8 *buffer, u8 **tcp, u32 *tcp_len, struct lro **lro, struct RxD_t *rxdp, struct s2io_nic *sp)
{
  #line 8364 
  struct iphdr *ip;
  #line 8365 
  struct tcphdr *tcph;
  #line 8366 
  int i;
  #line 8366 
  int ret = 0;
  #line 8367 
  u16 vlan_tag = (unsigned short)0U;
  #line 8368 
  struct swStat *swstats = & (sp->mac_control.stats_info)->sw_stat;
  #line 8370 
  ret = check_L2_lro_capable(buffer,& ip,(struct tcphdr **)tcp,rxdp,sp);
  #line 8372 
  if (ret != 0) 
                #line 8373 
                return ret;
  #line 8375 
  if (debug_level > 1) 
                       #line 8375 
                       printk((char *)"\001",ip->saddr,ip->daddr);
  #line 8377 
  vlan_tag = (unsigned short)rxdp->Control_2;
  #line 8378 
  tcph = (struct tcphdr *)*tcp;
  #line 8379 
  *tcp_len = (unsigned int)get_l4_pyld_length(ip,tcph);
  #line 8380 
  i = 0;
  #line 8380 
  while (i <= 31) {
    {
      #line 8381 
      struct lro *l_lro = & ring_data->lro0_n[i];
      #line 8382 
      if (l_lro->in_use != 0) {
        #line 8383 
        if (check_for_socket_match(l_lro,ip,tcph) != 0) 
                                                        #line 8384 
                                                        goto __Cont;
        #line 8386 
        *lro = l_lro;
        #line 8388 
        ;
        #line 8388 
        if ((*lro)->tcp_next_seq != __builtin_bswap32(tcph->seq)) {
          #line 8389 
          if (debug_level > 1) {
            #line 8389 
            ;
            #line 8389 
            printk((char *)"\001",(char *)"s2io_club_tcp_session",(*lro)->tcp_next_seq,__builtin_bswap32(tcph->seq));
          }
          #line 8395 
          (swstats->outof_sequence_pkts) ++;
          #line 8396 
          ret = 2;
          #line 8397 
          break;
        }
        #line 8400 
        if (verify_l3_l4_lro_capable(l_lro,ip,tcph,*tcp_len) == 0) 
                                                                   #line 8402 
                                                                   ret = 1; else 
                                                                    #line 8404 
                                                                    ret = 2;
        #line 8405 
        break;
      }
    }
    #line 8380 
    __Cont: 
            #line 8380 
    i ++;
  }
  #line 8409 
  if (ret == 0) {
    #line 8415 
    if (verify_l3_l4_lro_capable((struct lro *)0,ip,tcph,*tcp_len) != 0) 
      #line 8416 
      return 5;
    #line 8418 
    i = 0;
    #line 8418 
    while (i <= 31) {
      {
        #line 8419 
        struct lro *l_lro_0 = & ring_data->lro0_n[i];
        #line 8420 
        if (l_lro_0->in_use == 0) {
          #line 8421 
          *lro = l_lro_0;
          #line 8422 
          ret = 3;
          #line 8423 
          break;
        }
      }
      #line 8418 
      i ++;
    }
  }
  #line 8428 
  if (ret == 0) {
    #line 8429 
    if (debug_level > 1) 
                         #line 8429 
                         printk((char *)"\001",(char *)"s2io_club_tcp_session");
    #line 8431 
    *lro = (struct lro *)0;
    #line 8432 
    return ret;
  }
  #line 8435 
  switch (ret) {
    #line 8436 
    case 3: 
            #line 8436 
    ;
    #line 8437 
    initiate_new_session(*lro,buffer,ip,tcph,*tcp_len,(unsigned short)((int)vlan_tag));
    #line 8439 
    break;
    #line 8440 
    case 2: 
            #line 8440 
    ;
    #line 8441 
    update_L3L4_header(sp,*lro);
    #line 8442 
    break;
    #line 8443 
    case 1: 
            #line 8443 
    ;
    #line 8444 
    aggregate_new_rx(*lro,ip,tcph,*tcp_len);
    #line 8445 
    if ((*lro)->sg_num == (int)sp->lro_max_aggr_per_sess) {
      #line 8446 
      update_L3L4_header(sp,*lro);
      #line 8447 
      ret = 4;
    }
    #line 8449 
    break;
    #line 8450 
    default: 
             #line 8450 
    ;
    #line 8451 
    if (debug_level >= 0) 
                          #line 8451 
                          printk((char *)"\001",(char *)"s2io_club_tcp_session");
    #line 8452 
    break;
  }
  #line 8455 
  return ret;
}

#line 8458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void clear_lro_session(struct lro *lro)
{
  #line 8460 
  u16 lro_struct_size = (unsigned short)128U;
  #line 8462 
  memset((void *)lro,0,(unsigned long)lro_struct_size);
  #line 8463 
  return;
}

#line 8465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void queue_rx_frame(struct sk_buff *skb, u16 vlan_tag)
{
  #line 8467 
  struct net_device *dev = skb->__anonCompField_sk_buff_92.__anonCompField___anonunion_533_91.__anonCompField___anonstruct_534_90.dev;
  #line 8468 
  struct s2io_nic *sp = netdev_priv(dev);
  #line 8470 
  skb->protocol = eth_type_trans(skb,dev);
  #line 8471 
  if ((unsigned int)vlan_tag != 0U && sp->vlan_strip_flag != 0) 
                                                                #line 8472 
                                                                __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vlan_tag));
  #line 8473 
  if ((unsigned int)sp->config.napi != 0U) 
                                           #line 8474 
                                           netif_receive_skb(skb); else 
                                                                    #line 8476 
                                                                    netif_rx(skb);
  #line 8477 
  return;
}

#line 8479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void lro_append_pkt(struct s2io_nic *sp, struct lro *lro, struct sk_buff *skb, u32 tcp_len)
{
  #line 8482 
  struct sk_buff *first = lro->parent;
  #line 8483 
  struct swStat *swstats = & (sp->mac_control.stats_info)->sw_stat;
  #line 8485 
  first->len += tcp_len;
  #line 8486 
  first->data_len = (unsigned int)lro->frags_len;
  #line 8487 
  skb_pull(skb,skb->len - tcp_len);
  #line 8488 
  ;
  #line 8488 
  if (((struct skb_shared_info *)skb_end_pointer(first))->frag_list != (struct sk_buff *)0) 
    #line 8489 
    (lro->last_frag)->__anonCompField_sk_buff_92.__anonCompField___anonunion_533_91.next = skb;
  else {
    #line 8491 
    ((struct skb_shared_info *)skb_end_pointer(first))->frag_list = skb;
  }
  #line 8492 
  first->truesize += skb->truesize;
  #line 8493 
  lro->last_frag = skb;
  #line 8494 
  (swstats->clubbed_frms_cnt) ++;
  #line 8495 
  return;
}

#line 8505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static pci_ers_result_t s2io_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 8508 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 8509 
  struct s2io_nic *sp = netdev_priv(netdev);
  #line 8511 
  netif_device_detach(netdev);
  #line 8513 
  if (state == 3U) 
                   #line 8514 
                   return 4U;
  #line 8516 
  if ((int)netif_running(netdev) != 0) 
                                       #line 8518 
                                       do_s2io_card_down(sp,0);
  #line 8520 
  pci_disable_device(pdev);
  #line 8522 
  return 3U;
}

#line 8534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static pci_ers_result_t s2io_io_slot_reset(struct pci_dev *pdev)
{
  #line 8536 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 8537 
  struct s2io_nic *sp = netdev_priv(netdev);
  #line 8539 
  if (pci_enable_device(pdev) != 0) {
    #line 8540 
    printk((char *)"\001");
    #line 8541 
    return 4U;
  }
  #line 8544 
  pci_set_master(pdev);
  #line 8545 
  s2io_reset(sp);
  #line 8547 
  return 5U;
}

#line 8557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/s2io.c"
static void s2io_io_resume(struct pci_dev *pdev)
{
  #line 8559 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 8560 
  struct s2io_nic *sp = netdev_priv(netdev);
  #line 8562 
  if ((int)netif_running(netdev) != 0) {
    #line 8563 
    if (s2io_card_up(sp) != 0) {
      #line 8564 
      printk((char *)"\001");
      #line 8565 
      return;
    }
    #line 8568 
    if (s2io_set_mac_addr(netdev,(void *)netdev->dev_addr) == -1) {
      #line 8569 
      s2io_card_down(sp);
      #line 8570 
      printk((char *)"\001");
      #line 8571 
      return;
    }
  }
  #line 8575 
  netif_device_attach(netdev);
  #line 8576 
  netif_tx_wake_all_queues(netdev);
  #line 8577 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
struct pci_driver *emg_alias_s2io_driver = & s2io_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
struct pci_device_id (*emg_alias_s2io_tbl)[5U] = & s2io_tbl;
#line 97 
#line 97 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 98 
#line 98 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 99 
#line 99 
int emg_del_timer_sync(struct timer_list *arg0);
#line 100 
#line 100 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 101 
#line 101 
void emg_free_netdev(struct net_device *arg0);
#line 102 
#line 102 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 103 
#line 103 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 104 
#line 104 
int emg_register_netdev(struct net_device *arg0);
#line 105 
#line 105 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 106 
#line 106 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 107 
#line 107 
void emg_unregister_netdev(struct net_device *arg0);
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_change_mtu(struct net_device *arg0, int arg1)
{
  #line 112 
  return s2io_change_mtu(arg0,arg1);
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_close(struct net_device *arg0)
{
  #line 117 
  return s2io_close(arg0);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
void emg_wrapper_s2io_ethtool_gdrvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 122 
  s2io_ethtool_gdrvinfo(arg0,arg1);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_ethtool_geeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 127 
  return s2io_ethtool_geeprom(arg0,arg1,arg2);
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_ethtool_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 132 
  return s2io_ethtool_get_link_ksettings(arg0,arg1);
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_ethtool_get_regs_len(struct net_device *arg0)
{
  #line 137 
  return s2io_ethtool_get_regs_len(arg0);
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
void emg_wrapper_s2io_ethtool_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 142 
  s2io_ethtool_get_strings(arg0,arg1,arg2);
  #line 143 
  return;
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
void emg_wrapper_s2io_ethtool_getpause_data(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 147 
  s2io_ethtool_getpause_data(arg0,arg1);
  #line 148 
  return;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
void emg_wrapper_s2io_ethtool_gregs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 152 
  s2io_ethtool_gregs(arg0,arg1,arg2);
  #line 153 
  return;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
void emg_wrapper_s2io_ethtool_gringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 157 
  s2io_ethtool_gringparam(arg0,arg1);
  #line 158 
  return;
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_ethtool_seeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 162 
  return s2io_ethtool_seeprom(arg0,arg1,arg2);
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_ethtool_set_led(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 167 
  return s2io_ethtool_set_led(arg0,arg1);
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_ethtool_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 172 
  return s2io_ethtool_set_link_ksettings(arg0,arg1);
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_ethtool_setpause_data(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 177 
  return s2io_ethtool_setpause_data(arg0,arg1);
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
void emg_wrapper_s2io_ethtool_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 182 
  s2io_ethtool_test(arg0,arg1,arg2);
  #line 183 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_get_eeprom_len(struct net_device *arg0)
{
  #line 187 
  return s2io_get_eeprom_len(arg0);
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
void emg_wrapper_s2io_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 192 
  s2io_get_ethtool_stats(arg0,arg1,arg2);
  #line 193 
  return;
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 197 
  return s2io_get_sset_count(arg0,arg1);
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
struct net_device_stats *emg_wrapper_s2io_get_stats(struct net_device *arg0)
{
  #line 202 
  return s2io_get_stats(arg0);
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_init_nic(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 207 
  return s2io_init_nic(arg0,arg1);
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 212 
  return s2io_ioctl(arg0,arg1,arg2);
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
enum irqreturn emg_wrapper_s2io_isr(int arg0, void *arg1)
{
  #line 217 
  return s2io_isr(arg0,arg1);
}

#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
enum irqreturn emg_wrapper_s2io_msix_fifo_handle(int arg0, void *arg1)
{
  #line 222 
  return s2io_msix_fifo_handle(arg0,arg1);
}

#line 226  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
enum irqreturn emg_wrapper_s2io_msix_ring_handle(int arg0, void *arg1)
{
  #line 227 
  return s2io_msix_ring_handle(arg0,arg1);
}

#line 231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
void emg_wrapper_s2io_netpoll(struct net_device *arg0)
{
  #line 232 
  s2io_netpoll(arg0);
  #line 233 
  return;
}

#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_open(struct net_device *arg0)
{
  #line 237 
  return s2io_open(arg0);
}

#line 241  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
void emg_wrapper_s2io_rem_nic(struct pci_dev *arg0)
{
  #line 242 
  s2io_rem_nic(arg0);
  #line 243 
  return;
}

#line 246  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 247 
  return s2io_set_features(arg0,arg1);
}

#line 251  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_wrapper_s2io_set_mac_addr(struct net_device *arg0, void *arg1)
{
  #line 252 
  return s2io_set_mac_addr(arg0,arg1);
}

#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
void emg_wrapper_s2io_set_multicast(struct net_device *arg0)
{
  #line 257 
  s2io_set_multicast(arg0);
  #line 258 
  return;
}

#line 261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
enum irqreturn emg_wrapper_s2io_test_intr(int arg0, void *arg1)
{
  #line 262 
  return s2io_test_intr(arg0,arg1);
}

#line 266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
void emg_wrapper_s2io_tx_watchdog(struct net_device *arg0)
{
  #line 267 
  s2io_tx_watchdog(arg0);
  #line 268 
  return;
}

#line 271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
enum netdev_tx emg_wrapper_s2io_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 272 
  return s2io_xmit(arg0,arg1);
}

#line 276  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
void emg_s2io_driver_exit(void)
{
  #line 277 
  s2io_driver_exit();
  #line 278 
  return;
}

#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
int emg_s2io_driver_init(void)
{
  #line 281 
  return s2io_driver_init();
}

#line 299  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 302 
  ldv_set_bit(nr,addr);
  #line 303 
  return;
}

#line 306  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 309 
  ldv_clear_bit(nr,addr);
  #line 310 
  return;
}

#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 316 
  ldv_init_list_head(list);
  #line 317 
  return;
}

#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 379 
  ldv_bitmap_zero(dst,nbits);
  #line 380 
  return;
}

#line 621  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 624 
  return ldv_kmalloc(size,flags);
}

#line 635  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 638 
  return ldv_kcalloc(n,size,flags);
}

#line 656  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 659 
  return ldv_kzalloc(size,flags);
}

#line 863  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 867 
  return emg_schedule_work(work);
}

#line 992  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static char *cif_strstr(char *s1, char *s2)
{
  #line 995 
  return ldv_strstr(s1,s2);
}

#line 999  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif___ldv_spin_lock_tx_lock_of_fifo_info(spinlock_t *lock)
{
  #line 1002 
  ldv_spin_model_lock((char *)"tx_lock_of_fifo_info");
  #line 1004 
  __ldv_spin_lock(lock);
  #line 1005 
  return;
}

#line 1008  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_spin_unlock_irqrestore_tx_lock_of_fifo_info(spinlock_t *lock, unsigned long flags)
{
  #line 1011 
  ldv_spin_model_unlock((char *)"tx_lock_of_fifo_info");
  #line 1013 
  spin_unlock_irqrestore(lock,flags);
  #line 1014 
  return;
}

#line 1017  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static int cif___ldv_spin_trylock_tx_lock_of_fifo_info(spinlock_t *lock)
{
  #line 1021 
  ldv_func_ret_type ldv_func_res = __ldv_spin_trylock(lock);
  #line 1023 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 1025 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 1028 
                                           return 0;
  else {
    #line 1030 
    ldv_spin_model_lock((char *)"tx_lock_of_fifo_info");
    #line 1032 
    return 1;
  }
  #line 1035 
  return ldv_func_res;
}

#line 1039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 1043 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 1047  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 1051 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 1055  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 1059 
  return emg_mod_timer(timer,expires);
}

#line 1063  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 1067 
  return emg_del_timer_sync(timer);
}

#line 1071  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 1075 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 1079  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1083 
  return emg_register_netdev(dev);
}

#line 1087  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1091 
  emg_unregister_netdev(dev);
  #line 1092 
  return;
}

#line 1095  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1099 
  emg_free_netdev(dev);
  #line 1100 
  return;
}

#line 1103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1107 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/0/concurrency safety/weaver/s2io.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1115 
  emg_pci_unregister_driver(dev);
  #line 1116 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 89  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
#line 263 
void emg_dispatch_deregister_12(struct net_device *arg0);
#line 90 
#line 190 
void emg_dispatch_deregister_8(struct pci_driver *arg0);
#line 91 
#line 137 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 92 
#line 179 
void emg_dispatch_instance_register_7(struct timer_list *arg0);
#line 93 
#line 146 
void emg_dispatch_irq_deregister_5(int arg0);
#line 94 
#line 210 
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 95 
#line 126 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 96 
#line 199 
void emg_dispatch_register_9(struct net_device *arg0);
#line 97 
#line 1400 
void *emg_entry_point_insmod(void *arg0);
#line 100 
#line 272 
void *emg_interrupt_interrupt_scenario_s2io_isr(void *arg0);
#line 101 
#line 335 
void *emg_interrupt_interrupt_scenario_s2io_msix_fifo_handle(void *arg0);
#line 102 
#line 398 
void *emg_interrupt_interrupt_scenario_s2io_msix_ring_handle(void *arg0);
#line 103 
#line 461 
void *emg_interrupt_interrupt_scenario_s2io_test_intr(void *arg0);
#line 105 
#line 524 
void *emg_net_random_allocationless_scenario_s2io_ethtool_gdrvinfo(void *arg0);
#line 106 
#line 901 
void *emg_pci_pci_scenario_s2io_driver(void *arg0);
#line 111 
#line 1079 
void *emg_timer_timer_scenario_6(void *arg0);
#line 113 
#line 1429 
int main(void);
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 127 
  int ret;
  #line 128 
  struct emg_struct_pci_scenario_s2io_driver_18 *cf_arg_18;
  #line 129 
  cf_arg_18 = (struct emg_struct_pci_scenario_s2io_driver_18 *)ldv_xmalloc(16UL);
  #line 130 
  cf_arg_18->arg0 = arg0;
  #line 131 
  ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_pci_pci_scenario_s2io_driver,(void *)cf_arg_18);
  #line 132 
  __VERIFIER_assume(ret == 0);
  #line 133 
  return;
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 138 
  int ret;
  #line 139 
  struct emg_struct_timer_scenario_6_19 *cf_arg_19;
  #line 140 
  ret = pthread_join(emg_thread_19,(void **)0);
  #line 141 
  __VERIFIER_assume(ret == 0);
  #line 142 
  return;
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_5(int arg0)
{
  #line 147 
  int ret;
  #line 148 
  struct emg_struct_free_irq_5 *cf_arg_13;
  #line 149 
  struct emg_struct_free_irq_5 *cf_arg_14;
  #line 150 
  struct emg_struct_free_irq_5 *cf_arg_15;
  #line 151 
  struct emg_struct_free_irq_5 *cf_arg_16;
  #line 152 
  switch (ldv_undef_int()) {
    #line 153 
    case 0: 
            #line 153 
    ;
    #line 154 
    ret = pthread_join(emg_thread_13,(void **)0);
    #line 155 
    __VERIFIER_assume(ret == 0);
    #line 156 
    break;
    #line 158 
    case 1: 
            #line 158 
    ;
    #line 159 
    ret = pthread_join(emg_thread_14,(void **)0);
    #line 160 
    __VERIFIER_assume(ret == 0);
    #line 161 
    break;
    #line 163 
    case 2: 
            #line 163 
    ;
    #line 164 
    ret = pthread_join(emg_thread_15,(void **)0);
    #line 165 
    __VERIFIER_assume(ret == 0);
    #line 166 
    break;
    #line 168 
    case 3: 
            #line 168 
    ;
    #line 169 
    ret = pthread_join(emg_thread_16,(void **)0);
    #line 170 
    __VERIFIER_assume(ret == 0);
    #line 171 
    break;
    #line 173 
    default: 
             #line 173 
    ;
    #line 173 
    __VERIFIER_assume(0);
  }
  #line 175 
  return;
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_7(struct timer_list *arg0)
{
  #line 180 
  int ret;
  #line 181 
  struct emg_struct_timer_scenario_6_19 *cf_arg_19;
  #line 182 
  cf_arg_19 = (struct emg_struct_timer_scenario_6_19 *)ldv_xmalloc(16UL);
  #line 183 
  cf_arg_19->arg0 = arg0;
  #line 184 
  ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_timer_timer_scenario_6,(void *)cf_arg_19);
  #line 185 
  __VERIFIER_assume(ret == 0);
  #line 186 
  return;
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct pci_driver *arg0)
{
  #line 191 
  int ret;
  #line 192 
  struct emg_struct_pci_scenario_s2io_driver_18 *cf_arg_18;
  #line 193 
  ret = pthread_join(emg_thread_18,(void **)0);
  #line 194 
  __VERIFIER_assume(ret == 0);
  #line 195 
  return;
}

#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_9(struct net_device *arg0)
{
  #line 200 
  int ret;
  #line 201 
  struct emg_struct_random_allocationless_scenario_s2io_ethtool_gdrvinfo_17 *cf_arg_17;
  #line 202 
  cf_arg_17 = (struct emg_struct_random_allocationless_scenario_s2io_ethtool_gdrvinfo_17 *)ldv_xmalloc(16UL);
  #line 203 
  cf_arg_17->arg0 = arg0;
  #line 204 
  ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_s2io_ethtool_gdrvinfo,(void *)cf_arg_17);
  #line 205 
  __VERIFIER_assume(ret == 0);
  #line 206 
  return;
}

#line 210  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 211 
  int ret;
  #line 212 
  struct emg_struct_interrupt_scenario_s2io_isr_13 *cf_arg_13;
  #line 213 
  struct emg_struct_interrupt_scenario_s2io_isr_13 *cf_arg_14;
  #line 214 
  struct emg_struct_interrupt_scenario_s2io_isr_13 *cf_arg_15;
  #line 215 
  struct emg_struct_interrupt_scenario_s2io_isr_13 *cf_arg_16;
  #line 216 
  switch (ldv_undef_int()) {
    #line 217 
    case 0: 
            #line 217 
    ;
    #line 218 
    cf_arg_13 = (struct emg_struct_interrupt_scenario_s2io_isr_13 *)ldv_xmalloc(40UL);
    #line 219 
    cf_arg_13->arg0 = arg0;
    #line 220 
    cf_arg_13->arg1 = arg1;
    #line 221 
    cf_arg_13->arg2 = arg2;
    #line 222 
    cf_arg_13->arg3 = arg3;
    #line 223 
    ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_s2io_isr,(void *)cf_arg_13);
    #line 224 
    __VERIFIER_assume(ret == 0);
    #line 225 
    break;
    #line 227 
    case 1: 
            #line 227 
    ;
    #line 228 
    cf_arg_14 = (struct emg_struct_interrupt_scenario_s2io_isr_13 *)ldv_xmalloc(40UL);
    #line 229 
    cf_arg_14->arg0 = arg0;
    #line 230 
    cf_arg_14->arg1 = arg1;
    #line 231 
    cf_arg_14->arg2 = arg2;
    #line 232 
    cf_arg_14->arg3 = arg3;
    #line 233 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_s2io_msix_fifo_handle,(void *)cf_arg_14);
    #line 234 
    __VERIFIER_assume(ret == 0);
    #line 235 
    break;
    #line 237 
    case 2: 
            #line 237 
    ;
    #line 238 
    cf_arg_15 = (struct emg_struct_interrupt_scenario_s2io_isr_13 *)ldv_xmalloc(40UL);
    #line 239 
    cf_arg_15->arg0 = arg0;
    #line 240 
    cf_arg_15->arg1 = arg1;
    #line 241 
    cf_arg_15->arg2 = arg2;
    #line 242 
    cf_arg_15->arg3 = arg3;
    #line 243 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_s2io_msix_ring_handle,(void *)cf_arg_15);
    #line 244 
    __VERIFIER_assume(ret == 0);
    #line 245 
    break;
    #line 247 
    case 3: 
            #line 247 
    ;
    #line 248 
    cf_arg_16 = (struct emg_struct_interrupt_scenario_s2io_isr_13 *)ldv_xmalloc(40UL);
    #line 249 
    cf_arg_16->arg0 = arg0;
    #line 250 
    cf_arg_16->arg1 = arg1;
    #line 251 
    cf_arg_16->arg2 = arg2;
    #line 252 
    cf_arg_16->arg3 = arg3;
    #line 253 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_s2io_test_intr,(void *)cf_arg_16);
    #line 254 
    __VERIFIER_assume(ret == 0);
    #line 255 
    break;
    #line 257 
    default: 
             #line 257 
    ;
    #line 257 
    __VERIFIER_assume(0);
  }
  #line 259 
  return;
}

#line 263  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_12(struct net_device *arg0)
{
  #line 264 
  int ret;
  #line 265 
  struct emg_struct_random_allocationless_scenario_s2io_ethtool_gdrvinfo_17 *cf_arg_17;
  #line 266 
  ret = pthread_join(emg_thread_17,(void **)0);
  #line 267 
  __VERIFIER_assume(ret == 0);
  #line 268 
  return;
}

#line 272  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_s2io_isr(void *arg0)
{
  #line 275 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 276 
  void *emg_13_data;
  #line 277 
  int emg_13_line;
  #line 278 
  enum irqreturn emg_13_ret_val;
  #line 279 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 281 
  struct emg_struct_interrupt_scenario_s2io_isr_13 *data = (struct emg_struct_interrupt_scenario_s2io_isr_13 *)arg0;
  #line 284 
  emg_13_callback = & emg_wrapper_s2io_isr;
  #line 287 
  if (data != (struct emg_struct_interrupt_scenario_s2io_isr_13 *)0) {
    #line 288 
    emg_13_line = data->arg0;
    #line 289 
    emg_13_callback = data->arg1;
    #line 290 
    emg_13_thread = data->arg2;
    #line 291 
    emg_13_data = data->arg3;
    #line 292 
    ldv_free((void *)data);
  }
  #line 298 
  ldv_switch_to_interrupt_context();
  #line 302 
  emg_13_ret_val = emg_wrapper_s2io_isr(emg_13_line,emg_13_data);
  #line 307 
  ldv_switch_to_process_context();
  #line 310 
  if (ldv_undef_int() != 0) {
    #line 312 
    __VERIFIER_assume(emg_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 316 
    if (emg_13_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 317 
                                                              (*emg_13_thread)(emg_13_line,emg_13_data);
  }
  else 
       #line 322 
       __VERIFIER_assume(emg_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 330 
  return (void *)0;
}

#line 335  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_s2io_msix_fifo_handle(void *arg0)
{
  #line 338 
  enum irqreturn (*emg_14_callback)(int , void *);
  #line 339 
  void *emg_14_data;
  #line 340 
  int emg_14_line;
  #line 341 
  enum irqreturn emg_14_ret_val;
  #line 342 
  enum irqreturn (*emg_14_thread)(int , void *);
  #line 344 
  struct emg_struct_interrupt_scenario_s2io_isr_13 *data = (struct emg_struct_interrupt_scenario_s2io_isr_13 *)arg0;
  #line 347 
  emg_14_callback = & emg_wrapper_s2io_msix_fifo_handle;
  #line 350 
  if (data != (struct emg_struct_interrupt_scenario_s2io_isr_13 *)0) {
    #line 351 
    emg_14_line = data->arg0;
    #line 352 
    emg_14_callback = data->arg1;
    #line 353 
    emg_14_thread = data->arg2;
    #line 354 
    emg_14_data = data->arg3;
    #line 355 
    ldv_free((void *)data);
  }
  #line 361 
  ldv_switch_to_interrupt_context();
  #line 365 
  emg_14_ret_val = emg_wrapper_s2io_msix_fifo_handle(emg_14_line,emg_14_data);
  #line 370 
  ldv_switch_to_process_context();
  #line 373 
  if (ldv_undef_int() != 0) {
    #line 375 
    __VERIFIER_assume(emg_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 379 
    if (emg_14_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 380 
                                                              (*emg_14_thread)(emg_14_line,emg_14_data);
  }
  else 
       #line 385 
       __VERIFIER_assume(emg_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 393 
  return (void *)0;
}

#line 398  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_s2io_msix_ring_handle(void *arg0)
{
  #line 401 
  enum irqreturn (*emg_15_callback)(int , void *);
  #line 402 
  void *emg_15_data;
  #line 403 
  int emg_15_line;
  #line 404 
  enum irqreturn emg_15_ret_val;
  #line 405 
  enum irqreturn (*emg_15_thread)(int , void *);
  #line 407 
  struct emg_struct_interrupt_scenario_s2io_isr_13 *data = (struct emg_struct_interrupt_scenario_s2io_isr_13 *)arg0;
  #line 410 
  emg_15_callback = & emg_wrapper_s2io_msix_ring_handle;
  #line 413 
  if (data != (struct emg_struct_interrupt_scenario_s2io_isr_13 *)0) {
    #line 414 
    emg_15_line = data->arg0;
    #line 415 
    emg_15_callback = data->arg1;
    #line 416 
    emg_15_thread = data->arg2;
    #line 417 
    emg_15_data = data->arg3;
    #line 418 
    ldv_free((void *)data);
  }
  #line 424 
  ldv_switch_to_interrupt_context();
  #line 428 
  emg_15_ret_val = emg_wrapper_s2io_msix_ring_handle(emg_15_line,emg_15_data);
  #line 433 
  ldv_switch_to_process_context();
  #line 436 
  if (ldv_undef_int() != 0) {
    #line 438 
    __VERIFIER_assume(emg_15_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 442 
    if (emg_15_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 443 
                                                              (*emg_15_thread)(emg_15_line,emg_15_data);
  }
  else 
       #line 448 
       __VERIFIER_assume(emg_15_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 456 
  return (void *)0;
}

#line 461  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_s2io_test_intr(void *arg0)
{
  #line 464 
  enum irqreturn (*emg_16_callback)(int , void *);
  #line 465 
  void *emg_16_data;
  #line 466 
  int emg_16_line;
  #line 467 
  enum irqreturn emg_16_ret_val;
  #line 468 
  enum irqreturn (*emg_16_thread)(int , void *);
  #line 470 
  struct emg_struct_interrupt_scenario_s2io_isr_13 *data = (struct emg_struct_interrupt_scenario_s2io_isr_13 *)arg0;
  #line 473 
  emg_16_callback = & emg_wrapper_s2io_test_intr;
  #line 476 
  if (data != (struct emg_struct_interrupt_scenario_s2io_isr_13 *)0) {
    #line 477 
    emg_16_line = data->arg0;
    #line 478 
    emg_16_callback = data->arg1;
    #line 479 
    emg_16_thread = data->arg2;
    #line 480 
    emg_16_data = data->arg3;
    #line 481 
    ldv_free((void *)data);
  }
  #line 487 
  ldv_switch_to_interrupt_context();
  #line 491 
  emg_16_ret_val = emg_wrapper_s2io_test_intr(emg_16_line,emg_16_data);
  #line 496 
  ldv_switch_to_process_context();
  #line 499 
  if (ldv_undef_int() != 0) {
    #line 501 
    __VERIFIER_assume(emg_16_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 505 
    if (emg_16_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 506 
                                                              (*emg_16_thread)(emg_16_line,emg_16_data);
  }
  else 
       #line 511 
       __VERIFIER_assume(emg_16_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 519 
  return (void *)0;
}

#line 524  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_s2io_ethtool_gdrvinfo(void *arg0)
{
  #line 527 
  struct net_device *emg_17_container;
  #line 528 
  struct sk_buff *emg_17_emg_param_0_18;
  #line 529 
  struct ethtool_drvinfo *emg_17_emg_param_1_0;
  #line 530 
  struct ethtool_eeprom *emg_17_emg_param_1_1;
  #line 531 
  int emg_17_emg_param_1_10;
  #line 532 
  unsigned int emg_17_emg_param_1_11;
  #line 533 
  int emg_17_emg_param_1_13;
  #line 534 
  struct ifreq *emg_17_emg_param_1_14;
  #line 535 
  unsigned long long emg_17_emg_param_1_16;
  #line 536 
  void *emg_17_emg_param_1_17;
  #line 537 
  struct ethtool_test *emg_17_emg_param_1_19;
  #line 538 
  struct ethtool_eeprom *emg_17_emg_param_1_21;
  #line 539 
  struct ethtool_link_ksettings *emg_17_emg_param_1_23;
  #line 540 
  struct ethtool_pauseparam *emg_17_emg_param_1_24;
  #line 541 
  enum ethtool_phys_id_state *emg_17_emg_param_1_25;
  #line 542 
  struct ethtool_stats *emg_17_emg_param_1_3;
  #line 543 
  struct ethtool_link_ksettings *emg_17_emg_param_1_5;
  #line 544 
  struct ethtool_pauseparam *emg_17_emg_param_1_6;
  #line 545 
  struct ethtool_regs *emg_17_emg_param_1_7;
  #line 546 
  struct ethtool_ringparam *emg_17_emg_param_1_9;
  #line 547 
  unsigned char *emg_17_emg_param_2_12;
  #line 548 
  int emg_17_emg_param_2_15;
  #line 549 
  unsigned char *emg_17_emg_param_2_2;
  #line 550 
  unsigned long long *emg_17_emg_param_2_20;
  #line 551 
  unsigned char *emg_17_emg_param_2_22;
  #line 552 
  unsigned long long *emg_17_emg_param_2_4;
  #line 553 
  void *emg_17_emg_param_2_8;
  #line 554 
  int emg_repeat_cnt_call_17 = 1;
  #line 556 
  struct emg_struct_random_allocationless_scenario_s2io_ethtool_gdrvinfo_17 *data = (struct emg_struct_random_allocationless_scenario_s2io_ethtool_gdrvinfo_17 *)arg0;
  #line 561 
  if (data != (struct emg_struct_random_allocationless_scenario_s2io_ethtool_gdrvinfo_17 *)0) {
    #line 562 
    emg_17_container = data->arg0;
    #line 563 
    ldv_free((void *)data);
  }
  #line 568 
  goto emg_call_17;
  #line 572 
  return (void *)0;
  #line 575 
  emg_call_17: 
               #line 575 
  ;
  #line 576 
  switch (ldv_undef_int()) {
    #line 577 
    case 0: 
            #line 577 
    ;
    #line 579 
    emg_17_emg_param_1_25 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 579 
    emg_17_emg_param_1_25 = emg_17_emg_param_1_25;
    #line 583 
    emg_wrapper_s2io_ethtool_set_led(emg_17_container,*emg_17_emg_param_1_25);
    #line 587 
    ldv_free((void *)emg_17_emg_param_1_25);
    #line 589 
    break;
    #line 591 
    case 1: 
            #line 591 
    ;
    #line 593 
    emg_17_emg_param_1_24 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 593 
    emg_17_emg_param_1_24 = emg_17_emg_param_1_24;
    #line 597 
    emg_wrapper_s2io_ethtool_setpause_data(emg_17_container,emg_17_emg_param_1_24);
    #line 601 
    ldv_free((void *)emg_17_emg_param_1_24);
    #line 603 
    break;
    #line 605 
    case 2: 
            #line 605 
    ;
    #line 607 
    emg_17_emg_param_1_23 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 607 
    emg_17_emg_param_1_23 = emg_17_emg_param_1_23;
    #line 611 
    emg_wrapper_s2io_ethtool_set_link_ksettings(emg_17_container,emg_17_emg_param_1_23);
    #line 615 
    ldv_free((void *)emg_17_emg_param_1_23);
    #line 617 
    break;
    #line 619 
    case 3: 
            #line 619 
    ;
    #line 621 
    emg_17_emg_param_1_21 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 621 
    emg_17_emg_param_1_21 = emg_17_emg_param_1_21;
    #line 622 
    emg_17_emg_param_2_22 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 622 
    emg_17_emg_param_2_22 = emg_17_emg_param_2_22;
    #line 626 
    emg_wrapper_s2io_ethtool_seeprom(emg_17_container,emg_17_emg_param_1_21,emg_17_emg_param_2_22);
    #line 630 
    ldv_free((void *)emg_17_emg_param_1_21);
    #line 631 
    ldv_free((void *)emg_17_emg_param_2_22);
    #line 633 
    break;
    #line 635 
    case 4: 
            #line 635 
    ;
    #line 637 
    emg_17_emg_param_1_19 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 637 
    emg_17_emg_param_1_19 = emg_17_emg_param_1_19;
    #line 638 
    emg_17_emg_param_2_20 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 638 
    emg_17_emg_param_2_20 = emg_17_emg_param_2_20;
    #line 642 
    emg_wrapper_s2io_ethtool_test(emg_17_container,emg_17_emg_param_1_19,emg_17_emg_param_2_20);
    #line 646 
    ldv_free((void *)emg_17_emg_param_1_19);
    #line 647 
    ldv_free((void *)emg_17_emg_param_2_20);
    #line 649 
    break;
    #line 651 
    case 5: 
            #line 651 
    ;
    #line 653 
    eth_validate_addr(emg_17_container);
    #line 655 
    break;
    #line 657 
    case 6: 
            #line 657 
    ;
    #line 659 
    emg_wrapper_s2io_tx_watchdog(emg_17_container);
    #line 661 
    break;
    #line 663 
    case 7: 
            #line 663 
    ;
    #line 665 
    emg_17_emg_param_0_18 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 665 
    emg_17_emg_param_0_18 = emg_17_emg_param_0_18;
    #line 669 
    emg_wrapper_s2io_xmit(emg_17_emg_param_0_18,emg_17_container);
    #line 673 
    ldv_free((void *)emg_17_emg_param_0_18);
    #line 675 
    break;
    #line 677 
    case 8: 
            #line 677 
    ;
    #line 679 
    emg_wrapper_s2io_set_multicast(emg_17_container);
    #line 681 
    break;
    #line 683 
    case 9: 
            #line 683 
    ;
    #line 685 
    emg_17_emg_param_1_17 = ldv_xmalloc_unknown_size(0UL);
    #line 685 
    emg_17_emg_param_1_17 = emg_17_emg_param_1_17;
    #line 689 
    emg_wrapper_s2io_set_mac_addr(emg_17_container,emg_17_emg_param_1_17);
    #line 693 
    ldv_free(emg_17_emg_param_1_17);
    #line 695 
    break;
    #line 697 
    case 10: 
             #line 697 
    ;
    #line 699 
    emg_wrapper_s2io_set_features(emg_17_container,emg_17_emg_param_1_16);
    #line 701 
    break;
    #line 703 
    case 11: 
             #line 703 
    ;
    #line 705 
    emg_wrapper_s2io_netpoll(emg_17_container);
    #line 707 
    break;
    #line 709 
    case 12: 
             #line 709 
    ;
    #line 711 
    emg_wrapper_s2io_get_stats(emg_17_container);
    #line 713 
    break;
    #line 715 
    case 13: 
             #line 715 
    ;
    #line 717 
    emg_17_emg_param_1_14 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 717 
    emg_17_emg_param_1_14 = emg_17_emg_param_1_14;
    #line 721 
    emg_wrapper_s2io_ioctl(emg_17_container,emg_17_emg_param_1_14,emg_17_emg_param_2_15);
    #line 725 
    ldv_free((void *)emg_17_emg_param_1_14);
    #line 727 
    break;
    #line 729 
    case 14: 
             #line 729 
    ;
    #line 731 
    emg_wrapper_s2io_change_mtu(emg_17_container,emg_17_emg_param_1_13);
    #line 733 
    break;
    #line 735 
    case 15: 
             #line 735 
    ;
    #line 737 
    emg_17_emg_param_2_12 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 737 
    emg_17_emg_param_2_12 = emg_17_emg_param_2_12;
    #line 741 
    emg_wrapper_s2io_ethtool_get_strings(emg_17_container,emg_17_emg_param_1_11,emg_17_emg_param_2_12);
    #line 745 
    ldv_free((void *)emg_17_emg_param_2_12);
    #line 747 
    break;
    #line 749 
    case 16: 
             #line 749 
    ;
    #line 751 
    emg_wrapper_s2io_get_sset_count(emg_17_container,emg_17_emg_param_1_10);
    #line 753 
    break;
    #line 755 
    case 17: 
             #line 755 
    ;
    #line 757 
    emg_17_emg_param_1_9 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 757 
    emg_17_emg_param_1_9 = emg_17_emg_param_1_9;
    #line 761 
    emg_wrapper_s2io_ethtool_gringparam(emg_17_container,emg_17_emg_param_1_9);
    #line 765 
    ldv_free((void *)emg_17_emg_param_1_9);
    #line 767 
    break;
    #line 769 
    case 18: 
             #line 769 
    ;
    #line 771 
    emg_wrapper_s2io_ethtool_get_regs_len(emg_17_container);
    #line 773 
    break;
    #line 775 
    case 19: 
             #line 775 
    ;
    #line 777 
    emg_17_emg_param_1_7 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 777 
    emg_17_emg_param_1_7 = emg_17_emg_param_1_7;
    #line 778 
    emg_17_emg_param_2_8 = ldv_xmalloc_unknown_size(0UL);
    #line 778 
    emg_17_emg_param_2_8 = emg_17_emg_param_2_8;
    #line 782 
    emg_wrapper_s2io_ethtool_gregs(emg_17_container,emg_17_emg_param_1_7,emg_17_emg_param_2_8);
    #line 786 
    ldv_free((void *)emg_17_emg_param_1_7);
    #line 787 
    ldv_free(emg_17_emg_param_2_8);
    #line 789 
    break;
    #line 791 
    case 20: 
             #line 791 
    ;
    #line 793 
    emg_17_emg_param_1_6 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 793 
    emg_17_emg_param_1_6 = emg_17_emg_param_1_6;
    #line 797 
    emg_wrapper_s2io_ethtool_getpause_data(emg_17_container,emg_17_emg_param_1_6);
    #line 801 
    ldv_free((void *)emg_17_emg_param_1_6);
    #line 803 
    break;
    #line 805 
    case 21: 
             #line 805 
    ;
    #line 807 
    emg_17_emg_param_1_5 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 807 
    emg_17_emg_param_1_5 = emg_17_emg_param_1_5;
    #line 811 
    emg_wrapper_s2io_ethtool_get_link_ksettings(emg_17_container,emg_17_emg_param_1_5);
    #line 815 
    ldv_free((void *)emg_17_emg_param_1_5);
    #line 817 
    break;
    #line 819 
    case 22: 
             #line 819 
    ;
    #line 821 
    ethtool_op_get_link(emg_17_container);
    #line 823 
    break;
    #line 825 
    case 23: 
             #line 825 
    ;
    #line 827 
    emg_17_emg_param_1_3 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 827 
    emg_17_emg_param_1_3 = emg_17_emg_param_1_3;
    #line 828 
    emg_17_emg_param_2_4 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 828 
    emg_17_emg_param_2_4 = emg_17_emg_param_2_4;
    #line 832 
    emg_wrapper_s2io_get_ethtool_stats(emg_17_container,emg_17_emg_param_1_3,emg_17_emg_param_2_4);
    #line 836 
    ldv_free((void *)emg_17_emg_param_1_3);
    #line 837 
    ldv_free((void *)emg_17_emg_param_2_4);
    #line 839 
    break;
    #line 841 
    case 24: 
             #line 841 
    ;
    #line 843 
    emg_wrapper_s2io_get_eeprom_len(emg_17_container);
    #line 845 
    break;
    #line 847 
    case 25: 
             #line 847 
    ;
    #line 849 
    emg_17_emg_param_1_1 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 849 
    emg_17_emg_param_1_1 = emg_17_emg_param_1_1;
    #line 850 
    emg_17_emg_param_2_2 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 850 
    emg_17_emg_param_2_2 = emg_17_emg_param_2_2;
    #line 854 
    emg_wrapper_s2io_ethtool_geeprom(emg_17_container,emg_17_emg_param_1_1,emg_17_emg_param_2_2);
    #line 858 
    ldv_free((void *)emg_17_emg_param_1_1);
    #line 859 
    ldv_free((void *)emg_17_emg_param_2_2);
    #line 861 
    break;
    #line 863 
    case 26: 
             #line 863 
    ;
    #line 865 
    emg_17_emg_param_1_0 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 865 
    emg_17_emg_param_1_0 = emg_17_emg_param_1_0;
    #line 869 
    emg_wrapper_s2io_ethtool_gdrvinfo(emg_17_container,emg_17_emg_param_1_0);
    #line 873 
    ldv_free((void *)emg_17_emg_param_1_0);
    #line 876 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 877 
      emg_repeat_cnt_call_17 --;
      #line 879 
      goto emg_call_17;
    }
    else 
         #line 881 
         __VERIFIER_assume(0);
    #line 885 
    break;
    #line 887 
    case 27: 
             #line 887 
    ;
    #line 891 
    break;
    #line 893 
    default: 
             #line 893 
    ;
    #line 893 
    __VERIFIER_assume(0);
  }
  #line 896 
  return (void *)0;
}

#line 901  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_s2io_driver(void *arg0)
{
  #line 904 
  int emg_18_choice;
  #line 905 
  struct pci_driver *emg_18_container;
  #line 906 
  struct pci_device_id *emg_18_device_id;
  #line 907 
  struct pci_dev *emg_18_resource_0;
  #line 908 
  struct pm_message emg_18_resource_1;
  #line 909 
  int emg_18_ret;
  #line 910 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 911 
  int emg_repeat_cnt_call_18_1 = 1;
  #line 912 
  int emg_repeat_cnt_call_18_0 = 1;
  #line 913 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 915 
  struct emg_struct_pci_scenario_s2io_driver_18 *data = (struct emg_struct_pci_scenario_s2io_driver_18 *)arg0;
  #line 919 
  emg_18_choice = 0;
  #line 920 
  emg_18_ret = ldv_undef_int();
  #line 921 
  emg_18_choice = 0;
  #line 922 
  emg_18_container = emg_alias_s2io_driver;
  #line 923 
  emg_18_ret = ldv_undef_int();
  #line 925 
  __VERIFIER_assume(data->arg0 == emg_alias_s2io_driver);
  #line 927 
  if (data != (struct emg_struct_pci_scenario_s2io_driver_18 *)0) {
    #line 928 
    emg_18_container = data->arg0;
    #line 929 
    ldv_free((void *)data);
  }
  #line 934 
  emg_18_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 935 
  emg_18_choice = __ldv_undef_int_range(0,4);
  #line 936 
  emg_18_device_id = emg_18_container->id_table + (unsigned long)emg_18_choice;
  #line 940 
  goto emg_main_18;
  #line 944 
  return (void *)0;
  #line 947 
  emg_call_18: 
               #line 947 
  ;
  #line 948 
  switch (ldv_undef_int()) {
    #line 949 
    case 0: 
            #line 949 
    ;
    #line 954 
    if (emg_repeat_cnt_call_18_0 > 0) {
      #line 955 
      emg_repeat_cnt_call_18_0 --;
      #line 957 
      goto emg_call_18;
    }
    else 
         #line 959 
         __VERIFIER_assume(0);
    #line 963 
    break;
    #line 965 
    case 1: 
            #line 965 
    ;
    #line 967 
    if (emg_18_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 968 
      emg_18_ret = (*(emg_18_container->suspend))(emg_18_resource_0,emg_18_resource_1); else 
                                                                    #line 970 
                                                                    emg_18_ret = ldv_undef_int();
    #line 976 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 980 
    if (emg_18_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 981 
                                                                  (*(emg_18_container->resume))(emg_18_resource_0);
    #line 985 
    if (emg_repeat_cnt_call_18_1 > 0) {
      #line 986 
      emg_repeat_cnt_call_18_1 --;
      #line 988 
      goto emg_call_18;
    }
    else 
         #line 990 
         __VERIFIER_assume(0);
    #line 994 
    break;
    #line 996 
    case 2: 
            #line 996 
    ;
    #line 998 
    if (emg_18_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 999 
      (*(emg_18_container->shutdown))(emg_18_resource_0);
    #line 1004 
    emg_wrapper_s2io_rem_nic(emg_18_resource_0);
    #line 1007 
    if (emg_repeat_cnt_main_18_0 > 0) {
      #line 1008 
      emg_repeat_cnt_main_18_0 --;
      #line 1010 
      goto emg_main_18;
    }
    else 
         #line 1012 
         __VERIFIER_assume(0);
    #line 1016 
    break;
    #line 1018 
    default: 
             #line 1018 
    ;
    #line 1018 
    __VERIFIER_assume(0);
  }
  #line 1021 
  return (void *)0;
  #line 1024 
  emg_main_18: 
               #line 1024 
  ;
  #line 1025 
  if (ldv_undef_int() != 0) {
    #line 1028 
    ldv_pre_probe();
    #line 1032 
    emg_18_ret = emg_wrapper_s2io_init_nic(emg_18_resource_0,emg_18_device_id);
    #line 1037 
    emg_18_ret = ldv_post_probe(emg_18_ret);
    #line 1040 
    if (ldv_undef_int() != 0) {
      #line 1042 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 1046 
      goto emg_call_18;
    }
    else 
         #line 1051 
         __VERIFIER_assume(emg_18_ret != 0);
    #line 1055 
    if (emg_repeat_cnt_main_18_1 > 0) {
      #line 1056 
      emg_repeat_cnt_main_18_1 --;
      #line 1058 
      goto emg_main_18;
    }
    else 
         #line 1060 
         __VERIFIER_assume(0);
  }
  else 
       #line 1066 
       ldv_free((void *)emg_18_resource_0);
  #line 1074 
  return (void *)0;
}

#line 1079  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_6(void *arg0)
{
  #line 1082 
  struct timer_list *emg_19_container;
  #line 1083 
  unsigned long emg_19_emg_param_0_0;
  #line 1085 
  struct emg_struct_timer_scenario_6_19 *data = (struct emg_struct_timer_scenario_6_19 *)arg0;
  #line 1090 
  if (data != (struct emg_struct_timer_scenario_6_19 *)0) {
    #line 1091 
    emg_19_container = data->arg0;
    #line 1092 
    ldv_free((void *)data);
  }
  #line 1098 
  ldv_switch_to_interrupt_context();
  #line 1102 
  if (emg_19_container->function != (void (*)(struct timer_list *))0) 
    #line 1103 
    (*(emg_19_container->function))((struct timer_list *)emg_19_emg_param_0_0);
  #line 1109 
  ldv_switch_to_process_context();
  #line 1116 
  return (void *)0;
}

#line 1121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1124 
  struct pci_driver *emg_2_pci_driver;
  #line 1126 
  emg_2_pci_driver = emg_alias_s2io_driver;
  #line 1127 
  if (ldv_undef_int() != 0) {
    #line 1129 
    emg_2_pci_driver = arg0;
    #line 1133 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1137 
    return 0;
  }
  else {
    #line 1141 
    return ldv_undef_int_negative();
  }
}

#line 1149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1152 
  struct net_device *emg_3_netdev;
  #line 1154 
  if (ldv_undef_int() != 0) {
    #line 1156 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1160 
    return emg_3_netdev;
  }
  else 
       #line 1164 
       return (struct net_device *)0;
}

#line 1172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 1175 
  struct timer_list *emg_4_timer_list;
  #line 1178 
  emg_4_timer_list = arg0;
  #line 1182 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 1183 
  ;
  #line 1183 
  return 0;
}

#line 1189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1192 
  int emg_5_line;
  #line 1195 
  emg_5_line = (int)arg0;
  #line 1199 
  emg_dispatch_irq_deregister_5(emg_5_line);
  #line 1200 
  ;
  #line 1200 
  return (void *)0;
}

#line 1206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1209 
  struct net_device *emg_6_netdev;
  #line 1212 
  emg_6_netdev = arg0;
  #line 1213 
  ldv_free((void *)emg_6_netdev);
  #line 1216 
  return;
}

#line 1221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 1224 
  struct timer_list *emg_7_timer_list;
  #line 1226 
  if (ldv_undef_int() != 0) {
    #line 1228 
    emg_7_timer_list = arg0;
    #line 1232 
    emg_dispatch_instance_register_7(emg_7_timer_list);
    #line 1236 
    return 1;
  }
  else 
       #line 1240 
       return 0;
}

#line 1248  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1251 
  struct pci_driver *emg_8_pci_driver;
  #line 1253 
  emg_8_pci_driver = emg_alias_s2io_driver;
  #line 1255 
  emg_8_pci_driver = arg0;
  #line 1259 
  emg_dispatch_deregister_8(emg_8_pci_driver);
  #line 1262 
  return;
}

#line 1267  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1270 
  struct net_device *emg_9_netdev;
  #line 1271 
  int emg_9_ret;
  #line 1274 
  emg_9_ret = ldv_undef_int();
  #line 1275 
  emg_9_ret = ldv_undef_int();
  #line 1276 
  if (ldv_undef_int() != 0) {
    #line 1278 
    emg_9_netdev = arg0;
    #line 1282 
    emg_9_ret = emg_wrapper_s2io_open(emg_9_netdev);
    #line 1285 
    if (ldv_undef_int() != 0) {
      #line 1287 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 1291 
      emg_dispatch_register_9(emg_9_netdev);
      #line 1295 
      return 0;
    }
    else {
      #line 1299 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 1300 
      ldv_failed_register_netdev();
      #line 1301 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1306 
    ldv_failed_register_netdev();
    #line 1307 
    return ldv_undef_int_negative();
  }
}

#line 1315  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1318 
  enum irqreturn (*emg_10_callback)(int , void *);
  #line 1319 
  void *emg_10_data;
  #line 1320 
  int emg_10_line;
  #line 1321 
  enum irqreturn (*emg_10_thread)(int , void *);
  #line 1323 
  emg_10_callback = & emg_wrapper_s2io_isr;
  #line 1324 
  if (ldv_undef_int() != 0) {
    #line 1326 
    emg_10_line = (int)arg0;
    #line 1327 
    emg_10_callback = arg1;
    #line 1328 
    emg_10_thread = (enum irqreturn (*)(int , void *))0;
    #line 1329 
    emg_10_data = arg4;
    #line 1333 
    emg_dispatch_irq_register_10(emg_10_line,emg_10_callback,emg_10_thread,emg_10_data);
    #line 1337 
    return 0;
  }
  else {
    #line 1341 
    return ldv_undef_int_negative();
  }
}

#line 1349  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 1352 
  struct work_struct *emg_11_work_struct;
  #line 1354 
  if (ldv_undef_int() != 0) {
    #line 1356 
    emg_11_work_struct = arg0;
    #line 1360 
    if (emg_11_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1361 
      (*(emg_11_work_struct->func))(emg_11_work_struct);
    #line 1366 
    return (_Bool)1;
  }
  else 
       #line 1370 
       return (_Bool)0;
}

#line 1378  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1381 
  struct net_device *emg_12_netdev;
  #line 1384 
  emg_12_netdev = arg0;
  #line 1388 
  emg_wrapper_s2io_close(emg_12_netdev);
  #line 1392 
  emg_dispatch_deregister_12(emg_12_netdev);
  #line 1395 
  return;
}

#line 1400  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1403 
  int emg_1_ret;
  #line 1406 
  emg_1_ret = emg_s2io_driver_init();
  #line 1407 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1410 
  if (ldv_undef_int() != 0) {
    #line 1412 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1416 
    emg_s2io_driver_exit();
  }
  else 
       #line 1420 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1424 
  return (void *)0;
}

#line 1429  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/s2io.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1431 
  ldv_initialize();
  #line 1433 
  emg_entry_point_insmod((void *)0);
  #line 1435 
  return 0;
}

