/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned char u_char;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short u_short;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int u_int;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long u_long;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long ulong;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/smt.i.aux"
struct task_struct;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddi.h"
struct fddi_addr {
   u_char a[6U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/osdef1st.h"
struct sk_buff;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/osdef1st.h"
struct s_txd_os {
   struct sk_buff *skb ;
   dma_addr_t dma_addr ;
};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/osdef1st.h"
struct s_rxd_os {
   struct sk_buff *skb ;
   dma_addr_t dma_addr ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_sid {
   u_char sid_oem[2U] ;
   struct fddi_addr sid_node ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_header {
   struct fddi_addr smt_dest ;
   struct fddi_addr smt_source ;
   u_char smt_class ;
   u_char smt_type ;
   u_short smt_version ;
   u_int smt_tid ;
   struct smt_sid smt_sid ;
   u_short smt_pad ;
   u_short smt_len ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_para {
   u_short p_type ;
   u_short p_len ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_una {
   struct smt_para para ;
   u_short una_pad ;
   struct fddi_addr una_node ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_sde {
   struct smt_para para ;
   u_char sde_type ;
   u_char sde_mac_count ;
   u_char sde_non_master ;
   u_char sde_master ;
};
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_state {
   struct smt_para para ;
   u_short st_pad ;
   u_char st_topology ;
   u_char st_dupl_addr ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_timestamp {
   struct smt_para para ;
   u_char ts_time[8U] ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_policy {
   struct smt_para para ;
   u_short pl_config ;
   u_short pl_connect ;
};
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_latency {
   struct smt_para para ;
   u_short lt_phyout_idx1 ;
   u_short lt_latency1 ;
   u_short lt_phyout_idx2 ;
   u_short lt_latency2 ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_neighbor {
   struct smt_para para ;
   u_short nb_mib_index ;
   u_short nb_mac_index ;
   struct fddi_addr nb_una ;
   struct fddi_addr nb_dna ;
};
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_phy_rec {
   u_short phy_mib_index ;
   u_char phy_type ;
   u_char phy_connect_state ;
   u_char phy_remote_type ;
   u_char phy_remote_mac ;
   u_short phy_resource_idx ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_mac_rec {
   struct fddi_addr mac_addr ;
   u_short mac_resource_idx ;
};
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_path {
   struct smt_para para ;
   struct smt_phy_rec pd_phy[2U] ;
   struct smt_mac_rec pd_mac ;
};
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_mac_status {
   struct smt_para para ;
   u_short st_mib_index ;
   u_short st_mac_index ;
   u_int st_t_req ;
   u_int st_t_neg ;
   u_int st_t_max ;
   u_int st_tvx_value ;
   u_int st_t_min ;
   u_int st_sba ;
   u_int st_frame_ct ;
   u_int st_error_ct ;
   u_int st_lost_ct ;
};
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_lem {
   struct smt_para para ;
   u_short lem_mib_index ;
   u_short lem_phy_index ;
   u_char lem_pad2 ;
   u_char lem_cutoff ;
   u_char lem_alarm ;
   u_char lem_estimate ;
   u_int lem_reject_ct ;
   u_int lem_ct ;
};
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_mac_counter {
   struct smt_para para ;
   u_short mc_mib_index ;
   u_short mc_index ;
   u_int mc_receive_ct ;
   u_int mc_transmit_ct ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_mac_fnc {
   struct smt_para para ;
   u_short nc_mib_index ;
   u_short nc_index ;
   u_int nc_counter ;
};
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smp_p_manufacturer {
   struct smt_para para ;
   u_char mf_data[32U] ;
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smp_p_user {
   struct smt_para para ;
   u_char us_data[32U] ;
};
#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_echo {
   struct smt_para para ;
   u_char ec_data[4454U] ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_reason {
   struct smt_para para ;
   u_int rdf_reason ;
};
#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_refused {
   struct smt_para para ;
   u_int ref_fc ;
   struct smt_header ref_header ;
};
#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_version {
   struct smt_para para ;
   u_short v_pad ;
   u_char v_n ;
   u_char v_index ;
   u_short v_version[1U] ;
   u_short v_pad2 ;
};
#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_fsc {
   struct smt_para para ;
   u_short fsc_pad0 ;
   u_short fsc_mac_index ;
   u_short fsc_pad1 ;
   u_short fsc_value ;
};
#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_setcount {
   struct smt_para para ;
   u_int count ;
   u_char timestamp[8U] ;
};
#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_nif {
   struct smt_header smt ;
   struct smt_p_una una ;
   struct smt_p_sde sde ;
   struct smt_p_state state ;
   struct smt_p_fsc fsc ;
};
#line 737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_sif_config {
   struct smt_header smt ;
   struct smt_p_timestamp ts ;
   struct smt_p_sde sde ;
   struct smt_p_version version ;
   struct smt_p_state state ;
   struct smt_p_policy policy ;
   struct smt_p_latency latency ;
   struct smt_p_neighbor neighbor ;
   struct smt_p_setcount setcount ;
   struct smt_p_path path ;
};
#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_sif_operation {
   struct smt_header smt ;
   struct smt_p_timestamp ts ;
   struct smt_p_mac_status status ;
   struct smt_p_mac_counter mc ;
   struct smt_p_mac_fnc fnc ;
   struct smp_p_manufacturer man ;
   struct smp_p_user user ;
   struct smt_p_setcount setcount ;
   struct smt_p_lem lem[1U] ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_ecf {
   struct smt_header smt ;
   struct smt_p_echo ec_echo ;
};
#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_rdf {
   struct smt_header smt ;
   struct smt_p_reason reason ;
   struct smt_p_version version ;
   struct smt_p_refused refused ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
struct s_smc;
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
struct smt_timer {
   struct smt_timer *tm_next ;
   struct s_smc *tm_smc ;
   u_long tm_delta ;
   u_long tm_token ;
   u_short tm_active ;
   u_short tm_pad ;
};
#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
struct mac_parameter {
   u_long t_neg ;
   u_long t_pri ;
};
#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
struct mac_counter {
   u_long mac_nobuf_counter ;
   u_long mac_r_restart_counter ;
};
#line 426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
struct lem_counter {
   u_short lem_float_ber ;
   u_long lem_errors ;
   u_short lem_on ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
struct s_plc {
   u_short p_state ;
   u_short p_bits ;
   u_short p_start ;
   u_short p_pad ;
   u_long soft_err ;
   u_long parity_err ;
   u_long ebuf_err ;
   u_long ebuf_cont ;
   u_long phyinv ;
   u_long vsym_ctr ;
   u_long mini_ctr ;
   u_long tpc_exp ;
   u_long np_err ;
   u_long b_pcs ;
   u_long b_tpc ;
   u_long b_tne ;
   u_long b_qls ;
   u_long b_ils ;
   u_long b_hls ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/mbuf.h"
struct s_mbuf {
   struct s_mbuf *m_next ;
   short m_off ;
   u_int m_len ;
   int sm_use_count ;
   char m_data[4504U] ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/mbuf.h"
typedef struct s_mbuf Mbuf;
#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
typedef u_long Counter;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
typedef u_char TimeStamp[8U];
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
typedef struct fddi_addr LongAddr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
typedef u_long Timer_2;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
typedef u_long Timer;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
typedef u_short ResId;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
typedef u_short SMTEnum;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
typedef u_char SMTFlag;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
struct __anonstruct_SetCountType_104 {
   Counter count ;
   TimeStamp timestamp ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
typedef struct __anonstruct_SetCountType_104 SetCountType;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
struct fddi_mib_m {
   u_short fddiMACFrameStatusFunctions ;
   Timer_2 fddiMACT_MaxCapabilitiy ;
   Timer_2 fddiMACTVXCapabilitiy ;
   u_char fddiMACMultiple_N ;
   u_char fddiMACMultiple_P ;
   u_char fddiMACDuplicateAddressCond ;
   u_char fddiMACAvailablePaths ;
   u_short fddiMACCurrentPath ;
   LongAddr fddiMACUpstreamNbr ;
   LongAddr fddiMACDownstreamNbr ;
   LongAddr fddiMACOldUpstreamNbr ;
   LongAddr fddiMACOldDownstreamNbr ;
   SMTEnum fddiMACDupAddressTest ;
   u_short fddiMACRequestedPaths ;
   SMTEnum fddiMACDownstreamPORTType ;
   ResId fddiMACIndex ;
   LongAddr fddiMACSMTAddress ;
   Timer_2 fddiMACT_Min ;
   Timer_2 fddiMACT_ReqMIB ;
   Timer_2 fddiMACT_Req ;
   Timer_2 fddiMACT_Neg ;
   Timer_2 fddiMACT_MaxMIB ;
   Timer_2 fddiMACT_Max ;
   Timer_2 fddiMACTvxValueMIB ;
   Timer_2 fddiMACTvxValue ;
   Timer_2 fddiMACT_Pri0 ;
   Timer_2 fddiMACT_Pri1 ;
   Timer_2 fddiMACT_Pri2 ;
   Timer_2 fddiMACT_Pri3 ;
   Timer_2 fddiMACT_Pri4 ;
   Timer_2 fddiMACT_Pri5 ;
   Timer_2 fddiMACT_Pri6 ;
   Counter fddiMACFrame_Ct ;
   Counter fddiMACCopied_Ct ;
   Counter fddiMACTransmit_Ct ;
   Counter fddiMACToken_Ct ;
   Counter fddiMACError_Ct ;
   Counter fddiMACLost_Ct ;
   Counter fddiMACTvxExpired_Ct ;
   Counter fddiMACNotCopied_Ct ;
   Counter fddiMACRingOp_Ct ;
   Counter fddiMACSMTCopied_Ct ;
   Counter fddiMACSMTTransmit_Ct ;
   Counter fddiMACOld_Frame_Ct ;
   Counter fddiMACOld_Copied_Ct ;
   Counter fddiMACOld_Error_Ct ;
   Counter fddiMACOld_Lost_Ct ;
   Counter fddiMACOld_NotCopied_Ct ;
   u_short fddiMACFrameErrorThreshold ;
   u_short fddiMACFrameErrorRatio ;
   u_short fddiMACNotCopiedThreshold ;
   u_short fddiMACNotCopiedRatio ;
   SMTEnum fddiMACRMTState ;
   SMTFlag fddiMACDA_Flag ;
   SMTFlag fddiMACUNDA_Flag ;
   SMTFlag fddiMACFrameErrorFlag ;
   SMTFlag fddiMACNotCopiedFlag ;
   SMTFlag fddiMACMA_UnitdataAvailable ;
   SMTFlag fddiMACHardwarePresent ;
   SMTFlag fddiMACMA_UnitdataEnable ;
};
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
struct fddi_mib_a {
   ResId fddiPATHIndex ;
   u_long fddiPATHSbaPayload ;
   u_long fddiPATHSbaOverhead ;
   Timer fddiPATHT_Rmode ;
   u_long fddiPATHSbaAvailable ;
   Timer_2 fddiPATHTVXLowerBound ;
   Timer_2 fddiPATHT_MaxLowerBound ;
   Timer_2 fddiPATHMaxT_Req ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
struct __anonstruct_fddiPORTMacIndicated_105 {
   u_char T_val ;
   u_char R_val ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
struct fddi_mib_p {
   SMTEnum fddiPORTMy_Type ;
   SMTEnum fddiPORTNeighborType ;
   u_char fddiPORTConnectionPolicies ;
   struct __anonstruct_fddiPORTMacIndicated_105 fddiPORTMacIndicated ;
   SMTEnum fddiPORTCurrentPath ;
   u_char fddiPORTRequestedPaths[4U] ;
   u_short fddiPORTMACPlacement ;
   u_char fddiPORTAvailablePaths ;
   u_char fddiPORTConnectionCapabilities ;
   SMTEnum fddiPORTPMDClass ;
   ResId fddiPORTIndex ;
   SMTEnum fddiPORTMaint_LS ;
   SMTEnum fddiPORTPC_LS ;
   u_char fddiPORTBS_Flag ;
   Counter fddiPORTLCTFail_Ct ;
   Counter fddiPORTEBError_Ct ;
   Counter fddiPORTOldEBError_Ct ;
   Counter fddiPORTLem_Reject_Ct ;
   Counter fddiPORTLem_Ct ;
   u_char fddiPORTLer_Estimate ;
   u_char fddiPORTLer_Cutoff ;
   u_char fddiPORTLer_Alarm ;
   SMTEnum fddiPORTConnectState ;
   SMTEnum fddiPORTPCMState ;
   SMTEnum fddiPORTPCMStateX ;
   SMTEnum fddiPORTPC_Withhold ;
   SMTFlag fddiPORTHardwarePresent ;
   u_char fddiPORTLerFlag ;
   u_char fddiPORTMultiple_U ;
   u_char fddiPORTMultiple_P ;
   u_char fddiPORTEB_Condition ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
struct __anonstruct_priv_106 {
   Counter fddiPRIVECF_Req_Rx ;
   Counter fddiPRIVECF_Reply_Rx ;
   Counter fddiPRIVECF_Req_Tx ;
   Counter fddiPRIVECF_Reply_Tx ;
   Counter fddiPRIVPMF_Get_Rx ;
   Counter fddiPRIVPMF_Set_Rx ;
   Counter fddiPRIVRDF_Rx ;
   Counter fddiPRIVRDF_Tx ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddimib.h"
struct fddi_mib {
   u_char fddiPRPMFPasswd[8U] ;
   struct smt_sid fddiPRPMFStation ;
   u_long fddiESSPayload ;
   u_long fddiESSOverhead ;
   u_long fddiESSMaxTNeg ;
   u_long fddiESSMinSegmentSize ;
   u_long fddiESSCategory ;
   short fddiESSSynchTxMode ;
   struct smt_sid fddiSMTStationId ;
   u_short fddiSMTOpVersionId ;
   u_short fddiSMTHiVersionId ;
   u_short fddiSMTLoVersionId ;
   u_char fddiSMTManufacturerData[32U] ;
   u_char fddiSMTUserData[32U] ;
   u_short fddiSMTMIBVersionId ;
   u_char fddiSMTMac_Ct ;
   u_char fddiSMTNonMaster_Ct ;
   u_char fddiSMTMaster_Ct ;
   u_char fddiSMTAvailablePaths ;
   u_short fddiSMTConfigCapabilities ;
   u_short fddiSMTConfigPolicy ;
   u_short fddiSMTConnectionPolicy ;
   u_short fddiSMTTT_Notify ;
   u_char fddiSMTStatRptPolicy ;
   u_long fddiSMTTrace_MaxExpiration ;
   u_short fddiSMTPORTIndexes[2U] ;
   u_short fddiSMTMACIndexes ;
   u_char fddiSMTBypassPresent ;
   SMTEnum fddiSMTECMState ;
   SMTEnum fddiSMTCF_State ;
   SMTEnum fddiSMTStationStatus ;
   u_char fddiSMTRemoteDisconnectFlag ;
   u_char fddiSMTPeerWrapFlag ;
   TimeStamp fddiSMTTimeStamp ;
   TimeStamp fddiSMTTransitionTimeStamp ;
   SetCountType fddiSMTSetCount ;
   struct smt_sid fddiSMTLastSetStationId ;
   struct fddi_mib_m m[1U] ;
   struct fddi_mib_a a[2U] ;
   struct fddi_mib_p p[2U] ;
   struct __anonstruct_priv_106 priv ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fplustm.h"
struct err_st {
   u_long err_valid ;
   u_long err_abort ;
   u_long err_e_indicator ;
   u_long err_crc ;
   u_long err_llc_frame ;
   u_long err_mac_frame ;
   u_long err_smt_frame ;
   u_long err_imp_frame ;
   u_long err_no_buf ;
   u_long err_too_long ;
   u_long err_bec_stat ;
   u_long err_clm_stat ;
   u_long err_sifg_det ;
   u_long err_phinv ;
   u_long err_tkiss ;
   u_long err_tkerr ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fplustm.h"
struct s_smt_fp_txd {
   __le32 txd_tbctrl ;
   __le32 txd_txdscr ;
   __le32 txd_tbadr ;
   __le32 txd_ntdadr ;
   char *txd_virt ;
   struct s_smt_fp_txd *txd_next ;
   struct s_txd_os txd_os ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fplustm.h"
struct s_smt_fp_rxd {
   __le32 rxd_rbctrl ;
   __le32 rxd_rfsw ;
   __le32 rxd_rbadr ;
   __le32 rxd_nrdadr ;
   char *rxd_virt ;
   struct s_smt_fp_rxd *rxd_next ;
   struct s_rxd_os rxd_os ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fplustm.h"
union s_fp_descr {
   struct s_smt_fp_txd t ;
   struct s_smt_fp_rxd r ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fplustm.h"
struct s_smt_tx_queue {
   struct s_smt_fp_txd *tx_curr_put ;
   struct s_smt_fp_txd *tx_prev_put ;
   struct s_smt_fp_txd *tx_curr_get ;
   u_short tx_free ;
   u_short tx_used ;
   void *tx_bmu_ctl ;
   void *tx_bmu_dsc ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fplustm.h"
struct s_smt_rx_queue {
   struct s_smt_fp_rxd *rx_curr_put ;
   struct s_smt_fp_rxd *rx_prev_put ;
   struct s_smt_fp_rxd *rx_curr_get ;
   u_short rx_free ;
   u_short rx_used ;
   void *rx_bmu_ctl ;
   void *rx_bmu_dsc ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fplustm.h"
struct s_smt_fifo_conf {
   u_short rbc_ram_start ;
   u_short rbc_ram_end ;
   u_short rx1_fifo_start ;
   u_short rx1_fifo_size ;
   u_short rx2_fifo_start ;
   u_short rx2_fifo_size ;
   u_short tx_s_start ;
   u_short tx_s_size ;
   u_short tx_a0_start ;
   u_short tx_a0_size ;
   u_short fifo_config_mode ;
};
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fplustm.h"
struct fddi_mac_sf {
   u_char mac_fc ;
   struct fddi_addr mac_dest ;
   struct fddi_addr mac_source ;
   u_char mac_info[32U] ;
};
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fplustm.h"
struct s_fpmc {
   struct fddi_addr a ;
   u_char n ;
   u_char perm ;
};
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fplustm.h"
struct __anonstruct_mc_107 {
   struct s_fpmc table[32U] ;
};
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fplustm.h"
struct s_smt_fp {
   u_short mdr2init ;
   u_short mdr3init ;
   u_short frselreg_init ;
   u_short rx_mode ;
   u_short nsa_mode ;
   u_short rx_prom ;
   u_short exgpa ;
   struct err_st err_stats ;
   struct fddi_mac_sf mac_sfb ;
   struct s_smt_tx_queue *tx[2U] ;
   struct s_smt_rx_queue *rx[2U] ;
   struct s_smt_tx_queue tx_q[2U] ;
   struct s_smt_rx_queue rx_q[2U] ;
   struct s_smt_fifo_conf fifo ;
   u_short s2u ;
   u_short s2l ;
   void *fm_st1u ;
   void *fm_st1l ;
   void *fm_st2u ;
   void *fm_st2l ;
   void *fm_st3u ;
   void *fm_st3l ;
   struct __anonstruct_mc_107 mc ;
   struct fddi_addr group_addr ;
   u_long func_addr ;
   int smt_slots_used ;
   int os_slots_used ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/targethw.h"
struct s_smt_hw {
   void *iop ;
   short dma ;
   short irq ;
   short eprom ;
   short slot ;
   short max_slots ;
   short wdog_used ;
   u_short pci_handle ;
   u_long is_imask ;
   u_long phys_mem_addr ;
   u_short mc_dummy ;
   u_short hw_state ;
   int hw_is_64bit ;
   u_long pci_fix_value ;
   u_long t_start ;
   u_long t_stop ;
   u_short timer_activ ;
   u_char pic_a1 ;
   u_char pic_21 ;
   struct fddi_addr fddi_home_addr ;
   struct fddi_addr fddi_canon_addr ;
   struct fddi_addr fddi_phys_addr ;
   struct mac_parameter mac_pa ;
   struct mac_counter mac_ct ;
   u_short mac_ring_is_up ;
   struct s_smt_fp fp ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
struct pci_dev;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_125 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_125 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_172 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_172 nodemask_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 212 
struct ldt_struct;
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct __anonstruct_mm_context_t_173 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
typedef struct __anonstruct_mm_context_t_173 mm_context_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct workqueue_struct;
#line 48 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_188 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_189 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_187 {
   struct __anonstruct_188 __anonCompField___anonunion_187_29 ;
   struct __anonstruct_189 __anonCompField___anonunion_187_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_187 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 141 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_191 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_192 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_195 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_194 {
   struct list_head slab_list ;
   struct __anonstruct_195 __anonCompField___anonunion_194_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_197 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_196 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_197 __anonCompField___anonunion_196_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_193 {
   union __anonunion_194 __anonCompField___anonstruct_193_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_196 __anonCompField___anonstruct_193_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_198 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_199 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_201 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_200 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_201 __anonCompField___anonstruct_200_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_202 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_190 {
   struct __anonstruct_191 __anonCompField___anonunion_190_32 ;
   struct __anonstruct_192 __anonCompField___anonunion_190_33 ;
   struct __anonstruct_193 __anonCompField___anonunion_190_38 ;
   struct __anonstruct_198 __anonCompField___anonunion_190_39 ;
   struct __anonstruct_199 __anonCompField___anonunion_190_40 ;
   struct __anonstruct_200 __anonCompField___anonunion_190_42 ;
   struct __anonstruct_202 __anonCompField___anonunion_190_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_203 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_190 __anonCompField_page_44 ;
   union __anonunion_203 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_204 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_204 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_205 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_205 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_256 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_256 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_257 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_257 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sched.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_284 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_284 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_285 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_286 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_287 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_288 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_291 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_292 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_290 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_291 _addr_bnd ;
   struct __anonstruct__addr_pkey_292 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_289 {
   void *_addr ;
   union __anonunion_290 __anonCompField___anonstruct__sigfault_289_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_293 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_294 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_285 _kill ;
   struct __anonstruct__timer_286 _timer ;
   struct __anonstruct__rt_287 _rt ;
   struct __anonstruct__sigchld_288 _sigchld ;
   struct __anonstruct__sigfault_289 _sigfault ;
   struct __anonstruct__sigpoll_293 _sigpoll ;
   struct __anonstruct__sigsys_294 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_299 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_299 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_304 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_304 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_306 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_306 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_385 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_387 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_386 {
   unsigned long nr_segs ;
   struct __anonstruct_387 __anonCompField___anonunion_386_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_385 __anonCompField_iov_iter_53 ;
   union __anonunion_386 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_390 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_390 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_391 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_391 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_392 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_392 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_393 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_393 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_394 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_394 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_395 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_395 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_396 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_396 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_397 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_397 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_398 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_399 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_398 ifr_ifrn ;
   union __anonunion_ifr_ifru_399 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_414 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_413 {
   struct __anonstruct_414 __anonCompField___anonunion_413_58 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_413 __anonCompField_lockref_59 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_416 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_415 {
   struct __anonstruct_416 __anonCompField___anonunion_415_60 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_415 __anonCompField_qstr_61 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_417 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_418 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_417 __anonCompField_dentry_62 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_418 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_436 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_436 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_437 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_438 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_437 __anonCompField_io_cq_65 ;
   union __anonunion_438 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 288 
struct export_operations;
#line 290 
struct kobject;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_context;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_439 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_439 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_440 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_440 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_445 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_446 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_447 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_448 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_445 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_446 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_447 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_448 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_449 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_449 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_451 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_450 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_451 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_450 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_499 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_499 __anonCompField_kernfs_node_73 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_502 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_502 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_503 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_503 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_525 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_524 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_525 __anonCompField___anonstruct_524_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_523 {
   struct __anonstruct_524 __anonCompField___anonunion_523_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_526 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_527 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_529 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_528 {
   struct __anonstruct_529 __anonCompField___anonunion_528_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_531 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_530 {
   __wsum csum ;
   struct __anonstruct_531 __anonCompField___anonunion_530_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_532 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_534 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_523 __anonCompField_sk_buff_88 ;
   union __anonunion_526 __anonCompField_sk_buff_89 ;
   union __anonunion_527 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_528 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_530 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_532 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_533 __anonCompField_sk_buff_96 ;
   union __anonunion_534 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_560 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_560 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_563 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_563 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_565 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_564 {
   struct __anonstruct_565 __anonCompField___anonunion_564_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_564 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_566 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_566 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_567 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_567 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_568 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_568 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_569 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_569 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_571 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_571 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct __anonstruct_584 __anonCompField___anonunion_583_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_583 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_586 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_588 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_587 {
   struct keyring_index_key index_key ;
   struct __anonstruct_588 __anonCompField___anonunion_587_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_590 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_589 {
   union key_payload payload ;
   struct __anonstruct_590 __anonCompField___anonunion_589_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_585 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_586 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_587 __anonCompField_key_107 ;
   union __anonunion_589 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_593 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_593 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_594 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_594 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_596 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_595 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_596 __anonCompField___anonunion_595_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_595 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_600 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_600 __anonCompField___anonstruct_599_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_602 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_603 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_604 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_606 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_605 {
   union __anonunion_606 __anonCompField___anonstruct_605_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_607 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_608 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_609 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_610 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_611 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_598 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_601 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_602 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_603 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_604 test ;
   struct __anonstruct_605 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_607 info ;
   struct __anonstruct_query_608 query ;
   struct __anonstruct_raw_tracepoint_609 raw_tracepoint ;
   struct __anonstruct_610 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_611 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_644 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_644 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_646 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_645 {
   struct __anonstruct_tail_call_646 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_645 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_647 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_649 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_649 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_674 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_674 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_679 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_680 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_682 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_678 {
   struct __anonstruct_679 __anonCompField___anonunion_678_155 ;
   struct __anonstruct_680 __anonCompField___anonunion_678_156 ;
   struct __anonstruct_681 __anonCompField___anonunion_678_157 ;
   struct __anonstruct_xsk_682 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_678 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_683 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_684 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_683 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   int reg_state : 8 ;
   bool dismantle ;
   int rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_684 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_fddi.h"
struct fddi_statistics {
   struct net_device_stats gen ;
   __u8 smt_station_id[8U] ;
   __u32 smt_op_version_id ;
   __u32 smt_hi_version_id ;
   __u32 smt_lo_version_id ;
   __u8 smt_user_data[32U] ;
   __u32 smt_mib_version_id ;
   __u32 smt_mac_cts ;
   __u32 smt_non_master_cts ;
   __u32 smt_master_cts ;
   __u32 smt_available_paths ;
   __u32 smt_config_capabilities ;
   __u32 smt_config_policy ;
   __u32 smt_connection_policy ;
   __u32 smt_t_notify ;
   __u32 smt_stat_rpt_policy ;
   __u32 smt_trace_max_expiration ;
   __u32 smt_bypass_present ;
   __u32 smt_ecm_state ;
   __u32 smt_cf_state ;
   __u32 smt_remote_disconnect_flag ;
   __u32 smt_station_status ;
   __u32 smt_peer_wrap_flag ;
   __u32 smt_time_stamp ;
   __u32 smt_transition_time_stamp ;
   __u32 mac_frame_status_functions ;
   __u32 mac_t_max_capability ;
   __u32 mac_tvx_capability ;
   __u32 mac_available_paths ;
   __u32 mac_current_path ;
   __u8 mac_upstream_nbr[6U] ;
   __u8 mac_downstream_nbr[6U] ;
   __u8 mac_old_upstream_nbr[6U] ;
   __u8 mac_old_downstream_nbr[6U] ;
   __u32 mac_dup_address_test ;
   __u32 mac_requested_paths ;
   __u32 mac_downstream_port_type ;
   __u8 mac_smt_address[6U] ;
   __u32 mac_t_req ;
   __u32 mac_t_neg ;
   __u32 mac_t_max ;
   __u32 mac_tvx_value ;
   __u32 mac_frame_cts ;
   __u32 mac_copied_cts ;
   __u32 mac_transmit_cts ;
   __u32 mac_error_cts ;
   __u32 mac_lost_cts ;
   __u32 mac_frame_error_threshold ;
   __u32 mac_frame_error_ratio ;
   __u32 mac_rmt_state ;
   __u32 mac_da_flag ;
   __u32 mac_una_da_flag ;
   __u32 mac_frame_error_flag ;
   __u32 mac_ma_unitdata_available ;
   __u32 mac_hardware_present ;
   __u32 mac_ma_unitdata_enable ;
   __u32 path_tvx_lower_bound ;
   __u32 path_t_max_lower_bound ;
   __u32 path_max_t_req ;
   __u32 path_configuration[8U] ;
   __u32 port_my_type[2U] ;
   __u32 port_neighbor_type[2U] ;
   __u32 port_connection_policies[2U] ;
   __u32 port_mac_indicated[2U] ;
   __u32 port_current_path[2U] ;
   __u8 port_requested_paths[6U] ;
   __u32 port_mac_placement[2U] ;
   __u32 port_available_paths[2U] ;
   __u32 port_pmd_class[2U] ;
   __u32 port_connection_capabilities[2U] ;
   __u32 port_bs_flag[2U] ;
   __u32 port_lct_fail_cts[2U] ;
   __u32 port_ler_estimate[2U] ;
   __u32 port_lem_reject_cts[2U] ;
   __u32 port_lem_cts[2U] ;
   __u32 port_ler_cutoff[2U] ;
   __u32 port_ler_alarm[2U] ;
   __u32 port_connect_state[2U] ;
   __u32 port_pcm_state[2U] ;
   __u32 port_pc_withhold[2U] ;
   __u32 port_ler_flag[2U] ;
   __u32 port_hardware_present[2U] ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fddidevice.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_693 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_693 __anonCompField_pci_dev_160 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/hwmtm.h"
struct s_mbuf_pool {
   Mbuf *mb_start ;
   Mbuf *mb_free ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/hwmtm.h"
struct hwm_r {
   u_int len ;
   char *mb_pos ;
};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/hwmtm.h"
struct hw_modul {
   struct s_mbuf_pool mbuf_pool ;
   struct hwm_r r ;
   union s_fp_descr *descr_p ;
   u_short pass_SMT ;
   u_short pass_NSA ;
   u_short pass_DB ;
   u_short pass_llc_promisc ;
   Mbuf *llc_rx_pipe ;
   Mbuf *llc_rx_tail ;
   int queued_rx_frames ;
   Mbuf *txd_tx_pipe ;
   Mbuf *txd_tx_tail ;
   int queued_txd_mb ;
   int rx_break ;
   int leave_isr ;
   int isr_flag ;
   struct s_smt_tx_queue *tx_p ;
   u_long tx_descr ;
   int tx_len ;
   Mbuf *tx_mb ;
   char *tx_data ;
   int detec_count ;
   u_long rx_len_error ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/targetos.h"
struct s_smt_os {
   struct net_device *dev ;
   struct net_device *next_module ;
   unsigned int bus_type ;
   struct pci_dev pdev ;
   unsigned long base_addr ;
   unsigned char factory_mac_addr[8U] ;
   ulong SharedMemSize ;
   ulong SharedMemHeap ;
   void *SharedMemAddr ;
   dma_addr_t SharedMemDMA ;
   ulong QueueSkb ;
   struct sk_buff_head SendSkbQueue ;
   ulong MaxFrameSize ;
   unsigned char ResetRequested ;
   struct fddi_statistics MacStat ;
   unsigned char *LocalRxBuffer ;
   dma_addr_t LocalRxBufferDMA ;
   u_long smc_version ;
   struct hw_modul hwm ;
   spinlock_t DriverLock ;
};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/sba.h"
struct s_ess {
   u_char sync_bw_available ;
   u_char local_sba_active ;
   char raf_act_timer_poll ;
   char timer_count ;
   Mbuf *sba_reply_pend ;
   long sync_bw ;
   u_long alloc_trans_id ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct event_queue {
   u_short class ;
   u_short event ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct s_queue {
   struct event_queue ev_queue[64U] ;
   struct event_queue *ev_put ;
   struct event_queue *ev_get ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct s_ecm {
   u_char path_test ;
   u_char sb_flag ;
   u_char DisconnectFlag ;
   u_char ecm_line_state ;
   u_long trace_prop ;
   char ec_pad[2U] ;
   struct smt_timer ecm_timer ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct s_rmt {
   u_char dup_addr_test ;
   u_char da_flag ;
   u_char loop_avail ;
   u_char sm_ma_avail ;
   u_char no_flag ;
   u_char bn_flag ;
   u_char jm_flag ;
   u_char rm_join ;
   u_char rm_loop ;
   long fast_rm_join ;
   struct smt_timer rmt_timer0 ;
   struct smt_timer rmt_timer1 ;
   struct smt_timer rmt_timer2 ;
   u_char timer0_exp ;
   u_char timer1_exp ;
   u_char timer2_exp ;
   u_char rm_pad1[1U] ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct s_cfm {
   u_char cf_state ;
   u_char cf_pad[3U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct s_pcm {
   u_char pcm_pad[3U] ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct s_phy {
   struct fddi_mib_p *mib ;
   u_char np ;
   u_char cf_join ;
   u_char cf_loop ;
   u_char wc_flag ;
   u_char pc_mode ;
   u_char pc_lem_fail ;
   u_char lc_test ;
   u_char scrub ;
   char phy_name ;
   u_char pmd_type[2U] ;
   u_char pmd_scramble ;
   u_char curr_ls ;
   u_char ls_flag ;
   u_char rc_flag ;
   u_char tc_flag ;
   u_char td_flag ;
   u_char bitn ;
   u_char tr_flag ;
   u_char twisted ;
   u_char t_val[10U] ;
   u_char r_val[10U] ;
   u_long t_next[10U] ;
   struct smt_timer pcm_timer0 ;
   struct smt_timer pcm_timer1 ;
   struct smt_timer pcm_timer2 ;
   u_char timer0_exp ;
   u_char timer1_exp ;
   u_char timer2_exp ;
   u_char pcm_pad1[1U] ;
   int cem_pst ;
   struct lem_counter lem ;
   struct s_plc plc ;
};
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct s_timer {
   struct smt_timer *st_queue ;
   struct smt_timer st_fast ;
};
#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct s_srf {
   u_long SRThreshold ;
   u_char RT_Flag ;
   u_char sr_state ;
   u_char any_report ;
   u_long TSR ;
   u_short ring_status ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct s_srf_evc {
   u_char evc_code ;
   u_char evc_index ;
   u_char evc_rep_required ;
   u_short evc_para ;
   u_char *evc_cond_state ;
   u_char *evc_multiple ;
};
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct smt_values {
   u_long smt_tvu ;
   u_long smt_tvd ;
   u_long smt_tid ;
   u_long pend[5U] ;
   u_long uniq_time ;
   u_short uniq_ticks ;
   u_short please_reconnect ;
   u_long smt_last_lem ;
   u_long smt_last_notify ;
   struct smt_timer smt_timer ;
   u_long last_tok_time[1U] ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct smt_config {
   u_char attach_s ;
   u_char sas ;
   u_char build_ring_map ;
   u_char numphys ;
   u_char sc_pad[1U] ;
   u_long pcm_tb_min ;
   u_long pcm_tb_max ;
   u_long pcm_c_min ;
   u_long pcm_t_out ;
   u_long pcm_tl_min ;
   u_long pcm_lc_short ;
   u_long pcm_lc_medium ;
   u_long pcm_lc_long ;
   u_long pcm_lc_extended ;
   u_long pcm_t_next_9 ;
   u_long pcm_ns_max ;
   u_long ecm_i_max ;
   u_long ecm_in_max ;
   u_long ecm_td_min ;
   u_long ecm_test_done ;
   u_long ecm_check_poll ;
   u_long rmt_t_non_op ;
   u_long rmt_t_stuck ;
   u_long rmt_t_direct ;
   u_long rmt_t_jam ;
   u_long rmt_t_announce ;
   u_long rmt_t_poll ;
   u_long rmt_dup_mac_behavior ;
   u_long mac_d_max ;
   u_long lct_short ;
   u_long lct_medium ;
   u_long lct_long ;
   u_long lct_extended ;
};
#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
struct s_smc {
   struct s_smt_os os ;
   struct s_smt_hw hw ;
   struct smt_config s ;
   struct smt_values sm ;
   struct s_ecm e ;
   struct s_rmt r ;
   struct s_cfm cf ;
   struct s_pcm p ;
   struct s_phy y[2U] ;
   struct s_queue q ;
   struct s_timer t ;
   struct s_srf srf ;
   struct s_srf_evc evcs[14U] ;
   struct fddi_mib mib ;
   struct s_ess ess ;
};
#line 1568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
struct smt_pdef {
   int ptype ;
   int plen ;
   char *pswap ;
};
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_1048 {
   u_int p1048_flag ;
   u_int p1048_cf_state ;
};
#line 584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_208c {
   u_int p208c_flag ;
   u_short p208c_pad ;
   u_short p208c_dupcondition ;
   struct fddi_addr p208c_fddilong ;
   struct fddi_addr p208c_fddiunalong ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_208d {
   u_int p208d_flag ;
   u_int p208d_frame_ct ;
   u_int p208d_error_ct ;
   u_int p208d_lost_ct ;
   u_int p208d_ratio ;
};
#line 602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_208e {
   u_int p208e_flag ;
   u_int p208e_not_copied ;
   u_int p208e_copied ;
   u_int p208e_not_copied_ratio ;
};
#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_208f {
   u_int p208f_multiple ;
   u_int p208f_nacondition ;
   struct fddi_addr p208f_old_una ;
   struct fddi_addr p208f_new_una ;
   struct fddi_addr p208f_old_dna ;
   struct fddi_addr p208f_new_dna ;
   u_short p208f_curren_path ;
   struct fddi_addr p208f_smt_address ;
};
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_2090 {
   u_int p2090_multiple ;
   u_short p2090_availablepaths ;
   u_short p2090_currentpath ;
   u_int p2090_requestedpaths ;
};
#line 671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_4050 {
   u_int p4050_flag ;
   u_char p4050_pad ;
   u_char p4050_cutoff ;
   u_char p4050_alarm ;
   u_char p4050_estimate ;
   u_int p4050_reject_ct ;
   u_int p4050_ct ;
};
#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_4051 {
   u_int p4051_multiple ;
   u_short p4051_porttype ;
   u_short p4051_connectstate ;
   u_short p4051_pc_neighbor ;
   u_short p4051_pc_withhold ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_4052 {
   u_int p4052_flag ;
   u_int p4052_eberrorcount ;
};
#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_4053 {
   u_int p4053_multiple ;
   u_short p4053_availablepaths ;
   u_short p4053_currentpath ;
   u_int p4053_requestedpaths ;
   u_short p4053_mytype ;
   u_short p4053_neighbortype ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
struct s_pcon {
   int pc_len ;
   int pc_err ;
   int pc_badset ;
   void *pc_p ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
struct s_p_tab;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
struct s_p_tab {
   u_short p_num ;
   u_char p_access ;
   u_short p_offset ;
   char p_swap[3U] ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_1395 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_1395 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_1396 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_1396 key ;
} __attribute__((__aligned__(8)));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_1648 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_1648 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
typedef enum irqreturn irqreturn_t;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/targetos.h"
struct s_skfp_ioctl {
   unsigned short cmd ;
   unsigned short len ;
   unsigned char *data ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/targetos.h"
typedef struct s_smt_os skfddi_priv;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
struct plt {
   int timer ;
   int para ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/fddi.h"
struct fddi_mac {
   struct fddi_addr mac_dest ;
   struct fddi_addr mac_source ;
   u_char mac_info[4478U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_0015 {
   struct smt_para para ;
   u_int res_type ;
};
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_0016 {
   struct smt_para para ;
   u_int sba_cmd ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_0017 {
   struct smt_para para ;
   int sba_pl_req ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_0018 {
   struct smt_para para ;
   int sba_ov_req ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_0019 {
   struct smt_para para ;
   u_short sba_pad ;
   struct fddi_addr alloc_addr ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_001a {
   struct smt_para para ;
   u_int category ;
};
#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_001b {
   struct smt_para para ;
   u_int max_t_neg ;
};
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_001c {
   struct smt_para para ;
   u_int min_seg_siz ;
};
#line 646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_320b {
   struct smt_para para ;
   u_int mib_index ;
   u_short path_pad ;
   u_short path_index ;
};
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_320f {
   struct smt_para para ;
   u_int mib_index ;
   u_int mib_payload ;
};
#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_p_3210 {
   struct smt_para para ;
   u_int mib_index ;
   u_int mib_overhead ;
};
#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_sba_alc_req {
   struct smt_header smt ;
   struct smt_p_0015 s_type ;
   struct smt_p_0016 cmd ;
   struct smt_p_320b path ;
   struct smt_p_0017 pl_req ;
   struct smt_p_0018 ov_req ;
   struct smt_p_320f payload ;
   struct smt_p_3210 overhead ;
   struct smt_p_0019 a_addr ;
   struct smt_p_001a cat ;
   struct smt_p_001b tneg ;
   struct smt_p_001c segm ;
};
#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smt.h"
struct smt_sba_chg {
   struct smt_header smt ;
   struct smt_p_0015 s_type ;
   struct smt_p_0016 cmd ;
   struct smt_p_320b path ;
   struct smt_p_320f payload ;
   struct smt_p_3210 overhead ;
   struct smt_p_001a cat ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/srf.c"
struct evc_init {
   u_char code ;
   u_char index ;
   u_char n ;
   u_short para ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_13583 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_13583 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_13584 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_13584 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_13600 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_13600 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_13604 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_13604 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_13605 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_13606 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_13605 __anonCompField_media_link_90 ;
   union __anonunion_13606 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_13608 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_13607 {
   struct __anonstruct_dev_13608 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_13607 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_13622 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_13623 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_13621 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_13622 i2c ;
   struct __anonstruct_custom_13623 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_13621 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_14524 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_14524 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 13  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_3 {
   int arg0 ;
   int signal_pending ;
};
#line 18  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_skfp_interrupt_9 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_skfp_ioctl_10 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_skfddi_pci_driver_11 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 1101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
Mbuf *smt_build_frame(struct s_smc *smc, int class, int type, int length);
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 487 
Mbuf *smt_get_mbuf(struct s_smc *smc);
#line 488 
#line 1659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void *sm_to_para(struct s_smc *smc, struct smt_header *sm, int para);
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 495 
void queue_event(struct s_smc *smc, int class, int event);
#line 504 
#line 504 
void smt_timer_start(struct s_smc *smc, struct smt_timer *timer, u_long time, u_long token);
#line 507 
#line 507 
void pcm_status_state(struct s_smc *smc, int np, int *type, int *state, int *remote, int *mac);
#line 510 
#line 510 
void sm_lem_evaluate(struct s_smc *smc);
#line 511 
#line 511 
void mac_update_counter(struct s_smc *smc);
#line 515 
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_agent_init(struct s_smc *smc);
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_received_pack(struct s_smc *smc, Mbuf *mb, int fs);
#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_swap_para(struct smt_header *sm, int len, int direction);
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 526 
void smt_send_mbuf(struct s_smc *smc, Mbuf *mb, int fc);
#line 527 
#line 527 
void smt_free_mbuf(struct s_smc *smc, Mbuf *mb);
#line 539 
#line 539 
void smt_timer_poll(struct s_smc *smc);
#line 540 
#line 540 
u_long smt_get_time(void);
#line 541 
#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
u_long smt_get_tid(struct s_smc *smc);
#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_agent_task(struct s_smc *smc);
#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 1645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
int smt_check_para(struct s_smc *smc, struct smt_header *sm, u_short *list);
#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 548 
void driver_get_bia(struct s_smc *smc, struct fddi_addr *bia_addr);
#line 554 
#line 554 
void smt_start_watchdog(struct s_smc *smc);
#line 555 
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_event(struct s_smc *smc, int event);
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 565 
int pcm_rooted_station(struct s_smc *smc);
#line 571 
#line 1931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
int smt_action(struct s_smc *smc, int class, int code, int index);
#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 574 
void smt_pmf_received_pack(struct s_smc *smc, Mbuf *mb, int local);
#line 575 
#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_send_frame(struct s_smc *smc, Mbuf *mb, int fc, int local);
#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 1224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_set_timestamp(struct s_smc *smc, u_char *p);
#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 588 
void ring_status_indication(struct s_smc *smc, u_long status);
#line 619 
#line 619 
int ess_raf_received_pack(struct s_smc *smc, Mbuf *mb, struct smt_header *sm, int fs);
#line 621 
#line 621 
void ess_timer_poll(struct s_smc *smc);
#line 627 
#line 627 
void smt_srf_event(struct s_smc *smc, int code, int index, int cond);
#line 634 
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_emulate_token_ct(struct s_smc *smc, int mac_index_0);
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
struct fddi_addr fddi_broadcast;
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
#line 477 
int pcm_status_twisted(struct s_smc *smc);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
#line 15 
extern unsigned char byte_rev_table[256U];
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static unsigned char __bitrev8(unsigned char byte)
{
  #line 18 
  return byte_rev_table[(int)byte];
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static struct fddi_addr SMT_Unknown = {.a = {[2] = (unsigned char)31U}};
#line 56 
#line 1816 
static int smt_swap_short(u_short s);
#line 58 
#line 1737 
static int mac_index(struct s_smc *smc, int mac);
#line 59 
#line 1751 
static int phy_index(struct s_smc *smc, int phy);
#line 60 
#line 1760 
static int mac_con_resource_index(struct s_smc *smc, int mac);
#line 61 
#line 1784 
static int phy_con_resource_index(struct s_smc *smc, int phy);
#line 62 
#line 851 
static void smt_send_rdf(struct s_smc *smc, Mbuf *rej, int fc, int reason, int local);
#line 64 
#line 928 
static void smt_send_nif(struct s_smc *smc, struct fddi_addr *dest, int fc, u_long tid, int type, int local);
#line 66 
#line 994 
static void smt_send_ecf(struct s_smc *smc, struct fddi_addr *dest, int fc, u_long tid, int type, int len);
#line 68 
#line 979 
static void smt_echo_test(struct s_smc *smc, int dna);
#line 69 
#line 1020 
static void smt_send_sif_config(struct s_smc *smc, struct fddi_addr *dest, u_long tid, int local);
#line 71 
#line 1053 
static void smt_send_sif_operation(struct s_smc *smc, struct fddi_addr *dest, u_long tid, int local);
#line 74 
#line 1868 
static void smt_string_swap(char *data, char *format, int len);
#line 76 
#line 1137 
static void smt_add_frame_len(Mbuf *mb, int len);
#line 77 
#line 1151 
static void smt_fill_una(struct s_smc *smc, struct smt_p_una *una);
#line 78 
#line 1161 
static void smt_fill_sde(struct s_smc *smc, struct smt_p_sde *sde);
#line 79 
#line 1177 
static void smt_fill_state(struct s_smc *smc, struct smt_p_state *state);
#line 80 
#line 1217 
static void smt_fill_timestamp(struct s_smc *smc, struct smt_p_timestamp *ts);
#line 81 
#line 1258 
static void smt_fill_policy(struct s_smc *smc, struct smt_p_policy *policy);
#line 82 
#line 1289 
static void smt_fill_latency(struct s_smc *smc, struct smt_p_latency *latency);
#line 83 
#line 1312 
static void smt_fill_neighbor(struct s_smc *smc, struct smt_p_neighbor *neighbor);
#line 84 
#line 1331 
static int smt_fill_path(struct s_smc *smc, struct smt_p_path *path);
#line 85 
#line 1379 
static void smt_fill_mac_status(struct s_smc *smc, struct smt_p_mac_status *st);
#line 86 
#line 1406 
static void smt_fill_lem(struct s_smc *smc, struct smt_p_lem *lem, int phy);
#line 87 
#line 1428 
static void smt_fill_version(struct s_smc *smc, struct smt_p_version *vers);
#line 88 
#line 1447 
static void smt_fill_fsc(struct s_smc *smc, struct smt_p_fsc *fsc);
#line 89 
#line 1467 
static void smt_fill_mac_counter(struct s_smc *smc, struct smt_p_mac_counter *mc);
#line 90 
#line 1479 
static void smt_fill_mac_fnc(struct s_smc *smc, struct smt_p_mac_fnc *fnc);
#line 91 
#line 1491 
static void smt_fill_manufacturer(struct s_smc *smc, struct smp_p_manufacturer *man);
#line 93 
#line 1503 
static void smt_fill_user(struct s_smc *smc, struct smp_p_user *user);
#line 94 
#line 1514 
static void smt_fill_setcount(struct s_smc *smc, struct smt_p_setcount *setcount);
#line 95 
#line 1526 
static void smt_fill_echo(struct s_smc *smc, struct smt_p_echo *echo, u_long seed, int len);
#line 98 
#line 1544 
static void smt_clear_una_dna(struct s_smc *smc);
#line 99 
#line 1550 
static void smt_clear_old_una_dna(struct s_smc *smc);
#line 103 
#line 810 
static void update_dac(struct s_smc *smc, int report);
#line 104 
#line 448 
static int div_ratio(u_long upper, u_long lower);
#line 106 
#line 2017 
static void hwm_conv_can(struct s_smc *smc, char *data, int len);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
__inline static int is_my_addr(struct s_smc *smc, struct fddi_addr *addr)
{
  #line 119 
  return (((int)*((short *)(& addr->a[0])) == (int)*((short *)(& smc->mib.m[0].fddiMACSMTAddress.a[0])) && (int)*((short *)(& addr->a[2])) == (int)*((short *)(& smc->mib.m[0].fddiMACSMTAddress.a[2]))) && (int)*((short *)(& addr->a[4])) == (int)*((short *)(& smc->mib.m[0].fddiMACSMTAddress.a[4]))) != 0;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
__inline static int is_broadcast(struct fddi_addr *addr)
{
  #line 126 
  return (((unsigned int)*((u_short *)(& addr->a[0])) == 65535U && (unsigned int)*((u_short *)(& addr->a[2])) == 65535U) && (unsigned int)*((u_short *)(& addr->a[4])) == 65535U) != 0;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
__inline static int is_individual(struct fddi_addr *addr)
{
  #line 132 
  return ((int)addr->a[0] & 128) == 0;
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
__inline static int is_equal(struct fddi_addr *addr1, struct fddi_addr *addr2)
{
  #line 139 
  return (((int)*((u_short *)(& addr1->a[0])) == (int)*((u_short *)(& addr2->a[0])) && (int)*((u_short *)(& addr1->a[2])) == (int)*((u_short *)(& addr2->a[2]))) && (int)*((u_short *)(& addr1->a[4])) == (int)*((u_short *)(& addr2->a[4]))) != 0;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static u_short plist_nif[4U] = {(unsigned short)1U, (unsigned short)2U, (unsigned short)3U};
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_agent_init(struct s_smc *smc)
{
  #line 153 
  int i;
  #line 158 
  smc->mib.m[0].fddiMACSMTAddress = smc->hw.fddi_home_addr;
  #line 163 
  smc->mib.fddiSMTStationId.sid_oem[0] = (unsigned char)0U;
  #line 164 
  smc->mib.fddiSMTStationId.sid_oem[1] = (unsigned char)0U;
  #line 165 
  driver_get_bia(smc,& smc->mib.fddiSMTStationId.sid_node);
  #line 166 
  i = 0;
  #line 166 
  while (i <= 5) {
    #line 168 
    unsigned char ___x;
    #line 168 
    int tmp_1;
    {
      #line 168 
      unsigned char __x = smc->mib.fddiSMTStationId.sid_node.a[i];
      #line 168 
      if (0 != 0) {
        #line 168 
        ___x = __x;
        #line 168 
        ___x = (unsigned char)(((int)___x >> 4) | ((int)___x << 4));
        #line 168 
        ___x = (unsigned char)((((int)___x >> 2) & 51) | (((int)___x << 2) & -52));
        #line 168 
        ___x = (unsigned char)((((int)___x >> 1) & 85) | (((int)___x << 1) & -86));
        #line 168 
        tmp_1 = (int)___x;
      }
      else {
        #line 168 
        tmp_1 = (int)__bitrev8((unsigned char)((int)__x));
      }
      }
    #line 167 
    smc->mib.fddiSMTStationId.sid_node.a[i] = (unsigned char)tmp_1;
    #line 166 
    i ++;
  }
  #line 170 
  smc->mib.fddiSMTManufacturerData[0] = smc->mib.fddiSMTStationId.sid_node.a[0];
  #line 172 
  smc->mib.fddiSMTManufacturerData[1] = smc->mib.fddiSMTStationId.sid_node.a[1];
  #line 174 
  smc->mib.fddiSMTManufacturerData[2] = smc->mib.fddiSMTStationId.sid_node.a[2];
  #line 176 
  smc->sm.smt_tid = 0UL;
  #line 177 
  smc->mib.m[0].fddiMACDupAddressTest = (unsigned short)0U;
  #line 178 
  smc->mib.m[0].fddiMACUNDA_Flag = (unsigned char)0U;
  #line 180 
  smt_clear_una_dna(smc);
  #line 181 
  smt_clear_old_una_dna(smc);
  #line 183 
  i = 0;
  #line 183 
  while (i <= 4) {
    #line 184 
    smc->sm.pend[i] = 0UL;
    #line 183 
    i ++;
  }
  #line 185 
  smc->sm.please_reconnect = (unsigned short)0U;
  #line 186 
  smc->sm.uniq_ticks = (unsigned short)0U;
  #line 187 
  return;
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_agent_task(struct s_smc *smc)
{
  #line 199 
  smt_timer_start(smc,& smc->sm.smt_timer,1000000UL,262145UL);
  #line 203 
  return;
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_emulate_token_ct(struct s_smc *smc, int mac_index_0)
{
  #line 207 
  u_long count;
  #line 208 
  u_long time;
  #line 211 
  time = smt_get_time();
  #line 212 
  count = ((time - smc->sm.last_tok_time[mac_index_0]) * 100UL) / 250UL;
  #line 221 
  if ((unsigned int)smc->hw.mac_ring_is_up != 0U) 
                                                  #line 222 
                                                  smc->mib.m[mac_index_0].fddiMACToken_Ct += count;
  #line 226 
  smc->sm.last_tok_time[mac_index_0] = time;
  #line 227 
  return;
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_event(struct s_smc *smc, int event)
{
  #line 234 
  u_long time;
  #line 236 
  int i;
  #line 240 
  if ((unsigned int)smc->sm.please_reconnect != 0U) {
    #line 241 
    smc->sm.please_reconnect = (u_short)((int)smc->sm.please_reconnect - 1);
    #line 242 
    if ((unsigned int)smc->sm.please_reconnect == 0U) 
                                                      #line 244 
                                                      queue_event(smc,1,1);
  }
  #line 248 
  if (event == 2) 
                  #line 249 
                  return;
  #line 257 
  smt_timer_poll(smc);
  #line 258 
  smt_start_watchdog(smc);
  #line 262 
  ess_timer_poll(smc);
  #line 269 
  smt_srf_event(smc,0,0,0);
  #line 273 
  time = smt_get_time();
  #line 275 
  if (time - smc->sm.smt_last_lem > 1999UL) {
    #line 280 
    struct fddi_mib_m *mib;
    #line 281 
    u_long upper;
    #line 282 
    u_long lower;
    #line 283 
    int cond;
    #line 284 
    int port;
    #line 285 
    struct s_phy *phy;
    #line 289 
    sm_lem_evaluate(smc);
    #line 290 
    smc->sm.smt_last_lem = time;
    #line 296 
    mac_update_counter(smc);
    #line 297 
    mib = (struct fddi_mib_m *)(& smc->mib.m);
    #line 298 
    upper = (mib->fddiMACLost_Ct - mib->fddiMACOld_Lost_Ct) + (mib->fddiMACError_Ct - mib->fddiMACOld_Error_Ct);
    #line 301 
    lower = (mib->fddiMACFrame_Ct - mib->fddiMACOld_Frame_Ct) + (mib->fddiMACLost_Ct - mib->fddiMACOld_Lost_Ct);
    #line 304 
    mib->fddiMACFrameErrorRatio = (unsigned short)div_ratio(upper,lower);
    #line 306 
    cond = ((unsigned int)mib->fddiMACFrameErrorThreshold == 0U && mib->fddiMACError_Ct != mib->fddiMACOld_Error_Ct || (int)mib->fddiMACFrameErrorRatio > (int)mib->fddiMACFrameErrorThreshold) != 0;
    #line 312 
    if ((int)mib->fddiMACFrameErrorFlag != cond) 
                                                 #line 313 
                                                 smt_srf_event(smc,7,1,cond);
    #line 316 
    upper = mib->fddiMACNotCopied_Ct - mib->fddiMACOld_NotCopied_Ct;
    #line 318 
    lower = (mib->fddiMACCopied_Ct - mib->fddiMACOld_Copied_Ct) + upper;
    #line 321 
    mib->fddiMACNotCopiedRatio = (unsigned short)div_ratio(upper,lower);
    #line 323 
    cond = ((unsigned int)mib->fddiMACNotCopiedThreshold == 0U && mib->fddiMACNotCopied_Ct != mib->fddiMACOld_NotCopied_Ct || (int)mib->fddiMACNotCopiedRatio > (int)mib->fddiMACNotCopiedThreshold) != 0;
    #line 330 
    if ((int)mib->fddiMACNotCopiedFlag != cond) 
                                                #line 331 
                                                smt_srf_event(smc,9,1,cond);
    #line 337 
    mib->fddiMACOld_Frame_Ct = mib->fddiMACFrame_Ct;
    #line 338 
    mib->fddiMACOld_Copied_Ct = mib->fddiMACCopied_Ct;
    #line 339 
    mib->fddiMACOld_Error_Ct = mib->fddiMACError_Ct;
    #line 340 
    mib->fddiMACOld_Lost_Ct = mib->fddiMACLost_Ct;
    #line 341 
    mib->fddiMACOld_NotCopied_Ct = mib->fddiMACNotCopied_Ct;
    #line 346 
    port = 0;
    #line 346 
    while (port <= 1) {
      #line 347 
      phy = & smc->y[port];
      #line 349 
      if ((unsigned int)(phy->mib)->fddiPORTHardwarePresent == 0U) 
                                                                   #line 350 
                                                                   goto __Cont;
      #line 353 
      cond = (phy->mib)->fddiPORTEBError_Ct - (phy->mib)->fddiPORTOldEBError_Ct > 5UL;
      #line 359 
      smt_srf_event(smc,10,(int)phy->np + 1,cond);
      #line 365 
      (phy->mib)->fddiPORTOldEBError_Ct = (phy->mib)->fddiPORTEBError_Ct;
      #line 346 
      __Cont: 
              #line 346 
      port ++;
    }
  }
  #line 374 
  if (time - smc->sm.smt_last_notify >= (unsigned long)((int)smc->mib.fddiSMTTT_Notify * 250)) {
    #line 382 
    if (smc->sm.pend[0] == 0UL) 
                                #line 383 
                                smc->sm.pend[0] = smt_get_tid(smc);
    #line 384 
    smt_send_nif(smc,& fddi_broadcast,79,smc->sm.pend[0],2,0);
    #line 386 
    smc->sm.smt_last_notify = time;
  }
  #line 392 
  if (smc->sm.smt_tvu != 0UL && time - smc->sm.smt_tvu > 57000UL) {
    #line 395 
    smc->sm.smt_tvu = 0UL;
    #line 397 
    if (is_equal(& smc->mib.m[0].fddiMACUpstreamNbr,& SMT_Unknown) == 0) 
      #line 400 
      smc->mib.m[0].fddiMACOldUpstreamNbr = smc->mib.m[0].fddiMACUpstreamNbr;
    #line 403 
    smc->mib.m[0].fddiMACUpstreamNbr = SMT_Unknown;
    #line 404 
    smc->mib.m[0].fddiMACUNDA_Flag = (unsigned char)0U;
    #line 411 
    update_dac(smc,0);
    #line 412 
    smt_srf_event(smc,2,1,0);
  }
  #line 415 
  if (smc->sm.smt_tvd != 0UL && time - smc->sm.smt_tvd > 57000UL) {
    #line 418 
    smc->sm.smt_tvd = 0UL;
    #line 419 
    if (is_equal(& smc->mib.m[0].fddiMACDownstreamNbr,& SMT_Unknown) == 0) 
      #line 422 
      smc->mib.m[0].fddiMACOldDownstreamNbr = smc->mib.m[0].fddiMACDownstreamNbr;
    #line 425 
    smc->mib.m[0].fddiMACDownstreamNbr = SMT_Unknown;
    #line 426 
    smt_srf_event(smc,2,1,0);
  }
  #line 437 
  i = 0;
  #line 437 
  while (i <= 0) {
    #line 438 
    if (time - smc->sm.last_tok_time[i] > 500UL) 
                                                 #line 439 
                                                 smt_emulate_token_ct(smc,i);
    #line 437 
    i ++;
  }
  #line 444 
  smt_timer_start(smc,& smc->sm.smt_timer,1000000UL,262145UL);
  #line 445 
  return;
}

#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static int div_ratio(u_long upper, u_long lower)
{
  #line 450 
  if (upper << 16L < upper) 
                            #line 451 
                            upper = 4294901760UL; else 
                                                       #line 453 
                                                       upper <<= 16L;
  #line 454 
  if (lower == 0UL) 
                    #line 455 
                    return 0;
  #line 456 
  return (int)(upper / lower);
}

#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_received_pack(struct s_smc *smc, Mbuf *mb, int fs)
{
  #line 467 
  struct smt_header *sm;
  #line 468 
  int local;
  #line 470 
  int illegal = 0;
  #line 472 
  switch ((int)mb->m_data[0]) {
    #line 473 
    case 65: 
             #line 473 
    ;
    #line 474 
    case 66: 
             #line 474 
    ;
    #line 475 
    case 67: 
             #line 475 
    ;
    #line 476 
    case 79: 
             #line 476 
    ;
    #line 477 
    break;
    #line 478 
    default: 
             #line 478 
    ;
    #line 479 
    smt_free_mbuf(smc,mb);
    #line 480 
    return;
  }
  #line 483 
  (smc->mib.m[0].fddiMACSMTCopied_Ct) ++;
  #line 484 
  sm = (struct smt_header *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 485 
  local = (fs & 128) != 0;
  #line 486 
  hwm_conv_can(smc,(char *)sm,12);
  #line 489 
  if (is_individual(& sm->smt_dest) != 0) {
    #line 489 
    if (is_my_addr(smc,& sm->smt_dest) == 0) {
      #line 490 
      smt_free_mbuf(smc,mb);
      #line 491 
      return;
    }
  }
  #line 501 
  smt_swap_para(sm,(int)mb->m_len,1);
  #line 522 
  if ((fs & 2) != 0 && (int)mb->m_data[0] == 79) {
    #line 525 
    smt_free_mbuf(smc,mb);
    #line 526 
    return;
  }
  #line 532 
  if ((unsigned int)sm->smt_class == 4U && (unsigned int)sm->smt_len > 4458U || (unsigned int)sm->smt_class != 4U && (unsigned int)sm->smt_len > 4332U) {
    #line 534 
    smt_free_mbuf(smc,mb);
    #line 535 
    return;
  }
  #line 541 
  switch ((int)sm->smt_class) {
    #line 542 
    case 1: 
            #line 542 
    ;
    #line 543 
    case 2: 
            #line 543 
    ;
    #line 544 
    case 3: 
            #line 544 
    ;
    #line 545 
    case 4: 
            #line 545 
    ;
    #line 546 
    if ((unsigned int)sm->smt_version != 1U) 
                                             #line 547 
                                             illegal = 1;
    #line 548 
    break;
    #line 549 
    default: 
             #line 549 
    ;
    #line 550 
    if ((unsigned int)sm->smt_version != 2U) 
                                             #line 551 
                                             illegal = 1;
    #line 552 
    break;
  }
  #line 554 
  if (illegal != 0) {
    #line 557 
    smt_send_rdf(smc,mb,(int)mb->m_data[0],2,local);
    #line 558 
    smt_free_mbuf(smc,mb);
    #line 559 
    return;
  }
  #line 561 
  if ((unsigned long)sm->smt_len > (unsigned long)mb->m_len + 18446744073709551584UL || ((int)sm->smt_len & 3) != 0 && (unsigned int)sm->smt_class != 4U) {
    #line 564 
    smt_send_rdf(smc,mb,(int)mb->m_data[0],10,local);
    #line 565 
    smt_free_mbuf(smc,mb);
    #line 566 
    return;
  }
  #line 568 
  switch ((int)sm->smt_class) {
    #line 569 
    case 1: 
            #line 569 
    ;
    #line 570 
    if (smt_check_para(smc,sm,(u_short *)(& plist_nif)) != 0) 
                                                              #line 572 
                                                              break;
    #line 574 
    switch ((int)sm->smt_type) {
      #line 575 
      case 1: 
              #line 575 
      ;
      #line 576 
      case 2: 
              #line 576 
      ;
      #line 577 
      if ((fs & 1) == 0 && (int)mb->m_data[0] == 79) {
        #line 578 
        if (is_broadcast(& sm->smt_dest) != 0) {
          #line 579 
          struct smt_p_state *st;
          #line 582 
          if (is_equal(& smc->mib.m[0].fddiMACUpstreamNbr,& sm->smt_source) == 0) {
            #line 587 
            if (is_equal(& smc->mib.m[0].fddiMACUpstreamNbr,& SMT_Unknown) == 0) 
              #line 590 
              smc->mib.m[0].fddiMACOldUpstreamNbr = smc->mib.m[0].fddiMACUpstreamNbr;
            #line 594 
            smc->mib.m[0].fddiMACUpstreamNbr = sm->smt_source;
            #line 596 
            smt_srf_event(smc,2,1,0);
            #line 599 
            smt_echo_test(smc,0);
          }
          #line 601 
          smc->sm.smt_tvu = smt_get_time();
          #line 602 
          st = (struct smt_p_state *)sm_to_para(smc,sm,3);
          #line 604 
          if (st != (struct smt_p_state *)0) {
            #line 605 
            smc->mib.m[0].fddiMACUNDA_Flag = (unsigned char)((unsigned int)st->st_dupl_addr & 1U);
            #line 608 
            update_dac(smc,1);
          }
        }
      }
      #line 611 
      if ((unsigned int)sm->smt_type == 2U) {
        #line 611 
        if (is_individual(& sm->smt_source) != 0) 
          #line 612 
          if ((fs & 2) == 0 || (int)mb->m_data[0] != 79) 
                                                         #line 617 
                                                         smt_send_nif(smc,& sm->smt_source,65,(unsigned long)sm->smt_tid,3,local);
      }
      #line 622 
      break;
      #line 623 
      case 3: 
              #line 623 
      ;
      #line 626 
      if ((fs & 2) != 0) {
        #line 627 
        smc->sm.pend[0] = 0UL;
        #line 629 
        smc->mib.m[0].fddiMACDupAddressTest = (unsigned short)2U;
        #line 631 
        smc->r.dup_addr_test = (unsigned char)2U;
        #line 632 
        queue_event(smc,3,10);
        #line 633 
        smc->mib.m[0].fddiMACDA_Flag = (unsigned char)1U;
        #line 634 
        update_dac(smc,1);
        #line 635 
        break;
      }
      #line 637 
      if ((unsigned long)sm->smt_tid == smc->sm.pend[0]) {
        #line 638 
        smc->sm.pend[0] = 0UL;
        #line 640 
        if (is_equal(& smc->mib.m[0].fddiMACDownstreamNbr,& sm->smt_source) == 0) {
          #line 644 
          if (is_equal(& smc->mib.m[0].fddiMACDownstreamNbr,& SMT_Unknown) == 0) 
            #line 647 
            smc->mib.m[0].fddiMACOldDownstreamNbr = smc->mib.m[0].fddiMACDownstreamNbr;
          #line 651 
          smc->mib.m[0].fddiMACDownstreamNbr = sm->smt_source;
          #line 653 
          smt_srf_event(smc,2,1,0);
          #line 656 
          smt_echo_test(smc,1);
        }
        #line 658 
        smc->mib.m[0].fddiMACDA_Flag = (unsigned char)0U;
        #line 659 
        update_dac(smc,1);
        #line 660 
        smc->sm.smt_tvd = smt_get_time();
        #line 661 
        smc->mib.m[0].fddiMACDupAddressTest = (unsigned short)1U;
        #line 663 
        if ((unsigned int)smc->r.dup_addr_test != 1U) {
          #line 664 
          smc->r.dup_addr_test = (unsigned char)1U;
          #line 665 
          queue_event(smc,3,10);
        }
      }
      else 
        #line 668 
        if ((unsigned long)sm->smt_tid == smc->sm.pend[1]) ;
      #line 676 
      break;
      #line 677 
      default: 
               #line 677 
      ;
      #line 678 
      illegal = 2;
      #line 679 
      break;
    }
    #line 681 
    break;
    #line 682 
    case 2: 
            #line 682 
    ;
    #line 683 
    if ((unsigned int)sm->smt_type != 2U) 
                                          #line 684 
                                          break;
    #line 687 
    smt_send_sif_config(smc,& sm->smt_source,(unsigned long)sm->smt_tid,local);
    #line 688 
    break;
    #line 689 
    case 3: 
            #line 689 
    ;
    #line 690 
    if ((unsigned int)sm->smt_type != 2U) 
                                          #line 691 
                                          break;
    #line 694 
    smt_send_sif_operation(smc,& sm->smt_source,(unsigned long)sm->smt_tid,local);
    #line 695 
    break;
    #line 696 
    case 4: 
            #line 696 
    ;
    #line 697 
    switch ((int)sm->smt_type) {
      #line 698 
      case 3: 
              #line 698 
      ;
      #line 699 
      (smc->mib.priv.fddiPRIVECF_Reply_Rx) ++;
      #line 702 
      if (sm_to_para(smc,sm,17) == (void *)0) 
                                              #line 704 
                                              break;
      #line 706 
      if (! ((unsigned long)sm->smt_tid == smc->sm.pend[4])) 
        #line 709 
        if (! ((unsigned long)sm->smt_tid == smc->sm.pend[2])) 
          #line 712 
          if ((unsigned long)sm->smt_tid == smc->sm.pend[3]) ;
      #line 720 
      break;
      #line 721 
      case 2: 
              #line 721 
      ;
      #line 722 
      (smc->mib.priv.fddiPRIVECF_Req_Rx) ++;
      #line 724 
      if ((unsigned int)sm->smt_len != 0U) {
        #line 724 
        if (sm_to_para(smc,sm,17) == (void *)0) {
          #line 726 
          smt_send_rdf(smc,mb,(int)mb->m_data[0],10,local);
          #line 728 
          break;
        }
      }
      #line 734 
      sm->smt_dest = sm->smt_source;
      #line 735 
      sm->smt_type = (unsigned char)3U;
      #line 737 
      (smc->mib.priv.fddiPRIVECF_Reply_Tx) ++;
      #line 738 
      smt_send_frame(smc,mb,65,local);
      #line 739 
      return;
      #line 741 
      default: 
               #line 741 
      ;
      #line 742 
      illegal = 1;
      #line 743 
      break;
    }
    #line 745 
    break;
    #line 747 
    case 5: 
            #line 747 
    ;
    #line 750 
    fs = ess_raf_received_pack(smc,mb,sm,fs);
    #line 757 
    break;
    #line 758 
    case 6: 
            #line 758 
    ;
    #line 759 
    (smc->mib.priv.fddiPRIVRDF_Rx) ++;
    #line 760 
    break;
    #line 761 
    case 255: 
              #line 761 
    ;
    #line 762 
    if ((unsigned int)sm->smt_type == 2U) 
                                          #line 764 
                                          smt_send_rdf(smc,mb,(int)mb->m_data[0],1,local);
    #line 766 
    break;
    #line 767 
    case 8: 
            #line 767 
    ;
    #line 768 
    case 9: 
            #line 768 
    ;
    #line 769 
    if ((unsigned int)sm->smt_type != 2U) 
                                          #line 770 
                                          break;
    #line 772 
    if ((unsigned int)sm->smt_class == 8U) 
                                           #line 773 
                                           (smc->mib.priv.fddiPRIVPMF_Get_Rx) ++; else 
                                                                    #line 775 
                                                                    (smc->mib.priv.fddiPRIVPMF_Set_Rx) ++;
    #line 779 
    if ((unsigned int)sm->smt_class == 9U) {
      #line 779 
      if (is_individual(& sm->smt_dest) == 0) 
                                              #line 782 
                                              break;
    }
    #line 784 
    smt_pmf_received_pack(smc,mb,local);
    #line 785 
    break;
    #line 786 
    case 7: 
            #line 786 
    ;
    #line 788 
    break;
    #line 789 
    default: 
             #line 789 
    ;
    #line 790 
    if ((unsigned int)sm->smt_type != 2U) 
                                          #line 791 
                                          break;
    #line 800 
    smt_send_rdf(smc,mb,(int)mb->m_data[0],1,local);
    #line 801 
    break;
  }
  #line 804 
  if (illegal != 0) ;
  #line 807 
  smt_free_mbuf(smc,mb);
  #line 808 
  return;
}

#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void update_dac(struct s_smc *smc, int report)
{
  #line 812 
  int cond;
  #line 814 
  cond = (unsigned int)((int)smc->mib.m[0].fddiMACUNDA_Flag | (int)smc->mib.m[0].fddiMACDA_Flag) != 0U;
  #line 816 
  if (report != 0 && (int)smc->mib.m[0].fddiMACDuplicateAddressCond != cond) 
    #line 817 
    smt_srf_event(smc,8,1,cond); else 
                                      #line 819 
                                      smc->mib.m[0].fddiMACDuplicateAddressCond = (unsigned char)cond;
  #line 820 
  return;
}

#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_send_frame(struct s_smc *smc, Mbuf *mb, int fc, int local)
{
  #line 832 
  struct smt_header *sm;
  #line 845 
  int tmp;
  #line 834 
  if ((unsigned int)smc->r.sm_ma_avail == 0U && local == 0) {
    #line 835 
    smt_free_mbuf(smc,mb);
    #line 836 
    return;
  }
  #line 838 
  sm = (struct smt_header *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 839 
  sm->smt_source = smc->mib.m[0].fddiMACSMTAddress;
  #line 840 
  sm->smt_sid = smc->mib.fddiSMTStationId;
  #line 842 
  smt_swap_para(sm,(int)mb->m_len,0);
  #line 843 
  hwm_conv_can(smc,(char *)sm,12);
  #line 844 
  (smc->mib.m[0].fddiMACSMTTransmit_Ct) ++;
  #line 845 
  if (local == 0) 
                  #line 845 
                  tmp = fc; else 
                                 #line 845 
                                 tmp = 67;
  #line 845 
  ;
  #line 845 
  ;
  #line 845 
  smt_send_mbuf(smc,mb,tmp);
  #line 846 
  return;
}

#line 851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_send_rdf(struct s_smc *smc, Mbuf *rej, int fc, int reason, int local)
{
  #line 857 
  Mbuf *mb;
  #line 858 
  struct smt_header *sm;
  #line 859 
  struct smt_rdf *rdf;
  #line 860 
  int len;
  #line 861 
  int frame_len;
  #line 863 
  sm = (struct smt_header *)((char *)(& rej->m_data) + (unsigned long)rej->m_off);
  #line 864 
  if ((unsigned int)sm->smt_type != 2U) 
                                        #line 865 
                                        return;
  #line 875 
  frame_len = (int)rej->m_len;
  #line 877 
  mb = smt_build_frame(smc,6,3,92);
  #line 877 
  if (mb == (Mbuf *)0) 
                       #line 878 
                       return;
  #line 879 
  rdf = (struct smt_rdf *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 880 
  rdf->smt.smt_tid = sm->smt_tid;
  #line 881 
  rdf->smt.smt_dest = sm->smt_source;
  #line 884 
  rdf->reason.para.p_type = (unsigned short)18U;
  #line 885 
  rdf->reason.para.p_len = (unsigned short)4U;
  #line 886 
  rdf->reason.rdf_reason = (unsigned int)reason;
  #line 889 
  rdf->version.para.p_type = (unsigned short)20U;
  #line 890 
  rdf->version.para.p_len = (unsigned short)8U;
  #line 891 
  rdf->version.v_pad = (unsigned short)0U;
  #line 892 
  rdf->version.v_n = (unsigned char)1U;
  #line 893 
  rdf->version.v_index = (unsigned char)1U;
  #line 894 
  rdf->version.v_version[0] = (unsigned short)2U;
  #line 895 
  rdf->version.v_pad2 = (unsigned short)0U;
  #line 898 
  if ((unsigned int)frame_len <= 4304U) 
                                        #line 900 
                                        len = frame_len; else 
                                                              #line 902 
                                                              len = 4304;
  #line 905 
  len &= -4;
  #line 906 
  rdf->refused.para.p_type = (unsigned short)19U;
  #line 908 
  rdf->refused.para.p_len = (unsigned short)((unsigned int)((unsigned short)len) + 4U);
  #line 909 
  rdf->refused.ref_fc = (unsigned int)fc;
  #line 912 
  smt_swap_para(sm,frame_len,0);
  #line 914 
  memcpy((void *)(& rdf->refused.ref_header),(void *)sm,(unsigned long)len);
  #line 916 
  len = (int)((unsigned int)len + 4294967264U);
  #line 917 
  mb->m_len += (unsigned int)len;
  #line 918 
  rdf->smt.smt_len = (unsigned short)((int)rdf->smt.smt_len + (int)((unsigned short)len));
  #line 921 
  (smc->mib.priv.fddiPRIVRDF_Tx) ++;
  #line 922 
  smt_send_frame(smc,mb,65,local);
  #line 923 
  return;
}

#line 928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_send_nif(struct s_smc *smc, struct fddi_addr *dest, int fc, u_long tid, int type, int local)
{
  #line 935 
  struct smt_nif *nif;
  #line 936 
  Mbuf *mb;
  #line 938 
  mb = smt_build_frame(smc,1,type,72);
  #line 938 
  if (mb == (Mbuf *)0) 
                       #line 939 
                       return;
  #line 940 
  nif = (struct smt_nif *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 941 
  smt_fill_una(smc,& nif->una);
  #line 942 
  smt_fill_sde(smc,& nif->sde);
  #line 943 
  smt_fill_state(smc,& nif->state);
  #line 945 
  smt_fill_fsc(smc,& nif->fsc);
  #line 947 
  nif->smt.smt_dest = *dest;
  #line 948 
  nif->smt.smt_tid = (unsigned int)tid;
  #line 950 
  smt_send_frame(smc,mb,fc,local);
  #line 951 
  return;
}

#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_echo_test(struct s_smc *smc, int dna)
{
  #line 981 
  u_long tid;
  #line 983 
  int tmp;
  #line 986 
  LongAddr *tmp_0;
  #line 983 
  if (dna != 0) 
                #line 983 
                tmp = 3; else 
                              #line 983 
                              tmp = 2;
  #line 984 
  tid = smt_get_tid(smc);
  #line 983 
  smc->sm.pend[tmp] = tid;
  #line 985 
  ;
  #line 986 
  if (dna != 0) 
                #line 986 
                tmp_0 = & smc->mib.m[0].fddiMACDownstreamNbr; else 
                                                                   #line 986 
                                                                   tmp_0 = & smc->mib.m[0].fddiMACUpstreamNbr;
  #line 985 
  ;
  #line 985 
  smt_send_ecf(smc,tmp_0,65,tid,2,4448);
  #line 988 
  return;
}

#line 994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_send_ecf(struct s_smc *smc, struct fddi_addr *dest, int fc, u_long tid, int type, int len)
{
  #line 1002 
  struct smt_ecf *ecf;
  #line 1003 
  Mbuf *mb;
  #line 1005 
  mb = smt_build_frame(smc,4,type,(int)((unsigned int)len + 36U));
  #line 1005 
  if (mb == (Mbuf *)0) 
                       #line 1006 
                       return;
  #line 1007 
  ecf = (struct smt_ecf *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 1009 
  smt_fill_echo(smc,& ecf->ec_echo,tid,len);
  #line 1010 
  ecf->smt.smt_dest = *dest;
  #line 1011 
  ecf->smt.smt_tid = (unsigned int)tid;
  #line 1012 
  (smc->mib.priv.fddiPRIVECF_Req_Tx) ++;
  #line 1013 
  smt_send_frame(smc,mb,fc,0);
  #line 1014 
  return;
}

#line 1020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_send_sif_config(struct s_smc *smc, struct fddi_addr *dest, u_long tid, int local)
{
  #line 1025 
  struct smt_sif_config *sif;
  #line 1026 
  Mbuf *mb;
  #line 1027 
  int len;
  #line 1028 
  mb = smt_build_frame(smc,2,3,128);
  #line 1028 
  if (mb == (Mbuf *)0) 
                       #line 1030 
                       return;
  #line 1032 
  sif = (struct smt_sif_config *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 1033 
  smt_fill_timestamp(smc,& sif->ts);
  #line 1034 
  smt_fill_sde(smc,& sif->sde);
  #line 1035 
  smt_fill_version(smc,& sif->version);
  #line 1036 
  smt_fill_state(smc,& sif->state);
  #line 1037 
  smt_fill_policy(smc,& sif->policy);
  #line 1038 
  smt_fill_latency(smc,& sif->latency);
  #line 1039 
  smt_fill_neighbor(smc,& sif->neighbor);
  #line 1040 
  smt_fill_setcount(smc,& sif->setcount);
  #line 1041 
  len = smt_fill_path(smc,& sif->path);
  #line 1042 
  sif->smt.smt_dest = *dest;
  #line 1043 
  sif->smt.smt_tid = (unsigned int)tid;
  #line 1044 
  smt_add_frame_len(mb,len);
  #line 1046 
  smt_send_frame(smc,mb,65,local);
  #line 1047 
  return;
}

#line 1053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_send_sif_operation(struct s_smc *smc, struct fddi_addr *dest, u_long tid, int local)
{
  #line 1058 
  struct smt_sif_operation *sif;
  #line 1059 
  Mbuf *mb;
  #line 1060 
  int ports;
  #line 1061 
  int i;
  #line 1063 
  ports = 2;
  #line 1065 
  if ((unsigned int)smc->s.sas == 1U) 
                                      #line 1066 
                                      ports = 1;
  #line 1069 
  mb = smt_build_frame(smc,3,3,(int)((unsigned long)ports * (unsigned long)20U + (unsigned long)204U));
  #line 1069 
  if (mb == (Mbuf *)0) 
                       #line 1071 
                       return;
  #line 1072 
  sif = (struct smt_sif_operation *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 1073 
  smt_fill_timestamp(smc,& sif->ts);
  #line 1074 
  smt_fill_mac_status(smc,& sif->status);
  #line 1075 
  smt_fill_mac_counter(smc,& sif->mc);
  #line 1076 
  smt_fill_mac_fnc(smc,& sif->fnc);
  #line 1077 
  smt_fill_manufacturer(smc,& sif->man);
  #line 1078 
  smt_fill_user(smc,& sif->user);
  #line 1079 
  smt_fill_setcount(smc,& sif->setcount);
  #line 1083 
  if (ports == 1) 
                  #line 1084 
                  smt_fill_lem(smc,(struct smt_p_lem *)(& sif->lem),0);
  else {
    #line 1087 
    i = 0;
    #line 1087 
    while (i < ports) {
      #line 1088 
      smt_fill_lem(smc,& sif->lem[i],i);
      #line 1087 
      i ++;
    }
  }
  #line 1092 
  sif->smt.smt_dest = *dest;
  #line 1093 
  sif->smt.smt_tid = (unsigned int)tid;
  #line 1095 
  smt_send_frame(smc,mb,65,local);
  #line 1096 
  return;
}

#line 1101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
Mbuf *smt_build_frame(struct s_smc *smc, int class, int type, int length)
{
  #line 1104 
  Mbuf *mb;
  #line 1105 
  struct smt_header *smt;
  #line 1112 
  mb = smt_get_mbuf(smc);
  #line 1112 
  if (mb == (Mbuf *)0) 
                       #line 1113 
                       return mb;
  #line 1115 
  mb->m_len = (unsigned int)length;
  #line 1116 
  smt = (struct smt_header *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 1117 
  smt->smt_dest = fddi_broadcast;
  #line 1118 
  smt->smt_class = (unsigned char)class;
  #line 1119 
  smt->smt_type = (unsigned char)type;
  #line 1120 
  switch (class) {
    #line 1121 
    case 1: 
            #line 1121 
    ;
    #line 1122 
    case 2: 
            #line 1122 
    ;
    #line 1123 
    case 3: 
            #line 1123 
    ;
    #line 1124 
    case 4: 
            #line 1124 
    ;
    #line 1125 
    smt->smt_version = (unsigned short)1U;
    #line 1126 
    break;
    #line 1127 
    default: 
             #line 1127 
    ;
    #line 1128 
    smt->smt_version = (unsigned short)2U;
    #line 1129 
    break;
  }
  #line 1131 
  smt->smt_tid = (unsigned int)smt_get_tid(smc);
  #line 1132 
  smt->smt_pad = (unsigned short)0U;
  #line 1133 
  smt->smt_len = (unsigned short)((unsigned int)((unsigned short)length) + 65504U);
  #line 1134 
  return mb;
}

#line 1137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_add_frame_len(Mbuf *mb, int len)
{
  #line 1139 
  struct smt_header *smt;
  #line 1141 
  smt = (struct smt_header *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 1142 
  smt->smt_len = (unsigned short)((int)smt->smt_len + (int)((unsigned short)len));
  #line 1143 
  mb->m_len += (unsigned int)len;
  #line 1144 
  return;
}

#line 1151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_una(struct s_smc *smc, struct smt_p_una *una)
{
  #line 1153 
  una->para.p_type = (unsigned short)1U;
  #line 1153 
  una->para.p_len = (unsigned short)8U;
  #line 1154 
  una->una_pad = (unsigned short)0U;
  #line 1155 
  una->una_node = smc->mib.m[0].fddiMACUpstreamNbr;
  #line 1156 
  return;
}

#line 1161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_sde(struct s_smc *smc, struct smt_p_sde *sde)
{
  #line 1163 
  sde->para.p_type = (unsigned short)2U;
  #line 1163 
  sde->para.p_len = (unsigned short)4U;
  #line 1164 
  sde->sde_non_master = smc->mib.fddiSMTNonMaster_Ct;
  #line 1165 
  sde->sde_master = smc->mib.fddiSMTMaster_Ct;
  #line 1166 
  sde->sde_mac_count = (unsigned char)1U;
  #line 1170 
  sde->sde_type = (unsigned char)0U;
  #line 1171 
  return;
}

#line 1177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_state(struct s_smc *smc, struct smt_p_state *state)
{
  #line 1179 
  int top;
  #line 1180 
  int twist;
  #line 1210 
  int tmp_0;
  #line 1182 
  state->para.p_type = (unsigned short)3U;
  #line 1182 
  state->para.p_len = (unsigned short)4U;
  #line 1183 
  state->st_pad = (unsigned short)0U;
  #line 1186 
  top = 0;
  #line 1187 
  if ((unsigned int)smc->mib.fddiSMTPeerWrapFlag != 0U) 
                                                        #line 1188 
                                                        top |= 1;
  #line 1195 
  twist = pcm_status_twisted(smc);
  #line 1195 
  if ((twist & 1) != 0) 
                        #line 1196 
                        top |= 4;
  #line 1198 
  if ((twist & 2) != 0) 
                        #line 1199 
                        top |= 8;
  #line 1202 
  top |= 32;
  #line 1204 
  if (pcm_rooted_station(smc) != 0) 
                                    #line 1205 
                                    top |= 16;
  #line 1206 
  if (smc->mib.a[0].fddiPATHSbaPayload != 0UL) 
                                               #line 1207 
                                               top |= 64;
  #line 1208 
  state->st_topology = (unsigned char)top;
  #line 1210 
  if ((unsigned int)smc->mib.m[0].fddiMACUNDA_Flag != 0U) 
                                                          #line 1210 
                                                          tmp_0 = 2; else 
                                                                    #line 1210 
                                                                    tmp_0 = 0;
  #line 1209 
  state->st_dupl_addr = (unsigned char)(((unsigned int)smc->mib.m[0].fddiMACDA_Flag != 0U) | tmp_0);
  #line 1212 
  return;
}

#line 1217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_timestamp(struct s_smc *smc, struct smt_p_timestamp *ts)
{
  #line 1220 
  ts->para.p_type = (unsigned short)4U;
  #line 1220 
  ts->para.p_len = (unsigned short)8U;
  #line 1221 
  smt_set_timestamp(smc,(u_char *)(& ts->ts_time));
  #line 1222 
  return;
}

#line 1224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_set_timestamp(struct s_smc *smc, u_char *p)
{
  #line 1226 
  u_long time;
  #line 1227 
  u_long utime;
  #line 1234 
  utime = smt_get_time();
  #line 1235 
  time = utime * 100UL;
  #line 1236 
  time /= 250UL;
  #line 1237 
  *p = (unsigned char)0U;
  #line 1238 
  *(p + 1U) = (unsigned char)((unsigned int)((unsigned char)(time >> 31)) & 1U);
  #line 1239 
  *(p + 2U) = (unsigned char)(time >> 23);
  #line 1240 
  *(p + 3U) = (unsigned char)(time >> 15);
  #line 1241 
  *(p + 4U) = (unsigned char)(time >> 7);
  #line 1242 
  *(p + 5U) = (unsigned char)((int)((unsigned char)time) << 1U);
  #line 1243 
  *(p + 6U) = (unsigned char)((int)smc->sm.uniq_ticks >> 8);
  #line 1244 
  *(p + 7U) = (unsigned char)smc->sm.uniq_ticks;
  #line 1248 
  if (smc->sm.uniq_time != utime) 
                                  #line 1249 
                                  smc->sm.uniq_ticks = (unsigned short)0U;
  #line 1251 
  smc->sm.uniq_ticks = (u_short)((int)smc->sm.uniq_ticks + 1);
  #line 1252 
  smc->sm.uniq_time = utime;
  #line 1253 
  return;
}

#line 1258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_policy(struct s_smc *smc, struct smt_p_policy *policy)
{
  #line 1260 
  int i;
  #line 1261 
  u_char *map;
  #line 1262 
  u_short in;
  #line 1263 
  u_short out;
  #line 1269 
  u_char ansi_weirdness[16U] = {(unsigned char)0U, (unsigned char)7U, (unsigned char)5U, (unsigned char)3U, (unsigned char)8U, (unsigned char)1U, (unsigned char)6U, (unsigned char)4U, (unsigned char)9U, (unsigned char)10U, (unsigned char)2U, (unsigned char)11U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U};
  #line 1272 
  policy->para.p_type = (unsigned short)5U;
  #line 1272 
  policy->para.p_len = (unsigned short)4U;
  #line 1274 
  out = (unsigned short)0U;
  #line 1275 
  in = smc->mib.fddiSMTConnectionPolicy;
  #line 1276 
  i = 0;
  #line 1276 
  map = (u_char *)(& ansi_weirdness);
  #line 1276 
  while (i <= 15) {
    #line 1277 
    if (((int)in & 1) != 0) 
                            #line 1278 
                            out = (unsigned short)((1 << (int)*map) | (int)out);
    #line 1279 
    in = (unsigned short)((int)in >> 1);
    #line 1280 
    map ++;
    #line 1276 
    i ++;
  }
  #line 1282 
  policy->pl_config = smc->mib.fddiSMTConfigPolicy;
  #line 1283 
  policy->pl_connect = out;
  #line 1284 
  return;
}

#line 1289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_latency(struct s_smc *smc, struct smt_p_latency *latency)
{
  #line 1291 
  latency->para.p_type = (unsigned short)6U;
  #line 1291 
  latency->para.p_len = (unsigned short)8U;
  #line 1293 
  latency->lt_phyout_idx1 = (unsigned short)phy_index(smc,0);
  #line 1294 
  latency->lt_latency1 = (unsigned short)10U;
  #line 1299 
  if ((unsigned int)smc->s.sas == 0U) {
    #line 1300 
    latency->lt_phyout_idx2 = (unsigned short)phy_index(smc,1);
    #line 1301 
    latency->lt_latency2 = (unsigned short)10U;
  }
  else {
    #line 1304 
    latency->lt_phyout_idx2 = (unsigned short)0U;
    #line 1305 
    latency->lt_latency2 = (unsigned short)0U;
  }
  #line 1307 
  return;
}

#line 1312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_neighbor(struct s_smc *smc, struct smt_p_neighbor *neighbor)
{
  #line 1314 
  neighbor->para.p_type = (unsigned short)7U;
  #line 1314 
  neighbor->para.p_len = (unsigned short)16U;
  #line 1316 
  neighbor->nb_mib_index = (unsigned short)1U;
  #line 1317 
  neighbor->nb_mac_index = (unsigned short)mac_index(smc,1);
  #line 1318 
  neighbor->nb_una = smc->mib.m[0].fddiMACUpstreamNbr;
  #line 1319 
  neighbor->nb_dna = smc->mib.m[0].fddiMACDownstreamNbr;
  #line 1320 
  return;
}

#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static int smt_fill_path(struct s_smc *smc, struct smt_p_path *path)
{
  #line 1333 
  int type;
  #line 1334 
  int state;
  #line 1335 
  int remote;
  #line 1336 
  int mac;
  #line 1337 
  int len;
  #line 1338 
  int p;
  #line 1339 
  int physp;
  #line 1340 
  struct smt_phy_rec *phy;
  #line 1341 
  struct smt_mac_rec *pd_mac;
  #line 1343 
  if ((unsigned int)smc->s.sas == 1U) 
                                      #line 1343 
                                      len = 20; else 
                                                     #line 1343 
                                                     len = 28;
  #line 1346 
  path->para.p_type = (unsigned short)8U;
  #line 1347 
  path->para.p_len = (unsigned short)((unsigned int)((unsigned short)len) + 65532U);
  #line 1350 
  p = 0;
  #line 1350 
  phy = (struct smt_phy_rec *)(& path->pd_phy);
  #line 1350 
  while (1) {
    #line 1350 
    int tmp_1;
    #line 1350 
    if ((unsigned int)smc->s.sas == 1U) 
                                        #line 1350 
                                        tmp_1 = 1; else 
                                                        #line 1350 
                                                        tmp_1 = 2;
    #line 1350 
    ;
    #line 1350 
    if (! (tmp_1 > p)) 
                       #line 1350 
                       break;
    {
      #line 1351 
      physp = p;
      #line 1353 
      if ((unsigned int)smc->s.sas == 1U) 
                                          #line 1354 
                                          physp = 0;
      #line 1356 
      pcm_status_state(smc,physp,& type,& state,& remote,& mac);
      #line 1358 
      phy->phy_mib_index = (unsigned short)smt_swap_short((unsigned short)((int)((unsigned int)((unsigned short)p) + 1U)));
      #line 1362 
      phy->phy_type = (unsigned char)type;
      #line 1363 
      phy->phy_connect_state = (unsigned char)state;
      #line 1364 
      phy->phy_remote_type = (unsigned char)remote;
      #line 1365 
      phy->phy_remote_mac = (unsigned char)mac;
      #line 1366 
      phy->phy_resource_idx = (unsigned short)phy_con_resource_index(smc,p);
    }
    #line 1350 
    p ++;
    #line 1350 
    phy ++;
  }
  #line 1370 
  pd_mac = (struct smt_mac_rec *)phy;
  #line 1371 
  pd_mac->mac_addr = smc->mib.m[0].fddiMACSMTAddress;
  #line 1372 
  pd_mac->mac_resource_idx = (unsigned short)mac_con_resource_index(smc,1);
  #line 1373 
  return len;
}

#line 1379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_mac_status(struct s_smc *smc, struct smt_p_mac_status *st)
{
  #line 1381 
  st->para.p_type = (unsigned short)9U;
  #line 1381 
  st->para.p_len = (unsigned short)40U;
  #line 1383 
  st->st_mib_index = (unsigned short)1U;
  #line 1384 
  st->st_mac_index = (unsigned short)mac_index(smc,1);
  #line 1386 
  mac_update_counter(smc);
  #line 1391 
  st->st_t_req = (unsigned int)smc->mib.m[0].fddiMACT_Req;
  #line 1392 
  st->st_t_neg = (unsigned int)smc->mib.m[0].fddiMACT_Neg;
  #line 1393 
  st->st_t_max = (unsigned int)smc->mib.m[0].fddiMACT_Max;
  #line 1394 
  st->st_tvx_value = (unsigned int)smc->mib.m[0].fddiMACTvxValue;
  #line 1395 
  st->st_t_min = (unsigned int)smc->mib.m[0].fddiMACT_Min;
  #line 1397 
  st->st_sba = (unsigned int)smc->mib.a[0].fddiPATHSbaPayload;
  #line 1398 
  st->st_frame_ct = (unsigned int)smc->mib.m[0].fddiMACFrame_Ct;
  #line 1399 
  st->st_error_ct = (unsigned int)smc->mib.m[0].fddiMACError_Ct;
  #line 1400 
  st->st_lost_ct = (unsigned int)smc->mib.m[0].fddiMACLost_Ct;
  #line 1401 
  return;
}

#line 1406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_lem(struct s_smc *smc, struct smt_p_lem *lem, int phy)
{
  #line 1408 
  struct fddi_mib_p *mib;
  #line 1410 
  mib = smc->y[phy].mib;
  #line 1412 
  lem->para.p_type = (unsigned short)10U;
  #line 1412 
  lem->para.p_len = (unsigned short)16U;
  #line 1413 
  lem->lem_mib_index = (unsigned short)((unsigned int)((unsigned short)phy) + 1U);
  #line 1414 
  lem->lem_phy_index = (unsigned short)phy_index(smc,phy);
  #line 1415 
  lem->lem_pad2 = (unsigned char)0U;
  #line 1416 
  lem->lem_cutoff = mib->fddiPORTLer_Cutoff;
  #line 1417 
  lem->lem_alarm = mib->fddiPORTLer_Alarm;
  #line 1419 
  lem->lem_estimate = mib->fddiPORTLer_Estimate;
  #line 1421 
  lem->lem_reject_ct = (unsigned int)mib->fddiPORTLem_Reject_Ct;
  #line 1422 
  lem->lem_ct = (unsigned int)mib->fddiPORTLem_Ct;
  #line 1423 
  return;
}

#line 1428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_version(struct s_smc *smc, struct smt_p_version *vers)
{
  #line 1431 
  vers->para.p_type = (unsigned short)20U;
  #line 1431 
  vers->para.p_len = (unsigned short)8U;
  #line 1432 
  vers->v_pad = (unsigned short)0U;
  #line 1433 
  vers->v_n = (unsigned char)1U;
  #line 1434 
  vers->v_index = (unsigned char)1U;
  #line 1435 
  vers->v_version[0] = (unsigned short)2U;
  #line 1436 
  vers->v_pad2 = (unsigned short)0U;
  #line 1437 
  return;
}

#line 1447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_fsc(struct s_smc *smc, struct smt_p_fsc *fsc)
{
  #line 1450 
  fsc->para.p_type = (unsigned short)8203U;
  #line 1450 
  fsc->para.p_len = (unsigned short)8U;
  #line 1451 
  fsc->fsc_pad0 = (unsigned short)0U;
  #line 1452 
  fsc->fsc_mac_index = (unsigned short)1U;
  #line 1455 
  fsc->fsc_pad1 = (unsigned short)0U;
  #line 1456 
  fsc->fsc_value = (unsigned short)0U;
  #line 1458 
  fsc->fsc_mac_index = (unsigned short)smt_swap_short((unsigned short)1);
  #line 1459 
  fsc->fsc_value = (unsigned short)smt_swap_short((unsigned short)0);
  #line 1460 
  return;
}

#line 1467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_mac_counter(struct s_smc *smc, struct smt_p_mac_counter *mc)
{
  #line 1469 
  mc->para.p_type = (unsigned short)11U;
  #line 1469 
  mc->para.p_len = (unsigned short)12U;
  #line 1470 
  mc->mc_mib_index = (unsigned short)1U;
  #line 1471 
  mc->mc_index = (unsigned short)mac_index(smc,1);
  #line 1472 
  mc->mc_receive_ct = (unsigned int)smc->mib.m[0].fddiMACCopied_Ct;
  #line 1473 
  mc->mc_transmit_ct = (unsigned int)smc->mib.m[0].fddiMACTransmit_Ct;
  #line 1474 
  return;
}

#line 1479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_mac_fnc(struct s_smc *smc, struct smt_p_mac_fnc *fnc)
{
  #line 1481 
  fnc->para.p_type = (unsigned short)12U;
  #line 1481 
  fnc->para.p_len = (unsigned short)8U;
  #line 1482 
  fnc->nc_mib_index = (unsigned short)1U;
  #line 1483 
  fnc->nc_index = (unsigned short)mac_index(smc,1);
  #line 1484 
  fnc->nc_counter = (unsigned int)smc->mib.m[0].fddiMACNotCopied_Ct;
  #line 1485 
  return;
}

#line 1491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_manufacturer(struct s_smc *smc, struct smp_p_manufacturer *man)
{
  #line 1494 
  man->para.p_type = (unsigned short)15U;
  #line 1494 
  man->para.p_len = (unsigned short)32U;
  #line 1495 
  memcpy((void *)(& man->mf_data),(void *)(& smc->mib.fddiSMTManufacturerData),32UL);
  #line 1497 
  return;
}

#line 1503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_user(struct s_smc *smc, struct smp_p_user *user)
{
  #line 1505 
  user->para.p_type = (unsigned short)16U;
  #line 1505 
  user->para.p_len = (unsigned short)32U;
  #line 1506 
  memcpy((void *)(& user->us_data),(void *)(& smc->mib.fddiSMTUserData),32UL);
  #line 1508 
  return;
}

#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_setcount(struct s_smc *smc, struct smt_p_setcount *setcount)
{
  #line 1517 
  setcount->para.p_type = (unsigned short)4149U;
  #line 1517 
  setcount->para.p_len = (unsigned short)12U;
  #line 1518 
  setcount->count = (unsigned int)smc->mib.fddiSMTSetCount.count;
  #line 1519 
  memcpy((void *)(& setcount->timestamp),(void *)(& smc->mib.fddiSMTSetCount.timestamp),8UL);
  #line 1521 
  return;
}

#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_fill_echo(struct s_smc *smc, struct smt_p_echo *echo, u_long seed, int len)
{
  #line 1529 
  u_char *p;
  #line 1532 
  echo->para.p_type = (unsigned short)17U;
  #line 1532 
  echo->para.p_len = (unsigned short)4454U;
  #line 1533 
  echo->para.p_len = (unsigned short)len;
  #line 1534 
  p = (u_char *)(& echo->ec_data);
  #line 1534 
  while (len != 0) {
    {
      #line 1535 
      u_char *tmp;
      #line 1535 
      tmp = p;
      #line 1535 
      p ++;
      #line 1535 
      *tmp = (unsigned char)seed;
      #line 1536 
      seed += 13UL;
    }
    #line 1534 
    len --;
  }
  #line 1538 
  return;
}

#line 1544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_clear_una_dna(struct s_smc *smc)
{
  #line 1546 
  smc->mib.m[0].fddiMACUpstreamNbr = SMT_Unknown;
  #line 1547 
  smc->mib.m[0].fddiMACDownstreamNbr = SMT_Unknown;
  #line 1548 
  return;
}

#line 1550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_clear_old_una_dna(struct s_smc *smc)
{
  #line 1552 
  smc->mib.m[0].fddiMACOldUpstreamNbr = SMT_Unknown;
  #line 1553 
  smc->mib.m[0].fddiMACOldDownstreamNbr = SMT_Unknown;
  #line 1554 
  return;
}

#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
u_long smt_get_tid(struct s_smc *smc)
{
  #line 1558 
  u_long tid;
  #line 1559 
  while (1) {
    #line 1559 
    (smc->sm.smt_tid) ++;
    #line 1559 
    tid = smc->sm.smt_tid ^ 520780604UL;
    #line 1559 
    if (! (tid == 0UL)) 
                        #line 1559 
                        break;
  }
  #line 1561 
  return tid & 1073741823UL;
}

#line 1572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static struct smt_pdef smt_pdef[41U] = {{.ptype = 1, .plen = 12, .pswap = (char *)"s6"}, {.ptype = 2, .plen = 8, .pswap = (char *)"1111"}, {.ptype = 3, .plen = 8, .pswap = (char *)"scc"}, {.ptype = 4, .plen = 12, .pswap = (char *)"8"}, {.ptype = 5, .plen = 8, .pswap = (char *)"ss"}, {.ptype = 6, .plen = 12, .pswap = (char *)"ssss"}, {.ptype = 7, .plen = 20, .pswap = (char *)"ss66"}, {.ptype = 8, .plen = 28, .pswap = (char *)"[6s]"}, {.ptype = 9, .plen = 44, .pswap = (char *)"sslllllllll"}, {.ptype = 10, .plen = 20, .pswap = (char *)"ssccccll"}, {.ptype = 11, .plen = 16, .pswap = (char *)"ssll"}, {.ptype = 12, .plen = 12, .pswap = (char *)"ssl"}, {.ptype = 13, .plen = 36, .pswap = (char *)"ssl"}, {.ptype = 14, .plen = 12, .pswap = (char *)"ssl"}, {.ptype = 15, .plen = 36, .pswap = (char *)""}, {.ptype = 18, .plen = 8, .pswap = (char *)"l"}, {.ptype = 19, .plen = 40, .pswap = (char *)"l"}, {.ptype = 20, .plen = 12, .pswap = (char *)"sccss"}, {.ptype = 21, .plen = 8, .pswap = (char *)"l"}, {.ptype = 22, .plen = 8, .pswap = (char *)"l"}, {.ptype = 23, .plen = 8, .pswap = (char *)"l"}, {.ptype = 24, .plen = 8, .pswap = (char *)"l"}, {.ptype = 25, .plen = 12, .pswap = (char *)"s6"}, {.ptype = 26, .plen = 8, .pswap = (char *)"l"}, {.ptype = 27, .plen = 8, .pswap = (char *)"l"}, {.ptype = 28, .plen = 8, .pswap = (char *)"l"}, {.ptype = 29, .plen = 8, .pswap = (char *)"l"}, {.ptype = 4149, .pswap = (char *)"l8"}, {.ptype = 4168, .pswap = (char *)"ll"}, {.ptype = 8332, .pswap = (char *)"4lss66"}, {.ptype = 8333, .pswap = (char *)"4lllll"}, {.ptype = 8334, .pswap = (char *)"4llll"}, {.ptype = 8335, .pswap = (char *)"4ll6666s6"}, {.ptype = 8336, .pswap = (char *)"4lssl"}, {.ptype = 12811, .plen = 12, .pswap = (char *)"42s"}, {.ptype = 12815, .plen = 12, .pswap = (char *)"4l"}, {.ptype = 12816, .plen = 12, .pswap = (char *)"4l"}, {.ptype = 16464, .pswap = (char *)"4l1111ll"}, {.ptype = 16465, .pswap = (char *)"4lssss"}, {.ptype = 16466, .pswap = (char *)"4ll"}, {.ptype = 16467, .pswap = (char *)"4lsslss"}};
#line 1645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
int smt_check_para(struct s_smc *smc, struct smt_header *sm, u_short *list)
{
  #line 1648 
  u_short *p = list;
  #line 1649 
  while ((unsigned int)*p != 0U) {
    #line 1650 
    if (sm_to_para(smc,sm,(int)*p) == (void *)0) 
                                                 #line 1652 
                                                 return -1;
    #line 1654 
    p ++;
  }
  #line 1656 
  return 0;
}

#line 1659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void *sm_to_para(struct s_smc *smc, struct smt_header *sm, int para)
{
  #line 1661 
  char *p;
  #line 1662 
  int len;
  #line 1663 
  int plen;
  #line 1664 
  void *found = (void *)0;
  #line 1668 
  len = (int)sm->smt_len;
  #line 1669 
  p = (char *)(sm + 1U);
  #line 1670 
  while (len > 0) {
    #line 1671 
    if ((int)((struct smt_para *)p)->p_type == para) 
                                                     #line 1672 
                                                     found = (void *)p;
    #line 1673 
    plen = (int)((unsigned int)((struct smt_para *)p)->p_len + 4U);
    #line 1674 
    p += (unsigned long)plen;
    #line 1675 
    len -= plen;
    #line 1676 
    if (len < 0) 
                 #line 1678 
                 return (void *)0;
    #line 1680 
    if ((plen & 3) != 0 && para != 17) 
                                       #line 1682 
                                       return (void *)0;
    #line 1684 
    if (found != (void *)0) 
                            #line 1685 
                            return found;
  }
  #line 1687 
  return (void *)0;
}

#line 1737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static int mac_index(struct s_smc *smc, int mac)
{
  #line 1744 
  int tmp;
  #line 1744 
  if ((unsigned int)smc->s.sas == 1U) 
                                      #line 1744 
                                      tmp = 2; else 
                                                    #line 1744 
                                                    tmp = 3;
  #line 1744 
  return tmp;
}

#line 1751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static int phy_index(struct s_smc *smc, int phy)
{
  #line 1754 
  return phy + 1;
}

#line 1760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static int mac_con_resource_index(struct s_smc *smc, int mac)
{
  #line 1777 
  int tmp;
  #line 1768 
  switch ((int)smc->mib.fddiSMTCF_State) {
    #line 1769 
    case 9: 
            #line 1769 
    ;
    #line 1770 
    case 7: 
            #line 1770 
    ;
    #line 1771 
    case 11: 
             #line 1771 
    ;
    #line 1772 
    return 1;
    #line 1773 
    case 10: 
             #line 1773 
    ;
    #line 1774 
    case 12: 
             #line 1774 
    ;
    #line 1775 
    return 2;
  }
  #line 1777 
  if ((unsigned int)smc->s.sas == 1U) 
                                      #line 1777 
                                      tmp = 2; else 
                                                    #line 1777 
                                                    tmp = 3;
  #line 1777 
  return tmp;
}

#line 1784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static int phy_con_resource_index(struct s_smc *smc, int phy)
{
  #line 1789 
  switch ((int)smc->mib.fddiSMTCF_State) {
    #line 1791 
    int tmp;
    #line 1793 
    int tmp_0;
    #line 1795 
    int tmp_1;
    #line 1797 
    int tmp_2;
    #line 1790 
    case 9: 
            #line 1790 
    ;
    #line 1791 
    if (phy == 0) 
                  #line 1791 
                  tmp = 3; else 
                                #line 1791 
                                tmp = 2;
    #line 1791 
    return tmp;
    #line 1792 
    case 10: 
             #line 1792 
    ;
    #line 1793 
    if (phy == 0) 
                  #line 1793 
                  tmp_0 = 1; else 
                                  #line 1793 
                                  tmp_0 = 3;
    #line 1793 
    return tmp_0;
    #line 1794 
    case 12: 
             #line 1794 
    ;
    #line 1795 
    if (phy == 0) 
                  #line 1795 
                  tmp_1 = 3; else 
                                  #line 1795 
                                  tmp_1 = 1;
    #line 1795 
    return tmp_1;
    #line 1796 
    case 7: 
            #line 1796 
    ;
    #line 1797 
    if (phy == 0) 
                  #line 1797 
                  tmp_2 = 2; else 
                                  #line 1797 
                                  tmp_2 = 3;
    #line 1797 
    return tmp_2;
    #line 1798 
    case 11: 
             #line 1798 
    ;
    #line 1799 
    return 2;
  }
  #line 1801 
  return phy;
}

#line 1816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static int smt_swap_short(u_short s)
{
  #line 1818 
  return (((int)s >> 8) & 255) | (((int)s << 8) & 65535);
}

#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
void smt_swap_para(struct smt_header *sm, int len, int direction)
{
  #line 1824 
  struct smt_para *pa;
  #line 1825 
  struct smt_pdef *pd;
  #line 1826 
  char *p;
  #line 1827 
  int plen;
  #line 1828 
  int type;
  #line 1829 
  int i;
  #line 1834 
  smt_string_swap((char *)sm,(char *)"662sl8ss",len);
  #line 1837 
  len = (int)((unsigned int)len + 4294967264U);
  #line 1839 
  p = (char *)(sm + 1U);
  #line 1840 
  while (len > 0) {
    #line 1841 
    pa = (struct smt_para *)p;
    #line 1842 
    plen = (int)pa->p_len;
    #line 1843 
    type = (int)pa->p_type;
    #line 1844 
    pa->p_type = (unsigned short)smt_swap_short((unsigned short)((int)pa->p_type));
    #line 1845 
    pa->p_len = (unsigned short)smt_swap_short((unsigned short)((int)pa->p_len));
    #line 1846 
    if (direction != 0) {
      #line 1847 
      plen = (int)pa->p_len;
      #line 1848 
      type = (int)pa->p_type;
    }
    #line 1853 
    if (plen < 0) 
                  #line 1854 
                  break;
    #line 1855 
    plen = (int)((unsigned int)plen + 4U);
    #line 1856 
    i = 41;
    #line 1856 
    pd = (struct smt_pdef *)(& smt_pdef);
    #line 1856 
    while (i != 0) {
      #line 1857 
      if (pd->ptype == type) 
                             #line 1858 
                             break;
      #line 1856 
      i --;
      #line 1856 
      pd ++;
    }
    #line 1860 
    if (i != 0 && pd->pswap != (char *)0) 
                                          #line 1861 
                                          smt_string_swap(p + 4UL,pd->pswap,len);
    #line 1863 
    len -= plen;
    #line 1864 
    p += (unsigned long)plen;
  }
  #line 1866 
  return;
}

#line 1868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void smt_string_swap(char *data, char *format, int len)
{
  #line 1871 
  int x;
  #line 1870 
  char *open_paren = (char *)0;
  #line 1873 
  while (len > 0 && (int)*format != 0) {
    #line 1874 
    switch ((int)*format) {
      #line 1875 
      case 91: 
               #line 1875 
      ;
      #line 1876 
      open_paren = format;
      #line 1877 
      break;
      #line 1878 
      case 93: 
               #line 1878 
      ;
      #line 1879 
      format = open_paren;
      #line 1880 
      break;
      #line 1881 
      case 49: 
               #line 1881 
      ;
      #line 1882 
      case 50: 
               #line 1882 
      ;
      #line 1883 
      case 51: 
               #line 1883 
      ;
      #line 1884 
      case 52: 
               #line 1884 
      ;
      #line 1885 
      case 53: 
               #line 1885 
      ;
      #line 1886 
      case 54: 
               #line 1886 
      ;
      #line 1887 
      case 55: 
               #line 1887 
      ;
      #line 1888 
      case 56: 
               #line 1888 
      ;
      #line 1889 
      case 57: 
               #line 1889 
      ;
      #line 1890 
      data += (unsigned long)*format + 18446744073709551568U;
      #line 1891 
      len -= (int)*format + -48;
      #line 1892 
      break;
      #line 1893 
      case 99: 
               #line 1893 
      ;
      #line 1894 
      data ++;
      #line 1895 
      len --;
      #line 1896 
      break;
      #line 1897 
      case 115: 
                #line 1897 
      ;
      #line 1898 
      x = (int)*data;
      #line 1899 
      *data = *(data + 1U);
      #line 1900 
      *(data + 1U) = (char)x;
      #line 1901 
      data += 2U;
      #line 1902 
      len += -2;
      #line 1903 
      break;
      #line 1904 
      case 108: 
                #line 1904 
      ;
      #line 1905 
      x = (int)*data;
      #line 1906 
      *data = *(data + 3U);
      #line 1907 
      *(data + 3U) = (char)x;
      #line 1908 
      x = (int)*(data + 1U);
      #line 1909 
      *(data + 1U) = *(data + 2U);
      #line 1910 
      *(data + 2U) = (char)x;
      #line 1911 
      data += 4U;
      #line 1912 
      len += -4;
      #line 1913 
      break;
    }
    #line 1915 
    format ++;
  }
  #line 1917 
  return;
}

#line 1931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
int smt_action(struct s_smc *smc, int class, int code, int index)
{
  #line 1933 
  int event;
  #line 1934 
  int port;
  #line 1936 
  switch (class) {
    #line 1937 
    case 1: 
            #line 1937 
    ;
    #line 1938 
    switch (code) {
      #line 1939 
      case 0: 
              #line 1939 
      ;
      #line 1940 
      smc->mib.fddiSMTRemoteDisconnectFlag = (unsigned char)0U;
      #line 1941 
      queue_event(smc,1,1);
      #line 1942 
      break;
      #line 1943 
      case 1: 
              #line 1943 
      ;
      #line 1944 
      queue_event(smc,1,2);
      #line 1945 
      smc->mib.fddiSMTRemoteDisconnectFlag = (unsigned char)1U;
      #line 1946 
      smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 256U));
      #line 1946 
      ;
      #line 1946 
      ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 256U)));
      #line 1950 
      break;
      #line 1951 
      case 2: 
              #line 1951 
      ;
      #line 1955 
      break;
      #line 1956 
      case 3: 
              #line 1956 
      ;
      #line 1960 
      break;
      #line 1961 
      case 4: 
              #line 1961 
      ;
      #line 1962 
      if ((unsigned int)smc->y[0].pc_mode == 1U) {
        #line 1963 
        smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 4U));
        #line 1963 
        ;
        #line 1963 
        ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 4U)));
        #line 1964 
        queue_event(smc,5,11);
      }
      #line 1966 
      break;
      #line 1967 
      case 5: 
              #line 1967 
      ;
      #line 1968 
      if ((unsigned int)smc->y[1].pc_mode == 1U) {
        #line 1969 
        smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 4U));
        #line 1969 
        ;
        #line 1969 
        ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 4U)));
        #line 1970 
        queue_event(smc,6,11);
      }
      #line 1972 
      break;
      #line 1973 
      case 6: 
              #line 1973 
      ;
      #line 1974 
      port = 0;
      #line 1974 
      while (port <= 1) {
        {
          #line 1975 
          if ((unsigned int)smc->mib.p[port].fddiPORTMy_Type != 3U) 
                                                                    #line 1976 
                                                                    goto __Cont;
          #line 1977 
          smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 4U));
          #line 1977 
          ;
          #line 1977 
          ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 4U)));
          #line 1978 
          queue_event(smc,port + 5,11);
        }
        #line 1974 
        __Cont: 
                #line 1974 
        port ++;
      }
      #line 1980 
      break;
      #line 1981 
      default: 
               #line 1981 
      ;
      #line 1982 
      return 1;
    }
    #line 1984 
    break;
    #line 1985 
    case 2: 
            #line 1985 
    ;
    #line 1986 
    switch (code) {
      #line 1987 
      case 1: 
              #line 1987 
      ;
      #line 1988 
      event = 10;
      #line 1989 
      break;
      #line 1990 
      case 2: 
              #line 1990 
      ;
      #line 1991 
      event = 11;
      #line 1992 
      break;
      #line 1993 
      case 0: 
              #line 1993 
      ;
      #line 1994 
      event = 7;
      #line 1995 
      break;
      #line 1996 
      case 3: 
              #line 1996 
      ;
      #line 1997 
      event = 1;
      #line 1998 
      break;
      #line 1999 
      case 4: 
              #line 1999 
      ;
      #line 2000 
      event = 2;
      #line 2001 
      break;
      #line 2002 
      default: 
               #line 2002 
      ;
      #line 2003 
      return 1;
    }
    #line 2005 
    queue_event(smc,index + 5,event);
    #line 2006 
    break;
    #line 2007 
    default: 
             #line 2007 
    ;
    #line 2008 
    return 1;
  }
  #line 2010 
  return 0;
}

#line 2017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smt.c"
static void hwm_conv_can(struct s_smc *smc, char *data, int len)
{
  #line 2019 
  int i;
  #line 2023 
  i = len;
  #line 2023 
  while (i != 0) {
    #line 2024 
    unsigned char ___x;
    #line 2024 
    int tmp_1;
    {
      #line 2024 
      unsigned char __x = (unsigned char)*data;
      #line 2024 
      if (0 != 0) {
        #line 2024 
        ___x = __x;
        #line 2024 
        ___x = (unsigned char)(((int)___x >> 4) | ((int)___x << 4));
        #line 2024 
        ___x = (unsigned char)((((int)___x >> 2) & 51) | (((int)___x << 2) & -52));
        #line 2024 
        ___x = (unsigned char)((((int)___x >> 1) & 85) | (((int)___x << 1) & -86));
        #line 2024 
        tmp_1 = (int)___x;
      }
      else {
        #line 2024 
        tmp_1 = (int)__bitrev8((unsigned char)((int)__x));
      }
      }
    #line 2024 
    *data = (char)tmp_1;
    #line 2023 
    i --;
    #line 2023 
    data ++;
  }
  #line 2026 
  return;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 61 
int memcmp(void *, void *, size_t);
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
void smt_add_para(struct s_smc *smc, struct s_pcon *pcon, u_short para, int index, int local);
#line 563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 563 
int sm_pm_get_ls(struct s_smc *smc, int phy);
#line 568 
#line 568 
int cem_build_path(struct s_smc *smc, char *to, int path_index);
#line 587 
#line 587 
void rtm_set_timer(struct s_smc *smc);
#line 593 
#line 593 
int smt_set_mac_opvalues(struct s_smc *smc);
#line 622 
#line 622 
void ess_para_change(struct s_smc *smc);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
#line 495 
static int smt_authorize(struct s_smc *smc, struct smt_header *sm);
#line 32 
#line 530 
static int smt_check_set_count(struct s_smc *smc, struct smt_header *sm);
#line 33 
#line 1519 
static struct s_p_tab *smt_get_ptab(u_short para);
#line 34 
#line 1527 
static int smt_mib_phys(struct s_smc *smc);
#line 35 
#line 1071 
static int smt_set_para(struct s_smc *smc, struct smt_para *pa, int index, int local, int set);
#line 39 
#line 307 
static Mbuf *smt_build_pmf_response(struct s_smc *smc, struct smt_header *req, int set, int local);
#line 41 
#line 1540 
static int port_to_mib(struct s_smc *smc, int p);
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
static struct s_p_tab p_tab[142U] = {{.p_num = (unsigned short)4106U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)4107U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)58U, .p_swap = {(char)'8'}}, {.p_num = (unsigned short)4109U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)66U, .p_swap = {(char)'S'}}, {.p_num = (unsigned short)4110U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)68U, .p_swap = {(char)'S'}}, {.p_num = (unsigned short)4111U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)70U, .p_swap = {(char)'S'}}, {.p_num = (unsigned short)4112U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)72U, .p_swap = {(char)'D'}}, {.p_num = (unsigned short)4113U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)104U, .p_swap = {(char)'D'}}, {.p_num = (unsigned short)4114U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)136U, .p_swap = {(char)'S'}}, {.p_num = (unsigned short)4116U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)4117U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)138U, .p_swap = {(char)'B'}}, {.p_num = (unsigned short)4118U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)139U, .p_swap = {(char)'B'}}, {.p_num = (unsigned short)4119U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)140U, .p_swap = {(char)'B'}}, {.p_num = (unsigned short)4120U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)141U, .p_swap = {(char)'B'}}, {.p_num = (unsigned short)4121U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)142U, .p_swap = {(char)'S'}}, {.p_num = (unsigned short)4122U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)144U, .p_swap = {(char)'w', (char)'S'}}, {.p_num = (unsigned short)4123U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)146U, .p_swap = {(char)'w', (char)'S'}}, {.p_num = (unsigned short)4125U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)148U, .p_swap = {(char)'w', (char)'S'}}, {.p_num = (unsigned short)4126U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)150U, .p_swap = {(char)'b', (char)'B'}}, {.p_num = (unsigned short)4127U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)152U, .p_swap = {(char)'l', (char)'L'}}, {.p_num = (unsigned short)4128U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)160U, .p_swap = {(char)'I', (char)'I'}}, {.p_num = (unsigned short)4129U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)164U, .p_swap = {(char)'I'}}, {.p_num = (unsigned short)4130U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)166U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)4136U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)4137U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)168U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)4138U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)170U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)4140U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)174U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)4141U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)172U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)4142U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)175U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)4146U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)4147U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)176U, .p_swap = {(char)'P'}}, {.p_num = (unsigned short)4148U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)184U, .p_swap = {(char)'P'}}, {.p_num = (unsigned short)4149U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)192U, .p_swap = {(char)'4', (char)'P'}}, {.p_num = (unsigned short)4150U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)208U, .p_swap = {(char)'8'}}, {.p_num = (unsigned short)4156U, .p_access = (unsigned char)4U, .p_swap = {(char)'w', (char)'S'}}, {.p_num = (unsigned short)4336U, .p_access = (unsigned char)2U, .p_swap = {(char)'8'}}, {.p_num = (unsigned short)4337U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)8U, .p_swap = {(char)'8'}}, {.p_num = (unsigned short)4338U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)16U, .p_swap = {(char)'l', (char)'L'}}, {.p_num = (unsigned short)4339U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)24U, .p_swap = {(char)'l', (char)'L'}}, {.p_num = (unsigned short)4340U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)32U, .p_swap = {(char)'l', (char)'L'}}, {.p_num = (unsigned short)4341U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)40U, .p_swap = {(char)'l', (char)'L'}}, {.p_num = (unsigned short)4342U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)48U, .p_swap = {(char)'l', (char)'L'}}, {.p_num = (unsigned short)4343U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)56U, .p_swap = {(char)'w', (char)'S'}}, {.p_num = (unsigned short)8202U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)8203U, .p_access = (unsigned char)1U, .p_swap = {(char)'S'}}, {.p_num = (unsigned short)8205U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)8U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8206U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)16U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8212U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)8214U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)27U, .p_swap = {(char)'B'}}, {.p_num = (unsigned short)8215U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)28U, .p_swap = {(char)'S'}}, {.p_num = (unsigned short)8216U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)30U, .p_swap = {(char)'A'}}, {.p_num = (unsigned short)8217U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)36U, .p_swap = {(char)'A'}}, {.p_num = (unsigned short)8218U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)42U, .p_swap = {(char)'A'}}, {.p_num = (unsigned short)8219U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)48U, .p_swap = {(char)'A'}}, {.p_num = (unsigned short)8221U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)54U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)8224U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)56U, .p_swap = {(char)'w', (char)'S'}}, {.p_num = (unsigned short)8225U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)58U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)8226U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)60U, .p_swap = {(char)'S'}}, {.p_num = (unsigned short)8232U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)8233U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)62U, .p_swap = {(char)'A'}}, {.p_num = (unsigned short)8242U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)8243U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)88U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8244U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)96U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8245U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)112U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8246U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)128U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8248U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)136U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8249U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)144U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8250U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)152U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8251U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)160U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8252U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)168U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8253U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)176U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8254U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)184U, .p_swap = {(char)'T'}}, {.p_num = (unsigned short)8262U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)8263U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)192U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)8264U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)200U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)8265U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)208U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)8266U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)216U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)8273U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)224U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)8274U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)232U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)8275U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)240U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)8276U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)248U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)8278U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)256U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)8282U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)8287U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)320U, .p_swap = {(char)'w', (char)'S'}}, {.p_num = (unsigned short)8288U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)322U, .p_swap = {(char)'S'}}, {.p_num = (unsigned short)8292U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)8295U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)324U, .p_swap = {(char)'w', (char)'S'}}, {.p_num = (unsigned short)8297U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)326U, .p_swap = {(char)'S'}}, {.p_num = (unsigned short)8302U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)8303U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)328U, .p_swap = {(char)'S'}}, {.p_num = (unsigned short)8304U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)330U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)8305U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)331U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)8306U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)332U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)8307U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)333U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)8308U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)334U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)8309U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)335U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)8310U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)336U, .p_swap = {(char)'b', (char)'F'}}, {.p_num = (unsigned short)8432U, .p_access = (unsigned char)8U}, {.p_num = (unsigned short)8433U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)72U, .p_swap = {(char)'l', (char)'T'}}, {.p_num = (unsigned short)12810U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)12811U, .p_access = (unsigned char)1U, .p_swap = {(char)'r'}}, {.p_num = (unsigned short)12815U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)8U, .p_swap = {(char)'l', (char)'4'}}, {.p_num = (unsigned short)12816U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)16U, .p_swap = {(char)'l', (char)'4'}}, {.p_num = (unsigned short)12818U, .p_access = (unsigned char)1U}, {.p_num = (unsigned short)12819U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)24U, .p_swap = {(char)'l', (char)'T'}}, {.p_num = (unsigned short)12820U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)32U, .p_swap = {(char)'l', (char)'L'}}, {.p_num = (unsigned short)12821U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)40U, .p_swap = {(char)'l', (char)'T'}}, {.p_num = (unsigned short)12822U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)48U, .p_swap = {(char)'l', (char)'T'}}, {.p_num = (unsigned short)12823U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)56U, .p_swap = {(char)'l', (char)'T'}}, {.p_num = (unsigned short)16394U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)16396U, .p_access = (unsigned char)1U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)16397U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)2U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)16398U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)4U, .p_swap = {(char)'b', (char)'B'}}, {.p_num = (unsigned short)16399U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)5U, .p_swap = {(char)'2'}}, {.p_num = (unsigned short)16400U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)8U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)16401U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)10U, .p_swap = {(char)'l', (char)'4'}}, {.p_num = (unsigned short)16402U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)14U, .p_swap = {(char)'S'}}, {.p_num = (unsigned short)16403U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)16U, .p_swap = {(char)'B'}}, {.p_num = (unsigned short)16406U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)18U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)16407U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)17U, .p_swap = {(char)'B'}}, {.p_num = (unsigned short)16413U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)20U, .p_swap = {(char)'R'}}, {.p_num = (unsigned short)16414U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)16415U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)22U, .p_swap = {(char)'w', (char)'E'}}, {.p_num = (unsigned short)16417U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)26U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)16418U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)24U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)16424U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)16425U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)40U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)16426U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)32U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)16434U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)16435U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)72U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)16436U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)56U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)16437U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)64U, .p_swap = {(char)'C'}}, {.p_num = (unsigned short)16442U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)73U, .p_swap = {(char)'b', (char)'B'}}, {.p_num = (unsigned short)16443U, .p_access = (unsigned char)2U, .p_offset = (unsigned short)74U, .p_swap = {(char)'b', (char)'B'}}, {.p_num = (unsigned short)16444U, .p_access = (unsigned char)16U}, {.p_num = (unsigned short)16445U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)76U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)16446U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)80U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)16447U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)82U, .p_swap = {(char)'E'}}, {.p_num = (unsigned short)16448U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)85U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)16449U, .p_access = (unsigned char)1U, .p_offset = (unsigned short)84U, .p_swap = {(char)'F'}}, {.p_num = (unsigned short)16454U, .p_access = (unsigned char)4U, .p_swap = {(char)'w', (char)'S'}}, {.p_access = (unsigned char)16U}};
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
void smt_pmf_received_pack(struct s_smc *smc, Mbuf *mb, int local)
{
  #line 279 
  struct smt_header *sm;
  #line 280 
  Mbuf *reply;
  #line 282 
  sm = (struct smt_header *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 291 
  smt_start_watchdog(smc);
  #line 293 
  if ((unsigned int)sm->smt_class + 248U <= 1U) {
    #line 295 
    reply = smt_build_pmf_response(smc,sm,(unsigned int)sm->smt_class == 9U,local);
    #line 297 
    if (reply != (Mbuf *)0) {
      #line 298 
      sm = (struct smt_header *)((char *)(& reply->m_data) + (unsigned long)reply->m_off);
      #line 302 
      smt_send_frame(smc,reply,65,local);
    }
  }
  #line 305 
  return;
}

#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
static Mbuf *smt_build_pmf_response(struct s_smc *smc, struct smt_header *req, int set, int local)
{
  #line 310 
  Mbuf *mb;
  #line 311 
  struct smt_header *smt;
  #line 312 
  struct smt_para *pa;
  #line 313 
  struct smt_p_reason *res;
  #line 314 
  struct s_p_tab *pt;
  #line 315 
  int len;
  #line 316 
  int index;
  #line 317 
  int idx_end;
  #line 318 
  int error;
  #line 319 
  int range;
  #line 320 
  struct s_pcon pcon;
  #line 321 
  struct s_pcon set_pcon;
  #line 326 
  mb = smt_get_mbuf(smc);
  #line 326 
  if (mb == (Mbuf *)0) 
                       #line 327 
                       return mb;
  #line 329 
  smt = (struct smt_header *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 330 
  smt->smt_dest = req->smt_source;
  #line 331 
  smt->smt_class = req->smt_class;
  #line 332 
  smt->smt_type = (unsigned char)3U;
  #line 333 
  smt->smt_version = (unsigned short)2U;
  #line 334 
  smt->smt_tid = req->smt_tid;
  #line 335 
  smt->smt_pad = (unsigned short)0U;
  #line 336 
  smt->smt_len = (unsigned short)0U;
  #line 341 
  pcon.pc_len = 4332;
  #line 342 
  pcon.pc_err = 0;
  #line 343 
  pcon.pc_badset = 0;
  #line 344 
  pcon.pc_p = (void *)(smt + 1U);
  #line 349 
  error = 0;
  #line 350 
  if (set != 0) 
    #line 351 
    if (local == 0) {
      #line 351 
      if (smt_authorize(smc,req) != 0) 
                                       #line 352 
                                       error = 9; else 
                                                       #line 351 
                                                       goto _LAND;
    }
    else {
      #line 351 
      _LAND: 
      #line 353 
      if (smt_check_set_count(smc,req) != 0) 
                                             #line 354 
                                             pcon.pc_badset = 4;
    }
  #line 359 
  res = (struct smt_p_reason *)pcon.pc_p;
  #line 360 
  smt_add_para(smc,& pcon,(unsigned short)18,0,0);
  #line 361 
  smt_add_para(smc,& pcon,(unsigned short)4147,0,0);
  #line 363 
  set_pcon = pcon;
  #line 364 
  smt_add_para(smc,& pcon,(unsigned short)4149,0,0);
  #line 365 
  smt_add_para(smc,& pcon,(unsigned short)4150,0,0);
  #line 367 
  pcon.pc_err = error;
  #line 368 
  len = (int)req->smt_len;
  #line 369 
  pa = (struct smt_para *)(req + 1U);
  #line 373 
  while (pcon.pc_err == 0 && len > 0) {
    #line 374 
    if ((unsigned long)((unsigned short)len) < (unsigned long)pa->p_len + 4UL || ((int)pa->p_len & 3) != 0) {
      #line 375 
      pcon.pc_err = 10;
      #line 376 
      break;
    }
    #line 379 
    range = (int)pa->p_type & 61440;
    #line 379 
    if (range == 8192) 
                       #line 379 
                       goto _LOR;
    else 
      #line 380 
      if (range == 12288 || range == 16384) {
        #line 379 
        _LOR: {
                #line 384 
                index = (int)*((u_char *)pa + 7UL);
                #line 385 
                idx_end = index;
                #line 386 
                if (set == 0 && (unsigned int)pa->p_len != 4U) {
                  #line 387 
                  pcon.pc_err = 10;
                  #line 388 
                  break;
                }
                #line 390 
                if (index == 0 && set == 0) 
                  #line 391 
                  switch (range) {
                    #line 392 
                    case 8192: 
                               #line 392 
                    ;
                    #line 393 
                    index = 1;
                    #line 394 
                    idx_end = index;
                    #line 395 
                    break;
                    #line 396 
                    case 12288: 
                                #line 396 
                    ;
                    #line 397 
                    index = 1;
                    #line 398 
                    idx_end = index + 1;
                    #line 399 
                    break;
                    #line 400 
                    case 16384: 
                                #line 400 
                    ;
                    #line 401 
                    index = 1;
                    #line 402 
                    idx_end = index + 1;
                    #line 404 
                    if ((unsigned int)smc->s.sas == 1U) 
                                                        #line 405 
                                                        idx_end = 1;
                    #line 407 
                    break;
                  }
              }
      }
      else {
        #line 415 
        if (set == 0 && (unsigned int)pa->p_len != 0U) {
          #line 416 
          pcon.pc_err = 10;
          #line 417 
          break;
        }
        #line 419 
        index = 0;
        #line 420 
        idx_end = 0;
      }
    #line 422 
    while (index <= idx_end) {
      #line 427 
      pt = smt_get_ptab((unsigned short)((int)pa->p_type));
      #line 428 
      if ((pt != (struct s_p_tab *)0 && (unsigned int)pt->p_access == 16U) && set == 0) {
        #line 429 
        pt ++;
        #line 430 
        while ((unsigned int)pt->p_access + 255U <= 1U) {
          #line 432 
          smt_add_para(smc,& pcon,(unsigned short)((int)pt->p_num),index,local);
          #line 434 
          pt ++;
        }
      }
      else 
        #line 442 
        if ((unsigned int)pa->p_type != 33U && (set == 0 || (unsigned int)pa->p_type != 4149U)) {
          #line 444 
          int st;
          #line 445 
          if (pcon.pc_badset != 0) 
                                   #line 446 
                                   smt_add_para(smc,& pcon,(unsigned short)((int)pa->p_type),index,local);
          else 
            #line 449 
            if (set != 0) {
              #line 450 
              st = smt_set_para(smc,pa,index,local,1);
              #line 454 
              smt_add_para(smc,& pcon,(unsigned short)((int)pa->p_type),index,local);
              #line 456 
              pcon.pc_err = st;
            }
            else {
              #line 459 
              if (pt != (struct s_p_tab *)0 && (unsigned int)pt->p_access == 4U) 
                #line 460 
                pcon.pc_err = 5;
              #line 463 
              smt_add_para(smc,& pcon,(unsigned short)((int)pa->p_type),index,local);
            }
        }
      #line 467 
      if (pcon.pc_err != 0) 
                            #line 468 
                            break;
      #line 469 
      index ++;
    }
    #line 471 
    len = (int)((unsigned int)(len - (int)pa->p_len) + 4294967292U);
    #line 472 
    pa = (struct smt_para *)((char *)pa + ((unsigned long)pa->p_len + 4UL));
  }
  #line 474 
  smt->smt_len = (unsigned short)(4332U - (unsigned int)((unsigned short)pcon.pc_len));
  #line 475 
  mb->m_len = (unsigned int)smt->smt_len + 32U;
  #line 478 
  if (pcon.pc_badset != 0) 
                           #line 478 
                           res->rdf_reason = (unsigned int)pcon.pc_badset;
  else {
    #line 478 
    unsigned int tmp_1;
    #line 478 
    if (pcon.pc_err != 0) 
                          #line 478 
                          tmp_1 = (unsigned int)pcon.pc_err; else 
                                                                  #line 478 
                                                                  tmp_1 = 3U;
    #line 478 
    res->rdf_reason = tmp_1;
  }
  #line 480 
  if (set != 0 && res->rdf_reason == 3U) {
    #line 486 
    (smc->mib.fddiSMTSetCount.count) ++;
    #line 487 
    smt_set_timestamp(smc,(u_char *)(& smc->mib.fddiSMTSetCount.timestamp));
    #line 488 
    smc->mib.fddiSMTLastSetStationId = req->smt_sid;
    #line 489 
    smt_add_para(smc,& set_pcon,(unsigned short)4149,0,0);
    #line 490 
    smt_add_para(smc,& set_pcon,(unsigned short)4150,0,0);
  }
  #line 492 
  return mb;
}

#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
static int smt_authorize(struct s_smc *smc, struct smt_header *sm)
{
  #line 497 
  struct smt_para *pa;
  #line 498 
  int i;
  #line 499 
  char *p;
  #line 504 
  p = (char *)(& smc->mib.fddiPRPMFStation);
  #line 505 
  i = 0;
  #line 505 
  while (i <= 7 && (int)*(p + (unsigned long)i) == 0) 
                                                      #line 505 
                                                      i ++;
  #line 507 
  if (i != 8) {
    #line 508 
    if (memcmp((void *)(& sm->smt_sid),(void *)(& smc->mib.fddiPRPMFStation),
             8UL) != 0) 
      #line 510 
      return 1;
  }
  #line 515 
  p = (char *)(& smc->mib.fddiPRPMFPasswd);
  #line 516 
  i = 0;
  #line 516 
  while (i <= 7 && (int)*(p + (unsigned long)i) == 0) 
                                                      #line 516 
                                                      i ++;
  #line 518 
  if (i != 8) {
    #line 519 
    pa = (struct smt_para *)sm_to_para(smc,sm,33);
    #line 520 
    if (pa == (struct smt_para *)0) 
                                    #line 521 
                                    return 1;
    #line 522 
    if ((unsigned int)pa->p_len != 8U) 
                                       #line 523 
                                       return 1;
    #line 524 
    if (memcmp((void *)(pa + 1U),(void *)(& smc->mib.fddiPRPMFPasswd),8UL) != 0) 
      #line 525 
      return 1;
  }
  #line 527 
  return 0;
}

#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
static int smt_check_set_count(struct s_smc *smc, struct smt_header *sm)
{
  #line 532 
  struct smt_para *pa;
  #line 533 
  struct smt_p_setcount *sc;
  #line 535 
  pa = (struct smt_para *)sm_to_para(smc,sm,4149);
  #line 536 
  if (pa != (struct smt_para *)0) {
    #line 537 
    sc = (struct smt_p_setcount *)pa;
    #line 538 
    if (smc->mib.fddiSMTSetCount.count != (unsigned long)sc->count) 
                                                                    #line 541 
                                                                    return 1;
    else {
      #line 538 
      if (memcmp((void *)(& smc->mib.fddiSMTSetCount.timestamp),
               (void *)(& sc->timestamp),8UL) != 0) 
        #line 541 
        return 1;
    }
  }
  #line 543 
  return 0;
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
void smt_add_para(struct s_smc *smc, struct s_pcon *pcon, u_short para, int index, int local)
{
  #line 549 
  struct smt_para *pa;
  #line 550 
  struct s_p_tab *pt;
  #line 553 
  int len;
  #line 554 
  int plen;
  #line 555 
  char *from;
  #line 556 
  char *to;
  #line 557 
  char *swap;
  #line 558 
  char c;
  #line 559 
  int range;
  #line 560 
  char *mib_addr;
  #line 561 
  int mac;
  #line 562 
  int path;
  #line 563 
  int port;
  #line 564 
  int sp_len;
  #line 551 
  struct fddi_mib_m *mib_m = (struct fddi_mib_m *)0;
  #line 552 
  struct fddi_mib_p *mib_p = (struct fddi_mib_p *)0;
  #line 569 
  if (pcon->pc_err != 0) 
                         #line 570 
                         return;
  #line 575 
  pt = smt_get_ptab((unsigned short)((int)para));
  #line 576 
  if (pt != (struct s_p_tab *)0 && (unsigned int)pt->p_access == 4U) 
    #line 577 
    return;
  #line 579 
  to = (char *)pcon->pc_p;
  #line 580 
  len = pcon->pc_len;
  #line 581 
  plen = len;
  #line 582 
  pa = (struct smt_para *)to;
  #line 583 
  to += 4UL;
  #line 584 
  len = (int)((unsigned int)len + 4294967292U);
  #line 588 
  range = (int)para & 61440;
  #line 588 
  if (range == 8192) 
                     #line 588 
                     goto _LOR;
  else 
    #line 589 
    if (range == 12288 || range == 16384) {
      #line 588 
      _LOR: {
              #line 590 
              if (len <= 3) 
                            #line 591 
                            goto wrong_error;
              #line 592 
              *to = (char)0;
              #line 593 
              *(to + 1U) = (char)0;
              #line 594 
              *(to + 2U) = (char)0;
              #line 595 
              *(to + 3U) = (char)index;
              #line 596 
              len += -4;
              #line 597 
              to += 4U;
            }
    }
  #line 599 
  mac = index + -1;
  #line 600 
  path = index + -1;
  #line 601 
  port = index + -1;
  #line 605 
  switch (range) {
    #line 606 
    case 4096: 
               #line 606 
    ;
    #line 607 
    default: 
             #line 607 
    ;
    #line 608 
    mib_addr = (char *)(& smc->mib);
    #line 609 
    break;
    #line 610 
    case 8192: 
               #line 610 
    ;
    #line 611 
    if (mac != 0) {
      #line 612 
      pcon->pc_err = 6;
      #line 613 
      return;
    }
    #line 615 
    mib_addr = (char *)(& smc->mib.m[mac]);
    #line 616 
    mib_m = (struct fddi_mib_m *)mib_addr;
    #line 617 
    break;
    #line 618 
    case 12288: 
                #line 618 
    ;
    #line 619 
    if ((unsigned int)path > 1U) {
      #line 620 
      pcon->pc_err = 6;
      #line 621 
      return;
    }
    #line 623 
    mib_addr = (char *)(& smc->mib.a[path]);
    #line 624 
    break;
    #line 625 
    case 16384: 
                #line 625 
    ;
    #line 626 
    if (port < 0) 
                  #line 626 
                  goto _LOR_0;
    else {
      #line 626 
      ;
      #line 626 
      if (smt_mib_phys(smc) <= port) {
        #line 626 
        _LOR_0: {
                  #line 627 
                  pcon->pc_err = 6;
                  #line 628 
                  return;
                }
      }
    }
    #line 630 
    mib_addr = (char *)(& smc->mib.p[port_to_mib(smc,port)]);
    #line 631 
    mib_p = (struct fddi_mib_p *)mib_addr;
    #line 632 
    break;
  }
  #line 637 
  swap = (char *)0;
  #line 638 
  switch ((int)para) {
    #line 639 
    case 4336: 
               #line 639 
    ;
    #line 640 
    case 4337: 
               #line 640 
    ;
    #line 642 
    case 4338: 
               #line 642 
    ;
    #line 643 
    case 4339: 
               #line 643 
    ;
    #line 644 
    case 4340: 
               #line 644 
    ;
    #line 645 
    case 4341: 
               #line 645 
    ;
    #line 646 
    case 4342: 
               #line 646 
    ;
    #line 647 
    case 4343: 
               #line 647 
    ;
    #line 653 
    case 8433: 
               #line 653 
    ;
    #line 654 
    if (local == 0) {
      #line 655 
      pcon->pc_err = 6;
      #line 656 
      return;
    }
    #line 658 
    break;
    #line 659 
    case 8244: 
               #line 659 
    ;
    #line 660 
    case 8262: 
               #line 660 
    ;
    #line 661 
    case 8263: 
               #line 661 
    ;
    #line 662 
    case 8266: 
               #line 662 
    ;
    #line 663 
    case 8273: 
               #line 663 
    ;
    #line 664 
    case 8274: 
               #line 664 
    ;
    #line 665 
    mac_update_counter(smc);
    #line 666 
    break;
    #line 667 
    case 16418: 
                #line 667 
    ;
    #line 668 
    ;
    #line 668 
    mib_p->fddiPORTPC_LS = (unsigned short)((unsigned int)((unsigned short)sm_pm_get_ls(smc,port_to_mib(smc,port))) + 65524U);
    #line 670 
    break;
    #line 671 
    case 18: 
             #line 671 
    ;
    #line 672 
    *((unsigned int *)to) = 0U;
    #line 673 
    sp_len = 4;
    #line 674 
    goto sp_done;
    #line 675 
    case 4147: 
               #line 675 
    ;
    #line 676 
    smt_set_timestamp(smc,(u_char *)(& smc->mib.fddiSMTTimeStamp));
    #line 677 
    break;
    #line 679 
    case 4128: 
               #line 679 
    ;
    #line 684 
    if ((unsigned int)smc->s.sas == 1U) 
                                        #line 685 
                                        swap = (char *)"I"; else 
                                                                 #line 687 
                                                                 swap = (char *)"II";
    #line 696 
    break;
    #line 697 
    case 12818: 
                #line 697 
    ;
    #line 699 
    sp_len = cem_build_path(smc,to,path);
    #line 700 
    goto sp_done;
    #line 702 
    case 4168: 
               #line 702 
    ;
    {
      #line 704 
      struct smt_p_1048 *sp;
      #line 705 
      sp = (struct smt_p_1048 *)to;
      #line 706 
      sp->p1048_flag = (unsigned int)smc->mib.fddiSMTPeerWrapFlag;
      #line 707 
      sp->p1048_cf_state = (unsigned int)smc->mib.fddiSMTCF_State;
      #line 708 
      sp_len = 8;
      #line 709 
      goto sp_done;
    }
    #line 711 
    case 8332: 
               #line 711 
    ;
    {
      #line 713 
      struct smt_p_208c *sp_0;
      #line 718 
      int tmp_3;
      #line 714 
      sp_0 = (struct smt_p_208c *)to;
      #line 715 
      sp_0->p208c_flag = (unsigned int)smc->mib.m[0].fddiMACDuplicateAddressCond;
      #line 718 
      if ((unsigned int)mib_m->fddiMACUNDA_Flag != 0U) 
                                                       #line 718 
                                                       tmp_3 = 2; else 
                                                                    #line 718 
                                                                    tmp_3 = 0;
      #line 717 
      sp_0->p208c_dupcondition = (unsigned short)(((unsigned int)mib_m->fddiMACDA_Flag != 0U) | tmp_3);
      #line 720 
      sp_0->p208c_fddilong = mib_m->fddiMACSMTAddress;
      #line 722 
      sp_0->p208c_fddiunalong = mib_m->fddiMACUpstreamNbr;
      #line 724 
      sp_0->p208c_pad = (unsigned short)0U;
      #line 725 
      sp_len = 20;
      #line 726 
      goto sp_done;
    }
    #line 728 
    case 8333: 
               #line 728 
    ;
    {
      #line 730 
      struct smt_p_208d *sp_1;
      #line 731 
      sp_1 = (struct smt_p_208d *)to;
      #line 732 
      sp_1->p208d_flag = (unsigned int)mib_m->fddiMACFrameErrorFlag;
      #line 734 
      sp_1->p208d_frame_ct = (unsigned int)mib_m->fddiMACFrame_Ct;
      #line 736 
      sp_1->p208d_error_ct = (unsigned int)mib_m->fddiMACError_Ct;
      #line 738 
      sp_1->p208d_lost_ct = (unsigned int)mib_m->fddiMACLost_Ct;
      #line 740 
      sp_1->p208d_ratio = (unsigned int)mib_m->fddiMACFrameErrorRatio;
      #line 742 
      sp_len = 20;
      #line 743 
      goto sp_done;
    }
    #line 745 
    case 8334: 
               #line 745 
    ;
    {
      #line 747 
      struct smt_p_208e *sp_2;
      #line 748 
      sp_2 = (struct smt_p_208e *)to;
      #line 749 
      sp_2->p208e_flag = (unsigned int)mib_m->fddiMACNotCopiedFlag;
      #line 751 
      sp_2->p208e_not_copied = (unsigned int)mib_m->fddiMACNotCopied_Ct;
      #line 753 
      sp_2->p208e_copied = (unsigned int)mib_m->fddiMACCopied_Ct;
      #line 755 
      sp_2->p208e_not_copied_ratio = (unsigned int)mib_m->fddiMACNotCopiedRatio;
      #line 757 
      sp_len = 16;
      #line 758 
      goto sp_done;
    }
    #line 760 
    case 8335: 
               #line 760 
    ;
    {
      #line 762 
      struct smt_p_208f *sp_3;
      #line 763 
      sp_3 = (struct smt_p_208f *)to;
      #line 764 
      sp_3->p208f_multiple = (unsigned int)mib_m->fddiMACMultiple_N;
      #line 766 
      sp_3->p208f_nacondition = (unsigned int)mib_m->fddiMACDuplicateAddressCond;
      #line 768 
      sp_3->p208f_old_una = mib_m->fddiMACOldUpstreamNbr;
      #line 770 
      sp_3->p208f_new_una = mib_m->fddiMACUpstreamNbr;
      #line 772 
      sp_3->p208f_old_dna = mib_m->fddiMACOldDownstreamNbr;
      #line 774 
      sp_3->p208f_new_dna = mib_m->fddiMACDownstreamNbr;
      #line 776 
      sp_3->p208f_curren_path = mib_m->fddiMACCurrentPath;
      #line 778 
      sp_3->p208f_smt_address = mib_m->fddiMACSMTAddress;
      #line 780 
      sp_len = 40;
      #line 781 
      goto sp_done;
    }
    #line 783 
    case 8336: 
               #line 783 
    ;
    {
      #line 785 
      struct smt_p_2090 *sp_4;
      #line 786 
      sp_4 = (struct smt_p_2090 *)to;
      #line 787 
      sp_4->p2090_multiple = (unsigned int)mib_m->fddiMACMultiple_P;
      #line 789 
      sp_4->p2090_availablepaths = (unsigned short)mib_m->fddiMACAvailablePaths;
      #line 791 
      sp_4->p2090_currentpath = mib_m->fddiMACCurrentPath;
      #line 793 
      sp_4->p2090_requestedpaths = (unsigned int)mib_m->fddiMACRequestedPaths;
      #line 795 
      sp_len = 12;
      #line 796 
      goto sp_done;
    }
    #line 798 
    case 16464: 
                #line 798 
    ;
    {
      #line 800 
      struct smt_p_4050 *sp_5;
      #line 801 
      sp_5 = (struct smt_p_4050 *)to;
      #line 802 
      sp_5->p4050_flag = (unsigned int)mib_p->fddiPORTLerFlag;
      #line 804 
      sp_5->p4050_pad = (unsigned char)0U;
      #line 805 
      sp_5->p4050_cutoff = mib_p->fddiPORTLer_Cutoff;
      #line 807 
      sp_5->p4050_alarm = mib_p->fddiPORTLer_Alarm;
      #line 809 
      sp_5->p4050_estimate = mib_p->fddiPORTLer_Estimate;
      #line 811 
      sp_5->p4050_reject_ct = (unsigned int)mib_p->fddiPORTLem_Reject_Ct;
      #line 813 
      sp_5->p4050_ct = (unsigned int)mib_p->fddiPORTLem_Ct;
      #line 815 
      sp_len = 16;
      #line 816 
      goto sp_done;
    }
    #line 819 
    case 16465: 
                #line 819 
    ;
    {
      #line 821 
      struct smt_p_4051 *sp_6;
      #line 822 
      sp_6 = (struct smt_p_4051 *)to;
      #line 823 
      sp_6->p4051_multiple = (unsigned int)mib_p->fddiPORTMultiple_U;
      #line 825 
      sp_6->p4051_porttype = mib_p->fddiPORTMy_Type;
      #line 827 
      sp_6->p4051_connectstate = mib_p->fddiPORTConnectState;
      #line 829 
      sp_6->p4051_pc_neighbor = mib_p->fddiPORTNeighborType;
      #line 831 
      sp_6->p4051_pc_withhold = mib_p->fddiPORTPC_Withhold;
      #line 833 
      sp_len = 12;
      #line 834 
      goto sp_done;
    }
    #line 836 
    case 16466: 
                #line 836 
    ;
    {
      #line 838 
      struct smt_p_4052 *sp_7;
      #line 839 
      sp_7 = (struct smt_p_4052 *)to;
      #line 840 
      sp_7->p4052_flag = (unsigned int)mib_p->fddiPORTEB_Condition;
      #line 842 
      sp_7->p4052_eberrorcount = (unsigned int)mib_p->fddiPORTEBError_Ct;
      #line 844 
      sp_len = 8;
      #line 845 
      goto sp_done;
    }
    #line 847 
    case 16467: 
                #line 847 
    ;
    {
      #line 849 
      struct smt_p_4053 *sp_8;
      #line 850 
      sp_8 = (struct smt_p_4053 *)to;
      #line 851 
      sp_8->p4053_multiple = (unsigned int)mib_p->fddiPORTMultiple_P;
      #line 853 
      sp_8->p4053_availablepaths = (unsigned short)mib_p->fddiPORTAvailablePaths;
      #line 855 
      sp_8->p4053_currentpath = mib_p->fddiPORTCurrentPath;
      #line 857 
      memcpy((void *)(& sp_8->p4053_requestedpaths),(void *)(& mib_p->fddiPORTRequestedPaths),4UL);
      #line 859 
      sp_8->p4053_mytype = mib_p->fddiPORTMy_Type;
      #line 861 
      sp_8->p4053_neighbortype = mib_p->fddiPORTNeighborType;
      #line 863 
      sp_len = 16;
      #line 864 
      goto sp_done;
    }
    #line 866 
    default: 
             #line 866 
    ;
    #line 867 
    break;
  }
  #line 872 
  if (pt == (struct s_p_tab *)0) {
    #line 873 
    if (((int)para & 65280) != 0) 
                                  #line 873 
                                  pcon->pc_err = 6; else 
                                                         #line 873 
                                                         pcon->pc_err = 5;
    #line 875 
    return;
  }
  #line 880 
  switch ((int)pt->p_access) {
    #line 881 
    case 1: 
            #line 881 
    ;
    #line 882 
    case 2: 
            #line 882 
    ;
    #line 883 
    break;
    #line 884 
    default: 
             #line 884 
    ;
    #line 885 
    pcon->pc_err = 5;
    #line 886 
    return;
  }
  #line 888 
  from = mib_addr + (unsigned long)pt->p_offset;
  #line 889 
  if (swap == (char *)0) 
                         #line 890 
                         swap = (char *)(& pt->p_swap);
  #line 895 
  while (1) {
    #line 895 
    char *tmp_29;
    #line 895 
    tmp_29 = swap;
    #line 895 
    swap ++;
    #line 895 
    c = *tmp_29;
    #line 895 
    if (! ((int)c != 0)) 
                         #line 895 
                         break;
    #line 896 
    switch ((int)c) {
      #line 929 
      char *tmp_8;
      #line 930 
      char *tmp_9;
      #line 946 
      char *tmp_10;
      #line 955 
      char *tmp_11;
      #line 956 
      char *tmp_12;
      #line 957 
      char *tmp_13;
      #line 958 
      char *tmp_14;
      #line 973 
      char *tmp_15;
      #line 974 
      char *tmp_16;
      #line 981 
      char *tmp_17;
      #line 982 
      char *tmp_18;
      #line 983 
      char *tmp_19;
      #line 984 
      char *tmp_20;
      #line 1017 
      char *tmp_21;
      #line 1018 
      char *tmp_22;
      #line 1019 
      char *tmp_23;
      #line 1020 
      char *tmp_24;
      #line 1021 
      char *tmp_25;
      #line 1022 
      char *tmp_26;
      #line 1023 
      char *tmp_27;
      #line 1024 
      char *tmp_28;
      #line 897 
      case 98: 
               #line 897 
      ;
      #line 898 
      case 119: 
                #line 898 
      ;
      #line 899 
      case 108: 
                #line 899 
      ;
      #line 900 
      break;
      #line 901 
      case 83: 
               #line 901 
      ;
      #line 902 
      case 69: 
               #line 902 
      ;
      #line 903 
      case 82: 
               #line 903 
      ;
      #line 904 
      case 114: 
                #line 904 
      ;
      #line 905 
      if (len <= 3) 
                    #line 906 
                    goto len_error;
      #line 907 
      *to = (char)0;
      #line 908 
      *(to + 1U) = (char)0;
      #line 910 
      if ((int)c == 114) {
        #line 911 
        char *tmp_4;
        #line 912 
        char *tmp_5;
        #line 911 
        tmp_4 = from;
        #line 911 
        from ++;
        #line 911 
        *(to + 2U) = *tmp_4;
        #line 912 
        tmp_5 = from;
        #line 912 
        from ++;
        #line 912 
        *(to + 3U) = *tmp_5;
      }
      else {
        #line 915 
        char *tmp_6;
        #line 916 
        char *tmp_7;
        #line 915 
        tmp_6 = from;
        #line 915 
        from ++;
        #line 915 
        *(to + 3U) = *tmp_6;
        #line 916 
        tmp_7 = from;
        #line 916 
        from ++;
        #line 916 
        *(to + 2U) = *tmp_7;
      }
      #line 922 
      to += 4U;
      #line 923 
      len += -4;
      #line 924 
      break;
      #line 925 
      case 73: 
               #line 925 
      ;
      #line 926 
      if (len <= 1) 
                    #line 927 
                    goto len_error;
      #line 929 
      tmp_8 = from;
      #line 929 
      from ++;
      #line 929 
      *(to + 1U) = *tmp_8;
      #line 930 
      tmp_9 = from;
      #line 930 
      from ++;
      #line 930 
      *to = *tmp_9;
      #line 935 
      to += 2U;
      #line 936 
      len += -2;
      #line 937 
      break;
      #line 938 
      case 70: 
               #line 938 
      ;
      #line 939 
      case 66: 
               #line 939 
      ;
      #line 940 
      if (len <= 3) 
                    #line 941 
                    goto len_error;
      #line 942 
      len += -4;
      #line 943 
      *to = (char)0;
      #line 944 
      *(to + 1U) = (char)0;
      #line 945 
      *(to + 2U) = (char)0;
      #line 946 
      tmp_10 = from;
      #line 946 
      from ++;
      #line 946 
      *(to + 3U) = *tmp_10;
      #line 947 
      to += 4U;
      #line 948 
      break;
      #line 949 
      case 67: 
               #line 949 
      ;
      #line 950 
      case 84: 
               #line 950 
      ;
      #line 951 
      case 76: 
               #line 951 
      ;
      #line 952 
      if (len <= 3) 
                    #line 953 
                    goto len_error;
      #line 955 
      tmp_11 = from;
      #line 955 
      from ++;
      #line 955 
      *(to + 3U) = *tmp_11;
      #line 956 
      tmp_12 = from;
      #line 956 
      from ++;
      #line 956 
      *(to + 2U) = *tmp_12;
      #line 957 
      tmp_13 = from;
      #line 957 
      from ++;
      #line 957 
      *(to + 1U) = *tmp_13;
      #line 958 
      tmp_14 = from;
      #line 958 
      from ++;
      #line 958 
      *to = *tmp_14;
      #line 965 
      len += -4;
      #line 966 
      to += 4U;
      #line 967 
      break;
      #line 968 
      case 50: 
               #line 968 
      ;
      #line 969 
      if (len <= 3) 
                    #line 970 
                    goto len_error;
      #line 971 
      *to = (char)0;
      #line 972 
      *(to + 1U) = (char)0;
      #line 973 
      tmp_15 = from;
      #line 973 
      from ++;
      #line 973 
      *(to + 2U) = *tmp_15;
      #line 974 
      tmp_16 = from;
      #line 974 
      from ++;
      #line 974 
      *(to + 3U) = *tmp_16;
      #line 975 
      len += -4;
      #line 976 
      to += 4U;
      #line 977 
      break;
      #line 978 
      case 52: 
               #line 978 
      ;
      #line 979 
      if (len <= 3) 
                    #line 980 
                    goto len_error;
      #line 981 
      tmp_17 = from;
      #line 981 
      from ++;
      #line 981 
      *to = *tmp_17;
      #line 982 
      tmp_18 = from;
      #line 982 
      from ++;
      #line 982 
      *(to + 1U) = *tmp_18;
      #line 983 
      tmp_19 = from;
      #line 983 
      from ++;
      #line 983 
      *(to + 2U) = *tmp_19;
      #line 984 
      tmp_20 = from;
      #line 984 
      from ++;
      #line 984 
      *(to + 3U) = *tmp_20;
      #line 985 
      len += -4;
      #line 986 
      to += 4U;
      #line 987 
      break;
      #line 988 
      case 65: 
               #line 988 
      ;
      #line 989 
      if (len <= 7) 
                    #line 990 
                    goto len_error;
      #line 991 
      *to = (char)0;
      #line 992 
      *(to + 1U) = (char)0;
      #line 993 
      memcpy((void *)(to + 2U),(void *)from,6UL);
      #line 994 
      to += 8U;
      #line 995 
      from += 8U;
      #line 996 
      len += -8;
      #line 997 
      break;
      #line 998 
      case 56: 
               #line 998 
      ;
      #line 999 
      if (len <= 7) 
                    #line 1000 
                    goto len_error;
      #line 1001 
      memcpy((void *)to,(void *)from,8UL);
      #line 1002 
      to += 8U;
      #line 1003 
      from += 8U;
      #line 1004 
      len += -8;
      #line 1005 
      break;
      #line 1006 
      case 68: 
               #line 1006 
      ;
      #line 1007 
      if (len <= 31) 
                     #line 1008 
                     goto len_error;
      #line 1009 
      memcpy((void *)to,(void *)from,32UL);
      #line 1010 
      to += 32U;
      #line 1011 
      from += 32U;
      #line 1012 
      len += -32;
      #line 1013 
      break;
      #line 1014 
      case 80: 
               #line 1014 
      ;
      #line 1015 
      if (len <= 7) 
                    #line 1016 
                    goto len_error;
      #line 1017 
      tmp_21 = from;
      #line 1017 
      from ++;
      #line 1017 
      *to = *tmp_21;
      #line 1018 
      tmp_22 = from;
      #line 1018 
      from ++;
      #line 1018 
      *(to + 1U) = *tmp_22;
      #line 1019 
      tmp_23 = from;
      #line 1019 
      from ++;
      #line 1019 
      *(to + 2U) = *tmp_23;
      #line 1020 
      tmp_24 = from;
      #line 1020 
      from ++;
      #line 1020 
      *(to + 3U) = *tmp_24;
      #line 1021 
      tmp_25 = from;
      #line 1021 
      from ++;
      #line 1021 
      *(to + 4U) = *tmp_25;
      #line 1022 
      tmp_26 = from;
      #line 1022 
      from ++;
      #line 1022 
      *(to + 5U) = *tmp_26;
      #line 1023 
      tmp_27 = from;
      #line 1023 
      from ++;
      #line 1023 
      *(to + 6U) = *tmp_27;
      #line 1024 
      tmp_28 = from;
      #line 1024 
      from ++;
      #line 1024 
      *(to + 7U) = *tmp_28;
      #line 1025 
      to += 8U;
      #line 1026 
      len += -8;
      #line 1027 
      break;
      #line 1028 
      default: 
               #line 1028 
      ;
      #line 1029 
      printk((char *)"\001",119,(char *)"smt_add_para");
      #line 1030 
      break;
    }
  }
  #line 1034 
  done: 
        #line 1034 
  ;
  #line 1039 
  if ((len & 3) != 0) {
    #line 1040 
    *to = (char)0;
    #line 1041 
    *(to + 1U) = (char)0;
    #line 1042 
    to += (unsigned long)(4 - (len & 3));
    #line 1043 
    len &= -4;
  }
  #line 1047 
  pa->p_type = para;
  #line 1048 
  pa->p_len = (unsigned short)((unsigned int)((int)((unsigned short)plen) - (int)((unsigned short)len)) + 65532U);
  #line 1050 
  pcon->pc_p = (void *)to;
  #line 1051 
  pcon->pc_len = len;
  #line 1052 
  return;
  #line 1054 
  sp_done: 
           #line 1054 
  ;
  #line 1055 
  len -= sp_len;
  #line 1056 
  to += (unsigned long)sp_len;
  #line 1057 
  goto done;
  #line 1059 
  len_error: 
             #line 1059 
  ;
  #line 1061 
  pcon->pc_err = 11;
  #line 1062 
  return;
  #line 1064 
  wrong_error: 
               #line 1064 
  ;
  #line 1065 
  pcon->pc_err = 10;
  #line 1066 
  return;
}

#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
static int smt_set_para(struct s_smc *smc, struct smt_para *pa, int index, int local, int set)
{
  #line 1076 
  struct s_p_tab *pt;
  #line 1077 
  int len;
  #line 1078 
  char *from;
  #line 1079 
  char *to;
  #line 1080 
  char *swap;
  #line 1081 
  char c;
  #line 1082 
  char *mib_addr;
  #line 1083 
  struct fddi_mib *mib;
  #line 1087 
  int mac;
  #line 1088 
  int path;
  #line 1089 
  int port;
  #line 1090 
  u_char byte_val;
  #line 1091 
  u_short word_val;
  #line 1092 
  u_long long_val;
  #line 1084 
  struct fddi_mib_m *mib_m = (struct fddi_mib_m *)0;
  #line 1085 
  struct fddi_mib_a *mib_a = (struct fddi_mib_a *)0;
  #line 1086 
  struct fddi_mib_p *mib_p = (struct fddi_mib_p *)0;
  #line 1094 
  mac = index + -1;
  #line 1095 
  path = index + -1;
  #line 1096 
  port = index + -1;
  #line 1097 
  len = (int)pa->p_len;
  #line 1098 
  from = (char *)(pa + 1U);
  #line 1100 
  mib = & smc->mib;
  #line 1101 
  switch ((int)pa->p_type & 61440) {
    #line 1102 
    case 4096: 
               #line 1102 
    ;
    #line 1103 
    default: 
             #line 1103 
    ;
    #line 1104 
    mib_addr = (char *)mib;
    #line 1105 
    break;
    #line 1106 
    case 8192: 
               #line 1106 
    ;
    #line 1107 
    if (mac != 0) 
                  #line 1108 
                  return 6;
    #line 1110 
    mib_m = & smc->mib.m[mac];
    #line 1111 
    mib_addr = (char *)mib_m;
    #line 1112 
    from += 4U;
    #line 1113 
    len += -4;
    #line 1114 
    break;
    #line 1115 
    case 12288: 
                #line 1115 
    ;
    #line 1116 
    if ((unsigned int)path > 1U) 
                                 #line 1117 
                                 return 6;
    #line 1119 
    mib_a = & smc->mib.a[path];
    #line 1120 
    mib_addr = (char *)mib_a;
    #line 1121 
    from += 4U;
    #line 1122 
    len += -4;
    #line 1123 
    break;
    #line 1124 
    case 16384: 
                #line 1124 
    ;
    #line 1125 
    if (port < 0) 
                  #line 1126 
                  return 6;
    else {
      #line 1125 
      ;
      #line 1125 
      if (smt_mib_phys(smc) <= port) 
                                     #line 1126 
                                     return 6;
    }
    #line 1128 
    mib_p = & smc->mib.p[port_to_mib(smc,port)];
    #line 1129 
    mib_addr = (char *)mib_p;
    #line 1130 
    from += 4U;
    #line 1131 
    len += -4;
    #line 1132 
    break;
  }
  #line 1134 
  switch ((int)pa->p_type) {
    #line 1135 
    case 4336: 
               #line 1135 
    ;
    #line 1136 
    case 4337: 
               #line 1136 
    ;
    #line 1138 
    case 4338: 
               #line 1138 
    ;
    #line 1139 
    case 4339: 
               #line 1139 
    ;
    #line 1140 
    case 4340: 
               #line 1140 
    ;
    #line 1141 
    case 4341: 
               #line 1141 
    ;
    #line 1142 
    case 4342: 
               #line 1142 
    ;
    #line 1143 
    case 4343: 
               #line 1143 
    ;
    #line 1149 
    case 8433: 
               #line 1149 
    ;
    #line 1150 
    if (local == 0) 
                    #line 1151 
                    return 6;
    #line 1152 
    break;
  }
  #line 1154 
  pt = smt_get_ptab((unsigned short)((int)pa->p_type));
  #line 1155 
  if (pt == (struct s_p_tab *)0) {
    #line 1156 
    int tmp_1;
    #line 1156 
    if (((int)pa->p_type & 65280) != 0) 
                                        #line 1156 
                                        tmp_1 = 6; else 
                                                        #line 1156 
                                                        tmp_1 = 5;
    #line 1156 
    return tmp_1;
  }
  #line 1158 
  switch ((int)pt->p_access) {
    #line 1159 
    case 2: 
            #line 1159 
    ;
    #line 1160 
    case 4: 
            #line 1160 
    ;
    #line 1161 
    break;
    #line 1162 
    default: 
             #line 1162 
    ;
    #line 1163 
    return 5;
  }
  #line 1165 
  to = mib_addr + (unsigned long)pt->p_offset;
  #line 1166 
  swap = (char *)(& pt->p_swap);
  #line 1168 
  while (1) {
    #line 1168 
    if (swap != (char *)0) {
      #line 1168 
      char *tmp_14;
      #line 1168 
      tmp_14 = swap;
      #line 1168 
      swap ++;
      #line 1168 
      c = *tmp_14;
      #line 1168 
      if (! ((int)c != 0)) 
                           #line 1168 
                           break;
    }
    else 
         #line 1168 
         break;
    #line 1169 
    switch ((int)c) {
      #line 1224 
      char *tmp_2;
      #line 1225 
      char *tmp_3;
      #line 1226 
      char *tmp_4;
      #line 1227 
      char *tmp_5;
      #line 1170 
      case 98: 
               #line 1170 
      ;
      #line 1171 
      to = (char *)(& byte_val);
      #line 1172 
      break;
      #line 1173 
      case 119: 
                #line 1173 
      ;
      #line 1174 
      to = (char *)(& word_val);
      #line 1175 
      break;
      #line 1176 
      case 108: 
                #line 1176 
      ;
      #line 1177 
      to = (char *)(& long_val);
      #line 1178 
      break;
      #line 1179 
      case 83: 
               #line 1179 
      ;
      #line 1180 
      case 69: 
               #line 1180 
      ;
      #line 1181 
      case 82: 
               #line 1181 
      ;
      #line 1182 
      case 114: 
                #line 1182 
      ;
      #line 1183 
      if (len <= 3) 
                    #line 1184 
                    goto len_error;
      #line 1186 
      if (((int)((signed char)*from) | (int)((signed char)*(from + 1U))) != 0) 
        #line 1187 
        goto val_error;
      #line 1189 
      if ((int)c == 114) {
        #line 1190 
        *to = *(from + 2U);
        #line 1191 
        *(to + 1U) = *(from + 3U);
      }
      else {
        #line 1194 
        *(to + 1U) = *(from + 2U);
        #line 1195 
        *to = *(from + 3U);
      }
      #line 1201 
      from += 4U;
      #line 1202 
      to += 2U;
      #line 1203 
      len += -4;
      #line 1204 
      break;
      #line 1205 
      case 70: 
               #line 1205 
      ;
      #line 1206 
      case 66: 
               #line 1206 
      ;
      #line 1207 
      if (len <= 3) 
                    #line 1208 
                    goto len_error;
      #line 1210 
      if ((((int)((signed char)*from) | (int)((signed char)*(from + 1U))) | (int)((signed char)*(from + 2U))) != 0) 
        #line 1211 
        goto val_error;
      #line 1212 
      *to = *(from + 3U);
      #line 1213 
      len += -4;
      #line 1214 
      from += 4U;
      #line 1215 
      to += 4U;
      #line 1216 
      break;
      #line 1217 
      case 67: 
               #line 1217 
      ;
      #line 1218 
      case 84: 
               #line 1218 
      ;
      #line 1219 
      case 76: 
               #line 1219 
      ;
      #line 1220 
      if (len <= 3) 
                    #line 1221 
                    goto len_error;
      #line 1224 
      tmp_2 = from;
      #line 1224 
      from ++;
      #line 1224 
      *(to + 3U) = *tmp_2;
      #line 1225 
      tmp_3 = from;
      #line 1225 
      from ++;
      #line 1225 
      *(to + 2U) = *tmp_3;
      #line 1226 
      tmp_4 = from;
      #line 1226 
      from ++;
      #line 1226 
      *(to + 1U) = *tmp_4;
      #line 1227 
      tmp_5 = from;
      #line 1227 
      from ++;
      #line 1227 
      *to = *tmp_5;
      #line 1234 
      len += -4;
      #line 1235 
      to += 4U;
      #line 1236 
      break;
      #line 1237 
      case 65: 
               #line 1237 
      ;
      #line 1238 
      if (len <= 7) 
                    #line 1239 
                    goto len_error;
      #line 1240 
      if (set != 0) 
                    #line 1241 
                    memcpy((void *)to,(void *)(from + 2U),6UL);
      #line 1242 
      to += 8U;
      #line 1243 
      from += 8U;
      #line 1244 
      len += -8;
      #line 1245 
      break;
      #line 1246 
      case 52: 
               #line 1246 
      ;
      #line 1247 
      if (len <= 3) 
                    #line 1248 
                    goto len_error;
      #line 1249 
      if (set != 0) 
                    #line 1250 
                    memcpy((void *)to,(void *)from,4UL);
      #line 1251 
      to += 4U;
      #line 1252 
      from += 4U;
      #line 1253 
      len += -4;
      #line 1254 
      break;
      #line 1255 
      case 56: 
               #line 1255 
      ;
      #line 1256 
      if (len <= 7) 
                    #line 1257 
                    goto len_error;
      #line 1258 
      if (set != 0) 
                    #line 1259 
                    memcpy((void *)to,(void *)from,8UL);
      #line 1260 
      to += 8U;
      #line 1261 
      from += 8U;
      #line 1262 
      len += -8;
      #line 1263 
      break;
      #line 1264 
      case 68: 
               #line 1264 
      ;
      #line 1265 
      if (len <= 31) 
                     #line 1266 
                     goto len_error;
      #line 1267 
      if (set != 0) 
                    #line 1268 
                    memcpy((void *)to,(void *)from,32UL);
      #line 1269 
      to += 32U;
      #line 1270 
      from += 32U;
      #line 1271 
      len += -32;
      #line 1272 
      break;
      #line 1273 
      case 80: 
               #line 1273 
      ;
      #line 1274 
      if (set != 0) {
        #line 1275 
        char *tmp_6;
        #line 1276 
        char *tmp_7;
        #line 1277 
        char *tmp_8;
        #line 1278 
        char *tmp_9;
        #line 1279 
        char *tmp_10;
        #line 1280 
        char *tmp_11;
        #line 1281 
        char *tmp_12;
        #line 1282 
        char *tmp_13;
        #line 1275 
        tmp_6 = from;
        #line 1275 
        from ++;
        #line 1275 
        *to = *tmp_6;
        #line 1276 
        tmp_7 = from;
        #line 1276 
        from ++;
        #line 1276 
        *(to + 1U) = *tmp_7;
        #line 1277 
        tmp_8 = from;
        #line 1277 
        from ++;
        #line 1277 
        *(to + 2U) = *tmp_8;
        #line 1278 
        tmp_9 = from;
        #line 1278 
        from ++;
        #line 1278 
        *(to + 3U) = *tmp_9;
        #line 1279 
        tmp_10 = from;
        #line 1279 
        from ++;
        #line 1279 
        *(to + 4U) = *tmp_10;
        #line 1280 
        tmp_11 = from;
        #line 1280 
        from ++;
        #line 1280 
        *(to + 5U) = *tmp_11;
        #line 1281 
        tmp_12 = from;
        #line 1281 
        from ++;
        #line 1281 
        *(to + 6U) = *tmp_12;
        #line 1282 
        tmp_13 = from;
        #line 1282 
        from ++;
        #line 1282 
        *(to + 7U) = *tmp_13;
      }
      #line 1284 
      to += 8U;
      #line 1285 
      len += -8;
      #line 1286 
      break;
      #line 1287 
      default: 
               #line 1287 
      ;
      #line 1288 
      printk((char *)"\001",120,(char *)"smt_set_para");
      #line 1289 
      return 5;
    }
  }
  #line 1295 
  switch ((int)pa->p_type) {
    #line 1296 
    case 4122: 
               #line 1296 
    ;
    #line 1297 
    if (((int)word_val & -2) != 0) 
                                   #line 1298 
                                   goto val_error;
    #line 1299 
    if (set != 0) 
                  #line 1299 
                  mib->fddiSMTConfigPolicy = word_val;
    #line 1300 
    break;
    #line 1301 
    case 4123: 
               #line 1301 
    ;
    #line 1302 
    if (((int)word_val & 32768) == 0) 
                                      #line 1303 
                                      goto val_error;
    #line 1304 
    if (set != 0) 
                  #line 1304 
                  mib->fddiSMTConnectionPolicy = word_val;
    #line 1305 
    break;
    #line 1306 
    case 4125: 
               #line 1306 
    ;
    #line 1307 
    if ((unsigned int)word_val + 65534U > 28U) 
                                               #line 1308 
                                               goto val_error;
    #line 1309 
    if (set != 0) 
                  #line 1309 
                  mib->fddiSMTTT_Notify = word_val;
    #line 1310 
    break;
    #line 1311 
    case 4126: 
               #line 1311 
    ;
    #line 1312 
    if (((int)byte_val & -2) != 0) 
                                   #line 1313 
                                   goto val_error;
    #line 1314 
    if (set != 0) 
                  #line 1314 
                  mib->fddiSMTStatRptPolicy = byte_val;
    #line 1315 
    break;
    #line 1316 
    case 4127: 
               #line 1316 
    ;
    #line 1321 
    if (long_val <= 75022160UL) 
                                #line 1322 
                                goto val_error;
    #line 1323 
    if (set != 0) 
                  #line 1323 
                  mib->fddiSMTTrace_MaxExpiration = long_val;
    #line 1324 
    break;
    #line 1326 
    case 4338: 
               #line 1326 
    ;
    #line 1327 
    if (long_val > 1562UL) 
                           #line 1328 
                           goto val_error;
    #line 1329 
    if (set != 0 && smc->mib.fddiESSPayload != long_val) {
      #line 1330 
      smc->ess.raf_act_timer_poll = (char)1;
      #line 1331 
      smc->mib.fddiESSPayload = long_val;
    }
    #line 1333 
    break;
    #line 1334 
    case 4339: 
               #line 1334 
    ;
    #line 1335 
    if (long_val + 18446744073709551566UL > 4950UL) 
                                                    #line 1336 
                                                    goto val_error;
    #line 1337 
    if ((set != 0 && smc->mib.fddiESSPayload != 0UL) && smc->mib.fddiESSOverhead != long_val) {
      #line 1339 
      smc->ess.raf_act_timer_poll = (char)1;
      #line 1340 
      smc->mib.fddiESSOverhead = long_val;
    }
    #line 1342 
    break;
    #line 1343 
    case 4340: 
               #line 1343 
    ;
    #line 1344 
    if (long_val + 2062500UL > 2000000UL) 
                                          #line 1345 
                                          goto val_error;
    #line 1346 
    if (set != 0) 
                  #line 1346 
                  mib->fddiESSMaxTNeg = long_val;
    #line 1347 
    break;
    #line 1348 
    case 4341: 
               #line 1348 
    ;
    #line 1349 
    if (long_val + 18446744073709551615UL > 4477UL) 
                                                    #line 1350 
                                                    goto val_error;
    #line 1351 
    if (set != 0) 
                  #line 1351 
                  mib->fddiESSMinSegmentSize = long_val;
    #line 1352 
    break;
    #line 1353 
    case 4342: 
               #line 1353 
    ;
    #line 1354 
    if ((long_val & 65535UL) != 1UL) 
                                     #line 1355 
                                     goto val_error;
    #line 1356 
    if (set != 0) 
                  #line 1356 
                  mib->fddiESSCategory = long_val;
    #line 1357 
    break;
    #line 1358 
    case 4343: 
               #line 1358 
    ;
    #line 1359 
    if ((unsigned int)word_val > 1U) 
                                     #line 1360 
                                     goto val_error;
    #line 1361 
    if (set != 0) 
                  #line 1361 
                  mib->fddiESSSynchTxMode = (short)word_val;
    #line 1362 
    break;
    #line 1376 
    case 8224: 
               #line 1376 
    ;
    #line 1377 
    if (((int)word_val & 36) == 0) 
                                   #line 1379 
                                   goto val_error;
    #line 1380 
    if (set != 0) 
                  #line 1380 
                  mib_m->fddiMACRequestedPaths = word_val;
    #line 1381 
    break;
    #line 1382 
    case 8287: 
               #line 1382 
    ;
    #line 1384 
    if (set != 0) 
                  #line 1384 
                  mib_m->fddiMACFrameErrorThreshold = word_val;
    #line 1385 
    break;
    #line 1386 
    case 8295: 
               #line 1386 
    ;
    #line 1388 
    if (set != 0) 
                  #line 1388 
                  mib_m->fddiMACNotCopiedThreshold = word_val;
    #line 1389 
    break;
    #line 1390 
    case 8310: 
               #line 1390 
    ;
    #line 1391 
    if (((int)byte_val & -2) != 0) 
                                   #line 1392 
                                   goto val_error;
    #line 1393 
    if (set != 0) {
      #line 1394 
      mib_m->fddiMACMA_UnitdataEnable = byte_val;
      #line 1395 
      queue_event(smc,3,11);
    }
    #line 1397 
    break;
    #line 1398 
    case 8433: 
               #line 1398 
    ;
    #line 1399 
    if (set != 0) 
                  #line 1399 
                  mib_m->fddiMACT_Min = long_val;
    #line 1400 
    break;
    #line 1401 
    case 12815: 
                #line 1401 
    ;
    #line 1402 
    if (long_val > 1562UL) 
                           #line 1403 
                           goto val_error;
    #line 1404 
    if (set != 0) 
                  #line 1404 
                  mib_a->fddiPATHSbaPayload = long_val;
    #line 1406 
    if (set != 0) 
                  #line 1407 
                  ess_para_change(smc);
    #line 1409 
    break;
    #line 1410 
    case 12816: 
                #line 1410 
    ;
    #line 1411 
    if (long_val > 5000UL) 
                           #line 1412 
                           goto val_error;
    #line 1414 
    if (long_val != 0UL && mib_a->fddiPATHSbaPayload == 0UL) 
                                                             #line 1415 
                                                             goto val_error;
    #line 1417 
    if (set != 0) 
                  #line 1417 
                  mib_a->fddiPATHSbaOverhead = long_val;
    #line 1419 
    if (set != 0) 
                  #line 1420 
                  ess_para_change(smc);
    #line 1422 
    break;
    #line 1423 
    case 12819: 
                #line 1423 
    ;
    #line 1427 
    if (set != 0) {
      #line 1428 
      mib_a->fddiPATHT_Rmode = long_val;
      #line 1429 
      rtm_set_timer(smc);
    }
    #line 1431 
    break;
    #line 1432 
    case 12820: 
                #line 1432 
    ;
    #line 1433 
    if (long_val > 12500000UL) 
                               #line 1434 
                               goto val_error;
    #line 1439 
    if (set != 0) 
                  #line 1439 
                  mib_a->fddiPATHSbaAvailable = long_val;
    #line 1440 
    break;
    #line 1441 
    case 12821: 
                #line 1441 
    ;
    #line 1442 
    if (set != 0) 
                  #line 1442 
                  mib_a->fddiPATHTVXLowerBound = long_val;
    #line 1443 
    goto change_mac_para;
    #line 1444 
    case 12822: 
                #line 1444 
    ;
    #line 1445 
    if (set != 0) 
                  #line 1445 
                  mib_a->fddiPATHT_MaxLowerBound = long_val;
    #line 1446 
    goto change_mac_para;
    #line 1447 
    case 12823: 
                #line 1447 
    ;
    #line 1448 
    if (set != 0) 
                  #line 1448 
                  mib_a->fddiPATHMaxT_Req = long_val;
    #line 1450 
    change_mac_para: 
                     #line 1450 
    ;
    #line 1451 
    if (set != 0) {
      #line 1451 
      if (smt_set_mac_opvalues(smc) != 0) {
        #line 1452 
        smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 4U));
        #line 1452 
        ;
        #line 1452 
        ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 4U)));
        #line 1453 
        smc->sm.please_reconnect = (unsigned short)1U;
        #line 1454 
        queue_event(smc,1,2);
      }
    }
    #line 1456 
    break;
    #line 1457 
    case 16398: 
                #line 1457 
    ;
    #line 1458 
    if ((unsigned int)byte_val > 1U) 
                                     #line 1459 
                                     goto val_error;
    #line 1460 
    if (set != 0) 
                  #line 1460 
                  mib_p->fddiPORTConnectionPolicies = byte_val;
    #line 1461 
    break;
    #line 1462 
    case 16401: 
                #line 1462 
    ;
    #line 1464 
    if (set != 0) 
                  #line 1464 
                  memcpy((void *)(& mib_p->fddiPORTRequestedPaths),(void *)(& long_val),4UL);
    #line 1466 
    break;
    #line 1467 
    case 16415: 
                #line 1467 
    ;
    #line 1468 
    if ((unsigned int)word_val > 4U) 
                                     #line 1469 
                                     goto val_error;
    #line 1470 
    if (set != 0) 
                  #line 1470 
                  mib_p->fddiPORTMaint_LS = word_val;
    #line 1471 
    break;
    #line 1472 
    case 16442: 
                #line 1472 
    ;
    #line 1473 
    if ((unsigned int)byte_val + 252U > 11U) 
                                             #line 1474 
                                             goto val_error;
    #line 1475 
    if (set != 0) 
                  #line 1475 
                  mib_p->fddiPORTLer_Cutoff = byte_val;
    #line 1476 
    break;
    #line 1477 
    case 16443: 
                #line 1477 
    ;
    #line 1478 
    if ((unsigned int)byte_val + 252U > 11U) 
                                             #line 1479 
                                             goto val_error;
    #line 1480 
    if (set != 0) 
                  #line 1480 
                  mib_p->fddiPORTLer_Alarm = byte_val;
    #line 1481 
    break;
    #line 1486 
    case 4156: 
               #line 1486 
    ;
    #line 1487 
    if (smt_action(smc,1,(int)word_val,0) != 0) 
                                                #line 1488 
                                                goto val_error;
    #line 1489 
    break;
    #line 1490 
    case 16454: 
                #line 1490 
    ;
    #line 1491 
    ;
    #line 1491 
    ;
    #line 1491 
    if (smt_action(smc,2,(int)word_val,port_to_mib(smc,port)) != 0) 
                                                                    #line 1493 
                                                                    goto val_error;
    #line 1494 
    break;
    #line 1495 
    default: 
             #line 1495 
    ;
    #line 1496 
    break;
  }
  #line 1498 
  return 0;
  #line 1500 
  val_error: 
             #line 1500 
  ;
  #line 1502 
  return 8;
  #line 1504 
  len_error: 
             #line 1504 
  ;
  #line 1506 
  return 10;
}

#line 1519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
static struct s_p_tab *smt_get_ptab(u_short para)
{
  #line 1521 
  struct s_p_tab *pt;
  #line 1524 
  struct s_p_tab *tmp;
  #line 1522 
  pt = (struct s_p_tab *)(& p_tab);
  #line 1522 
  while ((unsigned int)pt->p_num != 0U && (int)pt->p_num != (int)para) 
    #line 1522 
    pt ++;
  #line 1524 
  if ((unsigned int)pt->p_num != 0U) 
                                     #line 1524 
                                     tmp = pt; else 
                                                    #line 1524 
                                                    tmp = (struct s_p_tab *)0;
  #line 1524 
  return tmp;
}

#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
static int smt_mib_phys(struct s_smc *smc)
{
  #line 1534 
  if ((unsigned int)smc->s.sas == 1U) 
                                      #line 1535 
                                      return 1;
  #line 1536 
  return 2;
}

#line 1540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pmf.c"
static int port_to_mib(struct s_smc *smc, int p)
{
  #line 1547 
  if ((unsigned int)smc->s.sas == 1U) 
                                      #line 1548 
                                      return 0;
  #line 1549 
  return p;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 56 
void __dynamic_pr_debug(struct _ddebug *, char * , ...);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 750  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_spin_lock_DriverLock_of_s_smt_os(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 759  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_spin_unlock_DriverLock_of_s_smt_os(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 777  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_spin_unlock_irqrestore_DriverLock_of_s_smt_os(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 768 
static void cif___ldv_spin_lock_DriverLock_of_s_smt_os(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
#line 210 
bool capable(int);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 209 
#line 209 
void iounmap(void *);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 32 
unsigned int ioread32(void *);
#line 53 
#line 53 
void iowrite32(u32, void *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 734  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 742  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 786  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 794  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  #line 40 
  return dma_map_single_attrs(& hwdev->dev,ptr,size,
                           (enum dma_data_direction)direction,0UL);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  #line 47 
  dma_unmap_single_attrs(& hwdev->dev,dma_addr,size,(enum dma_data_direction)direction,0UL);
  #line 48 
  return;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1023 
void consume_skb(struct sk_buff *);
#line 1032 
#line 1032 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  #line 1049 
  return __alloc_skb(size,priority,0,-1);
}

#line 1827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_head_init(struct sk_buff_head *list)
{
  #line 1829 
  list->next = ((struct sk_buff *)list);
  #line 1829 
  list->prev = ((struct sk_buff *)list);
  #line 1830 
  list->qlen = 0U;
  #line 1831 
  return;
}

#line 1841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_queue_head_init(struct sk_buff_head *list)
{
  #line 1843 
  spinlock_check(& list->lock);
  {
    #line 1843 
    struct lock_class_key __key;
    #line 1843 
    __raw_spin_lock_init(& list->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&list->lock)->rlock",& __key);
  }
  #line 1844 
  __skb_queue_head_init(list);
  #line 1845 
  return;
}

#line 1994 
#line 1994 
void skb_queue_head(struct sk_buff_head *, struct sk_buff *);
#line 2011 
#line 2011 
void skb_queue_tail(struct sk_buff_head *, struct sk_buff *);
#line 2045 
#line 2045 
struct sk_buff *skb_dequeue(struct sk_buff_head *);
#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2652 
#line 2652 
void skb_trim(struct sk_buff *, unsigned int);
#line 2756 
#line 2756 
void skb_queue_purge(struct sk_buff_head *);
#line 3615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void *from, unsigned int len)
{
  #line 3619 
  memcpy((void *)skb->data,from,(unsigned long)len);
  #line 3620 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2679 
#line 718  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  #line 3117 
  netif_tx_start_queue(netdev_get_tx_queue(dev,0U));
  #line 3118 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3616 
#line 3616 
void __dev_kfree_skb_irq(struct sk_buff *, enum skb_free_reason);
#line 3638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_irq(struct sk_buff *skb)
{
  #line 3640 
  __dev_kfree_skb_irq(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3641 
  return;
}

#line 3660 
#line 3660 
int netif_rx(struct sk_buff *);
#line 4131 
#line 710  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 726  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fddidevice.h"
#line 24 
__be16 fddi_type_trans(struct sk_buff *, struct net_device *);
#line 25 
#line 25 
struct net_device *alloc_fddidev(int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 2064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void cfm_state_change(struct s_smc *smc, int c_state);
#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 2028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void smt_stat_counter(struct s_smc *smc, int stat);
#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 544 
void smt_reset_defaults(struct s_smc *smc, int level);
#line 551 
#line 2229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void drv_reset_indication(struct s_smc *smc);
#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 2122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void ecm_state_change(struct s_smc *smc, int e_state);
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 2177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void rmt_state_change(struct s_smc *smc, int r_state);
#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 572 
u_short smt_online(struct s_smc *smc, int on);
#line 578 
#line 578 
int mac_add_multicast(struct s_smc *smc, struct fddi_addr *addr, int can);
#line 579 
#line 579 
void mac_update_multicast(struct s_smc *smc);
#line 580 
#line 580 
void mac_clear_multicast(struct s_smc *smc);
#line 590 
#line 1272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void llc_restart_tx(struct s_smc *smc);
#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 597 
void mac_drv_clear_tx_queue(struct s_smc *smc);
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
#line 469 
void card_stop(struct s_smc *smc);
#line 473 
#line 473 
int init_smt(struct s_smc *smc, u_char *mac_addr);
#line 480 
#line 480 
void read_address(struct s_smc *smc, u_char *mac_addr);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
#line 376 
static int skfp_driver_init(struct net_device *dev);
#line 99 
#line 478 
static int skfp_open(struct net_device *dev);
#line 100 
#line 545 
static int skfp_close(struct net_device *dev);
#line 101 
#line 602 
static irqreturn_t skfp_interrupt(int irq, void *dev_id);
#line 102 
#line 669 
static struct net_device_stats *skfp_ctl_get_stats(struct net_device *dev);
#line 103 
#line 833 
static void skfp_ctl_set_multicast_list(struct net_device *dev);
#line 104 
#line 846 
static void skfp_ctl_set_multicast_list_wo_lock(struct net_device *dev);
#line 105 
#line 917 
static int skfp_ctl_set_mac_address(struct net_device *dev, void *addr);
#line 106 
#line 957 
static int skfp_ioctl(struct net_device *dev, struct ifreq *rq, int cmd);
#line 107 
#line 1037 
static netdev_tx_t skfp_send_pkt(struct sk_buff *skb, struct net_device *dev);
#line 109 
#line 1100 
static void send_queued_packets(struct s_smc *smc);
#line 110 
#line 1201 
static void CheckSourceAddress(unsigned char *frame, unsigned char *hw_addr);
#line 111 
#line 1227 
static void ResetAdapter(struct s_smc *smc);
#line 115 
#line 1302 
void *mac_drv_get_space(struct s_smc *smc, unsigned int size);
#line 116 
#line 1342 
void *mac_drv_get_desc_mem(struct s_smc *smc, unsigned int size);
#line 117 
#line 1380 
unsigned long mac_drv_virt2phys(struct s_smc *smc, void *virt);
#line 118 
#line 1415 
unsigned long dma_master(struct s_smc *smc, void *virt, int len, int flag);
#line 119 
#line 1443 
void dma_complete(struct s_smc *smc, union s_fp_descr *descr, int flag);
#line 121 
#line 1487 
void mac_drv_tx_complete(struct s_smc *smc, struct s_smt_fp_txd *txd);
#line 123 
#line 1569 
void mac_drv_rx_complete(struct s_smc *smc, struct s_smt_fp_rxd *rxd, int frag_count, int len);
#line 125 
#line 1688 
void mac_drv_requeue_rxd(struct s_smc *smc, struct s_smt_fp_rxd *rxd, int frag_count);
#line 127 
#line 1765 
void mac_drv_fill_rxd(struct s_smc *smc);
#line 128 
#line 1832 
void mac_drv_clear_rxd(struct s_smc *smc, struct s_smt_fp_rxd *rxd, int frag_count);
#line 130 
#line 1889 
int mac_drv_rx_init(struct s_smc *smc, int len, int fc, char *look_ahead, int la_len);
#line 135 
#line 135 
u_int mac_drv_check_space(void);
#line 136 
#line 136 
int mac_drv_init(struct s_smc *smc);
#line 137 
#line 137 
void hwm_tx_frag(struct s_smc *smc, char *virt, u_long phys, int len, int frame_status);
#line 139 
#line 139 
int hwm_tx_init(struct s_smc *smc, u_char fc, int frag_count, int frame_len, int frame_status);
#line 141 
#line 141 
void fddi_isr(struct s_smc *smc);
#line 142 
#line 142 
void hwm_rx_frag(struct s_smc *smc, char *virt, u_long phys, int len, int frame_status);
#line 144 
#line 144 
void mac_drv_rx_mode(struct s_smc *smc, int mode);
#line 145 
#line 145 
void mac_drv_clear_rx_queue(struct s_smc *smc);
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static struct pci_device_id skfddi_pci_tbl[2U] = {{.vendor = 4424U, .device = 16384U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
struct pci_device_id __mod_pci__skfddi_pci_tbl_device_table[2U];
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static int num_boards;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static struct net_device_ops skfp_netdev_ops = {.ndo_open = & skfp_open, .ndo_stop = & skfp_close, .ndo_start_xmit = & skfp_send_pkt, .ndo_set_rx_mode = & skfp_ctl_set_multicast_list, .ndo_set_mac_address = & skfp_ctl_set_mac_address, .ndo_do_ioctl = & skfp_ioctl, .ndo_get_stats = & skfp_ctl_get_stats};
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static int skfp_init_one(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 202 
  struct net_device *dev;
  #line 203 
  struct s_smc *smc;
  #line 204 
  void *mem;
  #line 205 
  int err;
  {
    #line 207 
    bool branch;
    #line 207 
    struct _ddebug __UNIQUE_ID_ddebug438 = {.modname = (char *)"skfp", .function = (char *)"skfp_init_one", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"entering skfp_init_one\n", .lineno = (unsigned int)207U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 207 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug438.key.dd_key_false.key,(_Bool)0);
    #line 207 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 207 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug438,(char *)"entering skfp_init_one\n");
  }
  #line 209 
  if (num_boards == 0) 
                       #line 210 
                       printk((char *)"%s\n",(char *)"SysKonnect FDDI PCI Adapter driver v");
  #line 212 
  err = pci_enable_device(pdev);
  #line 213 
  if (err != 0) 
                #line 214 
                return err;
  #line 216 
  err = pci_request_regions(pdev,(char *)"skfddi");
  #line 217 
  if (err != 0) 
                #line 218 
                goto err_out1;
  #line 220 
  pci_set_master(pdev);
  #line 223 
  if ((pdev->resource[0].flags & 512UL) == 0UL) {
    #line 224 
    printk((char *)"\001");
    #line 225 
    err = -5;
    #line 226 
    goto err_out2;
  }
  #line 229 
  mem = ioremap(pdev->resource[0].start,16384UL);
  #line 239 
  if (mem == (void *)0) {
    #line 240 
    printk((char *)"\001");
    #line 242 
    err = -5;
    #line 243 
    goto err_out2;
  }
  #line 246 
  dev = alloc_fddidev(8424);
  #line 247 
  if (dev == (struct net_device *)0) {
    #line 248 
    printk((char *)"\001");
    #line 250 
    err = -12;
    #line 251 
    goto err_out3;
  }
  #line 254 
  dev->irq = (int)pdev->irq;
  #line 255 
  dev->netdev_ops = & skfp_netdev_ops;
  #line 257 
  dev->dev.parent = & pdev->dev;
  #line 260 
  smc = (struct s_smc *)netdev_priv(dev);
  #line 261 
  smc->os.dev = dev;
  #line 262 
  smc->os.bus_type = 0U;
  #line 263 
  smc->os.pdev = *pdev;
  #line 264 
  smc->os.QueueSkb = 20UL;
  #line 265 
  smc->os.MaxFrameSize = 4550UL;
  #line 266 
  smc->os.dev = dev;
  #line 267 
  smc->hw.slot = (short)(-1);
  #line 268 
  smc->hw.iop = mem;
  #line 269 
  smc->os.ResetRequested = (unsigned char)0U;
  #line 270 
  skb_queue_head_init(& smc->os.SendSkbQueue);
  #line 272 
  dev->base_addr = (unsigned long)mem;
  #line 274 
  err = skfp_driver_init(dev);
  #line 275 
  if (err != 0) 
                #line 276 
                goto err_out4;
  #line 278 
  err = cif_register_netdev(dev);
  #line 279 
  if (err != 0) 
                #line 280 
                goto err_out5;
  #line 282 
  num_boards ++;
  #line 283 
  pci_set_drvdata(pdev,(void *)dev);
  #line 285 
  if (((int)pdev->subsystem_device & 65280) == 21760 || ((int)pdev->subsystem_device & 65280) == 22528) 
    #line 287 
    printk((char *)"%s: SysKonnect FDDI PCI adapter",(char *)(& dev->name),(int)pdev->subsystem_device); else 
                                                                    #line 291 
                                                                    printk((char *)"%s: FDDI PCI adapter found\n",(char *)(& dev->name));
  #line 293 
  return 0;
  #line 294 
  err_out5: 
            #line 294 
  ;
  #line 295 
  if (smc->os.SharedMemAddr != (void *)0) 
                                          #line 296 
                                          dma_free_coherent(& pdev->dev,smc->os.SharedMemSize,smc->os.SharedMemAddr,smc->os.SharedMemDMA);
  #line 299 
  dma_free_coherent(& pdev->dev,4550UL,(void *)smc->os.LocalRxBuffer,smc->os.LocalRxBufferDMA);
  #line 301 
  err_out4: 
            #line 301 
  ;
  #line 302 
  cif_free_netdev(dev);
  #line 303 
  err_out3: 
            #line 303 
  ;
  #line 305 
  iounmap(mem);
  #line 309 
  err_out2: 
            #line 309 
  ;
  #line 310 
  pci_release_regions(pdev);
  #line 311 
  err_out1: 
            #line 311 
  ;
  #line 312 
  pci_disable_device(pdev);
  #line 313 
  return err;
}

#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static void skfp_remove_one(struct pci_dev *pdev)
{
  #line 321 
  struct net_device *p = pci_get_drvdata(pdev);
  #line 322 
  struct s_smc *lp = netdev_priv(p);
  #line 324 
  cif_unregister_netdev(p);
  #line 326 
  if (lp->os.SharedMemAddr != (void *)0) {
    #line 327 
    dma_free_coherent(& pdev->dev,lp->os.SharedMemSize,lp->os.SharedMemAddr,lp->os.SharedMemDMA);
    #line 331 
    lp->os.SharedMemAddr = (void *)0;
  }
  #line 333 
  if (lp->os.LocalRxBuffer != (unsigned char *)0U) {
    #line 334 
    dma_free_coherent(& pdev->dev,4550UL,(void *)lp->os.LocalRxBuffer,lp->os.LocalRxBufferDMA);
    #line 338 
    lp->os.LocalRxBuffer = (unsigned char *)0U;
  }
  #line 341 
  iounmap(lp->hw.iop);
  #line 345 
  pci_release_regions(pdev);
  #line 346 
  cif_free_netdev(p);
  #line 348 
  pci_disable_device(pdev);
  #line 349 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static int skfp_driver_init(struct net_device *dev)
{
  #line 378 
  struct s_smc *smc = netdev_priv(dev);
  #line 379 
  skfddi_priv *bp = & smc->os;
  #line 380 
  int err = -5;
  {
    #line 382 
    bool branch;
    #line 382 
    struct _ddebug __UNIQUE_ID_ddebug439 = {.modname = (char *)"skfp", .function = (char *)"skfp_driver_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"entering skfp_driver_init\n", .lineno = (unsigned int)382U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 382 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug439.key.dd_key_false.key,(_Bool)0);
    #line 382 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 382 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug439,(char *)"entering skfp_driver_init\n");
  }
  #line 385 
  bp->base_addr = dev->base_addr;
  #line 388 
  smc->hw.irq = (short)dev->irq;
  #line 390 
  spinlock_check(& bp->DriverLock);
  {
    #line 390 
    struct lock_class_key __key;
    #line 390 
    __raw_spin_lock_init(& bp->DriverLock.__anonCompField_spinlock_25.rlock,(char *)"&(&bp->DriverLock)->rlock",& __key);
  }
  #line 393 
  bp->LocalRxBuffer = (unsigned char *)dma_alloc_coherent(& bp->pdev.dev,4550UL,& bp->LocalRxBufferDMA,2592U);
  #line 396 
  if (bp->LocalRxBuffer == (unsigned char *)0U) {
    #line 397 
    printk((char *)"could not allocate mem for ");
    #line 398 
    printk((char *)"LocalRxBuffer: %d byte\n",4550);
    #line 399 
    goto fail;
  }
  #line 403 
  bp->SharedMemSize = (unsigned long)mac_drv_check_space();
  {
    #line 404 
    bool branch_0;
    #line 404 
    struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"skfp", .function = (char *)"skfp_driver_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"Memory for HWM: %ld\n", .lineno = (unsigned int)404U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 404 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
    #line 404 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 404 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug440,(char *)"Memory for HWM: %ld\n",bp->SharedMemSize);
  }
  #line 405 
  if (bp->SharedMemSize != 0UL) {
    #line 406 
    bp->SharedMemSize += 16UL;
    #line 408 
    bp->SharedMemAddr = dma_alloc_coherent(& bp->pdev.dev,bp->SharedMemSize,& bp->SharedMemDMA,2592U);
    #line 412 
    if (bp->SharedMemAddr == (void *)0) {
      #line 413 
      printk((char *)"could not allocate mem for ");
      #line 414 
      printk((char *)"hardware module: %ld byte\n",bp->SharedMemSize);
      #line 416 
      goto fail;
    }
  }
  else 
       #line 420 
       bp->SharedMemAddr = (void *)0;
  #line 423 
  bp->SharedMemHeap = 0UL;
  #line 425 
  card_stop(smc);
  {
    #line 427 
    bool branch_1;
    #line 427 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"skfp", .function = (char *)"skfp_driver_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"mac_drv_init()..\n", .lineno = (unsigned int)427U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 427 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 427 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 427 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug441,(char *)"mac_drv_init()..\n");
  }
  #line 428 
  if (mac_drv_init(smc) != 0) {
    {
      #line 429 
      bool branch_2;
      #line 429 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"skfp", .function = (char *)"skfp_driver_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"mac_drv_init() failed\n", .lineno = (unsigned int)429U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 429 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 429 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 429 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug442,(char *)"mac_drv_init() failed\n");
    }
    #line 430 
    goto fail;
  }
  #line 432 
  read_address(smc,(u_char *)0U);
  {
    #line 433 
    bool branch_3;
    #line 433 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"skfp", .function = (char *)"skfp_driver_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"HW-Addr: %pMF\n", .lineno = (unsigned int)433U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 433 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 433 
    if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                  #line 433 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug443,(char *)"HW-Addr: %pMF\n",(u_char *)(& smc->hw.fddi_canon_addr.a));
  }
  #line 434 
  memcpy((void *)dev->dev_addr,(void *)(& smc->hw.fddi_canon_addr.a),6UL);
  #line 436 
  smt_reset_defaults(smc,0);
  #line 438 
  return 0;
  #line 440 
  fail: 
        #line 440 
  ;
  #line 441 
  if (bp->SharedMemAddr != (void *)0) {
    #line 442 
    dma_free_coherent(& bp->pdev.dev,bp->SharedMemSize,bp->SharedMemAddr,bp->SharedMemDMA);
    #line 446 
    bp->SharedMemAddr = (void *)0;
  }
  #line 448 
  if (bp->LocalRxBuffer != (unsigned char *)0U) {
    #line 449 
    dma_free_coherent(& bp->pdev.dev,4550UL,(void *)bp->LocalRxBuffer,bp->LocalRxBufferDMA);
    #line 451 
    bp->LocalRxBuffer = (unsigned char *)0U;
  }
  #line 453 
  return err;
}

#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static int skfp_open(struct net_device *dev)
{
  #line 481 
  int err;
  #line 480 
  struct s_smc *smc = netdev_priv(dev);
  {
    #line 483 
    bool branch;
    #line 483 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"skfp", .function = (char *)"skfp_open", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"entering skfp_open\n", .lineno = (unsigned int)483U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 483 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 483 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 483 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug444,(char *)"entering skfp_open\n");
  }
  #line 485 
  err = cif_request_irq((unsigned int)dev->irq,& skfp_interrupt,128UL,(char *)(& dev->name),(void *)dev);
  #line 487 
  if (err != 0) 
                #line 488 
                return err;
  #line 500 
  read_address(smc,(u_char *)0U);
  #line 501 
  memcpy((void *)dev->dev_addr,(void *)(& smc->hw.fddi_canon_addr.a),6UL);
  #line 503 
  init_smt(smc,(u_char *)0U);
  #line 504 
  smt_online(smc,1);
  #line 505 
  iowrite32((unsigned int)smc->hw.is_imask,smc->hw.iop + 12U);
  #line 508 
  mac_clear_multicast(smc);
  #line 511 
  mac_drv_rx_mode(smc,4);
  #line 513 
  netif_start_queue(dev);
  #line 514 
  return 0;
}

#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static int skfp_close(struct net_device *dev)
{
  #line 547 
  struct s_smc *smc = netdev_priv(dev);
  #line 548 
  skfddi_priv *bp = & smc->os;
  #line 550 
  iowrite32(0U,smc->hw.iop + 12U);
  #line 551 
  smt_reset_defaults(smc,1);
  #line 552 
  card_stop(smc);
  #line 553 
  mac_drv_clear_tx_queue(smc);
  #line 554 
  mac_drv_clear_rx_queue(smc);
  #line 556 
  netif_stop_queue(dev);
  #line 558 
  cif_free_irq((unsigned int)dev->irq,(void *)dev);
  #line 560 
  skb_queue_purge(& bp->SendSkbQueue);
  #line 561 
  bp->QueueSkb = 20UL;
  #line 563 
  return 0;
}

#line 602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static irqreturn_t skfp_interrupt(int irq, void *dev_id)
{
  #line 605 
  struct s_smc *smc;
  #line 606 
  skfddi_priv *bp;
  #line 604 
  struct net_device *dev = (struct net_device *)dev_id;
  #line 608 
  smc = (struct s_smc *)netdev_priv(dev);
  #line 609 
  bp = & smc->os;
  #line 612 
  if (ioread32(smc->hw.iop + 12U) == 0U) 
                                         #line 614 
                                         return IRQ_NONE;
  #line 617 
  ;
  #line 617 
  if (((unsigned long)ioread32(smc->hw.iop + 8U) & smc->hw.is_imask) == 0UL) 
    #line 619 
    return IRQ_NONE;
  #line 621 
  iowrite32(0U,smc->hw.iop + 12U);
  #line 622 
  cif_spin_lock_DriverLock_of_s_smt_os(& bp->DriverLock);
  #line 625 
  fddi_isr(smc);
  #line 627 
  if ((unsigned int)smc->os.ResetRequested != 0U) {
    #line 628 
    ResetAdapter(smc);
    #line 629 
    smc->os.ResetRequested = (unsigned char)0U;
  }
  #line 631 
  cif_spin_unlock_DriverLock_of_s_smt_os(& bp->DriverLock);
  #line 632 
  iowrite32((unsigned int)smc->hw.is_imask,smc->hw.iop + 12U);
  #line 634 
  return IRQ_HANDLED;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static struct net_device_stats *skfp_ctl_get_stats(struct net_device *dev)
{
  #line 671 
  struct s_smc *bp = netdev_priv(dev);
  #line 675 
  bp->os.MacStat.port_bs_flag[0] = 4660U;
  #line 676 
  bp->os.MacStat.port_bs_flag[1] = 22136U;
  #line 792 
  return (struct net_device_stats *)(& bp->os.MacStat);
}

#line 833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static void skfp_ctl_set_multicast_list(struct net_device *dev)
{
  #line 837 
  unsigned long Flags;
  #line 835 
  struct s_smc *smc = netdev_priv(dev);
  #line 836 
  skfddi_priv *bp = & smc->os;
  #line 839 
  cif___ldv_spin_lock_DriverLock_of_s_smt_os(& bp->DriverLock);
  #line 840 
  skfp_ctl_set_multicast_list_wo_lock(dev);
  #line 841 
  cif_spin_unlock_irqrestore_DriverLock_of_s_smt_os(& bp->DriverLock,Flags);
  #line 842 
  return;
}

#line 846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static void skfp_ctl_set_multicast_list_wo_lock(struct net_device *dev)
{
  #line 849 
  struct netdev_hw_addr *ha;
  #line 848 
  struct s_smc *smc = netdev_priv(dev);
  #line 852 
  if ((dev->flags & 256U) != 0U) {
    #line 853 
    mac_drv_rx_mode(smc,3);
    {
      #line 854 
      bool branch;
      #line 854 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"skfp", .function = (char *)"skfp_ctl_set_multicast_list_wo_lock", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"PROMISCUOUS MODE ENABLED\n", .lineno = (unsigned int)854U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 854 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 854 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 854 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug445,(char *)"PROMISCUOUS MODE ENABLED\n");
    }
  }
  else {
    #line 858 
    mac_drv_rx_mode(smc,4);
    {
      #line 859 
      bool branch_0;
      #line 859 
      struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"skfp", .function = (char *)"skfp_ctl_set_multicast_list_wo_lock", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"PROMISCUOUS MODE DISABLED\n", .lineno = (unsigned int)859U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 859 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
      #line 859 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 859 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug446,(char *)"PROMISCUOUS MODE DISABLED\n");
    }
    #line 862 
    mac_clear_multicast(smc);
    #line 863 
    mac_drv_rx_mode(smc,2);
    #line 865 
    if ((dev->flags & 512U) != 0U) {
      #line 866 
      mac_drv_rx_mode(smc,1);
      {
        #line 867 
        bool branch_1;
        #line 867 
        struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"skfp", .function = (char *)"skfp_ctl_set_multicast_list_wo_lock", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"ENABLE ALL MC ADDRESSES\n", .lineno = (unsigned int)867U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 867 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
        #line 867 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 867 
                                                      __dynamic_pr_debug(& __UNIQUE_ID_ddebug447,(char *)"ENABLE ALL MC ADDRESSES\n");
      }
    }
    else 
      #line 868 
      if (dev->mc.count != 0) 
        #line 869 
        if (dev->mc.count <= 32) {
          #line 873 
          void *__mptr;
          #line 873 
          __mptr = (void *)dev->mc.list.next;
          #line 873 
          ha = ((struct netdev_hw_addr *)__mptr);
          #line 873 
          while (& ha->list != & dev->mc.list) {
            #line 873 
            void *__mptr_0;
            #line 874 
            mac_add_multicast(smc,(struct fddi_addr *)(& ha->addr),1);
            {
              #line 878 
              bool branch_2;
              #line 878 
              struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"skfp", .function = (char *)"skfp_ctl_set_multicast_list_wo_lock", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"ENABLE MC ADDRESS: %pMF\n", .lineno = (unsigned int)878U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 878 
              branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
              #line 878 
              if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                            #line 878 
                                                            __dynamic_pr_debug(& __UNIQUE_ID_ddebug448,(char *)"ENABLE MC ADDRESS: %pMF\n",(unsigned char *)(& ha->addr));
            }
            #line 873 
            __mptr_0 = (void *)ha->list.next;
            #line 873 
            ha = ((struct netdev_hw_addr *)__mptr_0);
          }
        }
        else {
          #line 884 
          mac_drv_rx_mode(smc,1);
          {
            #line 885 
            bool branch_3;
            #line 885 
            struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"skfp", .function = (char *)"skfp_ctl_set_multicast_list_wo_lock", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"ENABLE ALL MC ADDRESSES\n", .lineno = (unsigned int)885U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 885 
            branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
            #line 885 
            if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                          #line 885 
                                                          __dynamic_pr_debug(& __UNIQUE_ID_ddebug449,(char *)"ENABLE ALL MC ADDRESSES\n");
          }
        }
      else {
        #line 889 
        bool branch_4;
        #line 889 
        struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"skfp", .function = (char *)"skfp_ctl_set_multicast_list_wo_lock", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"DISABLE ALL MC ADDRESSES\n", .lineno = (unsigned int)889U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 889 
        branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
        #line 889 
        if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                      #line 889 
                                                      __dynamic_pr_debug(& __UNIQUE_ID_ddebug450,(char *)"DISABLE ALL MC ADDRESSES\n");
      }
    #line 893 
    mac_update_multicast(smc);
  }
  #line 895 
  return;
}

#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static int skfp_ctl_set_mac_address(struct net_device *dev, void *addr)
{
  #line 922 
  unsigned long Flags;
  #line 919 
  struct s_smc *smc = netdev_priv(dev);
  #line 920 
  struct sockaddr *p_sockaddr = (struct sockaddr *)addr;
  #line 921 
  skfddi_priv *bp = & smc->os;
  #line 925 
  memcpy((void *)dev->dev_addr,(void *)(& p_sockaddr->sa_data),6UL);
  #line 926 
  cif___ldv_spin_lock_DriverLock_of_s_smt_os(& bp->DriverLock);
  #line 927 
  ResetAdapter(smc);
  #line 928 
  cif_spin_unlock_irqrestore_DriverLock_of_s_smt_os(& bp->DriverLock,Flags);
  #line 930 
  return 0;
}

#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static int skfp_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
{
  #line 961 
  struct s_skfp_ioctl ioc;
  #line 959 
  struct s_smc *smc = netdev_priv(dev);
  #line 960 
  skfddi_priv *lp = & smc->os;
  #line 962 
  int status = 0;
  #line 964 
  if (copy_from_user((void *)(& ioc),rq->ifr_ifru.ifru_data,16UL) != 0UL) 
    #line 965 
    return -14;
  #line 967 
  switch ((int)ioc.cmd) {
    #line 968 
    case 5: 
            #line 968 
    ;
    #line 969 
    ioc.len = (unsigned short)672U;
    #line 970 
    ;
    #line 970 
    ;
    #line 970 
    if (copy_to_user((void *)ioc.data,(void *)skfp_ctl_get_stats(dev),
                     (unsigned long)ioc.len) != 0UL) 
      #line 970 
      status = -14; else 
                         #line 970 
                         status = 0;
    #line 972 
    break;
    #line 973 
    case 6: 
            #line 973 
    ;
    #line 974 
    if (capable(12)) 
                     #line 977 
                     memset((void *)(& lp->MacStat),0,672UL); else 
                                                                   #line 975 
                                                                   status = -1;
    #line 979 
    break;
    #line 980 
    default: 
             #line 980 
    ;
    #line 981 
    printk((char *)"ioctl for %s: unknown cmd: %04x\n",(char *)(& dev->name),(int)ioc.cmd);
    #line 982 
    status = -95;
  }
  #line 986 
  return status;
}

#line 1037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static netdev_tx_t skfp_send_pkt(struct sk_buff *skb, struct net_device *dev)
{
  #line 1040 
  struct s_smc *smc = netdev_priv(dev);
  #line 1041 
  skfddi_priv *bp = & smc->os;
  {
    #line 1043 
    bool branch;
    #line 1043 
    struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"skfp", .function = (char *)"skfp_send_pkt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"skfp_send_pkt\n", .lineno = (unsigned int)1043U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1043 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
    #line 1043 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1043 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug451,(char *)"skfp_send_pkt\n");
  }
  #line 1054 
  if (skb->len + 4294967283U > 4478U) {
    #line 1055 
    (bp->MacStat.gen.tx_errors) ++;
    #line 1057 
    netif_start_queue(dev);
    #line 1058 
    consume_skb(skb);
    #line 1059 
    return NETDEV_TX_OK;
  }
  #line 1061 
  if (bp->QueueSkb == 0UL) {
    #line 1063 
    netif_stop_queue(dev);
    #line 1064 
    return NETDEV_TX_BUSY;
  }
  #line 1066 
  (bp->QueueSkb) --;
  #line 1067 
  skb_queue_tail(& bp->SendSkbQueue,skb);
  #line 1068 
  send_queued_packets((struct s_smc *)netdev_priv(dev));
  #line 1069 
  if (bp->QueueSkb == 0UL) 
                           #line 1070 
                           netif_stop_queue(dev);
  #line 1072 
  return NETDEV_TX_OK;
}

#line 1100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static void send_queued_packets(struct s_smc *smc)
{
  #line 1103 
  struct sk_buff *skb;
  #line 1104 
  unsigned char fc;
  #line 1105 
  int queue;
  #line 1106 
  struct s_smt_fp_txd *txd;
  #line 1107 
  dma_addr_t dma_address;
  #line 1108 
  unsigned long Flags;
  #line 1110 
  int frame_status;
  #line 1102 
  skfddi_priv *bp = & smc->os;
  {
    #line 1112 
    bool branch;
    #line 1112 
    struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"skfp", .function = (char *)"send_queued_packets", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"send queued packets\n", .lineno = (unsigned int)1112U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1112 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
    #line 1112 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1112 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug452,(char *)"send queued packets\n");
  }
  #line 1113 
  while (1) {
    #line 1115 
    skb = skb_dequeue(& bp->SendSkbQueue);
    #line 1117 
    if (skb == (struct sk_buff *)0) {
      {
        #line 1118 
        bool branch_0;
        #line 1118 
        struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"skfp", .function = (char *)"send_queued_packets", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"queue empty\n", .lineno = (unsigned int)1118U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1118 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
        #line 1118 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 1118 
                                                      __dynamic_pr_debug(& __UNIQUE_ID_ddebug453,(char *)"queue empty\n");
      }
      #line 1119 
      return;
    }
    #line 1122 
    cif___ldv_spin_lock_DriverLock_of_s_smt_os(& bp->DriverLock);
    #line 1123 
    fc = *(skb->data);
    #line 1124 
    queue = ((int)fc & 128) == 0;
    #line 1128 
    if (((int)fc & -136) == 80) 
      #line 1130 
      if ((unsigned int)smc->ess.sync_bw_available == 0U) 
                                                          #line 1131 
                                                          fc = (unsigned char)((unsigned int)fc & 127U);
      else 
        #line 1135 
        if ((int)smc->mib.fddiESSSynchTxMode != 0) 
                                                   #line 1137 
                                                   fc = (unsigned char)((unsigned int)fc | 128U);
    #line 1142 
    frame_status = hwm_tx_init(smc,(unsigned char)((int)fc),1,(int)skb->len,queue);
    #line 1144 
    if ((frame_status & 36) == 0) {
      #line 1147 
      if ((frame_status & 64) != 0) {
        #line 1149 
        bool branch_1;
        #line 1149 
        struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"skfp", .function = (char *)"send_queued_packets", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"Tx attempt while ring down.\n", .lineno = (unsigned int)1149U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1149 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
        #line 1149 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 1149 
                                                      __dynamic_pr_debug(& __UNIQUE_ID_ddebug454,(char *)"Tx attempt while ring down.\n");
      }
      else 
        #line 1150 
        if ((frame_status & 128) != 0) {
          #line 1151 
          bool branch_2;
          #line 1151 
          struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"skfp", .function = (char *)"send_queued_packets", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"%s: out of TXDs.\n", .lineno = (unsigned int)1151U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1151 
          branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
          #line 1151 
          if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                        #line 1151 
                                                        __dynamic_pr_debug(& __UNIQUE_ID_ddebug455,(char *)"%s: out of TXDs.\n",(char *)(& (bp->dev)->name));
        }
        else {
          #line 1153 
          bool branch_3;
          #line 1153 
          struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"skfp", .function = (char *)"send_queued_packets", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"%s: out of transmit resources", .lineno = (unsigned int)1153U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1153 
          branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
          #line 1153 
          if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                        #line 1153 
                                                        __dynamic_pr_debug(& __UNIQUE_ID_ddebug456,(char *)"%s: out of transmit resources",(char *)(& (bp->dev)->name));
        }
      #line 1159 
      skb_queue_head(& bp->SendSkbQueue,skb);
      #line 1160 
      cif_spin_unlock_irqrestore_DriverLock_of_s_smt_os(& bp->DriverLock,Flags);
      #line 1161 
      return;
    }
    #line 1165 
    (bp->QueueSkb) ++;
    #line 1168 
    CheckSourceAddress(skb->data,(unsigned char *)(& smc->hw.fddi_canon_addr.a));
    #line 1170 
    txd = smc->hw.fp.tx_q[queue].tx_curr_put;
    #line 1172 
    dma_address = pci_map_single(& bp->pdev,(void *)skb->data,(unsigned long)skb->len,1);
    #line 1174 
    if ((frame_status & 32) != 0) {
      #line 1175 
      txd->txd_os.skb = skb;
      #line 1176 
      txd->txd_os.dma_addr = dma_address;
    }
    #line 1178 
    hwm_tx_frag(smc,(char *)skb->data,(unsigned long)dma_address,(int)skb->len,frame_status | 26);
    #line 1181 
    if ((frame_status & 32) == 0) {
      #line 1182 
      pci_unmap_single(& bp->pdev,dma_address,(unsigned long)skb->len,1);
      #line 1184 
      dev_kfree_skb_irq(skb);
    }
    #line 1186 
    cif_spin_unlock_irqrestore_DriverLock_of_s_smt_os(& bp->DriverLock,Flags);
  }
  #line 1189 
  return;
}

#line 1201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static void CheckSourceAddress(unsigned char *frame, unsigned char *hw_addr)
{
  #line 1203 
  unsigned char SRBit;
  #line 1205 
  if (((unsigned long)*(frame + 7U) & 18446744073709551614UL) != 0UL) 
    #line 1207 
    return;
  #line 1208 
  if ((unsigned int)*(frame + 11U) != 0U) 
                                          #line 1209 
                                          return;
  #line 1210 
  SRBit = (unsigned char)((unsigned int)*(frame + 7U) & 1U);
  #line 1211 
  memcpy((void *)(frame + 7U),(void *)hw_addr,6UL);
  #line 1212 
  *(frame + 8U) = (unsigned char)((int)*(frame + 8U) | (int)SRBit);
  #line 1213 
  return;
}

#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static void ResetAdapter(struct s_smc *smc)
{
  {
    #line 1230 
    bool branch;
    #line 1230 
    struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"skfp", .function = (char *)"ResetAdapter", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"[fddi: ResetAdapter]\n", .lineno = (unsigned int)1230U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1230 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
    #line 1230 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1230 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug457,(char *)"[fddi: ResetAdapter]\n");
  }
  #line 1234 
  card_stop(smc);
  #line 1237 
  mac_drv_clear_tx_queue(smc);
  #line 1238 
  mac_drv_clear_rx_queue(smc);
  #line 1242 
  smt_reset_defaults(smc,1);
  #line 1244 
  init_smt(smc,(smc->os.dev)->dev_addr);
  #line 1246 
  smt_online(smc,1);
  #line 1247 
  iowrite32((unsigned int)smc->hw.is_imask,smc->hw.iop + 12U);
  #line 1250 
  skfp_ctl_set_multicast_list_wo_lock(smc->os.dev);
  #line 1251 
  return;
}

#line 1272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void llc_restart_tx(struct s_smc *smc)
{
  #line 1274 
  skfddi_priv *bp = & smc->os;
  {
    #line 1276 
    bool branch;
    #line 1276 
    struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"skfp", .function = (char *)"llc_restart_tx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"[llc_restart_tx]\n", .lineno = (unsigned int)1276U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1276 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
    #line 1276 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1276 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug458,(char *)"[llc_restart_tx]\n");
  }
  #line 1279 
  cif_spin_unlock_DriverLock_of_s_smt_os(& bp->DriverLock);
  #line 1280 
  send_queued_packets(smc);
  #line 1281 
  cif_spin_lock_DriverLock_of_s_smt_os(& bp->DriverLock);
  #line 1282 
  netif_start_queue(bp->dev);
  #line 1283 
  return;
}

#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void *mac_drv_get_space(struct s_smc *smc, unsigned int size)
{
  #line 1304 
  void *virt;
  {
    #line 1306 
    bool branch;
    #line 1306 
    struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_get_space", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"mac_drv_get_space (%d bytes), ", .lineno = (unsigned int)1306U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1306 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
    #line 1306 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1306 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug459,(char *)"mac_drv_get_space (%d bytes), ",size);
  }
  #line 1307 
  virt = smc->os.SharedMemAddr + smc->os.SharedMemHeap;
  #line 1309 
  if (smc->os.SharedMemHeap + (unsigned long)size > smc->os.SharedMemSize) {
    #line 1310 
    printk((char *)"Unexpected SMT memory size requested: %d\n",size);
    #line 1311 
    return (void *)0;
  }
  #line 1313 
  smc->os.SharedMemHeap += (unsigned long)size;
  {
    #line 1315 
    bool branch_0;
    #line 1315 
    struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_get_space", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"mac_drv_get_space end\n", .lineno = (unsigned int)1315U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1315 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
    #line 1315 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1315 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug460,(char *)"mac_drv_get_space end\n");
  }
  {
    #line 1316 
    bool branch_1;
    #line 1316 
    struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_get_space", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"virt addr: %lx\n", .lineno = (unsigned int)1316U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1316 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
    #line 1316 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 1316 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug461,(char *)"virt addr: %lx\n",(unsigned long)virt);
  }
  {
    #line 1317 
    bool branch_2;
    #line 1317 
    struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_get_space", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"bus  addr: %lx\n", .lineno = (unsigned int)1317U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1317 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
    #line 1317 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 1317 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug462,(char *)"bus  addr: %lx\n",(unsigned long)(smc->os.SharedMemDMA + (unsigned long long)((char *)virt - (char *)smc->os.SharedMemAddr)));
  }
  #line 1320 
  return virt;
}

#line 1342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void *mac_drv_get_desc_mem(struct s_smc *smc, unsigned int size)
{
  #line 1345 
  char *virt;
  {
    #line 1347 
    bool branch;
    #line 1347 
    struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_get_desc_mem", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"mac_drv_get_desc_mem\n", .lineno = (unsigned int)1347U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1347 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
    #line 1347 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1347 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug463,(char *)"mac_drv_get_desc_mem\n");
  }
  #line 1351 
  virt = (char *)mac_drv_get_space(smc,size);
  #line 1353 
  size = 16U - ((unsigned int)((long)virt) & 15U);
  #line 1354 
  size &= 15U;
  {
    #line 1356 
    bool branch_0;
    #line 1356 
    struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_get_desc_mem", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"Allocate %u bytes alignment gap ", .lineno = (unsigned int)1356U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1356 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
    #line 1356 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1356 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug464,(char *)"Allocate %u bytes alignment gap ",size);
  }
  {
    #line 1357 
    bool branch_1;
    #line 1357 
    struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_get_desc_mem", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"for descriptor memory.\n", .lineno = (unsigned int)1357U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1357 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
    #line 1357 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 1357 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug465,(char *)"for descriptor memory.\n");
  }
  #line 1359 
  if (mac_drv_get_space(smc,size) == (void *)0) {
    #line 1360 
    printk((char *)"fddi: Unable to align descriptor memory.\n");
    #line 1361 
    return (void *)0;
  }
  #line 1363 
  return (void *)(virt + (unsigned long)size);
}

#line 1380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
unsigned long mac_drv_virt2phys(struct s_smc *smc, void *virt)
{
  #line 1382 
  return (unsigned long)(smc->os.SharedMemDMA + (unsigned long long)((char *)virt - (char *)smc->os.SharedMemAddr));
}

#line 1415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
unsigned long dma_master(struct s_smc *smc, void *virt, int len, int flag)
{
  #line 1417 
  return (unsigned long)(smc->os.SharedMemDMA + (unsigned long long)((char *)virt - (char *)smc->os.SharedMemAddr));
}

#line 1443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void dma_complete(struct s_smc *smc, union s_fp_descr *descr, int flag)
{
  #line 1457 
  if ((flag & 2) != 0) {
    #line 1458 
    skfddi_priv *bp = & smc->os;
    #line 1459 
    struct s_smt_fp_rxd *r = & descr->r;
    #line 1462 
    if (r->rxd_os.skb != (struct sk_buff *)0 && r->rxd_os.dma_addr != 0ULL) {
      #line 1463 
      int MaxFrameSize = (int)bp->MaxFrameSize;
      #line 1465 
      pci_unmap_single(& bp->pdev,r->rxd_os.dma_addr,(unsigned long)MaxFrameSize,2);
      #line 1467 
      r->rxd_os.dma_addr = 0ULL;
    }
  }
  #line 1470 
  return;
}

#line 1487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void mac_drv_tx_complete(struct s_smc *smc, struct s_smt_fp_txd *txd)
{
  #line 1489 
  struct sk_buff *skb;
  {
    #line 1491 
    bool branch;
    #line 1491 
    struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_tx_complete", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"entering mac_drv_tx_complete\n", .lineno = (unsigned int)1491U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1491 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
    #line 1491 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1491 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug466,(char *)"entering mac_drv_tx_complete\n");
  }
  #line 1494 
  skb = txd->txd_os.skb;
  #line 1494 
  if (skb == (struct sk_buff *)0) {
    {
      #line 1495 
      bool branch_0;
      #line 1495 
      struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_tx_complete", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"TXD with no skb assigned.\n", .lineno = (unsigned int)1495U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1495 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
      #line 1495 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1495 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug467,(char *)"TXD with no skb assigned.\n");
    }
    #line 1496 
    return;
  }
  #line 1498 
  txd->txd_os.skb = (struct sk_buff *)0;
  #line 1501 
  pci_unmap_single(& smc->os.pdev,txd->txd_os.dma_addr,(unsigned long)skb->len,1);
  #line 1503 
  txd->txd_os.dma_addr = 0ULL;
  #line 1505 
  (smc->os.MacStat.gen.tx_packets) ++;
  #line 1506 
  smc->os.MacStat.gen.tx_bytes += (unsigned long)skb->len;
  #line 1509 
  dev_kfree_skb_irq(skb);
  {
    #line 1511 
    bool branch_1;
    #line 1511 
    struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_tx_complete", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"leaving mac_drv_tx_complete\n", .lineno = (unsigned int)1511U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1511 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
    #line 1511 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 1511 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug468,(char *)"leaving mac_drv_tx_complete\n");
  }
  #line 1513 
  return;
}

#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void mac_drv_rx_complete(struct s_smc *smc, struct s_smt_fp_rxd *rxd, int frag_count, int len)
{
  #line 1573 
  struct sk_buff *skb;
  #line 1574 
  unsigned char *virt;
  #line 1574 
  unsigned char *cp;
  #line 1575 
  unsigned short ri;
  #line 1576 
  u_int RifLength;
  #line 1572 
  skfddi_priv *bp = & smc->os;
  {
    #line 1578 
    bool branch;
    #line 1578 
    struct _ddebug __UNIQUE_ID_ddebug469 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_rx_complete", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"entering mac_drv_rx_complete (len=%d)\n", .lineno = (unsigned int)1578U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1578 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug469.key.dd_key_false.key,(_Bool)0);
    #line 1578 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1578 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug469,(char *)"entering mac_drv_rx_complete (len=%d)\n",len);
  }
  #line 1579 
  if (frag_count != 1) {
    #line 1581 
    printk((char *)"fddi: Multi-fragment receive!\n");
    #line 1582 
    goto RequeueRxd;
  }
  #line 1585 
  skb = rxd->rxd_os.skb;
  #line 1586 
  if (skb == (struct sk_buff *)0) {
    {
      #line 1587 
      bool branch_0;
      #line 1587 
      struct _ddebug __UNIQUE_ID_ddebug470 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_rx_complete", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"No skb in rxd\n", .lineno = (unsigned int)1587U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1587 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug470.key.dd_key_false.key,(_Bool)0);
      #line 1587 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1587 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug470,(char *)"No skb in rxd\n");
    }
    #line 1588 
    (smc->os.MacStat.gen.rx_errors) ++;
    #line 1589 
    goto RequeueRxd;
  }
  #line 1591 
  virt = skb->data;
  #line 1612 
  if (((int)*(virt + 7U) & 1) == 0) 
                                    #line 1613 
                                    RifLength = 0U;
  else {
    #line 1615 
    int n;
    {
      #line 1617 
      bool branch_1;
      #line 1617 
      struct _ddebug __UNIQUE_ID_ddebug471 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_rx_complete", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RIF found\n", .lineno = (unsigned int)1617U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1617 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug471.key.dd_key_false.key,(_Bool)0);
      #line 1617 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 1617 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug471,(char *)"RIF found\n");
    }
    #line 1619 
    cp = virt + 13U;
    #line 1621 
    ri = __builtin_bswap16((unsigned short)((int)*((__be16 *)cp)));
    #line 1622 
    RifLength = (unsigned int)ri & 31U;
    #line 1623 
    if ((int)(RifLength + 13U) > len) {
      #line 1624 
      printk((char *)"fddi: Invalid RIF.\n");
      #line 1625 
      goto RequeueRxd;
    }
    #line 1628 
    *(virt + 7U) = (unsigned char)((unsigned int)*(virt + 7U) & 254U);
    #line 1631 
    virt = cp + (unsigned long)RifLength;
    #line 1632 
    n = 13;
    #line 1632 
    while (n != 0) {
      #line 1633 
      virt --;
      #line 1633 
      cp --;
      #line 1633 
      *virt = *cp;
      #line 1632 
      n --;
    }
    #line 1635 
    skb_pull(skb,RifLength);
    #line 1636 
    len = (int)((unsigned int)len - RifLength);
    #line 1637 
    RifLength = 0U;
  }
  #line 1641 
  (smc->os.MacStat.gen.rx_packets) ++;
  #line 1643 
  smc->os.MacStat.gen.rx_bytes += (unsigned long)len;
  #line 1646 
  if (((int)*(virt + 1U) & 1) != 0) 
                                    #line 1648 
                                    (smc->os.MacStat.gen.multicast) ++;
  #line 1652 
  rxd->rxd_os.skb = (struct sk_buff *)0;
  #line 1653 
  skb_trim(skb,(unsigned int)len);
  #line 1654 
  skb->protocol = fddi_type_trans(skb,bp->dev);
  #line 1656 
  netif_rx(skb);
  #line 1658 
  if ((unsigned int)smc->hw.fp.rx_q[0].rx_used <= 5U) 
                                                      #line 1658 
                                                      mac_drv_fill_rxd(smc);
  #line 1659 
  return;
  #line 1661 
  RequeueRxd: 
              #line 1661 
  ;
  {
    #line 1662 
    bool branch_2;
    #line 1662 
    struct _ddebug __UNIQUE_ID_ddebug472 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_rx_complete", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"Rx: re-queue RXD.\n", .lineno = (unsigned int)1662U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1662 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug472.key.dd_key_false.key,(_Bool)0);
    #line 1662 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 1662 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug472,(char *)"Rx: re-queue RXD.\n");
  }
  #line 1663 
  mac_drv_requeue_rxd(smc,rxd,frag_count);
  #line 1664 
  (smc->os.MacStat.gen.rx_errors) ++;
  #line 1665 
  return;
}

#line 1688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void mac_drv_requeue_rxd(struct s_smc *smc, struct s_smt_fp_rxd *rxd, int frag_count)
{
  #line 1691 
  struct s_smt_fp_rxd *next_rxd;
  #line 1692 
  struct s_smt_fp_rxd *src_rxd;
  #line 1693 
  struct sk_buff *skb;
  #line 1694 
  int MaxFrameSize;
  #line 1695 
  unsigned char *v_addr;
  #line 1696 
  dma_addr_t b_addr;
  #line 1698 
  if (frag_count != 1) 
                       #line 1700 
                       printk((char *)"fddi: Multi-fragment requeue!\n");
  #line 1702 
  MaxFrameSize = (int)smc->os.MaxFrameSize;
  #line 1703 
  src_rxd = rxd;
  #line 1704 
  while (frag_count > 0) {
    #line 1705 
    next_rxd = src_rxd->rxd_next;
    #line 1706 
    rxd = smc->hw.fp.rx_q[0].rx_curr_put;
    #line 1708 
    skb = src_rxd->rxd_os.skb;
    #line 1709 
    if (skb == (struct sk_buff *)0) {
      {
        #line 1711 
        bool branch;
        #line 1711 
        struct _ddebug __UNIQUE_ID_ddebug473 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_requeue_rxd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"Requeue with no skb in rxd!\n", .lineno = (unsigned int)1711U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1711 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug473.key.dd_key_false.key,(_Bool)0);
        #line 1711 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1711 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug473,(char *)"Requeue with no skb in rxd!\n");
      }
      #line 1712 
      skb = alloc_skb((unsigned int)(MaxFrameSize + 3),2592U);
      #line 1713 
      if (skb != (struct sk_buff *)0) {
        #line 1715 
        rxd->rxd_os.skb = skb;
        #line 1716 
        skb_reserve(skb,3);
        #line 1717 
        skb_put(skb,(unsigned int)MaxFrameSize);
        #line 1718 
        v_addr = skb->data;
        #line 1719 
        b_addr = pci_map_single(& smc->os.pdev,(void *)v_addr,(unsigned long)MaxFrameSize,2);
        #line 1723 
        rxd->rxd_os.dma_addr = b_addr;
      }
      else {
        {
          #line 1726 
          bool branch_0;
          #line 1726 
          struct _ddebug __UNIQUE_ID_ddebug474 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_requeue_rxd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"Queueing invalid buffer!\n", .lineno = (unsigned int)1726U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1726 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug474.key.dd_key_false.key,(_Bool)0);
          #line 1726 
          if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                        #line 1726 
                                                        __dynamic_pr_debug(& __UNIQUE_ID_ddebug474,(char *)"Queueing invalid buffer!\n");
        }
        #line 1727 
        rxd->rxd_os.skb = (struct sk_buff *)0;
        #line 1728 
        v_addr = smc->os.LocalRxBuffer;
        #line 1729 
        b_addr = smc->os.LocalRxBufferDMA;
      }
    }
    else {
      #line 1733 
      rxd->rxd_os.skb = skb;
      #line 1734 
      v_addr = skb->data;
      #line 1735 
      b_addr = pci_map_single(& smc->os.pdev,(void *)v_addr,(unsigned long)MaxFrameSize,2);
      #line 1739 
      rxd->rxd_os.dma_addr = b_addr;
    }
    #line 1741 
    hwm_rx_frag(smc,(char *)v_addr,(unsigned long)b_addr,MaxFrameSize,24);
    #line 1744 
    src_rxd = next_rxd;
    #line 1704 
    frag_count --;
  }
  #line 1746 
  return;
}

#line 1765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void mac_drv_fill_rxd(struct s_smc *smc)
{
  #line 1767 
  int MaxFrameSize;
  #line 1768 
  unsigned char *v_addr;
  #line 1769 
  unsigned long b_addr;
  #line 1770 
  struct sk_buff *skb;
  #line 1771 
  struct s_smt_fp_rxd *rxd;
  {
    #line 1773 
    bool branch;
    #line 1773 
    struct _ddebug __UNIQUE_ID_ddebug475 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_fill_rxd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"entering mac_drv_fill_rxd\n", .lineno = (unsigned int)1773U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1773 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug475.key.dd_key_false.key,(_Bool)0);
    #line 1773 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1773 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug475,(char *)"entering mac_drv_fill_rxd\n");
  }
  #line 1778 
  MaxFrameSize = (int)smc->os.MaxFrameSize;
  #line 1780 
  while ((unsigned int)smc->hw.fp.rx_q[0].rx_free > 1U) {
    {
      #line 1781 
      bool branch_0;
      #line 1781 
      struct _ddebug __UNIQUE_ID_ddebug476 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_fill_rxd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)".\n", .lineno = (unsigned int)1781U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1781 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug476.key.dd_key_false.key,(_Bool)0);
      #line 1781 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1781 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug476,(char *)".\n");
    }
    #line 1783 
    rxd = smc->hw.fp.rx_q[0].rx_curr_put;
    #line 1784 
    skb = alloc_skb((unsigned int)(MaxFrameSize + 3),2592U);
    #line 1785 
    if (skb != (struct sk_buff *)0) {
      #line 1787 
      skb_reserve(skb,3);
      #line 1788 
      skb_put(skb,(unsigned int)MaxFrameSize);
      #line 1789 
      v_addr = skb->data;
      #line 1790 
      b_addr = (unsigned long)pci_map_single(& smc->os.pdev,(void *)v_addr,(unsigned long)MaxFrameSize,2);
      #line 1794 
      rxd->rxd_os.dma_addr = (unsigned long long)b_addr;
    }
    else {
      {
        #line 1801 
        bool branch_1;
        #line 1801 
        struct _ddebug __UNIQUE_ID_ddebug477 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_fill_rxd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"Queueing invalid buffer!\n", .lineno = (unsigned int)1801U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1801 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug477.key.dd_key_false.key,(_Bool)0);
        #line 1801 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 1801 
                                                      __dynamic_pr_debug(& __UNIQUE_ID_ddebug477,(char *)"Queueing invalid buffer!\n");
      }
      #line 1802 
      v_addr = smc->os.LocalRxBuffer;
      #line 1803 
      b_addr = (unsigned long)smc->os.LocalRxBufferDMA;
    }
    #line 1806 
    rxd->rxd_os.skb = skb;
    #line 1809 
    hwm_rx_frag(smc,(char *)v_addr,b_addr,MaxFrameSize,24);
  }
  {
    #line 1812 
    bool branch_2;
    #line 1812 
    struct _ddebug __UNIQUE_ID_ddebug478 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_fill_rxd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"leaving mac_drv_fill_rxd\n", .lineno = (unsigned int)1812U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1812 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug478.key.dd_key_false.key,(_Bool)0);
    #line 1812 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 1812 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug478,(char *)"leaving mac_drv_fill_rxd\n");
  }
  #line 1814 
  return;
}

#line 1832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void mac_drv_clear_rxd(struct s_smc *smc, struct s_smt_fp_rxd *rxd, int frag_count)
{
  #line 1836 
  struct sk_buff *skb;
  {
    #line 1838 
    bool branch;
    #line 1838 
    struct _ddebug __UNIQUE_ID_ddebug479 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_clear_rxd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"entering mac_drv_clear_rxd\n", .lineno = (unsigned int)1838U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1838 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug479.key.dd_key_false.key,(_Bool)0);
    #line 1838 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1838 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug479,(char *)"entering mac_drv_clear_rxd\n");
  }
  #line 1840 
  if (frag_count != 1) 
                       #line 1842 
                       printk((char *)"fddi: Multi-fragment clear!\n");
  #line 1844 
  while (frag_count > 0) {
    #line 1845 
    skb = rxd->rxd_os.skb;
    #line 1846 
    if (skb != (struct sk_buff *)0) {
      #line 1847 
      skfddi_priv *bp = & smc->os;
      #line 1848 
      int MaxFrameSize = (int)bp->MaxFrameSize;
      #line 1850 
      pci_unmap_single(& bp->pdev,rxd->rxd_os.dma_addr,(unsigned long)MaxFrameSize,2);
      #line 1853 
      consume_skb(skb);
      #line 1854 
      rxd->rxd_os.skb = (struct sk_buff *)0;
    }
    #line 1856 
    rxd = rxd->rxd_next;
    #line 1844 
    frag_count --;
  }
  #line 1858 
  return;
}

#line 1889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
int mac_drv_rx_init(struct s_smc *smc, int len, int fc, char *look_ahead, int la_len)
{
  #line 1892 
  struct sk_buff *skb;
  {
    #line 1894 
    bool branch;
    #line 1894 
    struct _ddebug __UNIQUE_ID_ddebug480 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_rx_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"entering mac_drv_rx_init(len=%d)\n", .lineno = (unsigned int)1894U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1894 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug480.key.dd_key_false.key,(_Bool)0);
    #line 1894 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1894 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug480,(char *)"entering mac_drv_rx_init(len=%d)\n",len);
  }
  #line 1898 
  if ((len != la_len || len <= 12) || look_ahead == (char *)0) {
    {
      #line 1899 
      bool branch_0;
      #line 1899 
      struct _ddebug __UNIQUE_ID_ddebug481 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_rx_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"fddi: Discard invalid local SMT frame\n", .lineno = (unsigned int)1899U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1899 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug481.key.dd_key_false.key,(_Bool)0);
      #line 1899 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1899 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug481,(char *)"fddi: Discard invalid local SMT frame\n");
    }
    {
      #line 1900 
      bool branch_1;
      #line 1900 
      struct _ddebug __UNIQUE_ID_ddebug482 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_rx_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"  len=%d, la_len=%d, (ULONG) look_ahead=%08lXh.\n", .lineno = (unsigned int)1900U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1900 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug482.key.dd_key_false.key,(_Bool)0);
      #line 1900 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 1900 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug482,(char *)"  len=%d, la_len=%d, (ULONG) look_ahead=%08lXh.\n",len,la_len,(unsigned long)look_ahead);
    }
    #line 1902 
    return 0;
  }
  #line 1904 
  skb = alloc_skb((unsigned int)(len + 3),2592U);
  #line 1905 
  if (skb == (struct sk_buff *)0) {
    {
      #line 1906 
      bool branch_2;
      #line 1906 
      struct _ddebug __UNIQUE_ID_ddebug483 = {.modname = (char *)"skfp", .function = (char *)"mac_drv_rx_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"fddi: Local SMT: skb memory exhausted.\n", .lineno = (unsigned int)1906U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1906 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug483.key.dd_key_false.key,(_Bool)0);
      #line 1906 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 1906 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug483,(char *)"fddi: Local SMT: skb memory exhausted.\n");
    }
    #line 1907 
    return 0;
  }
  #line 1909 
  skb_reserve(skb,3);
  #line 1910 
  skb_put(skb,(unsigned int)len);
  #line 1911 
  skb_copy_to_linear_data(skb,(void *)look_ahead,(unsigned int)len);
  #line 1914 
  skb->protocol = fddi_type_trans(skb,smc->os.dev);
  #line 1915 
  netif_rx(skb);
  #line 1917 
  return 0;
}

#line 1936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void smt_timer_poll(struct s_smc *smc)
{
  #line 1938 
  return;
}

#line 1954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void ring_status_indication(struct s_smc *smc, u_long status)
{
  {
    #line 1956 
    bool branch;
    #line 1956 
    struct _ddebug __UNIQUE_ID_ddebug484 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"ring_status_indication( ", .lineno = (unsigned int)1956U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1956 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug484.key.dd_key_false.key,(_Bool)0);
    #line 1956 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1956 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug484,(char *)"ring_status_indication( ");
  }
  #line 1957 
  if ((status & 32768UL) != 0UL) {
    #line 1958 
    bool branch_0;
    #line 1958 
    struct _ddebug __UNIQUE_ID_ddebug485 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_RES15 ", .lineno = (unsigned int)1958U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1958 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug485.key.dd_key_false.key,(_Bool)0);
    #line 1958 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1958 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug485,(char *)"RS_RES15 ");
  }
  #line 1959 
  if ((status & 16384UL) != 0UL) {
    #line 1960 
    bool branch_1;
    #line 1960 
    struct _ddebug __UNIQUE_ID_ddebug486 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_HARDERROR ", .lineno = (unsigned int)1960U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1960 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug486.key.dd_key_false.key,(_Bool)0);
    #line 1960 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 1960 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug486,(char *)"RS_HARDERROR ");
  }
  #line 1961 
  if ((status & 8192UL) != 0UL) {
    #line 1962 
    bool branch_2;
    #line 1962 
    struct _ddebug __UNIQUE_ID_ddebug487 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_SOFTERROR ", .lineno = (unsigned int)1962U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1962 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug487.key.dd_key_false.key,(_Bool)0);
    #line 1962 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 1962 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug487,(char *)"RS_SOFTERROR ");
  }
  #line 1963 
  if ((status & 4096UL) != 0UL) {
    #line 1964 
    bool branch_3;
    #line 1964 
    struct _ddebug __UNIQUE_ID_ddebug488 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_BEACON ", .lineno = (unsigned int)1964U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1964 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug488.key.dd_key_false.key,(_Bool)0);
    #line 1964 
    if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                  #line 1964 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug488,(char *)"RS_BEACON ");
  }
  #line 1965 
  if ((status & 2048UL) != 0UL) {
    #line 1966 
    bool branch_4;
    #line 1966 
    struct _ddebug __UNIQUE_ID_ddebug489 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_PATHTEST ", .lineno = (unsigned int)1966U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1966 
    branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug489.key.dd_key_false.key,(_Bool)0);
    #line 1966 
    if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                  #line 1966 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug489,(char *)"RS_PATHTEST ");
  }
  #line 1967 
  if ((status & 1024UL) != 0UL) {
    #line 1968 
    bool branch_5;
    #line 1968 
    struct _ddebug __UNIQUE_ID_ddebug490 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_SELFTEST ", .lineno = (unsigned int)1968U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1968 
    branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug490.key.dd_key_false.key,(_Bool)0);
    #line 1968 
    if ((long)((long)((int)branch_5 != 0)) != 0L) 
                                                  #line 1968 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug490,(char *)"RS_SELFTEST ");
  }
  #line 1969 
  if ((status & 512UL) != 0UL) {
    #line 1970 
    bool branch_6;
    #line 1970 
    struct _ddebug __UNIQUE_ID_ddebug491 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_RES9 ", .lineno = (unsigned int)1970U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1970 
    branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug491.key.dd_key_false.key,(_Bool)0);
    #line 1970 
    if ((long)((long)((int)branch_6 != 0)) != 0L) 
                                                  #line 1970 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug491,(char *)"RS_RES9 ");
  }
  #line 1971 
  if ((status & 256UL) != 0UL) {
    #line 1972 
    bool branch_7;
    #line 1972 
    struct _ddebug __UNIQUE_ID_ddebug492 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_DISCONNECT ", .lineno = (unsigned int)1972U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1972 
    branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug492.key.dd_key_false.key,(_Bool)0);
    #line 1972 
    if ((long)((long)((int)branch_7 != 0)) != 0L) 
                                                  #line 1972 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug492,(char *)"RS_DISCONNECT ");
  }
  #line 1973 
  if ((status & 128UL) != 0UL) {
    #line 1974 
    bool branch_8;
    #line 1974 
    struct _ddebug __UNIQUE_ID_ddebug493 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_RES7 ", .lineno = (unsigned int)1974U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1974 
    branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug493.key.dd_key_false.key,(_Bool)0);
    #line 1974 
    if ((long)((long)((int)branch_8 != 0)) != 0L) 
                                                  #line 1974 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug493,(char *)"RS_RES7 ");
  }
  #line 1975 
  if ((status & 64UL) != 0UL) {
    #line 1976 
    bool branch_9;
    #line 1976 
    struct _ddebug __UNIQUE_ID_ddebug494 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_DUPADDR ", .lineno = (unsigned int)1976U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1976 
    branch_9 = arch_static_branch(& __UNIQUE_ID_ddebug494.key.dd_key_false.key,(_Bool)0);
    #line 1976 
    if ((long)((long)((int)branch_9 != 0)) != 0L) 
                                                  #line 1976 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug494,(char *)"RS_DUPADDR ");
  }
  #line 1977 
  if ((status & 32UL) != 0UL) {
    #line 1978 
    bool branch_10;
    #line 1978 
    struct _ddebug __UNIQUE_ID_ddebug495 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_NORINGOP ", .lineno = (unsigned int)1978U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1978 
    branch_10 = arch_static_branch(& __UNIQUE_ID_ddebug495.key.dd_key_false.key,(_Bool)0);
    #line 1978 
    if ((long)((long)((int)branch_10 != 0)) != 0L) 
                                                   #line 1978 
                                                   __dynamic_pr_debug(& __UNIQUE_ID_ddebug495,(char *)"RS_NORINGOP ");
  }
  #line 1979 
  if ((status & 16UL) != 0UL) {
    #line 1980 
    bool branch_11;
    #line 1980 
    struct _ddebug __UNIQUE_ID_ddebug496 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_VERSION ", .lineno = (unsigned int)1980U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1980 
    branch_11 = arch_static_branch(& __UNIQUE_ID_ddebug496.key.dd_key_false.key,(_Bool)0);
    #line 1980 
    if ((long)((long)((int)branch_11 != 0)) != 0L) 
                                                   #line 1980 
                                                   __dynamic_pr_debug(& __UNIQUE_ID_ddebug496,(char *)"RS_VERSION ");
  }
  #line 1981 
  if ((status & 8UL) != 0UL) {
    #line 1982 
    bool branch_12;
    #line 1982 
    struct _ddebug __UNIQUE_ID_ddebug497 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_STUCKBYPASSS ", .lineno = (unsigned int)1982U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1982 
    branch_12 = arch_static_branch(& __UNIQUE_ID_ddebug497.key.dd_key_false.key,(_Bool)0);
    #line 1982 
    if ((long)((long)((int)branch_12 != 0)) != 0L) 
                                                   #line 1982 
                                                   __dynamic_pr_debug(& __UNIQUE_ID_ddebug497,(char *)"RS_STUCKBYPASSS ");
  }
  #line 1983 
  if ((status & 4UL) != 0UL) {
    #line 1984 
    bool branch_13;
    #line 1984 
    struct _ddebug __UNIQUE_ID_ddebug498 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_EVENT ", .lineno = (unsigned int)1984U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1984 
    branch_13 = arch_static_branch(& __UNIQUE_ID_ddebug498.key.dd_key_false.key,(_Bool)0);
    #line 1984 
    if ((long)((long)((int)branch_13 != 0)) != 0L) 
                                                   #line 1984 
                                                   __dynamic_pr_debug(& __UNIQUE_ID_ddebug498,(char *)"RS_EVENT ");
  }
  #line 1985 
  if ((status & 2UL) != 0UL) {
    #line 1986 
    bool branch_14;
    #line 1986 
    struct _ddebug __UNIQUE_ID_ddebug499 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_RINGOPCHANGE ", .lineno = (unsigned int)1986U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1986 
    branch_14 = arch_static_branch(& __UNIQUE_ID_ddebug499.key.dd_key_false.key,(_Bool)0);
    #line 1986 
    if ((long)((long)((int)branch_14 != 0)) != 0L) 
                                                   #line 1986 
                                                   __dynamic_pr_debug(& __UNIQUE_ID_ddebug499,(char *)"RS_RINGOPCHANGE ");
  }
  #line 1987 
  if ((status & 1UL) != 0UL) {
    #line 1988 
    bool branch_15;
    #line 1988 
    struct _ddebug __UNIQUE_ID_ddebug500 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"RS_RES0 ", .lineno = (unsigned int)1988U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1988 
    branch_15 = arch_static_branch(& __UNIQUE_ID_ddebug500.key.dd_key_false.key,(_Bool)0);
    #line 1988 
    if ((long)((long)((int)branch_15 != 0)) != 0L) 
                                                   #line 1988 
                                                   __dynamic_pr_debug(& __UNIQUE_ID_ddebug500,(char *)"RS_RES0 ");
  }
  {
    #line 1989 
    bool branch_16;
    #line 1989 
    struct _ddebug __UNIQUE_ID_ddebug501 = {.modname = (char *)"skfp", .function = (char *)"ring_status_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"]\n", .lineno = (unsigned int)1989U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1989 
    branch_16 = arch_static_branch(& __UNIQUE_ID_ddebug501.key.dd_key_false.key,(_Bool)0);
    #line 1989 
    if ((long)((long)((int)branch_16 != 0)) != 0L) 
                                                   #line 1989 
                                                   __dynamic_pr_debug(& __UNIQUE_ID_ddebug501,(char *)"]\n");
  }
  #line 1991 
  return;
}

#line 2008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
u_long smt_get_time(void)
{
  #line 2010 
  return jiffies;
}

#line 2028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void smt_stat_counter(struct s_smc *smc, int stat)
{
  {
    #line 2032 
    bool branch;
    #line 2032 
    struct _ddebug __UNIQUE_ID_ddebug502 = {.modname = (char *)"skfp", .function = (char *)"smt_stat_counter", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"smt_stat_counter\n", .lineno = (unsigned int)2032U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2032 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug502.key.dd_key_false.key,(_Bool)0);
    #line 2032 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2032 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug502,(char *)"smt_stat_counter\n");
  }
  #line 2033 
  switch (stat) {
    #line 2034 
    case 0: 
            #line 2034 
    ;
    {
      #line 2035 
      bool branch_0;
      #line 2035 
      struct _ddebug __UNIQUE_ID_ddebug503 = {.modname = (char *)"skfp", .function = (char *)"smt_stat_counter", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"Ring operational change.\n", .lineno = (unsigned int)2035U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2035 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug503.key.dd_key_false.key,(_Bool)0);
      #line 2035 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 2035 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug503,(char *)"Ring operational change.\n");
    }
    #line 2036 
    break;
    #line 2037 
    case 1: 
            #line 2037 
    ;
    {
      #line 2038 
      bool branch_1;
      #line 2038 
      struct _ddebug __UNIQUE_ID_ddebug504 = {.modname = (char *)"skfp", .function = (char *)"smt_stat_counter", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"Receive fifo overflow.\n", .lineno = (unsigned int)2038U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2038 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug504.key.dd_key_false.key,(_Bool)0);
      #line 2038 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 2038 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug504,(char *)"Receive fifo overflow.\n");
    }
    #line 2039 
    (smc->os.MacStat.gen.rx_errors) ++;
    #line 2040 
    break;
    #line 2041 
    default: 
             #line 2041 
    ;
    {
      #line 2042 
      bool branch_2;
      #line 2042 
      struct _ddebug __UNIQUE_ID_ddebug505 = {.modname = (char *)"skfp", .function = (char *)"smt_stat_counter", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"Unknown status (%d).\n", .lineno = (unsigned int)2042U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2042 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug505.key.dd_key_false.key,(_Bool)0);
      #line 2042 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 2042 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug505,(char *)"Unknown status (%d).\n",stat);
    }
    #line 2043 
    break;
  }
  #line 2045 
  return;
}

#line 2064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void cfm_state_change(struct s_smc *smc, int c_state)
{
  #line 2066 
  return;
}

#line 2122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void ecm_state_change(struct s_smc *smc, int e_state)
{
  #line 2124 
  return;
}

#line 2177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void rmt_state_change(struct s_smc *smc, int r_state)
{
  #line 2179 
  return;
}

#line 2229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
void drv_reset_indication(struct s_smc *smc)
{
  {
    #line 2231 
    bool branch;
    #line 2231 
    struct _ddebug __UNIQUE_ID_ddebug506 = {.modname = (char *)"skfp", .function = (char *)"drv_reset_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c", .format = (char *)"entering drv_reset_indication\n", .lineno = (unsigned int)2231U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2231 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug506.key.dd_key_false.key,(_Bool)0);
    #line 2231 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2231 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug506,(char *)"entering drv_reset_indication\n");
  }
  #line 2233 
  smc->os.ResetRequested = (unsigned char)1U;
  #line 2234 
  return;
}

#line 2237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static struct pci_driver skfddi_pci_driver = {.name = (char *)"skfddi", .id_table = (struct pci_device_id *)(& skfddi_pci_tbl), .probe = & skfp_init_one, .remove = & skfp_remove_one};
#line 2244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static int skfddi_pci_driver_init(void)
{
  #line 2244 
  return cif___pci_register_driver(& skfddi_pci_driver,& __this_module,
                                (char *)"skfp");
}

#line 2244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/skfddi.c"
static void skfddi_pci_driver_exit(void)
{
  #line 2244 
  cif_pci_unregister_driver(& skfddi_pci_driver);
  #line 2245 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
struct pci_driver *emg_alias_skfddi_pci_driver = & skfddi_pci_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
struct pci_device_id (*emg_alias_skfddi_pci_tbl)[2U] = & skfddi_pci_tbl;
#line 97 
#line 97 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 98 
#line 98 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 99 
#line 99 
void emg_free_netdev(struct net_device *arg0);
#line 100 
#line 100 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 101 
#line 101 
int emg_register_netdev(struct net_device *arg0);
#line 102 
#line 102 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 103 
#line 103 
void emg_unregister_netdev(struct net_device *arg0);
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
int emg_wrapper_skfp_close(struct net_device *arg0)
{
  #line 108 
  return skfp_close(arg0);
}

#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
struct net_device_stats *emg_wrapper_skfp_ctl_get_stats(struct net_device *arg0)
{
  #line 113 
  return skfp_ctl_get_stats(arg0);
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
int emg_wrapper_skfp_ctl_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 118 
  return skfp_ctl_set_mac_address(arg0,arg1);
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
void emg_wrapper_skfp_ctl_set_multicast_list(struct net_device *arg0)
{
  #line 123 
  skfp_ctl_set_multicast_list(arg0);
  #line 124 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
int emg_wrapper_skfp_init_one(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 128 
  return skfp_init_one(arg0,arg1);
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
enum irqreturn emg_wrapper_skfp_interrupt(int arg0, void *arg1)
{
  #line 133 
  return skfp_interrupt(arg0,arg1);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
int emg_wrapper_skfp_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 138 
  return skfp_ioctl(arg0,arg1,arg2);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
int emg_wrapper_skfp_open(struct net_device *arg0)
{
  #line 143 
  return skfp_open(arg0);
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
void emg_wrapper_skfp_remove_one(struct pci_dev *arg0)
{
  #line 148 
  skfp_remove_one(arg0);
  #line 149 
  return;
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
enum netdev_tx emg_wrapper_skfp_send_pkt(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 153 
  return skfp_send_pkt(arg0,arg1);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
void emg_skfddi_pci_driver_exit(void)
{
  #line 158 
  skfddi_pci_driver_exit();
  #line 159 
  return;
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
int emg_skfddi_pci_driver_init(void)
{
  #line 162 
  return skfddi_pci_driver_init();
}

#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 183 
  ldv_set_bit(nr,addr);
  #line 184 
  return;
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 190 
  ldv_clear_bit(nr,addr);
  #line 191 
  return;
}

#line 710  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 714 
  return emg_register_netdev(dev);
}

#line 718  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 722 
  emg_free_netdev(dev);
  #line 723 
  return;
}

#line 726  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 730 
  emg_unregister_netdev(dev);
  #line 731 
  return;
}

#line 734  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 738 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 742  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 746 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 750  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_spin_lock_DriverLock_of_s_smt_os(spinlock_t *lock)
{
  #line 753 
  ldv_spin_model_lock((char *)"DriverLock_of_s_smt_os");
  #line 755 
  spin_lock(lock);
  #line 756 
  return;
}

#line 759  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_spin_unlock_DriverLock_of_s_smt_os(spinlock_t *lock)
{
  #line 762 
  ldv_spin_model_unlock((char *)"DriverLock_of_s_smt_os");
  #line 764 
  spin_unlock(lock);
  #line 765 
  return;
}

#line 768  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif___ldv_spin_lock_DriverLock_of_s_smt_os(spinlock_t *lock)
{
  #line 771 
  ldv_spin_model_lock((char *)"DriverLock_of_s_smt_os");
  #line 773 
  __ldv_spin_lock(lock);
  #line 774 
  return;
}

#line 777  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_spin_unlock_irqrestore_DriverLock_of_s_smt_os(spinlock_t *lock, unsigned long flags)
{
  #line 780 
  ldv_spin_model_unlock((char *)"DriverLock_of_s_smt_os");
  #line 782 
  spin_unlock_irqrestore(lock,flags);
  #line 783 
  return;
}

#line 786  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 790 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 794  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/0/concurrency safety/weaver/skfddi.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 798 
  emg_pci_unregister_driver(dev);
  #line 799 
  return;
}

#line 500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
void pcm(struct s_smc *smc, int np, int event);
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
void pcm_init(struct s_smc *smc);
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 506 
void smt_timer_stop(struct s_smc *smc, struct smt_timer *timer);
#line 509 
#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
void plc_config_mux(struct s_smc *smc, int mux);
#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 561 
void pcm_state_change(struct s_smc *smc, int plc, int p_state);
#line 591 
#line 591 
void plc_clear_irq(struct s_smc *smc, int p);
#line 592 
#line 1629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
void plc_irq(struct s_smc *smc, int np, unsigned int cmd);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 30 
unsigned int ioread16(void *);
#line 51 
#line 51 
void iowrite16(u16, void *);
#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
#line 468 
void all_selection_criteria(struct s_smc *smc);
#line 472 
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
void init_plc(struct s_smc *smc);
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static u_char plcs_control_c_u[17U] = {(unsigned char)'P', (unsigned char)'L', (unsigned char)'C', (unsigned char)'_', (unsigned char)'C', (unsigned char)'N', (unsigned char)'T', (unsigned char)'R', (unsigned char)'L', (unsigned char)'_', (unsigned char)'C', (unsigned char)'_', (unsigned char)'U', (unsigned char)'='};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static u_char plcs_control_c_s[17U] = {(unsigned char)'P', (unsigned char)'L', (unsigned char)'C', (unsigned char)'_', (unsigned char)'C', (unsigned char)'N', (unsigned char)'T', (unsigned char)'R', (unsigned char)'L', (unsigned char)'_', (unsigned char)'C', (unsigned char)'_', (unsigned char)'S', (unsigned char)'=', (unsigned char)'\001', (unsigned char)'\002'};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static struct plt pltm[8U] = {{.timer = 6, .para = 65048}, {.timer = 7, .para = 65244}, {.timer = 8, .para = 65296}, {.timer = 9, .para = 55771}, {.timer = 11, .para = 63094}, {.timer = 12, .para = 65389}, {.timer = 13, .para = 61473}};
#line 195 
#line 666 
static void pcm_fsm(struct s_smc *smc, struct s_phy *phy, int cmd);
#line 196 
#line 1256 
static void pc_rcode_actions(struct s_smc *smc, int bit, struct s_phy *phy);
#line 197 
#line 1393 
static void pc_tcode_actions(struct s_smc *smc, int bit, struct s_phy *phy);
#line 198 
#line 1059 
static void reset_lem_struct(struct s_phy *phy);
#line 199 
#line 415 
static void plc_init(struct s_smc *smc, int p);
#line 200 
#line 1221 
static void sm_ph_lem_start(struct s_smc *smc, int np, int threshold);
#line 201 
#line 1239 
static void sm_ph_lem_stop(struct s_smc *smc, int np);
#line 202 
#line 1030 
static void sm_ph_linestate(struct s_smc *smc, int phy, int ls);
#line 203 
#line 407 
static void real_init_plc(struct s_smc *smc);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void start_pcm_timer0(struct s_smc *smc, u_long value, int event, struct s_phy *phy)
{
  #line 212 
  phy->timer0_exp = (unsigned char)0U;
  #line 213 
  smt_timer_start(smc,& phy->pcm_timer0,value,((unsigned long)((int)phy->np + 5) << 16L) | (unsigned long)event);
  #line 215 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void stop_pcm_timer0(struct s_smc *smc, struct s_phy *phy)
{
  #line 222 
  if ((unsigned int)phy->pcm_timer0.tm_active != 0U) 
                                                     #line 223 
                                                     smt_timer_stop(smc,& phy->pcm_timer0);
  #line 224 
  return;
}

#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
void pcm_init(struct s_smc *smc)
{
  #line 232 
  int i;
  #line 233 
  int np;
  #line 234 
  struct s_phy *phy;
  #line 235 
  struct fddi_mib_p *mib;
  #line 237 
  np = 0;
  #line 237 
  phy = (struct s_phy *)(& smc->y);
  #line 237 
  while (np <= 1) {
    #line 239 
    mib = phy->mib;
    #line 240 
    mib->fddiPORTPCMState = (unsigned short)32U;
    #line 241 
    phy->np = (unsigned char)np;
    #line 242 
    switch ((int)smc->s.sas) {
      #line 255 
      case 1: 
              #line 255 
      ;
      #line 256 
      if (np == 0) 
                   #line 256 
                   mib->fddiPORTMy_Type = (unsigned short)2U; else 
                                                                   #line 256 
                                                                   mib->fddiPORTMy_Type = (unsigned short)4U;
      #line 257 
      mib->fddiPORTHardwarePresent = (unsigned char)(np == 0);
      #line 262 
      (smc->y[1].mib)->fddiPORTPCMState = (unsigned short)0U;
      #line 264 
      break;
      #line 265 
      case 0: 
              #line 265 
      ;
      #line 266 
      mib->fddiPORTMy_Type = (unsigned short)(np == 1);
      #line 267 
      break;
    }
    #line 273 
    phy->pmd_scramble = (unsigned char)0U;
    #line 274 
    switch ((int)phy->pmd_type[1]) {
      #line 275 
      case 80: 
               #line 275 
      ;
      #line 276 
      mib->fddiPORTPMDClass = (unsigned short)0U;
      #line 277 
      break;
      #line 278 
      case 76: 
               #line 278 
      ;
      #line 279 
      mib->fddiPORTPMDClass = (unsigned short)4U;
      #line 280 
      break;
      #line 281 
      case 68: 
               #line 281 
      ;
      #line 282 
      mib->fddiPORTPMDClass = (unsigned short)5U;
      #line 283 
      break;
      #line 284 
      case 83: 
               #line 284 
      ;
      #line 285 
      mib->fddiPORTPMDClass = (unsigned short)5U;
      #line 286 
      phy->pmd_scramble = (unsigned char)1U;
      #line 287 
      break;
      #line 288 
      case 85: 
               #line 288 
      ;
      #line 289 
      mib->fddiPORTPMDClass = (unsigned short)5U;
      #line 290 
      phy->pmd_scramble = (unsigned char)1U;
      #line 291 
      break;
      #line 292 
      case 49: 
               #line 292 
      ;
      #line 293 
      mib->fddiPORTPMDClass = (unsigned short)1U;
      #line 294 
      break;
      #line 295 
      case 50: 
               #line 295 
      ;
      #line 296 
      mib->fddiPORTPMDClass = (unsigned short)2U;
      #line 297 
      break;
      #line 298 
      case 51: 
               #line 298 
      ;
      #line 299 
      mib->fddiPORTPMDClass = (unsigned short)2U;
      #line 300 
      break;
      #line 301 
      case 52: 
               #line 301 
      ;
      #line 302 
      mib->fddiPORTPMDClass = (unsigned short)1U;
      #line 303 
      break;
      #line 304 
      case 72: 
               #line 304 
      ;
      #line 305 
      mib->fddiPORTPMDClass = (unsigned short)6U;
      #line 306 
      break;
      #line 307 
      case 73: 
               #line 307 
      ;
      #line 308 
      mib->fddiPORTPMDClass = (unsigned short)5U;
      #line 309 
      break;
      #line 310 
      case 71: 
               #line 310 
      ;
      #line 311 
      mib->fddiPORTPMDClass = (unsigned short)5U;
      #line 312 
      break;
      #line 313 
      default: 
               #line 313 
      ;
      #line 314 
      mib->fddiPORTPMDClass = (unsigned short)6U;
      #line 315 
      break;
    }
    #line 320 
    switch ((int)mib->fddiPORTMy_Type) {
      #line 321 
      case 0: 
              #line 321 
      ;
      #line 322 
      mib->fddiPORTAvailablePaths = (unsigned char)((unsigned int)mib->fddiPORTAvailablePaths | 2U);
      #line 323 
      mib->fddiPORTRequestedPaths[1] = (unsigned char)1U;
      #line 324 
      mib->fddiPORTRequestedPaths[2] = (unsigned char)25U;
      #line 328 
      mib->fddiPORTRequestedPaths[3] = (unsigned char)153U;
      #line 333 
      break;
      #line 334 
      case 1: 
              #line 334 
      ;
      #line 335 
      mib->fddiPORTAvailablePaths = (unsigned char)((unsigned int)mib->fddiPORTAvailablePaths | 2U);
      #line 336 
      mib->fddiPORTRequestedPaths[1] = (unsigned char)1U;
      #line 337 
      mib->fddiPORTRequestedPaths[2] = (unsigned char)33U;
      #line 340 
      mib->fddiPORTRequestedPaths[3] = (unsigned char)225U;
      #line 345 
      break;
      #line 346 
      case 2: 
              #line 346 
      ;
      #line 347 
      mib->fddiPORTAvailablePaths = (unsigned char)((unsigned int)mib->fddiPORTAvailablePaths | 2U);
      #line 348 
      mib->fddiPORTRequestedPaths[1] = (unsigned char)1U;
      #line 349 
      mib->fddiPORTRequestedPaths[2] = (unsigned char)41U;
      #line 353 
      mib->fddiPORTRequestedPaths[3] = (unsigned char)41U;
      #line 357 
      break;
      #line 358 
      case 3: 
              #line 358 
      ;
      #line 359 
      mib->fddiPORTRequestedPaths[1] = (unsigned char)1U;
      #line 360 
      mib->fddiPORTRequestedPaths[2] = (unsigned char)7U;
      #line 364 
      mib->fddiPORTRequestedPaths[3] = (unsigned char)0U;
      #line 365 
      break;
    }
    #line 368 
    phy->pc_lem_fail = (unsigned char)0U;
    #line 369 
    mib->fddiPORTPCMStateX = mib->fddiPORTPCMState;
    #line 370 
    mib->fddiPORTLCTFail_Ct = 0UL;
    #line 371 
    mib->fddiPORTBS_Flag = (unsigned char)0U;
    #line 372 
    mib->fddiPORTCurrentPath = (unsigned short)0U;
    #line 373 
    mib->fddiPORTNeighborType = (unsigned short)4U;
    #line 374 
    phy->ls_flag = (unsigned char)0U;
    #line 375 
    phy->rc_flag = (unsigned char)0U;
    #line 376 
    phy->tc_flag = (unsigned char)0U;
    #line 377 
    phy->td_flag = (unsigned char)0U;
    #line 378 
    if (np > 1) 
                #line 379 
                phy->phy_name = (char)((unsigned int)np + 46U); else 
                                                                  #line 381 
                                                                  phy->phy_name = (char)((unsigned int)np + 65U);
    #line 382 
    phy->wc_flag = (unsigned char)0U;
    #line 383 
    memset((void *)(& phy->lem),0,24UL);
    #line 384 
    reset_lem_struct(phy);
    #line 385 
    memset((void *)(& phy->plc),0,128UL);
    #line 386 
    phy->plc.p_state = (unsigned short)0U;
    #line 387 
    i = 0;
    #line 387 
    while (i <= 9) {
      #line 388 
      phy->t_next[i] = 0UL;
      #line 387 
      i ++;
    }
    #line 237 
    np ++;
    #line 237 
    phy ++;
  }
  #line 391 
  real_init_plc(smc);
  #line 392 
  return;
}

#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
void init_plc(struct s_smc *smc)
{
  #line 397 
  return;
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void real_init_plc(struct s_smc *smc)
{
  #line 409 
  int p;
  #line 411 
  p = 0;
  #line 411 
  while (p <= 1) {
    #line 412 
    plc_init(smc,p);
    #line 411 
    p ++;
  }
  #line 413 
  return;
}

#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void plc_init(struct s_smc *smc, int p)
{
  #line 417 
  int i;
  #line 419 
  int rev;
  #line 423 
  void *tmp;
  #line 424 
  void *tmp_0;
  #line 425 
  void *tmp_1;
  #line 431 
  void *tmp_2;
  #line 457 
  void *tmp_7;
  #line 459 
  void *tmp_8;
  #line 423 
  if (p == 0) 
              #line 423 
              tmp = smc->hw.iop + 1540U; else 
                                              #line 423 
                                              tmp = smc->hw.iop + 900U;
  #line 423 
  iowrite16((unsigned short)0,tmp);
  #line 424 
  if (p == 0) 
              #line 424 
              tmp_0 = smc->hw.iop + 1540U; else 
                                                #line 424 
                                                tmp_0 = smc->hw.iop + 900U;
  #line 424 
  iowrite16((unsigned short)3,tmp_0);
  #line 425 
  if (p == 0) 
              #line 425 
              tmp_1 = smc->hw.iop + 1536U; else 
                                                #line 425 
                                                tmp_1 = smc->hw.iop + 896U;
  #line 425 
  iowrite16((unsigned short)0,tmp_1);
  #line 431 
  if (p == 0) 
              #line 431 
              tmp_2 = smc->hw.iop + 1600U; else 
                                                #line 431 
                                                tmp_2 = smc->hw.iop + 960U;
  #line 431 
  rev = (int)ioread16(tmp_2) & 63488;
  #line 432 
  if (rev != 0) 
    #line 435 
    if ((unsigned int)smc->y[p].pmd_scramble != 0U) {
      #line 436 
      void *tmp_4;
      #line 436 
      if (p == 0) 
                  #line 436 
                  tmp_4 = smc->hw.iop + 1576U; else 
                                                    #line 436 
                                                    tmp_4 = smc->hw.iop + 936U;
      #line 436 
      ;
      #line 436 
      iowrite16((unsigned short)((int)((unsigned short)((int)plcs_control_c_s[14] | ((int)plcs_control_c_s[15] << 8)))),tmp_4);
    }
    else {
      #line 443 
      void *tmp_5;
      #line 443 
      if (p == 0) 
                  #line 443 
                  tmp_5 = smc->hw.iop + 1576U; else 
                                                    #line 443 
                                                    tmp_5 = smc->hw.iop + 936U;
      #line 443 
      ;
      #line 443 
      iowrite16((unsigned short)((int)((unsigned short)((int)plcs_control_c_u[14] | ((int)plcs_control_c_u[15] << 8)))),tmp_5);
    }
  #line 454 
  i = 0;
  #line 454 
  while (pltm[i].timer != 0) {
    #line 455 
    void *tmp_6;
    #line 455 
    if (p == 0) 
                #line 455 
                tmp_6 = smc->hw.iop + (unsigned long)((pltm[i].timer << 2) | 1536); else 
                                                                    #line 455 
                                                                    tmp_6 = smc->hw.iop + (unsigned long)((pltm[i].timer << 2) | 896);
    #line 455 
    ;
    #line 455 
    iowrite16((unsigned short)((int)((unsigned short)pltm[i].para)),tmp_6);
    #line 454 
    i ++;
  }
  #line 457 
  if (p == 0) 
              #line 457 
              tmp_7 = smc->hw.iop + 1628U; else 
                                                #line 457 
                                                tmp_7 = smc->hw.iop + 988U;
  #line 457 
  ioread16(tmp_7);
  #line 458 
  plc_clear_irq(smc,p);
  #line 459 
  if (p == 0) 
              #line 459 
              tmp_8 = smc->hw.iop + 1544U; else 
                                                #line 459 
                                                tmp_8 = smc->hw.iop + 904U;
  #line 459 
  iowrite16((unsigned short)636,tmp_8);
  #line 469 
  if ((unsigned int)smc->s.sas == 1U && p == 0) {
    #line 470 
    void *tmp_9;
    #line 470 
    if (p == 0) 
                #line 470 
                tmp_9 = smc->hw.iop + 1540U; else 
                                                  #line 470 
                                                  tmp_9 = smc->hw.iop + 900U;
    #line 470 
    iowrite16((unsigned short)128,tmp_9);
  }
  #line 471 
  return;
}

#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void plc_go_state(struct s_smc *smc, int p, int state)
{
  #line 480 
  void *port;
  #line 481 
  int val;
  #line 485 
  if (p == 0) 
              #line 485 
              port = smc->hw.iop + 1540U; else 
                                               #line 485 
                                               port = smc->hw.iop + 900U;
  #line 486 
  val = (int)ioread16(port) & -8;
  #line 487 
  iowrite16((unsigned short)((int)((unsigned short)val)),port);
  #line 488 
  iowrite16((unsigned short)((int)((unsigned short)(val | state))),port);
  #line 489 
  return;
}

#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
int sm_pm_get_ls(struct s_smc *smc, int phy)
{
  #line 496 
  int state;
  #line 503 
  void *tmp;
  #line 503 
  if (phy == 0) 
                #line 503 
                tmp = smc->hw.iop + 1600U; else 
                                                #line 503 
                                                tmp = smc->hw.iop + 960U;
  #line 503 
  state = (int)ioread16(tmp) & 224;
  #line 504 
  switch (state) {
    #line 505 
    case 128: 
              #line 505 
    ;
    #line 506 
    state = 12;
    #line 507 
    break;
    #line 508 
    case 160: 
              #line 508 
    ;
    #line 509 
    state = 14;
    #line 510 
    break;
    #line 511 
    case 192: 
              #line 511 
    ;
    #line 512 
    state = 15;
    #line 513 
    break;
    #line 514 
    case 96: 
             #line 514 
    ;
    #line 515 
    case 224: 
              #line 515 
    ;
    #line 516 
    state = 13;
    #line 517 
    break;
    #line 518 
    case 32: 
             #line 518 
    ;
    #line 519 
    state = 16;
    #line 520 
    break;
    #line 521 
    default: 
             #line 521 
    ;
    #line 522 
    state = 17;
  }
  #line 524 
  return state;
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static int plc_send_bits(struct s_smc *smc, struct s_phy *phy, int len)
{
  #line 530 
  int n;
  #line 531 
  int i;
  #line 539 
  void *tmp;
  #line 546 
  void *tmp_1;
  #line 547 
  void *tmp_2;
  #line 529 
  int np = (int)phy->np;
  #line 536 
  i = len + -1;
  #line 536 
  n = 0;
  #line 536 
  while (i >= 0) {
    #line 537 
    n = (n << 1) | (int)phy->t_val[(int)phy->bitn + i];
    #line 536 
    i --;
  }
  #line 539 
  if (np == 0) 
               #line 539 
               tmp = smc->hw.iop + 1604U; else 
                                               #line 539 
                                               tmp = smc->hw.iop + 964U;
  #line 539 
  if ((ioread16(tmp) & 64U) != 0U) 
                                   #line 543 
                                   return 1;
  #line 546 
  if (np == 0) 
               #line 546 
               tmp_1 = smc->hw.iop + 1552U; else 
                                                 #line 546 
                                                 tmp_1 = smc->hw.iop + 912U;
  #line 546 
  ;
  #line 546 
  iowrite16((unsigned short)((int)((unsigned int)((unsigned short)len) + 65535U)),tmp_1);
  #line 547 
  if (np == 0) 
               #line 547 
               tmp_2 = smc->hw.iop + 1548U; else 
                                                 #line 547 
                                                 tmp_2 = smc->hw.iop + 908U;
  #line 547 
  ;
  #line 547 
  iowrite16((unsigned short)((int)((unsigned short)n)),tmp_2);
  #line 558 
  return 0;
}

#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
void plc_config_mux(struct s_smc *smc, int mux)
{
  #line 566 
  if ((unsigned int)smc->s.sas != 0U) 
                                      #line 567 
                                      return;
  #line 568 
  if (mux == 3) {
    #line 569 
    ;
    #line 569 
    iowrite16((unsigned short)((int)((unsigned int)((unsigned short)ioread16(smc->hw.iop + 1540U)) | 32768U)),smc->hw.iop + 1540U);
    #line 570 
    ;
    #line 570 
    iowrite16((unsigned short)((int)((unsigned int)((unsigned short)ioread16(smc->hw.iop + 1536U)) | 4U)),smc->hw.iop + 1536U);
  }
  else {
    #line 573 
    ;
    #line 573 
    iowrite16((unsigned short)((int)((unsigned short)ioread16(smc->hw.iop + 1540U)) & 32767),smc->hw.iop + 1540U);
    #line 574 
    ;
    #line 574 
    iowrite16((unsigned short)((int)((unsigned short)ioread16(smc->hw.iop + 1536U)) & 65531),smc->hw.iop + 1536U);
  }
  #line 576 
  ;
  #line 576 
  iowrite16((unsigned short)((int)((unsigned short)ioread16(smc->hw.iop + 900U)) & 32767),smc->hw.iop + 900U);
  #line 577 
  ;
  #line 577 
  iowrite16((unsigned short)((int)((unsigned short)ioread16(smc->hw.iop + 896U)) & 65531),smc->hw.iop + 896U);
  #line 578 
  return;
}

#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
void pcm(struct s_smc *smc, int np, int event)
{
  #line 590 
  int state;
  #line 591 
  int oldstate;
  #line 592 
  struct s_phy *phy;
  #line 593 
  struct fddi_mib_p *mib;
  #line 599 
  if (np != 0 && (unsigned int)smc->s.sas == 1U) 
                                                 #line 600 
                                                 return;
  #line 602 
  phy = & smc->y[np];
  #line 603 
  mib = phy->mib;
  #line 604 
  oldstate = (int)mib->fddiPORTPCMState;
  #line 605 
  while (1) {
    #line 611 
    state = (int)mib->fddiPORTPCMState;
    #line 612 
    pcm_fsm(smc,phy,event);
    #line 613 
    event = 0;
    #line 614 
    if (! ((int)mib->fddiPORTPCMState != state)) 
                                                 #line 605 
                                                 break;
  }
  #line 621 
  if (state == 5) 
                  #line 622 
                  mib->fddiPORTPCMStateX = (unsigned short)3U; else 
                                                                    #line 624 
                                                                    mib->fddiPORTPCMStateX = (unsigned short)state;
  #line 630 
  if ((int)mib->fddiPORTPCMState != oldstate && (oldstate == 8 || (unsigned int)mib->fddiPORTPCMState == 8U)) 
    #line 632 
    smt_srf_event(smc,3,(int)phy->np + 1,0);
  #line 660 
  pcm_state_change(smc,np,state);
  #line 661 
  return;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void pcm_fsm(struct s_smc *smc, struct s_phy *phy, int cmd)
{
  #line 668 
  int i;
  #line 670 
  struct s_plc *plc;
  #line 671 
  struct fddi_mib_p *mib;
  #line 673 
  u_short plc_rev;
  #line 669 
  int np = (int)phy->np;
  #line 676 
  plc = & phy->plc;
  #line 677 
  mib = phy->mib;
  #line 682 
  switch (cmd) {
    #line 707 
    void *tmp;
    #line 707 
    void *tmp_0;
    #line 683 
    case 2: 
            #line 683 
    ;
    #line 685 
    if ((unsigned int)mib->fddiPORTPCMState != 9U) 
                                                   #line 686 
                                                   mib->fddiPORTPCMState = (unsigned short)32U;
    #line 691 
    return;
    #line 692 
    case 1: 
            #line 692 
    ;
    #line 694 
    if ((unsigned int)mib->fddiPORTPCMState != 9U) 
                                                   #line 695 
                                                   mib->fddiPORTPCMState = (unsigned short)33U;
    #line 696 
    return;
    #line 697 
    case 11: 
             #line 697 
    ;
    #line 699 
    mib->fddiPORTPCMState = (unsigned short)41U;
    #line 703 
    return;
    #line 704 
    case 24: 
             #line 704 
    ;
    #line 706 
    stop_pcm_timer0(smc,phy);
    #line 707 
    if (np == 0) 
                 #line 707 
                 tmp = smc->hw.iop + 1540U; else 
                                                 #line 707 
                                                 tmp = smc->hw.iop + 900U;
    #line 707 
    if (np == 0) 
                 #line 707 
                 tmp_0 = smc->hw.iop + 1540U; else 
                                                   #line 707 
                                                   tmp_0 = smc->hw.iop + 900U;
    #line 707 
    iowrite16((unsigned short)((int)((unsigned short)ioread16(tmp_0)) & 65527),tmp);
    #line 709 
    return;
  }
  #line 712 
  switch ((int)mib->fddiPORTPCMState) {
    #line 715 
    void *tmp_2;
    #line 716 
    void *tmp_3;
    #line 716 
    void *tmp_4;
    #line 717 
    void *tmp_6;
    #line 717 
    void *tmp_7;
    #line 738 
    void *tmp_9;
    #line 738 
    void *tmp_10;
    #line 739 
    void *tmp_12;
    #line 739 
    void *tmp_13;
    #line 767 
    void *tmp_15;
    #line 774 
    void *tmp_16;
    #line 777 
    void *tmp_17;
    #line 814 
    void *tmp_20;
    #line 945 
    void *tmp_38;
    #line 945 
    void *tmp_39;
    #line 946 
    void *tmp_41;
    #line 946 
    void *tmp_42;
    #line 982 
    void *tmp_44;
    #line 998 
    void *tmp_45;
    #line 998 
    void *tmp_46;
    #line 999 
    void *tmp_48;
    #line 999 
    void *tmp_49;
    #line 1000 
    void *tmp_51;
    #line 1000 
    void *tmp_52;
    #line 1007 
    void *tmp_54;
    #line 1007 
    void *tmp_55;
    #line 1009 
    void *tmp_57;
    #line 713 
    case 32: 
             #line 713 
    ;
    #line 714 
    stop_pcm_timer0(smc,phy);
    #line 715 
    if (np == 0) 
                 #line 715 
                 tmp_2 = smc->hw.iop + 1536U; else 
                                                   #line 715 
                                                   tmp_2 = smc->hw.iop + 896U;
    #line 715 
    iowrite16((unsigned short)0,tmp_2);
    #line 716 
    if (np == 0) 
                 #line 716 
                 tmp_3 = smc->hw.iop + 1540U; else 
                                                   #line 716 
                                                   tmp_3 = smc->hw.iop + 900U;
    #line 716 
    if (np == 0) 
                 #line 716 
                 tmp_4 = smc->hw.iop + 1540U; else 
                                                   #line 716 
                                                   tmp_4 = smc->hw.iop + 900U;
    #line 716 
    iowrite16((unsigned short)((int)((unsigned short)ioread16(tmp_4)) & 65519),tmp_3);
    #line 717 
    if (np == 0) 
                 #line 717 
                 tmp_6 = smc->hw.iop + 1540U; else 
                                                   #line 717 
                                                   tmp_6 = smc->hw.iop + 900U;
    #line 717 
    if (np == 0) 
                 #line 717 
                 tmp_7 = smc->hw.iop + 1540U; else 
                                                   #line 717 
                                                   tmp_7 = smc->hw.iop + 900U;
    #line 717 
    iowrite16((unsigned short)((int)((unsigned short)ioread16(tmp_7)) & 65527),tmp_6);
    #line 718 
    sm_ph_lem_stop(smc,np);
    #line 719 
    phy->cf_loop = (unsigned char)0U;
    #line 720 
    phy->cf_join = (unsigned char)0U;
    #line 721 
    queue_event(smc,2,np + 3);
    #line 722 
    plc_go_state(smc,np,3);
    #line 723 
    mib->fddiPORTConnectState = (unsigned short)0U;
    #line 724 
    mib->fddiPORTPCMState = (unsigned short)((unsigned int)mib->fddiPORTPCMState & 65503U);
    #line 725 
    break;
    #line 726 
    case 0: 
            #line 726 
    ;
    #line 728 
    if (cmd == 7) {
      #line 729 
      mib->fddiPORTPCMState = (unsigned short)41U;
      #line 730 
      break;
    }
    #line 732 
    break;
    #line 733 
    case 33: 
             #line 733 
    ;
    #line 735 
    stop_pcm_timer0(smc,phy);
    #line 736 
    mib->fddiPORTPCMState = (unsigned short)((unsigned int)mib->fddiPORTPCMState & 65503U);
    #line 737 
    plc_go_state(smc,np,0);
    #line 738 
    if (np == 0) 
                 #line 738 
                 tmp_9 = smc->hw.iop + 1540U; else 
                                                   #line 738 
                                                   tmp_9 = smc->hw.iop + 900U;
    #line 738 
    if (np == 0) 
                 #line 738 
                 tmp_10 = smc->hw.iop + 1540U; else 
                                                    #line 738 
                                                    tmp_10 = smc->hw.iop + 900U;
    #line 738 
    iowrite16((unsigned short)((int)((unsigned short)ioread16(tmp_10)) & 65519),tmp_9);
    #line 739 
    if (np == 0) 
                 #line 739 
                 tmp_12 = smc->hw.iop + 1540U; else 
                                                    #line 739 
                                                    tmp_12 = smc->hw.iop + 900U;
    #line 739 
    if (np == 0) 
                 #line 739 
                 tmp_13 = smc->hw.iop + 1540U; else 
                                                    #line 739 
                                                    tmp_13 = smc->hw.iop + 900U;
    #line 739 
    iowrite16((unsigned short)((int)((unsigned short)ioread16(tmp_13)) & 65527),tmp_12);
    #line 740 
    sm_ph_lem_stop(smc,np);
    #line 753 
    plc_go_state(smc,np,3);
    #line 755 
    if ((unsigned int)mib->fddiPORTPC_Withhold == 0U) 
                                                      #line 756 
                                                      mib->fddiPORTConnectState = (unsigned short)1U;
    #line 757 
    phy->cf_loop = (unsigned char)0U;
    #line 758 
    phy->cf_join = (unsigned char)0U;
    #line 759 
    queue_event(smc,2,np + 3);
    #line 760 
    phy->ls_flag = (unsigned char)0U;
    #line 761 
    phy->pc_mode = (unsigned char)0U;
    #line 762 
    phy->bitn = (unsigned char)0U;
    #line 763 
    i = 0;
    #line 763 
    while (i <= 2) {
      #line 764 
      pc_tcode_actions(smc,i,phy);
      #line 763 
      i ++;
    }
    #line 767 
    if (np == 0) 
                 #line 767 
                 tmp_15 = smc->hw.iop + 1544U; else 
                                                    #line 767 
                                                    tmp_15 = smc->hw.iop + 904U;
    #line 767 
    iowrite16((unsigned short)636,tmp_15);
    #line 774 
    if (np == 0) 
                 #line 774 
                 tmp_16 = smc->hw.iop + 1628U; else 
                                                    #line 774 
                                                    tmp_16 = smc->hw.iop + 988U;
    #line 774 
    ioread16(tmp_16);
    #line 777 
    if (np == 0) 
                 #line 777 
                 tmp_17 = smc->hw.iop + 1600U; else 
                                                    #line 777 
                                                    tmp_17 = smc->hw.iop + 960U;
    #line 777 
    plc_rev = (unsigned short)((unsigned int)((unsigned short)ioread16(tmp_17)) & 63488U);
    #line 779 
    if ((unsigned int)plc_rev != 30720U) {
      #line 786 
      if (plc_send_bits(smc,phy,3) != 0) 
                                         #line 787 
                                         return;
    }
    #line 806 
    plc_go_state(smc,np,1);
    #line 814 
    if (np == 0) 
                 #line 814 
                 tmp_20 = smc->hw.iop + 1600U; else 
                                                    #line 814 
                                                    tmp_20 = smc->hw.iop + 960U;
    #line 814 
    if ((ioread16(tmp_20) & 63488U) != 0U) {
      #line 816 
      void *tmp_22;
      #line 816 
      if (np == 0) 
                   #line 816 
                   tmp_22 = smc->hw.iop + 1604U; else 
                                                      #line 816 
                                                      tmp_22 = smc->hw.iop + 964U;
      #line 815 
      if ((ioread16(tmp_22) & 64U) == 0U) 
                                          #line 823 
                                          plc_send_bits(smc,phy,3);
    }
    #line 829 
    mib->fddiPORTPCMState = (unsigned short)37U;
    #line 830 
    plc->p_state = (unsigned short)1U;
    #line 831 
    plc->p_bits = (unsigned short)3U;
    #line 832 
    plc->p_start = (unsigned short)0U;
    #line 834 
    break;
    #line 835 
    case 1: 
            #line 835 
    ;
    #line 836 
    break;
    #line 837 
    case 34: 
             #line 837 
    ;
    #line 838 
    plc_go_state(smc,np,2);
    #line 839 
    mib->fddiPORTPCMState = (unsigned short)((unsigned int)mib->fddiPORTPCMState & 65503U);
    #line 840 
    break;
    #line 841 
    case 2: 
            #line 841 
    ;
    #line 842 
    break;
    #line 844 
    case 3: 
            #line 844 
    ;
    #line 845 
    case 4: 
            #line 845 
    ;
    #line 846 
    break;
    #line 848 
    case 37: 
             #line 848 
    ;
    #line 849 
    mib->fddiPORTPCMState = (unsigned short)((unsigned int)mib->fddiPORTPCMState & 65503U);
    #line 851 
    case 5: 
            #line 851 
    ;
    #line 852 
    if (cmd != 5 && cmd != 24) 
                               #line 853 
                               break;
    #line 854 
    switch ((int)plc->p_state) {
      #line 888 
      void *tmp_26;
      #line 889 
      void *tmp_28;
      #line 890 
      void *tmp_29;
      #line 855 
      case 1: 
              #line 855 
      ;
      #line 856 
      i = 0;
      #line 856 
      while (i <= 2) {
        #line 857 
        pc_rcode_actions(smc,i,phy);
        #line 856 
        i ++;
      }
      #line 858 
      pc_tcode_actions(smc,3,phy);
      #line 859 
      plc->p_state = (unsigned short)2U;
      #line 860 
      plc->p_bits = (unsigned short)1U;
      #line 861 
      plc->p_start = (unsigned short)3U;
      #line 862 
      phy->bitn = (unsigned char)3U;
      #line 863 
      if (plc_send_bits(smc,phy,1) != 0) 
                                         #line 864 
                                         return;
      #line 866 
      break;
      #line 867 
      case 2: 
              #line 867 
      ;
      #line 868 
      pc_rcode_actions(smc,3,phy);
      #line 869 
      i = 4;
      #line 869 
      while (i <= 6) {
        #line 870 
        pc_tcode_actions(smc,i,phy);
        #line 869 
        i ++;
      }
      #line 871 
      plc->p_state = (unsigned short)3U;
      #line 872 
      plc->p_bits = (unsigned short)3U;
      #line 873 
      plc->p_start = (unsigned short)4U;
      #line 874 
      phy->bitn = (unsigned char)4U;
      #line 875 
      if (plc_send_bits(smc,phy,3) != 0) 
                                         #line 876 
                                         return;
      #line 878 
      break;
      #line 879 
      case 3: 
              #line 879 
      ;
      #line 880 
      i = 3;
      #line 880 
      while (i <= 6) {
        #line 881 
        pc_rcode_actions(smc,i,phy);
        #line 880 
        i ++;
      }
      #line 882 
      plc->p_state = (unsigned short)4U;
      #line 883 
      plc->p_bits = (unsigned short)0U;
      #line 884 
      plc->p_start = (unsigned short)7U;
      #line 885 
      phy->bitn = (unsigned char)7U;
      #line 886 
      sm_ph_lem_start(smc,np,(int)smc->s.lct_short);
      #line 888 
      if (np == 0) 
                   #line 888 
                   tmp_26 = smc->hw.iop + 1540U; else 
                                                      #line 888 
                                                      tmp_26 = smc->hw.iop + 900U;
      #line 888 
      i = (int)ioread16(tmp_26) & -97;
      #line 889 
      if (np == 0) 
                   #line 889 
                   tmp_28 = smc->hw.iop + 1540U; else 
                                                      #line 889 
                                                      tmp_28 = smc->hw.iop + 900U;
      #line 889 
      ;
      #line 889 
      iowrite16((unsigned short)((int)((unsigned short)i)),tmp_28);
      #line 890 
      if (np == 0) 
                   #line 890 
                   tmp_29 = smc->hw.iop + 1540U; else 
                                                      #line 890 
                                                      tmp_29 = smc->hw.iop + 900U;
      #line 890 
      ;
      #line 890 
      iowrite16((unsigned short)((int)((unsigned short)(i | 96))),tmp_29);
      #line 891 
      break;
      #line 892 
      case 4: 
              #line 892 
      ;
      #line 894 
      pc_tcode_actions(smc,7,phy);
      #line 898 
      plc->p_state = (unsigned short)5U;
      #line 899 
      plc->p_bits = (unsigned short)1U;
      #line 900 
      plc->p_start = (unsigned short)7U;
      #line 901 
      phy->bitn = (unsigned char)7U;
      #line 902 
      if (plc_send_bits(smc,phy,1) != 0) 
                                         #line 903 
                                         return;
      #line 905 
      break;
      #line 906 
      case 5: 
              #line 906 
      ;
      #line 908 
      pc_rcode_actions(smc,7,phy);
      #line 909 
      if ((unsigned int)phy->t_val[7] != 0U || (unsigned int)phy->r_val[7] != 0U) {
        #line 910 
        plc_go_state(smc,np,3);
        #line 911 
        mib->fddiPORTPCMState = (unsigned short)33U;
        #line 912 
        break;
      }
      #line 914 
      i = 8;
      #line 914 
      while (i <= 9) {
        #line 915 
        pc_tcode_actions(smc,i,phy);
        #line 914 
        i ++;
      }
      #line 916 
      plc->p_state = (unsigned short)6U;
      #line 917 
      plc->p_bits = (unsigned short)2U;
      #line 918 
      plc->p_start = (unsigned short)8U;
      #line 919 
      phy->bitn = (unsigned char)8U;
      #line 920 
      if (plc_send_bits(smc,phy,2) != 0) 
                                         #line 921 
                                         return;
      #line 923 
      break;
      #line 924 
      case 6: 
              #line 924 
      ;
      #line 925 
      i = 8;
      #line 925 
      while (i <= 9) {
        #line 926 
        pc_rcode_actions(smc,i,phy);
        #line 925 
        i ++;
      }
      #line 927 
      plc->p_state = (unsigned short)7U;
      #line 928 
      mib->fddiPORTPCMState = (unsigned short)38U;
      #line 929 
      break;
    }
    #line 931 
    break;
    #line 933 
    case 38: 
             #line 933 
    ;
    #line 937 
    if (((unsigned int)smc->s.sas == 0U && np == 1) && ((unsigned int)smc->y[0].pc_mode == 2U || (unsigned int)smc->y[1].pc_mode == 2U)) {
      #line 940 
      void *tmp_32;
      #line 940 
      void *tmp_33;
      #line 942 
      void *tmp_35;
      #line 942 
      void *tmp_36;
      #line 940 
      if (np == 0) 
                   #line 940 
                   tmp_32 = smc->hw.iop + 1536U; else 
                                                      #line 940 
                                                      tmp_32 = smc->hw.iop + 896U;
      #line 940 
      if (np == 0) 
                   #line 940 
                   tmp_33 = smc->hw.iop + 1536U; else 
                                                      #line 940 
                                                      tmp_33 = smc->hw.iop + 896U;
      #line 940 
      iowrite16((unsigned short)((int)((unsigned int)((unsigned short)ioread16(tmp_33)) | 4U)),tmp_32);
      #line 942 
      if (np == 0) 
                   #line 942 
                   tmp_35 = smc->hw.iop + 1540U; else 
                                                      #line 942 
                                                      tmp_35 = smc->hw.iop + 900U;
      #line 942 
      if (np == 0) 
                   #line 942 
                   tmp_36 = smc->hw.iop + 1540U; else 
                                                      #line 942 
                                                      tmp_36 = smc->hw.iop + 900U;
      #line 942 
      iowrite16((unsigned short)((int)((unsigned int)((unsigned short)ioread16(tmp_36)) | 32768U)),tmp_35);
    }
    #line 945 
    if (np == 0) 
                 #line 945 
                 tmp_38 = smc->hw.iop + 1540U; else 
                                                    #line 945 
                                                    tmp_38 = smc->hw.iop + 900U;
    #line 945 
    if (np == 0) 
                 #line 945 
                 tmp_39 = smc->hw.iop + 1540U; else 
                                                    #line 945 
                                                    tmp_39 = smc->hw.iop + 900U;
    #line 945 
    iowrite16((unsigned short)((int)((unsigned int)((unsigned short)ioread16(tmp_39)) | 16U)),tmp_38);
    #line 946 
    if (np == 0) 
                 #line 946 
                 tmp_41 = smc->hw.iop + 1540U; else 
                                                    #line 946 
                                                    tmp_41 = smc->hw.iop + 900U;
    #line 946 
    if (np == 0) 
                 #line 946 
                 tmp_42 = smc->hw.iop + 1540U; else 
                                                    #line 946 
                                                    tmp_42 = smc->hw.iop + 900U;
    #line 946 
    iowrite16((unsigned short)((int)((unsigned int)((unsigned short)ioread16(tmp_42)) | 16U)),tmp_41);
    #line 947 
    mib->fddiPORTPCMState = (unsigned short)((unsigned int)mib->fddiPORTPCMState & 65503U);
    #line 948 
    cmd = 0;
    #line 950 
    case 6: 
            #line 950 
    ;
    #line 951 
    switch ((int)plc->p_state) {
      #line 952 
      case 7: 
              #line 952 
      ;
      #line 954 
      if ((unsigned int)phy->cf_join == 0U) {
        #line 955 
        phy->cf_join = (unsigned char)1U;
        #line 956 
        queue_event(smc,2,np + 3);
      }
      #line 958 
      if (cmd == 4) 
                    #line 959 
                    mib->fddiPORTPCMState = (unsigned short)40U;
      #line 961 
      if (cmd == 8) {
        #line 962 
        mib->fddiPORTPCMState = (unsigned short)34U;
        #line 963 
        break;
      }
      #line 965 
      break;
    }
    #line 967 
    break;
    #line 969 
    case 7: 
            #line 969 
    ;
    #line 970 
    break;
    #line 972 
    case 40: 
             #line 972 
    ;
    #line 976 
    sm_ph_lem_start(smc,(int)phy->np,255);
    #line 978 
    phy->tr_flag = (unsigned char)0U;
    #line 979 
    mib->fddiPORTConnectState = (unsigned short)3U;
    #line 982 
    if (np == 0) 
                 #line 982 
                 tmp_44 = smc->hw.iop + 1544U; else 
                                                    #line 982 
                                                    tmp_44 = smc->hw.iop + 904U;
    #line 982 
    iowrite16((unsigned short)636,tmp_44);
    #line 984 
    mib->fddiPORTPCMState = (unsigned short)((unsigned int)mib->fddiPORTPCMState & 65503U);
    #line 985 
    break;
    #line 986 
    case 8: 
            #line 986 
    ;
    #line 989 
    if (cmd == 8) {
      #line 990 
      mib->fddiPORTPCMState = (unsigned short)34U;
      #line 991 
      break;
    }
    #line 995 
    break;
    #line 996 
    case 41: 
             #line 996 
    ;
    #line 997 
    stop_pcm_timer0(smc,phy);
    #line 998 
    if (np == 0) 
                 #line 998 
                 tmp_45 = smc->hw.iop + 1540U; else 
                                                    #line 998 
                                                    tmp_45 = smc->hw.iop + 900U;
    #line 998 
    if (np == 0) 
                 #line 998 
                 tmp_46 = smc->hw.iop + 1540U; else 
                                                    #line 998 
                                                    tmp_46 = smc->hw.iop + 900U;
    #line 998 
    iowrite16((unsigned short)((int)((unsigned short)ioread16(tmp_46)) & 65519),tmp_45);
    #line 999 
    if (np == 0) 
                 #line 999 
                 tmp_48 = smc->hw.iop + 1540U; else 
                                                    #line 999 
                                                    tmp_48 = smc->hw.iop + 900U;
    #line 999 
    if (np == 0) 
                 #line 999 
                 tmp_49 = smc->hw.iop + 1540U; else 
                                                    #line 999 
                                                    tmp_49 = smc->hw.iop + 900U;
    #line 999 
    iowrite16((unsigned short)((int)((unsigned short)ioread16(tmp_49)) & 65527),tmp_48);
    #line 1000 
    if (np == 0) 
                 #line 1000 
                 tmp_51 = smc->hw.iop + 1544U; else 
                                                    #line 1000 
                                                    tmp_51 = smc->hw.iop + 904U;
    #line 1000 
    if (np == 0) 
                 #line 1000 
                 tmp_52 = smc->hw.iop + 1544U; else 
                                                    #line 1000 
                                                    tmp_52 = smc->hw.iop + 904U;
    #line 1000 
    iowrite16((unsigned short)((int)((unsigned short)ioread16(tmp_52)) & 57343),tmp_51);
    #line 1001 
    sm_ph_lem_stop(smc,np);
    #line 1002 
    phy->cf_loop = (unsigned char)0U;
    #line 1003 
    phy->cf_join = (unsigned char)0U;
    #line 1004 
    queue_event(smc,2,np + 3);
    #line 1005 
    plc_go_state(smc,np,3);
    #line 1006 
    mib->fddiPORTConnectState = (unsigned short)0U;
    #line 1007 
    if (np == 0) 
                 #line 1007 
                 tmp_54 = smc->hw.iop + 1540U; else 
                                                    #line 1007 
                                                    tmp_54 = smc->hw.iop + 900U;
    #line 1007 
    if (np == 0) 
                 #line 1007 
                 tmp_55 = smc->hw.iop + 1540U; else 
                                                    #line 1007 
                                                    tmp_55 = smc->hw.iop + 900U;
    #line 1007 
    iowrite16((unsigned short)((int)((unsigned int)((unsigned short)ioread16(tmp_55)) | 4U)),tmp_54);
    #line 1008 
    sm_ph_linestate(smc,np,(int)mib->fddiPORTMaint_LS + 12);
    #line 1009 
    if (np == 0) 
                 #line 1009 
                 tmp_57 = smc->hw.iop + 1536U; else 
                                                    #line 1009 
                                                    tmp_57 = smc->hw.iop + 896U;
    #line 1009 
    iowrite16((unsigned short)8,tmp_57);
    #line 1010 
    mib->fddiPORTPCMState = (unsigned short)((unsigned int)mib->fddiPORTPCMState & 65503U);
    #line 1011 
    break;
    #line 1012 
    case 9: 
            #line 1012 
    ;
    #line 1015 
    if (cmd == 10) {
      #line 1016 
      mib->fddiPORTPCMState = (unsigned short)32U;
      #line 1017 
      break;
    }
    #line 1019 
    break;
    #line 1021 
    default: 
             #line 1021 
    ;
    #line 1022 
    printk((char *)"\001",118,(char *)"PCM : invalid state");
    #line 1023 
    break;
  }
  #line 1025 
  return;
}

#line 1030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void sm_ph_linestate(struct s_smc *smc, int phy, int ls)
{
  #line 1032 
  int cntrl;
  #line 1036 
  void *tmp;
  #line 1056 
  void *tmp_1;
  #line 1036 
  if (phy == 0) 
                #line 1036 
                tmp = smc->hw.iop + 1540U; else 
                                                #line 1036 
                                                tmp = smc->hw.iop + 900U;
  #line 1036 
  cntrl = (int)((ioread16(tmp) & 4294965496U) | 7U);
  #line 1038 
  switch (ls) {
    #line 1039 
    case 12: 
             #line 1039 
    ;
    #line 1040 
    cntrl = cntrl;
    #line 1041 
    break;
    #line 1042 
    case 14: 
             #line 1042 
    ;
    #line 1043 
    cntrl |= 768;
    #line 1044 
    break;
    #line 1045 
    case 15: 
             #line 1045 
    ;
    #line 1046 
    cntrl |= 512;
    #line 1047 
    break;
    #line 1048 
    default: 
             #line 1048 
    ;
    #line 1049 
    case 13: 
             #line 1049 
    ;
    #line 1050 
    cntrl |= 256;
    #line 1051 
    break;
    #line 1052 
    case 16: 
             #line 1052 
    ;
    #line 1053 
    cntrl |= 1536;
    #line 1054 
    break;
  }
  #line 1056 
  if (phy == 0) 
                #line 1056 
                tmp_1 = smc->hw.iop + 1540U; else 
                                                  #line 1056 
                                                  tmp_1 = smc->hw.iop + 900U;
  #line 1056 
  ;
  #line 1056 
  iowrite16((unsigned short)((int)((unsigned short)cntrl)),tmp_1);
  #line 1057 
  return;
}

#line 1059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void reset_lem_struct(struct s_phy *phy)
{
  #line 1061 
  struct lem_counter *lem = & phy->lem;
  #line 1063 
  (phy->mib)->fddiPORTLer_Estimate = (unsigned char)15U;
  #line 1064 
  lem->lem_float_ber = (unsigned short)1500U;
  #line 1065 
  return;
}

#line 1070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void lem_evaluate(struct s_smc *smc, struct s_phy *phy)
{
  #line 1072 
  int ber;
  #line 1073 
  u_long errors;
  #line 1075 
  struct fddi_mib_p *mib;
  #line 1076 
  int cond;
  #line 1083 
  void *tmp;
  #line 1074 
  struct lem_counter *lem = & phy->lem;
  #line 1078 
  mib = phy->mib;
  #line 1080 
  if ((unsigned int)lem->lem_on == 0U) 
                                       #line 1081 
                                       return;
  #line 1083 
  if ((unsigned int)phy->np == 0U) 
                                   #line 1083 
                                   tmp = smc->hw.iop + 1640U; else 
                                                                   #line 1083 
                                                                   tmp = smc->hw.iop + 1000U;
  #line 1083 
  errors = (unsigned long)ioread16(tmp);
  #line 1084 
  lem->lem_errors += errors;
  #line 1085 
  mib->fddiPORTLem_Ct += errors;
  #line 1087 
  errors = lem->lem_errors;
  #line 1098 
  if (errors == 0UL) 
                     #line 1098 
                     ber = 15;
  else 
    #line 1099 
    if (errors <= 9UL) 
                       #line 1099 
                       ber = 9;
    else 
      #line 1100 
      if (errors <= 99UL) 
                          #line 1100 
                          ber = 8;
      else 
        #line 1101 
        if (errors <= 999UL) 
                             #line 1101 
                             ber = 7;
        else 
          #line 1102 
          if (errors <= 9999UL) 
                                #line 1102 
                                ber = 6;
          else 
            #line 1103 
            if (errors <= 99999UL) 
                                   #line 1103 
                                   ber = 5;
            else 
              #line 1104 
              if (errors <= 999999UL) 
                                      #line 1104 
                                      ber = 4;
              else 
                #line 1105 
                if (errors <= 9999999UL) 
                                         #line 1105 
                                         ber = 3;
                else 
                  #line 1106 
                  if (errors <= 99999999UL) 
                                            #line 1106 
                                            ber = 2;
                  else 
                    #line 1107 
                    if (errors <= 999999999UL) 
                                               #line 1107 
                                               ber = 1; else 
                                                             #line 1108 
                                                             ber = 0;
  #line 1113 
  ber *= 100;
  #line 1114 
  lem->lem_float_ber = (unsigned short)((unsigned int)lem->lem_float_ber * 7U + (unsigned int)((unsigned short)ber) * 3U);
  #line 1115 
  lem->lem_float_ber = (unsigned short)((unsigned int)lem->lem_float_ber / 10U);
  #line 1116 
  mib->fddiPORTLer_Estimate = (unsigned char)((unsigned int)lem->lem_float_ber / 100U);
  #line 1117 
  if ((unsigned int)mib->fddiPORTLer_Estimate <= 3U) 
                                                     #line 1118 
                                                     mib->fddiPORTLer_Estimate = (unsigned char)4U;
  #line 1121 
  if (lem->lem_errors != 0UL) ;
  #line 1130 
  lem->lem_errors = 0UL;
  #line 1133 
  cond = (int)mib->fddiPORTLer_Estimate <= (int)mib->fddiPORTLer_Alarm;
  #line 1138 
  if ((int)mib->fddiPORTLerFlag != cond) 
                                         #line 1139 
                                         smt_srf_event(smc,11,(int)phy->np + 1,cond);
  #line 1144 
  if ((int)mib->fddiPORTLer_Estimate <= (int)mib->fddiPORTLer_Cutoff) {
    #line 1145 
    phy->pc_lem_fail = (unsigned char)1U;
    #line 1146 
    (mib->fddiPORTLem_Reject_Ct) ++;
    #line 1151 
    lem->lem_float_ber = (unsigned short)((unsigned int)lem->lem_float_ber + 200U);
    #line 1161 
    queue_event(smc,(int)phy->np + 5,1);
  }
  #line 1163 
  return;
}

#line 1169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
void sm_lem_evaluate(struct s_smc *smc)
{
  #line 1171 
  int np;
  #line 1173 
  np = 0;
  #line 1173 
  while (np <= 1) {
    #line 1174 
    lem_evaluate(smc,& smc->y[np]);
    #line 1173 
    np ++;
  }
  #line 1175 
  return;
}

#line 1177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void lem_check_lct(struct s_smc *smc, struct s_phy *phy)
{
  #line 1180 
  struct fddi_mib_p *mib;
  #line 1181 
  int errors;
  #line 1186 
  void *tmp;
  #line 1179 
  struct lem_counter *lem = & phy->lem;
  #line 1183 
  mib = phy->mib;
  #line 1185 
  phy->pc_lem_fail = (unsigned char)0U;
  #line 1186 
  if ((unsigned int)phy->np == 0U) 
                                   #line 1186 
                                   tmp = smc->hw.iop + 1640U; else 
                                                                   #line 1186 
                                                                   tmp = smc->hw.iop + 1000U;
  #line 1186 
  errors = (int)ioread16(tmp);
  #line 1187 
  lem->lem_errors += (unsigned long)errors;
  #line 1188 
  mib->fddiPORTLem_Ct += (unsigned long)errors;
  #line 1189 
  if (lem->lem_errors != 0UL) 
    #line 1190 
    switch ((int)phy->lc_test) {
      #line 1191 
      case 1: 
              #line 1191 
      ;
      #line 1192 
      if (lem->lem_errors >= smc->s.lct_short) 
                                               #line 1193 
                                               phy->pc_lem_fail = (unsigned char)1U;
      #line 1194 
      break;
      #line 1195 
      case 2: 
              #line 1195 
      ;
      #line 1196 
      if (lem->lem_errors >= smc->s.lct_medium) 
                                                #line 1197 
                                                phy->pc_lem_fail = (unsigned char)1U;
      #line 1198 
      break;
      #line 1199 
      case 3: 
              #line 1199 
      ;
      #line 1200 
      if (lem->lem_errors >= smc->s.lct_long) 
                                              #line 1201 
                                              phy->pc_lem_fail = (unsigned char)1U;
      #line 1202 
      break;
      #line 1203 
      case 4: 
              #line 1203 
      ;
      #line 1204 
      if (lem->lem_errors >= smc->s.lct_extended) 
                                                  #line 1205 
                                                  phy->pc_lem_fail = (unsigned char)1U;
      #line 1206 
      break;
    }
  #line 1210 
  if ((unsigned int)phy->pc_lem_fail != 0U) {
    #line 1211 
    (mib->fddiPORTLCTFail_Ct) ++;
    #line 1212 
    (mib->fddiPORTLem_Reject_Ct) ++;
  }
  else 
       #line 1215 
       mib->fddiPORTLCTFail_Ct = 0UL;
  #line 1216 
  return;
}

#line 1221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void sm_ph_lem_start(struct s_smc *smc, int np, int threshold)
{
  #line 1232 
  void *tmp;
  #line 1233 
  void *tmp_0;
  #line 1236 
  void *tmp_1;
  #line 1236 
  void *tmp_2;
  #line 1223 
  struct lem_counter *lem = & smc->y[np].lem;
  #line 1225 
  lem->lem_on = (unsigned short)1U;
  #line 1226 
  lem->lem_errors = 0UL;
  #line 1232 
  if (np == 0) 
               #line 1232 
               tmp = smc->hw.iop + 1556U; else 
                                               #line 1232 
                                               tmp = smc->hw.iop + 916U;
  #line 1232 
  ;
  #line 1232 
  iowrite16((unsigned short)((int)((unsigned short)threshold)),tmp);
  #line 1233 
  if (np == 0) 
               #line 1233 
               tmp_0 = smc->hw.iop + 1640U; else 
                                                 #line 1233 
                                                 tmp_0 = smc->hw.iop + 1000U;
  #line 1233 
  ioread16(tmp_0);
  #line 1236 
  if (np == 0) 
               #line 1236 
               tmp_1 = smc->hw.iop + 1544U; else 
                                                 #line 1236 
                                                 tmp_1 = smc->hw.iop + 904U;
  #line 1236 
  if (np == 0) 
               #line 1236 
               tmp_2 = smc->hw.iop + 1544U; else 
                                                 #line 1236 
                                                 tmp_2 = smc->hw.iop + 904U;
  #line 1236 
  iowrite16((unsigned short)((int)((unsigned int)((unsigned short)ioread16(tmp_2)) | 8192U)),tmp_1);
  #line 1237 
  return;
}

#line 1239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void sm_ph_lem_stop(struct s_smc *smc, int np)
{
  #line 1244 
  void *tmp;
  #line 1244 
  void *tmp_0;
  #line 1241 
  struct lem_counter *lem = & smc->y[np].lem;
  #line 1243 
  lem->lem_on = (unsigned short)0U;
  #line 1244 
  if (np == 0) 
               #line 1244 
               tmp = smc->hw.iop + 1544U; else 
                                               #line 1244 
                                               tmp = smc->hw.iop + 904U;
  #line 1244 
  if (np == 0) 
               #line 1244 
               tmp_0 = smc->hw.iop + 1544U; else 
                                                 #line 1244 
                                                 tmp_0 = smc->hw.iop + 904U;
  #line 1244 
  iowrite16((unsigned short)((int)((unsigned short)ioread16(tmp_0)) & 57343),tmp);
  #line 1245 
  return;
}

#line 1256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void pc_rcode_actions(struct s_smc *smc, int bit, struct s_phy *phy)
{
  #line 1258 
  struct fddi_mib_p *mib;
  #line 1260 
  mib = phy->mib;
  #line 1263 
  bit ++;
  #line 1265 
  switch (bit) {
    #line 1266 
    case 0: 
            #line 1266 
    ;
    #line 1267 
    case 1: 
            #line 1267 
    ;
    #line 1268 
    case 2: 
            #line 1268 
    ;
    #line 1269 
    break;
    #line 1270 
    case 3: 
            #line 1270 
    ;
    #line 1271 
    if ((unsigned int)phy->r_val[1] == 0U && (unsigned int)phy->r_val[2] == 0U) 
      #line 1272 
      mib->fddiPORTNeighborType = (unsigned short)0U;
    else 
      #line 1273 
      if ((unsigned int)phy->r_val[1] == 0U && (unsigned int)phy->r_val[2] == 1U) 
        #line 1274 
        mib->fddiPORTNeighborType = (unsigned short)1U;
      else 
        #line 1275 
        if ((unsigned int)phy->r_val[1] == 1U && (unsigned int)phy->r_val[2] == 0U) 
          #line 1276 
          mib->fddiPORTNeighborType = (unsigned short)2U;
        else 
          #line 1277 
          if ((unsigned int)phy->r_val[1] == 1U && (unsigned int)phy->r_val[2] == 1U) 
            #line 1278 
            mib->fddiPORTNeighborType = (unsigned short)3U;
    #line 1279 
    break;
    #line 1280 
    case 4: 
            #line 1280 
    ;
    #line 1281 
    if ((unsigned int)mib->fddiPORTMy_Type == 3U && (unsigned int)mib->fddiPORTNeighborType == 3U) {
      #line 1285 
      mib->fddiPORTPC_Withhold = (unsigned short)1U;
      #line 1286 
      smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 4U));
      #line 1286 
      ;
      #line 1286 
      ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 4U)));
    }
    else 
      #line 1288 
      if ((unsigned int)phy->t_val[3] != 0U || (unsigned int)phy->r_val[3] != 0U) {
        #line 1289 
        mib->fddiPORTPC_Withhold = (unsigned short)0U;
        #line 1290 
        if ((unsigned int)mib->fddiPORTMy_Type == 3U || (unsigned int)mib->fddiPORTNeighborType == 3U) 
          #line 1292 
          phy->pc_mode = (unsigned char)2U; else 
                                                 #line 1294 
                                                 phy->pc_mode = (unsigned char)1U;
        #line 1297 
        all_selection_criteria(smc);
        #line 1299 
        if ((unsigned int)phy->wc_flag != 0U) 
                                              #line 1300 
                                              mib->fddiPORTPC_Withhold = (unsigned short)3U;
      }
      else {
        #line 1304 
        mib->fddiPORTPC_Withhold = (unsigned short)2U;
        #line 1305 
        smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 4U));
        #line 1305 
        ;
        #line 1305 
        ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 4U)));
      }
    #line 1309 
    phy->twisted = (unsigned char)(((unsigned int)mib->fddiPORTMy_Type + 65534U > 1U && (int)mib->fddiPORTNeighborType == (int)mib->fddiPORTMy_Type) != 0);
    #line 1313 
    if ((unsigned int)phy->twisted != 0U) ;
    #line 1317 
    break;
    #line 1318 
    case 5: 
            #line 1318 
    ;
    #line 1319 
    break;
    #line 1320 
    case 6: 
            #line 1320 
    ;
    #line 1321 
    if ((unsigned int)phy->t_val[4] != 0U || (unsigned int)phy->r_val[4] != 0U) 
      #line 1322 
      if ((unsigned int)phy->t_val[4] != 0U && (unsigned int)phy->t_val[5] != 0U || (unsigned int)phy->r_val[4] != 0U && (unsigned int)phy->r_val[5] != 0U) 
        #line 1324 
        phy->lc_test = (unsigned char)4U; else 
                                               #line 1326 
                                               phy->lc_test = (unsigned char)3U;
    else 
      #line 1328 
      if ((unsigned int)phy->t_val[5] != 0U || (unsigned int)phy->r_val[5] != 0U) 
        #line 1329 
        phy->lc_test = (unsigned char)2U; else 
                                               #line 1331 
                                               phy->lc_test = (unsigned char)1U;
    #line 1332 
    switch ((int)phy->lc_test) {
      #line 1334 
      void *tmp_1;
      #line 1338 
      void *tmp_2;
      #line 1342 
      void *tmp_3;
      #line 1342 
      void *tmp_4;
      #line 1346 
      void *tmp_6;
      #line 1346 
      void *tmp_7;
      #line 1333 
      case 1: 
              #line 1333 
      ;
      #line 1334 
      if ((unsigned int)phy->np == 0U) 
                                       #line 1334 
                                       tmp_1 = smc->hw.iop + 1580U; else 
                                                                    #line 1334 
                                                                    tmp_1 = smc->hw.iop + 940U;
      #line 1334 
      iowrite16((unsigned short)63094,tmp_1);
      #line 1335 
      phy->t_next[7] = smc->s.pcm_lc_short;
      #line 1336 
      break;
      #line 1337 
      case 2: 
              #line 1337 
      ;
      #line 1338 
      if ((unsigned int)phy->np == 0U) 
                                       #line 1338 
                                       tmp_2 = smc->hw.iop + 1580U; else 
                                                                    #line 1338 
                                                                    tmp_2 = smc->hw.iop + 940U;
      #line 1338 
      iowrite16((unsigned short)41122,tmp_2);
      #line 1339 
      phy->t_next[7] = smc->s.pcm_lc_medium;
      #line 1340 
      break;
      #line 1341 
      case 3: 
              #line 1341 
      ;
      #line 1342 
      if ((unsigned int)phy->np == 0U) 
                                       #line 1342 
                                       tmp_3 = smc->hw.iop + 1540U; else 
                                                                    #line 1342 
                                                                    tmp_3 = smc->hw.iop + 900U;
      #line 1342 
      if ((unsigned int)phy->np == 0U) 
                                       #line 1342 
                                       tmp_4 = smc->hw.iop + 1540U; else 
                                                                    #line 1342 
                                                                    tmp_4 = smc->hw.iop + 900U;
      #line 1342 
      iowrite16((unsigned short)((int)((unsigned int)((unsigned short)ioread16(tmp_4)) | 8U)),tmp_3);
      #line 1343 
      phy->t_next[7] = smc->s.pcm_lc_long;
      #line 1344 
      break;
      #line 1345 
      case 4: 
              #line 1345 
      ;
      #line 1346 
      if ((unsigned int)phy->np == 0U) 
                                       #line 1346 
                                       tmp_6 = smc->hw.iop + 1540U; else 
                                                                    #line 1346 
                                                                    tmp_6 = smc->hw.iop + 900U;
      #line 1346 
      if ((unsigned int)phy->np == 0U) 
                                       #line 1346 
                                       tmp_7 = smc->hw.iop + 1540U; else 
                                                                    #line 1346 
                                                                    tmp_7 = smc->hw.iop + 900U;
      #line 1346 
      iowrite16((unsigned short)((int)((unsigned int)((unsigned short)ioread16(tmp_7)) | 8U)),tmp_6);
      #line 1347 
      phy->t_next[7] = smc->s.pcm_lc_extended;
      #line 1348 
      break;
    }
    #line 1350 
    if (phy->t_next[7] > smc->s.pcm_lc_medium) 
                                               #line 1351 
                                               start_pcm_timer0(smc,phy->t_next[7],24,phy);
    #line 1354 
    phy->t_next[9] = smc->s.pcm_t_next_9;
    #line 1355 
    break;
    #line 1356 
    case 7: 
            #line 1356 
    ;
    #line 1357 
    if ((unsigned int)phy->t_val[6] != 0U) 
                                           #line 1358 
                                           phy->cf_loop = (unsigned char)1U;
    #line 1360 
    phy->td_flag = (unsigned char)1U;
    #line 1361 
    break;
    #line 1362 
    case 8: 
            #line 1362 
    ;
    #line 1363 
    if ((unsigned int)phy->t_val[7] != 0U || (unsigned int)phy->r_val[7] != 0U) 
      #line 1367 
      queue_event(smc,(int)phy->np + 5,1);
    #line 1369 
    break;
    #line 1370 
    case 9: 
            #line 1370 
    ;
    #line 1371 
    if ((unsigned int)phy->t_val[8] != 0U || (unsigned int)phy->r_val[8] != 0U) {
      #line 1372 
      if ((unsigned int)phy->t_val[8] != 0U) 
                                             #line 1373 
                                             phy->cf_loop = (unsigned char)1U;
      #line 1374 
      phy->td_flag = (unsigned char)1U;
    }
    #line 1376 
    break;
    #line 1377 
    case 10: 
             #line 1377 
    ;
    #line 1378 
    if ((unsigned int)phy->r_val[9] != 0U) 
                                           #line 1380 
                                           mib->fddiPORTMacIndicated.R_val = (unsigned char)1U; else 
                                                                    #line 1384 
                                                                    mib->fddiPORTMacIndicated.R_val = (unsigned char)0U;
    #line 1386 
    break;
  }
  #line 1388 
  return;
}

#line 1393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
static void pc_tcode_actions(struct s_smc *smc, int bit, struct s_phy *phy)
{
  #line 1396 
  struct fddi_mib_p *mib;
  #line 1395 
  int np = (int)phy->np;
  #line 1398 
  mib = phy->mib;
  #line 1400 
  switch (bit) {
    #line 1401 
    case 0: 
            #line 1401 
    ;
    #line 1402 
    phy->t_val[0] = (unsigned char)0U;
    #line 1403 
    break;
    #line 1404 
    case 1: 
            #line 1404 
    ;
    #line 1405 
    if ((unsigned int)mib->fddiPORTMy_Type + 65534U <= 1U) 
                                                           #line 1406 
                                                           phy->t_val[1] = (unsigned char)1U; else 
                                                                    #line 1408 
                                                                    phy->t_val[1] = (unsigned char)0U;
    #line 1409 
    break;
    #line 1410 
    case 2: 
            #line 1410 
    ;
    #line 1411 
    if ((unsigned int)mib->fddiPORTMy_Type == 1U || (unsigned int)mib->fddiPORTMy_Type == 3U) 
      #line 1412 
      phy->t_val[2] = (unsigned char)1U; else 
                                              #line 1414 
                                              phy->t_val[2] = (unsigned char)0U;
    #line 1415 
    break;
    #line 1416 
    case 3: 
            #line 1416 
    ;
    {
      #line 1418 
      int type;
      #line 1418 
      int ne;
      #line 1419 
      int policy;
      #line 1421 
      type = (int)mib->fddiPORTMy_Type;
      #line 1422 
      ne = (int)mib->fddiPORTNeighborType;
      #line 1423 
      policy = (int)smc->mib.fddiSMTConnectionPolicy;
      #line 1425 
      phy->t_val[3] = (unsigned char)1U;
      #line 1426 
      switch (type) {
        #line 1427 
        case 0: 
                #line 1427 
        ;
        #line 1428 
        if ((((policy & 1) != 0 && ne == 0 || (policy & 2) != 0 && ne == 1) || (policy & 4) != 0 && ne == 2) || (policy & 8) != 0 && ne == 3) 
          #line 1433 
          phy->t_val[3] = (unsigned char)0U;
        #line 1434 
        break;
        #line 1435 
        case 1: 
                #line 1435 
        ;
        #line 1436 
        if ((((policy & 16) != 0 && ne == 0 || (policy & 32) != 0 && ne == 1) || (policy & 64) != 0 && ne == 2) || (policy & 128) != 0 && ne == 3) 
          #line 1441 
          phy->t_val[3] = (unsigned char)0U;
        #line 1442 
        break;
        #line 1443 
        case 2: 
                #line 1443 
        ;
        #line 1444 
        if ((((policy & 256) != 0 && ne == 0 || (policy & 512) != 0 && ne == 1) || (policy & 1024) != 0 && ne == 2) || (policy & 2048) != 0 && ne == 3) 
          #line 1449 
          phy->t_val[3] = (unsigned char)0U;
        #line 1450 
        break;
        #line 1451 
        case 3: 
                #line 1451 
        ;
        #line 1452 
        if ((((ne == 3 || (policy & 4096) != 0 && ne == 0) || (policy & 8192) != 0 && ne == 1) || (policy & 16384) != 0 && ne == 2) || (policy & 32768) != 0 && ne == 3) 
          #line 1457 
          phy->t_val[3] = (unsigned char)0U;
        #line 1458 
        break;
      }
      #line 1464 
      if ((((type == 0 && (ne == 0 || ne == 2) || type == 1 && ne == 1) || type == 1 && ne == 2) || type == 2 && ne == 0) || type == 2 && ne == 1) 
        #line 1470 
        smt_srf_event(smc,4,(int)phy->np + 1,0);
    }
    #line 1475 
    break;
    #line 1476 
    case 4: 
            #line 1476 
    ;
    #line 1477 
    if ((unsigned int)mib->fddiPORTPC_Withhold == 0U) {
      #line 1478 
      if ((unsigned int)phy->pc_lem_fail != 0U) {
        #line 1479 
        phy->t_val[4] = (unsigned char)1U;
        #line 1480 
        phy->t_val[5] = (unsigned char)0U;
      }
      else {
        #line 1483 
        phy->t_val[4] = (unsigned char)0U;
        #line 1484 
        if (mib->fddiPORTLCTFail_Ct != 0UL) 
                                            #line 1485 
                                            phy->t_val[5] = (unsigned char)1U; else 
                                                                    #line 1487 
                                                                    phy->t_val[5] = (unsigned char)0U;
        #line 1494 
        if ((unsigned int)phy->wc_flag != 0U) 
                                              #line 1495 
                                              phy->t_val[5] = (unsigned char)1U;
      }
      #line 1497 
      mib->fddiPORTConnectState = (unsigned short)1U;
    }
    else {
      #line 1500 
      mib->fddiPORTConnectState = (unsigned short)2U;
      #line 1501 
      phy->t_val[4] = (unsigned char)1U;
      #line 1502 
      phy->t_val[5] = (unsigned char)1U;
    }
    #line 1504 
    break;
    #line 1505 
    case 5: 
            #line 1505 
    ;
    #line 1506 
    break;
    #line 1507 
    case 6: 
            #line 1507 
    ;
    #line 1509 
    phy->t_val[6] = (unsigned char)0U;
    #line 1510 
    break;
    #line 1511 
    case 7: 
            #line 1511 
    ;
    #line 1512 
    phy->cf_loop = (unsigned char)0U;
    #line 1513 
    lem_check_lct(smc,phy);
    #line 1514 
    if ((unsigned int)phy->pc_lem_fail != 0U) 
                                              #line 1516 
                                              phy->t_val[7] = (unsigned char)1U; else 
                                                                    #line 1519 
                                                                    phy->t_val[7] = (unsigned char)0U;
    #line 1520 
    break;
    #line 1521 
    case 8: 
            #line 1521 
    ;
    #line 1522 
    phy->t_val[8] = (unsigned char)0U;
    #line 1523 
    break;
    #line 1524 
    case 9: 
            #line 1524 
    ;
    #line 1525 
    phy->cf_loop = (unsigned char)0U;
    #line 1526 
    if ((unsigned int)mib->fddiPORTPC_Withhold != 0U || (unsigned int)smc->s.sas == 0U && (unsigned int)phy->wc_flag != 0U) {
      #line 1528 
      queue_event(smc,np + 5,1);
      #line 1529 
      break;
    }
    #line 1531 
    phy->t_val[9] = (unsigned char)0U;
    #line 1532 
    switch ((int)smc->s.sas) {
      #line 1533 
      case 0: 
              #line 1533 
      ;
      #line 1537 
      if ((unsigned int)phy->pc_mode == 2U) {
        #line 1538 
        if (np == 1 || np == 0 && (unsigned int)(smc->y[1].mib)->fddiPORTConnectState != 3U) 
          #line 1541 
          phy->t_val[9] = (unsigned char)1U;
      }
      else 
        #line 1544 
        if (np == 1) 
                     #line 1545 
                     phy->t_val[9] = (unsigned char)1U;
      #line 1547 
      break;
      #line 1548 
      case 1: 
              #line 1548 
      ;
      #line 1549 
      if (np == 0) 
                   #line 1550 
                   phy->t_val[9] = (unsigned char)1U;
      #line 1551 
      break;
    }
    #line 1562 
    mib->fddiPORTMacIndicated.T_val = phy->t_val[9];
    #line 1563 
    break;
  }
  #line 1567 
  return;
}

#line 1571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
int pcm_status_twisted(struct s_smc *smc)
{
  #line 1573 
  int twist = 0;
  #line 1574 
  if ((unsigned int)smc->s.sas != 0U) 
                                      #line 1575 
                                      return 0;
  #line 1576 
  if ((unsigned int)smc->y[0].twisted != 0U && (unsigned int)(smc->y[0].mib)->fddiPORTPCMState == 8U) 
    #line 1577 
    twist |= 1;
  #line 1578 
  if ((unsigned int)smc->y[1].twisted != 0U && (unsigned int)(smc->y[1].mib)->fddiPORTPCMState == 8U) 
    #line 1579 
    twist |= 2;
  #line 1580 
  return twist;
}

#line 1590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
void pcm_status_state(struct s_smc *smc, int np, int *type, int *state, int *remote, int *mac)
{
  #line 1594 
  struct fddi_mib_p *mib;
  #line 1593 
  struct s_phy *phy = & smc->y[np];
  #line 1596 
  mib = phy->mib;
  #line 1599 
  *mac = 0;
  #line 1600 
  *type = (int)mib->fddiPORTMy_Type;
  #line 1601 
  *state = (int)mib->fddiPORTConnectState;
  #line 1602 
  *remote = (int)mib->fddiPORTNeighborType;
  #line 1604 
  switch ((int)mib->fddiPORTPCMState) {
    #line 1605 
    case 8: 
            #line 1605 
    ;
    #line 1606 
    *mac = (int)mib->fddiPORTMacIndicated.R_val;
    #line 1607 
    break;
  }
  #line 1609 
  return;
}

#line 1614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
int pcm_rooted_station(struct s_smc *smc)
{
  #line 1616 
  int n;
  #line 1618 
  n = 0;
  #line 1618 
  while (n <= 1) {
    #line 1619 
    if ((unsigned int)(smc->y[n].mib)->fddiPORTPCMState == 8U && (unsigned int)(smc->y[n].mib)->fddiPORTNeighborType == 3U) 
      #line 1621 
      return 0;
    #line 1618 
    n ++;
  }
  #line 1623 
  return 1;
}

#line 1629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/pcmplc.c"
void plc_irq(struct s_smc *smc, int np, unsigned int cmd)
{
  #line 1634 
  int n;
  #line 1636 
  int corr_mask;
  #line 1638 
  int i;
  #line 1632 
  struct s_phy *phy = & smc->y[np];
  #line 1633 
  struct s_plc *plc = & phy->plc;
  #line 1640 
  if ((int)smc->s.numphys <= np) {
    #line 1641 
    (plc->soft_err) ++;
    #line 1642 
    return;
  }
  #line 1644 
  if ((cmd & 512U) != 0U) {
    #line 1648 
    if (plc->ebuf_cont == 0UL && (unsigned int)(phy->mib)->fddiPORTPCMState == 8U) 
      #line 1655 
      ((phy->mib)->fddiPORTEBError_Ct) ++;
    #line 1659 
    (plc->ebuf_err) ++;
    #line 1660 
    if (plc->ebuf_cont <= 1000UL) 
                                  #line 1665 
                                  (plc->ebuf_cont) ++;
    #line 1669 
    if (plc->ebuf_cont == 1000UL) {
      #line 1670 
      void *tmp_0;
      #line 1670 
      if (np == 0) 
                   #line 1670 
                   tmp_0 = smc->hw.iop + 1600U; else 
                                                     #line 1670 
                                                     tmp_0 = smc->hw.iop + 960U;
      #line 1669 
      if ((ioread16(tmp_0) & 63488U) == 30720U) {
        #line 1682 
        void *tmp;
        #line 1681 
        corr_mask = 124;
        #line 1682 
        if (np == 0) 
                     #line 1682 
                     tmp = smc->hw.iop + 1544U; else 
                                                     #line 1682 
                                                     tmp = smc->hw.iop + 904U;
        #line 1682 
        ;
        #line 1682 
        iowrite16((unsigned short)((int)((unsigned short)corr_mask)),tmp);
        #line 1688 
        queue_event(smc,1,2);
        #line 1693 
        printk((char *)"\001",136,(char *)"Elasticity Buffer hang-up");
        #line 1698 
        drv_reset_indication(smc);
      }
    }
  }
  else 
       #line 1703 
       plc->ebuf_cont = 0UL;
  #line 1705 
  if ((cmd & 1024U) != 0U) 
                           #line 1706 
                           (plc->phyinv) ++;
  #line 1708 
  if ((cmd & 2048U) != 0U) 
                           #line 1709 
                           (plc->vsym_ctr) ++;
  #line 1711 
  if ((cmd & 4096U) != 0U) 
                           #line 1712 
                           (plc->mini_ctr) ++;
  #line 1714 
  if ((cmd & 8192U) != 0U) {
    #line 1715 
    int j;
    #line 1720 
    void *tmp_2;
    #line 1721 
    void *tmp_4;
    #line 1720 
    if (np == 0) 
                 #line 1720 
                 tmp_2 = smc->hw.iop + 1556U; else 
                                                   #line 1720 
                                                   tmp_2 = smc->hw.iop + 916U;
    #line 1720 
    j = (int)ioread16(tmp_2);
    #line 1721 
    if (np == 0) 
                 #line 1721 
                 tmp_4 = smc->hw.iop + 1640U; else 
                                                   #line 1721 
                                                   tmp_4 = smc->hw.iop + 1000U;
    #line 1721 
    i = (int)ioread16(tmp_4);
    #line 1723 
    if (i < j) 
               #line 1725 
               i += 256;
    #line 1728 
    if ((unsigned int)phy->lem.lem_on != 0U) {
      #line 1732 
      phy->lem.lem_errors += (unsigned long)i;
      #line 1733 
      (phy->mib)->fddiPORTLem_Ct += (unsigned long)i;
    }
  }
  #line 1736 
  if ((cmd & 128U) != 0U) {
    #line 1737 
    if ((unsigned int)plc->p_state == 4U) ;
    #line 1743 
    (plc->tpc_exp) ++;
  }
  #line 1745 
  if ((cmd & 2U) != 0U) {
    #line 1746 
    void *tmp_6;
    #line 1746 
    if (np == 0) 
                 #line 1746 
                 tmp_6 = smc->hw.iop + 1540U; else 
                                                   #line 1746 
                                                   tmp_6 = smc->hw.iop + 900U;
    #line 1746 
    switch (ioread16(tmp_6) & 30720U) {
      #line 1747 
      case (unsigned int)2048: 
                               #line 1747 
      ;
      #line 1747 
      phy->curr_ls = (unsigned char)13U;
      #line 1747 
      break;
      #line 1748 
      case (unsigned int)4096: 
                               #line 1748 
      ;
      #line 1748 
      phy->curr_ls = (unsigned char)15U;
      #line 1748 
      break;
      #line 1749 
      case (unsigned int)8192: 
                               #line 1749 
      ;
      #line 1749 
      phy->curr_ls = (unsigned char)14U;
      #line 1749 
      break;
      #line 1750 
      case (unsigned int)16384: 
                                #line 1750 
      ;
      #line 1750 
      phy->curr_ls = (unsigned char)12U;
      #line 1750 
      break;
    }
  }
  #line 1753 
  if ((cmd & 32U) != 0U) {
    #line 1754 
    int reason;
    #line 1756 
    void *tmp_8;
    #line 1756 
    if (np == 0) 
                 #line 1756 
                 tmp_8 = smc->hw.iop + 1604U; else 
                                                   #line 1756 
                                                   tmp_8 = smc->hw.iop + 964U;
    #line 1756 
    reason = (int)ioread16(tmp_8) & 7;
    #line 1758 
    switch (reason) {
      #line 1759 
      case 1: 
              #line 1759 
      ;
      #line 1759 
      (plc->b_pcs) ++;
      #line 1759 
      break;
      #line 1760 
      case 2: 
              #line 1760 
      ;
      #line 1760 
      (plc->b_tpc) ++;
      #line 1760 
      break;
      #line 1761 
      case 3: 
              #line 1761 
      ;
      #line 1761 
      (plc->b_tne) ++;
      #line 1761 
      break;
      #line 1762 
      case 4: 
              #line 1762 
      ;
      #line 1762 
      (plc->b_qls) ++;
      #line 1762 
      break;
      #line 1763 
      case 5: 
              #line 1763 
      ;
      #line 1763 
      (plc->b_ils) ++;
      #line 1763 
      break;
      #line 1764 
      case 6: 
              #line 1764 
      ;
      #line 1764 
      (plc->b_hls) ++;
      #line 1764 
      break;
    }
    #line 1769 
    if ((unsigned int)smc->e.DisconnectFlag == 0U) 
                                                   #line 1771 
                                                   queue_event(smc,np + 5,1);
    #line 1777 
    return;
  }
  #line 1782 
  if ((cmd & 4U) != 0U) {
    #line 1784 
    void *tmp_10;
    #line 1783 
    queue_event(smc,np + 5,5);
    #line 1784 
    if (np == 0) 
                 #line 1784 
                 tmp_10 = smc->hw.iop + 1624U; else 
                                                    #line 1784 
                                                    tmp_10 = smc->hw.iop + 984U;
    #line 1784 
    n = (int)ioread16(tmp_10);
    #line 1785 
    i = 0;
    #line 1785 
    while ((int)plc->p_bits > i) {
      #line 1786 
      phy->r_val[(int)plc->p_start + i] = (unsigned char)((unsigned int)((unsigned char)n) & 1U);
      #line 1787 
      n >>= 1;
      #line 1785 
      i ++;
    }
  }
  else 
    #line 1790 
    if ((cmd & 64U) != 0U) 
                           #line 1791 
                           queue_event(smc,np + 5,4);
  #line 1793 
  if ((cmd & 8U) != 0U) 
    #line 1795 
    if ((unsigned int)phy->tr_flag == 0U) {
      #line 1798 
      phy->tr_flag = (unsigned char)1U;
      #line 1799 
      smc->e.trace_prop |= (unsigned long)(1 << np);
      #line 1800 
      queue_event(smc,1,3);
    }
  #line 1807 
  if ((cmd & 16U) != 0U && (unsigned int)(phy->mib)->fddiPORTPCMState == 2U) 
    #line 1809 
    if ((unsigned int)smc->e.path_test == 2U) {
      #line 1814 
      smc->e.path_test = (unsigned char)4U;
      #line 1815 
      queue_event(smc,1,4);
    }
  #line 1818 
  if ((cmd & 256U) != 0U) 
    #line 1820 
    if ((unsigned int)(phy->mib)->fddiPORTPCMState == 8U) 
      #line 1821 
      if ((unsigned int)phy->tr_flag == 0U) {
        #line 1824 
        queue_event(smc,np + 5,1);
        #line 1825 
        return;
      }
  #line 1827 
  return;
}

#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smttimer.c"
void smt_timer_init(struct s_smc *smc);
#line 522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 522 
void hwt_init(struct s_smc *smc);
#line 523 
#line 523 
u_long hwt_read(struct s_smc *smc);
#line 524 
#line 524 
void hwt_stop(struct s_smc *smc);
#line 525 
#line 525 
void hwt_start(struct s_smc *smc, u_long time);
#line 542 
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smttimer.c"
void smt_timer_done(struct s_smc *smc);
#line 556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 556 
void timer_event(struct s_smc *smc, u_long token);
#line 573 
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smttimer.c"
void smt_force_irq(struct s_smc *smc);
#line 25 
#line 116 
static void timer_done(struct s_smc *smc, int restart);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smttimer.c"
void smt_timer_init(struct s_smc *smc)
{
  #line 29 
  smc->t.st_queue = (struct smt_timer *)0;
  #line 30 
  smc->t.st_fast.tm_active = (unsigned short)0U;
  #line 31 
  smc->t.st_fast.tm_next = (struct smt_timer *)0;
  #line 32 
  hwt_init(smc);
  #line 33 
  return;
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smttimer.c"
void smt_timer_stop(struct s_smc *smc, struct smt_timer *timer)
{
  #line 37 
  struct smt_timer **prev;
  #line 38 
  struct smt_timer *tm;
  #line 43 
  timer->tm_active = (unsigned short)0U;
  #line 44 
  if (smc->t.st_queue == timer && timer->tm_next == (struct smt_timer *)0) 
    #line 45 
    hwt_stop(smc);
  #line 47 
  prev = & smc->t.st_queue;
  #line 47 
  while (1) {
    #line 47 
    tm = *prev;
    #line 47 
    if (! (tm != (struct smt_timer *)0)) 
                                         #line 47 
                                         break;
    #line 48 
    if (tm == timer) {
      #line 49 
      *prev = tm->tm_next;
      #line 50 
      if (tm->tm_next != (struct smt_timer *)0) 
                                                #line 51 
                                                (tm->tm_next)->tm_delta += tm->tm_delta;
      #line 53 
      return;
    }
    #line 47 
    prev = & tm->tm_next;
  }
  #line 55 
  return;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smttimer.c"
void smt_timer_start(struct s_smc *smc, struct smt_timer *timer, u_long time, u_long token)
{
  #line 61 
  struct smt_timer **prev;
  #line 62 
  struct smt_timer *tm;
  #line 63 
  u_long delta = 0UL;
  #line 65 
  time /= 16UL;
  #line 66 
  if (time == 0UL) 
                   #line 67 
                   time = 1UL;
  #line 68 
  smt_timer_stop(smc,timer);
  #line 69 
  timer->tm_smc = smc;
  #line 70 
  timer->tm_token = token;
  #line 71 
  timer->tm_active = (unsigned short)1U;
  #line 72 
  if (smc->t.st_queue == (struct smt_timer *)0) {
    #line 73 
    smc->t.st_queue = timer;
    #line 74 
    timer->tm_next = (struct smt_timer *)0;
    #line 75 
    timer->tm_delta = time;
    #line 76 
    hwt_start(smc,time);
    #line 77 
    return;
  }
  #line 82 
  timer_done(smc,0);
  #line 87 
  delta = 0UL;
  #line 88 
  prev = & smc->t.st_queue;
  #line 88 
  while (1) {
    #line 88 
    tm = *prev;
    #line 88 
    if (! (tm != (struct smt_timer *)0)) 
                                         #line 88 
                                         break;
    #line 89 
    if (tm->tm_delta + delta > time) 
                                     #line 90 
                                     break;
    #line 92 
    delta = tm->tm_delta + delta;
    #line 88 
    prev = & tm->tm_next;
  }
  #line 95 
  *prev = timer;
  #line 96 
  timer->tm_next = tm;
  #line 97 
  timer->tm_delta = time - delta;
  #line 98 
  if (tm != (struct smt_timer *)0) 
                                   #line 99 
                                   tm->tm_delta -= timer->tm_delta;
  #line 103 
  hwt_start(smc,(smc->t.st_queue)->tm_delta);
  #line 104 
  return;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smttimer.c"
void smt_force_irq(struct s_smc *smc)
{
  #line 108 
  smt_timer_start(smc,& smc->t.st_fast,32UL,262146UL);
  #line 109 
  return;
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smttimer.c"
void smt_timer_done(struct s_smc *smc)
{
  #line 113 
  timer_done(smc,1);
  #line 114 
  return;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smttimer.c"
static void timer_done(struct s_smc *smc, int restart)
{
  #line 118 
  u_long delta;
  #line 119 
  struct smt_timer *tm;
  #line 120 
  struct smt_timer *next;
  #line 121 
  struct smt_timer **last;
  #line 122 
  int done = 0;
  #line 124 
  delta = hwt_read(smc);
  #line 125 
  last = & smc->t.st_queue;
  #line 126 
  tm = smc->t.st_queue;
  #line 127 
  while (tm != (struct smt_timer *)0 && done == 0) 
    #line 128 
    if (tm->tm_delta <= delta) {
      #line 129 
      tm->tm_active = (unsigned short)0U;
      #line 130 
      delta -= tm->tm_delta;
      #line 131 
      last = & tm->tm_next;
      #line 132 
      tm = tm->tm_next;
    }
    else {
      #line 135 
      tm->tm_delta -= delta;
      #line 136 
      delta = 0UL;
      #line 137 
      done = 1;
    }
  #line 140 
  *last = (struct smt_timer *)0;
  #line 141 
  next = smc->t.st_queue;
  #line 142 
  smc->t.st_queue = tm;
  #line 144 
  tm = next;
  #line 144 
  while (tm != (struct smt_timer *)0) {
    #line 145 
    next = tm->tm_next;
    #line 146 
    timer_event(smc,tm->tm_token);
    #line 144 
    tm = next;
  }
  #line 149 
  if (restart != 0 && smc->t.st_queue != (struct smt_timer *)0) 
                                                                #line 150 
                                                                hwt_start(smc,(smc->t.st_queue)->tm_delta);
  #line 151 
  return;
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 63 
char *strcpy(char *, char *);
#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smtdef.c"
void smt_fixup_mib(struct s_smc *smc);
#line 72 
#line 160 
static void smt_init_mib(struct s_smc *smc, int level);
#line 73 
#line 341 
static int set_min_max(int maxflag, u_long mib, u_long limit, u_long *oper);
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smtdef.c"
void smt_reset_defaults(struct s_smc *smc, int level)
{
  #line 80 
  struct smt_config *smt;
  #line 81 
  int i;
  #line 82 
  u_long smt_boot_time;
  #line 85 
  smt_init_mib(smc,level);
  #line 87 
  smc->os.smc_version = 1UL;
  #line 88 
  smt_boot_time = smt_get_time();
  #line 89 
  i = 0;
  #line 89 
  while (i <= 0) {
    #line 90 
    smc->sm.last_tok_time[i] = smt_boot_time;
    #line 89 
    i ++;
  }
  #line 91 
  smt = & smc->s;
  #line 92 
  smt->attach_s = (unsigned char)0U;
  #line 93 
  smt->build_ring_map = (unsigned char)1U;
  #line 94 
  smt->sas = (unsigned char)0U;
  #line 95 
  smt->numphys = (unsigned char)2U;
  #line 96 
  smt->pcm_tb_min = 5000UL;
  #line 97 
  smt->pcm_tb_max = 50000UL;
  #line 98 
  smt->pcm_c_min = 1600UL;
  #line 99 
  smt->pcm_t_out = 105000UL;
  #line 100 
  smt->pcm_tl_min = 30UL;
  #line 101 
  smt->pcm_lc_short = 55000UL;
  #line 102 
  smt->pcm_lc_medium = 520000UL;
  #line 103 
  smt->pcm_lc_long = 5050000UL;
  #line 104 
  smt->pcm_lc_extended = 50050000UL;
  #line 105 
  smt->pcm_t_next_9 = 210000UL;
  #line 106 
  smt->pcm_ns_max = 1310UL;
  #line 107 
  smt->ecm_i_max = 25000UL;
  #line 108 
  smt->ecm_in_max = 40000UL;
  #line 109 
  smt->ecm_td_min = 5000UL;
  #line 110 
  smt->ecm_test_done = 1000000UL;
  #line 111 
  smt->ecm_check_poll = 1000000UL;
  #line 112 
  smt->rmt_t_non_op = 1000000UL;
  #line 113 
  smt->rmt_t_stuck = 8000000UL;
  #line 114 
  smt->rmt_t_direct = 370000UL;
  #line 115 
  smt->rmt_t_jam = 370000UL;
  #line 116 
  smt->rmt_t_announce = 2500000UL;
  #line 117 
  smt->rmt_t_poll = 50000UL;
  #line 118 
  smt->rmt_dup_mac_behavior = 0UL;
  #line 119 
  smt->mac_d_max = 1617UL;
  #line 121 
  smt->lct_short = 1UL;
  #line 122 
  smt->lct_medium = 3UL;
  #line 123 
  smt->lct_long = 5UL;
  #line 124 
  smt->lct_extended = 50UL;
  #line 128 
  if (level == 0) {
    #line 129 
    smc->ess.sync_bw_available = (unsigned char)0U;
    #line 130 
    smc->mib.fddiESSPayload = 0UL;
    #line 131 
    smc->mib.fddiESSOverhead = 0UL;
    #line 132 
    smc->mib.fddiESSMaxTNeg = 18446744073709239116UL;
    #line 133 
    smc->mib.fddiESSMinSegmentSize = 1UL;
    #line 134 
    smc->mib.fddiESSCategory = 1UL;
    #line 135 
    smc->mib.fddiESSSynchTxMode = (short)0;
    #line 136 
    smc->ess.raf_act_timer_poll = (char)0;
    #line 137 
    smc->ess.timer_count = (char)7;
  }
  #line 139 
  smc->ess.local_sba_active = (unsigned char)0U;
  #line 140 
  smc->ess.sba_reply_pend = (Mbuf *)0;
  #line 147 
  if (level == 0) 
                  #line 148 
                  smc->hw.pci_fix_value = 0UL;
  #line 149 
  return;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smtdef.c"
static char man_data[32U] = {(char)'x', (char)'x', (char)'x', (char)'S', (char)'K', (char)'-', (char)'N', (char)'E', (char)'T', (char)' ', (char)'F', (char)'D', (char)'D', (char)'I', (char)' ', (char)'S', (char)'M', (char)'T', (char)' ', (char)'7', (char)'.', (char)'3', (char)' ', (char)'-', (char)' ', (char)'V', (char)'2', (char)'.', (char)'8', (char)'.', (char)'8'};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smtdef.c"
static void smt_init_mib(struct s_smc *smc, int level)
{
  #line 162 
  struct fddi_mib *mib;
  #line 163 
  struct fddi_mib_p *pm;
  #line 164 
  int port;
  #line 165 
  int path;
  #line 167 
  mib = & smc->mib;
  #line 168 
  if (level == 0) 
                  #line 173 
                  memset((void *)((char *)smc + 5344UL),0,3080UL);
  else {
    #line 179 
    mib->fddiSMTRemoteDisconnectFlag = (unsigned char)0U;
    #line 180 
    mib->fddiSMTPeerWrapFlag = (unsigned char)0U;
  }
  #line 183 
  mib->fddiSMTOpVersionId = (unsigned short)2U;
  #line 184 
  mib->fddiSMTHiVersionId = (unsigned short)2U;
  #line 185 
  mib->fddiSMTLoVersionId = (unsigned short)2U;
  #line 186 
  memcpy((void *)(& mib->fddiSMTManufacturerData),(void *)(& man_data),32UL);
  #line 187 
  if (level == 0) 
                  #line 188 
                  strcpy((char *)(& mib->fddiSMTUserData),(char *)"SK-NET FDDI V2.0 Userdata");
  #line 190 
  mib->fddiSMTMIBVersionId = (unsigned short)1U;
  #line 191 
  mib->fddiSMTMac_Ct = (unsigned char)1U;
  #line 192 
  mib->fddiSMTConnectionPolicy = (unsigned short)32801U;
  #line 198 
  mib->fddiSMTAvailablePaths = (unsigned char)3U;
  #line 200 
  mib->fddiSMTConfigCapabilities = (unsigned short)0U;
  #line 201 
  mib->fddiSMTTT_Notify = (unsigned short)10U;
  #line 202 
  mib->fddiSMTStatRptPolicy = (unsigned char)1U;
  #line 203 
  mib->fddiSMTTrace_MaxExpiration = 87500000UL;
  #line 204 
  mib->fddiSMTMACIndexes = (unsigned short)1U;
  #line 205 
  mib->fddiSMTStationStatus = (unsigned short)1U;
  #line 207 
  mib->m[0].fddiMACIndex = (unsigned short)1U;
  #line 208 
  mib->m[0].fddiMACFrameStatusFunctions = (unsigned short)0U;
  #line 209 
  mib->m[0].fddiMACRequestedPaths = (unsigned short)7U;
  #line 213 
  mib->m[0].fddiMACAvailablePaths = (unsigned char)1U;
  #line 214 
  mib->m[0].fddiMACCurrentPath = (unsigned short)3U;
  #line 215 
  mib->m[0].fddiMACT_MaxCapabilitiy = 18446744073707489116UL;
  #line 216 
  mib->m[0].fddiMACTVXCapabilitiy = 18446744073709486616UL;
  #line 217 
  if (level == 0) {
    #line 218 
    mib->m[0].fddiMACTvxValue = 18446744073709517866UL;
    #line 219 
    mib->m[0].fddiMACTvxValueMIB = 18446744073709517866UL;
    #line 220 
    mib->m[0].fddiMACT_Req = 18446744073707489116UL;
    #line 221 
    mib->m[0].fddiMACT_ReqMIB = 18446744073707489116UL;
    #line 222 
    mib->m[0].fddiMACT_Max = 18446744073707489116UL;
    #line 223 
    mib->m[0].fddiMACT_MaxMIB = 18446744073707489116UL;
    #line 224 
    mib->m[0].fddiMACT_Min = 18446744073709501616UL;
  }
  #line 226 
  mib->m[0].fddiMACHardwarePresent = (unsigned char)1U;
  #line 227 
  mib->m[0].fddiMACMA_UnitdataEnable = (unsigned char)1U;
  #line 228 
  mib->m[0].fddiMACFrameErrorThreshold = (unsigned short)1U;
  #line 229 
  mib->m[0].fddiMACNotCopiedThreshold = (unsigned short)1U;
  #line 233 
  path = 0;
  #line 233 
  while (path <= 1) {
    #line 234 
    mib->a[path].fddiPATHIndex = (unsigned short)((unsigned int)((unsigned short)path) + 1U);
    #line 235 
    if (level == 0) {
      #line 236 
      mib->a[path].fddiPATHTVXLowerBound = 18446744073709517866UL;
      #line 238 
      mib->a[path].fddiPATHT_MaxLowerBound = 18446744073707489116UL;
      #line 240 
      mib->a[path].fddiPATHMaxT_Req = 18446744073707489116UL;
    }
    #line 233 
    path ++;
  }
  #line 249 
  pm = (struct fddi_mib_p *)(& mib->p);
  #line 250 
  port = 0;
  #line 250 
  while (port <= 1) {
    #line 256 
    smc->y[port].mib = (struct fddi_mib_p *)0;
    #line 257 
    mib->fddiSMTPORTIndexes[port] = (unsigned short)((unsigned int)((unsigned short)port) + 1U);
    #line 259 
    pm->fddiPORTIndex = (unsigned short)((unsigned int)((unsigned short)port) + 1U);
    #line 260 
    pm->fddiPORTHardwarePresent = (unsigned char)1U;
    #line 261 
    if (level == 0) {
      #line 262 
      pm->fddiPORTLer_Alarm = (unsigned char)8U;
      #line 263 
      pm->fddiPORTLer_Cutoff = (unsigned char)7U;
    }
    #line 269 
    pm->fddiPORTRequestedPaths[1] = (unsigned char)0U;
    #line 270 
    pm->fddiPORTRequestedPaths[2] = (unsigned char)0U;
    #line 271 
    pm->fddiPORTRequestedPaths[3] = (unsigned char)0U;
    #line 272 
    pm->fddiPORTAvailablePaths = (unsigned char)1U;
    #line 273 
    pm->fddiPORTPMDClass = (unsigned short)0U;
    #line 274 
    pm ++;
    #line 250 
    port ++;
  }
  #line 277 
  smt_set_mac_opvalues(smc);
  #line 278 
  return;
}

#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smtdef.c"
int smt_set_mac_opvalues(struct s_smc *smc)
{
  #line 282 
  int st;
  #line 283 
  int st2;
  #line 285 
  st = set_min_max(1,smc->mib.m[0].fddiMACTvxValueMIB,smc->mib.a[0].fddiPATHTVXLowerBound,& smc->mib.m[0].fddiMACTvxValue);
  #line 290 
  st = set_min_max(0,smc->mib.m[0].fddiMACT_MaxMIB,
                  smc->mib.a[0].fddiPATHT_MaxLowerBound,
                  & smc->mib.m[0].fddiMACT_Max) | st;
  #line 291 
  st2 = set_min_max(0,smc->mib.m[0].fddiMACT_ReqMIB,smc->mib.a[0].fddiPATHMaxT_Req,& smc->mib.m[0].fddiMACT_Req);
  #line 293 
  st = st2 | st;
  #line 294 
  if (st2 != 0) ;
  #line 302 
  return st;
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smtdef.c"
void smt_fixup_mib(struct s_smc *smc)
{
  #line 321 
  switch ((int)smc->s.sas) {
    #line 322 
    case 1: 
            #line 322 
    ;
    #line 323 
    smc->mib.fddiSMTNonMaster_Ct = (unsigned char)1U;
    #line 324 
    break;
    #line 325 
    case 0: 
            #line 325 
    ;
    #line 326 
    smc->mib.fddiSMTNonMaster_Ct = (unsigned char)2U;
    #line 327 
    break;
  }
  #line 329 
  smc->mib.fddiSMTMaster_Ct = (unsigned char)0U;
  #line 330 
  return;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smtdef.c"
static int set_min_max(int maxflag, u_long mib, u_long limit, u_long *oper)
{
  #line 343 
  u_long old;
  #line 344 
  old = *oper;
  #line 345 
  if ((limit > mib) != maxflag) 
                                #line 346 
                                *oper = limit; else 
                                                    #line 348 
                                                    *oper = mib;
  #line 349 
  return *oper != old;
}

#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 484 
void hwt_restart(struct s_smc *smc);
#line 528 
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void sm_pm_bypass_req(struct s_smc *smc, int mode);
#line 529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void rmt_indication(struct s_smc *smc, int i);
#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
int sm_pm_bypass_present(struct s_smc *smc);
#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
int pcm_get_s_port(struct s_smc *smc);
#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 583 
void formac_tx_restart(struct s_smc *smc);
#line 589 
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void llc_recover_tx(struct s_smc *smc);
#line 596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void mac_do_pci_fix(struct s_smc *smc);
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 599 
u_long hwt_quick_read(struct s_smc *smc);
#line 600 
#line 600 
void hwt_wait_time(struct s_smc *smc, u_long start, long duration);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 29 
unsigned int ioread8(void *);
#line 50 
#line 50 
void iowrite8(u8, void *);
#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void init_board(struct s_smc *smc, u_char *mac_addr);
#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void mac1_irq(struct s_smc *smc, u_short stu, u_short stl);
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void plc1_irq(struct s_smc *smc);
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void plc2_irq(struct s_smc *smc);
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void timer_irq(struct s_smc *smc);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
u_char oem_id[13U] = {(unsigned char)'x', (unsigned char)'P', (unsigned char)'O', (unsigned char)'S', (unsigned char)'_', (unsigned char)'I', (unsigned char)'D', (unsigned char)':', (unsigned char)'x', (unsigned char)'x', (unsigned char)'x', (unsigned char)'x'};
#line 80 
#line 560 
static void smt_stop_watchdog(struct s_smc *smc);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
static void card_start(struct s_smc *smc)
{
  #line 87 
  int i;
  #line 89 
  u_char rev_id;
  #line 90 
  u_short word;
  #line 93 
  smt_stop_watchdog(smc);
  #line 99 
  iowrite16((unsigned short)0,smc->hw.iop + 1088U);
  #line 100 
  iowrite8((unsigned char)16,smc->hw.iop + 4U);
  #line 101 
  ;
  #line 101 
  hwt_wait_time(smc,hwt_quick_read(smc),125000L);
  #line 105 
  iowrite8((unsigned char)1,smc->hw.iop + 4U);
  #line 106 
  i = (int)ioread8(smc->hw.iop + 4U);
  #line 107 
  int tmp_2 = i;
  #line 108 
  iowrite8((unsigned char)2,smc->hw.iop + 4U);
  #line 113 
  iowrite8((unsigned char)2,smc->hw.iop + 7U);
  #line 114 
  word = (unsigned short)ioread16(smc->hw.iop + 390U);
  #line 115 
  iowrite16((unsigned short)((int)((unsigned int)word | 59648U)),smc->hw.iop + 390U);
  #line 116 
  iowrite8((unsigned char)1,smc->hw.iop + 7U);
  #line 123 
  iowrite8((unsigned char)40,smc->hw.iop + 4U);
  #line 131 
  rev_id = (unsigned char)ioread8(smc->hw.iop + 392U);
  #line 132 
  if (((int)rev_id & 240) == 32 || ((int)rev_id & 240) == 48) 
                                                              #line 133 
                                                              smc->hw.hw_is_64bit = 1; else 
                                                                    #line 135 
                                                                    smc->hw.hw_is_64bit = 0;
  #line 141 
  if (smc->hw.hw_is_64bit == 0) {
    #line 142 
    iowrite32(24U,smc->hw.iop + 544U);
    #line 143 
    iowrite32(24U,smc->hw.iop + 672U);
    #line 144 
    iowrite32(24U,smc->hw.iop + 736U);
  }
  #line 147 
  iowrite8((unsigned char)2,smc->hw.iop + 4U);
  #line 148 
  iowrite8((unsigned char)25,smc->hw.iop + 6U);
  #line 151 
  iowrite32(1875000000U,smc->hw.iop + 304U);
  #line 154 
  smc->hw.is_imask = 8368179UL;
  #line 155 
  smc->hw.hw_state = (unsigned short)0U;
  #line 157 
  iowrite32(0U,smc->hw.iop + 272U);
  #line 158 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void card_stop(struct s_smc *smc)
{
  #line 162 
  smt_stop_watchdog(smc);
  #line 163 
  smc->hw.mac_ring_is_up = (unsigned short)0U;
  #line 169 
  iowrite16((unsigned short)0,smc->hw.iop + 1088U);
  #line 170 
  iowrite8((unsigned char)16,smc->hw.iop + 4U);
  #line 171 
  ;
  #line 171 
  hwt_wait_time(smc,hwt_quick_read(smc),125000L);
  #line 175 
  iowrite8((unsigned char)1,smc->hw.iop + 4U);
  #line 176 
  iowrite8((unsigned char)2,smc->hw.iop + 4U);
  #line 177 
  iowrite8((unsigned char)21,smc->hw.iop + 6U);
  #line 178 
  smc->hw.hw_state = (unsigned short)0U;
  #line 179 
  return;
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void mac1_irq(struct s_smc *smc, u_short stu, u_short stl)
{
  #line 185 
  int restart_tx = 0;
  #line 186 
  again: 
         #line 186 
  ;
  #line 191 
  if (((int)stl & 1792) != 0) 
                              #line 194 
                              printk((char *)"\001",134,(char *)"ST1L.FM_SPCEPDx parity error");
  #line 199 
  if (((int)stl & 28672) != 0) 
                               #line 202 
                               printk((char *)"\001",133,(char *)"ST1L.FM_STBURx tx buffer underrun");
  #line 205 
  if (((int)stu & 38912) != 0 || ((int)stl & 3) != 0) {
    #line 210 
    formac_tx_restart(smc);
    #line 211 
    restart_tx = 1;
    #line 212 
    stu = (unsigned short)ioread16(smc->hw.iop + 1024U);
    #line 213 
    stl = (unsigned short)ioread16(smc->hw.iop + 1028U);
    #line 214 
    stu = (unsigned short)((unsigned int)stu & 65500U);
    #line 215 
    if ((unsigned int)stu != 0U || (unsigned int)stl != 0U) 
                                                            #line 216 
                                                            goto again;
  }
  #line 219 
  if (((int)stu & 3) != 0) 
                           #line 221 
                           restart_tx = 1;
  #line 224 
  if (restart_tx != 0) 
                       #line 225 
                       llc_restart_tx(smc);
  #line 226 
  return;
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void plc1_irq(struct s_smc *smc)
{
  #line 234 
  u_short st = (unsigned short)ioread16(smc->hw.iop + 988U);
  #line 236 
  plc_irq(smc,1,(unsigned int)st);
  #line 237 
  return;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void plc2_irq(struct s_smc *smc)
{
  #line 245 
  u_short st = (unsigned short)ioread16(smc->hw.iop + 1628U);
  #line 247 
  plc_irq(smc,0,(unsigned int)st);
  #line 248 
  return;
}

#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void timer_irq(struct s_smc *smc)
{
  #line 256 
  hwt_restart(smc);
  #line 257 
  smc->hw.t_stop = smc->hw.t_start;
  #line 258 
  smt_timer_done(smc);
  #line 259 
  return;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
int pcm_get_s_port(struct s_smc *smc)
{
  #line 267 
  return 0;
}

#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void read_address(struct s_smc *smc, u_char *mac_addr)
{
  #line 283 
  char ConnectorType;
  #line 284 
  char PmdType;
  #line 285 
  int i;
  #line 288 
  i = 0;
  #line 288 
  while (i <= 5) {
    #line 290 
    unsigned char ___x;
    #line 290 
    int tmp_2;
    {
      #line 290 
      unsigned char __x = (unsigned char)ioread8(smc->hw.iop + (unsigned long)(i + 256));
      #line 290 
      if (0 != 0) {
        #line 290 
        ___x = __x;
        #line 290 
        ___x = (unsigned char)(((int)___x >> 4) | ((int)___x << 4));
        #line 290 
        ___x = (unsigned char)((((int)___x >> 2) & 51) | (((int)___x << 2) & -52));
        #line 290 
        ___x = (unsigned char)((((int)___x >> 1) & 85) | (((int)___x << 1) & -86));
        #line 290 
        tmp_2 = (int)___x;
      }
      else {
        #line 290 
        tmp_2 = (int)__bitrev8((unsigned char)((int)__x));
      }
      }
    #line 289 
    smc->hw.fddi_phys_addr.a[i] = (unsigned char)tmp_2;
    #line 288 
    i ++;
  }
  #line 294 
  ConnectorType = (char)ioread8(smc->hw.iop + 264U);
  #line 295 
  PmdType = (char)ioread8(smc->hw.iop + 265U);
  #line 297 
  smc->y[1].pmd_type[0] = ((unsigned char)ConnectorType);
  #line 297 
  smc->y[0].pmd_type[0] = ((unsigned char)ConnectorType);
  #line 299 
  smc->y[1].pmd_type[1] = ((unsigned char)PmdType);
  #line 299 
  smc->y[0].pmd_type[1] = ((unsigned char)PmdType);
  #line 302 
  if (mac_addr != (u_char *)0U) {
    #line 303 
    i = 0;
    #line 303 
    while (i <= 5) {
      {
        #line 305 
        unsigned char ___x_0;
        #line 305 
        int tmp_10;
        #line 304 
        smc->hw.fddi_canon_addr.a[i] = *(mac_addr + (unsigned long)i);
        {
          #line 305 
          unsigned char __x_0 = *(mac_addr + (unsigned long)i);
          #line 305 
          if (0 != 0) {
            #line 305 
            ___x_0 = __x_0;
            #line 305 
            ___x_0 = (unsigned char)(((int)___x_0 >> 4) | ((int)___x_0 << 4));
            #line 305 
            ___x_0 = (unsigned char)((((int)___x_0 >> 2) & 51) | (((int)___x_0 << 2) & -52));
            #line 305 
            ___x_0 = (unsigned char)((((int)___x_0 >> 1) & 85) | (((int)___x_0 << 1) & -86));
            #line 305 
            tmp_10 = (int)___x_0;
          }
          else {
            #line 305 
            tmp_10 = (int)__bitrev8((unsigned char)((int)__x_0));
          }
          }
        #line 305 
        smc->hw.fddi_home_addr.a[i] = (unsigned char)tmp_10;
      }
      #line 303 
      i ++;
    }
    #line 307 
    return;
  }
  #line 309 
  smc->hw.fddi_home_addr = smc->hw.fddi_phys_addr;
  #line 311 
  i = 0;
  #line 311 
  while (i <= 5) {
    #line 313 
    int tmp_14;
    #line 313 
    unsigned char ___x_1;
    {
      #line 313 
      unsigned char __x_1 = smc->hw.fddi_phys_addr.a[i];
      #line 313 
      if (0 != 0) {
        #line 313 
        ___x_1 = __x_1;
        #line 313 
        ___x_1 = (unsigned char)(((int)___x_1 >> 4) | ((int)___x_1 << 4));
        #line 313 
        ___x_1 = (unsigned char)((((int)___x_1 >> 2) & 51) | (((int)___x_1 << 2) & -52));
        #line 313 
        ___x_1 = (unsigned char)((((int)___x_1 >> 1) & 85) | (((int)___x_1 << 1) & -86));
        #line 313 
        tmp_14 = (int)___x_1;
      }
      else {
        #line 313 
        tmp_14 = (int)__bitrev8((unsigned char)((int)__x_1));
      }
      }
    #line 312 
    smc->hw.fddi_canon_addr.a[i] = (unsigned char)tmp_14;
    #line 311 
    i ++;
  }
  #line 315 
  return;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void init_board(struct s_smc *smc, u_char *mac_addr)
{
  #line 322 
  card_start(smc);
  #line 323 
  read_address(smc,mac_addr);
  #line 325 
  if ((ioread8(smc->hw.iop + 5U) & 8U) == 0U) 
                                              #line 326 
                                              smc->s.sas = (unsigned char)1U; else 
                                                                    #line 328 
                                                                    smc->s.sas = (unsigned char)0U;
  #line 330 
  if ((ioread8(smc->hw.iop + 5U) & 4U) == 0U) 
                                              #line 331 
                                              smc->mib.fddiSMTBypassPresent = (unsigned char)0U; else 
                                                                    #line 334 
                                                                    smc->mib.fddiSMTBypassPresent = (unsigned char)1U;
  #line 335 
  return;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void sm_pm_bypass_req(struct s_smc *smc, int mode)
{
  #line 346 
  if ((unsigned int)smc->s.sas != 0U) 
                                      #line 347 
                                      return;
  #line 350 
  switch (mode) {
    #line 351 
    case 1: 
            #line 351 
    ;
    #line 352 
    iowrite8((unsigned char)2,smc->hw.iop + 5U);
    #line 353 
    break;
    #line 354 
    case 0: 
            #line 354 
    ;
    #line 355 
    iowrite8((unsigned char)1,smc->hw.iop + 5U);
    #line 356 
    break;
  }
  #line 358 
  return;
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
int sm_pm_bypass_present(struct s_smc *smc)
{
  #line 366 
  return (ioread8(smc->hw.iop + 5U) & 4U) != 0U;
}

#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void plc_clear_irq(struct s_smc *smc, int p)
{
  #line 374 
  return;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
static void led_indication(struct s_smc *smc, int led_event)
{
  #line 393 
  u_short led_state;
  #line 394 
  struct s_phy *phy;
  #line 395 
  struct fddi_mib_p *mib_a;
  #line 396 
  struct fddi_mib_p *mib_b;
  #line 398 
  phy = & smc->y[0];
  #line 399 
  mib_a = phy->mib;
  #line 400 
  phy = & smc->y[1];
  #line 401 
  mib_b = phy->mib;
  #line 404 
  led_state = (unsigned short)0U;
  #line 407 
  if (led_event == 17) 
                       #line 408 
                       led_state = (unsigned short)((unsigned int)led_state | 8U);
  else 
    #line 410 
    if (led_event == 16) 
                         #line 411 
                         led_state = (unsigned short)((unsigned int)led_state | 4U);
    else {
      #line 415 
      if ((unsigned int)mib_a->fddiPORTPCMState == 8U) 
                                                       #line 416 
                                                       led_state = (unsigned short)((unsigned int)led_state | 32U); else 
                                                                    #line 419 
                                                                    led_state = (unsigned short)((unsigned int)led_state | 16U);
      #line 423 
      if ((unsigned int)mib_b->fddiPORTPCMState == 8U) 
                                                       #line 424 
                                                       led_state = (unsigned short)((unsigned int)led_state | 2U); else 
                                                                    #line 427 
                                                                    led_state = (unsigned short)((unsigned int)led_state | 1U);
    }
  #line 431 
  iowrite8((unsigned char)((int)((unsigned char)led_state)),smc->hw.iop + 6U);
  #line 432 
  return;
}

#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void pcm_state_change(struct s_smc *smc, int plc, int p_state)
{
  #line 446 
  led_indication(smc,0);
  #line 447 
  return;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void rmt_indication(struct s_smc *smc, int i)
{
  #line 455 
  int tmp;
  #line 455 
  if (i != 0) 
              #line 455 
              tmp = 16; else 
                             #line 455 
                             tmp = 17;
  #line 455 
  ;
  #line 455 
  led_indication(smc,tmp);
  #line 456 
  return;
}

#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void llc_recover_tx(struct s_smc *smc)
{
  #line 473 
  return;
}

#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void driver_get_bia(struct s_smc *smc, struct fddi_addr *bia_addr)
{
  #line 539 
  int i;
  #line 541 
  i = 0;
  #line 541 
  while (i <= 5) {
    #line 542 
    unsigned char ___x;
    #line 542 
    int tmp_1;
    {
      #line 542 
      unsigned char __x = smc->hw.fddi_phys_addr.a[i];
      #line 542 
      if (0 != 0) {
        #line 542 
        ___x = __x;
        #line 542 
        ___x = (unsigned char)(((int)___x >> 4) | ((int)___x << 4));
        #line 542 
        ___x = (unsigned char)((((int)___x >> 2) & 51) | (((int)___x << 2) & -52));
        #line 542 
        ___x = (unsigned char)((((int)___x >> 1) & 85) | (((int)___x << 1) & -86));
        #line 542 
        tmp_1 = (int)___x;
      }
      else {
        #line 542 
        tmp_1 = (int)__bitrev8((unsigned char)((int)__x));
      }
      }
    #line 542 
    bia_addr->a[i] = (unsigned char)tmp_1;
    #line 541 
    i ++;
  }
  #line 544 
  return;
}

#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void smt_start_watchdog(struct s_smc *smc)
{
  #line 552 
  if ((int)smc->hw.wdog_used != 0) 
                                   #line 553 
                                   iowrite16((unsigned short)4,smc->hw.iop + 312U);
  #line 554 
  return;
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
static void smt_stop_watchdog(struct s_smc *smc)
{
  #line 566 
  if ((int)smc->hw.wdog_used != 0) 
                                   #line 567 
                                   iowrite16((unsigned short)2,smc->hw.iop + 312U);
  #line 568 
  return;
}

#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/drvfbi.c"
void mac_do_pci_fix(struct s_smc *smc)
{
  #line 579 
  return;
}

#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
void rmt(struct s_smc *smc, int event);
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
void rmt_init(struct s_smc *smc);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 512 
void sm_ma_control(struct s_smc *smc, int mode);
#line 513 
#line 513 
void sm_mac_check_beacon_claim(struct s_smc *smc);
#line 569 
#line 569 
int sm_mac_get_tx_state(struct s_smc *smc);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
#line 160 
static void rmt_fsm(struct s_smc *smc, int cmd);
#line 100 
#line 591 
static void start_rmt_timer0(struct s_smc *smc, u_long value, int event);
#line 101 
#line 601 
static void start_rmt_timer1(struct s_smc *smc, u_long value, int event);
#line 102 
#line 611 
static void start_rmt_timer2(struct s_smc *smc, u_long value, int event);
#line 103 
#line 621 
static void stop_rmt_timer0(struct s_smc *smc);
#line 104 
#line 631 
static void stop_rmt_timer1(struct s_smc *smc);
#line 105 
#line 641 
static void stop_rmt_timer2(struct s_smc *smc);
#line 106 
#line 525 
static void rmt_dup_actions(struct s_smc *smc);
#line 107 
#line 544 
static void rmt_reinsert_actions(struct s_smc *smc);
#line 108 
#line 578 
static void rmt_leave_actions(struct s_smc *smc);
#line 109 
#line 553 
static void rmt_new_dup_actions(struct s_smc *smc);
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
void rmt_init(struct s_smc *smc)
{
  #line 121 
  smc->mib.m[0].fddiMACRMTState = (unsigned short)16U;
  #line 122 
  smc->r.dup_addr_test = (unsigned char)0U;
  #line 123 
  smc->r.da_flag = (unsigned char)0U;
  #line 124 
  smc->mib.m[0].fddiMACMA_UnitdataAvailable = (unsigned char)0U;
  #line 125 
  smc->r.sm_ma_avail = (unsigned char)0U;
  #line 126 
  smc->r.loop_avail = (unsigned char)0U;
  #line 127 
  smc->r.bn_flag = (unsigned char)0U;
  #line 128 
  smc->r.jm_flag = (unsigned char)0U;
  #line 129 
  smc->r.no_flag = (unsigned char)1U;
  #line 130 
  return;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
void rmt(struct s_smc *smc, int event)
{
  #line 143 
  int state;
  #line 145 
  while (1) {
    #line 150 
    state = (int)smc->mib.m[0].fddiMACRMTState;
    #line 151 
    rmt_fsm(smc,event);
    #line 152 
    event = 0;
    #line 153 
    if (! ((int)smc->mib.m[0].fddiMACRMTState != state)) 
                                                         #line 145 
                                                         break;
  }
  #line 154 
  rmt_state_change(smc,(int)smc->mib.m[0].fddiMACRMTState);
  #line 155 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
static void rmt_fsm(struct s_smc *smc, int cmd)
{
  #line 165 
  if ((((unsigned int)smc->r.rm_join == 0U && (unsigned int)smc->r.rm_loop == 0U) && (unsigned int)smc->mib.m[0].fddiMACRMTState != 16U) && (unsigned int)smc->mib.m[0].fddiMACRMTState != 0U) {
    #line 168 
    smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 32U));
    #line 168 
    ;
    #line 168 
    ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 32U)));
    #line 169 
    rmt_indication(smc,0);
    #line 170 
    smc->mib.m[0].fddiMACRMTState = (unsigned short)16U;
    #line 171 
    return;
  }
  #line 174 
  switch ((int)smc->mib.m[0].fddiMACRMTState) {
    #line 175 
    case 16: 
             #line 175 
    ;
    #line 176 
    stop_rmt_timer0(smc);
    #line 177 
    stop_rmt_timer1(smc);
    #line 178 
    stop_rmt_timer2(smc);
    #line 183 
    sm_ma_control(smc,5);
    #line 184 
    smc->mib.m[0].fddiMACMA_UnitdataAvailable = (unsigned char)0U;
    #line 185 
    smc->r.loop_avail = (unsigned char)0U;
    #line 186 
    smc->r.sm_ma_avail = (unsigned char)0U;
    #line 187 
    smc->r.no_flag = (unsigned char)1U;
    #line 189 
    smc->mib.m[0].fddiMACRMTState = (unsigned short)((unsigned int)smc->mib.m[0].fddiMACRMTState & 65519U);
    #line 190 
    break;
    #line 191 
    case 0: 
            #line 191 
    ;
    #line 193 
    if ((unsigned int)smc->r.rm_join != 0U || (unsigned int)smc->r.rm_loop != 0U) {
      #line 200 
      sm_ma_control(smc,0);
      #line 201 
      smc->mib.m[0].fddiMACRMTState = (unsigned short)17U;
      #line 202 
      break;
    }
    #line 204 
    break;
    #line 205 
    case 17: 
             #line 205 
    ;
    #line 206 
    start_rmt_timer0(smc,smc->s.rmt_t_non_op,12);
    #line 207 
    stop_rmt_timer1(smc);
    #line 208 
    stop_rmt_timer2(smc);
    #line 209 
    sm_ma_control(smc,1);
    #line 211 
    smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 32U));
    #line 211 
    ;
    #line 211 
    ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 32U)));
    #line 212 
    smc->r.sm_ma_avail = (unsigned char)0U;
    #line 213 
    rmt_indication(smc,0);
    #line 214 
    smc->mib.m[0].fddiMACRMTState = (unsigned short)((unsigned int)smc->mib.m[0].fddiMACRMTState & 65519U);
    #line 215 
    break;
    #line 216 
    case 1: 
            #line 216 
    ;
    #line 218 
    if (cmd == 1) {
      #line 219 
      smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 2U));
      #line 219 
      ;
      #line 219 
      ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 2U)));
      #line 220 
      smc->mib.m[0].fddiMACRMTState = (unsigned short)18U;
      #line 221 
      break;
    }
    else 
      #line 224 
      if (cmd == 12) {
        #line 225 
        smc->r.bn_flag = (unsigned char)0U;
        #line 226 
        smc->r.no_flag = (unsigned char)1U;
        #line 227 
        smc->mib.m[0].fddiMACRMTState = (unsigned short)19U;
        #line 228 
        break;
      }
    #line 230 
    break;
    #line 231 
    case 18: 
             #line 231 
    ;
    #line 232 
    stop_rmt_timer0(smc);
    #line 233 
    stop_rmt_timer1(smc);
    #line 234 
    stop_rmt_timer2(smc);
    #line 235 
    smc->r.no_flag = (unsigned char)0U;
    #line 236 
    if ((unsigned int)smc->r.rm_loop != 0U) 
                                            #line 237 
                                            smc->r.loop_avail = (unsigned char)1U;
    #line 238 
    if ((unsigned int)smc->r.rm_join != 0U) {
      #line 239 
      smc->r.sm_ma_avail = (unsigned char)1U;
      #line 240 
      if ((unsigned int)smc->mib.m[0].fddiMACMA_UnitdataEnable != 0U) 
        #line 241 
        smc->mib.m[0].fddiMACMA_UnitdataAvailable = (unsigned char)1U; else 
                                                                    #line 243 
                                                                    smc->mib.m[0].fddiMACMA_UnitdataAvailable = (unsigned char)0U;
    }
    #line 246 
    smc->srf.ring_status = (unsigned short)((unsigned int)smc->srf.ring_status & 65503U);
    #line 246 
    ;
    #line 246 
    ring_status_indication(smc,(unsigned long)smc->srf.ring_status);
    #line 247 
    smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 2U));
    #line 247 
    ;
    #line 247 
    ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 2U)));
    #line 248 
    rmt_indication(smc,1);
    #line 249 
    smt_stat_counter(smc,0);
    #line 250 
    smc->mib.m[0].fddiMACRMTState = (unsigned short)((unsigned int)smc->mib.m[0].fddiMACRMTState & 65519U);
    #line 251 
    break;
    #line 252 
    case 2: 
            #line 252 
    ;
    #line 254 
    if (cmd == 2) {
      #line 255 
      smc->mib.m[0].fddiMACMA_UnitdataAvailable = (unsigned char)0U;
      #line 256 
      smc->r.loop_avail = (unsigned char)0U;
      #line 257 
      smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 2U));
      #line 257 
      ;
      #line 257 
      ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 2U)));
      #line 258 
      smc->mib.m[0].fddiMACRMTState = (unsigned short)17U;
      #line 259 
      break;
    }
    else 
      #line 262 
      if (cmd == 11) 
        #line 263 
        if ((unsigned int)smc->mib.m[0].fddiMACMA_UnitdataEnable != 0U) 
          #line 264 
          smc->mib.m[0].fddiMACMA_UnitdataAvailable = (unsigned char)1U; else 
                                                                    #line 266 
                                                                    smc->mib.m[0].fddiMACMA_UnitdataAvailable = (unsigned char)0U;
      else 
        #line 269 
        if ((unsigned int)smc->r.dup_addr_test == 2U) {
          #line 270 
          smc->mib.m[0].fddiMACMA_UnitdataAvailable = (unsigned char)0U;
          #line 271 
          smc->r.loop_avail = (unsigned char)0U;
          #line 272 
          smc->r.da_flag = (unsigned char)1U;
          #line 273 
          smc->mib.m[0].fddiMACRMTState = (unsigned short)21U;
          #line 274 
          break;
        }
    #line 276 
    break;
    #line 277 
    case 19: 
             #line 277 
    ;
    #line 278 
    start_rmt_timer0(smc,smc->s.mac_d_max * 2UL,16);
    #line 279 
    start_rmt_timer1(smc,smc->s.rmt_t_stuck,13);
    #line 280 
    start_rmt_timer2(smc,smc->s.rmt_t_poll,17);
    #line 281 
    sm_mac_check_beacon_claim(smc);
    #line 283 
    smc->mib.m[0].fddiMACRMTState = (unsigned short)((unsigned int)smc->mib.m[0].fddiMACRMTState & 65519U);
    #line 284 
    break;
    #line 285 
    case 3: 
            #line 285 
    ;
    #line 286 
    if (cmd == 17) {
      #line 287 
      start_rmt_timer2(smc,smc->s.rmt_t_poll,17);
      #line 288 
      sm_mac_check_beacon_claim(smc);
      #line 289 
      break;
    }
    #line 291 
    if (cmd == 16) 
                   #line 292 
                   smc->r.timer0_exp = (unsigned char)1U;
    #line 300 
    if (cmd == 18) 
                   #line 301 
                   start_rmt_timer0(smc,smc->s.mac_d_max * 2UL,16);
    #line 306 
    if (cmd == 1) {
      #line 307 
      smc->mib.m[0].fddiMACRMTState = (unsigned short)18U;
      #line 308 
      break;
    }
    else 
      #line 311 
      if ((unsigned int)cmd + 4294967293U <= 1U && (unsigned int)smc->r.bn_flag != 0U) 
        #line 313 
        smc->r.bn_flag = (unsigned char)0U;
      else 
        #line 316 
        if (cmd == 6 && (unsigned int)smc->r.bn_flag == 0U) {
          #line 317 
          int tx;
          #line 323 
          tx = sm_mac_get_tx_state(smc);
          #line 323 
          if (tx == 4) 
                       #line 323 
                       goto _LOR;
          else 
            #line 323 
            if (tx == 5) {
              #line 323 
              _LOR: {
                      #line 325 
                      smc->r.bn_flag = (unsigned char)1U;
                      #line 332 
                      start_rmt_timer1(smc,smc->s.rmt_t_stuck,13);
                    }
            }
        }
        else 
          #line 345 
          if (cmd == 5 && (unsigned int)smc->r.timer0_exp != 0U) {
            #line 346 
            rmt_new_dup_actions(smc);
            #line 347 
            smc->mib.m[0].fddiMACRMTState = (unsigned short)20U;
            #line 348 
            break;
          }
          else 
            #line 351 
            if (cmd == 3 && (unsigned int)smc->r.timer0_exp != 0U) {
              #line 352 
              rmt_new_dup_actions(smc);
              #line 353 
              smc->mib.m[0].fddiMACRMTState = (unsigned short)20U;
              #line 354 
              break;
            }
            else 
              #line 357 
              if (cmd == 7) {
                #line 358 
                rmt_new_dup_actions(smc);
                #line 359 
                smc->mib.m[0].fddiMACRMTState = (unsigned short)20U;
                #line 360 
                break;
              }
              else 
                #line 363 
                if ((cmd == 13 && (unsigned int)smc->r.rm_join != 0U) && (unsigned int)smc->r.bn_flag != 0U) {
                  #line 365 
                  smc->mib.m[0].fddiMACRMTState = (unsigned short)22U;
                  #line 366 
                  break;
                }
    #line 368 
    break;
    #line 369 
    case 20: 
             #line 369 
    ;
    #line 370 
    start_rmt_timer0(smc,smc->s.rmt_t_announce,14);
    #line 371 
    start_rmt_timer1(smc,smc->s.rmt_t_stuck,13);
    #line 372 
    start_rmt_timer2(smc,smc->s.rmt_t_poll,17);
    #line 373 
    sm_mac_check_beacon_claim(smc);
    #line 375 
    smc->mib.m[0].fddiMACRMTState = (unsigned short)((unsigned int)smc->mib.m[0].fddiMACRMTState & 65519U);
    #line 376 
    break;
    #line 377 
    case 4: 
            #line 377 
    ;
    #line 378 
    if (cmd == 17) {
      #line 379 
      start_rmt_timer2(smc,smc->s.rmt_t_poll,17);
      #line 380 
      sm_mac_check_beacon_claim(smc);
      #line 381 
      break;
    }
    #line 384 
    if ((unsigned int)smc->r.da_flag == 0U) {
      #line 385 
      smc->mib.m[0].fddiMACRMTState = (unsigned short)17U;
      #line 386 
      break;
    }
    else 
      #line 389 
      if ((unsigned int)cmd + 4294967293U <= 1U && (unsigned int)smc->r.bn_flag != 0U) 
        #line 391 
        smc->r.bn_flag = (unsigned char)0U;
      else 
        #line 394 
        if (cmd == 6 && (unsigned int)smc->r.bn_flag == 0U) {
          #line 395 
          int tx_0;
          #line 401 
          tx_0 = sm_mac_get_tx_state(smc);
          #line 401 
          if (tx_0 == 4) 
                         #line 401 
                         goto _LOR_0;
          else 
            #line 401 
            if (tx_0 == 5) {
              #line 401 
              _LOR_0: {
                        #line 403 
                        smc->r.bn_flag = (unsigned char)1U;
                        #line 410 
                        start_rmt_timer1(smc,smc->s.rmt_t_stuck,13);
                      }
            }
        }
        else 
          #line 423 
          if (cmd == 14 && (unsigned int)smc->r.bn_flag == 0U) 
                                                               #line 424 
                                                               rmt_dup_actions(smc);
          else 
            #line 427 
            if (cmd == 1) {
              #line 428 
              smc->r.no_flag = (unsigned char)0U;
              #line 429 
              smc->mib.m[0].fddiMACRMTState = (unsigned short)21U;
              #line 430 
              break;
            }
            else 
              #line 433 
              if ((cmd == 13 && (unsigned int)smc->r.rm_join != 0U) && (unsigned int)smc->r.bn_flag != 0U) {
                #line 435 
                smc->mib.m[0].fddiMACRMTState = (unsigned short)22U;
                #line 436 
                break;
              }
    #line 438 
    break;
    #line 439 
    case 21: 
             #line 439 
    ;
    #line 440 
    stop_rmt_timer0(smc);
    #line 441 
    stop_rmt_timer1(smc);
    #line 442 
    stop_rmt_timer2(smc);
    #line 444 
    smc->mib.m[0].fddiMACRMTState = (unsigned short)((unsigned int)smc->mib.m[0].fddiMACRMTState & 65519U);
    #line 445 
    break;
    #line 446 
    case 5: 
            #line 446 
    ;
    #line 448 
    if ((unsigned int)smc->r.dup_addr_test == 1U) {
      #line 449 
      smc->r.da_flag = (unsigned char)0U;
      #line 450 
      smc->mib.m[0].fddiMACRMTState = (unsigned short)18U;
      #line 451 
      break;
    }
    else 
      #line 454 
      if (cmd == 2) {
        #line 455 
        smc->r.jm_flag = (unsigned char)0U;
        #line 456 
        smc->r.bn_flag = (unsigned char)0U;
        #line 457 
        smc->mib.m[0].fddiMACRMTState = (unsigned short)20U;
        #line 458 
        break;
      }
    #line 460 
    break;
    #line 461 
    case 22: 
             #line 461 
    ;
    #line 462 
    start_rmt_timer0(smc,smc->s.rmt_t_direct,15);
    #line 463 
    stop_rmt_timer1(smc);
    #line 464 
    start_rmt_timer2(smc,smc->s.rmt_t_poll,17);
    #line 465 
    sm_ma_control(smc,3);
    #line 466 
    smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 4096U));
    #line 466 
    ;
    #line 466 
    ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 4096U)));
    #line 468 
    smc->mib.m[0].fddiMACRMTState = (unsigned short)((unsigned int)smc->mib.m[0].fddiMACRMTState & 65519U);
    #line 469 
    break;
    #line 470 
    case 6: 
            #line 470 
    ;
    #line 472 
    if (cmd == 17) {
      #line 473 
      start_rmt_timer2(smc,smc->s.rmt_t_poll,17);
      #line 474 
      sm_mac_check_beacon_claim(smc);
      #line 483 
      break;
    }
    #line 485 
    if ((unsigned int)cmd + 4294967293U <= 1U && (unsigned int)smc->r.da_flag == 0U) {
      #line 487 
      smc->r.bn_flag = (unsigned char)0U;
      #line 488 
      smc->mib.m[0].fddiMACRMTState = (unsigned short)19U;
      #line 489 
      break;
    }
    else 
      #line 492 
      if ((unsigned int)cmd + 4294967293U <= 1U && (unsigned int)smc->r.da_flag != 0U) {
        #line 494 
        smc->r.bn_flag = (unsigned char)0U;
        #line 495 
        smc->mib.m[0].fddiMACRMTState = (unsigned short)20U;
        #line 496 
        break;
      }
      else 
        #line 499 
        if (cmd == 15) {
          #line 500 
          smc->mib.m[0].fddiMACRMTState = (unsigned short)23U;
          #line 501 
          break;
        }
    #line 503 
    break;
    #line 504 
    case 23: 
             #line 504 
    ;
    #line 505 
    stop_rmt_timer0(smc);
    #line 506 
    stop_rmt_timer1(smc);
    #line 507 
    stop_rmt_timer2(smc);
    #line 508 
    smc->e.trace_prop |= 4UL;
    #line 509 
    queue_event(smc,1,3);
    #line 511 
    smc->mib.m[0].fddiMACRMTState = (unsigned short)((unsigned int)smc->mib.m[0].fddiMACRMTState & 65519U);
    #line 512 
    break;
    #line 513 
    case 7: 
            #line 513 
    ;
    #line 514 
    break;
    #line 515 
    default: 
             #line 515 
    ;
    #line 516 
    printk((char *)"\001",122,(char *)"RMT : invalid state");
    #line 517 
    break;
  }
  #line 519 
  return;
}

#line 525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
static void rmt_dup_actions(struct s_smc *smc)
{
  #line 527 
  if (! ((unsigned int)smc->r.jm_flag != 0U)) 
    #line 530 
    if (smc->s.rmt_dup_mac_behavior != 0UL) {
      #line 531 
      printk((char *)"\001",138,(char *)"RMT: duplicate MAC address detected. Ring NOT left!");
      #line 532 
      rmt_reinsert_actions(smc);
    }
    else {
      #line 535 
      printk((char *)"\001",135,(char *)"RMT: duplicate MAC address detected. Ring left!");
      #line 536 
      rmt_leave_actions(smc);
    }
  #line 538 
  return;
}

#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
static void rmt_reinsert_actions(struct s_smc *smc)
{
  #line 546 
  queue_event(smc,1,2);
  #line 547 
  queue_event(smc,1,1);
  #line 548 
  return;
}

#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
static void rmt_new_dup_actions(struct s_smc *smc)
{
  #line 555 
  smc->r.da_flag = (unsigned char)1U;
  #line 556 
  smc->r.bn_flag = (unsigned char)0U;
  #line 557 
  smc->r.jm_flag = (unsigned char)0U;
  #line 564 
  if (smc->s.rmt_dup_mac_behavior != 0UL) {
    #line 565 
    printk((char *)"\001",138,(char *)"RMT: duplicate MAC address detected. Ring NOT left!");
    #line 566 
    rmt_reinsert_actions(smc);
  }
  else {
    #line 569 
    printk((char *)"\001",135,(char *)"RMT: duplicate MAC address detected. Ring left!");
    #line 570 
    rmt_leave_actions(smc);
  }
  #line 572 
  return;
}

#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
static void rmt_leave_actions(struct s_smc *smc)
{
  #line 580 
  queue_event(smc,1,2);
  #line 581 
  return;
}

#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
static void start_rmt_timer0(struct s_smc *smc, u_long value, int event)
{
  #line 593 
  smc->r.timer0_exp = (unsigned char)0U;
  #line 594 
  smt_timer_start(smc,& smc->r.rmt_timer0,value,(unsigned long)(event | 196608));
  #line 595 
  return;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
static void start_rmt_timer1(struct s_smc *smc, u_long value, int event)
{
  #line 603 
  smc->r.timer1_exp = (unsigned char)0U;
  #line 604 
  smt_timer_start(smc,& smc->r.rmt_timer1,value,(unsigned long)(event | 196608));
  #line 605 
  return;
}

#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
static void start_rmt_timer2(struct s_smc *smc, u_long value, int event)
{
  #line 613 
  smc->r.timer2_exp = (unsigned char)0U;
  #line 614 
  smt_timer_start(smc,& smc->r.rmt_timer2,value,(unsigned long)(event | 196608));
  #line 615 
  return;
}

#line 621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
static void stop_rmt_timer0(struct s_smc *smc)
{
  #line 623 
  if ((unsigned int)smc->r.rmt_timer0.tm_active != 0U) 
                                                       #line 624 
                                                       smt_timer_stop(smc,& smc->r.rmt_timer0);
  #line 625 
  return;
}

#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
static void stop_rmt_timer1(struct s_smc *smc)
{
  #line 633 
  if ((unsigned int)smc->r.rmt_timer1.tm_active != 0U) 
                                                       #line 634 
                                                       smt_timer_stop(smc,& smc->r.rmt_timer1);
  #line 635 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/rmt.c"
static void stop_rmt_timer2(struct s_smc *smc)
{
  #line 643 
  if ((unsigned int)smc->r.rmt_timer2.tm_active != 0U) 
                                                       #line 644 
                                                       smt_timer_stop(smc,& smc->r.rmt_timer2);
  #line 645 
  return;
}

#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 557 
void ev_dispatcher(struct s_smc *smc);
#line 577 
#line 577 
void mac_set_rx_mode(struct s_smc *smc, int mode);
#line 584 
#line 1037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void process_receive(struct s_smc *smc);
#line 585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void init_driver_fplus(struct s_smc *smc);
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 586 
void rtm_irq(struct s_smc *smc);
#line 598 
#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void mac_drv_repair_descr(struct s_smc *smc);
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/smc.h"
#line 471 
int init_fplus(struct s_smc *smc);
#line 475 
#line 475 
void mac2_irq(struct s_smc *smc, u_short code_s2u, u_short code_s2l);
#line 476 
#line 476 
void mac3_irq(struct s_smc *smc, u_short code_s3u, u_short code_s3l);
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
#line 1730 
static void queue_llc_rx(struct s_smc *smc, Mbuf *mb);
#line 75 
#line 1376 
static void smt_to_llc(struct s_smc *smc, Mbuf *mb);
#line 76 
#line 351 
static void init_txd_ring(struct s_smc *smc);
#line 77 
#line 388 
static void init_rxd_ring(struct s_smc *smc);
#line 78 
#line 1770 
static void queue_txd_mb(struct s_smc *smc, Mbuf *mb);
#line 79 
#line 320 
static u_long init_descr_ring(struct s_smc *smc, union s_fp_descr *start, int count);
#line 81 
#line 582 
static u_long repair_txd_ring(struct s_smc *smc, struct s_smt_tx_queue *queue);
#line 82 
#line 634 
static u_long repair_rxd_ring(struct s_smc *smc, struct s_smt_rx_queue *queue);
#line 83 
#line 1754 
static Mbuf *get_llc_rx(struct s_smc *smc);
#line 84 
#line 1787 
static Mbuf *get_txd_mb(struct s_smc *smc);
#line 85 
#line 1937 
static void mac_drv_clear_txd(struct s_smc *smc);
#line 140 
#line 418 
void init_fddi_driver(struct s_smc *smc, u_char *mac_addr);
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
u_int mac_drv_check_space(void)
{
  #line 237 
  return 20032U;
}

#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
int mac_drv_init(struct s_smc *smc)
{
  #line 267 
  smc->os.hwm.descr_p = (union s_fp_descr *)mac_drv_get_desc_mem(smc,1920U);
  #line 267 
  if ((union s_fp_descr *)mac_drv_get_desc_mem(smc,1920U) == (union s_fp_descr *)0) 
    #line 270 
    return 1;
  #line 280 
  smc->os.hwm.mbuf_pool.mb_start = (Mbuf *)mac_drv_get_space(smc,18112U);
  #line 280 
  if ((Mbuf *)mac_drv_get_space(smc,18112U) == (Mbuf *)0) 
                                                          #line 282 
                                                          return 1;
  #line 293 
  return 0;
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void init_driver_fplus(struct s_smc *smc)
{
  #line 307 
  smc->hw.fp.mdr2init = (unsigned short)35203U;
  #line 310 
  smc->hw.fp.mdr2init = (unsigned short)((unsigned int)smc->hw.fp.mdr2init | 12288U);
  #line 312 
  smc->hw.fp.mdr3init = (unsigned short)129U;
  #line 316 
  smc->hw.fp.frselreg_init = (unsigned short)49152U;
  #line 317 
  return;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
static u_long init_descr_ring(struct s_smc *smc, union s_fp_descr *start, int count)
{
  #line 324 
  int i;
  #line 325 
  union s_fp_descr *d1;
  #line 326 
  union s_fp_descr *d2;
  #line 327 
  u_long phys;
  #line 330 
  i = count + -1;
  #line 330 
  d1 = start;
  #line 330 
  while (i != 0) {
    #line 331 
    d2 = d1;
    #line 332 
    d1 ++;
    #line 333 
    d2->r.rxd_rbctrl = 5570560U;
    #line 334 
    d2->r.rxd_next = & d1->r;
    #line 335 
    phys = mac_drv_virt2phys(smc,(void *)d1);
    #line 336 
    d2->r.rxd_nrdadr = (unsigned int)phys;
    #line 330 
    i --;
  }
  #line 339 
  d1->r.rxd_rbctrl = 5570560U;
  #line 340 
  d1->r.rxd_next = & start->r;
  #line 341 
  phys = mac_drv_virt2phys(smc,(void *)start);
  #line 342 
  d1->r.rxd_nrdadr = (unsigned int)phys;
  #line 344 
  i = count;
  #line 344 
  d1 = start;
  #line 344 
  while (i != 0) {
    #line 346 
    d1 ++;
    #line 344 
    i --;
  }
  #line 348 
  return phys;
}

#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
static void init_txd_ring(struct s_smc *smc)
{
  #line 353 
  struct s_smt_fp_txd *ds;
  #line 354 
  struct s_smt_tx_queue *queue;
  #line 355 
  u_long phys;
  #line 360 
  ds = (struct s_smt_fp_txd *)((char *)smc->os.hwm.descr_p + 528UL);
  #line 362 
  queue = smc->hw.fp.tx[1];
  #line 364 
  init_descr_ring(smc,(union s_fp_descr *)ds,14);
  #line 366 
  phys = (unsigned long)ds->txd_ntdadr;
  #line 367 
  ds ++;
  #line 368 
  queue->tx_curr_get = ds;
  #line 368 
  queue->tx_curr_put = ds;
  #line 369 
  ds --;
  #line 370 
  queue->tx_free = (unsigned short)14U;
  #line 371 
  queue->tx_used = (unsigned short)0U;
  #line 372 
  iowrite32((unsigned int)phys,smc->hw.iop + 656U);
  #line 374 
  ds = (struct s_smt_fp_txd *)((char *)ds + 672UL);
  #line 376 
  queue = smc->hw.fp.tx[0];
  #line 378 
  init_descr_ring(smc,(union s_fp_descr *)ds,14);
  #line 380 
  phys = (unsigned long)ds->txd_ntdadr;
  #line 381 
  ds ++;
  #line 382 
  queue->tx_curr_get = ds;
  #line 382 
  queue->tx_curr_put = ds;
  #line 383 
  queue->tx_free = (unsigned short)14U;
  #line 384 
  queue->tx_used = (unsigned short)0U;
  #line 385 
  iowrite32((unsigned int)phys,smc->hw.iop + 720U);
  #line 386 
  return;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
static void init_rxd_ring(struct s_smc *smc)
{
  #line 390 
  struct s_smt_fp_rxd *ds;
  #line 391 
  struct s_smt_rx_queue *queue;
  #line 392 
  u_long phys;
  #line 397 
  ds = (struct s_smt_fp_rxd *)smc->os.hwm.descr_p;
  #line 398 
  queue = smc->hw.fp.rx[0];
  #line 400 
  init_descr_ring(smc,(union s_fp_descr *)ds,11);
  #line 402 
  phys = (unsigned long)ds->rxd_nrdadr;
  #line 403 
  ds ++;
  #line 404 
  queue->rx_curr_get = ds;
  #line 404 
  queue->rx_curr_put = ds;
  #line 405 
  queue->rx_free = (unsigned short)11U;
  #line 406 
  queue->rx_used = (unsigned short)0U;
  #line 407 
  iowrite32((unsigned int)phys,smc->hw.iop + 528U);
  #line 408 
  return;
}

#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void init_fddi_driver(struct s_smc *smc, u_char *mac_addr)
{
  #line 420 
  Mbuf *mb;
  #line 421 
  int i;
  #line 423 
  init_board(smc,mac_addr);
  #line 424 
  init_fplus(smc);
  #line 430 
  mb = smc->os.hwm.mbuf_pool.mb_start;
  #line 431 
  smc->os.hwm.mbuf_pool.mb_free = (Mbuf *)0;
  #line 432 
  i = 0;
  #line 432 
  while (i <= 3) {
    #line 433 
    mb->sm_use_count = 1;
    #line 434 
    smt_free_mbuf(smc,mb);
    #line 435 
    mb ++;
    #line 432 
    i ++;
  }
  #line 453 
  smc->os.hwm.llc_rx_tail = ((Mbuf *)0);
  #line 453 
  smc->os.hwm.llc_rx_pipe = ((Mbuf *)0);
  #line 454 
  smc->os.hwm.txd_tx_tail = ((Mbuf *)0);
  #line 454 
  smc->os.hwm.txd_tx_pipe = ((Mbuf *)0);
  #line 455 
  smc->os.hwm.pass_DB = ((unsigned short)0U);
  #line 455 
  smc->os.hwm.pass_NSA = ((unsigned short)0U);
  #line 455 
  smc->os.hwm.pass_SMT = ((unsigned short)0U);
  #line 456 
  smc->os.hwm.pass_llc_promisc = (unsigned short)1U;
  #line 457 
  smc->os.hwm.queued_txd_mb = 0;
  #line 457 
  smc->os.hwm.queued_rx_frames = 0;
  #line 458 
  smc->os.hwm.detec_count = 0;
  #line 459 
  smc->os.hwm.rx_break = 0;
  #line 460 
  smc->os.hwm.rx_len_error = 0UL;
  #line 461 
  smc->os.hwm.isr_flag = 0;
  #line 466 
  i = (int)((long)16U - ((long)smc->os.hwm.descr_p & (long)15U));
  #line 467 
  if (i != 16) 
               #line 469 
               smc->os.hwm.descr_p = (union s_fp_descr *)((char *)smc->os.hwm.descr_p + (unsigned long)i);
  #line 474 
  init_txd_ring(smc);
  #line 475 
  init_rxd_ring(smc);
  #line 476 
  mac_drv_fill_rxd(smc);
  #line 478 
  init_plc(smc);
  #line 479 
  return;
}

#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
Mbuf *smt_get_mbuf(struct s_smc *smc)
{
  #line 484 
  register Mbuf *mb;
  #line 487 
  mb = smc->os.hwm.mbuf_pool.mb_free;
  #line 491 
  if (mb != (Mbuf *)0) {
    #line 493 
    smc->os.hwm.mbuf_pool.mb_free = mb->m_next;
    #line 497 
    mb->m_off = (short)8;
    #line 498 
    mb->sm_use_count = 1;
  }
  #line 501 
  return mb;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void smt_free_mbuf(struct s_smc *smc, Mbuf *mb)
{
  #line 507 
  if (mb != (Mbuf *)0) {
    #line 508 
    (mb->sm_use_count) --;
    #line 515 
    if (mb->sm_use_count == 0) {
      #line 518 
      mb->m_next = smc->os.hwm.mbuf_pool.mb_free;
      #line 519 
      smc->os.hwm.mbuf_pool.mb_free = mb;
    }
  }
  else 
       #line 527 
       printk((char *)"\001",503,(char *)"HWM: smt_free_mbuf() called with NULL pointer");
  #line 528 
  return;
}

#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void mac_drv_repair_descr(struct s_smc *smc)
{
  #line 552 
  u_long phys;
  #line 554 
  if ((unsigned int)smc->hw.hw_state != 0U) {
    #line 556 
    printk((char *)"\001",513,(char *)"HWM: mac_drv_repair_descr was called although the hardware wasn\'t stopped");
    #line 557 
    return;
  }
  #line 563 
  phys = repair_txd_ring(smc,smc->hw.fp.tx[1]);
  #line 564 
  iowrite32((unsigned int)phys,smc->hw.iop + 656U);
  #line 565 
  if ((unsigned int)smc->hw.fp.tx_q[1].tx_used != 0U) 
                                                      #line 566 
                                                      iowrite32(16U,smc->hw.iop + 120U);
  #line 568 
  phys = repair_txd_ring(smc,smc->hw.fp.tx[0]);
  #line 569 
  iowrite32((unsigned int)phys,smc->hw.iop + 720U);
  #line 570 
  if ((unsigned int)smc->hw.fp.tx_q[0].tx_used != 0U) 
                                                      #line 571 
                                                      iowrite32(16U,smc->hw.iop + 124U);
  #line 577 
  phys = repair_rxd_ring(smc,smc->hw.fp.rx[0]);
  #line 578 
  iowrite32((unsigned int)phys,smc->hw.iop + 528U);
  #line 579 
  iowrite32(16U,smc->hw.iop + 112U);
  #line 580 
  return;
}

#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
static u_long repair_txd_ring(struct s_smc *smc, struct s_smt_tx_queue *queue)
{
  #line 584 
  int i;
  #line 585 
  int tx_used;
  #line 586 
  u_long phys;
  #line 587 
  u_long tbctrl;
  #line 588 
  struct s_smt_fp_txd *t;
  #line 592 
  t = queue->tx_curr_get;
  #line 593 
  tx_used = (int)queue->tx_used;
  #line 594 
  i = ((int)queue->tx_free + tx_used) + -1;
  #line 594 
  while (i != 0) {
    #line 595 
    t = t->txd_next;
    #line 594 
    i --;
  }
  #line 597 
  phys = (unsigned long)t->txd_ntdadr;
  #line 599 
  t = queue->tx_curr_get;
  #line 600 
  while (tx_used != 0) {
    #line 602 
    tbctrl = (unsigned long)t->txd_tbctrl;
    #line 604 
    if ((tbctrl & 2147483648UL) != 0UL) 
      #line 605 
      if ((tbctrl & 1073741824UL) != 0UL) 
                                          #line 606 
                                          break; else 
                                                      #line 612 
                                                      t->txd_tbctrl &= 2147483647U;
    #line 615 
    phys = (unsigned long)t->txd_ntdadr;
    #line 617 
    t = t->txd_next;
    #line 618 
    tx_used --;
  }
  #line 620 
  return phys;
}

#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
static u_long repair_rxd_ring(struct s_smc *smc, struct s_smt_rx_queue *queue)
{
  #line 636 
  int i;
  #line 637 
  int rx_used;
  #line 638 
  u_long phys;
  #line 639 
  u_long rbctrl;
  #line 640 
  struct s_smt_fp_rxd *r;
  #line 644 
  r = queue->rx_curr_get;
  #line 645 
  rx_used = (int)queue->rx_used;
  #line 646 
  i = 10;
  #line 646 
  while (i != 0) {
    #line 647 
    r = r->rxd_next;
    #line 646 
    i --;
  }
  #line 649 
  phys = (unsigned long)r->rxd_nrdadr;
  #line 651 
  r = queue->rx_curr_get;
  #line 652 
  while (rx_used != 0) {
    #line 654 
    rbctrl = (unsigned long)r->rxd_rbctrl;
    #line 656 
    if ((rbctrl & 2147483648UL) != 0UL) 
      #line 657 
      if ((rbctrl & 1073741824UL) != 0UL) 
                                          #line 658 
                                          break; else 
                                                      #line 664 
                                                      r->rxd_rbctrl &= 2147483647U;
    #line 667 
    phys = (unsigned long)r->rxd_nrdadr;
    #line 669 
    r = r->rxd_next;
    #line 670 
    rx_used --;
  }
  #line 672 
  return phys;
}

#line 705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void fddi_isr(struct s_smc *smc)
{
  #line 707 
  u_long is;
  #line 708 
  u_short stu;
  #line 708 
  u_short stl;
  #line 709 
  Mbuf *mb;
  #line 728 
  smc->os.hwm.isr_flag = 1;
  #line 738 
  while (1) {
    #line 738 
    is = (unsigned long)ioread32(smc->hw.iop + 8U) & 8368179UL;
    #line 738 
    if (! (is != 0UL)) 
                       #line 738 
                       break;
    #line 742 
    if ((is & 8359953UL) != 0UL) {
      #line 744 
      if ((is & 1048576UL) != 0UL) 
                                   #line 745 
                                   plc1_irq(smc);
      #line 747 
      if ((is & 524288UL) != 0UL) 
                                  #line 748 
                                  plc2_irq(smc);
      #line 750 
      if ((is & 65536UL) != 0UL) {
        #line 751 
        stu = (unsigned short)ioread16(smc->hw.iop + 1024U);
        #line 752 
        stl = (unsigned short)ioread16(smc->hw.iop + 1028U);
        #line 754 
        mac1_irq(smc,(unsigned short)((int)stu),(unsigned short)((int)stl));
      }
      #line 756 
      if ((is & 131072UL) != 0UL) {
        #line 757 
        stu = (unsigned short)ioread16(smc->hw.iop + 1032U);
        #line 758 
        stl = (unsigned short)ioread16(smc->hw.iop + 1036U);
        #line 761 
        mac2_irq(smc,(unsigned short)((int)stu),(unsigned short)((int)stl));
      }
      #line 763 
      if ((is & 262144UL) != 0UL) {
        #line 764 
        stu = (unsigned short)ioread16(smc->hw.iop + 1412U);
        #line 765 
        stl = (unsigned short)ioread16(smc->hw.iop + 1416U);
        #line 767 
        mac3_irq(smc,(unsigned short)((int)stu),(unsigned short)((int)stl));
      }
      #line 769 
      if ((is & 4194304UL) != 0UL) {
        #line 770 
        timer_irq(smc);
        #line 777 
        (smc->os.hwm.detec_count) ++;
        #line 777 
        if (smc->os.hwm.detec_count > 4) 
                                         #line 781 
                                         process_receive(smc);
      }
      #line 784 
      if ((is & 2097152UL) != 0UL) 
                                   #line 785 
                                   rtm_irq(smc);
      #line 787 
      if ((is & 32768UL) != 0UL) {
        #line 789 
        iowrite32(8U,smc->hw.iop + 540U);
        #line 790 
        printk((char *)"\001",504,(char *)"HWM: Parity error rx queue 1");
      }
      #line 792 
      if ((is & 4096UL) != 0UL) {
        #line 794 
        iowrite32(1U,smc->hw.iop + 540U);
        #line 795 
        printk((char *)"\001",505,(char *)"HWM: Encoding error rx queue 1");
      }
      #line 797 
      if ((is & 16UL) != 0UL) {
        #line 799 
        iowrite32(1U,smc->hw.iop + 668U);
        #line 800 
        printk((char *)"\001",506,(char *)"HWM: Encoding error async tx queue");
      }
      #line 802 
      if ((is & 1UL) != 0UL) {
        #line 804 
        iowrite32(1U,smc->hw.iop + 732U);
        #line 805 
        printk((char *)"\001",507,(char *)"HWM: Encoding error sync tx queue");
      }
    }
    #line 812 
    if ((is & 34UL) != 0UL) {
      #line 818 
      iowrite32(2U,smc->hw.iop + 732U);
      #line 819 
      iowrite32(2U,smc->hw.iop + 668U);
      #line 820 
      mac_drv_clear_txd(smc);
      #line 821 
      llc_restart_tx(smc);
    }
    #line 827 
    if ((is & 8192UL) != 0UL) {
      #line 831 
      iowrite32(2U,smc->hw.iop + 540U);
      #line 832 
      process_receive(smc);
    }
    #line 845 
    while (1) {
      #line 845 
      mb = get_llc_rx(smc);
      #line 845 
      if (! (mb != (Mbuf *)0)) 
                               #line 845 
                               break;
      #line 846 
      smt_to_llc(smc,mb);
    }
    #line 860 
    if (smc->q.ev_get != smc->q.ev_put) 
                                        #line 862 
                                        ev_dispatcher(smc);
  }
  #line 884 
  smc->os.hwm.isr_flag = 0;
  #line 885 
  return;
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void mac_drv_rx_mode(struct s_smc *smc, int mode)
{
  #line 990 
  switch (mode) {
    #line 991 
    case 21: 
             #line 991 
    ;
    #line 992 
    smc->os.hwm.pass_SMT = (unsigned short)1U;
    #line 993 
    break;
    #line 994 
    case 22: 
             #line 994 
    ;
    #line 995 
    smc->os.hwm.pass_SMT = (unsigned short)0U;
    #line 996 
    break;
    #line 997 
    case 23: 
             #line 997 
    ;
    #line 998 
    smc->os.hwm.pass_NSA = (unsigned short)1U;
    #line 999 
    break;
    #line 1000 
    case 24: 
             #line 1000 
    ;
    #line 1001 
    smc->os.hwm.pass_NSA = (unsigned short)0U;
    #line 1002 
    break;
    #line 1003 
    case 25: 
             #line 1003 
    ;
    #line 1004 
    smc->os.hwm.pass_DB = (unsigned short)1U;
    #line 1005 
    break;
    #line 1006 
    case 26: 
             #line 1006 
    ;
    #line 1007 
    smc->os.hwm.pass_DB = (unsigned short)0U;
    #line 1008 
    break;
    #line 1009 
    case 27: 
             #line 1009 
    ;
    #line 1010 
    smc->os.hwm.pass_NSA = ((unsigned short)0U);
    #line 1010 
    smc->os.hwm.pass_SMT = ((unsigned short)0U);
    #line 1011 
    smc->os.hwm.pass_DB = (unsigned short)0U;
    #line 1012 
    smc->os.hwm.pass_llc_promisc = (unsigned short)1U;
    #line 1013 
    mac_set_rx_mode(smc,6);
    #line 1014 
    break;
    #line 1015 
    case 28: 
             #line 1015 
    ;
    #line 1016 
    smc->os.hwm.pass_llc_promisc = (unsigned short)0U;
    #line 1017 
    break;
    #line 1018 
    case 29: 
             #line 1018 
    ;
    #line 1019 
    smc->os.hwm.pass_llc_promisc = (unsigned short)1U;
    #line 1020 
    break;
    #line 1021 
    case 1: 
            #line 1021 
    ;
    #line 1022 
    case 2: 
            #line 1022 
    ;
    #line 1023 
    case 3: 
            #line 1023 
    ;
    #line 1024 
    case 4: 
            #line 1024 
    ;
    #line 1025 
    case 5: 
            #line 1025 
    ;
    #line 1026 
    case 6: 
            #line 1026 
    ;
    #line 1027 
    default: 
             #line 1027 
    ;
    #line 1028 
    mac_set_rx_mode(smc,mode);
    #line 1029 
    break;
  }
  #line 1031 
  return;
}

#line 1037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void process_receive(struct s_smc *smc)
{
  #line 1039 
  int i;
  #line 1040 
  int n;
  #line 1041 
  int frag_count;
  #line 1042 
  int used_frags;
  #line 1043 
  struct s_smt_rx_queue *queue;
  #line 1044 
  struct s_smt_fp_rxd *r;
  #line 1045 
  struct s_smt_fp_rxd *rxd;
  #line 1046 
  u_long rbctrl;
  #line 1047 
  u_long rfsw;
  #line 1048 
  u_short rx_used;
  #line 1049 
  u_char *virt;
  #line 1050 
  char *data;
  #line 1051 
  Mbuf *mb;
  #line 1052 
  u_char fc;
  #line 1053 
  int len;
  #line 1055 
  smc->os.hwm.detec_count = 0;
  #line 1056 
  queue = smc->hw.fp.rx[0];
  #line 1058 
  while (1) {
    #line 1059 
    r = queue->rx_curr_get;
    #line 1060 
    rx_used = queue->rx_used;
    #line 1061 
    frag_count = 0;
    #line 1080 
    n = 0;
    #line 1081 
    while (1) {
      #line 1084 
      rbctrl = (unsigned long)r->rxd_rbctrl;
      #line 1086 
      if ((rbctrl & 2147483648UL) != 0UL) 
                                          #line 1089 
                                          goto rx_end;
      #line 1094 
      if ((unsigned int)rx_used == 0U) {
        #line 1096 
        printk((char *)"\001",509,(char *)"HWM: Out of RxD condition detected");
        #line 1100 
        smc->hw.hw_state = (unsigned short)0U;
        #line 1101 
        mac_drv_clear_rx_queue(smc);
        #line 1102 
        smc->hw.hw_state = (unsigned short)1U;
        #line 1103 
        mac_drv_fill_rxd(smc);
        #line 1104 
        smc->os.hwm.detec_count = 0;
        #line 1105 
        goto rx_end;
      }
      #line 1107 
      rfsw = (unsigned long)r->rxd_rfsw;
      #line 1108 
      if ((((rbctrl << 5) ^ rbctrl) & 1073741824UL) != 0UL) {
        #line 1124 
        rfsw = 0UL;
        #line 1125 
        if (frag_count != 0) 
                             #line 1126 
                             break;
      }
      #line 1129 
      n = (int)((rbctrl & (unsigned long)65535U) + (unsigned long)n);
      #line 1130 
      r = r->rxd_next;
      #line 1131 
      frag_count ++;
      #line 1132 
      rx_used = (u_short)((int)rx_used - 1);
      #line 1133 
      if (! ((rbctrl & 536870912UL) == 0UL)) 
                                             #line 1081 
                                             break;
    }
    #line 1134 
    used_frags = frag_count;
    #line 1140 
    while ((unsigned int)rx_used != 0U && (r->rxd_rbctrl & 33554432U) == 0U) {
      #line 1142 
      r = r->rxd_next;
      #line 1144 
      frag_count ++;
      #line 1145 
      rx_used = (u_short)((int)rx_used - 1);
    }
    #line 1152 
    rxd = queue->rx_curr_get;
    #line 1153 
    queue->rx_curr_get = r;
    #line 1154 
    queue->rx_free = (unsigned short)((int)queue->rx_free + (int)((unsigned short)frag_count));
    #line 1155 
    queue->rx_used = rx_used;
    #line 1160 
    rxd->rxd_rbctrl &= 3221225471U;
    #line 1162 
    r = rxd;
    #line 1162 
    i = frag_count;
    #line 1162 
    while (i != 0) {
      #line 1164 
      dma_complete(smc,(union s_fp_descr *)r,2);
      #line 1162 
      r = r->rxd_next;
      #line 1162 
      i --;
    }
    #line 1166 
    (smc->hw.fp.err_stats.err_valid) ++;
    #line 1167 
    (smc->mib.m[0].fddiMACCopied_Ct) ++;
    #line 1170 
    len = (int)((rfsw & (unsigned long)65535U) + (unsigned long)4294967292U);
    #line 1176 
    if ((rfsw & 1226833920UL) != 0UL) {
      #line 1177 
      if ((rfsw & 1073741824UL) != 0UL) 
                                        #line 1179 
                                        (smc->hw.fp.err_stats.err_abort) ++;
      #line 1184 
      if ((rfsw & 134217728UL) != 0UL) 
                                       #line 1186 
                                       (smc->hw.fp.err_stats.err_e_indicator) ++;
      #line 1188 
      if ((rfsw & 16777216UL) != 0UL) 
                                      #line 1190 
                                      (smc->hw.fp.err_stats.err_crc) ++;
      #line 1192 
      if ((rfsw & 2097152UL) != 0UL) 
                                     #line 1194 
                                     (smc->hw.fp.err_stats.err_imp_frame) ++;
      #line 1196 
      goto abort_frame;
    }
    #line 1198 
    if (len > 4491) {
      #line 1200 
      (smc->hw.fp.err_stats.err_too_long) ++;
      #line 1201 
      goto abort_frame;
    }
    #line 1207 
    if (len <= 4) 
                  #line 1209 
                  goto abort_frame;
    #line 1212 
    if (n + -4 != len) {
      #line 1214 
      (smc->os.hwm.rx_len_error) ++;
      #line 1215 
      goto abort_frame;
    }
    #line 1221 
    virt = (u_char *)rxd->rxd_virt;
    #line 1223 
    if ((((((int)*(virt + 12U) == (int)smc->hw.fddi_canon_addr.a[5] && (int)*(virt + 11U) == (int)smc->hw.fddi_canon_addr.a[4]) && (int)*(virt + 10U) == (int)smc->hw.fddi_canon_addr.a[3]) && (int)*(virt + 9U) == (int)smc->hw.fddi_canon_addr.a[2]) && (int)*(virt + 8U) == (int)smc->hw.fddi_canon_addr.a[1]) && ((int)*(virt + 7U) & -2) == (int)smc->hw.fddi_canon_addr.a[0]) 
      #line 1229 
      goto abort_frame;
    #line 1235 
    if ((rfsw & 1048576UL) != 0UL) {
      #line 1241 
      if ((unsigned int)smc->os.hwm.pass_llc_promisc == 0U) 
        #line 1242 
        if (((int)*(virt + 1U) & 1) == 0) 
          #line 1243 
          if ((((((int)*(virt + 6U) != (int)smc->hw.fddi_canon_addr.a[5] || (int)*(virt + 5U) != (int)smc->hw.fddi_canon_addr.a[4]) || (int)*(virt + 4U) != (int)smc->hw.fddi_canon_addr.a[3]) || (int)*(virt + 3U) != (int)smc->hw.fddi_canon_addr.a[2]) || (int)*(virt + 2U) != (int)smc->hw.fddi_canon_addr.a[1]) || (int)*(virt + 1U) != (int)smc->hw.fddi_canon_addr.a[0]) 
            #line 1250 
            goto abort_frame;
      #line 1259 
      mac_drv_rx_complete(smc,rxd,frag_count,len);
    }
    else {
      #line 1262 
      mb = smt_get_mbuf(smc);
      #line 1262 
      if (mb == (Mbuf *)0) {
        #line 1263 
        (smc->hw.fp.err_stats.err_no_buf) ++;
        #line 1265 
        goto abort_frame;
      }
      #line 1267 
      data = (char *)(& mb->m_data) + ((unsigned long)mb->m_off + 18446744073709551615U);
      #line 1275 
      r = rxd;
      #line 1275 
      i = used_frags;
      #line 1275 
      while (i != 0) {
        #line 1276 
        n = (int)r->rxd_rbctrl & 65535;
        #line 1278 
        memcpy((void *)data,(void *)r->rxd_virt,(unsigned long)n);
        #line 1279 
        data += (unsigned long)n;
        #line 1275 
        r = r->rxd_next;
        #line 1275 
        i --;
      }
      #line 1281 
      data = (char *)(& mb->m_data) + ((unsigned long)mb->m_off + 18446744073709551615U);
      #line 1283 
      *((char *)(& mb->m_data)) = (*data);
      #line 1283 
      fc = (unsigned char)(*data);
      #line 1284 
      mb->m_len = (unsigned int)(len + -1);
      #line 1285 
      data ++;
      #line 1290 
      switch ((int)fc) {
        #line 1291 
        case 65: 
                 #line 1291 
        ;
        #line 1292 
        (smc->hw.fp.err_stats.err_smt_frame) ++;
        #line 1295 
        if ((unsigned int)smc->os.hwm.pass_SMT != 0U) 
                                                      #line 1297 
                                                      mac_drv_rx_complete(smc,rxd,frag_count,len); else 
                                                                    #line 1302 
                                                                    mac_drv_requeue_rxd(smc,rxd,frag_count);
        #line 1305 
        smt_received_pack(smc,mb,(int)(rfsw >> 25));
        #line 1306 
        break;
        #line 1307 
        case 79: 
                 #line 1307 
        ;
        #line 1308 
        (smc->hw.fp.err_stats.err_smt_frame) ++;
        #line 1314 
        if ((unsigned int)smc->os.hwm.pass_NSA != 0U || (unsigned int)smc->os.hwm.pass_SMT != 0U && (rfsw & 67108864UL) == 0UL) 
          #line 1318 
          mac_drv_rx_complete(smc,rxd,frag_count,len); else 
                                                            #line 1323 
                                                            mac_drv_requeue_rxd(smc,rxd,frag_count);
        #line 1326 
        smt_received_pack(smc,mb,(int)(rfsw >> 25));
        #line 1327 
        break;
        #line 1328 
        case 194: 
                  #line 1328 
        ;
        #line 1329 
        if ((unsigned int)smc->os.hwm.pass_DB != 0U) 
                                                     #line 1331 
                                                     mac_drv_rx_complete(smc,rxd,frag_count,len); else 
                                                                    #line 1336 
                                                                    mac_drv_requeue_rxd(smc,rxd,frag_count);
        #line 1338 
        smt_free_mbuf(smc,mb);
        #line 1339 
        break;
        #line 1340 
        default: 
                 #line 1340 
        ;
        #line 1345 
        smt_free_mbuf(smc,mb);
        #line 1347 
        mac_drv_requeue_rxd(smc,rxd,frag_count);
        #line 1348 
        if (((int)fc & 240) == 192) 
                                    #line 1349 
                                    (smc->hw.fp.err_stats.err_mac_frame) ++; else 
                                                                    #line 1351 
                                                                    (smc->hw.fp.err_stats.err_imp_frame) ++;
        #line 1353 
        break;
      }
    }
    #line 1360 
    goto __Cont;
    #line 1362 
    abort_frame: 
                 #line 1362 
    ;
    #line 1364 
    mac_drv_requeue_rxd(smc,rxd,frag_count);
    #line 1058 
    __Cont: 
            #line 1058 
    ;
  }
  #line 1369 
  rx_end: 
          #line 1369 
  ;
  #line 1373 
  return;
}

#line 1376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
static void smt_to_llc(struct s_smc *smc, Mbuf *mb)
{
  #line 1378 
  u_char fc;
  #line 1381 
  smc->os.hwm.r.len = mb->m_len;
  #line 1382 
  smc->os.hwm.r.mb_pos = (char *)(& mb->m_data) + (unsigned long)mb->m_off;
  #line 1383 
  fc = (unsigned char)*(smc->os.hwm.r.mb_pos);
  #line 1384 
  mac_drv_rx_init(smc,(int)mb->m_len,(int)fc,smc->os.hwm.r.mb_pos,(int)mb->m_len);
  #line 1386 
  smt_free_mbuf(smc,mb);
  #line 1387 
  return;
}

#line 1411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void hwm_rx_frag(struct s_smc *smc, char *virt, u_long phys, int len, int frame_status)
{
  #line 1414 
  struct s_smt_fp_rxd *r;
  #line 1415 
  __le32 rbctrl;
  #line 1419 
  r = smc->hw.fp.rx_q[0].rx_curr_put;
  #line 1420 
  r->rxd_virt = virt;
  #line 1421 
  r->rxd_rbadr = (unsigned int)phys;
  #line 1422 
  rbctrl = (((((unsigned int)frame_status << 26) & 1610612736U) | (((unsigned int)frame_status << 21U) & 33554432U)) | (unsigned int)len) | 2287271936U;
  #line 1426 
  r->rxd_rbctrl = rbctrl;
  #line 1429 
  iowrite32(16U,smc->hw.iop + 112U);
  #line 1430 
  smc->hw.fp.rx_q[0].rx_free = (u_short)((int)smc->hw.fp.rx_q[0].rx_free - 1);
  #line 1431 
  smc->hw.fp.rx_q[0].rx_used = (u_short)((int)smc->hw.fp.rx_q[0].rx_used + 1);
  #line 1432 
  smc->hw.fp.rx_q[0].rx_curr_put = r->rxd_next;
  #line 1433 
  return;
}

#line 1459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void mac_drv_clear_rx_queue(struct s_smc *smc)
{
  #line 1461 
  struct s_smt_fp_rxd *r;
  #line 1462 
  struct s_smt_fp_rxd *next_rxd;
  #line 1463 
  struct s_smt_rx_queue *queue;
  #line 1464 
  int frag_count;
  #line 1465 
  int i;
  #line 1467 
  if ((unsigned int)smc->hw.hw_state != 0U) {
    #line 1469 
    printk((char *)"\001",512,(char *)"HWM: mac_drv_clear_rx_queue was called although the hardware wasn\'t stopped");
    #line 1470 
    return;
  }
  #line 1473 
  queue = smc->hw.fp.rx[0];
  #line 1479 
  r = queue->rx_curr_get;
  #line 1480 
  while ((unsigned int)queue->rx_used != 0U) {
    #line 1483 
    r->rxd_rbctrl &= 2147483647U;
    #line 1484 
    frag_count = 1;
    #line 1486 
    r = r->rxd_next;
    #line 1488 
    while (queue->rx_curr_put != r && (r->rxd_rbctrl & 33554432U) == 0U) {
      #line 1491 
      r->rxd_rbctrl &= 2147483647U;
      #line 1493 
      r = r->rxd_next;
      #line 1495 
      frag_count ++;
    }
    #line 1498 
    next_rxd = r;
    #line 1500 
    r = queue->rx_curr_get;
    #line 1500 
    i = frag_count;
    #line 1500 
    while (i != 0) {
      #line 1502 
      dma_complete(smc,(union s_fp_descr *)r,2);
      #line 1500 
      r = r->rxd_next;
      #line 1500 
      i --;
    }
    #line 1507 
    mac_drv_clear_rxd(smc,queue->rx_curr_get,frag_count);
    #line 1509 
    queue->rx_curr_get = next_rxd;
    #line 1510 
    queue->rx_used = (unsigned short)((int)queue->rx_used - (int)((unsigned short)frag_count));
    #line 1511 
    queue->rx_free = (unsigned short)((int)queue->rx_free + (int)((unsigned short)frag_count));
  }
  #line 1513 
  return;
}

#line 1546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
int hwm_tx_init(struct s_smc *smc, u_char fc, int frag_count, int frame_len, int frame_status)
{
  #line 1550 
  smc->os.hwm.tx_p = smc->hw.fp.tx[frame_status & 1];
  #line 1551 
  smc->os.hwm.tx_descr = (((unsigned long)(frame_len + -1) << 27) & 402653184UL) | 1073741824UL;
  #line 1552 
  smc->os.hwm.tx_len = frame_len;
  #line 1554 
  if (((int)fc & -136) == 80) 
                              #line 1555 
                              frame_status |= 32;
  else 
    #line 1558 
    switch ((int)fc) {
      #line 1559 
      case 65: 
               #line 1559 
      ;
      #line 1560 
      case 79: 
               #line 1560 
      ;
      #line 1561 
      frame_status |= 32;
      #line 1562 
      break;
      #line 1563 
      case 67: 
               #line 1563 
      ;
      #line 1564 
      frame_status |= 4;
      #line 1565 
      break;
      #line 1566 
      case 66: 
               #line 1566 
      ;
      #line 1567 
      frame_status |= 36;
      #line 1568 
      break;
      #line 1569 
      default: 
               #line 1569 
      ;
      #line 1570 
      printk((char *)"\001",510,(char *)"HWM: A protocol layer has tried to send a frame with an invalid frame control");
    }
  #line 1573 
  if ((unsigned int)smc->hw.mac_ring_is_up == 0U) {
    #line 1574 
    frame_status &= -33;
    #line 1575 
    frame_status |= 64;
  }
  #line 1578 
  if ((int)(smc->os.hwm.tx_p)->tx_free < frag_count) {
    #line 1580 
    mac_drv_clear_txd(smc);
    #line 1581 
    if ((int)(smc->os.hwm.tx_p)->tx_free < frag_count) {
      #line 1583 
      frame_status &= -33;
      #line 1584 
      frame_status |= 128;
    }
  }
  #line 1594 
  return frame_status;
}

#line 1624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void hwm_tx_frag(struct s_smc *smc, char *virt, u_long phys, int len, int frame_status)
{
  #line 1627 
  struct s_smt_fp_txd *t;
  #line 1628 
  struct s_smt_tx_queue *queue;
  #line 1629 
  __le32 tbctrl;
  #line 1631 
  queue = smc->os.hwm.tx_p;
  #line 1639 
  t = queue->tx_curr_put;
  #line 1642 
  if ((frame_status & 32) != 0) {
    #line 1645 
    t->txd_virt = virt;
    #line 1646 
    t->txd_txdscr = (unsigned int)smc->os.hwm.tx_descr;
    #line 1647 
    t->txd_tbadr = (unsigned int)phys;
    #line 1648 
    tbctrl = ((((unsigned int)frame_status << 26) & 1744830464U) | (unsigned int)len) | 2153054208U;
    #line 1651 
    t->txd_tbctrl = tbctrl;
    #line 1655 
    iowrite32(16U,queue->tx_bmu_ctl);
    #line 1665 
    queue->tx_free = (u_short)((int)queue->tx_free - 1);
    #line 1666 
    queue->tx_used = (u_short)((int)queue->tx_used + 1);
    #line 1667 
    queue->tx_curr_put = t->txd_next;
    #line 1668 
    if ((frame_status & 8) != 0) 
                                 #line 1669 
                                 (smc->mib.m[0].fddiMACTransmit_Ct) ++;
  }
  #line 1672 
  if ((frame_status & 4) != 0) {
    #line 1674 
    if ((frame_status & 16) != 0) {
      #line 1675 
      smc->os.hwm.tx_mb = smt_get_mbuf(smc);
      #line 1675 
      if (smt_get_mbuf(smc) == (Mbuf *)0) 
                                          #line 1676 
                                          (smc->hw.fp.err_stats.err_no_buf) ++; else 
                                                                    #line 1680 
                                                                    smc->os.hwm.tx_data = (char *)(& (smc->os.hwm.tx_mb)->m_data) + ((unsigned long)(smc->os.hwm.tx_mb)->m_off + 18446744073709551615U);
    }
    #line 1690 
    if (smc->os.hwm.tx_mb != (Mbuf *)0) {
      #line 1693 
      memcpy((void *)smc->os.hwm.tx_data,(void *)virt,(unsigned long)len);
      #line 1694 
      smc->os.hwm.tx_data += (unsigned long)len;
      #line 1696 
      if ((frame_status & 8) != 0) {
        #line 1710 
        smc->os.hwm.tx_data = (char *)(& (smc->os.hwm.tx_mb)->m_data) + ((unsigned long)(smc->os.hwm.tx_mb)->m_off + 18446744073709551615U);
        #line 1712 
        *((char *)(& (smc->os.hwm.tx_mb)->m_data)) = *(smc->os.hwm.tx_data);
        #line 1714 
        (smc->os.hwm.tx_data) ++;
        #line 1715 
        (smc->os.hwm.tx_mb)->m_len = (unsigned int)(smc->os.hwm.tx_len + -1);
        #line 1718 
        smt_received_pack(smc,smc->os.hwm.tx_mb,128);
      }
    }
  }
  #line 1722 
  return;
}

#line 1730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
static void queue_llc_rx(struct s_smc *smc, Mbuf *mb)
{
  #line 1733 
  (smc->os.hwm.queued_rx_frames) ++;
  #line 1734 
  mb->m_next = (struct s_mbuf *)0;
  #line 1735 
  if (smc->os.hwm.llc_rx_pipe == (Mbuf *)0) 
                                            #line 1736 
                                            smc->os.hwm.llc_rx_pipe = mb; else 
                                                                    #line 1739 
                                                                    (smc->os.hwm.llc_rx_tail)->m_next = mb;
  #line 1741 
  smc->os.hwm.llc_rx_tail = mb;
  #line 1746 
  if (smc->os.hwm.isr_flag == 0) 
                                 #line 1747 
                                 smt_force_irq(smc);
  #line 1748 
  return;
}

#line 1754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
static Mbuf *get_llc_rx(struct s_smc *smc)
{
  #line 1756 
  Mbuf *mb;
  #line 1758 
  mb = smc->os.hwm.llc_rx_pipe;
  #line 1758 
  if (mb != (Mbuf *)0) {
    #line 1759 
    (smc->os.hwm.queued_rx_frames) --;
    #line 1760 
    smc->os.hwm.llc_rx_pipe = mb->m_next;
  }
  #line 1763 
  return mb;
}

#line 1770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
static void queue_txd_mb(struct s_smc *smc, Mbuf *mb)
{
  #line 1773 
  (smc->os.hwm.queued_txd_mb) ++;
  #line 1774 
  mb->m_next = (struct s_mbuf *)0;
  #line 1775 
  if (smc->os.hwm.txd_tx_pipe == (Mbuf *)0) 
                                            #line 1776 
                                            smc->os.hwm.txd_tx_pipe = mb; else 
                                                                    #line 1779 
                                                                    (smc->os.hwm.txd_tx_tail)->m_next = mb;
  #line 1781 
  smc->os.hwm.txd_tx_tail = mb;
  #line 1782 
  return;
}

#line 1787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
static Mbuf *get_txd_mb(struct s_smc *smc)
{
  #line 1789 
  Mbuf *mb;
  #line 1791 
  mb = smc->os.hwm.txd_tx_pipe;
  #line 1791 
  if (mb != (Mbuf *)0) {
    #line 1792 
    (smc->os.hwm.queued_txd_mb) --;
    #line 1793 
    smc->os.hwm.txd_tx_pipe = mb->m_next;
  }
  #line 1796 
  return mb;
}

#line 1802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void smt_send_mbuf(struct s_smc *smc, Mbuf *mb, int fc)
{
  #line 1804 
  char *data;
  #line 1805 
  int len;
  #line 1806 
  int n;
  #line 1807 
  int i;
  #line 1808 
  int frag_count;
  #line 1809 
  int frame_status;
  #line 1810 
  char *virt[3U];
  #line 1811 
  int frag_len[3U];
  #line 1812 
  struct s_smt_tx_queue *queue;
  #line 1813 
  struct s_smt_fp_txd *t;
  #line 1814 
  u_long phys;
  #line 1815 
  __le32 tbctrl;
  #line 1820 
  mb->m_off = (short)((int)mb->m_off - 1);
  #line 1821 
  (mb->m_len) ++;
  #line 1822 
  data = (char *)(& mb->m_data) + (unsigned long)mb->m_off;
  #line 1823 
  *data = (char)fc;
  #line 1824 
  if (fc == 67) 
                #line 1825 
                *data = (char)65;
  #line 1830 
  frag_count = 0;
  #line 1831 
  len = (int)mb->m_len;
  #line 1832 
  while (len != 0) {
    #line 1833 
    n = (int)((long)4096U - ((long)data & (long)4095U));
    #line 1834 
    if (n >= len) 
                  #line 1835 
                  n = len;
    #line 1838 
    virt[frag_count] = data;
    #line 1839 
    frag_len[frag_count] = n;
    #line 1840 
    frag_count ++;
    #line 1841 
    len -= n;
    #line 1842 
    data += (unsigned long)n;
  }
  #line 1848 
  queue = smc->hw.fp.tx[1];
  #line 1849 
  if (fc == 194 || fc == 67) 
                             #line 1850 
                             frame_status = 4;
  else {
    #line 1853 
    frame_status = 32;
    #line 1854 
    if ((unsigned int)smc->os.hwm.pass_NSA != 0U && fc == 79 || (unsigned int)smc->os.hwm.pass_SMT != 0U && fc == 65) 
      #line 1856 
      frame_status |= 4;
  }
  #line 1859 
  if ((unsigned int)smc->hw.mac_ring_is_up == 0U || (int)queue->tx_free < frag_count) {
    #line 1860 
    frame_status &= -33;
    #line 1861 
    if (! (frame_status != 0)) {
      #line 1866 
      smt_free_mbuf(smc,mb);
      #line 1867 
      return;
    }
  }
  #line 1872 
  if ((frame_status & 32) != 0 && (frame_status & 4) != 0) 
                                                           #line 1873 
                                                           mb->sm_use_count = 2;
  #line 1876 
  if ((frame_status & 32) != 0) {
    #line 1877 
    t = queue->tx_curr_put;
    #line 1878 
    frame_status |= 16;
    #line 1879 
    i = 0;
    #line 1879 
    while (i < frag_count) {
      #line 1881 
      if (frag_count + -1 == i) {
        #line 1882 
        frame_status |= 8;
        #line 1883 
        t->txd_txdscr = (((mb->m_len + 4294967295U) << 27) & 402653184U) | 1073741824U;
      }
      #line 1886 
      t->txd_virt = virt[i];
      #line 1887 
      phys = dma_master(smc,(void *)virt[i],frag_len[i],129);
      #line 1889 
      t->txd_tbadr = (unsigned int)phys;
      #line 1890 
      tbctrl = ((((unsigned int)frame_status << 26) & 1610612736U) | (unsigned int)frag_len[i]) | 2186608640U;
      #line 1893 
      t->txd_tbctrl = tbctrl;
      #line 1896 
      iowrite32(16U,queue->tx_bmu_ctl);
      #line 1901 
      frame_status &= -17;
      #line 1902 
      t = t->txd_next;
      #line 1902 
      queue->tx_curr_put = t;
      #line 1903 
      queue->tx_free = (u_short)((int)queue->tx_free - 1);
      #line 1904 
      queue->tx_used = (u_short)((int)queue->tx_used + 1);
      #line 1879 
      i ++;
    }
    #line 1906 
    (smc->mib.m[0].fddiMACTransmit_Ct) ++;
    #line 1907 
    queue_txd_mb(smc,mb);
  }
  #line 1910 
  if ((frame_status & 4) != 0) 
                               #line 1912 
                               queue_llc_rx(smc,mb);
  #line 1919 
  mac_drv_clear_txd(smc);
  #line 1920 
  return;
}

#line 1937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
static void mac_drv_clear_txd(struct s_smc *smc)
{
  #line 1939 
  struct s_smt_tx_queue *queue;
  #line 1940 
  struct s_smt_fp_txd *t1;
  #line 1942 
  Mbuf *mb;
  #line 1943 
  u_long tbctrl;
  #line 1944 
  int i;
  #line 1945 
  int frag_count;
  #line 1946 
  int n;
  #line 1941 
  struct s_smt_fp_txd *t2 = (struct s_smt_fp_txd *)0;
  #line 1949 
  i = 0;
  #line 1949 
  while (i <= 1) {
    #line 1950 
    queue = smc->hw.fp.tx[i];
    #line 1951 
    t1 = queue->tx_curr_get;
    #line 1954 
    while (1) {
      #line 1955 
      frag_count = 0;
      #line 1957 
      while (1) {
        #line 1960 
        tbctrl = (unsigned long)t1->txd_tbctrl;
        #line 1962 
        if ((tbctrl & 2147483648UL) != 0UL || (unsigned int)queue->tx_used == 0U) 
          #line 1964 
          goto free_next_queue;
        #line 1966 
        t1 = t1->txd_next;
        #line 1967 
        frag_count ++;
        #line 1968 
        if (! ((tbctrl & 536870912UL) == 0UL)) 
                                               #line 1957 
                                               break;
      }
      #line 1970 
      t1 = queue->tx_curr_get;
      #line 1971 
      n = frag_count;
      #line 1971 
      while (n != 0) {
        #line 1972 
        tbctrl = (unsigned long)t1->txd_tbctrl;
        #line 1973 
        dma_complete(smc,(union s_fp_descr *)t1,(int)(((tbctrl >> 18) & (unsigned long)128U) | (unsigned long)1U));
        #line 1977 
        t2 = t1;
        #line 1978 
        t1 = t1->txd_next;
        #line 1971 
        n --;
      }
      #line 1981 
      if ((tbctrl & 33554432UL) != 0UL) {
        #line 1982 
        mb = get_txd_mb(smc);
        #line 1983 
        smt_free_mbuf(smc,mb);
      }
      else 
           #line 1988 
           mac_drv_tx_complete(smc,t2);
      #line 1995 
      queue->tx_curr_get = t1;
      #line 1996 
      queue->tx_free = (unsigned short)((int)queue->tx_free + (int)((unsigned short)frag_count));
      #line 1997 
      queue->tx_used = (unsigned short)((int)queue->tx_used - (int)((unsigned short)frag_count));
    }
    #line 1999 
    free_next_queue: 
                     #line 1999 
    ;
    #line 1949 
    i ++;
  }
  #line 2001 
  return;
}

#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwmtm.c"
void mac_drv_clear_tx_queue(struct s_smc *smc)
{
  #line 2029 
  struct s_smt_fp_txd *t;
  #line 2030 
  struct s_smt_tx_queue *queue;
  #line 2031 
  int tx_used;
  #line 2032 
  int i;
  #line 2034 
  if ((unsigned int)smc->hw.hw_state != 0U) {
    #line 2036 
    printk((char *)"\001",511,(char *)"HWM: mac_drv_clear_tx_queue was called although the hardware wasn\'t stopped");
    #line 2037 
    return;
  }
  #line 2040 
  i = 0;
  #line 2040 
  while (i <= 1) {
    #line 2041 
    queue = smc->hw.fp.tx[i];
    #line 2047 
    t = queue->tx_curr_get;
    #line 2048 
    tx_used = (int)queue->tx_used;
    #line 2049 
    while (tx_used != 0) {
      #line 2052 
      t->txd_tbctrl &= 2147483647U;
      #line 2054 
      t = t->txd_next;
      #line 2055 
      tx_used --;
    }
    #line 2040 
    i ++;
  }
  #line 2062 
  mac_drv_clear_txd(smc);
  #line 2064 
  i = 0;
  #line 2064 
  while (i <= 1) {
    #line 2065 
    queue = smc->hw.fp.tx[i];
    #line 2066 
    t = queue->tx_curr_get;
    #line 2073 
    if (i == 0) 
                #line 2074 
                iowrite32(t->txd_ntdadr,smc->hw.iop + 720U); else 
                                                                  #line 2077 
                                                                  iowrite32(t->txd_ntdadr,smc->hw.iop + 656U);
    #line 2080 
    queue->tx_curr_put = (queue->tx_curr_get)->txd_next;
    #line 2081 
    queue->tx_curr_get = queue->tx_curr_put;
    #line 2064 
    i ++;
  }
  #line 2083 
  return;
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void config_mux(struct s_smc *smc, int mux);
#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void set_formac_tsync(struct s_smc *smc, long sync_bw);
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 1477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void formac_reinit_tx(struct s_smc *smc);
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(unsigned char *addr1, unsigned char *addr2)
{
  #line 318 
  unsigned int fold = (*((unsigned int *)addr1) ^ *((unsigned int *)addr2)) | (unsigned int)((int)*((unsigned short *)(addr1 + 4U)) ^ (int)*((unsigned short *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
#line 471 
static void build_claim_beacon(struct s_smc *smc, u_long t_request);
#line 44 
#line 891 
static int init_mac(struct s_smc *smc, int all);
#line 45 
#line 1341 
static void rtm_init(struct s_smc *smc);
#line 46 
#line 1357 
static void smt_split_up_fifo(struct s_smc *smc);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static char write_mdr_warning[35U] = {(char)'E', (char)'3', (char)'5', (char)'0', (char)' ', (char)'w', (char)'r', (char)'i', (char)'t', (char)'e', (char)'_', (char)'m', (char)'d', (char)'r', (char)'(', (char)')', (char)' ', (char)'F', (char)'M', (char)'_', (char)'S', (char)'N', (char)'P', (char)'P', (char)'N', (char)'D', (char)' ', (char)'i', (char)'s', (char)' ', (char)'s', (char)'e', (char)'t', (char)'\n'};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static char cam_warning[27U] = {(char)'E', (char)'_', (char)'S', (char)'M', (char)'T', (char)'_', (char)'0', (char)'0', (char)'4', (char)':', (char)' ', (char)'C', (char)'A', (char)'M', (char)' ', (char)'s', (char)'t', (char)'i', (char)'l', (char)'l', (char)' ', (char)'b', (char)'u', (char)'s', (char)'y', (char)'\n'};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
struct fddi_addr fddi_broadcast = {.a = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U}};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static struct fddi_addr null_addr = {.a = {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U}};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static struct fddi_addr dbeacon_multi = {.a = {(unsigned char)1U, (unsigned char)128U, (unsigned char)194U, [4] = (unsigned char)1U}};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static u_long mac_get_tneg(struct s_smc *smc)
{
  #line 109 
  u_long tneg;
  #line 111 
  tneg = (unsigned long)((long)ioread16(smc->hw.iop + 1120U) << 5);
  #line 112 
  ;
  #line 112 
  return (((unsigned long)(ioread16(smc->hw.iop + 1124U) >> 10) & 31UL) + tneg) | 4292870144UL;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void mac_update_counter(struct s_smc *smc)
{
  #line 118 
  smc->mib.m[0].fddiMACFrame_Ct = (smc->mib.m[0].fddiMACFrame_Ct & 4294901760UL) + (unsigned long)((unsigned short)ioread16(smc->hw.iop + 1284U));
  #line 121 
  smc->mib.m[0].fddiMACLost_Ct = (smc->mib.m[0].fddiMACLost_Ct & 4294901760UL) + (unsigned long)((unsigned short)ioread16(smc->hw.iop + 1288U));
  #line 124 
  smc->mib.m[0].fddiMACError_Ct = (smc->mib.m[0].fddiMACError_Ct & 4294901760UL) + (unsigned long)((unsigned short)ioread16(smc->hw.iop + 1292U));
  #line 127 
  smc->mib.m[0].fddiMACT_Neg = mac_get_tneg(smc);
  #line 134 
  smt_emulate_token_ct(smc,0);
  #line 135 
  return;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void write_mdr(struct s_smc *smc, u_long val)
{
  {
    #line 143 
    unsigned int k = 10000U;
    #line 143 
    while (1) {
      #line 143 
      if ((ioread16(smc->hw.iop + 1092U) & 8U) != 0U) {
        #line 143 
        if (! (k != 0U)) 
                         #line 143 
                         break;
      }
      else 
           #line 143 
           break;
      #line 143 
      k --;
    }
    #line 143 
    if (k == 0U) 
                 #line 143 
                 printk((char *)"\001",130,(char *)(& write_mdr_warning));
  }
  #line 144 
  iowrite16((unsigned short)((int)((unsigned short)(val >> 16))),smc->hw.iop + 1272U);
  #line 144 
  iowrite16((unsigned short)((int)((unsigned short)val)),smc->hw.iop + 1276U);
  #line 145 
  return;
}

#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void init_ram(struct s_smc *smc)
{
  #line 172 
  u_short i;
  #line 174 
  smc->hw.fp.fifo.rbc_ram_start = (unsigned short)0U;
  #line 175 
  smc->hw.fp.fifo.rbc_ram_end = (unsigned short)((unsigned int)smc->hw.fp.fifo.rbc_ram_start + 32768U);
  {
    #line 177 
    unsigned int k = 10000U;
    #line 177 
    while (1) {
      #line 177 
      if ((ioread16(smc->hw.iop + 1092U) & 8U) != 0U) {
        #line 177 
        if (! (k != 0U)) 
                         #line 177 
                         break;
      }
      else 
           #line 177 
           break;
      #line 177 
      k --;
    }
    #line 177 
    if (k == 0U) 
                 #line 177 
                 printk((char *)"\001",130,(char *)(& write_mdr_warning));
  }
  #line 178 
  iowrite16((unsigned short)((int)smc->hw.fp.fifo.rbc_ram_start),smc->hw.iop + 1268U);
  #line 179 
  i = smc->hw.fp.fifo.rbc_ram_start;
  #line 179 
  while ((unsigned int)smc->hw.fp.fifo.rbc_ram_end + 65535U > (unsigned int)i) {
    #line 181 
    write_mdr(smc,0UL);
    #line 180 
    i = (u_short)((int)i + 1);
  }
  #line 183 
  write_mdr(smc,0UL);
  #line 184 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void set_recvptr(struct s_smc *smc)
{
  #line 194 
  iowrite16((unsigned short)((int)smc->hw.fp.fifo.rx1_fifo_start),smc->hw.iop + 1204U);
  #line 195 
  iowrite16((unsigned short)((int)smc->hw.fp.fifo.rx1_fifo_start),smc->hw.iop + 1212U);
  #line 196 
  iowrite16((unsigned short)((int)smc->hw.fp.fifo.rx1_fifo_start),smc->hw.iop + 1208U);
  #line 197 
  iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.tx_s_start + 65535U)),smc->hw.iop + 1164U);
  #line 202 
  if ((unsigned int)smc->hw.fp.fifo.rx2_fifo_size != 0U) {
    #line 203 
    iowrite16((unsigned short)((int)smc->hw.fp.fifo.rx2_fifo_start),smc->hw.iop + 1440U);
    #line 204 
    iowrite16((unsigned short)((int)smc->hw.fp.fifo.rx2_fifo_start),smc->hw.iop + 1448U);
    #line 205 
    iowrite16((unsigned short)((int)smc->hw.fp.fifo.rx2_fifo_start),smc->hw.iop + 1444U);
    #line 206 
    iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.rbc_ram_end + 65535U)),smc->hw.iop + 1452U);
  }
  else {
    #line 209 
    iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.rbc_ram_end + 65535U)),smc->hw.iop + 1440U);
    #line 210 
    iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.rbc_ram_end + 65535U)),smc->hw.iop + 1448U);
    #line 211 
    iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.rbc_ram_end + 65535U)),smc->hw.iop + 1444U);
    #line 212 
    iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.rbc_ram_end + 65535U)),smc->hw.iop + 1452U);
  }
  #line 214 
  return;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void set_txptr(struct s_smc *smc)
{
  #line 221 
  iowrite16((unsigned short)32,smc->hw.iop + 1028U);
  #line 226 
  iowrite16((unsigned short)((int)smc->hw.fp.fifo.tx_a0_start),smc->hw.iop + 1252U);
  #line 227 
  iowrite16((unsigned short)((int)smc->hw.fp.fifo.tx_a0_start),smc->hw.iop + 1236U);
  #line 228 
  iowrite16((unsigned short)((int)smc->hw.fp.fifo.tx_a0_start),smc->hw.iop + 1220U);
  #line 229 
  iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.rx2_fifo_start + 65535U)),smc->hw.iop + 1172U);
  #line 234 
  if ((unsigned int)smc->hw.fp.fifo.tx_s_size != 0U) {
    #line 235 
    iowrite16((unsigned short)((int)smc->hw.fp.fifo.tx_s_start),smc->hw.iop + 1248U);
    #line 236 
    iowrite16((unsigned short)((int)smc->hw.fp.fifo.tx_s_start),smc->hw.iop + 1232U);
    #line 237 
    iowrite16((unsigned short)((int)smc->hw.fp.fifo.tx_s_start),smc->hw.iop + 1216U);
    #line 238 
    iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.tx_a0_start + 65535U)),smc->hw.iop + 1168U);
  }
  else {
    #line 241 
    iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.tx_a0_start + 65535U)),smc->hw.iop + 1248U);
    #line 242 
    iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.tx_a0_start + 65535U)),smc->hw.iop + 1232U);
    #line 243 
    iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.tx_a0_start + 65535U)),smc->hw.iop + 1216U);
    #line 244 
    iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.tx_a0_start + 65535U)),smc->hw.iop + 1168U);
  }
  #line 246 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void init_rbc(struct s_smc *smc)
{
  #line 253 
  u_short rbc_ram_addr;
  #line 258 
  rbc_ram_addr = (unsigned short)((unsigned int)smc->hw.fp.fifo.rx2_fifo_start + 65535U);
  #line 260 
  iowrite16((unsigned short)((int)rbc_ram_addr),smc->hw.iop + 1256U);
  #line 261 
  iowrite16((unsigned short)((int)rbc_ram_addr),smc->hw.iop + 1224U);
  #line 262 
  iowrite16((unsigned short)((int)rbc_ram_addr),smc->hw.iop + 1240U);
  #line 263 
  iowrite16((unsigned short)((int)rbc_ram_addr),smc->hw.iop + 1176U);
  #line 265 
  set_recvptr(smc);
  #line 266 
  set_txptr(smc);
  #line 267 
  return;
}

#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void init_rx(struct s_smc *smc)
{
  #line 274 
  struct s_smt_rx_queue *queue;
  #line 279 
  queue = & smc->hw.fp.rx_q[0];
  #line 279 
  smc->hw.fp.rx[0] = queue;
  #line 280 
  queue->rx_bmu_ctl = smc->hw.iop + 112U;
  #line 281 
  queue->rx_bmu_dsc = smc->hw.iop + 528U;
  #line 286 
  queue = & smc->hw.fp.rx_q[1];
  #line 286 
  smc->hw.fp.rx[1] = queue;
  #line 287 
  queue->rx_bmu_ctl = smc->hw.iop + 116U;
  #line 288 
  queue->rx_bmu_dsc = smc->hw.iop + 592U;
  #line 289 
  return;
}

#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void set_formac_tsync(struct s_smc *smc, long sync_bw)
{
  #line 296 
  iowrite16((unsigned short)((int)((unsigned short)(- sync_bw >> 5))),smc->hw.iop + 1148U);
  #line 297 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void init_tx(struct s_smc *smc)
{
  #line 304 
  struct s_smt_tx_queue *queue;
  #line 309 
  queue = & smc->hw.fp.tx_q[0];
  #line 309 
  smc->hw.fp.tx[0] = queue;
  #line 310 
  queue->tx_bmu_ctl = smc->hw.iop + 124U;
  #line 311 
  queue->tx_bmu_dsc = smc->hw.iop + 720U;
  #line 314 
  set_formac_tsync(smc,smc->ess.sync_bw);
  #line 320 
  queue = & smc->hw.fp.tx_q[1];
  #line 320 
  smc->hw.fp.tx[1] = queue;
  #line 321 
  queue->tx_bmu_ctl = smc->hw.iop + 120U;
  #line 322 
  queue->tx_bmu_dsc = smc->hw.iop + 656U;
  #line 325 
  llc_recover_tx(smc);
  #line 326 
  return;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void mac_counter_init(struct s_smc *smc)
{
  #line 330 
  int i;
  #line 331 
  u_long *ec;
  #line 336 
  iowrite16((unsigned short)0,smc->hw.iop + 1284U);
  #line 337 
  iowrite16((unsigned short)0,smc->hw.iop + 1288U);
  #line 338 
  iowrite16((unsigned short)0,smc->hw.iop + 1292U);
  #line 342 
  ec = (u_long *)(& smc->hw.fp.err_stats);
  #line 343 
  i = 16;
  #line 343 
  while (i != 0) {
    #line 344 
    u_long *tmp;
    #line 344 
    tmp = ec;
    #line 344 
    ec ++;
    #line 344 
    *tmp = 0UL;
    #line 343 
    i --;
  }
  #line 345 
  smc->mib.m[0].fddiMACRingOp_Ct = 0UL;
  #line 346 
  return;
}

#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void set_formac_addr(struct s_smc *smc)
{
  #line 353 
  long t_requ = (long)smc->mib.m[0].fddiMACT_Req;
  #line 355 
  iowrite16((unsigned short)65535,smc->hw.iop + 1056U);
  #line 356 
  iowrite16((unsigned short)(((int)((unsigned short)smc->hw.fddi_home_addr.a[4]) << 8U) + (int)((unsigned short)smc->hw.fddi_home_addr.a[5])),smc->hw.iop + 1068U);
  #line 358 
  iowrite16((unsigned short)(((int)((unsigned short)smc->hw.fddi_home_addr.a[2]) << 8U) + (int)((unsigned short)smc->hw.fddi_home_addr.a[3])),smc->hw.iop + 1064U);
  #line 360 
  iowrite16((unsigned short)(((int)((unsigned short)smc->hw.fddi_home_addr.a[0]) << 8U) + (int)((unsigned short)smc->hw.fddi_home_addr.a[1])),smc->hw.iop + 1060U);
  #line 363 
  iowrite16((unsigned short)65535,smc->hw.iop + 1072U);
  #line 365 
  iowrite16((unsigned short)(((int)((unsigned short)smc->hw.fp.group_addr.a[4]) << 8U) + (int)((unsigned short)smc->hw.fp.group_addr.a[5])),smc->hw.iop + 1084U);
  #line 367 
  iowrite16((unsigned short)(((int)((unsigned short)smc->hw.fp.group_addr.a[2]) << 8U) + (int)((unsigned short)smc->hw.fp.group_addr.a[3])),smc->hw.iop + 1080U);
  #line 369 
  iowrite16((unsigned short)(((int)((unsigned short)smc->hw.fp.group_addr.a[0]) << 8U) + (int)((unsigned short)smc->hw.fp.group_addr.a[1])),smc->hw.iop + 1076U);
  #line 373 
  iowrite16((unsigned short)((int)((unsigned short)(t_requ >> 16))),smc->hw.iop + 1132U);
  #line 374 
  iowrite16((unsigned short)((int)((unsigned short)t_requ)),smc->hw.iop + 1128U);
  #line 375 
  return;
}

#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void set_int(char *p, int l)
{
  #line 379 
  *p = (char)(l >> 24);
  #line 380 
  *(p + 1U) = (char)(l >> 16);
  #line 381 
  *(p + 2U) = (char)(l >> 8);
  #line 382 
  *(p + 3U) = (char)l;
  #line 383 
  return;
}

#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void copy_tx_mac(struct s_smc *smc, u_long td, struct fddi_mac *mac, unsigned int off, int len)
{
  #line 400 
  int i;
  #line 401 
  __le32 *p;
  {
    #line 403 
    unsigned int k = 10000U;
    #line 403 
    while (1) {
      #line 403 
      if ((ioread16(smc->hw.iop + 1092U) & 8U) != 0U) {
        #line 403 
        if (! (k != 0U)) 
                         #line 403 
                         break;
      }
      else 
           #line 403 
           break;
      #line 403 
      k --;
    }
    #line 403 
    if (k == 0U) 
                 #line 403 
                 printk((char *)"\001",130,(char *)(& write_mdr_warning));
  }
  #line 404 
  iowrite16((unsigned short)((int)((unsigned short)off)),smc->hw.iop + 1268U);
  #line 406 
  p = (__le32 *)mac;
  #line 407 
  i = (len + 3) / 4;
  #line 407 
  while (i != 0) {
    #line 408 
    if (i == 1) 
                #line 410 
                iowrite16((unsigned short)48,smc->hw.iop + 1028U);
    #line 412 
    write_mdr(smc,(unsigned long)*p);
    #line 413 
    p ++;
    #line 407 
    i --;
  }
  #line 416 
  iowrite16((unsigned short)48,smc->hw.iop + 1028U);
  #line 417 
  write_mdr(smc,td);
  #line 418 
  return;
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void directed_beacon(struct s_smc *smc)
{
  #line 444 
  __le32 a[2U];
  #line 451 
  *((char *)(& a)) = (char)0;
  #line 452 
  a[1] = 0U;
  #line 453 
  memcpy((void *)((char *)(& a) + 1U),(void *)(& smc->mib.m[0].fddiMACUpstreamNbr),6UL);
  {
    #line 455 
    unsigned int k = 10000U;
    #line 455 
    while (1) {
      #line 455 
      if ((ioread16(smc->hw.iop + 1092U) & 8U) != 0U) {
        #line 455 
        if (! (k != 0U)) 
                         #line 455 
                         break;
      }
      else 
           #line 455 
           break;
      #line 455 
      k --;
    }
    #line 455 
    if (k == 0U) 
                 #line 455 
                 printk((char *)"\001",130,(char *)(& write_mdr_warning));
  }
  #line 457 
  iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.rbc_ram_start + 28U)),smc->hw.iop + 1268U);
  #line 458 
  write_mdr(smc,(unsigned long)a[0]);
  #line 459 
  iowrite16((unsigned short)48,smc->hw.iop + 1028U);
  #line 460 
  write_mdr(smc,(unsigned long)a[1]);
  #line 462 
  iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.rbc_ram_start + 24U)),smc->hw.iop + 1188U);
  #line 463 
  return;
}

#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void build_claim_beacon(struct s_smc *smc, u_long t_request)
{
  #line 473 
  u_int td;
  #line 474 
  int len;
  #line 475 
  struct fddi_mac_sf *mac;
  #line 480 
  len = 17;
  #line 481 
  td = ((((unsigned int)len + 4294967295U) << 27) & 402653184U) | 1073741824U;
  #line 482 
  mac = & smc->hw.fp.mac_sfb;
  #line 483 
  mac->mac_fc = (unsigned char)195U;
  #line 485 
  mac->mac_dest = (smc->hw.fddi_canon_addr);
  #line 485 
  mac->mac_source = (smc->hw.fddi_canon_addr);
  #line 487 
  set_int((char *)(& mac->mac_info),(int)t_request);
  #line 489 
  copy_tx_mac(smc,(unsigned long)td,(struct fddi_mac *)mac,(unsigned int)((int)smc->hw.fp.fifo.rbc_ram_start + 8),len);
  #line 492 
  iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.rbc_ram_start + 8U)),smc->hw.iop + 1184U);
  #line 497 
  len = 17;
  #line 498 
  td = ((((unsigned int)len + 4294967295U) << 27) & 402653184U) | 1073741824U;
  #line 499 
  mac->mac_fc = (unsigned char)194U;
  #line 500 
  mac->mac_source = smc->hw.fddi_canon_addr;
  #line 501 
  mac->mac_dest = null_addr;
  #line 502 
  set_int((char *)(& mac->mac_info),0);
  #line 504 
  copy_tx_mac(smc,(unsigned long)td,(struct fddi_mac *)mac,(unsigned int)((int)smc->hw.fp.fifo.rbc_ram_start + 16),len);
  #line 507 
  iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.rbc_ram_start + 16U)),smc->hw.iop + 1188U);
  #line 513 
  len = 23;
  #line 514 
  td = ((((unsigned int)len + 4294967295U) << 27) & 402653184U) | 1073741824U;
  #line 515 
  mac->mac_fc = (unsigned char)194U;
  #line 516 
  mac->mac_source = smc->hw.fddi_canon_addr;
  #line 517 
  mac->mac_dest = dbeacon_multi;
  #line 518 
  set_int((char *)(& mac->mac_info),16777216);
  #line 519 
  set_int((char *)(& mac->mac_info) + 4U,0);
  #line 520 
  set_int((char *)(& mac->mac_info) + 8U,0);
  #line 522 
  copy_tx_mac(smc,(unsigned long)td,(struct fddi_mac *)mac,(unsigned int)((int)smc->hw.fp.fifo.rbc_ram_start + 24),len);
  #line 526 
  iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.fifo.rx1_fifo_start + 65535U)),smc->hw.iop + 1160U);
  #line 528 
  iowrite16((unsigned short)0,smc->hw.iop + 1192U);
  #line 529 
  iowrite16((unsigned short)0,smc->hw.iop + 1196U);
  #line 530 
  return;
}

#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void formac_rcv_restart(struct s_smc *smc)
{
  #line 535 
  ;
  #line 535 
  ;
  #line 535 
  iowrite16((unsigned short)((int)(((unsigned int)((unsigned short)ioread16(smc->hw.iop + 1088U)) & 63695U) | (unsigned int)smc->hw.fp.rx_mode)),smc->hw.iop + 1088U);
  #line 537 
  iowrite16((unsigned short)32,smc->hw.iop + 1024U);
  #line 538 
  return;
}

#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void formac_tx_restart(struct s_smc *smc)
{
  #line 542 
  iowrite16((unsigned short)17,smc->hw.iop + 1024U);
  #line 543 
  iowrite16((unsigned short)18,smc->hw.iop + 1024U);
  #line 544 
  return;
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void enable_formac(struct s_smc *smc)
{
  #line 549 
  iowrite16((unsigned short)26623,smc->hw.iop + 1040U);
  #line 550 
  iowrite16((unsigned short)52476,smc->hw.iop + 1044U);
  #line 551 
  iowrite16((unsigned short)58975,smc->hw.iop + 1048U);
  #line 552 
  iowrite16((unsigned short)15241,smc->hw.iop + 1052U);
  #line 553 
  iowrite16((unsigned short)59391,smc->hw.iop + 1420U);
  #line 554 
  iowrite16((unsigned short)65523,smc->hw.iop + 1424U);
  #line 555 
  return;
}

#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void disable_formac(struct s_smc *smc)
{
  #line 640 
  iowrite16((unsigned short)65535,smc->hw.iop + 1040U);
  #line 641 
  iowrite16((unsigned short)65535,smc->hw.iop + 1044U);
  #line 642 
  iowrite16((unsigned short)65535,smc->hw.iop + 1048U);
  #line 643 
  iowrite16((unsigned short)65535,smc->hw.iop + 1052U);
  #line 644 
  iowrite16((unsigned short)65535,smc->hw.iop + 1420U);
  #line 645 
  iowrite16((unsigned short)65535,smc->hw.iop + 1424U);
  #line 646 
  return;
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void mac_ring_up(struct s_smc *smc, int up)
{
  #line 651 
  if (up != 0) {
    #line 652 
    formac_rcv_restart(smc);
    #line 653 
    smc->hw.mac_ring_is_up = (unsigned short)1U;
    #line 654 
    llc_restart_tx(smc);
  }
  else {
    #line 658 
    ;
    #line 658 
    iowrite16((unsigned short)((int)(((unsigned int)((unsigned short)ioread16(smc->hw.iop + 1088U)) & 63743U) | 1024U)),smc->hw.iop + 1088U);
    #line 661 
    iowrite16((unsigned short)16,smc->hw.iop + 1028U);
    #line 663 
    smc->hw.mac_ring_is_up = (unsigned short)0U;
  }
  #line 665 
  return;
}

#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void mac2_irq(struct s_smc *smc, u_short code_s2u, u_short code_s2l)
{
  #line 678 
  u_short change_s2l;
  #line 679 
  u_short change_s2u;
  #line 684 
  if (((int)code_s2u & 85) != 0) 
                                 #line 685 
                                 queue_event(smc,3,18);
  else 
    #line 687 
    if (((int)code_s2l & 4096) != 0) 
                                     #line 688 
                                     queue_event(smc,3,18);
  #line 694 
  change_s2l = (unsigned short)((int)smc->hw.fp.s2l ^ (int)code_s2l);
  #line 695 
  change_s2u = (unsigned short)((int)smc->hw.fp.s2u ^ (int)code_s2u);
  #line 697 
  if (((int)change_s2l & 32768) != 0 || (unsigned int)smc->hw.mac_ring_is_up == 0U && ((int)code_s2l & 32768) != 0) {
    #line 699 
    if (((int)code_s2l & 32768) != 0) {
      #line 700 
      mac_ring_up(smc,1);
      #line 701 
      queue_event(smc,3,1);
      #line 702 
      (smc->mib.m[0].fddiMACRingOp_Ct) ++;
    }
    else {
      #line 705 
      mac_ring_up(smc,0);
      #line 706 
      queue_event(smc,3,2);
    }
    #line 708 
    goto mac2_end;
  }
  #line 710 
  if (((int)code_s2l & 512) != 0) 
                                  #line 711 
                                  (smc->mib.m[0].fddiMACNotCopied_Ct) ++;
  #line 713 
  if (((int)code_s2u & 6144) != 0) {
    #line 715 
    (smc->hw.mac_ct.mac_r_restart_counter) ++;
    #line 717 
    smt_stat_counter(smc,1);
  }
  #line 720 
  if (((int)code_s2u & 1) != 0) 
                                #line 721 
                                queue_event(smc,3,4);
  #line 722 
  if (((int)code_s2u & 2) != 0) 
                                #line 723 
                                queue_event(smc,3,3);
  #line 724 
  if ((((int)change_s2u & (int)code_s2u) & 8) != 0) ;
  #line 727 
  if (((int)code_s2u & 32) != 0 && ((int)code_s2l & 4) == 0) 
                                                             #line 732 
                                                             queue_event(smc,3,5);
  #line 734 
  if (((int)code_s2l & 4) != 0) 
                                #line 742 
                                queue_event(smc,3,7);
  #line 744 
  if ((((int)change_s2u & (int)code_s2u) & 16) != 0) ;
  #line 747 
  if (((int)code_s2l & 1024) != 0 || ((int)code_s2l & 2) != 0) 
                                                               #line 749 
                                                               queue_event(smc,3,6);
  #line 750 
  if (((int)code_s2l & 16384) != 0) {
    #line 756 
    smc->r.dup_addr_test = (unsigned char)2U;
    #line 757 
    queue_event(smc,3,10);
  }
  #line 759 
  if (((int)code_s2u & 4) != 0) 
                                #line 760 
                                (smc->hw.fp.err_stats.err_bec_stat) ++;
  #line 761 
  if (((int)code_s2u & 64) != 0) 
                                 #line 762 
                                 (smc->hw.fp.err_stats.err_clm_stat) ++;
  #line 763 
  if (((int)code_s2l & 2048) != 0) 
                                   #line 764 
                                   (smc->mib.m[0].fddiMACTvxExpired_Ct) ++;
  #line 765 
  if (((int)code_s2u & 68) != 0) 
    #line 766 
    if (((int)change_s2l & 32768) == 0 && ((int)smc->hw.fp.s2l & 32768) != 0) {
      #line 767 
      mac_ring_up(smc,0);
      #line 768 
      queue_event(smc,3,2);
      #line 770 
      mac_ring_up(smc,1);
      #line 771 
      queue_event(smc,3,1);
      #line 772 
      (smc->mib.m[0].fddiMACRingOp_Ct) ++;
    }
  #line 775 
  if (((int)code_s2l & 128) != 0) 
                                  #line 776 
                                  (smc->hw.fp.err_stats.err_phinv) ++;
  #line 777 
  if (((int)code_s2l & 8) != 0) 
                                #line 778 
                                (smc->hw.fp.err_stats.err_sifg_det) ++;
  #line 779 
  if (((int)code_s2l & 4096) != 0) 
                                   #line 780 
                                   (smc->hw.fp.err_stats.err_tkiss) ++;
  #line 781 
  if (((int)code_s2l & 8192) != 0) 
                                   #line 782 
                                   (smc->hw.fp.err_stats.err_tkerr) ++;
  #line 783 
  if (((int)code_s2l & 16) != 0) 
                                 #line 784 
                                 smc->mib.m[0].fddiMACFrame_Ct += 65536UL;
  #line 785 
  if (((int)code_s2l & 32) != 0) 
                                 #line 786 
                                 smc->mib.m[0].fddiMACError_Ct += 65536UL;
  #line 787 
  if (((int)code_s2l & 64) != 0) 
                                 #line 788 
                                 smc->mib.m[0].fddiMACLost_Ct += 65536UL;
  #line 789 
  if (((int)code_s2u & 128) != 0) 
                                  #line 790 
                                  printk((char *)"\001",114,(char *)"ST2U.FM_SERRSF error in special frame");
  #line 792 
  mac2_end: 
            #line 792 
  ;
  #line 794 
  smc->hw.fp.s2l = code_s2l;
  #line 795 
  smc->hw.fp.s2u = code_s2u;
  #line 796 
  iowrite16((unsigned short)58975,smc->hw.iop + 1048U);
  #line 797 
  return;
}

#line 802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void mac3_irq(struct s_smc *smc, u_short code_s3u, u_short code_s3l)
{
  #line 806 
  if (((int)code_s3u & 6144) != 0) {
    #line 808 
    (smc->hw.mac_ct.mac_r_restart_counter) ++;
    #line 809 
    smt_stat_counter(smc,1);
  }
  #line 813 
  if (((int)code_s3u & 8) != 0) 
                                #line 814 
                                printk((char *)"\001",115,(char *)"ST3L: parity error in receive queue 2");
  #line 816 
  if (((int)code_s3u & 4) != 0) 
                                #line 817 
                                printk((char *)"\001",116,(char *)"ST3L: parity error in receive queue 1");
  #line 818 
  return;
}

#line 825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void formac_offline(struct s_smc *smc)
{
  #line 827 
  iowrite16((unsigned short)16,smc->hw.iop + 1028U);
  #line 830 
  ;
  #line 830 
  iowrite16((unsigned short)((int)(((unsigned int)((unsigned short)ioread16(smc->hw.iop + 1088U)) & 63743U) | 1024U)),smc->hw.iop + 1088U);
  #line 833 
  ;
  #line 833 
  iowrite16((unsigned short)((int)((unsigned short)ioread16(smc->hw.iop + 1088U)) & 36863),smc->hw.iop + 1088U);
  #line 835 
  disable_formac(smc);
  #line 836 
  smc->hw.mac_ring_is_up = (unsigned short)0U;
  #line 837 
  smc->hw.hw_state = (unsigned short)0U;
  #line 838 
  return;
}

#line 843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void formac_online(struct s_smc *smc)
{
  #line 845 
  enable_formac(smc);
  #line 846 
  ;
  #line 846 
  ;
  #line 846 
  iowrite16((unsigned short)((int)((((unsigned int)((unsigned short)ioread16(smc->hw.iop + 1088U)) & 34895U) | (unsigned int)smc->hw.fp.rx_mode) | 12416U)),smc->hw.iop + 1088U);
  #line 847 
  return;
}

#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
int init_fplus(struct s_smc *smc)
{
  #line 855 
  smc->hw.fp.nsa_mode = (unsigned short)512U;
  #line 856 
  smc->hw.fp.rx_mode = (unsigned short)0U;
  #line 857 
  smc->hw.fp.group_addr = fddi_broadcast;
  #line 858 
  smc->hw.fp.func_addr = 0UL;
  #line 859 
  smc->hw.fp.frselreg_init = (unsigned short)0U;
  #line 861 
  init_driver_fplus(smc);
  #line 862 
  if ((unsigned int)smc->s.sas == 0U) 
                                      #line 863 
                                      smc->hw.fp.mdr3init = (unsigned short)((unsigned int)smc->hw.fp.mdr3init | 256U);
  #line 865 
  smc->hw.mac_ct.mac_nobuf_counter = 0UL;
  #line 866 
  smc->hw.mac_ct.mac_r_restart_counter = 0UL;
  #line 868 
  smc->hw.fp.fm_st1u = smc->hw.iop + 16U;
  #line 869 
  smc->hw.fp.fm_st1l = smc->hw.iop + 20U;
  #line 870 
  smc->hw.fp.fm_st2u = smc->hw.iop + 24U;
  #line 871 
  smc->hw.fp.fm_st2l = smc->hw.iop + 28U;
  #line 872 
  smc->hw.fp.fm_st3u = smc->hw.iop + 52U;
  #line 873 
  smc->hw.fp.fm_st3l = smc->hw.iop + 56U;
  #line 875 
  smc->hw.fp.s2u = ((unsigned short)0U);
  #line 875 
  smc->hw.fp.s2l = ((unsigned short)0U);
  #line 876 
  smc->hw.mac_ring_is_up = (unsigned short)0U;
  #line 878 
  mac_counter_init(smc);
  #line 881 
  smc->hw.mac_pa.t_neg = 0UL;
  #line 882 
  smc->hw.mac_pa.t_pri = 0UL;
  #line 885 
  mac_do_pci_fix(smc);
  #line 887 
  return init_mac(smc,1);
}

#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static int init_mac(struct s_smc *smc, int all)
{
  #line 893 
  u_short t_max;
  #line 893 
  u_short x;
  #line 894 
  u_long time = 0UL;
  #line 899 
  iowrite16((unsigned short)0,smc->hw.iop + 1088U);
  #line 900 
  set_formac_addr(smc);
  #line 901 
  iowrite16((unsigned short)4096,smc->hw.iop + 1088U);
  #line 903 
  iowrite16((unsigned short)((int)smc->hw.fp.mdr2init),smc->hw.iop + 1152U);
  #line 905 
  if (all != 0) 
                #line 906 
                init_ram(smc);
  else {
    #line 912 
    iowrite8((unsigned char)16,smc->hw.iop + 4U);
    #line 913 
    time = hwt_quick_read(smc);
  }
  #line 919 
  smt_split_up_fifo(smc);
  #line 921 
  init_tx(smc);
  #line 922 
  init_rx(smc);
  #line 923 
  init_rbc(smc);
  #line 925 
  build_claim_beacon(smc,smc->mib.m[0].fddiMACT_Req);
  #line 929 
  iowrite16((unsigned short)57344,smc->hw.iop + 1156U);
  #line 932 
  iowrite16((unsigned short)((int)((unsigned int)smc->hw.fp.rx_mode | 128U)),smc->hw.iop + 1088U);
  #line 933 
  iowrite16((unsigned short)((int)smc->hw.fp.mdr2init),smc->hw.iop + 1152U);
  #line 934 
  iowrite16((unsigned short)((int)smc->hw.fp.mdr3init),smc->hw.iop + 1408U);
  #line 935 
  iowrite16((unsigned short)((int)smc->hw.fp.frselreg_init),smc->hw.iop + 1300U);
  #line 943 
  t_max = (unsigned short)(smc->mib.m[0].fddiMACT_Max / 32UL);
  #line 944 
  x = (unsigned short)((unsigned int)t_max / 39U);
  #line 945 
  x = (unsigned short)((unsigned int)x * 39U);
  #line 946 
  if ((unsigned int)t_max == 65534U || (int)t_max - (int)x == 22) 
                                                                  #line 947 
                                                                  t_max = (u_short)((int)t_max - 1);
  #line 948 
  iowrite16((unsigned short)((int)t_max),smc->hw.iop + 1104U);
  #line 951 
  if (smc->mib.m[0].fddiMACTvxValue <= 18446744073709486615UL) 
                                                               #line 952 
                                                               iowrite16((unsigned short)2,smc->hw.iop + 1108U); else 
                                                                    #line 954 
                                                                    iowrite16((unsigned short)((int)((unsigned short)(smc->mib.m[0].fddiMACTvxValue / 255UL)) & 255),smc->hw.iop + 1108U);
  #line 958 
  iowrite16((unsigned short)17,smc->hw.iop + 1024U);
  #line 959 
  iowrite16((unsigned short)18,smc->hw.iop + 1024U);
  #line 960 
  iowrite16((unsigned short)32,smc->hw.iop + 1024U);
  #line 963 
  iowrite16((unsigned short)65535,smc->hw.iop + 1456U);
  #line 965 
  rtm_init(smc);
  #line 967 
  if (all == 0) {
    #line 971 
    hwt_wait_time(smc,time,125000L);
    #line 972 
    iowrite32(1398016U,smc->hw.iop + 112U);
    #line 973 
    iowrite32(1398016U,smc->hw.iop + 120U);
    #line 974 
    iowrite32(1398016U,smc->hw.iop + 124U);
    #line 975 
    iowrite8((unsigned char)32,smc->hw.iop + 4U);
    #line 976 
    iowrite32(2796032U,smc->hw.iop + 112U);
    #line 977 
    iowrite32(2796032U,smc->hw.iop + 120U);
    #line 978 
    iowrite32(2796032U,smc->hw.iop + 124U);
    #line 979 
    if (smc->hw.hw_is_64bit == 0) {
      #line 980 
      iowrite32(24U,smc->hw.iop + 544U);
      #line 981 
      iowrite32(24U,smc->hw.iop + 672U);
      #line 982 
      iowrite32(24U,smc->hw.iop + 736U);
    }
    #line 984 
    smc->hw.hw_state = (unsigned short)0U;
    #line 985 
    mac_drv_repair_descr(smc);
  }
  #line 987 
  smc->hw.hw_state = (unsigned short)1U;
  #line 989 
  return 0;
}

#line 996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void config_mux(struct s_smc *smc, int mux)
{
  #line 998 
  plc_config_mux(smc,mux);
  #line 1000 
  ;
  #line 1000 
  iowrite16((unsigned short)((int)((unsigned int)((unsigned short)ioread16(smc->hw.iop + 1088U)) | 128U)),smc->hw.iop + 1088U);
  #line 1001 
  return;
}

#line 1010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void sm_mac_check_beacon_claim(struct s_smc *smc)
{
  #line 1013 
  iowrite16((unsigned short)58880,smc->hw.iop + 1048U);
  #line 1015 
  formac_rcv_restart(smc);
  #line 1016 
  process_receive(smc);
  #line 1017 
  return;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void sm_ma_control(struct s_smc *smc, int mode)
{
  #line 1025 
  switch (mode) {
    #line 1026 
    case 5: 
            #line 1026 
    ;
    #line 1028 
    formac_offline(smc);
    #line 1029 
    break;
    #line 1030 
    case 0: 
            #line 1030 
    ;
    #line 1031 
    init_mac(smc,0);
    #line 1032 
    break;
    #line 1033 
    case 1: 
            #line 1033 
    ;
    #line 1034 
    formac_online(smc);
    #line 1035 
    break;
    #line 1036 
    case 3: 
            #line 1036 
    ;
    #line 1037 
    directed_beacon(smc);
    #line 1038 
    break;
    #line 1039 
    case 4: 
            #line 1039 
    ;
    #line 1043 
    break;
  }
  #line 1045 
  return;
}

#line 1047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
int sm_mac_get_tx_state(struct s_smc *smc)
{
  #line 1049 
  return (int)(ioread16(smc->hw.iop + 1092U) >> 4) & 7;
}

#line 1056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static struct s_fpmc *mac_get_mc_table(struct s_smc *smc, struct fddi_addr *user, struct fddi_addr *own, int del, int can)
{
  #line 1061 
  struct s_fpmc *tb;
  #line 1062 
  struct s_fpmc *slot;
  #line 1063 
  u_char *p;
  #line 1064 
  int i;
  #line 1069 
  *own = *user;
  #line 1070 
  if (can != 0) {
    #line 1071 
    p = (u_char *)(& own->a);
    #line 1072 
    i = 0;
    #line 1072 
    while (i <= 5) {
      #line 1073 
      unsigned char ___x;
      #line 1073 
      int tmp_1;
      {
        #line 1073 
        unsigned char __x = *p;
        #line 1073 
        if (0 != 0) {
          #line 1073 
          ___x = __x;
          #line 1073 
          ___x = (unsigned char)(((int)___x >> 4) | ((int)___x << 4));
          #line 1073 
          ___x = (unsigned char)((((int)___x >> 2) & 51) | (((int)___x << 2) & -52));
          #line 1073 
          ___x = (unsigned char)((((int)___x >> 1) & 85) | (((int)___x << 1) & -86));
          #line 1073 
          tmp_1 = (int)___x;
        }
        else {
          #line 1073 
          tmp_1 = (int)__bitrev8((unsigned char)((int)__x));
        }
        }
      #line 1073 
      *p = (unsigned char)tmp_1;
      #line 1072 
      i ++;
      #line 1072 
      p ++;
    }
  }
  #line 1075 
  slot = (struct s_fpmc *)0;
  #line 1076 
  i = 0;
  #line 1076 
  tb = (struct s_fpmc *)(& smc->hw.fp.mc.table);
  #line 1076 
  while (i <= 31) {
    {
      #line 1077 
      if ((unsigned int)tb->n == 0U) {
        #line 1078 
        if (del == 0 && slot == (struct s_fpmc *)0) 
                                                    #line 1079 
                                                    slot = tb;
        #line 1080 
        goto __Cont;
      }
      #line 1082 
      if (! ether_addr_equal((unsigned char *)(& tb->a),(unsigned char *)own)) 
        #line 1083 
        goto __Cont;
      #line 1084 
      return tb;
    }
    #line 1076 
    __Cont: 
            #line 1076 
    i ++;
    #line 1076 
    tb ++;
  }
  #line 1086 
  return slot;
}

#line 1100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void mac_clear_multicast(struct s_smc *smc)
{
  #line 1102 
  struct s_fpmc *tb;
  #line 1103 
  int i;
  #line 1105 
  smc->hw.fp.os_slots_used = 0;
  #line 1107 
  i = 0;
  #line 1107 
  tb = (struct s_fpmc *)(& smc->hw.fp.mc.table);
  #line 1107 
  while (i <= 31) {
    #line 1108 
    if ((unsigned int)tb->perm == 0U) 
                                      #line 1109 
                                      tb->n = (unsigned char)0U;
    #line 1107 
    i ++;
    #line 1107 
    tb ++;
  }
  #line 1110 
  return;
}

#line 1142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
int mac_add_multicast(struct s_smc *smc, struct fddi_addr *addr, int can)
{
  #line 1144 
  struct fddi_addr own;
  #line 1145 
  struct s_fpmc *tb;
  #line 1150 
  if ((can & 128) != 0) {
    #line 1151 
    if (smc->hw.fp.smt_slots_used > 3) 
                                       #line 1152 
                                       return 1;
  }
  else 
    #line 1156 
    if (smc->hw.fp.os_slots_used > 27) 
                                       #line 1157 
                                       return 1;
  #line 1164 
  tb = mac_get_mc_table(smc,addr,& own,0,can & -129);
  #line 1164 
  if (tb == (struct s_fpmc *)0) 
                                #line 1165 
                                return 1;
  #line 1166 
  tb->n = (u_char)((int)tb->n + 1);
  #line 1167 
  tb->a = own;
  #line 1168 
  tb->perm = (unsigned char)((unsigned int)((unsigned char)(can >> 7)) & 1U);
  #line 1170 
  if ((can & 128) != 0) 
                        #line 1171 
                        (smc->hw.fp.smt_slots_used) ++; else 
                                                             #line 1173 
                                                             (smc->hw.fp.os_slots_used) ++;
  #line 1175 
  return 0;
}

#line 1196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void mac_update_multicast(struct s_smc *smc)
{
  #line 1198 
  struct s_fpmc *tb;
  #line 1199 
  u_char *fu;
  #line 1200 
  int i;
  #line 1205 
  iowrite16((unsigned short)0,smc->hw.iop + 1728U);
  #line 1210 
  if (smc->hw.fp.func_addr != 0UL) {
    #line 1211 
    fu = (u_char *)(& smc->hw.fp.func_addr);
    #line 1212 
    iowrite16((unsigned short)65535,smc->hw.iop + 1776U);
    #line 1213 
    iowrite16((unsigned short)(~ (((int)((unsigned short)*fu) << 8U) + (int)((unsigned short)*(fu + 1U)))),smc->hw.iop + 1784U);
    #line 1214 
    iowrite16((unsigned short)(~ (((int)((unsigned short)*(fu + 2U)) << 8U) + (int)((unsigned short)*(fu + 3U)))),smc->hw.iop + 1792U);
    #line 1215 
    iowrite16((unsigned short)3,smc->hw.iop + 1800U);
    #line 1216 
    iowrite16((unsigned short)49152,smc->hw.iop + 1752U);
    #line 1217 
    iowrite16((unsigned short)0,smc->hw.iop + 1760U);
    #line 1218 
    iowrite16((unsigned short)0,smc->hw.iop + 1768U);
    #line 1219 
    iowrite16((unsigned short)1,smc->hw.iop + 1728U);
  }
  #line 1225 
  iowrite16((unsigned short)65535,smc->hw.iop + 1792U);
  #line 1226 
  iowrite16((unsigned short)65535,smc->hw.iop + 1784U);
  #line 1227 
  iowrite16((unsigned short)65535,smc->hw.iop + 1776U);
  #line 1228 
  iowrite16((unsigned short)3,smc->hw.iop + 1800U);
  #line 1230 
  i = 0;
  #line 1230 
  tb = (struct s_fpmc *)(& smc->hw.fp.mc.table);
  #line 1230 
  while (i <= 31) {
    #line 1231 
    if ((unsigned int)tb->n != 0U) {
      {
        #line 1232 
        unsigned int k = 10U;
        #line 1232 
        while (1) {
          #line 1232 
          if ((ioread16(smc->hw.iop + 1736U) & 32768U) == 0U) {
            #line 1232 
            if (! (k != 0U)) 
                             #line 1232 
                             break;
          }
          else 
               #line 1232 
               break;
          #line 1232 
          k --;
        }
        #line 1232 
        if (k == 0U) 
                     #line 1232 
                     printk((char *)"\001",131,(char *)(& cam_warning));
      }
      #line 1237 
      iowrite16((unsigned short)(((int)((unsigned short)tb->a.a[0]) << 8U) + (int)((unsigned short)tb->a.a[1])),smc->hw.iop + 1752U);
      #line 1239 
      iowrite16((unsigned short)(((int)((unsigned short)tb->a.a[2]) << 8U) + (int)((unsigned short)tb->a.a[3])),smc->hw.iop + 1760U);
      #line 1241 
      iowrite16((unsigned short)(((int)((unsigned short)tb->a.a[4]) << 8U) + (int)((unsigned short)tb->a.a[5])),smc->hw.iop + 1768U);
      #line 1243 
      iowrite16((unsigned short)1,smc->hw.iop + 1728U);
    }
    #line 1230 
    i ++;
    #line 1230 
    tb ++;
  }
  #line 1245 
  return;
}

#line 1272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void mac_set_rx_mode(struct s_smc *smc, int mode)
{
  #line 1274 
  switch (mode) {
    #line 1275 
    case 1: 
            #line 1275 
    ;
    #line 1276 
    smc->hw.fp.rx_prom = (unsigned short)((unsigned int)smc->hw.fp.rx_prom | 2U);
    #line 1277 
    break;
    #line 1278 
    case 2: 
            #line 1278 
    ;
    #line 1279 
    smc->hw.fp.rx_prom = (unsigned short)((unsigned int)smc->hw.fp.rx_prom & 65533U);
    #line 1280 
    break;
    #line 1281 
    case 3: 
            #line 1281 
    ;
    #line 1282 
    smc->hw.fp.rx_prom = (unsigned short)((unsigned int)smc->hw.fp.rx_prom | 1U);
    #line 1283 
    break;
    #line 1284 
    case 4: 
            #line 1284 
    ;
    #line 1285 
    smc->hw.fp.rx_prom = (unsigned short)((unsigned int)smc->hw.fp.rx_prom & 65534U);
    #line 1286 
    break;
    #line 1287 
    case 5: 
            #line 1287 
    ;
    #line 1288 
    smc->hw.fp.nsa_mode = (unsigned short)0U;
    #line 1289 
    smc->hw.fp.rx_mode = (unsigned short)(((int)smc->hw.fp.rx_mode & -1793) | (int)smc->hw.fp.nsa_mode);
    #line 1291 
    break;
    #line 1292 
    case 6: 
            #line 1292 
    ;
    #line 1293 
    smc->hw.fp.nsa_mode = (unsigned short)512U;
    #line 1294 
    smc->hw.fp.rx_mode = (unsigned short)(((int)smc->hw.fp.rx_mode & -1793) | (int)smc->hw.fp.nsa_mode);
    #line 1296 
    break;
  }
  #line 1298 
  if (((int)smc->hw.fp.rx_prom & 1) != 0) 
                                          #line 1299 
                                          smc->hw.fp.rx_mode = (unsigned short)1536U;
  else 
    #line 1301 
    if (((int)smc->hw.fp.rx_prom & 2) != 0) 
                                            #line 1302 
                                            smc->hw.fp.rx_mode = (unsigned short)((unsigned int)smc->hw.fp.nsa_mode | 16U); else 
                                                                    #line 1305 
                                                                    smc->hw.fp.rx_mode = smc->hw.fp.nsa_mode;
  #line 1306 
  ;
  #line 1306 
  ;
  #line 1306 
  iowrite16((unsigned short)((int)(((unsigned int)((unsigned short)ioread16(smc->hw.iop + 1088U)) & 63695U) | (unsigned int)smc->hw.fp.rx_mode)),smc->hw.iop + 1088U);
  #line 1307 
  mac_update_multicast(smc);
  #line 1308 
  return;
}

#line 1328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void rtm_irq(struct s_smc *smc)
{
  #line 1330 
  iowrite16((unsigned short)1,smc->hw.iop + 328U);
  #line 1331 
  if ((ioread16(smc->hw.iop + 328U) & 8U) != 0U) 
                                                 #line 1332 
                                                 iowrite16((unsigned short)5,smc->hw.iop + 1024U);
  #line 1338 
  iowrite16((unsigned short)4,smc->hw.iop + 328U);
  #line 1339 
  return;
}

#line 1341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void rtm_init(struct s_smc *smc)
{
  #line 1343 
  iowrite32(0U,smc->hw.iop + 320U);
  #line 1344 
  iowrite16((unsigned short)4,smc->hw.iop + 328U);
  #line 1345 
  return;
}

#line 1347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void rtm_set_timer(struct s_smc *smc)
{
  #line 1354 
  iowrite32((unsigned int)smc->mib.a[0].fddiPATHT_Rmode,smc->hw.iop + 320U);
  #line 1355 
  return;
}

#line 1357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
static void smt_split_up_fifo(struct s_smc *smc)
{
  #line 1389 
  switch (0) {
    #line 1390 
    case 0: 
            #line 1390 
    ;
    #line 1391 
    smc->hw.fp.fifo.rx1_fifo_size = (unsigned short)16351U;
    #line 1392 
    smc->hw.fp.fifo.rx2_fifo_size = (unsigned short)0U;
    #line 1393 
    break;
    #line 1394 
    case 1: 
            #line 1394 
    ;
    #line 1395 
    case 2: 
            #line 1395 
    ;
    #line 1396 
    case 3: 
            #line 1396 
    ;
    #line 1397 
    smc->hw.fp.fifo.rx1_fifo_size = (unsigned short)14047U;
    #line 1398 
    smc->hw.fp.fifo.rx2_fifo_size = (unsigned short)2304U;
    #line 1399 
    break;
    #line 1400 
    default: 
             #line 1400 
    ;
    #line 1401 
    smc->hw.fp.fifo.rx1_fifo_size = (unsigned short)16351U;
    #line 1403 
    smc->hw.fp.fifo.rx2_fifo_size = (unsigned short)16384U;
    #line 1405 
    break;
  }
  #line 1430 
  if (smc->mib.a[0].fddiPATHSbaPayload != 0UL) 
                                               #line 1432 
                                               smc->hw.fp.fifo.fifo_config_mode = (unsigned short)((unsigned int)((int)smc->hw.fp.fifo.fifo_config_mode | (int)((unsigned short)smc->mib.fddiESSSynchTxMode)) | 2U); else 
                                                                    #line 1437 
                                                                    smc->hw.fp.fifo.fifo_config_mode = (unsigned short)((unsigned int)smc->hw.fp.fifo.fifo_config_mode & 65532U);
  #line 1444 
  if (((int)smc->hw.fp.fifo.fifo_config_mode & 2) != 0) 
    #line 1445 
    if (((int)smc->hw.fp.fifo.fifo_config_mode & 1) != 0) {
      #line 1446 
      smc->hw.fp.fifo.tx_s_size = (unsigned short)14080U;
      #line 1447 
      smc->hw.fp.fifo.tx_a0_size = (unsigned short)2304U;
    }
    else {
      #line 1450 
      smc->hw.fp.fifo.tx_s_size = (unsigned short)8192U;
      #line 1451 
      smc->hw.fp.fifo.tx_a0_size = (unsigned short)8192U;
    }
  else {
    #line 1455 
    smc->hw.fp.fifo.tx_s_size = (unsigned short)0U;
    #line 1456 
    smc->hw.fp.fifo.tx_a0_size = (unsigned short)16384U;
  }
  #line 1459 
  smc->hw.fp.fifo.rx1_fifo_start = (unsigned short)((unsigned int)smc->hw.fp.fifo.rbc_ram_start + 33U);
  #line 1461 
  smc->hw.fp.fifo.tx_s_start = (unsigned short)((int)smc->hw.fp.fifo.rx1_fifo_start + (int)smc->hw.fp.fifo.rx1_fifo_size);
  #line 1463 
  smc->hw.fp.fifo.tx_a0_start = (unsigned short)((int)smc->hw.fp.fifo.tx_s_start + (int)smc->hw.fp.fifo.tx_s_size);
  #line 1465 
  smc->hw.fp.fifo.rx2_fifo_start = (unsigned short)((int)smc->hw.fp.fifo.tx_a0_start + (int)smc->hw.fp.fifo.tx_a0_size);
  #line 1475 
  return;
}

#line 1477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/fplustm.c"
void formac_reinit_tx(struct s_smc *smc)
{
  #line 1484 
  if ((unsigned int)smc->hw.fp.fifo.tx_s_size == 0U && smc->mib.a[0].fddiPATHSbaPayload != 0UL) 
    #line 1485 
    init_mac(smc,0);
  #line 1486 
  return;
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ecm.c"
void ecm(struct s_smc *smc, int event);
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ecm.c"
void ecm_init(struct s_smc *smc);
#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 566 
int cfm_get_mac_input(struct s_smc *smc);
#line 567 
#line 567 
int cfm_get_mac_output(struct s_smc *smc);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ecm.c"
#line 136 
static void ecm_fsm(struct s_smc *smc, int cmd);
#line 91 
#line 514 
static void start_ecm_timer(struct s_smc *smc, u_long value, int event);
#line 92 
#line 523 
static void stop_ecm_timer(struct s_smc *smc);
#line 93 
#line 418 
static void prop_actions(struct s_smc *smc);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ecm.c"
void ecm_init(struct s_smc *smc)
{
  #line 101 
  smc->e.path_test = (unsigned char)2U;
  #line 102 
  smc->e.trace_prop = 0UL;
  #line 103 
  smc->e.sb_flag = (unsigned char)0U;
  #line 104 
  smc->mib.fddiSMTECMState = (unsigned short)16U;
  #line 105 
  smc->e.ecm_line_state = (unsigned char)0U;
  #line 106 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ecm.c"
void ecm(struct s_smc *smc, int event)
{
  #line 119 
  int state;
  #line 121 
  while (1) {
    #line 126 
    state = (int)smc->mib.fddiSMTECMState;
    #line 127 
    ecm_fsm(smc,event);
    #line 128 
    event = 0;
    #line 129 
    if (! ((int)smc->mib.fddiSMTECMState != state)) 
                                                    #line 121 
                                                    break;
  }
  #line 130 
  ecm_state_change(smc,(int)smc->mib.fddiSMTECMState);
  #line 131 
  return;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ecm.c"
static void ecm_fsm(struct s_smc *smc, int cmd)
{
  #line 138 
  int ls_a;
  #line 139 
  int ls_b;
  #line 140 
  int p;
  #line 143 
  smc->mib.fddiSMTBypassPresent = (unsigned char)sm_pm_bypass_present(smc);
  #line 144 
  if (cmd == 1) 
                #line 145 
                smc->mib.fddiSMTRemoteDisconnectFlag = (unsigned char)0U;
  #line 149 
  int tmp_2 = (cmd == 2 && (unsigned int)smc->mib.fddiSMTRemoteDisconnectFlag == 1U) != 0;
  #line 156 
  if (cmd == 1) 
                #line 157 
                smc->e.DisconnectFlag = (unsigned char)0U;
  else 
    #line 159 
    if (cmd == 2) 
                  #line 160 
                  smc->e.DisconnectFlag = (unsigned char)1U;
  #line 163 
  switch ((int)smc->mib.fddiSMTECMState) {
    #line 164 
    case 16: 
             #line 164 
    ;
    #line 168 
    smc->e.path_test = (unsigned char)2U;
    #line 169 
    smc->e.ecm_line_state = (unsigned char)0U;
    #line 170 
    stop_ecm_timer(smc);
    #line 171 
    smc->mib.fddiSMTECMState = (unsigned short)((unsigned int)smc->mib.fddiSMTECMState & 65519U);
    #line 172 
    break;
    #line 173 
    case 0: 
            #line 173 
    ;
    #line 175 
    if ((cmd == 1 && (unsigned int)smc->mib.fddiSMTBypassPresent == 0U) && (unsigned int)smc->e.path_test == 2U) {
      #line 177 
      smc->mib.fddiSMTECMState = (unsigned short)17U;
      #line 178 
      break;
    }
    else 
      #line 181 
      if (((cmd == 1 && (unsigned int)smc->e.path_test == 2U) && (unsigned int)smc->mib.fddiSMTBypassPresent != 0U) && (unsigned int)smc->s.sas == 0U) {
        #line 184 
        smc->mib.fddiSMTECMState = (unsigned short)21U;
        #line 185 
        break;
      }
    #line 187 
    break;
    #line 188 
    case 17: 
             #line 188 
    ;
    #line 189 
    stop_ecm_timer(smc);
    #line 190 
    smc->e.trace_prop = 0UL;
    #line 191 
    sm_ma_control(smc,4);
    #line 192 
    p = 0;
    #line 192 
    while (p <= 1) {
      #line 193 
      if ((unsigned int)smc->mib.p[p].fddiPORTHardwarePresent != 0U) 
        #line 194 
        queue_event(smc,p + 5,1);
      #line 192 
      p ++;
    }
    #line 195 
    smc->mib.fddiSMTECMState = (unsigned short)((unsigned int)smc->mib.fddiSMTECMState & 65519U);
    #line 196 
    break;
    #line 197 
    case 1: 
            #line 197 
    ;
    #line 199 
    if (cmd == 3) {
      #line 200 
      prop_actions(smc);
      #line 201 
      smc->mib.fddiSMTECMState = (unsigned short)18U;
      #line 202 
      break;
    }
    else 
      #line 205 
      if (cmd == 2) {
        #line 206 
        smc->mib.fddiSMTECMState = (unsigned short)19U;
        #line 207 
        break;
      }
    #line 209 
    break;
    #line 210 
    case 18: 
             #line 210 
    ;
    #line 211 
    start_ecm_timer(smc,smc->mib.fddiSMTTrace_MaxExpiration / 12UL,6);
    #line 213 
    smc->mib.fddiSMTECMState = (unsigned short)((unsigned int)smc->mib.fddiSMTECMState & 65519U);
    #line 214 
    break;
    #line 215 
    case 2: 
            #line 215 
    ;
    #line 217 
    if (cmd == 3) {
      #line 218 
      prop_actions(smc);
      #line 219 
      smc->mib.fddiSMTECMState = (unsigned short)18U;
      #line 220 
      break;
    }
    else 
      #line 223 
      if (cmd == 2) {
        #line 224 
        smc->e.path_test = (unsigned char)5U;
        #line 225 
        smc->mib.fddiSMTECMState = (unsigned short)19U;
        #line 226 
        break;
      }
      else 
        #line 229 
        if ((unsigned int)smc->e.path_test == 4U) {
          #line 230 
          smc->mib.fddiSMTECMState = (unsigned short)19U;
          #line 231 
          break;
        }
        else 
          #line 234 
          if (cmd == 6) {
            #line 240 
            smc->e.path_test = (unsigned char)4U;
            #line 241 
            smc->mib.fddiSMTECMState = (unsigned short)19U;
            #line 242 
            break;
          }
    #line 244 
    break;
    #line 245 
    case 19: 
             #line 245 
    ;
    #line 246 
    start_ecm_timer(smc,smc->s.ecm_td_min,5);
    #line 247 
    p = 0;
    #line 247 
    while (p <= 1) {
      #line 248 
      queue_event(smc,p + 5,2);
      #line 247 
      p ++;
    }
    #line 249 
    smc->mib.fddiSMTECMState = (unsigned short)((unsigned int)smc->mib.fddiSMTECMState & 65519U);
    #line 250 
    break;
    #line 251 
    case 3: 
            #line 251 
    ;
    #line 253 
    if ((cmd == 5 && (unsigned int)smc->mib.fddiSMTBypassPresent == 0U) && (unsigned int)smc->e.path_test != 4U) {
      #line 255 
      smc->mib.fddiSMTECMState = (unsigned short)16U;
      #line 256 
      break;
    }
    else 
      #line 259 
      if (cmd == 5 && (unsigned int)smc->e.path_test == 4U) {
        #line 261 
        smc->mib.fddiSMTECMState = (unsigned short)20U;
        #line 262 
        break;
      }
      else 
        #line 265 
        if (cmd == 1 && (unsigned int)smc->e.path_test == 2U) {
          #line 266 
          smc->mib.fddiSMTECMState = (unsigned short)17U;
          #line 267 
          break;
        }
        else 
          #line 270 
          if (cmd == 2 && (unsigned int)smc->e.path_test == 4U) 
                                                                #line 272 
                                                                smc->e.path_test = (unsigned char)5U;
          else 
            #line 278 
            if ((cmd == 5 && (unsigned int)smc->mib.fddiSMTBypassPresent != 0U) && (unsigned int)smc->e.path_test != 4U) {
              #line 281 
              smc->mib.fddiSMTECMState = (unsigned short)23U;
              #line 282 
              break;
            }
    #line 284 
    break;
    #line 285 
    case 20: 
             #line 285 
    ;
    #line 286 
    stop_ecm_timer(smc);
    #line 287 
    smc->e.path_test = (unsigned char)1U;
    #line 288 
    start_ecm_timer(smc,smc->s.ecm_test_done,9);
    #line 290 
    smc->mib.fddiSMTECMState = (unsigned short)((unsigned int)smc->mib.fddiSMTECMState & 65519U);
    #line 291 
    break;
    #line 292 
    case 4: 
            #line 292 
    ;
    #line 294 
    if (cmd == 9) 
                  #line 295 
                  smc->e.path_test = (unsigned char)2U;
    #line 297 
    if ((unsigned int)smc->e.path_test == 3U) {
      #line 298 
      smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 2048U));
      #line 298 
      ;
      #line 298 
      ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 2048U)));
    }
    #line 301 
    if ((unsigned int)smc->e.path_test == 3U && (unsigned int)smc->mib.fddiSMTBypassPresent == 0U) {
      #line 303 
      smc->mib.fddiSMTECMState = (unsigned short)16U;
      #line 304 
      break;
    }
    else 
      #line 307 
      if (cmd == 2 && (unsigned int)smc->mib.fddiSMTBypassPresent == 0U) {
        #line 309 
        smc->mib.fddiSMTECMState = (unsigned short)16U;
        #line 310 
        break;
      }
      else 
        #line 313 
        if ((unsigned int)smc->e.path_test == 2U) {
          #line 314 
          smc->mib.fddiSMTECMState = (unsigned short)17U;
          #line 315 
          break;
        }
        else 
          #line 318 
          if ((unsigned int)smc->e.path_test == 3U && (unsigned int)smc->mib.fddiSMTBypassPresent != 0U) {
            #line 320 
            smc->mib.fddiSMTECMState = (unsigned short)23U;
            #line 321 
            break;
          }
          else 
            #line 324 
            if (cmd == 2 && (unsigned int)smc->mib.fddiSMTBypassPresent != 0U) {
              #line 326 
              smc->mib.fddiSMTECMState = (unsigned short)23U;
              #line 327 
              break;
            }
    #line 329 
    break;
    #line 330 
    case 21: 
             #line 330 
    ;
    #line 331 
    sm_pm_bypass_req(smc,1);
    #line 332 
    start_ecm_timer(smc,smc->s.ecm_in_max,8);
    #line 333 
    smc->mib.fddiSMTECMState = (unsigned short)((unsigned int)smc->mib.fddiSMTECMState & 65519U);
    #line 334 
    break;
    #line 335 
    case 5: 
            #line 335 
    ;
    #line 337 
    if (cmd == 8) {
      #line 338 
      smc->mib.fddiSMTECMState = (unsigned short)22U;
      #line 339 
      break;
    }
    else 
      #line 342 
      if (cmd == 2) {
        #line 343 
        smc->mib.fddiSMTECMState = (unsigned short)23U;
        #line 344 
        break;
      }
    #line 346 
    break;
    #line 347 
    case 22: 
             #line 347 
    ;
    #line 352 
    start_ecm_timer(smc,smc->s.ecm_check_poll,0);
    #line 353 
    smc->e.ecm_line_state = (unsigned char)1U;
    #line 354 
    smc->mib.fddiSMTECMState = (unsigned short)((unsigned int)smc->mib.fddiSMTECMState & 65519U);
    #line 355 
    break;
    #line 356 
    case 6: 
            #line 356 
    ;
    #line 357 
    ls_a = sm_pm_get_ls(smc,0);
    #line 358 
    ls_b = sm_pm_get_ls(smc,1);
    #line 361 
    if ((ls_a == 12 || ls_a == 15) && (ls_b == 12 || ls_b == 15)) {
      #line 363 
      smc->e.sb_flag = (unsigned char)0U;
      #line 364 
      smc->e.ecm_line_state = (unsigned char)0U;
      #line 365 
      smc->mib.fddiSMTECMState = (unsigned short)17U;
      #line 366 
      break;
    }
    else 
      #line 369 
      if ((unsigned int)smc->e.sb_flag == 0U && (ls_a == 13 && ls_b == 12 || ls_a == 12 && ls_b == 13)) 
        #line 372 
        smc->e.sb_flag = (unsigned char)1U;
      else 
        #line 379 
        if (cmd == 2) {
          #line 380 
          smc->e.ecm_line_state = (unsigned char)0U;
          #line 381 
          smc->mib.fddiSMTECMState = (unsigned short)23U;
          #line 382 
          break;
        }
        else 
             #line 388 
             start_ecm_timer(smc,smc->s.ecm_check_poll,0);
    #line 390 
    break;
    #line 391 
    case 23: 
             #line 391 
    ;
    #line 392 
    sm_pm_bypass_req(smc,0);
    #line 393 
    start_ecm_timer(smc,smc->s.ecm_i_max,7);
    #line 394 
    smc->mib.fddiSMTECMState = (unsigned short)((unsigned int)smc->mib.fddiSMTECMState & 65519U);
    #line 395 
    break;
    #line 396 
    case 7: 
            #line 396 
    ;
    #line 398 
    if (cmd == 7) {
      #line 399 
      smc->mib.fddiSMTECMState = (unsigned short)16U;
      #line 400 
      break;
    }
    else 
      #line 403 
      if (cmd == 1 && (unsigned int)smc->e.path_test == 2U) {
        #line 404 
        smc->mib.fddiSMTECMState = (unsigned short)21U;
        #line 405 
        break;
      }
    #line 407 
    break;
    #line 408 
    default: 
             #line 408 
    ;
    #line 409 
    printk((char *)"\001",107,(char *)"ECM : invalid state");
    #line 410 
    break;
  }
  #line 412 
  return;
}

#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ecm.c"
static void prop_actions(struct s_smc *smc)
{
  #line 420 
  int port_in = 0;
  #line 421 
  int port_out = 0;
  #line 423 
  smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 4U));
  #line 423 
  ;
  #line 423 
  ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 4U)));
  #line 424 
  switch ((int)smc->s.sas) {
    #line 425 
    case 1: 
            #line 425 
    ;
    #line 426 
    port_out = pcm_get_s_port(smc);
    #line 426 
    port_in = port_out;
    #line 427 
    break;
    #line 428 
    case 0: 
            #line 428 
    ;
    #line 429 
    port_in = cfm_get_mac_input(smc);
    #line 430 
    port_out = cfm_get_mac_output(smc);
    #line 431 
    break;
    #line 432 
    case 2: 
            #line 432 
    ;
    #line 433 
    printk((char *)"\001",108,(char *)"prop_actions : NAC in DAS CFM");
    #line 434 
    return;
  }
  #line 440 
  if ((smc->e.trace_prop & 4UL) != 0UL) 
                                        #line 443 
                                        queue_event(smc,port_in + 5,8);
  else 
    #line 445 
    if ((smc->e.trace_prop & 1UL) != 0UL && port_out != 0) 
                                                           #line 449 
                                                           queue_event(smc,6,8);
    else 
      #line 451 
      if ((smc->e.trace_prop & 2UL) != 0UL && port_out != 1) 
                                                             #line 455 
                                                             queue_event(smc,5,8); else 
                                                                    #line 460 
                                                                    smc->e.path_test = (unsigned char)4U;
  #line 462 
  smc->e.trace_prop = 0UL;
  #line 463 
  return;
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ecm.c"
static void start_ecm_timer(struct s_smc *smc, u_long value, int event)
{
  #line 516 
  smt_timer_start(smc,& smc->e.ecm_timer,value,(unsigned long)(event | 65536));
  #line 517 
  return;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ecm.c"
static void stop_ecm_timer(struct s_smc *smc)
{
  #line 525 
  if ((unsigned int)smc->e.ecm_timer.tm_active != 0U) 
                                                      #line 526 
                                                      smt_timer_stop(smc,& smc->e.ecm_timer);
  #line 527 
  return;
}

#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 502 
void cfm(struct s_smc *smc, int event);
#line 521 
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/queue.c"
void ev_init(struct s_smc *smc);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/queue.c"
void ev_init(struct s_smc *smc)
{
  #line 32 
  smc->q.ev_get = ((struct event_queue *)(& smc->q.ev_queue));
  #line 32 
  smc->q.ev_put = ((struct event_queue *)(& smc->q.ev_queue));
  #line 33 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/queue.c"
void queue_event(struct s_smc *smc, int class, int event)
{
  #line 41 
  (smc->q.ev_put)->class = (unsigned short)class;
  #line 42 
  (smc->q.ev_put)->event = (unsigned short)event;
  #line 43 
  (smc->q.ev_put) ++;
  #line 43 
  ;
  #line 43 
  if (smc->q.ev_put == & smc->q.ev_queue[64]) 
                                              #line 44 
                                              smc->q.ev_put = (struct event_queue *)(& smc->q.ev_queue);
  #line 46 
  if (smc->q.ev_put == smc->q.ev_get) 
                                      #line 47 
                                      printk((char *)"\001",137,(char *)"SMT: queue overrun");
  #line 48 
  return;
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/queue.c"
void timer_event(struct s_smc *smc, u_long token)
{
  #line 59 
  queue_event(smc,(int)(token >> 16) & 65535,(int)token & 65535);
  #line 60 
  return;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/queue.c"
void ev_dispatcher(struct s_smc *smc)
{
  #line 71 
  struct event_queue *ev;
  #line 72 
  int class;
  #line 74 
  ev = smc->q.ev_get;
  #line 76 
  while (smc->q.ev_put != ev) {
    #line 78 
    class = (int)ev->class;
    #line 78 
    switch (class) {
      #line 79 
      case 1: 
              #line 79 
      ;
      #line 80 
      ecm(smc,(int)ev->event);
      #line 81 
      break;
      #line 82 
      case 2: 
              #line 82 
      ;
      #line 83 
      cfm(smc,(int)ev->event);
      #line 84 
      break;
      #line 85 
      case 3: 
              #line 85 
      ;
      #line 86 
      rmt(smc,(int)ev->event);
      #line 87 
      break;
      #line 88 
      case 4: 
              #line 88 
      ;
      #line 89 
      smt_event(smc,(int)ev->event);
      #line 90 
      break;
      #line 96 
      case 5: 
              #line 96 
      ;
      #line 97 
      case 6: 
              #line 97 
      ;
      #line 98 
      default: 
               #line 98 
      ;
      #line 99 
      if ((unsigned int)class + 4294967291U <= 1U) {
        #line 101 
        pcm(smc,class + -5,(int)ev->event);
        #line 102 
        break;
      }
      #line 104 
      printk((char *)"\001",121,(char *)"invalid event in dispatcher");
      #line 105 
      return;
    }
    #line 108 
    ev ++;
    #line 108 
    ;
    #line 108 
    if (ev == & smc->q.ev_queue[64]) 
                                     #line 109 
                                     ev = (struct event_queue *)(& smc->q.ev_queue);
    #line 112 
    smc->q.ev_get = ev;
  }
  #line 114 
  return;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/queue.c"
u_short smt_online(struct s_smc *smc, int on)
{
  #line 125 
  int tmp;
  #line 125 
  if (on != 0) 
               #line 125 
               tmp = 1; else 
                             #line 125 
                             tmp = 2;
  #line 125 
  ;
  #line 125 
  queue_event(smc,1,tmp);
  #line 126 
  ev_dispatcher(smc);
  #line 127 
  return smc->mib.fddiSMTCF_State;
}

#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
void cfm_init(struct s_smc *smc);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
static unsigned char cf_to_ptype[13U] = {(unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, [10] = (unsigned char)1U, (unsigned char)2U, (unsigned char)1U};
#line 93 
#line 279 
static void cfm_fsm(struct s_smc *smc, int cmd);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
void cfm_init(struct s_smc *smc)
{
  #line 101 
  smc->mib.fddiSMTCF_State = (unsigned short)16U;
  #line 102 
  smc->r.rm_join = (unsigned char)0U;
  #line 103 
  smc->r.rm_loop = (unsigned char)0U;
  #line 104 
  smc->y[0].scrub = (unsigned char)0U;
  #line 105 
  smc->y[1].scrub = (unsigned char)0U;
  #line 106 
  smc->y[0].cem_pst = 0;
  #line 107 
  smc->y[1].cem_pst = 0;
  #line 108 
  return;
}

#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
static void selection_criteria(struct s_smc *smc, struct s_phy *phy)
{
  #line 117 
  switch ((int)(phy->mib)->fddiPORTMy_Type) {
    #line 118 
    case 0: 
            #line 118 
    ;
    #line 119 
    if (((unsigned int)smc->y[0].pc_mode == 2U || (unsigned int)smc->y[1].pc_mode == 2U) && (unsigned int)smc->y[1].cf_join != 0U) 
      #line 120 
      phy->wc_flag = (unsigned char)1U; else 
                                             #line 122 
                                             phy->wc_flag = (unsigned char)0U;
    #line 125 
    break;
    #line 126 
    case 1: 
            #line 126 
    ;
    #line 128 
    phy->wc_flag = (unsigned char)0U;
    #line 129 
    break;
    #line 130 
    case 2: 
            #line 130 
    ;
    #line 131 
    phy->wc_flag = (unsigned char)0U;
    #line 132 
    break;
    #line 133 
    case 3: 
            #line 133 
    ;
    #line 134 
    phy->wc_flag = (unsigned char)0U;
    #line 135 
    break;
  }
  #line 137 
  return;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
void all_selection_criteria(struct s_smc *smc)
{
  #line 142 
  struct s_phy *phy;
  #line 143 
  int p;
  #line 145 
  p = 0;
  #line 145 
  phy = (struct s_phy *)(& smc->y);
  #line 145 
  while (p <= 1) {
    #line 147 
    selection_criteria(smc,phy);
    #line 145 
    p ++;
    #line 145 
    phy ++;
  }
  #line 148 
  return;
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
static void cem_priv_state(struct s_smc *smc, int event)
{
  #line 154 
  int np;
  #line 155 
  int i;
  #line 158 
  if ((unsigned int)smc->s.sas != 0U) 
                                      #line 159 
                                      return;
  #line 161 
  np = event + -3;
  #line 163 
  if ((unsigned int)np > 1U) 
                             #line 164 
                             return;
  #line 167 
  if ((unsigned int)smc->y[np].cf_join != 0U) 
                                              #line 168 
                                              smc->y[np].cem_pst = 1;
  else 
    #line 169 
    if ((unsigned int)smc->y[np].wc_flag == 0U) 
                                                #line 171 
                                                smc->y[np].cem_pst = 0;
  #line 177 
  i = 0;
  #line 177 
  while (i <= 1) {
    #line 179 
    if (smc->y[i].cem_pst == 2 && (unsigned int)smc->y[i].wc_flag == 0U) {
      #line 180 
      smc->y[i].cem_pst = 0;
      #line 181 
      queue_event(smc,i + 5,1);
    }
    #line 183 
    if (smc->y[i].cem_pst == 1 && (unsigned int)smc->y[i].wc_flag != 0U) {
      #line 184 
      smc->y[i].cem_pst = 2;
      #line 185 
      queue_event(smc,i + 5,1);
    }
    #line 187 
    if (smc->y[i].cem_pst == 0 && (unsigned int)smc->y[i].wc_flag != 0U) 
      #line 192 
      smc->y[i].cem_pst = 2;
    #line 177 
    i ++;
  }
  #line 195 
  return;
}

#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
void cfm(struct s_smc *smc, int event)
{
  #line 209 
  int state;
  #line 210 
  int cond;
  #line 211 
  int oldstate;
  #line 219 
  all_selection_criteria(smc);
  #line 223 
  cem_priv_state(smc,event);
  #line 225 
  oldstate = (int)smc->mib.fddiSMTCF_State;
  #line 226 
  while (1) {
    #line 231 
    state = (int)smc->mib.fddiSMTCF_State;
    #line 232 
    cfm_fsm(smc,event);
    #line 233 
    event = 0;
    #line 234 
    if (! ((int)smc->mib.fddiSMTCF_State != state)) 
                                                    #line 226 
                                                    break;
  }
  #line 240 
  cond = 0;
  #line 241 
  if (((unsigned int)smc->mib.fddiSMTCF_State == 9U && (unsigned int)smc->y[0].pc_mode == 1U || (unsigned int)smc->mib.fddiSMTCF_State == 10U && (unsigned int)smc->y[1].pc_mode == 1U) || ((unsigned int)smc->mib.fddiSMTCF_State == 11U && (unsigned int)smc->y[0].pc_mode == 1U) && (unsigned int)(smc->y[0].mib)->fddiPORTNeighborType != 2U) 
    #line 248 
    cond = 1;
  #line 250 
  if ((int)smc->mib.fddiSMTPeerWrapFlag != cond) 
                                                 #line 251 
                                                 smt_srf_event(smc,5,0,cond);
  #line 270 
  smc->mib.m[0].fddiMACDownstreamPORTType = (unsigned short)cf_to_ptype[(int)smc->mib.fddiSMTCF_State];
  #line 272 
  cfm_state_change(smc,(int)smc->mib.fddiSMTCF_State);
  #line 273 
  return;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
static void cfm_fsm(struct s_smc *smc, int cmd)
{
  #line 281 
  switch ((int)smc->mib.fddiSMTCF_State) {
    #line 282 
    case 16: 
             #line 282 
    ;
    #line 283 
    smc->mib.p[0].fddiPORTCurrentPath = (unsigned short)0U;
    #line 284 
    smc->mib.p[1].fddiPORTCurrentPath = (unsigned short)0U;
    #line 285 
    smc->mib.p[0].fddiPORTMACPlacement = (unsigned short)0U;
    #line 286 
    smc->mib.p[1].fddiPORTMACPlacement = (unsigned short)0U;
    #line 287 
    smc->mib.fddiSMTStationStatus = (unsigned short)1U;
    #line 288 
    config_mux(smc,4);
    #line 289 
    smc->r.rm_loop = (unsigned char)0U;
    #line 290 
    smc->r.rm_join = (unsigned char)0U;
    #line 291 
    queue_event(smc,3,8);
    #line 293 
    smc->mib.fddiSMTCF_State = (unsigned short)((unsigned int)smc->mib.fddiSMTCF_State & 65519U);
    #line 295 
    break;
    #line 296 
    case 0: 
            #line 296 
    ;
    #line 299 
    if ((unsigned int)smc->s.sas != 0U && ((((unsigned int)smc->y[0].cf_join != 0U || (unsigned int)smc->y[0].cf_loop != 0U) || (unsigned int)smc->y[1].cf_join != 0U) || (unsigned int)smc->y[1].cf_loop != 0U)) {
      #line 301 
      smc->mib.fddiSMTCF_State = (unsigned short)27U;
      #line 302 
      break;
    }
    #line 305 
    if ((smc->y[0].cem_pst == 1 && (unsigned int)smc->y[0].cf_join != 0U) && (unsigned int)smc->y[0].wc_flag == 0U || (unsigned int)smc->y[0].cf_loop != 0U) {
      #line 307 
      smc->mib.fddiSMTCF_State = (unsigned short)25U;
      #line 308 
      break;
    }
    #line 311 
    if ((smc->y[1].cem_pst == 1 && (unsigned int)smc->y[1].cf_join != 0U) && (unsigned int)smc->y[1].wc_flag == 0U || (unsigned int)smc->y[1].cf_loop != 0U) {
      #line 313 
      smc->mib.fddiSMTCF_State = (unsigned short)26U;
      #line 314 
      break;
    }
    #line 316 
    break;
    #line 317 
    case 25: 
             #line 317 
    ;
    #line 318 
    smc->mib.p[0].fddiPORTCurrentPath = (unsigned short)4U;
    #line 319 
    smc->mib.p[1].fddiPORTCurrentPath = (unsigned short)0U;
    #line 320 
    smc->mib.p[0].fddiPORTMACPlacement = (unsigned short)1U;
    #line 321 
    smc->mib.p[1].fddiPORTMACPlacement = (unsigned short)0U;
    #line 322 
    smc->mib.fddiSMTStationStatus = (unsigned short)0U;
    #line 323 
    config_mux(smc,2);
    #line 324 
    if ((unsigned int)smc->y[0].cf_loop != 0U) {
      #line 325 
      smc->r.rm_join = (unsigned char)0U;
      #line 326 
      smc->r.rm_loop = (unsigned char)1U;
      #line 327 
      queue_event(smc,3,9);
    }
    #line 329 
    if ((unsigned int)smc->y[0].cf_join != 0U) {
      #line 330 
      smc->r.rm_loop = (unsigned char)0U;
      #line 331 
      smc->r.rm_join = (unsigned char)1U;
      #line 332 
      queue_event(smc,3,8);
    }
    #line 334 
    smc->mib.fddiSMTCF_State = (unsigned short)((unsigned int)smc->mib.fddiSMTCF_State & 65519U);
    #line 336 
    break;
    #line 337 
    case 9: 
            #line 337 
    ;
    #line 339 
    if (((unsigned int)smc->y[0].wc_flag != 0U || (unsigned int)smc->y[0].cf_join == 0U) && (unsigned int)smc->y[0].cf_loop == 0U) {
      #line 341 
      smc->mib.fddiSMTCF_State = (unsigned short)16U;
      #line 342 
      break;
    }
    else 
      #line 345 
      if (((unsigned int)smc->y[1].cf_loop != 0U && (unsigned int)smc->y[0].cf_join != 0U) && smc->y[0].cem_pst == 1 || ((unsigned int)smc->y[1].cf_loop != 0U || (unsigned int)smc->y[1].cf_join != 0U && smc->y[1].cem_pst == 1) && ((unsigned int)smc->y[0].pc_mode == 2U || (unsigned int)smc->y[1].pc_mode == 2U)) {
        #line 352 
        smc->y[0].scrub = (unsigned char)1U;
        #line 353 
        smc->mib.fddiSMTCF_State = (unsigned short)26U;
        #line 354 
        break;
      }
      else 
        #line 357 
        if (((((((unsigned int)smc->s.attach_s == 0U && (unsigned int)smc->y[0].cf_join != 0U) && smc->y[0].cem_pst == 1) && (unsigned int)smc->y[0].pc_mode == 1U) && (unsigned int)smc->y[1].cf_join != 0U) && smc->y[1].cem_pst == 1) && (unsigned int)smc->y[1].pc_mode == 1U) {
          #line 363 
          smc->y[0].scrub = (unsigned char)1U;
          #line 364 
          smc->y[1].scrub = (unsigned char)1U;
          #line 365 
          smc->mib.fddiSMTCF_State = (unsigned short)28U;
          #line 366 
          break;
        }
        else 
          #line 369 
          if (((((((unsigned int)smc->s.attach_s != 0U && (unsigned int)smc->y[0].cf_join != 0U) && smc->y[0].cem_pst == 1) && (unsigned int)smc->y[0].pc_mode == 1U) && (unsigned int)smc->y[1].cf_join != 0U) && smc->y[1].cem_pst == 1) && (unsigned int)smc->y[1].pc_mode == 1U) {
            #line 376 
            smc->y[0].scrub = (unsigned char)1U;
            #line 377 
            smc->y[1].scrub = (unsigned char)1U;
            #line 378 
            smc->mib.fddiSMTCF_State = (unsigned short)23U;
            #line 379 
            break;
          }
    #line 381 
    break;
    #line 382 
    case 26: 
             #line 382 
    ;
    #line 383 
    smc->mib.p[0].fddiPORTCurrentPath = (unsigned short)0U;
    #line 384 
    smc->mib.p[1].fddiPORTCurrentPath = (unsigned short)4U;
    #line 385 
    smc->mib.p[0].fddiPORTMACPlacement = (unsigned short)0U;
    #line 386 
    smc->mib.p[1].fddiPORTMACPlacement = (unsigned short)1U;
    #line 387 
    smc->mib.fddiSMTStationStatus = (unsigned short)0U;
    #line 388 
    config_mux(smc,3);
    #line 389 
    if ((unsigned int)smc->y[1].cf_loop != 0U) {
      #line 390 
      smc->r.rm_join = (unsigned char)0U;
      #line 391 
      smc->r.rm_loop = (unsigned char)1U;
      #line 392 
      queue_event(smc,3,9);
    }
    #line 394 
    if ((unsigned int)smc->y[1].cf_join != 0U) {
      #line 395 
      smc->r.rm_loop = (unsigned char)0U;
      #line 396 
      smc->r.rm_join = (unsigned char)1U;
      #line 397 
      queue_event(smc,3,8);
    }
    #line 399 
    smc->mib.fddiSMTCF_State = (unsigned short)((unsigned int)smc->mib.fddiSMTCF_State & 65519U);
    #line 401 
    break;
    #line 402 
    case 10: 
             #line 402 
    ;
    #line 404 
    if ((unsigned int)smc->y[1].cf_join == 0U && (unsigned int)smc->y[1].cf_loop == 0U) {
      #line 405 
      smc->mib.fddiSMTCF_State = (unsigned short)16U;
      #line 406 
      break;
    }
    else 
      #line 409 
      if ((((unsigned int)smc->y[0].cf_loop != 0U && (unsigned int)smc->y[0].pc_mode == 1U) && (unsigned int)smc->y[1].cf_join != 0U) && (unsigned int)smc->y[1].pc_mode == 1U) {
        #line 411 
        smc->y[1].scrub = (unsigned char)1U;
        #line 412 
        smc->mib.fddiSMTCF_State = (unsigned short)25U;
        #line 413 
        break;
      }
      else 
        #line 416 
        if (((((unsigned int)smc->s.attach_s == 0U && (unsigned int)smc->y[0].cf_join != 0U) && (unsigned int)smc->y[0].pc_mode == 1U) && (unsigned int)smc->y[1].cf_join != 0U) && (unsigned int)smc->y[1].pc_mode == 1U) {
          #line 419 
          smc->y[0].scrub = (unsigned char)1U;
          #line 420 
          smc->y[1].scrub = (unsigned char)1U;
          #line 421 
          smc->mib.fddiSMTCF_State = (unsigned short)28U;
          #line 422 
          break;
        }
        else 
          #line 425 
          if (((((unsigned int)smc->s.attach_s != 0U && (unsigned int)smc->y[0].cf_join != 0U) && (unsigned int)smc->y[0].pc_mode == 1U) && (unsigned int)smc->y[1].cf_join != 0U) && (unsigned int)smc->y[1].pc_mode == 1U) {
            #line 428 
            smc->y[0].scrub = (unsigned char)1U;
            #line 429 
            smc->y[1].scrub = (unsigned char)1U;
            #line 430 
            smc->mib.fddiSMTCF_State = (unsigned short)23U;
            #line 431 
            break;
          }
    #line 433 
    break;
    #line 434 
    case 28: 
             #line 434 
    ;
    #line 435 
    smc->mib.p[0].fddiPORTCurrentPath = (unsigned short)5U;
    #line 436 
    smc->mib.p[1].fddiPORTCurrentPath = (unsigned short)5U;
    #line 437 
    smc->mib.p[0].fddiPORTMACPlacement = (unsigned short)0U;
    #line 438 
    smc->mib.p[1].fddiPORTMACPlacement = (unsigned short)1U;
    #line 439 
    smc->mib.fddiSMTStationStatus = (unsigned short)2U;
    #line 440 
    config_mux(smc,0);
    #line 441 
    smc->r.rm_loop = (unsigned char)0U;
    #line 442 
    smc->r.rm_join = (unsigned char)1U;
    #line 443 
    queue_event(smc,3,8);
    #line 444 
    smc->mib.fddiSMTCF_State = (unsigned short)((unsigned int)smc->mib.fddiSMTCF_State & 65519U);
    #line 446 
    break;
    #line 447 
    case 12: 
             #line 447 
    ;
    #line 449 
    if ((unsigned int)smc->y[1].wc_flag != 0U || (unsigned int)smc->y[1].cf_join == 0U) {
      #line 450 
      smc->y[0].scrub = (unsigned char)1U;
      #line 451 
      smc->mib.fddiSMTCF_State = (unsigned short)25U;
      #line 452 
      break;
    }
    else 
      #line 455 
      if ((unsigned int)smc->y[0].cf_join == 0U || (unsigned int)smc->y[0].wc_flag != 0U) {
        #line 456 
        smc->y[1].scrub = (unsigned char)1U;
        #line 457 
        smc->mib.fddiSMTCF_State = (unsigned short)26U;
        #line 458 
        break;
      }
      else 
        #line 461 
        if ((unsigned int)smc->s.attach_s != 0U) {
          #line 462 
          smc->y[1].scrub = (unsigned char)1U;
          #line 463 
          smc->mib.fddiSMTCF_State = (unsigned short)23U;
          #line 464 
          break;
        }
    #line 466 
    break;
    #line 467 
    case 23: 
             #line 467 
    ;
    #line 468 
    smc->mib.p[0].fddiPORTCurrentPath = (unsigned short)5U;
    #line 469 
    smc->mib.p[1].fddiPORTCurrentPath = (unsigned short)5U;
    #line 470 
    smc->mib.p[0].fddiPORTMACPlacement = (unsigned short)1U;
    #line 471 
    smc->mib.p[1].fddiPORTMACPlacement = (unsigned short)0U;
    #line 472 
    smc->mib.fddiSMTStationStatus = (unsigned short)2U;
    #line 473 
    config_mux(smc,1);
    #line 474 
    smc->r.rm_loop = (unsigned char)0U;
    #line 475 
    smc->r.rm_join = (unsigned char)1U;
    #line 476 
    queue_event(smc,3,8);
    #line 477 
    smc->mib.fddiSMTCF_State = (unsigned short)((unsigned int)smc->mib.fddiSMTCF_State & 65519U);
    #line 479 
    break;
    #line 480 
    case 7: 
            #line 480 
    ;
    #line 482 
    if ((unsigned int)smc->y[1].cf_join == 0U || (unsigned int)smc->y[1].wc_flag != 0U) {
      #line 483 
      smc->y[0].scrub = (unsigned char)1U;
      #line 484 
      smc->mib.fddiSMTCF_State = (unsigned short)25U;
      #line 485 
      break;
    }
    else 
      #line 488 
      if ((unsigned int)smc->y[0].cf_join == 0U || (unsigned int)smc->y[0].wc_flag != 0U) {
        #line 489 
        smc->y[1].scrub = (unsigned char)1U;
        #line 490 
        smc->mib.fddiSMTCF_State = (unsigned short)26U;
        #line 491 
        break;
      }
      else 
        #line 494 
        if ((unsigned int)smc->s.attach_s == 0U) {
          #line 495 
          smc->y[0].scrub = (unsigned char)1U;
          #line 496 
          smc->mib.fddiSMTCF_State = (unsigned short)28U;
          #line 497 
          break;
        }
    #line 499 
    break;
    #line 500 
    case 27: 
             #line 500 
    ;
    #line 501 
    smc->mib.p[0].fddiPORTCurrentPath = (unsigned short)4U;
    #line 502 
    smc->mib.p[0].fddiPORTMACPlacement = (unsigned short)1U;
    #line 503 
    smc->mib.fddiSMTStationStatus = (unsigned short)0U;
    #line 504 
    config_mux(smc,5);
    #line 505 
    if ((unsigned int)smc->y[0].cf_loop != 0U || (unsigned int)smc->y[1].cf_loop != 0U) {
      #line 506 
      smc->r.rm_join = (unsigned char)0U;
      #line 507 
      smc->r.rm_loop = (unsigned char)1U;
      #line 508 
      queue_event(smc,3,9);
    }
    #line 510 
    if ((unsigned int)smc->y[0].cf_join != 0U || (unsigned int)smc->y[1].cf_join != 0U) {
      #line 511 
      smc->r.rm_loop = (unsigned char)0U;
      #line 512 
      smc->r.rm_join = (unsigned char)1U;
      #line 513 
      queue_event(smc,3,8);
    }
    #line 515 
    smc->mib.fddiSMTCF_State = (unsigned short)((unsigned int)smc->mib.fddiSMTCF_State & 65519U);
    #line 517 
    break;
    #line 518 
    case 11: 
             #line 518 
    ;
    #line 520 
    if ((((unsigned int)smc->y[0].cf_join == 0U && (unsigned int)smc->y[0].cf_loop == 0U) && (unsigned int)smc->y[1].cf_join == 0U) && (unsigned int)smc->y[1].cf_loop == 0U) {
      #line 522 
      smc->mib.fddiSMTCF_State = (unsigned short)16U;
      #line 523 
      break;
    }
    #line 525 
    break;
    #line 526 
    default: 
             #line 526 
    ;
    #line 527 
    printk((char *)"\001",106,(char *)"CFM : invalid state");
    #line 528 
    break;
  }
  #line 530 
  return;
}

#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
int cfm_get_mac_input(struct s_smc *smc)
{
  #line 540 
  return ((unsigned int)smc->mib.fddiSMTCF_State == 10U || (unsigned int)smc->mib.fddiSMTCF_State == 7U) != 0;
}

#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
int cfm_get_mac_output(struct s_smc *smc)
{
  #line 551 
  return ((unsigned int)smc->mib.fddiSMTCF_State == 10U || (unsigned int)smc->mib.fddiSMTCF_State == 12U) != 0;
}

#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
static char path_iso[24U] = {[3] = (char)4, [5] = (char)1, [11] = (char)2, [13] = (char)1, [19] = (char)4, [21] = (char)2};
#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
static char path_wrap_a[24U] = {[3] = (char)4, [5] = (char)1, [7] = (char)3, [11] = (char)2, [13] = (char)1, [15] = (char)3, [19] = (char)4, [21] = (char)2};
#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
static char path_wrap_b[24U] = {[3] = (char)4, [5] = (char)2, [7] = (char)3, [11] = (char)2, [13] = (char)1, [15] = (char)3, [19] = (char)4, [21] = (char)1};
#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
static char path_thru[24U] = {[3] = (char)4, [5] = (char)1, [7] = (char)3, [11] = (char)2, [13] = (char)1, [15] = (char)3, [19] = (char)4, [21] = (char)2, [23] = (char)3};
#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
static char path_wrap_s[16U] = {[3] = (char)4, [5] = (char)1, [7] = (char)3, [11] = (char)2, [13] = (char)1, [15] = (char)3};
#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
static char path_iso_s[16U] = {[3] = (char)4, [5] = (char)1, [11] = (char)2, [13] = (char)1};
#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/cfm.c"
int cem_build_path(struct s_smc *smc, char *to, int path_index)
{
  #line 590 
  char *path;
  #line 591 
  int len;
  #line 593 
  switch ((int)smc->mib.fddiSMTCF_State) {
    #line 594 
    default: 
             #line 594 
    ;
    #line 595 
    case 0: 
            #line 595 
    ;
    #line 596 
    if ((unsigned int)smc->s.sas != 0U) 
                                        #line 596 
                                        path = (char *)(& path_iso_s); else 
                                                                    #line 596 
                                                                    path = (char *)(& path_iso);
    #line 597 
    if ((unsigned int)smc->s.sas != 0U) 
                                        #line 597 
                                        len = 16; else 
                                                       #line 597 
                                                       len = 24;
    #line 598 
    break;
    #line 599 
    case 9: 
            #line 599 
    ;
    #line 600 
    path = (char *)(& path_wrap_a);
    #line 601 
    len = 24;
    #line 602 
    break;
    #line 603 
    case 10: 
             #line 603 
    ;
    #line 604 
    path = (char *)(& path_wrap_b);
    #line 605 
    len = 24;
    #line 606 
    break;
    #line 607 
    case 12: 
             #line 607 
    ;
    #line 608 
    path = (char *)(& path_thru);
    #line 609 
    len = 24;
    #line 610 
    break;
    #line 611 
    case 11: 
             #line 611 
    ;
    #line 612 
    path = (char *)(& path_wrap_s);
    #line 613 
    len = 16;
    #line 614 
    break;
  }
  #line 616 
  memcpy((void *)to,(void *)path,(unsigned long)len);
  #line 620 
  return len;
}

#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/h/cmtdef.h"
#line 626 
void smt_init_evc(struct s_smc *smc);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smtinit.c"
static void set_oem_spec_val(struct s_smc *smc)
{
  #line 49 
  struct fddi_mib *mib;
  #line 51 
  mib = & smc->mib;
  #line 56 
  if ((unsigned int)oem_id[0] == 73U) 
                                      #line 57 
                                      mib->fddiSMTConnectionPolicy = (unsigned short)32768U;
  #line 58 
  return;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/smtinit.c"
int init_smt(struct s_smc *smc, u_char *mac_addr)
{
  #line 67 
  int p;
  #line 87 
  p = 0;
  #line 87 
  while (p <= 1) {
    #line 88 
    smc->y[p].mib = & smc->mib.p[p];
    #line 87 
    p ++;
  }
  #line 91 
  set_oem_spec_val(smc);
  #line 92 
  smt_set_mac_opvalues(smc);
  #line 93 
  init_fddi_driver(smc,mac_addr);
  #line 94 
  smt_fixup_mib(smc);
  #line 96 
  ev_init(smc);
  #line 98 
  smt_init_evc(smc);
  #line 100 
  smt_timer_init(smc);
  #line 101 
  smt_agent_init(smc);
  #line 103 
  pcm_init(smc);
  #line 104 
  ecm_init(smc);
  #line 105 
  cfm_init(smc);
  #line 106 
  rmt_init(smc);
  #line 108 
  p = 0;
  #line 108 
  while (p <= 1) {
    #line 109 
    pcm(smc,p,0);
    #line 108 
    p ++;
  }
  #line 111 
  ecm(smc,0);
  #line 112 
  cfm(smc,0);
  #line 113 
  rmt(smc,0);
  #line 115 
  smt_agent_task(smc);
  #line 119 
  return 0;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ess.c"
static u_short plist_raf_alc_res[8U] = {(unsigned short)18U, (unsigned short)12811U, (unsigned short)12815U, (unsigned short)12816U, (unsigned short)25U, (unsigned short)26U, (unsigned short)29U};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ess.c"
static u_short plist_raf_chg_req[5U] = {(unsigned short)12811U, (unsigned short)12815U, (unsigned short)12816U, (unsigned short)26U};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ess.c"
static struct fddi_addr smt_sba_da = {.a = {(unsigned char)128U, (unsigned char)1U, (unsigned char)67U, [4] = (unsigned char)128U, (unsigned char)12U}};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ess.c"
static struct fddi_addr null_addr_0 = {.a = {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U}};
#line 79 
#line 472 
static void ess_send_response(struct s_smc *smc, struct smt_header *sm, int sba_cmd);
#line 81 
#line 691 
static void ess_config_fifo(struct s_smc *smc);
#line 82 
#line 551 
static void ess_send_alc_req(struct s_smc *smc);
#line 83 
#line 659 
static void ess_send_frame(struct s_smc *smc, Mbuf *mb);
#line 101 
#line 376 
static int process_bw_alloc(struct s_smc *smc, long payload, long overhead);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ess.c"
int ess_raf_received_pack(struct s_smc *smc, Mbuf *mb, struct smt_header *sm, int fs)
{
  #line 116 
  void *p;
  #line 117 
  struct smt_p_0016 *cmd;
  #line 118 
  Mbuf *db;
  #line 119 
  u_long msg_res_type;
  #line 120 
  u_long payload;
  #line 120 
  u_long overhead;
  #line 121 
  int local;
  #line 122 
  int i;
  #line 127 
  local = (fs & 128) != 0;
  #line 132 
  p = sm_to_para(smc,sm,21);
  #line 132 
  if (p == (void *)0) 
                      #line 134 
                      return fs;
  #line 136 
  msg_res_type = (unsigned long)((struct smt_p_0015 *)p)->res_type;
  #line 141 
  cmd = (struct smt_p_0016 *)sm_to_para(smc,sm,22);
  #line 141 
  if (cmd == (struct smt_p_0016 *)0) 
                                     #line 146 
                                     return fs;
  #line 159 
  switch (cmd->sba_cmd) {
    #line 164 
    case (u_int)1: 
                   #line 164 
    ;
    #line 168 
    if ((unsigned int)sm->smt_type == 2U) {
      #line 173 
      if (local == 0 || smc->mib.fddiESSPayload != 0UL) 
                                                        #line 174 
                                                        return fs;
      #line 176 
      p = sm_to_para(smc,sm,25);
      #line 177 
      i = 0;
      #line 177 
      while (i <= 4) {
        #line 178 
        if ((unsigned int)((struct smt_p_0019 *)p)->alloc_addr.a[i] != 0U) 
          #line 179 
          return fs;
        #line 177 
        i ++;
      }
      #line 187 
      smc->ess.alloc_trans_id = (unsigned long)sm->smt_tid;
      #line 189 
      p = sm_to_para(smc,sm,12815);
      #line 190 
      ((struct smt_p_320f *)p)->mib_payload = (unsigned int)smc->mib.a[0].fddiPATHSbaPayload;
      #line 192 
      p = sm_to_para(smc,sm,12816);
      #line 193 
      ((struct smt_p_3210 *)p)->mib_overhead = (unsigned int)smc->mib.a[0].fddiPATHSbaOverhead;
      #line 195 
      sm->smt_dest = smt_sba_da;
      #line 197 
      if ((unsigned int)smc->ess.local_sba_active != 0U) 
                                                         #line 198 
                                                         return fs | 64;
      #line 200 
      db = smt_get_mbuf(smc);
      #line 200 
      if (db == (Mbuf *)0) 
                           #line 201 
                           return fs;
      #line 203 
      db->m_len = mb->m_len;
      #line 204 
      db->m_off = mb->m_off;
      #line 205 
      memcpy((void *)((char *)(& db->m_data) + (unsigned long)db->m_off),(void *)sm,(unsigned long)((int)db->m_len));
      #line 210 
      smt_send_frame(smc,db,65,0);
      #line 211 
      return fs;
    }
    #line 218 
    if (smt_check_para(smc,sm,(u_short *)(& plist_raf_alc_res)) != 0) 
      #line 220 
      return fs;
    #line 233 
    ;
    #line 233 
    if ((unsigned int)((struct smt_p_320b *)sm_to_para(smc,sm,12811))->path_index != 1U) 
      #line 233 
      goto _LOR;
    else 
      #line 234 
      if (msg_res_type != 1UL) 
                               #line 233 
                               goto _LOR;
      else {
        #line 235 
        ;
        #line 235 
        if (((struct smt_p_reason *)sm_to_para(smc,sm,18))->rdf_reason != 3U) 
          #line 233 
          goto _LOR;
        else 
          #line 238 
          if ((unsigned long)sm->smt_tid != smc->ess.alloc_trans_id) 
            #line 233 
            _LOR: 
                  #line 241 
                  return fs;
      }
    #line 247 
    p = sm_to_para(smc,sm,12815);
    #line 248 
    if (p == (void *)0) {
      #line 249 
      printk((char *)"\001");
      #line 250 
      return fs;
    }
    #line 252 
    payload = (unsigned long)((struct smt_p_320f *)p)->mib_payload;
    #line 253 
    p = sm_to_para(smc,sm,12816);
    #line 254 
    if (p == (void *)0) {
      #line 255 
      printk((char *)"\001");
      #line 256 
      return fs;
    }
    #line 258 
    overhead = (unsigned long)((struct smt_p_3210 *)p)->mib_overhead;
    #line 266 
    process_bw_alloc(smc,(long)payload,(long)overhead);
    #line 268 
    return fs;
    #line 274 
    case (u_int)3: 
                   #line 274 
    ;
    #line 278 
    if ((unsigned int)sm->smt_type != 2U) 
                                          #line 280 
                                          return fs;
    #line 286 
    if (smt_check_para(smc,sm,(u_short *)(& plist_raf_chg_req)) != 0) 
      #line 288 
      return fs;
    #line 297 
    ;
    #line 297 
    if ((unsigned int)((struct smt_p_320b *)sm_to_para(smc,sm,12811))->path_index != 1U) 
      #line 297 
      goto _LOR_0;
    else 
      #line 298 
      if (msg_res_type != 1UL) 
                               #line 297 
                               _LOR_0: 
                                       #line 300 
                                       return fs;
    #line 306 
    p = sm_to_para(smc,sm,12815);
    #line 307 
    payload = (unsigned long)((struct smt_p_320f *)p)->mib_payload;
    #line 308 
    p = sm_to_para(smc,sm,12816);
    #line 309 
    overhead = (unsigned long)((struct smt_p_3210 *)p)->mib_overhead;
    #line 319 
    if (process_bw_alloc(smc,(long)payload,(long)overhead) == 0) 
                                                                 #line 320 
                                                                 return fs;
    #line 325 
    ess_send_response(smc,sm,3);
    #line 327 
    return fs;
    #line 333 
    case (u_int)2: 
                   #line 333 
    ;
    #line 337 
    if ((unsigned int)sm->smt_type != 2U) 
                                          #line 339 
                                          return fs;
    #line 348 
    if (msg_res_type != 1UL) 
                             #line 350 
                             return fs;
    #line 356 
    ess_send_response(smc,sm,2);
    #line 358 
    return fs;
    #line 361 
    default: 
             #line 361 
    ;
    #line 366 
    break;
  }
  #line 369 
  return fs;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ess.c"
static int process_bw_alloc(struct s_smc *smc, long payload, long overhead)
{
  #line 427 
  if (payload > 1562L || overhead > 5000L) 
                                           #line 429 
                                           return 0;
  #line 436 
  if (smc->mib.fddiESSPayload != 0UL && (smc->mib.fddiESSPayload != (unsigned long)payload || smc->mib.fddiESSOverhead != (unsigned long)overhead)) {
    #line 439 
    smc->ess.raf_act_timer_poll = (char)1;
    #line 440 
    smc->ess.timer_count = (char)0;
  }
  #line 446 
  if (payload != 0L) {
    #line 448 
    smc->ess.sync_bw_available = (unsigned char)1U;
    #line 450 
    smc->ess.sync_bw = ((long)smc->mib.m[0].fddiMACT_Neg * payload) / -1562L + overhead;
  }
  else {
    #line 456 
    smc->ess.sync_bw_available = (unsigned char)0U;
    #line 457 
    smc->ess.sync_bw = 0L;
    #line 458 
    overhead = 0L;
  }
  #line 461 
  smc->mib.a[0].fddiPATHSbaPayload = (unsigned long)payload;
  #line 462 
  smc->mib.a[0].fddiPATHSbaOverhead = (unsigned long)overhead;
  #line 467 
  ess_config_fifo(smc);
  #line 468 
  set_formac_tsync(smc,smc->ess.sync_bw);
  #line 469 
  return 1;
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ess.c"
static void ess_send_response(struct s_smc *smc, struct smt_header *sm, int sba_cmd)
{
  #line 475 
  struct smt_sba_chg *chg;
  #line 476 
  Mbuf *mb;
  #line 477 
  void *p;
  #line 482 
  if (sba_cmd == 3) {
    #line 483 
    mb = smt_build_frame(smc,5,3,92);
    #line 483 
    if (mb == (Mbuf *)0) 
                         #line 485 
                         return;
  }
  else {
    #line 488 
    mb = smt_build_frame(smc,5,3,84);
    #line 488 
    if (mb == (Mbuf *)0) 
                         #line 490 
                         return;
  }
  #line 493 
  chg = (struct smt_sba_chg *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 494 
  chg->smt.smt_tid = sm->smt_tid;
  #line 495 
  chg->smt.smt_dest = sm->smt_source;
  #line 498 
  chg->s_type.para.p_type = (unsigned short)21U;
  #line 499 
  chg->s_type.para.p_len = (unsigned short)4U;
  #line 500 
  chg->s_type.res_type = 1U;
  #line 503 
  chg->cmd.para.p_type = (unsigned short)22U;
  #line 504 
  chg->cmd.para.p_len = (unsigned short)4U;
  #line 505 
  chg->cmd.sba_cmd = (unsigned int)sba_cmd;
  #line 508 
  chg->path.para.p_type = (unsigned short)12811U;
  #line 509 
  chg->path.para.p_len = (unsigned short)8U;
  #line 510 
  chg->path.mib_index = 16777216U;
  #line 511 
  chg->path.path_pad = (unsigned short)0U;
  #line 512 
  chg->path.path_index = (unsigned short)1U;
  #line 515 
  chg->payload.para.p_type = (unsigned short)12815U;
  #line 516 
  chg->payload.para.p_len = (unsigned short)8U;
  #line 517 
  chg->payload.mib_index = 16777216U;
  #line 518 
  chg->payload.mib_payload = (unsigned int)smc->mib.a[0].fddiPATHSbaPayload;
  #line 521 
  chg->overhead.para.p_type = (unsigned short)12816U;
  #line 522 
  chg->overhead.para.p_len = (unsigned short)8U;
  #line 523 
  chg->overhead.mib_index = 16777216U;
  #line 524 
  chg->overhead.mib_overhead = (unsigned int)smc->mib.a[0].fddiPATHSbaOverhead;
  #line 526 
  if (sba_cmd == 3) {
    #line 528 
    chg->cat.para.p_type = (unsigned short)26U;
    #line 529 
    chg->cat.para.p_len = (unsigned short)4U;
    #line 530 
    p = sm_to_para(smc,sm,26);
    #line 531 
    chg->cat.category = ((struct smt_p_001a *)p)->category;
  }
  #line 534 
  ess_send_frame(smc,mb);
  #line 535 
  return;
}

#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ess.c"
void ess_timer_poll(struct s_smc *smc)
{
  #line 539 
  if ((int)smc->ess.raf_act_timer_poll == 0) 
                                             #line 540 
                                             return;
  #line 544 
  smc->ess.timer_count = (char)((int)smc->ess.timer_count + 1);
  #line 545 
  if ((int)smc->ess.timer_count == 10) {
    #line 546 
    smc->ess.timer_count = (char)0;
    #line 547 
    ess_send_alc_req(smc);
  }
  #line 549 
  return;
}

#line 551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ess.c"
static void ess_send_alc_req(struct s_smc *smc)
{
  #line 553 
  struct smt_sba_alc_req *req;
  #line 554 
  Mbuf *mb;
  #line 561 
  if (smc->mib.fddiESSPayload == 0UL) 
                                      #line 562 
                                      smc->mib.fddiESSOverhead = 0UL;
  else 
    #line 565 
    if (smc->mib.fddiESSOverhead == 0UL) 
                                         #line 566 
                                         smc->mib.fddiESSOverhead = 50UL;
  #line 569 
  if (smc->mib.fddiESSOverhead == smc->mib.a[0].fddiPATHSbaOverhead && smc->mib.fddiESSPayload == smc->mib.a[0].fddiPATHSbaPayload) {
    #line 573 
    smc->ess.raf_act_timer_poll = (char)0;
    #line 574 
    smc->ess.timer_count = (char)7;
    #line 575 
    return;
  }
  #line 581 
  mb = smt_build_frame(smc,5,2,136);
  #line 581 
  if (mb == (Mbuf *)0) 
                       #line 583 
                       return;
  #line 584 
  req = (struct smt_sba_alc_req *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 585 
  smc->ess.alloc_trans_id = smt_get_tid(smc);
  #line 585 
  req->smt.smt_tid = (unsigned int)smt_get_tid(smc);
  #line 586 
  req->smt.smt_dest = smt_sba_da;
  #line 589 
  req->s_type.para.p_type = (unsigned short)21U;
  #line 590 
  req->s_type.para.p_len = (unsigned short)4U;
  #line 591 
  req->s_type.res_type = 1U;
  #line 594 
  req->cmd.para.p_type = (unsigned short)22U;
  #line 595 
  req->cmd.para.p_len = (unsigned short)4U;
  #line 596 
  req->cmd.sba_cmd = 1U;
  #line 604 
  req->path.para.p_type = (unsigned short)12811U;
  #line 605 
  req->path.para.p_len = (unsigned short)8U;
  #line 606 
  req->path.mib_index = 16777216U;
  #line 607 
  req->path.path_pad = (unsigned short)0U;
  #line 608 
  req->path.path_index = (unsigned short)1U;
  #line 611 
  req->pl_req.para.p_type = (unsigned short)23U;
  #line 612 
  req->pl_req.para.p_len = (unsigned short)4U;
  #line 613 
  req->pl_req.sba_pl_req = (int)(smc->mib.fddiESSPayload - smc->mib.a[0].fddiPATHSbaPayload);
  #line 617 
  req->ov_req.para.p_type = (unsigned short)24U;
  #line 618 
  req->ov_req.para.p_len = (unsigned short)4U;
  #line 619 
  req->ov_req.sba_ov_req = (int)(smc->mib.fddiESSOverhead - smc->mib.a[0].fddiPATHSbaOverhead);
  #line 623 
  req->payload.para.p_type = (unsigned short)12815U;
  #line 624 
  req->payload.para.p_len = (unsigned short)8U;
  #line 625 
  req->payload.mib_index = 16777216U;
  #line 626 
  req->payload.mib_payload = (unsigned int)smc->mib.a[0].fddiPATHSbaPayload;
  #line 629 
  req->overhead.para.p_type = (unsigned short)12816U;
  #line 630 
  req->overhead.para.p_len = (unsigned short)8U;
  #line 631 
  req->overhead.mib_index = 16777216U;
  #line 632 
  req->overhead.mib_overhead = (unsigned int)smc->mib.a[0].fddiPATHSbaOverhead;
  #line 635 
  req->a_addr.para.p_type = (unsigned short)25U;
  #line 636 
  req->a_addr.para.p_len = (unsigned short)8U;
  #line 637 
  req->a_addr.sba_pad = (unsigned short)0U;
  #line 638 
  req->a_addr.alloc_addr = null_addr_0;
  #line 641 
  req->cat.para.p_type = (unsigned short)26U;
  #line 642 
  req->cat.para.p_len = (unsigned short)4U;
  #line 643 
  req->cat.category = (unsigned int)smc->mib.fddiESSCategory;
  #line 646 
  req->tneg.para.p_type = (unsigned short)27U;
  #line 647 
  req->tneg.para.p_len = (unsigned short)4U;
  #line 648 
  req->tneg.max_t_neg = (unsigned int)smc->mib.fddiESSMaxTNeg;
  #line 651 
  req->segm.para.p_type = (unsigned short)28U;
  #line 652 
  req->segm.para.p_len = (unsigned short)4U;
  #line 653 
  req->segm.min_seg_siz = (unsigned int)smc->mib.fddiESSMinSegmentSize;
  #line 656 
  ess_send_frame(smc,mb);
  #line 657 
  return;
}

#line 659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ess.c"
static void ess_send_frame(struct s_smc *smc, Mbuf *mb)
{
  #line 664 
  if ((unsigned int)smc->ess.local_sba_active != 0U) 
    #line 669 
    if (smc->ess.sba_reply_pend == (Mbuf *)0) 
                                              #line 670 
                                              smc->ess.sba_reply_pend = mb; else 
                                                                    #line 673 
                                                                    smt_free_mbuf(smc,mb);
  else 
       #line 681 
       smt_send_frame(smc,mb,65,0);
  #line 683 
  return;
}

#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ess.c"
void ess_para_change(struct s_smc *smc)
{
  #line 687 
  process_bw_alloc(smc,(long)smc->mib.a[0].fddiPATHSbaPayload,(long)smc->mib.a[0].fddiPATHSbaOverhead);
  #line 689 
  return;
}

#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/ess.c"
static void ess_config_fifo(struct s_smc *smc)
{
  #line 696 
  if (smc->mib.a[0].fddiPATHSbaPayload != 0UL) {
    #line 697 
    if (((int)smc->hw.fp.fifo.fifo_config_mode & 2) != 0 && ((int)smc->hw.fp.fifo.fifo_config_mode & 1) == (int)smc->mib.fddiESSSynchTxMode) 
      #line 700 
      return;
  }
  else 
    #line 704 
    if (((int)smc->hw.fp.fifo.fifo_config_mode & 2) == 0) 
                                                          #line 705 
                                                          return;
  #line 712 
  formac_reinit_tx(smc);
  #line 713 
  return;
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/srf.c"
#line 329 
static void clear_all_rep(struct s_smc *smc);
#line 38 
#line 342 
static void clear_reported(struct s_smc *smc);
#line 39 
#line 365 
static void smt_send_srf(struct s_smc *smc);
#line 40 
#line 157 
static struct s_srf_evc *smt_get_evc(struct s_smc *smc, int code, int index);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/srf.c"
static struct evc_init evc_inits[10U] = {{.code = (unsigned char)5U, .n = (unsigned char)1U, .para = (unsigned short)4168U}, {.code = (unsigned char)8U, .index = (unsigned char)1U, .n = (unsigned char)1U, .para = (unsigned short)8332U}, {.code = (unsigned char)7U, .index = (unsigned char)1U, .n = (unsigned char)1U, .para = (unsigned short)8333U}, {.code = (unsigned char)9U, .index = (unsigned char)1U, .n = (unsigned char)1U, .para = (unsigned short)8334U}, {.code = (unsigned char)2U, .index = (unsigned char)1U, .n = (unsigned char)1U, .para = (unsigned short)8335U}, {.code = (unsigned char)1U, .index = (unsigned char)1U, .n = (unsigned char)1U, .para = (unsigned short)8336U}, {.code = (unsigned char)11U, .index = (unsigned char)1U, .n = (unsigned char)2U, .para = (unsigned short)16464U}, {.code = (unsigned char)10U, .index = (unsigned char)1U, .n = (unsigned char)2U, .para = (unsigned short)16466U}, {.code = (unsigned char)4U, .index = (unsigned char)1U, .n = (unsigned char)2U, .para = (unsigned short)16465U}, {.code = (unsigned char)3U, .index = (unsigned char)1U, .n = (unsigned char)2U, .para = (unsigned short)16467U}};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/srf.c"
void smt_init_evc(struct s_smc *smc)
{
  #line 70 
  struct s_srf_evc *evc;
  #line 71 
  struct evc_init *init;
  #line 72 
  unsigned int i;
  #line 73 
  int index;
  #line 74 
  int offset;
  #line 76 
  u_char fail_safe = (unsigned char)0U;
  #line 78 
  memset((void *)(& smc->evcs),0,336UL);
  #line 80 
  evc = (struct s_srf_evc *)(& smc->evcs);
  #line 81 
  init = (struct evc_init *)(& evc_inits);
  #line 83 
  i = 0U;
  #line 83 
  while (i <= 9U) {
    #line 84 
    index = 0;
    #line 84 
    while ((int)init->n > index) {
      #line 85 
      evc->evc_code = init->code;
      #line 86 
      evc->evc_para = init->para;
      #line 87 
      evc->evc_index = (unsigned char)((int)init->index + (int)((unsigned char)index));
      #line 89 
      evc->evc_multiple = & fail_safe;
      #line 90 
      evc->evc_cond_state = & fail_safe;
      #line 92 
      evc ++;
      #line 84 
      index ++;
    }
    #line 94 
    init ++;
    #line 83 
    i ++;
  }
  #line 97 
  if ((unsigned int)((evc - (struct s_srf_evc *)(& smc->evcs)) / 24L) > 14U) 
    #line 98 
    printk((char *)"\001",127,(char *)"sizeof evcs");
  #line 104 
  smc->evcs[0].evc_cond_state = & smc->mib.fddiSMTPeerWrapFlag;
  #line 105 
  smc->evcs[1].evc_cond_state = & smc->mib.m[0].fddiMACDuplicateAddressCond;
  #line 107 
  smc->evcs[2].evc_cond_state = & smc->mib.m[0].fddiMACFrameErrorFlag;
  #line 109 
  smc->evcs[3].evc_cond_state = & smc->mib.m[0].fddiMACNotCopiedFlag;
  #line 115 
  smc->evcs[4].evc_multiple = & smc->mib.m[0].fddiMACMultiple_N;
  #line 116 
  smc->evcs[5].evc_multiple = & smc->mib.m[0].fddiMACMultiple_P;
  #line 118 
  offset = 6;
  #line 119 
  i = 0U;
  #line 119 
  while (i <= 1U) {
    #line 123 
    smc->evcs[offset].evc_cond_state = & smc->mib.p[i].fddiPORTLerFlag;
    #line 125 
    smc->evcs[offset + 2].evc_cond_state = & smc->mib.p[i].fddiPORTEB_Condition;
    #line 131 
    smc->evcs[offset + 4].evc_multiple = & smc->mib.p[i].fddiPORTMultiple_U;
    #line 133 
    smc->evcs[offset + 6].evc_multiple = & smc->mib.p[i].fddiPORTMultiple_P;
    #line 135 
    offset ++;
    #line 119 
    i ++;
  }
  #line 153 
  smc->srf.TSR = smt_get_time();
  #line 154 
  smc->srf.sr_state = (unsigned char)0U;
  #line 155 
  return;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/srf.c"
static struct s_srf_evc *smt_get_evc(struct s_smc *smc, int code, int index)
{
  #line 159 
  unsigned int i;
  #line 160 
  struct s_srf_evc *evc;
  #line 162 
  i = 0U;
  #line 162 
  evc = (struct s_srf_evc *)(& smc->evcs);
  #line 162 
  while (i <= 13U) {
    #line 163 
    if ((int)evc->evc_code == code && (int)evc->evc_index == index) 
                                                                    #line 164 
                                                                    return evc;
    #line 162 
    i ++;
    #line 162 
    evc ++;
  }
  #line 166 
  return (struct s_srf_evc *)0;
}

#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/srf.c"
void smt_srf_event(struct s_smc *smc, int code, int index, int cond)
{
  #line 183 
  struct s_srf_evc *evc;
  #line 187 
  int tsr;
  #line 184 
  int cond_asserted = 0;
  #line 185 
  int cond_deasserted = 0;
  #line 186 
  int event_occurred = 0;
  #line 188 
  int T_Limit = 500;
  #line 190 
  if (code == 8 && cond != 0) {
    #line 191 
    smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 64U));
    #line 191 
    ;
    #line 191 
    ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 64U)));
  }
  #line 194 
  if (code != 0) {
    #line 197 
    evc = smt_get_evc(smc,code,index);
    #line 197 
    if (evc == (struct s_srf_evc *)0) 
                                      #line 199 
                                      return;
    #line 204 
    if (code > 4) 
      #line 205 
      if ((int)*(evc->evc_cond_state) == cond) 
                                               #line 206 
                                               return;
    #line 212 
    smt_set_timestamp(smc,(u_char *)(& smc->mib.fddiSMTTransitionTimeStamp));
    #line 213 
    if (code > 4) 
      #line 215 
      if (cond != 0) {
        #line 216 
        *(evc->evc_cond_state) = (unsigned char)1U;
        #line 217 
        evc->evc_rep_required = (unsigned char)1U;
        #line 218 
        smc->srf.any_report = (unsigned char)1U;
        #line 219 
        cond_asserted = 1;
      }
      else {
        #line 222 
        *(evc->evc_cond_state) = (unsigned char)0U;
        #line 223 
        cond_deasserted = 1;
      }
    else {
      #line 227 
      if ((unsigned int)evc->evc_rep_required != 0U) 
                                                     #line 228 
                                                     *(evc->evc_multiple) = (unsigned char)1U;
      else {
        #line 231 
        evc->evc_rep_required = (unsigned char)1U;
        #line 232 
        *(evc->evc_multiple) = (unsigned char)0U;
      }
      #line 234 
      smc->srf.any_report = (unsigned char)1U;
      #line 235 
      event_occurred = 1;
    }
  }
  #line 241 
  tsr = (int)(smt_get_time() - smc->srf.TSR);
  #line 243 
  switch ((int)smc->srf.sr_state) {
    #line 244 
    case 0: 
            #line 244 
    ;
    #line 246 
    if (cond_asserted != 0 && tsr < T_Limit) {
      #line 247 
      smc->srf.SRThreshold = 500UL;
      #line 248 
      smc->srf.sr_state = (unsigned char)1U;
      #line 249 
      break;
    }
    #line 252 
    if (cond_deasserted != 0 && tsr < T_Limit) {
      #line 253 
      smc->srf.sr_state = (unsigned char)1U;
      #line 254 
      break;
    }
    #line 257 
    if (event_occurred != 0 && tsr < T_Limit) {
      #line 258 
      smc->srf.sr_state = (unsigned char)1U;
      #line 259 
      break;
    }
    #line 262 
    if (cond_asserted != 0 && tsr >= T_Limit) {
      #line 263 
      smc->srf.SRThreshold = 500UL;
      #line 264 
      smc->srf.TSR = smt_get_time();
      #line 265 
      smt_send_srf(smc);
      #line 266 
      break;
    }
    #line 269 
    if (cond_deasserted != 0 && tsr >= T_Limit) {
      #line 270 
      smc->srf.TSR = smt_get_time();
      #line 271 
      smt_send_srf(smc);
      #line 272 
      break;
    }
    #line 275 
    if (event_occurred != 0 && tsr >= T_Limit) {
      #line 276 
      smc->srf.TSR = smt_get_time();
      #line 277 
      smt_send_srf(smc);
      #line 278 
      break;
    }
    #line 281 
    if ((unsigned int)smc->srf.any_report != 0U && (unsigned long)tsr >= smc->srf.SRThreshold) {
      #line 283 
      smc->srf.SRThreshold *= 2UL;
      #line 284 
      if (smc->srf.SRThreshold > 8000UL) 
                                         #line 285 
                                         smc->srf.SRThreshold = 8000UL;
      #line 286 
      smc->srf.TSR = smt_get_time();
      #line 287 
      smt_send_srf(smc);
      #line 288 
      break;
    }
    #line 291 
    if ((unsigned int)smc->mib.fddiSMTStatRptPolicy == 0U) {
      #line 292 
      smc->srf.sr_state = (unsigned char)2U;
      #line 293 
      break;
    }
    #line 295 
    break;
    #line 296 
    case 1: 
            #line 296 
    ;
    #line 298 
    if (tsr >= T_Limit) {
      #line 299 
      smc->srf.sr_state = (unsigned char)0U;
      #line 300 
      smc->srf.TSR = smt_get_time();
      #line 301 
      smt_send_srf(smc);
      #line 302 
      break;
    }
    #line 305 
    if (cond_asserted != 0) 
                            #line 306 
                            smc->srf.SRThreshold = 500UL;
    #line 312 
    if ((unsigned int)smc->mib.fddiSMTStatRptPolicy == 0U) {
      #line 313 
      smc->srf.sr_state = (unsigned char)2U;
      #line 314 
      break;
    }
    #line 316 
    break;
    #line 317 
    case 2: 
            #line 317 
    ;
    #line 318 
    if ((unsigned int)smc->mib.fddiSMTStatRptPolicy != 0U) {
      #line 319 
      smc->srf.sr_state = (unsigned char)0U;
      #line 320 
      smc->srf.TSR = smt_get_time();
      #line 321 
      smc->srf.SRThreshold = 500UL;
      #line 322 
      clear_all_rep(smc);
      #line 323 
      break;
    }
    #line 325 
    break;
  }
  #line 327 
  return;
}

#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/srf.c"
static void clear_all_rep(struct s_smc *smc)
{
  #line 331 
  struct s_srf_evc *evc;
  #line 332 
  unsigned int i;
  #line 334 
  i = 0U;
  #line 334 
  evc = (struct s_srf_evc *)(& smc->evcs);
  #line 334 
  while (i <= 13U) {
    #line 335 
    evc->evc_rep_required = (unsigned char)0U;
    #line 336 
    if ((unsigned int)evc->evc_code > 4U) 
                                          #line 337 
                                          *(evc->evc_cond_state) = (unsigned char)0U;
    #line 334 
    i ++;
    #line 334 
    evc ++;
  }
  #line 339 
  smc->srf.any_report = (unsigned char)0U;
  #line 340 
  return;
}

#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/srf.c"
static void clear_reported(struct s_smc *smc)
{
  #line 344 
  struct s_srf_evc *evc;
  #line 345 
  unsigned int i;
  #line 347 
  smc->srf.any_report = (unsigned char)0U;
  #line 348 
  i = 0U;
  #line 348 
  evc = (struct s_srf_evc *)(& smc->evcs);
  #line 348 
  while (i <= 13U) {
    #line 349 
    if ((unsigned int)evc->evc_code > 4U) 
      #line 350 
      if ((unsigned int)*(evc->evc_cond_state) == 0U) 
                                                      #line 351 
                                                      evc->evc_rep_required = (unsigned char)0U; else 
                                                                    #line 353 
                                                                    smc->srf.any_report = (unsigned char)1U;
    else {
      #line 356 
      evc->evc_rep_required = (unsigned char)0U;
      #line 357 
      *(evc->evc_multiple) = (unsigned char)0U;
    }
    #line 348 
    i ++;
    #line 348 
    evc ++;
  }
  #line 359 
  return;
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/srf.c"
static void smt_send_srf(struct s_smc *smc)
{
  #line 368 
  struct smt_header *smt;
  #line 369 
  struct s_srf_evc *evc;
  #line 370 
  struct s_pcon pcon;
  #line 371 
  Mbuf *mb;
  #line 372 
  unsigned int i;
  #line 374 
  struct fddi_addr SMT_SRF_DA = {.a = {(unsigned char)128U, (unsigned char)1U, (unsigned char)67U, (unsigned char)0U, (unsigned char)128U, (unsigned char)8U}};
  #line 381 
  if ((unsigned int)smc->r.sm_ma_avail == 0U) 
                                              #line 382 
                                              return;
  #line 383 
  mb = smt_build_frame(smc,7,1,0);
  #line 383 
  if (mb == (Mbuf *)0) 
                       #line 384 
                       return;
  #line 386 
  smc->srf.ring_status = ((unsigned short)((unsigned int)smc->srf.ring_status | 8192U));
  #line 386 
  ;
  #line 386 
  ring_status_indication(smc,(unsigned long)((unsigned short)((unsigned int)smc->srf.ring_status | 8192U)));
  #line 388 
  smt = (struct smt_header *)((char *)(& mb->m_data) + (unsigned long)mb->m_off);
  #line 389 
  smt->smt_dest = SMT_SRF_DA;
  #line 394 
  pcon.pc_len = 4332;
  #line 395 
  pcon.pc_err = 0;
  #line 396 
  pcon.pc_badset = 0;
  #line 397 
  pcon.pc_p = (void *)(smt + 1U);
  #line 399 
  smt_add_para(smc,& pcon,(unsigned short)4147,0,0);
  #line 400 
  smt_add_para(smc,& pcon,(unsigned short)4148,0,0);
  #line 402 
  i = 0U;
  #line 402 
  evc = (struct s_srf_evc *)(& smc->evcs);
  #line 402 
  while (i <= 13U) {
    #line 403 
    if ((unsigned int)evc->evc_rep_required != 0U) 
                                                   #line 404 
                                                   smt_add_para(smc,& pcon,(unsigned short)((int)evc->evc_para),(int)evc->evc_index,0);
    #line 402 
    i ++;
    #line 402 
    evc ++;
  }
  #line 408 
  smt->smt_len = (unsigned short)(4332U - (unsigned int)((unsigned short)pcon.pc_len));
  #line 409 
  mb->m_len = (unsigned int)smt->smt_len + 32U;
  #line 417 
  smt_send_frame(smc,mb,65,0);
  #line 418 
  clear_reported(smc);
  #line 419 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwt.c"
void hwt_start(struct s_smc *smc, u_long time)
{
  #line 61 
  u_short cnt;
  #line 63 
  if (time > 65000UL) 
                      #line 64 
                      time = 65000UL;
  #line 66 
  smc->hw.t_start = time;
  #line 67 
  smc->hw.t_stop = 0UL;
  #line 69 
  cnt = (unsigned short)time;
  #line 74 
  if ((unsigned int)cnt == 0U) 
                               #line 75 
                               cnt = (u_short)((int)cnt + 1);
  #line 77 
  iowrite32((unsigned int)cnt * 200U,smc->hw.iop + 288U);
  #line 78 
  iowrite16((unsigned short)4,smc->hw.iop + 296U);
  #line 80 
  smc->hw.timer_activ = (unsigned short)1U;
  #line 81 
  return;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwt.c"
void hwt_stop(struct s_smc *smc)
{
  #line 99 
  iowrite16((unsigned short)2,smc->hw.iop + 296U);
  #line 100 
  iowrite16((unsigned short)1,smc->hw.iop + 296U);
  #line 102 
  smc->hw.timer_activ = (unsigned short)0U;
  #line 103 
  return;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwt.c"
void hwt_init(struct s_smc *smc)
{
  #line 121 
  smc->hw.t_start = 0UL;
  #line 122 
  smc->hw.t_stop = 0UL;
  #line 123 
  smc->hw.timer_activ = (unsigned short)0U;
  #line 125 
  hwt_restart(smc);
  #line 126 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwt.c"
void hwt_restart(struct s_smc *smc)
{
  #line 144 
  hwt_stop(smc);
  #line 145 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwt.c"
u_long hwt_read(struct s_smc *smc)
{
  #line 162 
  u_short tr;
  #line 163 
  u_long is;
  #line 165 
  if ((unsigned int)smc->hw.timer_activ != 0U) {
    #line 166 
    hwt_stop(smc);
    #line 167 
    tr = (unsigned short)(ioread32(smc->hw.iop + 292U) / 200U);
    #line 169 
    is = (unsigned long)ioread32(smc->hw.iop + 8U);
    #line 171 
    if ((unsigned long)tr > smc->hw.t_start || (is & 4194304UL) != 0UL) {
      #line 172 
      hwt_restart(smc);
      #line 173 
      smc->hw.t_stop = smc->hw.t_start;
    }
    else 
         #line 176 
         smc->hw.t_stop = smc->hw.t_start - (unsigned long)tr;
  }
  #line 178 
  return smc->hw.t_stop;
}

#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwt.c"
u_long hwt_quick_read(struct s_smc *smc)
{
  #line 197 
  u_long interval;
  #line 198 
  u_long time;
  #line 200 
  interval = (unsigned long)ioread32(smc->hw.iop + 288U);
  #line 201 
  iowrite16((unsigned short)2,smc->hw.iop + 296U);
  #line 202 
  time = (unsigned long)ioread32(smc->hw.iop + 292U);
  #line 203 
  iowrite32((unsigned int)time,smc->hw.iop + 288U);
  #line 204 
  iowrite16((unsigned short)4,smc->hw.iop + 296U);
  #line 205 
  iowrite32((unsigned int)interval,smc->hw.iop + 288U);
  #line 207 
  return time;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/fddi/skfp/hwt.c"
void hwt_wait_time(struct s_smc *smc, u_long start, long duration)
{
  #line 225 
  long diff;
  #line 226 
  long interval;
  #line 227 
  int wrapped;
  #line 232 
  if ((unsigned int)smc->hw.timer_activ == 0U) 
                                               #line 234 
                                               return;
  else {
    #line 232 
    if (hwt_quick_read(smc) == hwt_quick_read(smc)) 
                                                    #line 234 
                                                    return;
  }
  #line 237 
  interval = (long)ioread32(smc->hw.iop + 288U);
  #line 238 
  if (interval > duration) 
    #line 239 
    while (1) {
      {
        #line 240 
        diff = (long)(start - hwt_quick_read(smc));
        #line 241 
        if (diff < 0L) 
                       #line 242 
                       diff += interval;
      }
      #line 243 
      if (! (diff <= duration)) 
                                #line 239 
                                break;
    }
  else {
    #line 247 
    diff = interval;
    #line 248 
    wrapped = 0;
    #line 249 
    while (1) {
      #line 250 
      if (wrapped == 0) {
        #line 251 
        ;
        #line 251 
        if (hwt_quick_read(smc) >= start) {
          #line 252 
          diff += interval;
          #line 253 
          wrapped = 1;
        }
      }
      else {
        #line 257 
        ;
        #line 257 
        if (hwt_quick_read(smc) < start) 
                                         #line 258 
                                         wrapped = 0;
      }
      #line 258 
      if (! (diff <= duration)) 
                                #line 249 
                                break;
    }
  }
  #line 263 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
#line 100 
void emg_dispatch_deregister_5(struct pci_driver *arg0);
#line 56 
#line 134 
void emg_dispatch_deregister_8(struct net_device *arg0);
#line 57 
#line 91 
void emg_dispatch_irq_deregister_3(int arg0);
#line 58 
#line 120 
void emg_dispatch_irq_register_7(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 59 
#line 80 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 60 
#line 109 
void emg_dispatch_register_6(struct net_device *arg0);
#line 61 
#line 676 
void *emg_entry_point_insmod(void *arg0);
#line 64 
#line 143 
void *emg_interrupt_interrupt_scenario_skfp_interrupt(void *arg0);
#line 65 
#line 206 
void *emg_net_random_allocationless_scenario_skfp_ioctl(void *arg0);
#line 66 
#line 315 
void *emg_pci_pci_scenario_skfddi_pci_driver(void *arg0);
#line 71 
#line 705 
int main(void);
#line 74  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_10;
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_11;
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_9;
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 81 
  int ret;
  #line 82 
  struct emg_struct_pci_scenario_skfddi_pci_driver_11 *cf_arg_11;
  #line 83 
  cf_arg_11 = (struct emg_struct_pci_scenario_skfddi_pci_driver_11 *)ldv_xmalloc(16UL);
  #line 84 
  cf_arg_11->arg0 = arg0;
  #line 85 
  ret = pthread_create(& emg_thread_11,(pthread_attr_t *)0,& emg_pci_pci_scenario_skfddi_pci_driver,(void *)cf_arg_11);
  #line 86 
  __VERIFIER_assume(ret == 0);
  #line 87 
  return;
}

#line 91  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_3(int arg0)
{
  #line 92 
  int ret;
  #line 93 
  struct emg_struct_free_irq_3 *cf_arg_9;
  #line 94 
  ret = pthread_join(emg_thread_9,(void **)0);
  #line 95 
  __VERIFIER_assume(ret == 0);
  #line 96 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_5(struct pci_driver *arg0)
{
  #line 101 
  int ret;
  #line 102 
  struct emg_struct_pci_scenario_skfddi_pci_driver_11 *cf_arg_11;
  #line 103 
  ret = pthread_join(emg_thread_11,(void **)0);
  #line 104 
  __VERIFIER_assume(ret == 0);
  #line 105 
  return;
}

#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_6(struct net_device *arg0)
{
  #line 110 
  int ret;
  #line 111 
  struct emg_struct_random_allocationless_scenario_skfp_ioctl_10 *cf_arg_10;
  #line 112 
  cf_arg_10 = (struct emg_struct_random_allocationless_scenario_skfp_ioctl_10 *)ldv_xmalloc(16UL);
  #line 113 
  cf_arg_10->arg0 = arg0;
  #line 114 
  ret = pthread_create(& emg_thread_10,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_skfp_ioctl,(void *)cf_arg_10);
  #line 115 
  __VERIFIER_assume(ret == 0);
  #line 116 
  return;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_7(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 121 
  int ret;
  #line 122 
  struct emg_struct_interrupt_scenario_skfp_interrupt_9 *cf_arg_9;
  #line 123 
  cf_arg_9 = (struct emg_struct_interrupt_scenario_skfp_interrupt_9 *)ldv_xmalloc(40UL);
  #line 124 
  cf_arg_9->arg0 = arg0;
  #line 125 
  cf_arg_9->arg1 = arg1;
  #line 126 
  cf_arg_9->arg2 = arg2;
  #line 127 
  cf_arg_9->arg3 = arg3;
  #line 128 
  ret = pthread_create(& emg_thread_9,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_skfp_interrupt,(void *)cf_arg_9);
  #line 129 
  __VERIFIER_assume(ret == 0);
  #line 130 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct net_device *arg0)
{
  #line 135 
  int ret;
  #line 136 
  struct emg_struct_random_allocationless_scenario_skfp_ioctl_10 *cf_arg_10;
  #line 137 
  ret = pthread_join(emg_thread_10,(void **)0);
  #line 138 
  __VERIFIER_assume(ret == 0);
  #line 139 
  return;
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_skfp_interrupt(void *arg0)
{
  #line 146 
  enum irqreturn (*emg_9_callback)(int , void *);
  #line 147 
  void *emg_9_data;
  #line 148 
  int emg_9_line;
  #line 149 
  enum irqreturn emg_9_ret_val;
  #line 150 
  enum irqreturn (*emg_9_thread)(int , void *);
  #line 152 
  struct emg_struct_interrupt_scenario_skfp_interrupt_9 *data = (struct emg_struct_interrupt_scenario_skfp_interrupt_9 *)arg0;
  #line 155 
  emg_9_callback = & emg_wrapper_skfp_interrupt;
  #line 158 
  if (data != (struct emg_struct_interrupt_scenario_skfp_interrupt_9 *)0) {
    #line 159 
    emg_9_line = data->arg0;
    #line 160 
    emg_9_callback = data->arg1;
    #line 161 
    emg_9_thread = data->arg2;
    #line 162 
    emg_9_data = data->arg3;
    #line 163 
    ldv_free((void *)data);
  }
  #line 169 
  ldv_switch_to_interrupt_context();
  #line 173 
  emg_9_ret_val = emg_wrapper_skfp_interrupt(emg_9_line,emg_9_data);
  #line 178 
  ldv_switch_to_process_context();
  #line 181 
  if (ldv_undef_int() != 0) {
    #line 183 
    __VERIFIER_assume(emg_9_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 187 
    if (emg_9_thread != (enum irqreturn (*)(int , void *))0) 
                                                             #line 188 
                                                             (*emg_9_thread)(emg_9_line,emg_9_data);
  }
  else 
       #line 193 
       __VERIFIER_assume(emg_9_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 201 
  return (void *)0;
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_skfp_ioctl(void *arg0)
{
  #line 209 
  struct net_device *emg_10_container;
  #line 210 
  struct sk_buff *emg_10_emg_param_0_3;
  #line 211 
  struct ifreq *emg_10_emg_param_1_0;
  #line 212 
  void *emg_10_emg_param_1_2;
  #line 213 
  int emg_10_emg_param_2_1;
  #line 214 
  int emg_repeat_cnt_call_10 = 1;
  #line 216 
  struct emg_struct_random_allocationless_scenario_skfp_ioctl_10 *data = (struct emg_struct_random_allocationless_scenario_skfp_ioctl_10 *)arg0;
  #line 221 
  if (data != (struct emg_struct_random_allocationless_scenario_skfp_ioctl_10 *)0) {
    #line 222 
    emg_10_container = data->arg0;
    #line 223 
    ldv_free((void *)data);
  }
  #line 228 
  goto emg_call_10;
  #line 232 
  return (void *)0;
  #line 235 
  emg_call_10: 
               #line 235 
  ;
  #line 236 
  switch (ldv_undef_int()) {
    #line 237 
    case 0: 
            #line 237 
    ;
    #line 239 
    emg_10_emg_param_0_3 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 239 
    emg_10_emg_param_0_3 = emg_10_emg_param_0_3;
    #line 243 
    emg_wrapper_skfp_send_pkt(emg_10_emg_param_0_3,emg_10_container);
    #line 247 
    ldv_free((void *)emg_10_emg_param_0_3);
    #line 249 
    break;
    #line 251 
    case 1: 
            #line 251 
    ;
    #line 253 
    emg_wrapper_skfp_ctl_set_multicast_list(emg_10_container);
    #line 255 
    break;
    #line 257 
    case 2: 
            #line 257 
    ;
    #line 259 
    emg_10_emg_param_1_2 = ldv_xmalloc_unknown_size(0UL);
    #line 259 
    emg_10_emg_param_1_2 = emg_10_emg_param_1_2;
    #line 263 
    emg_wrapper_skfp_ctl_set_mac_address(emg_10_container,emg_10_emg_param_1_2);
    #line 267 
    ldv_free(emg_10_emg_param_1_2);
    #line 269 
    break;
    #line 271 
    case 3: 
            #line 271 
    ;
    #line 273 
    emg_wrapper_skfp_ctl_get_stats(emg_10_container);
    #line 275 
    break;
    #line 277 
    case 4: 
            #line 277 
    ;
    #line 279 
    emg_10_emg_param_1_0 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 279 
    emg_10_emg_param_1_0 = emg_10_emg_param_1_0;
    #line 283 
    emg_wrapper_skfp_ioctl(emg_10_container,emg_10_emg_param_1_0,emg_10_emg_param_2_1);
    #line 287 
    ldv_free((void *)emg_10_emg_param_1_0);
    #line 290 
    if (emg_repeat_cnt_call_10 > 0) {
      #line 291 
      emg_repeat_cnt_call_10 --;
      #line 293 
      goto emg_call_10;
    }
    else 
         #line 295 
         __VERIFIER_assume(0);
    #line 299 
    break;
    #line 301 
    case 5: 
            #line 301 
    ;
    #line 305 
    break;
    #line 307 
    default: 
             #line 307 
    ;
    #line 307 
    __VERIFIER_assume(0);
  }
  #line 310 
  return (void *)0;
}

#line 315  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_skfddi_pci_driver(void *arg0)
{
  #line 318 
  int emg_11_choice;
  #line 319 
  struct pci_driver *emg_11_container;
  #line 320 
  struct pci_device_id *emg_11_device_id;
  #line 321 
  struct pci_dev *emg_11_resource_0;
  #line 322 
  struct pm_message emg_11_resource_1;
  #line 323 
  int emg_11_ret;
  #line 324 
  int emg_repeat_cnt_main_11_0 = 1;
  #line 325 
  int emg_repeat_cnt_main_11_1 = 1;
  #line 326 
  int emg_repeat_cnt_call_11_0 = 1;
  #line 327 
  int emg_repeat_cnt_call_11_1 = 1;
  #line 329 
  struct emg_struct_pci_scenario_skfddi_pci_driver_11 *data = (struct emg_struct_pci_scenario_skfddi_pci_driver_11 *)arg0;
  #line 333 
  emg_11_choice = 0;
  #line 334 
  emg_11_ret = ldv_undef_int();
  #line 335 
  emg_11_choice = 0;
  #line 336 
  emg_11_container = emg_alias_skfddi_pci_driver;
  #line 337 
  emg_11_ret = ldv_undef_int();
  #line 339 
  __VERIFIER_assume(data->arg0 == emg_alias_skfddi_pci_driver);
  #line 341 
  if (data != (struct emg_struct_pci_scenario_skfddi_pci_driver_11 *)0) {
    #line 342 
    emg_11_container = data->arg0;
    #line 343 
    ldv_free((void *)data);
  }
  #line 348 
  emg_11_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 349 
  emg_11_choice = __ldv_undef_int_range(0,1);
  #line 350 
  emg_11_device_id = emg_11_container->id_table + (unsigned long)emg_11_choice;
  #line 354 
  goto emg_main_11;
  #line 358 
  return (void *)0;
  #line 361 
  emg_call_11: 
               #line 361 
  ;
  #line 362 
  switch (ldv_undef_int()) {
    #line 363 
    case 0: 
            #line 363 
    ;
    #line 368 
    if (emg_repeat_cnt_call_11_1 > 0) {
      #line 369 
      emg_repeat_cnt_call_11_1 --;
      #line 371 
      goto emg_call_11;
    }
    else 
         #line 373 
         __VERIFIER_assume(0);
    #line 377 
    break;
    #line 379 
    case 1: 
            #line 379 
    ;
    #line 381 
    if (emg_11_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 382 
      emg_11_ret = (*(emg_11_container->suspend))(emg_11_resource_0,emg_11_resource_1); else 
                                                                    #line 384 
                                                                    emg_11_ret = ldv_undef_int();
    #line 390 
    emg_11_ret = ldv_filter_err_code(emg_11_ret);
    #line 394 
    if (emg_11_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 395 
                                                                  (*(emg_11_container->resume))(emg_11_resource_0);
    #line 399 
    if (emg_repeat_cnt_call_11_0 > 0) {
      #line 400 
      emg_repeat_cnt_call_11_0 --;
      #line 402 
      goto emg_call_11;
    }
    else 
         #line 404 
         __VERIFIER_assume(0);
    #line 408 
    break;
    #line 410 
    case 2: 
            #line 410 
    ;
    #line 412 
    if (emg_11_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 413 
      (*(emg_11_container->shutdown))(emg_11_resource_0);
    #line 418 
    emg_wrapper_skfp_remove_one(emg_11_resource_0);
    #line 421 
    if (emg_repeat_cnt_main_11_0 > 0) {
      #line 422 
      emg_repeat_cnt_main_11_0 --;
      #line 424 
      goto emg_main_11;
    }
    else 
         #line 426 
         __VERIFIER_assume(0);
    #line 430 
    break;
    #line 432 
    default: 
             #line 432 
    ;
    #line 432 
    __VERIFIER_assume(0);
  }
  #line 435 
  return (void *)0;
  #line 438 
  emg_main_11: 
               #line 438 
  ;
  #line 439 
  if (ldv_undef_int() != 0) {
    #line 442 
    ldv_pre_probe();
    #line 446 
    emg_11_ret = emg_wrapper_skfp_init_one(emg_11_resource_0,emg_11_device_id);
    #line 451 
    emg_11_ret = ldv_post_probe(emg_11_ret);
    #line 454 
    if (ldv_undef_int() != 0) {
      #line 456 
      __VERIFIER_assume(emg_11_ret == 0);
      #line 460 
      goto emg_call_11;
    }
    else 
         #line 465 
         __VERIFIER_assume(emg_11_ret != 0);
    #line 469 
    if (emg_repeat_cnt_main_11_1 > 0) {
      #line 470 
      emg_repeat_cnt_main_11_1 --;
      #line 472 
      goto emg_main_11;
    }
    else 
         #line 474 
         __VERIFIER_assume(0);
  }
  else 
       #line 480 
       ldv_free((void *)emg_11_resource_0);
  #line 488 
  return (void *)0;
}

#line 493  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 496 
  struct pci_driver *emg_2_pci_driver;
  #line 498 
  emg_2_pci_driver = emg_alias_skfddi_pci_driver;
  #line 499 
  if (ldv_undef_int() != 0) {
    #line 501 
    emg_2_pci_driver = arg0;
    #line 505 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 509 
    return 0;
  }
  else {
    #line 513 
    return ldv_undef_int_negative();
  }
}

#line 521  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 524 
  int emg_3_line;
  #line 527 
  emg_3_line = (int)arg0;
  #line 531 
  emg_dispatch_irq_deregister_3(emg_3_line);
  #line 532 
  ;
  #line 532 
  return (void *)0;
}

#line 538  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 541 
  struct net_device *emg_4_netdev;
  #line 544 
  emg_4_netdev = arg0;
  #line 545 
  ldv_free((void *)emg_4_netdev);
  #line 548 
  return;
}

#line 553  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 556 
  struct pci_driver *emg_5_pci_driver;
  #line 558 
  emg_5_pci_driver = emg_alias_skfddi_pci_driver;
  #line 560 
  emg_5_pci_driver = arg0;
  #line 564 
  emg_dispatch_deregister_5(emg_5_pci_driver);
  #line 567 
  return;
}

#line 572  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 575 
  struct net_device *emg_6_netdev;
  #line 576 
  int emg_6_ret;
  #line 579 
  emg_6_ret = ldv_undef_int();
  #line 580 
  emg_6_ret = ldv_undef_int();
  #line 581 
  if (ldv_undef_int() != 0) {
    #line 583 
    emg_6_netdev = arg0;
    #line 587 
    emg_6_ret = emg_wrapper_skfp_open(emg_6_netdev);
    #line 590 
    if (ldv_undef_int() != 0) {
      #line 592 
      __VERIFIER_assume(emg_6_ret == 0);
      #line 596 
      emg_dispatch_register_6(emg_6_netdev);
      #line 600 
      return 0;
    }
    else {
      #line 604 
      __VERIFIER_assume(emg_6_ret != 0);
      #line 605 
      ldv_failed_register_netdev();
      #line 606 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 611 
    ldv_failed_register_netdev();
    #line 612 
    return ldv_undef_int_negative();
  }
}

#line 620  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 623 
  enum irqreturn (*emg_7_callback)(int , void *);
  #line 624 
  void *emg_7_data;
  #line 625 
  int emg_7_line;
  #line 626 
  enum irqreturn (*emg_7_thread)(int , void *);
  #line 628 
  emg_7_callback = & emg_wrapper_skfp_interrupt;
  #line 629 
  if (ldv_undef_int() != 0) {
    #line 631 
    emg_7_line = (int)arg0;
    #line 632 
    emg_7_callback = arg1;
    #line 633 
    emg_7_thread = (enum irqreturn (*)(int , void *))0;
    #line 634 
    emg_7_data = arg4;
    #line 638 
    emg_dispatch_irq_register_7(emg_7_line,emg_7_callback,emg_7_thread,emg_7_data);
    #line 642 
    return 0;
  }
  else {
    #line 646 
    return ldv_undef_int_negative();
  }
}

#line 654  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 657 
  struct net_device *emg_8_netdev;
  #line 660 
  emg_8_netdev = arg0;
  #line 664 
  emg_wrapper_skfp_close(emg_8_netdev);
  #line 668 
  emg_dispatch_deregister_8(emg_8_netdev);
  #line 671 
  return;
}

#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 679 
  int emg_1_ret;
  #line 682 
  emg_1_ret = emg_skfddi_pci_driver_init();
  #line 683 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 686 
  if (ldv_undef_int() != 0) {
    #line 688 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 692 
    emg_skfddi_pci_driver_exit();
  }
  else 
       #line 696 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 700 
  return (void *)0;
}

#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/fddi/skfp/skfp.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 707 
  ldv_initialize();
  #line 709 
  emg_entry_point_insmod((void *)0);
  #line 711 
  return 0;
}

