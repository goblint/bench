/* Generated by Frama-C */
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.c"
struct reg_range {
   u64 start ;
   u64 end ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.c"
struct hw_reg_map {
   u8 regblk ;
   u8 num_ranges ;
   u64 mask ;
   struct reg_range range[8U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 uint64_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_711 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_711 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_712 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_712 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_713 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_713 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_732 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_734 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_733 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_734 __anonCompField___anonstruct_nanosleep_733_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_735 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_731 {
   struct __anonstruct_futex_732 futex ;
   struct __anonstruct_nanosleep_733 nanosleep ;
   struct __anonstruct_poll_735 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_731 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_758 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_758 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_759 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_759 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_761 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_761 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_762 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_762 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_764 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_765 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_763 {
   atomic_t val ;
   struct __anonstruct_764 __anonCompField___anonunion_763_7 ;
   struct __anonstruct_765 __anonCompField___anonunion_763_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_763 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_767 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_766 {
   atomic_t cnts ;
   struct __anonstruct_767 __anonCompField___anonunion_766_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_766 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_795 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_796 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_794 {
   struct __anonstruct_795 __anonCompField___anonunion_794_17 ;
   struct __anonstruct_796 __anonCompField___anonunion_794_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_797 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_794 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_797 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_800 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_800 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_801 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_801 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_803 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_802 {
   struct raw_spinlock rlock ;
   struct __anonstruct_803 __anonCompField___anonunion_802_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_802 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_804 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_804 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_867 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_867 seqlock_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_869 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_868 {
   struct __anonstruct_869 __anonCompField___anonunion_868_26 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_868 __anonCompField_lockref_27 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_871 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_870 {
   struct __anonstruct_871 __anonCompField___anonunion_870_28 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_870 __anonCompField_qstr_29 ;
   unsigned char *name ;
};
#line 89 
struct inode;
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_872 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_873 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_872 __anonCompField_dentry_30 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_873 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_876 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_876 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_877 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_877 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct __anonstruct_nodemask_t_878 {
   unsigned long bits[16U] ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
typedef struct __anonstruct_nodemask_t_878 nodemask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct mem_cgroup;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_891 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_892 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_890 {
   struct __anonstruct_891 __anonCompField___anonunion_890_33 ;
   struct __anonstruct_892 __anonCompField___anonunion_890_34 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_890 __anonCompField_uprobe_task_35 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_893 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_893 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_895 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_896 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_899 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_898 {
   struct list_head slab_list ;
   struct __anonstruct_899 __anonCompField___anonunion_898_38 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_901 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_900 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_901 __anonCompField___anonunion_900_40 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_897 {
   union __anonunion_898 __anonCompField___anonstruct_897_39 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_900 __anonCompField___anonstruct_897_41 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_902 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_903 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_905 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_904 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_905 __anonCompField___anonstruct_904_45 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_906 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_894 {
   struct __anonstruct_895 __anonCompField___anonunion_894_36 ;
   struct __anonstruct_896 __anonCompField___anonunion_894_37 ;
   struct __anonstruct_897 __anonCompField___anonunion_894_42 ;
   struct __anonstruct_902 __anonCompField___anonunion_894_43 ;
   struct __anonstruct_903 __anonCompField___anonunion_894_44 ;
   struct __anonstruct_904 __anonCompField___anonunion_894_46 ;
   struct __anonstruct_906 __anonCompField___anonunion_894_47 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_907 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_894 __anonCompField_page_48 ;
   union __anonunion_907 __anonCompField_page_49 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_908 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_908 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_909 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_909 __anonCompField_mm_struct_50 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_1012 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_1012 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_1015 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_1015 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_1016 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_1017 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_1018 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_1019 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_1022 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_1023 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_1021 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_1022 _addr_bnd ;
   struct __anonstruct__addr_pkey_1023 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_1020 {
   void *_addr ;
   union __anonunion_1021 __anonCompField___anonstruct__sigfault_1020_54 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_1024 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_1025 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_1016 _kill ;
   struct __anonstruct__timer_1017 _timer ;
   struct __anonstruct__rt_1018 _rt ;
   struct __anonstruct__sigchld_1019 _sigchld ;
   struct __anonstruct__sigfault_1020 _sigfault ;
   struct __anonstruct__sigpoll_1024 _sigpoll ;
   struct __anonstruct__sigsys_1025 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_1030 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_1030 __anonCompField_kernel_siginfo_57 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_1035 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_1035 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_1037 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_1037 __anonCompField_task_struct_59 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_1044 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_1045 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_1044 __anonCompField_io_cq_60 ;
   union __anonunion_1045 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 288 
struct export_operations;
#line 290 
struct iovec;
#line 291 
struct kiocb;
#line 292 
struct kobject;
#line 294 
struct kstatfs;
#line 295 
struct swap_info_struct;
#line 296 
struct iov_iter;
#line 297 
struct fscrypt_info;
#line 298 
struct fscrypt_operations;
#line 299 
struct fsverity_info;
#line 300 
struct fsverity_operations;
#line 301 
struct fs_context;
#line 302 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_1046 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_1046 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_1047 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_1047 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_1052 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_1053 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_1054 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_1055 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_1052 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_1053 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_1054 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_1055 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_1056 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_1056 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_1058 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_1057 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_1058 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_1057 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_1060 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_1059 {
   struct __anonstruct_1060 __anonCompField___anonunion_1059_67 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_1059 __anonCompField_ctl_table_header_68 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 34 
struct key_tag;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_1062 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1061 {
   struct __anonstruct_1062 __anonCompField___anonunion_1061_69 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_1061 __anonCompField_keyring_index_key_70 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1063 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1064 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_1066 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1065 {
   struct keyring_index_key index_key ;
   struct __anonstruct_1066 __anonCompField___anonunion_1065_73 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_1068 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1067 {
   union key_payload payload ;
   struct __anonstruct_1068 __anonCompField___anonunion_1067_75 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_1063 __anonCompField_key_71 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_1064 __anonCompField_key_72 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_1065 __anonCompField_key_74 ;
   union __anonunion_1067 __anonCompField_key_76 ;
   struct key_restriction *restrict_link ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_1071 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_1071 __anonCompField_cred_77 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_1080 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_1080 __anonCompField_kernfs_node_78 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_1083 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_1083 __anonCompField_kernel_param_79 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_1161 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_1161 __anonCompField_pci_dev_80 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 1565 
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct npa_aura_s {
   u64 pool_addr ;
   u64 ena : 1 ;
   u64 reserved_65 : 2 ;
   u64 pool_caching : 1 ;
   u64 pool_way_mask : 16 ;
   u64 avg_con : 9 ;
   u64 reserved_93 : 1 ;
   u64 pool_drop_ena : 1 ;
   u64 aura_drop_ena : 1 ;
   u64 bp_ena : 2 ;
   u64 reserved_98_103 : 6 ;
   u64 aura_drop : 8 ;
   u64 shift : 6 ;
   u64 reserved_118_119 : 2 ;
   u64 avg_level : 8 ;
   u64 count : 36 ;
   u64 reserved_164_167 : 4 ;
   u64 nix0_bpid : 9 ;
   u64 reserved_177_179 : 3 ;
   u64 nix1_bpid : 9 ;
   u64 reserved_189_191 : 3 ;
   u64 limit : 36 ;
   u64 reserved_228_231 : 4 ;
   u64 bp : 8 ;
   u64 reserved_240_243 : 4 ;
   u64 fc_ena : 1 ;
   u64 fc_up_crossing : 1 ;
   u64 fc_stype : 2 ;
   u64 fc_hyst_bits : 4 ;
   u64 reserved_252_255 : 4 ;
   u64 fc_addr ;
   u64 pool_drop : 8 ;
   u64 update_time : 16 ;
   u64 err_int : 8 ;
   u64 err_int_ena : 8 ;
   u64 thresh_int : 1 ;
   u64 thresh_int_ena : 1 ;
   u64 thresh_up : 1 ;
   u64 reserved_363 : 1 ;
   u64 thresh_qint_idx : 7 ;
   u64 reserved_371 : 1 ;
   u64 err_qint_idx : 7 ;
   u64 reserved_379_383 : 5 ;
   u64 thresh : 36 ;
   u64 reserved_420_447 : 28 ;
   u64 reserved_448_511 ;
};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct npa_pool_s {
   u64 stack_base ;
   u64 ena : 1 ;
   u64 nat_align : 1 ;
   u64 reserved_66_67 : 2 ;
   u64 stack_caching : 1 ;
   u64 reserved_70_71 : 3 ;
   u64 stack_way_mask : 16 ;
   u64 buf_offset : 12 ;
   u64 reserved_100_103 : 4 ;
   u64 buf_size : 11 ;
   u64 reserved_115_127 : 13 ;
   u64 stack_max_pages : 32 ;
   u64 stack_pages : 32 ;
   u64 op_pc : 48 ;
   u64 reserved_240_255 : 16 ;
   u64 stack_offset : 4 ;
   u64 reserved_260_263 : 4 ;
   u64 shift : 6 ;
   u64 reserved_270_271 : 2 ;
   u64 avg_level : 8 ;
   u64 avg_con : 9 ;
   u64 fc_ena : 1 ;
   u64 fc_stype : 2 ;
   u64 fc_hyst_bits : 4 ;
   u64 fc_up_crossing : 1 ;
   u64 reserved_297_299 : 3 ;
   u64 update_time : 16 ;
   u64 reserved_316_319 : 4 ;
   u64 fc_addr ;
   u64 ptr_start ;
   u64 ptr_end ;
   u64 reserved_512_535 : 24 ;
   u64 err_int : 8 ;
   u64 err_int_ena : 8 ;
   u64 thresh_int : 1 ;
   u64 thresh_int_ena : 1 ;
   u64 thresh_up : 1 ;
   u64 reserved_555 : 1 ;
   u64 thresh_qint_idx : 7 ;
   u64 reserved_563 : 1 ;
   u64 err_qint_idx : 7 ;
   u64 reserved_571_575 : 5 ;
   u64 thresh : 36 ;
   u64 reserved_612_639 : 28 ;
   u64 reserved_640_703 ;
   u64 reserved_704_767 ;
   u64 reserved_768_831 ;
   u64 reserved_832_895 ;
   u64 reserved_896_959 ;
   u64 reserved_960_1023 ;
};
#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct nix_cq_ctx_s {
   u64 base ;
   u64 rsvd_64_67 : 4 ;
   u64 bp_ena : 1 ;
   u64 rsvd_69_71 : 3 ;
   u64 bpid : 9 ;
   u64 rsvd_81_83 : 3 ;
   u64 qint_idx : 7 ;
   u64 cq_err : 1 ;
   u64 cint_idx : 7 ;
   u64 avg_con : 9 ;
   u64 wrptr : 20 ;
   u64 tail : 20 ;
   u64 head : 20 ;
   u64 avg_level : 8 ;
   u64 update_time : 16 ;
   u64 bp : 8 ;
   u64 drop : 8 ;
   u64 drop_ena : 1 ;
   u64 ena : 1 ;
   u64 rsvd_210_211 : 2 ;
   u64 substream : 20 ;
   u64 caching : 1 ;
   u64 rsvd_233_235 : 3 ;
   u64 qsize : 4 ;
   u64 cq_err_int : 8 ;
   u64 cq_err_int_ena : 8 ;
};
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct nix_rq_ctx_s {
   u64 ena : 1 ;
   u64 sso_ena : 1 ;
   u64 ipsech_ena : 1 ;
   u64 ena_wqwd : 1 ;
   u64 cq : 20 ;
   u64 substream : 20 ;
   u64 wqe_aura : 20 ;
   u64 spb_aura : 20 ;
   u64 lpb_aura : 20 ;
   u64 sso_grp : 10 ;
   u64 sso_tt : 2 ;
   u64 pb_caching : 2 ;
   u64 wqe_caching : 1 ;
   u64 xqe_drop_ena : 1 ;
   u64 spb_drop_ena : 1 ;
   u64 lpb_drop_ena : 1 ;
   u64 rsvd_127_122 : 6 ;
   u64 rsvd_139_128 : 12 ;
   u64 spb_sizem1 : 6 ;
   u64 wqe_skip : 2 ;
   u64 rsvd_150_148 : 3 ;
   u64 spb_ena : 1 ;
   u64 lpb_sizem1 : 12 ;
   u64 first_skip : 7 ;
   u64 rsvd_171 : 1 ;
   u64 later_skip : 6 ;
   u64 xqe_imm_size : 6 ;
   u64 rsvd_189_184 : 6 ;
   u64 xqe_imm_copy : 1 ;
   u64 xqe_hdr_split : 1 ;
   u64 xqe_drop : 8 ;
   u64 xqe_pass : 8 ;
   u64 wqe_pool_drop : 8 ;
   u64 wqe_pool_pass : 8 ;
   u64 spb_aura_drop : 8 ;
   u64 spb_aura_pass : 8 ;
   u64 spb_pool_drop : 8 ;
   u64 spb_pool_pass : 8 ;
   u64 lpb_aura_drop : 8 ;
   u64 lpb_aura_pass : 8 ;
   u64 lpb_pool_drop : 8 ;
   u64 lpb_pool_pass : 8 ;
   u64 rsvd_291_288 : 4 ;
   u64 rq_int : 8 ;
   u64 rq_int_ena : 8 ;
   u64 qint_idx : 7 ;
   u64 rsvd_319_315 : 5 ;
   u64 ltag : 24 ;
   u64 good_utag : 8 ;
   u64 bad_utag : 8 ;
   u64 flow_tagw : 6 ;
   u64 rsvd_383_366 : 18 ;
   u64 octs : 48 ;
   u64 rsvd_447_432 : 16 ;
   u64 pkts : 48 ;
   u64 rsvd_511_496 : 16 ;
   u64 drop_octs : 48 ;
   u64 rsvd_575_560 : 16 ;
   u64 drop_pkts : 48 ;
   u64 rsvd_639_624 : 16 ;
   u64 re_pkts : 48 ;
   u64 rsvd_703_688 : 16 ;
   u64 rsvd_767_704 ;
   u64 rsvd_831_768 ;
   u64 rsvd_895_832 ;
   u64 rsvd_959_896 ;
   u64 rsvd_1023_960 ;
};
#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct nix_sq_ctx_s {
   u64 ena : 1 ;
   u64 qint_idx : 6 ;
   u64 substream : 20 ;
   u64 sdp_mcast : 1 ;
   u64 cq : 20 ;
   u64 sqe_way_mask : 16 ;
   u64 smq : 9 ;
   u64 cq_ena : 1 ;
   u64 xoff : 1 ;
   u64 sso_ena : 1 ;
   u64 smq_rr_quantum : 24 ;
   u64 default_chan : 12 ;
   u64 sqb_count : 16 ;
   u64 smq_rr_count : 25 ;
   u64 sqb_aura : 20 ;
   u64 sq_int : 8 ;
   u64 sq_int_ena : 8 ;
   u64 sqe_stype : 2 ;
   u64 rsvd_191 : 1 ;
   u64 max_sqe_size : 2 ;
   u64 cq_limit : 8 ;
   u64 lmt_dis : 1 ;
   u64 mnq_dis : 1 ;
   u64 smq_next_sq : 20 ;
   u64 smq_lso_segnum : 8 ;
   u64 tail_offset : 6 ;
   u64 smenq_offset : 6 ;
   u64 head_offset : 6 ;
   u64 smenq_next_sqb_vld : 1 ;
   u64 smq_pend : 1 ;
   u64 smq_next_sq_vld : 1 ;
   u64 rsvd_255_253 : 3 ;
   u64 next_sqb : 64 ;
   u64 tail_sqb : 64 ;
   u64 smenq_sqb : 64 ;
   u64 smenq_next_sqb : 64 ;
   u64 head_sqb : 64 ;
   u64 rsvd_583_576 : 8 ;
   u64 vfi_lso_total : 18 ;
   u64 vfi_lso_sizem1 : 3 ;
   u64 vfi_lso_sb : 8 ;
   u64 vfi_lso_mps : 14 ;
   u64 vfi_lso_vlan0_ins_ena : 1 ;
   u64 vfi_lso_vlan1_ins_ena : 1 ;
   u64 vfi_lso_vld : 1 ;
   u64 rsvd_639_630 : 10 ;
   u64 scm_lso_rem : 18 ;
   u64 rsvd_703_658 : 46 ;
   u64 octs : 48 ;
   u64 rsvd_767_752 : 16 ;
   u64 pkts : 48 ;
   u64 rsvd_831_816 : 16 ;
   u64 rsvd_895_832 : 64 ;
   u64 dropped_octs : 48 ;
   u64 rsvd_959_944 : 16 ;
   u64 dropped_pkts : 48 ;
   u64 rsvd_1023_1008 : 16 ;
};
#line 815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct nix_rsse_s {
   uint32_t rq : 20 ;
   uint32_t reserved_20_31 : 12 ;
};
#line 827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct nix_rx_mce_s {
   uint64_t op : 2 ;
   uint64_t rsvd_2 : 1 ;
   uint64_t eol : 1 ;
   uint64_t index : 20 ;
   uint64_t rsvd_31_24 : 8 ;
   uint64_t pf_func : 16 ;
   uint64_t next : 16 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/common.h"
struct qmem {
   void *base ;
   dma_addr_t iova ;
   int alloc_sz ;
   u8 entry_sz ;
   u8 align ;
   u32 qsize ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/common.h"
struct admin_queue {
   struct qmem *inst ;
   struct qmem *res ;
   spinlock_t lock ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_1175 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_1177 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_1176 {
   unsigned long nr_segs ;
   struct __anonstruct_1177 __anonCompField___anonunion_1176_82 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_1175 __anonCompField_iov_iter_81 ;
   union __anonunion_1176 __anonCompField_iov_iter_83 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 422 
struct ns_common;
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_1196 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_1196 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_1197 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_1197 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1219 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_1218 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_1219 __anonCompField___anonstruct_1218_98 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1217 {
   struct __anonstruct_1218 __anonCompField___anonunion_1217_99 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1220 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1221 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_1223 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1222 {
   struct __anonstruct_1223 __anonCompField___anonunion_1222_103 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_1225 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1224 {
   __wsum csum ;
   struct __anonstruct_1225 __anonCompField___anonunion_1224_105 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1226 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1227 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1228 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_1217 __anonCompField_sk_buff_100 ;
   union __anonunion_1220 __anonCompField_sk_buff_101 ;
   union __anonunion_1221 __anonCompField_sk_buff_102 ;
   char cb[48U] ;
   union __anonunion_1222 __anonCompField_sk_buff_104 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_1224 __anonCompField_sk_buff_106 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_1226 __anonCompField_sk_buff_107 ;
   __u32 secmark ;
   union __anonunion_1227 __anonCompField_sk_buff_108 ;
   union __anonunion_1228 __anonCompField_sk_buff_109 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_1258 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_1258 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_1259 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_1259 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_1260 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_1260 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_1261 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_1261 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_1262 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_1262 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_1263 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_1263 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_1264 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_1264 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_1265 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_1265 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_1266 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_1267 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_1266 ifr_ifrn ;
   union __anonunion_ifr_ifru_1267 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_1286 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_1286 __anonCompField_ethtool_rxnfc_112 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_1289 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_1289 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_1290 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_1290 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_1291 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_1291 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_1292 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_1292 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_1293 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_1293 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_1295 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_1295 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_1307 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_1307 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_1309 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_1308 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_1309 __anonCompField___anonunion_1308_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_1308 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1311 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_1313 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1312 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_1313 __anonCompField___anonstruct_1312_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1314 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1315 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1316 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_1317 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_1319 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1318 {
   union __anonunion_1319 __anonCompField___anonstruct_1318_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_1320 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_1321 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_1322 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_1323 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_1324 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_1311 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_1312 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_1314 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_1315 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_1316 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_1317 test ;
   struct __anonstruct_1318 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_1320 info ;
   struct __anonstruct_query_1321 query ;
   struct __anonstruct_raw_tracepoint_1322 raw_tracepoint ;
   struct __anonstruct_1323 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_1324 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_1351 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_1351 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_1353 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_1352 {
   struct __anonstruct_tail_call_1353 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_1352 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_1354 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_1354 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_1356 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_1356 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_1381 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_1381 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_1386 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_1387 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_1388 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_1389 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_1385 {
   struct __anonstruct_1386 __anonCompField___anonunion_1385_157 ;
   struct __anonstruct_1387 __anonCompField___anonunion_1385_158 ;
   struct __anonstruct_1388 __anonCompField___anonunion_1385_159 ;
   struct __anonstruct_xsk_1389 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_1385 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15372 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15373 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_1390 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_1391 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_1390 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15372 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15373 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_1391 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct otx2_mbox_dev {
   void *mbase ;
   spinlock_t mbox_lock ;
   u16 msg_size ;
   u16 rsp_size ;
   u16 num_msgs ;
   u16 msgs_acked ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct otx2_mbox {
   struct pci_dev *pdev ;
   void *hwbase ;
   void *reg_base ;
   u64 trigger ;
   u16 tr_shift ;
   u64 rx_start ;
   u64 tx_start ;
   u16 rx_size ;
   u16 tx_size ;
   u16 ndevs ;
   struct otx2_mbox_dev *dev ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct mbox_msghdr {
   u16 pcifunc ;
   u16 id ;
   u16 sig ;
   u16 ver ;
   u16 next_msgoff ;
   int rc ;
};
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct cgx_link_user_info {
   uint64_t link_up : 1 ;
   uint64_t full_duplex : 1 ;
   uint64_t lmac_type_id : 4 ;
   uint64_t speed : 20 ;
   char lmac_type[16U] ;
};
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
union __anonunion_1402 {
   struct npa_aura_s aura ;
   struct npa_pool_s pool ;
};
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
union __anonunion_1403 {
   struct npa_aura_s aura_mask ;
   struct npa_pool_s pool_mask ;
};
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npa_aq_enq_req {
   struct mbox_msghdr hdr ;
   u32 aura_id ;
   u8 ctype ;
   u8 op ;
   union __anonunion_1402 __anonCompField_npa_aq_enq_req_162 ;
   union __anonunion_1403 __anonCompField_npa_aq_enq_req_163 ;
};
#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
union __anonunion_1404 {
   struct npa_aura_s aura ;
   struct npa_pool_s pool ;
};
#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npa_aq_enq_rsp {
   struct mbox_msghdr hdr ;
   union __anonunion_1404 __anonCompField_npa_aq_enq_rsp_164 ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
union __anonunion_1405 {
   struct nix_rq_ctx_s rq ;
   struct nix_sq_ctx_s sq ;
   struct nix_cq_ctx_s cq ;
   struct nix_rsse_s rss ;
   struct nix_rx_mce_s mce ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
union __anonunion_1406 {
   struct nix_rq_ctx_s rq_mask ;
   struct nix_sq_ctx_s sq_mask ;
   struct nix_cq_ctx_s cq_mask ;
   struct nix_rsse_s rss_mask ;
   struct nix_rx_mce_s mce_mask ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_aq_enq_req {
   struct mbox_msghdr hdr ;
   u32 qidx ;
   u8 ctype ;
   u8 op ;
   union __anonunion_1405 __anonCompField_nix_aq_enq_req_165 ;
   union __anonunion_1406 __anonCompField_nix_aq_enq_req_166 ;
};
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
union __anonunion_1407 {
   struct nix_rq_ctx_s rq ;
   struct nix_sq_ctx_s sq ;
   struct nix_cq_ctx_s cq ;
   struct nix_rsse_s rss ;
   struct nix_rx_mce_s mce ;
};
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_aq_enq_rsp {
   struct mbox_msghdr hdr ;
   union __anonunion_1407 __anonCompField_nix_aq_enq_rsp_167 ;
};
#line 716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct mcam_entry {
   u64 kw[7U] ;
   u64 kw_mask[7U] ;
   u64 action ;
   u64 vtag_action ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct dump_ctx {
   int lf ;
   int id ;
   bool all ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct rvu_debugfs {
   struct dentry *root ;
   struct dentry *cgx_root ;
   struct dentry *cgx ;
   struct dentry *lmac ;
   struct dentry *npa ;
   struct dentry *nix ;
   struct dentry *npc ;
   struct dump_ctx npa_aura_ctx ;
   struct dump_ctx npa_pool_ctx ;
   struct dump_ctx nix_cq_ctx ;
   struct dump_ctx nix_rq_ctx ;
   struct dump_ctx nix_sq_ctx ;
   int npa_qsize_id ;
   int nix_qsize_id ;
};
#line 63 
struct rvu;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct rvu_work {
   struct work_struct work ;
   struct rvu *rvu ;
   int num_msgs ;
   int up_num_msgs ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct rsrc_bmap {
   unsigned long *bmap ;
   u16 max ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct rvu_block {
   struct rsrc_bmap lf ;
   struct admin_queue *aq ;
   u16 *fn_map ;
   bool multislot ;
   bool implemented ;
   u8 addr ;
   u8 type ;
   u8 lfshift ;
   u64 lookup_reg ;
   u64 pf_lfcnt_reg ;
   u64 vf_lfcnt_reg ;
   u64 lfcfg_reg ;
   u64 msixcfg_reg ;
   u64 lfreset_reg ;
   unsigned char name[32U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct nix_mcast {
   struct qmem *mce_ctx ;
   struct qmem *mcast_buf ;
   int replay_pkind ;
   int next_free_mce ;
   struct mutex mce_lock ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct nix_mce_list {
   struct hlist_head head ;
   int count ;
   int max ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct npc_mcam {
   struct rsrc_bmap counters ;
   struct mutex lock ;
   unsigned long *bmap ;
   unsigned long *bmap_reverse ;
   u16 bmap_entries ;
   u16 bmap_fcnt ;
   u16 *entry2pfvf_map ;
   u16 *entry2cntr_map ;
   u16 *cntr2pfvf_map ;
   u16 *cntr_refcnt ;
   u8 keysize ;
   u8 banks ;
   u8 banks_per_entry ;
   u16 banksize ;
   u16 total_entries ;
   u16 nixlf_offset ;
   u16 pf_offset ;
   u16 lprio_count ;
   u16 lprio_start ;
   u16 hprio_count ;
   u16 hprio_end ;
   u16 rx_miss_act_cntr ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct rvu_pfvf {
   bool npalf ;
   bool nixlf ;
   u16 sso ;
   u16 ssow ;
   u16 cptlfs ;
   u16 timlfs ;
   u8 cgx_lmac ;
   struct rsrc_bmap msix ;
   u16 *msix_lfmap ;
   struct qmem *aura_ctx ;
   struct qmem *pool_ctx ;
   struct qmem *npa_qints_ctx ;
   unsigned long *aura_bmap ;
   unsigned long *pool_bmap ;
   struct qmem *rq_ctx ;
   struct qmem *sq_ctx ;
   struct qmem *cq_ctx ;
   struct qmem *rss_ctx ;
   struct qmem *cq_ints_ctx ;
   struct qmem *nix_qints_ctx ;
   unsigned long *sq_bmap ;
   unsigned long *rq_bmap ;
   unsigned long *cq_bmap ;
   u16 rx_chan_base ;
   u16 tx_chan_base ;
   u8 rx_chan_cnt ;
   u8 tx_chan_cnt ;
   u16 maxlen ;
   u16 minlen ;
   u8 mac_addr[6U] ;
   u16 bcast_mce_idx ;
   struct nix_mce_list bcast_mce_list ;
   struct mcam_entry entry ;
   int rxvlan_index ;
   bool rxvlan ;
   bool cgx_in_use ;
   int cgx_users ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct nix_txsch {
   struct rsrc_bmap schq ;
   u8 lvl ;
   u32 *pfvf_map ;
};
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct nix_mark_format {
   u8 total ;
   u8 in_use ;
   u32 *cfg ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct npc_pkind {
   struct rsrc_bmap rsrc ;
   u32 *pfchan_map ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct nix_flowkey {
   u32 flowkey[32U] ;
   int in_use ;
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct nix_lso {
   u8 total ;
   u8 in_use ;
};
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct nix_hw {
   struct nix_txsch txsch[5U] ;
   struct nix_mcast mcast ;
   struct nix_flowkey flowkey ;
   struct nix_mark_format mark_format ;
   struct nix_lso lso ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct hw_cap {
   u8 nix_tx_aggr_lvl ;
   u16 nix_txsch_per_cgx_lmac ;
   u16 nix_txsch_per_lbk_lmac ;
   u16 nix_txsch_per_sdp_lmac ;
   bool nix_fixed_txschq_mapping ;
   bool nix_shaping ;
   bool nix_tx_link_bp ;
   bool nix_rx_multicast ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct rvu_hwinfo {
   u8 total_pfs ;
   u16 total_vfs ;
   u16 max_vfs_per_pf ;
   u8 cgx ;
   u8 lmac_per_cgx ;
   u8 cgx_links ;
   u8 lbk_links ;
   u8 sdp_links ;
   u8 npc_kpus ;
   struct hw_cap cap ;
   struct rvu_block block[15U] ;
   struct nix_hw *nix0 ;
   struct npc_pkind pkind ;
   struct npc_mcam mcam ;
};
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct mbox_wq_info {
   struct otx2_mbox mbox ;
   struct rvu_work *mbox_wrk ;
   struct otx2_mbox mbox_up ;
   struct rvu_work *mbox_wrk_up ;
   struct workqueue_struct *mbox_wq ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
struct rvu {
   void *afreg_base ;
   void *pfreg_base ;
   struct pci_dev *pdev ;
   struct device *dev ;
   struct rvu_hwinfo *hw ;
   struct rvu_pfvf *pf ;
   struct rvu_pfvf *hwvf ;
   struct mutex rsrc_lock ;
   int vfs ;
   struct mbox_wq_info afpf_wq_info ;
   struct mbox_wq_info afvf_wq_info ;
   struct rvu_work *flr_wrk ;
   struct workqueue_struct *flr_wq ;
   struct mutex flr_lock ;
   u16 num_vec ;
   char *irq_name ;
   bool *irq_allocated ;
   dma_addr_t msix_base_iova ;
   u8 cgx_mapped_pfs ;
   u8 cgx_cnt_max ;
   u8 *pf2cgxlmac_map ;
   u16 *cgxlmac2pf_map ;
   unsigned long pf_notify_bmap ;
   void **cgx_idmap ;
   struct work_struct cgx_evh_work ;
   struct workqueue_struct *cgx_evh_wq ;
   spinlock_t cgx_evq_lock ;
   struct list_head cgx_evq_head ;
   struct mutex cgx_cfg_lock ;
   char mkex_pfl_name[128U] ;
   struct rvu_debugfs rvu_dbg ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1423 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1425 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct msg_req {
   struct mbox_msghdr hdr ;
};
#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct msg_rsp {
   struct mbox_msghdr hdr ;
};
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct cgx_stats_rsp {
   struct mbox_msghdr hdr ;
   u64 rx_stats[13U] ;
   u64 tx_stats[18U] ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct cgx_mac_addr_set_or_get {
   struct mbox_msghdr hdr ;
   u8 mac_addr[6U] ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct cgx_link_info_msg {
   struct mbox_msghdr hdr ;
   struct cgx_link_user_info link_info ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.h"
struct cgx_link_event {
   struct cgx_link_user_info link_uinfo ;
   u8 cgx_id ;
   u8 lmac_id ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.h"
struct cgx_event_cb {
   int (*notify_link_chg)(struct cgx_link_event *, void *) ;
   void *data ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
struct cgx_evq_entry {
   struct list_head evq_node ;
   struct cgx_link_event link_event ;
};
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
union __anonunion___u_2117 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct npa_aq_inst_s {
   u64 op : 4 ;
   u64 ctype : 4 ;
   u64 lf : 9 ;
   u64 reserved_17_23 : 7 ;
   u64 cindex : 20 ;
   u64 reserved_44_62 : 19 ;
   u64 doneint : 1 ;
   u64 res_addr ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct npa_aq_res_s {
   u64 op : 4 ;
   u64 ctype : 4 ;
   u64 compcode : 8 ;
   u64 doneint : 1 ;
   u64 reserved_17_63 : 47 ;
   u64 reserved_64_127 ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npa_lf_alloc_req {
   struct mbox_msghdr hdr ;
   int node ;
   int aura_sz ;
   u32 nr_pools ;
   u64 way_mask ;
};
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npa_lf_alloc_rsp {
   struct mbox_msghdr hdr ;
   u32 stack_pg_ptrs ;
   u32 stack_pg_bytes ;
   u16 qints ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct hwctx_disable_req {
   struct mbox_msghdr hdr ;
   u8 ctype ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_2831 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_2831 key ;
} __attribute__((__aligned__(8)));
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2835 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2837 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
struct wait_queue_entry;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_entry {
   unsigned int flags ;
   void *private ;
   int (*func)(struct wait_queue_entry *, unsigned int , int , void *) ;
   struct list_head entry ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/acpi.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 1308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/acpi.h"
typedef enum irqreturn irqreturn_t;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity {
   unsigned int pre_vectors ;
   unsigned int post_vectors ;
   unsigned int nr_sets ;
   unsigned int set_size[4U] ;
   void (*calc_sets)(struct irq_affinity *, unsigned int ) ;
   void *priv ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
struct gpio_desc;
#line 327 
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_17326 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_17326 phy_interface_t;
#line 186 
struct phylink;
#line 188 
enum ldv_17341 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_17341 state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
struct cgx;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
struct lmac {
   wait_queue_head_t wq_cmd_cmplt ;
   struct mutex cmd_lock ;
   u64 resp ;
   struct cgx_link_user_info link_info ;
   struct cgx_event_cb event_cb ;
   spinlock_t event_cb_lock ;
   bool cmd_pend ;
   struct cgx *cgx ;
   u8 lmac_id ;
   char *name ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
struct cgx {
   void *reg_base ;
   struct pci_dev *pdev ;
   u8 cgx_id ;
   u8 lmac_count ;
   struct lmac *lmac_idmap[4U] ;
   struct work_struct cgx_cmd_work ;
   struct workqueue_struct *cgx_cmd_workq ;
   struct list_head cgx_list ;
};
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3560 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3562 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct nix_aq_inst_s {
   u64 op : 4 ;
   u64 ctype : 4 ;
   u64 lf : 7 ;
   u64 reserved_15_23 : 9 ;
   u64 cindex : 20 ;
   u64 reserved_44_62 : 19 ;
   u64 doneint : 1 ;
   u64 res_addr ;
};
#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct nix_aq_res_s {
   u64 op : 4 ;
   u64 ctype : 4 ;
   u64 compcode : 8 ;
   u64 doneint : 1 ;
   u64 reserved_17_63 : 47 ;
   u64 reserved_64_127 ;
};
#line 862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct nix_lso_format {
   u64 offset : 8 ;
   u64 layer : 2 ;
   u64 rsvd_10_11 : 2 ;
   u64 sizem1 : 2 ;
   u64 rsvd_14_15 : 2 ;
   u64 alg : 3 ;
   u64 rsvd_19_63 : 45 ;
};
#line 882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_struct.h"
struct nix_rx_flowkey_alg {
   u64 key_offset : 6 ;
   u64 ln_mask : 1 ;
   u64 fn_mask : 1 ;
   u64 hdr_offset : 8 ;
   u64 bytesm1 : 5 ;
   u64 lid : 3 ;
   u64 reserved_24_24 : 1 ;
   u64 ena : 1 ;
   u64 sel_chan : 1 ;
   u64 ltype_mask : 4 ;
   u64 ltype_match : 4 ;
   u64 reserved_35_63 : 29 ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_lf_alloc_req {
   struct mbox_msghdr hdr ;
   int node ;
   u32 rq_cnt ;
   u32 sq_cnt ;
   u32 cq_cnt ;
   u8 xqe_sz ;
   u16 rss_sz ;
   u8 rss_grps ;
   u16 npa_func ;
   u16 sso_func ;
   u64 rx_cfg ;
   u64 way_mask ;
};
#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_lf_alloc_rsp {
   struct mbox_msghdr hdr ;
   u16 sqb_size ;
   u16 rx_chan_base ;
   u16 tx_chan_base ;
   u8 rx_chan_cnt ;
   u8 tx_chan_cnt ;
   u8 lso_tsov4_idx ;
   u8 lso_tsov6_idx ;
   u8 mac_addr[6U] ;
   u8 lf_rx_stats ;
   u8 lf_tx_stats ;
   u16 cints ;
   u16 qints ;
};
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_txsch_alloc_req {
   struct mbox_msghdr hdr ;
   u16 schq_contig[5U] ;
   u16 schq[5U] ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_txsch_alloc_rsp {
   struct mbox_msghdr hdr ;
   u16 schq_contig[5U] ;
   u16 schq[5U] ;
   u16 schq_contig_list[5U][128U] ;
   u16 schq_list[5U][128U] ;
   u8 aggr_level ;
   u8 aggr_lvl_rr_prio ;
   u8 link_cfg_lvl ;
};
#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_txsch_free_req {
   struct mbox_msghdr hdr ;
   u16 flags ;
   u16 schq_lvl ;
   u16 schq ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_txschq_config {
   struct mbox_msghdr hdr ;
   u8 lvl ;
   u8 num_regs ;
   u64 reg[20U] ;
   u64 regval[20U] ;
};
#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct __anonstruct_tx_4243 {
   u64 vlan0 ;
   u64 vlan1 ;
   u8 insert_vlan : 1 ;
   u8 double_vlan : 1 ;
};
#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct __anonstruct_rx_4244 {
   u8 vtag_type ;
   u8 strip_vtag : 1 ;
   u8 capture_vtag : 1 ;
};
#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
union __anonunion_4242 {
   struct __anonstruct_tx_4243 tx ;
   struct __anonstruct_rx_4244 rx ;
};
#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_vtag_config {
   struct mbox_msghdr hdr ;
   u8 vtag_size ;
   u8 cfg_type ;
   union __anonunion_4242 __anonCompField_nix_vtag_config_168 ;
};
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_rss_flowkey_cfg {
   struct mbox_msghdr hdr ;
   int mcam_index ;
   u32 flowkey_cfg ;
   u8 group ;
};
#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_rss_flowkey_cfg_rsp {
   struct mbox_msghdr hdr ;
   u8 alg_idx ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_set_mac_addr {
   struct mbox_msghdr hdr ;
   u8 mac_addr[6U] ;
};
#line 621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_mark_format_cfg {
   struct mbox_msghdr hdr ;
   u8 offset ;
   u8 y_mask ;
   u8 y_val ;
   u8 r_mask ;
   u8 r_val ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_mark_format_cfg_rsp {
   struct mbox_msghdr hdr ;
   u8 mark_format_idx ;
};
#line 635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_rx_mode {
   struct mbox_msghdr hdr ;
   u16 mode ;
};
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_rx_cfg {
   struct mbox_msghdr hdr ;
   u8 len_verify ;
   u8 csum_verify ;
};
#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_frs_cfg {
   struct mbox_msghdr hdr ;
   u8 update_smq ;
   u8 update_minlen ;
   u8 sdp_link ;
   u16 maxlen ;
   u16 minlen ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_lso_format_cfg {
   struct mbox_msghdr hdr ;
   u64 field_mask ;
   u64 fields[8U] ;
};
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct nix_lso_format_cfg_rsp {
   struct mbox_msghdr hdr ;
   u8 lso_format_idx ;
};
#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_alloc_entry_req {
   struct mbox_msghdr hdr ;
   u8 contig ;
   u8 priority ;
   u16 ref_entry ;
   u16 count ;
};
#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_alloc_entry_rsp {
   struct mbox_msghdr hdr ;
   u16 entry ;
   u16 count ;
   u16 free_count ;
   u16 entry_list[256U] ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_free_entry_req {
   struct mbox_msghdr hdr ;
   u16 entry ;
   u8 all ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
struct mce {
   struct hlist_node node ;
   u16 pcifunc ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct mem_section;
#line 1187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct mem_section_usage {
   unsigned long subsection_map[1U] ;
   unsigned long pageblock_flags[0U] ;
};
#line 1194 
struct page_ext;
#line 1197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct mem_section {
   unsigned long section_mem_map ;
   struct mem_section_usage *usage ;
   struct page_ext *page_ext ;
   unsigned long pad ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ext.h"
struct page_ext {
   unsigned long flags ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct mbox_hdr {
   u64 msg_size ;
   u16 num_msgs ;
};
#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct ready_msg_rsp {
   struct mbox_msghdr hdr ;
   u16 sclk_feq ;
};
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct rsrc_attach {
   struct mbox_msghdr hdr ;
   u8 modify : 1 ;
   u8 npalf : 1 ;
   u8 nixlf : 1 ;
   u16 sso ;
   u16 ssow ;
   u16 timlfs ;
   u16 cptlfs ;
};
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct rsrc_detach {
   struct mbox_msghdr hdr ;
   u8 partial : 1 ;
   u8 npalf : 1 ;
   u8 nixlf : 1 ;
   u8 sso : 1 ;
   u8 ssow : 1 ;
   u8 timlfs : 1 ;
   u8 cptlfs : 1 ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct msix_offset_rsp {
   struct mbox_msghdr hdr ;
   u16 npa_msixoff ;
   u16 nix_msixoff ;
   u8 sso ;
   u8 ssow ;
   u8 timlfs ;
   u8 cptlfs ;
   u16 sso_msixoff[256U] ;
   u16 ssow_msixoff[256U] ;
   u16 timlf_msixoff[256U] ;
   u16 cptlf_msixoff[256U] ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct get_hw_cap_rsp {
   struct mbox_msghdr hdr ;
   u8 nix_fixed_txschq_mapping ;
   u8 nix_shaping ;
};
#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_write_entry_req {
   struct mbox_msghdr hdr ;
   struct mcam_entry entry_data ;
   u16 entry ;
   u16 cntr ;
   u8 intf ;
   u8 enable_entry ;
   u8 set_cntr ;
};
#line 735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_ena_dis_entry_req {
   struct mbox_msghdr hdr ;
   u16 entry ;
};
#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_shift_entry_req {
   struct mbox_msghdr hdr ;
   u16 curr_entry[64U] ;
   u16 new_entry[64U] ;
   u16 shift_count ;
};
#line 748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_shift_entry_rsp {
   struct mbox_msghdr hdr ;
   u16 failed_entry_idx ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_alloc_counter_req {
   struct mbox_msghdr hdr ;
   u8 contig ;
   u16 count ;
};
#line 760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_alloc_counter_rsp {
   struct mbox_msghdr hdr ;
   u16 cntr ;
   u16 count ;
   u16 cntr_list[64U] ;
};
#line 769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_oper_counter_req {
   struct mbox_msghdr hdr ;
   u16 cntr ;
};
#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_oper_counter_rsp {
   struct mbox_msghdr hdr ;
   u64 stat ;
};
#line 779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_unmap_counter_req {
   struct mbox_msghdr hdr ;
   u16 cntr ;
   u16 entry ;
   u8 all ;
};
#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_alloc_and_write_entry_req {
   struct mbox_msghdr hdr ;
   struct mcam_entry entry_data ;
   u16 ref_entry ;
   u8 priority ;
   u8 intf ;
   u8 enable_entry ;
   u8 alloc_cntr ;
};
#line 796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_mcam_alloc_and_write_entry_rsp {
   struct mbox_msghdr hdr ;
   u16 entry ;
   u16 cntr ;
};
#line 802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
struct npc_get_kex_cfg_rsp {
   struct mbox_msghdr hdr ;
   u64 rx_keyx_cfg ;
   u64 tx_keyx_cfg ;
   u64 kex_ld_flags[2U] ;
   u64 intf_lid_lt_ld[2U][8U][16U][2U] ;
   u64 intf_ld_flags[2U][2U][16U] ;
   u8 mkex_pfl_name[128U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc.h"
struct npc_kpu_profile_cam {
   u8 state ;
   u8 state_mask ;
   u16 dp0 ;
   u16 dp0_mask ;
   u16 dp1 ;
   u16 dp1_mask ;
   u16 dp2 ;
   u16 dp2_mask ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc.h"
struct npc_kpu_profile_action {
   u8 errlev ;
   u8 errcode ;
   u8 dp0_offset ;
   u8 dp1_offset ;
   u8 dp2_offset ;
   u8 bypass_count ;
   u8 parse_done ;
   u8 next_state ;
   u8 ptr_advance ;
   u8 cap_ena ;
   u8 lid ;
   u8 ltype ;
   u8 flags ;
   u8 offset ;
   u8 mask ;
   u8 right ;
   u8 shift ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc.h"
struct npc_kpu_profile {
   int cam_entries ;
   int action_entries ;
   struct npc_kpu_profile_cam *cam ;
   struct npc_kpu_profile_action *action ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc.h"
struct npc_kpu_cam {
   u64 dp0_data : 16 ;
   u64 dp1_data : 16 ;
   u64 dp2_data : 16 ;
   u64 state : 8 ;
   u64 rsvd_63_56 : 8 ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc.h"
struct npc_kpu_action0 {
   u64 var_len_shift : 3 ;
   u64 var_len_right : 1 ;
   u64 var_len_mask : 8 ;
   u64 var_len_offset : 8 ;
   u64 ptr_advance : 8 ;
   u64 capture_flags : 8 ;
   u64 capture_ltype : 4 ;
   u64 capture_lid : 3 ;
   u64 rsvd_43 : 1 ;
   u64 next_state : 8 ;
   u64 parse_done : 1 ;
   u64 capture_ena : 1 ;
   u64 byp_count : 3 ;
   u64 rsvd_63_57 : 7 ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc.h"
struct npc_kpu_action1 {
   u64 dp0_offset : 8 ;
   u64 dp1_offset : 8 ;
   u64 dp2_offset : 8 ;
   u64 errcode : 8 ;
   u64 errlev : 4 ;
   u64 rsvd_63_36 : 28 ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc.h"
struct nix_rx_action {
   u64 op : 4 ;
   u64 pf_func : 16 ;
   u64 index : 20 ;
   u64 match_id : 16 ;
   u64 flow_key_alg : 5 ;
   u64 rsvd_63_61 : 3 ;
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc.h"
struct npc_mcam_kex {
   u64 mkex_sign ;
   u8 name[128U] ;
   u64 cpu_model ;
   u64 kpu_version ;
   u64 reserved ;
   u64 keyx_cfg[2U] ;
   u64 kex_ld_flags[2U] ;
   u64 intf_lid_lt_ld[2U][8U][16U][2U] ;
   u64 intf_ld_flags[2U][2U][16U] ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7442 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_7442 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7443 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_7443 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7459 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_7459 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_7463 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_7463 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_7464 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_7465 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_7464 __anonCompField_media_link_90 ;
   union __anonunion_7465 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_7467 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_7466 {
   struct __anonstruct_dev_7467 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_7466 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_7481 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_7482 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_7480 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_7481 i2c ;
   struct __anonstruct_custom_7482 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_7480 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_8383 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_8383 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 17  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_cgx_driver_31 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.c"
bool rvu_check_valid_reg(int regmap, int regblk, u64 reg);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.c"
static struct hw_reg_map txsch_reg_map[5U] = {{.num_ranges = (unsigned char)2U, .mask = 65535ULL, .range = {{.start = 1792ULL, .end = 1800ULL}, {.start = 5120ULL, .end = 5320ULL}}}, {.regblk = (unsigned char)1U, .num_ranges = (unsigned char)3U, .mask = 65535ULL, .range = {{.start = 2816ULL, .end = 2824ULL}, {.start = 2832ULL, .end = 2840ULL}, {.start = 4608ULL, .end = 4832ULL}}}, {.regblk = (unsigned char)2U, .num_ranges = (unsigned char)3U, .mask = 65535ULL, .range = {{.start = 4096ULL, .end = 4320ULL}, {.start = 5632ULL, .end = 5640ULL}, {.start = 5648ULL, .end = 5656ULL}}}, {.regblk = (unsigned char)3U, .num_ranges = (unsigned char)2U, .mask = 65535ULL, .range = {{.start = 3584ULL, .end = 3808ULL}, {.start = 5888ULL, .end = 5992ULL}}}, {.regblk = (unsigned char)4U, .num_ranges = (unsigned char)1U, .mask = 65535ULL, .range = {{.start = 3072ULL, .end = 3480ULL}}}};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_reg.c"
bool rvu_check_valid_reg(int regmap, int regblk, u64 reg)
{
  #line 44 
  int idx;
  #line 45 
  struct hw_reg_map *map;
  #line 48 
  if ((reg & 7ULL) != 0ULL) 
                            #line 49 
                            return (_Bool)0;
  #line 51 
  if (regmap == 0) {
    #line 52 
    if (regblk > 4) 
                    #line 53 
                    return (_Bool)0;
    #line 54 
    map = & txsch_reg_map[regblk];
  }
  else 
       #line 56 
       return (_Bool)0;
  #line 60 
  if ((int)map->regblk != regblk) 
                                  #line 61 
                                  return (_Bool)0;
  #line 63 
  reg = map->mask & reg;
  #line 65 
  idx = 0;
  #line 65 
  while ((int)map->num_ranges > idx) {
    #line 66 
    if (map->range[idx].start <= reg && map->range[idx].end > reg) 
                                                                   #line 68 
                                                                   return (_Bool)1;
    #line 65 
    idx ++;
  }
  #line 70 
  return (_Bool)0;
}

/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 386 
int kstrtoint(char *, unsigned int, int *);
#line 469 
#line 469 
int sprintf(char *, char * , ...);
#line 476 
#line 476 
int scnprintf(char *, size_t, char * , ...);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 13 
void *memdup_user(void *, size_t);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 59 
char *strchr(char *, int);
#line 68 
#line 68 
char *strrchr(char *, int);
#line 88 
#line 287  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static size_t cif_strlen(char *s);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 95 
char *strsep(char **, char *);
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 211 
int bitmap_print_to_pagebuf(bool, char *, unsigned long *, int);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 357  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static bool IS_ERR(void *ptr);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
#line 827 
static void cif_mutex_lock_lock_of_npc_mcam(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 26 
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 27 
#line 27 
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static void cif_mutex_unlock_lock_of_npc_mcam(struct mutex *lock);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static u64 readq(void *addr)
{
  #line 95 
  u64 ret;
  #line 96 
  ldv_inline_asm();
  #line 95 
  return ret;
}

#line 3300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
#line 3300 
int simple_open(struct inode *, struct file *);
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 110 
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
#line 111 
#line 111 
loff_t seq_lseek(struct file *, loff_t, int);
#line 118 
#line 118 
void seq_printf(struct seq_file *, char * , ...);
#line 120 
#line 120 
void seq_puts(struct seq_file *, char *);
#line 142 
#line 142 
int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
#line 144 
#line 144 
int single_release(struct inode *, struct file *);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 811  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 85 
void debugfs_remove_recursive(struct dentry *);
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 589  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 624  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 1048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1048 
struct pci_dev *pci_get_device(unsigned int, unsigned int, struct pci_dev *);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
__inline static u64 rvu_read64(struct rvu *rvu, u64 block, u64 offset)
{
  #line 328 
  return readq(rvu->afreg_base + ((block << 28) | offset));
}

#line 369 
#line 369 
int rvu_rsrc_free_count(struct rsrc_bmap *rsrc);
#line 372 
#line 372 
int rvu_get_pf(u16 pcifunc);
#line 373 
#line 373 
struct rvu_pfvf *rvu_get_pfvf(struct rvu *rvu, int pcifunc);
#line 379 
#line 379 
int rvu_get_blkaddr(struct rvu *rvu, int blktype, u16 pcifunc);
#line 409 
#line 409 
int rvu_mbox_handler_nix_aq_enq(struct rvu *rvu, struct nix_aq_enq_req *req, struct nix_aq_enq_rsp *rsp);
#line 414 
#line 414 
void *rvu_cgx_pdata(u8 cgx_id, struct rvu *rvu);
#line 418 
#line 418 
int rvu_cgx_nix_cuml_stats(struct rvu *rvu, void *cgxd, int lmac_id, int index, int rxtxflag, u64 *stat);
#line 424 
#line 424 
int rvu_npa_aq_enq_inst(struct rvu *rvu, struct npa_aq_enq_req *req, struct npa_aq_enq_rsp *rsp);
#line 457 
#line 457 
void rvu_npc_get_mcam_entry_alloc_info(struct rvu *rvu, u16 pcifunc, int blkaddr, int *alloc_cnt, int *enable_cnt);
#line 460 
#line 460 
void rvu_npc_get_mcam_counter_alloc_info(struct rvu *rvu, u16 pcifunc, int blkaddr, int *alloc_cnt, int *enable_cnt);
#line 465 
#line 1679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
void rvu_dbg_init(struct rvu *rvu);
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 1706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
void rvu_dbg_exit(struct rvu *rvu);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.h"
#line 108 
int cgx_get_cgxcnt_max(void);
#line 110 
#line 110 
int cgx_get_lmac_cnt(void *cgxd);
#line 115 
#line 115 
int cgx_get_tx_stats(void *cgxd, int lmac_id, int idx, u64 *tx_stat);
#line 116 
#line 116 
int cgx_get_rx_stats(void *cgxd, int lmac_id, int idx, u64 *rx_stat);
#line 124 
#line 124 
int cgx_get_link_info(void *cgxd, int lmac_id, struct cgx_link_user_info *linfo);
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static char *cgx_rx_stats_fields[13U] = {(char *)"Received packets", (char *)"Octets of received packets", (char *)"Received PAUSE packets", (char *)"Received PAUSE and control packets", (char *)"Filtered DMAC0 (NIX-bound) packets", (char *)"Filtered DMAC0 (NIX-bound) octets", (char *)"Packets dropped due to RX FIFO full", (char *)"Octets dropped due to RX FIFO full", (char *)"Error packets", (char *)"Filtered DMAC1 (NCSI-bound) packets", (char *)"Filtered DMAC1 (NCSI-bound) octets", (char *)"NCSI-bound packets dropped", (char *)"NCSI-bound octets dropped"};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static char *cgx_tx_stats_fields[18U] = {(char *)"Packets dropped due to excessive collisions", (char *)"Packets dropped due to excessive deferral", (char *)"Multiple collisions before successful transmission", (char *)"Single collisions before successful transmission", (char *)"Total octets sent on the interface", (char *)"Total frames sent on the interface", (char *)"Packets sent with an octet count < 64", (char *)"Packets sent with an octet count == 64", (char *)"Packets sent with an octet count of 65\342\200\223127", (char *)"Packets sent with an octet count of 128-255", (char *)"Packets sent with an octet count of 256-511", (char *)"Packets sent with an octet count of 512-1023", (char *)"Packets sent with an octet count of 1024-1518", (char *)"Packets sent with an octet count of > 1518", (char *)"Packets sent to a broadcast DMAC", (char *)"Packets sent to the multicast DMAC", (char *)"Transmit underflow and were truncated", (char *)"Control/PAUSE packets sent"};
#line 140 
#line 1226 
static void print_nix_qsize(struct seq_file *filp, struct rvu_pfvf *pfvf);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static ssize_t rvu_dbg_rsrc_attach_status(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 147 
  int index;
  #line 147 
  int off_prev;
  #line 149 
  int lf;
  #line 149 
  int pf;
  #line 149 
  int vf;
  #line 149 
  int pcifunc;
  #line 150 
  struct rvu_block block;
  #line 151 
  int bytes_not_copied;
  #line 153 
  char *buf;
  #line 147 
  int off = 0;
  #line 147 
  int flag = 0;
  #line 147 
  int go_back = 0;
  #line 148 
  struct rvu *rvu = (struct rvu *)filp->private_data;
  #line 152 
  int buf_size = 2048;
  #line 156 
  if (*ppos != 0LL) 
                    #line 157 
                    return 0L;
  #line 159 
  buf = (char *)kzalloc((unsigned long)buf_size,3264U);
  #line 160 
  if (buf == (char *)0) 
                        #line 161 
                        return -28L;
  #line 162 
  off = scnprintf(buf + (unsigned long)off,
                  (unsigned long)((buf_size + -1) - off),
                  (char *)"\npcifunc\t\t") + off;
  #line 163 
  index = 0;
  #line 163 
  while (index <= 14) {
    #line 164 
    if (cif_strlen((char *)(& (rvu->hw)->block[index].name)) != 0UL) {
      #line 167 
      off = scnprintf(buf + (unsigned long)off,
                  (unsigned long)((buf_size + -1) - off),(char *)"%*s\t",
                  (index + -1) * 2,
                  (unsigned char *)(& (rvu->hw)->block[index].name)) + off;
    }
    #line 163 
    index ++;
  }
  #line 168 
  off = scnprintf(buf + (unsigned long)off,
                  (unsigned long)((buf_size + -1) - off),(char *)"\n") + off;
  #line 169 
  pf = 0;
  #line 169 
  while ((int)(rvu->hw)->total_pfs > pf) {
    #line 170 
    vf = 0;
    #line 170 
    while ((int)(rvu->hw)->total_vfs >= vf) {
      {
        #line 171 
        pcifunc = (pf << 10) | vf;
        #line 172 
        if (pcifunc == 0) 
                          #line 173 
                          goto __Cont;
        #line 175 
        if (vf != 0) 
                     #line 176 
                     go_back = scnprintf(buf + (unsigned long)off,(unsigned long)((buf_size + -1) - off),(char *)"PF%d:VF%d\t\t",pf,vf + -1); else 
                                                                    #line 181 
                                                                    go_back = scnprintf(buf + (unsigned long)off,(unsigned long)((buf_size + -1) - off),(char *)"PF%d\t\t",pf);
        #line 186 
        off += go_back;
        #line 187 
        index = 0;
        #line 187 
        while (index <= 9) {
          {
            #line 188 
            block = (rvu->hw)->block[index];
            #line 189 
            if (cif_strlen((char *)(& block.name)) == 0UL) 
                                                           #line 190 
                                                           goto __Cont_0;
            #line 191 
            off_prev = off;
            #line 192 
            lf = 0;
            #line 192 
            while ((int)block.lf.max > lf) {
              {
                #line 193 
                if ((int)*(block.fn_map + (unsigned long)lf) != pcifunc) 
                  #line 194 
                  goto __Cont_1;
                #line 195 
                flag = 1;
                #line 197 
                off = scnprintf(buf + (unsigned long)off,
                  (unsigned long)((buf_size + -1) - off),(char *)"%3d,",lf) + off;
              }
              #line 192 
              __Cont_1: 
                        #line 192 
              lf ++;
            }
            #line 199 
            if (flag != 0 && off_prev != off) 
                                              #line 200 
                                              off --; else 
                                                           #line 202 
                                                           go_back ++;
            #line 204 
            off = scnprintf(buf + (unsigned long)off,
                  (unsigned long)((buf_size + -1) - off),(char *)"\t") + off;
          }
          #line 187 
          __Cont_0: 
                    #line 187 
          index ++;
        }
        #line 206 
        if (flag == 0) 
                       #line 207 
                       off -= go_back; else 
                                            #line 209 
                                            flag = 0;
        #line 210 
        off --;
        #line 211 
        off = scnprintf(buf + (unsigned long)off,
                  (unsigned long)((buf_size + -1) - off),(char *)"\n") + off;
      }
      #line 170 
      __Cont: 
              #line 170 
      vf ++;
    }
    #line 169 
    pf ++;
  }
  #line 215 
  bytes_not_copied = (int)copy_to_user((void *)buffer,(void *)buf,(unsigned long)off);
  #line 216 
  kfree((void *)buf);
  #line 218 
  if (bytes_not_copied != 0) 
                             #line 219 
                             return -14L;
  #line 221 
  *ppos = (long long)off;
  #line 222 
  return (long)off;
}

#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_rsrc_status_fops = {.owner = & __this_module, .read = & rvu_dbg_rsrc_attach_status, .open = & simple_open};
#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static bool rvu_dbg_is_valid_lf(struct rvu *rvu, int blktype, int lf, u16 *pcifunc)
{
  #line 230 
  struct rvu_block *block;
  #line 231 
  struct rvu_hwinfo *hw;
  #line 232 
  int blkaddr;
  #line 234 
  blkaddr = rvu_get_blkaddr(rvu,blktype,(unsigned short)0);
  #line 235 
  if (blkaddr < 0) {
    #line 236 
    _dev_warn(rvu->dev,(char *)"Invalid blktype\n");
    #line 237 
    return (_Bool)0;
  }
  #line 240 
  hw = rvu->hw;
  #line 241 
  block = & hw->block[blkaddr];
  #line 243 
  if (lf < 0 || (int)block->lf.max <= lf) {
    #line 244 
    _dev_warn(rvu->dev,(char *)"Invalid LF: valid range: 0-%d\n",(int)block->lf.max + -1);
    #line 246 
    return (_Bool)0;
  }
  #line 249 
  *pcifunc = *(block->fn_map + (unsigned long)lf);
  #line 250 
  if ((unsigned int)*pcifunc == 0U) {
    #line 251 
    _dev_warn(rvu->dev,(char *)"This LF is not attached to any RVU PFFUNC\n");
    #line 253 
    return (_Bool)0;
  }
  #line 255 
  return (_Bool)1;
}

#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void print_npa_qsize(struct seq_file *m, struct rvu_pfvf *pfvf)
{
  #line 260 
  char *buf;
  #line 262 
  buf = (char *)kmalloc(4096UL,3264U);
  #line 263 
  if (buf == (char *)0) 
                        #line 264 
                        return;
  #line 266 
  if (pfvf->aura_ctx == (struct qmem *)0) 
                                          #line 267 
                                          seq_puts(m,(char *)"Aura context is not initialized\n");
  else {
    #line 269 
    bitmap_print_to_pagebuf((_Bool)0,buf,pfvf->aura_bmap,(int)(pfvf->aura_ctx)->qsize);
    #line 271 
    seq_printf(m,(char *)"Aura count : %d\n",(pfvf->aura_ctx)->qsize);
    #line 272 
    seq_printf(m,(char *)"Aura context ena/dis bitmap : %s\n",buf);
  }
  #line 275 
  if (pfvf->pool_ctx == (struct qmem *)0) 
                                          #line 276 
                                          seq_puts(m,(char *)"Pool context is not initialized\n");
  else {
    #line 278 
    bitmap_print_to_pagebuf((_Bool)0,buf,pfvf->pool_bmap,(int)(pfvf->pool_ctx)->qsize);
    #line 280 
    seq_printf(m,(char *)"Pool count : %d\n",(pfvf->pool_ctx)->qsize);
    #line 281 
    seq_printf(m,(char *)"Pool context ena/dis bitmap : %s\n",buf);
  }
  #line 283 
  kfree((void *)buf);
  #line 284 
  return;
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_qsize_display(struct seq_file *filp, void *unsused, int blktype)
{
  #line 294 
  struct rvu_pfvf *pfvf;
  #line 295 
  struct rvu *rvu;
  #line 296 
  int qsize_id;
  #line 297 
  u16 pcifunc;
  #line 292 
  void (*print_qsize)(struct seq_file *, struct rvu_pfvf *) = (void (*)(struct seq_file *, struct rvu_pfvf *))0;
  #line 299 
  rvu = (struct rvu *)filp->private;
  #line 300 
  switch (blktype) {
    #line 301 
    case 4: 
            #line 301 
    ;
    #line 302 
    qsize_id = rvu->rvu_dbg.npa_qsize_id;
    #line 303 
    print_qsize = & print_npa_qsize;
    #line 304 
    break;
    #line 306 
    case 3: 
            #line 306 
    ;
    #line 307 
    qsize_id = rvu->rvu_dbg.nix_qsize_id;
    #line 308 
    print_qsize = & print_nix_qsize;
    #line 309 
    break;
    #line 311 
    default: 
             #line 311 
    ;
    #line 312 
    return -22;
  }
  #line 315 
  if (! rvu_dbg_is_valid_lf(rvu,blktype,qsize_id,& pcifunc)) 
                                                             #line 316 
                                                             return -22;
  #line 318 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 319 
  (*print_qsize)(filp,pfvf);
  #line 321 
  return 0;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static ssize_t rvu_dbg_qsize_write(struct file *filp, char *buffer, size_t count, loff_t *ppos, int blktype)
{
  #line 328 
  char *tmp;
  #line 330 
  char *cmd_buf;
  #line 330 
  char *cmd_buf_tmp;
  #line 330 
  char *subtoken;
  #line 332 
  u16 pcifunc;
  #line 333 
  int ret;
  #line 333 
  int lf;
  #line 369 
  long tmp_5;
  #line 328 
  if (blktype == 4) 
                    #line 328 
                    tmp = (char *)"npa"; else 
                                              #line 328 
                                              tmp = (char *)"nix";
  #line 328 
  char *blk_string = tmp;
  #line 329 
  struct seq_file *seqfile = (struct seq_file *)filp->private_data;
  #line 331 
  struct rvu *rvu = (struct rvu *)seqfile->private;
  #line 335 
  cmd_buf = (char *)memdup_user((void *)buffer,count);
  #line 336 
  if ((int)IS_ERR((void *)cmd_buf) != 0) 
                                         #line 337 
                                         return -12L;
  #line 339 
  *(cmd_buf + count) = (char)0;
  #line 341 
  cmd_buf_tmp = strchr(cmd_buf,10);
  #line 342 
  if (cmd_buf_tmp != (char *)0) {
    #line 343 
    *cmd_buf_tmp = (char)0;
    #line 344 
    count = (unsigned long)((cmd_buf_tmp - cmd_buf) + 1L);
  }
  #line 347 
  cmd_buf_tmp = cmd_buf;
  #line 348 
  subtoken = strsep(& cmd_buf,(char *)" ");
  #line 349 
  if (subtoken != (char *)0) 
                             #line 349 
                             ret = kstrtoint(subtoken,10U,& lf); else 
                                                                   #line 349 
                                                                   ret = -22;
  #line 350 
  if (cmd_buf != (char *)0) 
                            #line 351 
                            ret = -22;
  #line 353 
  if (cif_strncmp(subtoken,(char *)"help",4UL) == 0) 
                                                     #line 353 
                                                     goto _LOR;
  else 
    #line 353 
    if (ret < 0) {
      #line 353 
      _LOR: {
              #line 354 
              _dev_info(rvu->dev,(char *)"Use echo <%s-lf > qsize\n",blk_string);
              #line 355 
              goto qsize_write_done;
            }
    }
  #line 358 
  if (! rvu_dbg_is_valid_lf(rvu,blktype,lf,& pcifunc)) {
    #line 359 
    ret = -22;
    #line 360 
    goto qsize_write_done;
  }
  #line 362 
  if (blktype == 4) 
                    #line 363 
                    rvu->rvu_dbg.npa_qsize_id = lf; else 
                                                         #line 365 
                                                         rvu->rvu_dbg.nix_qsize_id = lf;
  #line 367 
  qsize_write_done: 
                    #line 367 
  ;
  #line 368 
  kfree((void *)cmd_buf_tmp);
  #line 369 
  if (ret != 0) 
                #line 369 
                tmp_5 = (long)ret; else 
                                        #line 369 
                                        tmp_5 = (long)count;
  #line 369 
  return tmp_5;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static ssize_t rvu_dbg_npa_qsize_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 376 
  return rvu_dbg_qsize_write(filp,buffer,count,ppos,4);
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_npa_qsize_display(struct seq_file *filp, void *unused)
{
  #line 382 
  return rvu_dbg_qsize_display(filp,unused,4);
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_npa_qsize(struct inode *inode, struct file *file)
{
  #line 385 
  return single_open(file,& rvu_dbg_npa_qsize_display,inode->i_private);
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_npa_qsize_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = & rvu_dbg_npa_qsize_write, .open = & rvu_dbg_open_npa_qsize, .release = & single_release};
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void print_npa_aura_ctx(struct seq_file *m, struct npa_aq_enq_rsp *rsp)
{
  #line 390 
  struct npa_aura_s *aura = & rsp->__anonCompField_npa_aq_enq_rsp_164.aura;
  #line 392 
  seq_printf(m,(char *)"W0: Pool addr\t\t%llx\n",aura->pool_addr);
  #line 394 
  seq_printf(m,(char *)"W1: ena\t\t\t%d\nW1: pool caching\t%d\n",(int)aura->ena,(int)aura->pool_caching);
  #line 396 
  seq_printf(m,(char *)"W1: pool way mask\t%d\nW1: avg con\t\t%d\n",(int)aura->pool_way_mask,(int)aura->avg_con);
  #line 398 
  seq_printf(m,(char *)"W1: pool drop ena\t%d\nW1: aura drop ena\t%d\n",(int)aura->pool_drop_ena,(int)aura->aura_drop_ena);
  #line 400 
  seq_printf(m,(char *)"W1: bp_ena\t\t%d\nW1: aura drop\t\t%d\n",(int)aura->bp_ena,(int)aura->aura_drop);
  #line 402 
  seq_printf(m,(char *)"W1: aura shift\t\t%d\nW1: avg_level\t\t%d\n",(int)aura->shift,(int)aura->avg_level);
  #line 405 
  seq_printf(m,(char *)"W2: count\t\t%llu\nW2: nix0_bpid\t\t%d\nW2: nix1_bpid\t\t%d\n",(unsigned long long)aura->count,(int)aura->nix0_bpid,(int)aura->nix1_bpid);
  #line 408 
  seq_printf(m,(char *)"W3: limit\t\t%llu\nW3: bp\t\t\t%d\nW3: fc_ena\t\t%d\n",(unsigned long long)aura->limit,(int)aura->bp,(int)aura->fc_ena);
  #line 410 
  seq_printf(m,(char *)"W3: fc_up_crossing\t%d\nW3: fc_stype\t\t%d\n",(int)aura->fc_up_crossing,(int)aura->fc_stype);
  #line 412 
  seq_printf(m,(char *)"W3: fc_hyst_bits\t%d\n",(int)aura->fc_hyst_bits);
  #line 414 
  seq_printf(m,(char *)"W4: fc_addr\t\t%llx\n",aura->fc_addr);
  #line 416 
  seq_printf(m,(char *)"W5: pool_drop\t\t%d\nW5: update_time\t\t%d\n",(int)aura->pool_drop,(int)aura->update_time);
  #line 418 
  seq_printf(m,(char *)"W5: err_int \t\t%d\nW5: err_int_ena\t\t%d\n",(int)aura->err_int,(int)aura->err_int_ena);
  #line 420 
  seq_printf(m,(char *)"W5: thresh_int\t\t%d\nW5: thresh_int_ena \t%d\n",(int)aura->thresh_int,(int)aura->thresh_int_ena);
  #line 422 
  seq_printf(m,(char *)"W5: thresh_up\t\t%d\nW5: thresh_qint_idx\t%d\n",(int)aura->thresh_up,(int)aura->thresh_qint_idx);
  #line 424 
  seq_printf(m,(char *)"W5: err_qint_idx \t%d\n",(int)aura->err_qint_idx);
  #line 426 
  seq_printf(m,(char *)"W6: thresh\t\t%llu\n",(unsigned long long)aura->thresh);
  #line 427 
  return;
}

#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void print_npa_pool_ctx(struct seq_file *m, struct npa_aq_enq_rsp *rsp)
{
  #line 432 
  struct npa_pool_s *pool = & rsp->__anonCompField_npa_aq_enq_rsp_164.pool;
  #line 434 
  seq_printf(m,(char *)"W0: Stack base\t\t%llx\n",pool->stack_base);
  #line 436 
  seq_printf(m,(char *)"W1: ena \t\t%d\nW1: nat_align \t\t%d\n",(int)pool->ena,(int)pool->nat_align);
  #line 438 
  seq_printf(m,(char *)"W1: stack_caching\t%d\nW1: stack_way_mask\t%d\n",(int)pool->stack_caching,(int)pool->stack_way_mask);
  #line 440 
  seq_printf(m,(char *)"W1: buf_offset\t\t%d\nW1: buf_size\t\t%d\n",(int)pool->buf_offset,(int)pool->buf_size);
  #line 443 
  seq_printf(m,(char *)"W2: stack_max_pages \t%d\nW2: stack_pages\t\t%d\n",(unsigned long long)pool->stack_max_pages,(unsigned long long)pool->stack_pages);
  #line 446 
  seq_printf(m,(char *)"W3: op_pc \t\t%llu\n",(unsigned long long)pool->op_pc);
  #line 448 
  seq_printf(m,(char *)"W4: stack_offset\t%d\nW4: shift\t\t%d\nW4: avg_level\t\t%d\n",(int)pool->stack_offset,(int)pool->shift,(int)pool->avg_level);
  #line 450 
  seq_printf(m,(char *)"W4: avg_con \t\t%d\nW4: fc_ena\t\t%d\nW4: fc_stype\t\t%d\n",(int)pool->avg_con,(int)pool->fc_ena,(int)pool->fc_stype);
  #line 452 
  seq_printf(m,(char *)"W4: fc_hyst_bits\t%d\nW4: fc_up_crossing\t%d\n",(int)pool->fc_hyst_bits,(int)pool->fc_up_crossing);
  #line 454 
  seq_printf(m,(char *)"W4: update_time\t\t%d\n",(int)pool->update_time);
  #line 456 
  seq_printf(m,(char *)"W5: fc_addr\t\t%llx\n",pool->fc_addr);
  #line 458 
  seq_printf(m,(char *)"W6: ptr_start\t\t%llx\n",pool->ptr_start);
  #line 460 
  seq_printf(m,(char *)"W7: ptr_end\t\t%llx\n",pool->ptr_end);
  #line 462 
  seq_printf(m,(char *)"W8: err_int\t\t%d\nW8: err_int_ena\t\t%d\n",(int)pool->err_int,(int)pool->err_int_ena);
  #line 464 
  seq_printf(m,(char *)"W8: thresh_int\t\t%d\n",(int)pool->thresh_int);
  #line 465 
  seq_printf(m,(char *)"W8: thresh_int_ena\t%d\nW8: thresh_up\t\t%d\n",(int)pool->thresh_int_ena,(int)pool->thresh_up);
  #line 467 
  seq_printf(m,(char *)"W8: thresh_qint_idx\t%d\nW8: err_qint_idx\t\t%d\n",(int)pool->thresh_qint_idx,(int)pool->err_qint_idx);
  #line 469 
  return;
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_npa_ctx_display(struct seq_file *m, void *unused, int ctype)
{
  #line 474 
  void (*print_npa_ctx)(struct seq_file *, struct npa_aq_enq_rsp *);
  #line 475 
  struct npa_aq_enq_req aq_req;
  #line 476 
  struct npa_aq_enq_rsp rsp;
  #line 477 
  struct rvu_pfvf *pfvf;
  #line 478 
  int aura;
  #line 478 
  int rc;
  #line 478 
  int max_id;
  #line 479 
  int npalf;
  #line 479 
  int id;
  #line 479 
  int all;
  #line 480 
  struct rvu *rvu;
  #line 481 
  u16 pcifunc;
  #line 483 
  rvu = (struct rvu *)m->private;
  #line 485 
  switch (ctype) {
    #line 486 
    case 0: 
            #line 486 
    ;
    #line 487 
    npalf = rvu->rvu_dbg.npa_aura_ctx.lf;
    #line 488 
    id = rvu->rvu_dbg.npa_aura_ctx.id;
    #line 489 
    all = (int)rvu->rvu_dbg.npa_aura_ctx.all;
    #line 490 
    break;
    #line 492 
    case 1: 
            #line 492 
    ;
    #line 493 
    npalf = rvu->rvu_dbg.npa_pool_ctx.lf;
    #line 494 
    id = rvu->rvu_dbg.npa_pool_ctx.id;
    #line 495 
    all = (int)rvu->rvu_dbg.npa_pool_ctx.all;
    #line 496 
    break;
    #line 497 
    default: 
             #line 497 
    ;
    #line 498 
    return -22;
  }
  #line 501 
  if (! rvu_dbg_is_valid_lf(rvu,4,npalf,& pcifunc)) 
                                                    #line 502 
                                                    return -22;
  #line 504 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 505 
  if (ctype == 0 && pfvf->aura_ctx == (struct qmem *)0) {
    #line 506 
    seq_puts(m,(char *)"Aura context is not initialized\n");
    #line 507 
    return -22;
  }
  else 
    #line 508 
    if (ctype == 1 && pfvf->pool_ctx == (struct qmem *)0) {
      #line 509 
      seq_puts(m,(char *)"Pool context is not initialized\n");
      #line 510 
      return -22;
    }
  #line 513 
  memset((void *)(& aq_req),0,280UL);
  #line 514 
  aq_req.hdr.pcifunc = pcifunc;
  #line 515 
  aq_req.ctype = (unsigned char)ctype;
  #line 516 
  aq_req.op = (unsigned char)3U;
  #line 517 
  if (ctype == 0) {
    #line 518 
    max_id = (int)(pfvf->aura_ctx)->qsize;
    #line 519 
    print_npa_ctx = & print_npa_aura_ctx;
  }
  else {
    #line 521 
    max_id = (int)(pfvf->pool_ctx)->qsize;
    #line 522 
    print_npa_ctx = & print_npa_pool_ctx;
  }
  #line 525 
  if (id < 0 || id >= max_id) {
    #line 526 
    char *tmp_0;
    #line 526 
    ;
    #line 526 
    if (ctype == 0) 
                    #line 526 
                    tmp_0 = (char *)"aura"; else 
                                                 #line 526 
                                                 tmp_0 = (char *)"pool";
    #line 526 
    ;
    #line 526 
    seq_printf(m,(char *)"Invalid %s, valid range is 0-%d\n",tmp_0,max_id + -1);
    #line 529 
    return -22;
  }
  #line 532 
  if (all != 0) 
                #line 533 
                id = 0; else 
                             #line 535 
                             max_id = id + 1;
  #line 537 
  aura = id;
  #line 537 
  while (aura < max_id) {
    {
      #line 539 
      char *tmp_1;
      #line 538 
      aq_req.aura_id = (unsigned int)aura;
      #line 539 
      ;
      #line 539 
      if (ctype == 0) 
                      #line 539 
                      tmp_1 = (char *)"AURA"; else 
                                                   #line 539 
                                                   tmp_1 = (char *)"POOL";
      #line 539 
      ;
      #line 539 
      seq_printf(m,(char *)"======%s : %d=======\n",tmp_1,aq_req.aura_id);
      #line 542 
      rc = rvu_npa_aq_enq_inst(rvu,& aq_req,& rsp);
      #line 543 
      if (rc != 0) {
        #line 544 
        seq_puts(m,(char *)"Failed to read context\n");
        #line 545 
        return -22;
      }
      #line 547 
      (*print_npa_ctx)(m,& rsp);
    }
    #line 537 
    aura ++;
  }
  #line 549 
  return 0;
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int write_npa_ctx(struct rvu *rvu, bool all, int npalf, int id, int ctype)
{
  #line 555 
  struct rvu_pfvf *pfvf;
  #line 557 
  u16 pcifunc;
  #line 556 
  int max_id = 0;
  #line 559 
  if (! rvu_dbg_is_valid_lf(rvu,4,npalf,& pcifunc)) 
                                                    #line 560 
                                                    return -22;
  #line 562 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 564 
  if (ctype == 0) {
    #line 565 
    if (pfvf->aura_ctx == (struct qmem *)0) {
      #line 566 
      _dev_warn(rvu->dev,(char *)"Aura context is not initialized\n");
      #line 567 
      return -22;
    }
    #line 569 
    max_id = (int)(pfvf->aura_ctx)->qsize;
  }
  else 
    #line 570 
    if (ctype == 1) {
      #line 571 
      if (pfvf->pool_ctx == (struct qmem *)0) {
        #line 572 
        _dev_warn(rvu->dev,(char *)"Pool context is not initialized\n");
        #line 573 
        return -22;
      }
      #line 575 
      max_id = (int)(pfvf->pool_ctx)->qsize;
    }
  #line 578 
  if (id < 0 || id >= max_id) {
    #line 579 
    char *tmp_0;
    #line 579 
    ;
    #line 579 
    if (ctype == 0) 
                    #line 579 
                    tmp_0 = (char *)"aura"; else 
                                                 #line 579 
                                                 tmp_0 = (char *)"pool";
    #line 579 
    ;
    #line 579 
    _dev_warn(rvu->dev,(char *)"Invalid %s, valid range is 0-%d\n",tmp_0,max_id + -1);
    #line 582 
    return -22;
  }
  #line 585 
  switch (ctype) {
    #line 586 
    case 0: 
            #line 586 
    ;
    #line 587 
    rvu->rvu_dbg.npa_aura_ctx.lf = npalf;
    #line 588 
    rvu->rvu_dbg.npa_aura_ctx.id = id;
    #line 589 
    rvu->rvu_dbg.npa_aura_ctx.all = all;
    #line 590 
    break;
    #line 592 
    case 1: 
            #line 592 
    ;
    #line 593 
    rvu->rvu_dbg.npa_pool_ctx.lf = npalf;
    #line 594 
    rvu->rvu_dbg.npa_pool_ctx.id = id;
    #line 595 
    rvu->rvu_dbg.npa_pool_ctx.all = all;
    #line 596 
    break;
    #line 597 
    default: 
             #line 597 
    ;
    #line 598 
    return -22;
  }
  #line 600 
  return 0;
}

#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int parse_cmd_buffer_ctx(char *cmd_buf, size_t *count, char *buffer, int *npalf, int *id, bool *all)
{
  #line 607 
  int bytes_not_copied;
  #line 608 
  char *cmd_buf_tmp;
  #line 609 
  char *subtoken;
  #line 610 
  int ret;
  #line 612 
  bytes_not_copied = (int)copy_from_user((void *)cmd_buf,(void *)buffer,*count);
  #line 613 
  if (bytes_not_copied != 0) 
                             #line 614 
                             return -14;
  #line 616 
  *(cmd_buf + *count) = (char)0;
  #line 617 
  cmd_buf_tmp = strchr(cmd_buf,10);
  #line 619 
  if (cmd_buf_tmp != (char *)0) {
    #line 620 
    *cmd_buf_tmp = (char)0;
    #line 621 
    *count = (unsigned long)((cmd_buf_tmp - cmd_buf) + 1L);
  }
  #line 624 
  subtoken = strsep(& cmd_buf,(char *)" ");
  #line 625 
  if (subtoken != (char *)0) 
                             #line 625 
                             ret = kstrtoint(subtoken,10U,npalf); else 
                                                                    #line 625 
                                                                    ret = -22;
  #line 626 
  if (ret < 0) 
               #line 627 
               return ret;
  #line 628 
  subtoken = strsep(& cmd_buf,(char *)" ");
  #line 629 
  if (subtoken != (char *)0) {
    #line 629 
    if (cif_strcmp(subtoken,(char *)"all") == 0) 
                                                 #line 630 
                                                 *all = (_Bool)1; else 
                                                                    #line 629 
                                                                    goto _LAND;
  }
  else {
    #line 629 
    _LAND: {
             #line 632 
             if (subtoken != (char *)0) 
                                        #line 632 
                                        ret = kstrtoint(subtoken,10U,id); else 
                                                                    #line 632 
                                                                    ret = -22;
             #line 633 
             if (ret < 0) 
                          #line 634 
                          return ret;
           }
  }
  #line 636 
  if (cmd_buf != (char *)0) 
                            #line 637 
                            return -22;
  #line 638 
  return ret;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static ssize_t rvu_dbg_npa_ctx_write(struct file *filp, char *buffer, size_t count, loff_t *ppos, int ctype)
{
  #line 645 
  char *cmd_buf;
  #line 645 
  char *tmp;
  #line 649 
  int npalf;
  #line 649 
  int ret;
  #line 670 
  long tmp_1;
  #line 645 
  if (ctype == 0) 
                  #line 645 
                  tmp = (char *)"aura"; else 
                                             #line 645 
                                             tmp = (char *)"pool";
  #line 645 
  char *ctype_string = tmp;
  #line 647 
  struct seq_file *seqfp = (struct seq_file *)filp->private_data;
  #line 648 
  struct rvu *rvu = (struct rvu *)seqfp->private;
  #line 649 
  int id = 0;
  #line 650 
  bool all = (_Bool)0;
  #line 652 
  if (*ppos != 0LL || count == 0UL) 
                                    #line 653 
                                    return -22L;
  #line 655 
  cmd_buf = (char *)kzalloc(count + 1UL,3264U);
  #line 656 
  if (cmd_buf == (char *)0) 
                            #line 657 
                            return (long)count;
  #line 658 
  ret = parse_cmd_buffer_ctx(cmd_buf,& count,buffer,& npalf,& id,& all);
  #line 660 
  if (ret < 0) {
    #line 661 
    _dev_info(rvu->dev,(char *)"Usage: echo <npalf> [%s number/all] > %s_ctx\n",ctype_string,ctype_string);
    #line 664 
    goto done;
  }
  else 
       #line 666 
       ret = write_npa_ctx(rvu,(_Bool)((bool)((int)all) != 0),npalf,id,ctype);
  #line 668 
  done: 
        #line 668 
  ;
  #line 669 
  kfree((void *)cmd_buf);
  #line 670 
  if (ret != 0) 
                #line 670 
                tmp_1 = (long)ret; else 
                                        #line 670 
                                        tmp_1 = (long)count;
  #line 670 
  return tmp_1;
}

#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static ssize_t rvu_dbg_npa_aura_ctx_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 677 
  return rvu_dbg_npa_ctx_write(filp,buffer,count,ppos,0);
}

#line 681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_npa_aura_ctx_display(struct seq_file *filp, void *unused)
{
  #line 683 
  return rvu_dbg_npa_ctx_display(filp,unused,0);
}

#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_npa_aura_ctx(struct inode *inode, struct file *file)
{
  #line 686 
  return single_open(file,& rvu_dbg_npa_aura_ctx_display,inode->i_private);
}

#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_npa_aura_ctx_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = & rvu_dbg_npa_aura_ctx_write, .open = & rvu_dbg_open_npa_aura_ctx, .release = & single_release};
#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static ssize_t rvu_dbg_npa_pool_ctx_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 692 
  return rvu_dbg_npa_ctx_write(filp,buffer,count,ppos,1);
}

#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_npa_pool_ctx_display(struct seq_file *filp, void *unused)
{
  #line 698 
  return rvu_dbg_npa_ctx_display(filp,unused,1);
}

#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_npa_pool_ctx(struct inode *inode, struct file *file)
{
  #line 701 
  return single_open(file,& rvu_dbg_npa_pool_ctx_display,inode->i_private);
}

#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_npa_pool_ctx_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = & rvu_dbg_npa_pool_ctx_write, .open = & rvu_dbg_open_npa_pool_ctx, .release = & single_release};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void ndc_cache_stats(struct seq_file *s, int blk_addr, int ctype, int transaction)
{
  #line 706 
  u64 req;
  #line 706 
  u64 out_req;
  #line 706 
  u64 lat;
  #line 706 
  u64 cant_alloc;
  #line 708 
  int port;
  #line 707 
  struct rvu *rvu = (struct rvu *)s->private;
  #line 710 
  port = 0;
  #line 710 
  while (port <= 5) {
    #line 711 
    req = rvu_read64(rvu,(unsigned long long)blk_addr,(unsigned long long)((((port << 5) | 3072) | (ctype << 4)) | (transaction << 3)));
    #line 713 
    lat = rvu_read64(rvu,(unsigned long long)blk_addr,(unsigned long long)((((port << 5) | 3584) | (ctype << 4)) | (transaction << 3)));
    #line 715 
    out_req = rvu_read64(rvu,(unsigned long long)blk_addr,(unsigned long long)((((port << 5) | 3328) | (ctype << 4)) | (transaction << 3)));
    #line 718 
    cant_alloc = rvu_read64(rvu,(unsigned long long)blk_addr,(unsigned long long)(((port << 5) | 3840) | (transaction << 4)));
    #line 721 
    seq_printf(s,(char *)"\nPort:%d\n",port);
    #line 722 
    seq_printf(s,(char *)"\tTotal Requests:\t\t%lld\n",req);
    #line 723 
    seq_printf(s,(char *)"\tTotal Time Taken:\t%lld cycles\n",lat);
    #line 724 
    seq_printf(s,(char *)"\tAvg Latency:\t\t%lld cycles\n",lat / req);
    #line 725 
    seq_printf(s,(char *)"\tOutstanding Requests:\t%lld\n",out_req);
    #line 726 
    seq_printf(s,(char *)"\tCant Alloc Requests:\t%lld\n",cant_alloc);
    #line 710 
    port ++;
  }
  #line 728 
  return;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int ndc_blk_cache_stats(struct seq_file *s, int idx, int blk_addr)
{
  #line 732 
  seq_puts(s,(char *)"\n***** CACHE mode read stats *****\n");
  #line 733 
  ndc_cache_stats(s,blk_addr,0,0);
  #line 734 
  seq_puts(s,(char *)"\n***** CACHE mode write stats *****\n");
  #line 735 
  ndc_cache_stats(s,blk_addr,0,1);
  #line 736 
  seq_puts(s,(char *)"\n***** BY-PASS mode read stats *****\n");
  #line 737 
  ndc_cache_stats(s,blk_addr,1,0);
  #line 738 
  seq_puts(s,(char *)"\n***** BY-PASS mode write stats *****\n");
  #line 739 
  ndc_cache_stats(s,blk_addr,1,1);
  #line 740 
  return 0;
}

#line 743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_npa_ndc_cache_display(struct seq_file *filp, void *unused)
{
  #line 745 
  return ndc_blk_cache_stats(filp,2,14);
}

#line 748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_npa_ndc_cache(struct inode *inode, struct file *file)
{
  #line 748 
  return single_open(file,& rvu_dbg_npa_ndc_cache_display,inode->i_private);
}

#line 748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_npa_ndc_cache_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & rvu_dbg_open_npa_ndc_cache, .release = & single_release};
#line 750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int ndc_blk_hits_miss_stats(struct seq_file *s, int idx, int blk_addr)
{
  #line 753 
  int bank;
  #line 753 
  int max_bank;
  #line 752 
  struct rvu *rvu = (struct rvu *)s->private;
  #line 755 
  max_bank = (int)rvu_read64(rvu,(unsigned long long)blk_addr,0ULL) & 255;
  #line 756 
  bank = 0;
  #line 756 
  while (bank < max_bank) {
    {
      #line 757 
      seq_printf(s,(char *)"BANK:%d\n",bank);
      #line 758 
      ;
      #line 758 
      seq_printf(s,(char *)"\tHits:\t%lld\n",rvu_read64(rvu,(unsigned long long)blk_addr,
                   (unsigned long long)((bank << 3) | 4096)));
      #line 761 
      ;
      #line 761 
      seq_printf(s,(char *)"\tMiss:\t%lld\n",rvu_read64(rvu,(unsigned long long)blk_addr,
                   (unsigned long long)((bank << 3) | 4352)));
    }
    #line 756 
    bank ++;
  }
  #line 765 
  return 0;
}

#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_nix_ndc_rx_cache_display(struct seq_file *filp, void *unused)
{
  #line 770 
  return ndc_blk_cache_stats(filp,0,12);
}

#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_nix_ndc_rx_cache(struct inode *inode, struct file *file)
{
  #line 774 
  return single_open(file,& rvu_dbg_nix_ndc_rx_cache_display,inode->i_private);
}

#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_nix_ndc_rx_cache_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & rvu_dbg_open_nix_ndc_rx_cache, .release = & single_release};
#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_nix_ndc_tx_cache_display(struct seq_file *filp, void *unused)
{
  #line 778 
  return ndc_blk_cache_stats(filp,1,13);
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_nix_ndc_tx_cache(struct inode *inode, struct file *file)
{
  #line 782 
  return single_open(file,& rvu_dbg_nix_ndc_tx_cache_display,inode->i_private);
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_nix_ndc_tx_cache_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & rvu_dbg_open_nix_ndc_tx_cache, .release = & single_release};
#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_npa_ndc_hits_miss_display(struct seq_file *filp, void *unused)
{
  #line 787 
  return ndc_blk_hits_miss_stats(filp,2,14);
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_npa_ndc_hits_miss(struct inode *inode, struct file *file)
{
  #line 790 
  return single_open(file,& rvu_dbg_npa_ndc_hits_miss_display,inode->i_private);
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_npa_ndc_hits_miss_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & rvu_dbg_open_npa_ndc_hits_miss, .release = & single_release};
#line 792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_nix_ndc_rx_hits_miss_display(struct seq_file *filp, void *unused)
{
  #line 795 
  return ndc_blk_hits_miss_stats(filp,2,12);
}

#line 799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_nix_ndc_rx_hits_miss(struct inode *inode, struct file *file)
{
  #line 799 
  return single_open(file,& rvu_dbg_nix_ndc_rx_hits_miss_display,
                  inode->i_private);
}

#line 799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_nix_ndc_rx_hits_miss_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & rvu_dbg_open_nix_ndc_rx_hits_miss, .release = & single_release};
#line 801  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_nix_ndc_tx_hits_miss_display(struct seq_file *filp, void *unused)
{
  #line 804 
  return ndc_blk_hits_miss_stats(filp,2,13);
}

#line 808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_nix_ndc_tx_hits_miss(struct inode *inode, struct file *file)
{
  #line 808 
  return single_open(file,& rvu_dbg_nix_ndc_tx_hits_miss_display,
                  inode->i_private);
}

#line 808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_nix_ndc_tx_hits_miss_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & rvu_dbg_open_nix_ndc_tx_hits_miss, .release = & single_release};
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void print_nix_sq_ctx(struct seq_file *m, struct nix_aq_enq_rsp *rsp)
{
  #line 813 
  struct nix_sq_ctx_s *sq_ctx = & rsp->__anonCompField_nix_aq_enq_rsp_167.sq;
  #line 815 
  seq_printf(m,(char *)"W0: sqe_way_mask \t\t%d\nW0: cq \t\t\t\t%d\n",(int)sq_ctx->sqe_way_mask,(int)sq_ctx->cq);
  #line 817 
  seq_printf(m,(char *)"W0: sdp_mcast \t\t\t%d\nW0: substream \t\t\t0x%03x\n",(int)sq_ctx->sdp_mcast,(int)sq_ctx->substream);
  #line 819 
  seq_printf(m,(char *)"W0: qint_idx \t\t\t%d\nW0: ena \t\t\t%d\n\n",(int)sq_ctx->qint_idx,(int)sq_ctx->ena);
  #line 822 
  seq_printf(m,(char *)"W1: sqb_count \t\t\t%d\nW1: default_chan \t\t%d\n",(int)sq_ctx->sqb_count,(int)sq_ctx->default_chan);
  #line 824 
  seq_printf(m,(char *)"W1: smq_rr_quantum \t\t%d\nW1: sso_ena \t\t\t%d\n",(int)sq_ctx->smq_rr_quantum,(int)sq_ctx->sso_ena);
  #line 826 
  seq_printf(m,(char *)"W1: xoff \t\t\t%d\nW1: cq_ena \t\t\t%d\nW1: smq\t\t\t\t%d\n\n",(int)sq_ctx->xoff,(int)sq_ctx->cq_ena,(int)sq_ctx->smq);
  #line 829 
  seq_printf(m,(char *)"W2: sqe_stype \t\t\t%d\nW2: sq_int_ena \t\t\t%d\n",(int)sq_ctx->sqe_stype,(int)sq_ctx->sq_int_ena);
  #line 831 
  seq_printf(m,(char *)"W2: sq_int \t\t\t%d\nW2: sqb_aura \t\t\t%d\n",(int)sq_ctx->sq_int,(int)sq_ctx->sqb_aura);
  #line 833 
  seq_printf(m,(char *)"W2: smq_rr_count \t\t%d\n\n",(int)sq_ctx->smq_rr_count);
  #line 835 
  seq_printf(m,(char *)"W3: smq_next_sq_vld\t\t%d\nW3: smq_pend\t\t\t%d\n",(int)sq_ctx->smq_next_sq_vld,(int)sq_ctx->smq_pend);
  #line 837 
  seq_printf(m,(char *)"W3: smenq_next_sqb_vld \t\t%d\nW3: head_offset\t\t\t%d\n",(int)sq_ctx->smenq_next_sqb_vld,(int)sq_ctx->head_offset);
  #line 839 
  seq_printf(m,(char *)"W3: smenq_offset\t\t%d\nW3: tail_offset\t\t\t%d\n",(int)sq_ctx->smenq_offset,(int)sq_ctx->tail_offset);
  #line 841 
  seq_printf(m,(char *)"W3: smq_lso_segnum \t\t%d\nW3: smq_next_sq\t\t\t%d\n",(int)sq_ctx->smq_lso_segnum,(int)sq_ctx->smq_next_sq);
  #line 843 
  seq_printf(m,(char *)"W3: mnq_dis \t\t\t%d\nW3: lmt_dis \t\t\t%d\n",(int)sq_ctx->mnq_dis,(int)sq_ctx->lmt_dis);
  #line 845 
  seq_printf(m,(char *)"W3: cq_limit\t\t\t%d\nW3: max_sqe_size\t\t%d\n\n",(int)sq_ctx->cq_limit,(int)sq_ctx->max_sqe_size);
  #line 848 
  seq_printf(m,(char *)"W4: next_sqb \t\t\t%llx\n\n",(unsigned long long)sq_ctx->next_sqb);
  #line 849 
  seq_printf(m,(char *)"W5: tail_sqb \t\t\t%llx\n\n",(unsigned long long)sq_ctx->tail_sqb);
  #line 850 
  seq_printf(m,(char *)"W6: smenq_sqb \t\t\t%llx\n\n",(unsigned long long)sq_ctx->smenq_sqb);
  #line 851 
  seq_printf(m,(char *)"W7: smenq_next_sqb \t\t%llx\n\n",(unsigned long long)sq_ctx->smenq_next_sqb);
  #line 854 
  seq_printf(m,(char *)"W8: head_sqb\t\t\t%llx\n\n",(unsigned long long)sq_ctx->head_sqb);
  #line 856 
  seq_printf(m,(char *)"W9: vfi_lso_vld\t\t\t%d\nW9: vfi_lso_vlan1_ins_ena\t%d\n",(int)sq_ctx->vfi_lso_vld,(int)sq_ctx->vfi_lso_vlan1_ins_ena);
  #line 858 
  seq_printf(m,(char *)"W9: vfi_lso_vlan0_ins_ena\t%d\nW9: vfi_lso_mps\t\t\t%d\n",(int)sq_ctx->vfi_lso_vlan0_ins_ena,(int)sq_ctx->vfi_lso_mps);
  #line 860 
  seq_printf(m,(char *)"W9: vfi_lso_sb\t\t\t%d\nW9: vfi_lso_sizem1\t\t%d\n",(int)sq_ctx->vfi_lso_sb,(int)sq_ctx->vfi_lso_sizem1);
  #line 862 
  seq_printf(m,(char *)"W9: vfi_lso_total\t\t%d\n\n",(int)sq_ctx->vfi_lso_total);
  #line 864 
  seq_printf(m,(char *)"W10: scm_lso_rem \t\t%llu\n\n",(unsigned long long)sq_ctx->scm_lso_rem);
  #line 866 
  seq_printf(m,(char *)"W11: octs \t\t\t%llu\n\n",(unsigned long long)sq_ctx->octs);
  #line 867 
  seq_printf(m,(char *)"W12: pkts \t\t\t%llu\n\n",(unsigned long long)sq_ctx->pkts);
  #line 868 
  seq_printf(m,(char *)"W14: dropped_octs \t\t%llu\n\n",(unsigned long long)sq_ctx->dropped_octs);
  #line 870 
  seq_printf(m,(char *)"W15: dropped_pkts \t\t%llu\n\n",(unsigned long long)sq_ctx->dropped_pkts);
  #line 872 
  return;
}

#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void print_nix_rq_ctx(struct seq_file *m, struct nix_aq_enq_rsp *rsp)
{
  #line 877 
  struct nix_rq_ctx_s *rq_ctx = & rsp->__anonCompField_nix_aq_enq_rsp_167.rq;
  #line 879 
  seq_printf(m,(char *)"W0: wqe_aura \t\t\t%d\nW0: substream \t\t\t0x%03x\n",(int)rq_ctx->wqe_aura,(int)rq_ctx->substream);
  #line 881 
  seq_printf(m,(char *)"W0: cq \t\t\t\t%d\nW0: ena_wqwd \t\t\t%d\n",(int)rq_ctx->cq,(int)rq_ctx->ena_wqwd);
  #line 883 
  seq_printf(m,(char *)"W0: ipsech_ena \t\t\t%d\nW0: sso_ena \t\t\t%d\n",(int)rq_ctx->ipsech_ena,(int)rq_ctx->sso_ena);
  #line 885 
  seq_printf(m,(char *)"W0: ena \t\t\t%d\n\n",(int)rq_ctx->ena);
  #line 887 
  seq_printf(m,(char *)"W1: lpb_drop_ena \t\t%d\nW1: spb_drop_ena \t\t%d\n",(int)rq_ctx->lpb_drop_ena,(int)rq_ctx->spb_drop_ena);
  #line 889 
  seq_printf(m,(char *)"W1: xqe_drop_ena \t\t%d\nW1: wqe_caching \t\t%d\n",(int)rq_ctx->xqe_drop_ena,(int)rq_ctx->wqe_caching);
  #line 891 
  seq_printf(m,(char *)"W1: pb_caching \t\t\t%d\nW1: sso_tt \t\t\t%d\n",(int)rq_ctx->pb_caching,(int)rq_ctx->sso_tt);
  #line 893 
  seq_printf(m,(char *)"W1: sso_grp \t\t\t%d\nW1: lpb_aura \t\t\t%d\n",(int)rq_ctx->sso_grp,(int)rq_ctx->lpb_aura);
  #line 895 
  seq_printf(m,(char *)"W1: spb_aura \t\t\t%d\n\n",(int)rq_ctx->spb_aura);
  #line 897 
  seq_printf(m,(char *)"W2: xqe_hdr_split \t\t%d\nW2: xqe_imm_copy \t\t%d\n",(int)rq_ctx->xqe_hdr_split,(int)rq_ctx->xqe_imm_copy);
  #line 899 
  seq_printf(m,(char *)"W2: xqe_imm_size \t\t%d\nW2: later_skip \t\t\t%d\n",(int)rq_ctx->xqe_imm_size,(int)rq_ctx->later_skip);
  #line 901 
  seq_printf(m,(char *)"W2: first_skip \t\t\t%d\nW2: lpb_sizem1 \t\t\t%d\n",(int)rq_ctx->first_skip,(int)rq_ctx->lpb_sizem1);
  #line 903 
  seq_printf(m,(char *)"W2: spb_ena \t\t\t%d\nW2: wqe_skip \t\t\t%d\n",(int)rq_ctx->spb_ena,(int)rq_ctx->wqe_skip);
  #line 905 
  seq_printf(m,(char *)"W2: spb_sizem1 \t\t\t%d\n\n",(int)rq_ctx->spb_sizem1);
  #line 907 
  seq_printf(m,(char *)"W3: spb_pool_pass \t\t%d\nW3: spb_pool_drop \t\t%d\n",(int)rq_ctx->spb_pool_pass,(int)rq_ctx->spb_pool_drop);
  #line 909 
  seq_printf(m,(char *)"W3: spb_aura_pass \t\t%d\nW3: spb_aura_drop \t\t%d\n",(int)rq_ctx->spb_aura_pass,(int)rq_ctx->spb_aura_drop);
  #line 911 
  seq_printf(m,(char *)"W3: wqe_pool_pass \t\t%d\nW3: wqe_pool_drop \t\t%d\n",(int)rq_ctx->wqe_pool_pass,(int)rq_ctx->wqe_pool_drop);
  #line 913 
  seq_printf(m,(char *)"W3: xqe_pass \t\t\t%d\nW3: xqe_drop \t\t\t%d\n\n",(int)rq_ctx->xqe_pass,(int)rq_ctx->xqe_drop);
  #line 916 
  seq_printf(m,(char *)"W4: qint_idx \t\t\t%d\nW4: rq_int_ena \t\t\t%d\n",(int)rq_ctx->qint_idx,(int)rq_ctx->rq_int_ena);
  #line 918 
  seq_printf(m,(char *)"W4: rq_int \t\t\t%d\nW4: lpb_pool_pass \t\t%d\n",(int)rq_ctx->rq_int,(int)rq_ctx->lpb_pool_pass);
  #line 920 
  seq_printf(m,(char *)"W4: lpb_pool_drop \t\t%d\nW4: lpb_aura_pass \t\t%d\n",(int)rq_ctx->lpb_pool_drop,(int)rq_ctx->lpb_aura_pass);
  #line 922 
  seq_printf(m,(char *)"W4: lpb_aura_drop \t\t%d\n\n",(int)rq_ctx->lpb_aura_drop);
  #line 924 
  seq_printf(m,(char *)"W5: flow_tagw \t\t\t%d\nW5: bad_utag \t\t\t%d\n",(int)rq_ctx->flow_tagw,(int)rq_ctx->bad_utag);
  #line 926 
  seq_printf(m,(char *)"W5: good_utag \t\t\t%d\nW5: ltag \t\t\t%d\n\n",(int)rq_ctx->good_utag,(int)rq_ctx->ltag);
  #line 929 
  seq_printf(m,(char *)"W6: octs \t\t\t%llu\n\n",(unsigned long long)rq_ctx->octs);
  #line 930 
  seq_printf(m,(char *)"W7: pkts \t\t\t%llu\n\n",(unsigned long long)rq_ctx->pkts);
  #line 931 
  seq_printf(m,(char *)"W8: drop_octs \t\t\t%llu\n\n",(unsigned long long)rq_ctx->drop_octs);
  #line 932 
  seq_printf(m,(char *)"W9: drop_pkts \t\t\t%llu\n\n",(unsigned long long)rq_ctx->drop_pkts);
  #line 933 
  seq_printf(m,(char *)"W10: re_pkts \t\t\t%llu\n",(unsigned long long)rq_ctx->re_pkts);
  #line 934 
  return;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void print_nix_cq_ctx(struct seq_file *m, struct nix_aq_enq_rsp *rsp)
{
  #line 939 
  struct nix_cq_ctx_s *cq_ctx = & rsp->__anonCompField_nix_aq_enq_rsp_167.cq;
  #line 941 
  seq_printf(m,(char *)"W0: base \t\t\t%llx\n\n",cq_ctx->base);
  #line 943 
  seq_printf(m,(char *)"W1: wrptr \t\t\t%llx\n",(unsigned long long)cq_ctx->wrptr);
  #line 944 
  seq_printf(m,(char *)"W1: avg_con \t\t\t%d\nW1: cint_idx \t\t\t%d\n",(int)cq_ctx->avg_con,(int)cq_ctx->cint_idx);
  #line 946 
  seq_printf(m,(char *)"W1: cq_err \t\t\t%d\nW1: qint_idx \t\t\t%d\n",(int)cq_ctx->cq_err,(int)cq_ctx->qint_idx);
  #line 948 
  seq_printf(m,(char *)"W1: bpid \t\t\t%d\nW1: bp_ena \t\t\t%d\n\n",(int)cq_ctx->bpid,(int)cq_ctx->bp_ena);
  #line 951 
  seq_printf(m,(char *)"W2: update_time \t\t%d\nW2:avg_level \t\t\t%d\n",(int)cq_ctx->update_time,(int)cq_ctx->avg_level);
  #line 953 
  seq_printf(m,(char *)"W2: head \t\t\t%d\nW2:tail \t\t\t%d\n\n",(int)cq_ctx->head,(int)cq_ctx->tail);
  #line 956 
  seq_printf(m,(char *)"W3: cq_err_int_ena \t\t%d\nW3:cq_err_int \t\t\t%d\n",(int)cq_ctx->cq_err_int_ena,(int)cq_ctx->cq_err_int);
  #line 958 
  seq_printf(m,(char *)"W3: qsize \t\t\t%d\nW3:caching \t\t\t%d\n",(int)cq_ctx->qsize,(int)cq_ctx->caching);
  #line 960 
  seq_printf(m,(char *)"W3: substream \t\t\t0x%03x\nW3: ena \t\t\t%d\n",(int)cq_ctx->substream,(int)cq_ctx->ena);
  #line 962 
  seq_printf(m,(char *)"W3: drop_ena \t\t\t%d\nW3: drop \t\t\t%d\n",(int)cq_ctx->drop_ena,(int)cq_ctx->drop);
  #line 964 
  seq_printf(m,(char *)"W3: bp \t\t\t\t%d\n\n",(int)cq_ctx->bp);
  #line 965 
  return;
}

#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_nix_queue_ctx_display(struct seq_file *filp, void *unused, int ctype)
{
  #line 973 
  struct nix_aq_enq_req aq_req;
  #line 974 
  struct nix_aq_enq_rsp rsp;
  #line 976 
  int qidx;
  #line 976 
  int rc;
  #line 977 
  struct rvu_pfvf *pfvf;
  #line 978 
  int nixlf;
  #line 978 
  int id;
  #line 978 
  int all;
  #line 979 
  u16 pcifunc;
  #line 970 
  void (*print_nix_ctx)(struct seq_file *, struct nix_aq_enq_rsp *) = (void (*)(struct seq_file *, struct nix_aq_enq_rsp *))0;
  #line 972 
  struct rvu *rvu = (struct rvu *)filp->private;
  #line 975 
  char *ctype_string = (char *)0;
  #line 976 
  int max_id = 0;
  #line 981 
  switch (ctype) {
    #line 982 
    case 2: 
            #line 982 
    ;
    #line 983 
    nixlf = rvu->rvu_dbg.nix_cq_ctx.lf;
    #line 984 
    id = rvu->rvu_dbg.nix_cq_ctx.id;
    #line 985 
    all = (int)rvu->rvu_dbg.nix_cq_ctx.all;
    #line 986 
    break;
    #line 988 
    case 1: 
            #line 988 
    ;
    #line 989 
    nixlf = rvu->rvu_dbg.nix_sq_ctx.lf;
    #line 990 
    id = rvu->rvu_dbg.nix_sq_ctx.id;
    #line 991 
    all = (int)rvu->rvu_dbg.nix_sq_ctx.all;
    #line 992 
    break;
    #line 994 
    case 0: 
            #line 994 
    ;
    #line 995 
    nixlf = rvu->rvu_dbg.nix_rq_ctx.lf;
    #line 996 
    id = rvu->rvu_dbg.nix_rq_ctx.id;
    #line 997 
    all = (int)rvu->rvu_dbg.nix_rq_ctx.all;
    #line 998 
    break;
    #line 1000 
    default: 
             #line 1000 
    ;
    #line 1001 
    return -22;
  }
  #line 1004 
  if (! rvu_dbg_is_valid_lf(rvu,3,nixlf,& pcifunc)) 
                                                    #line 1005 
                                                    return -22;
  #line 1007 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 1008 
  if (ctype == 1 && pfvf->sq_ctx == (struct qmem *)0) {
    #line 1009 
    seq_puts(filp,(char *)"SQ context is not initialized\n");
    #line 1010 
    return -22;
  }
  else 
    #line 1011 
    if (ctype == 0 && pfvf->rq_ctx == (struct qmem *)0) {
      #line 1012 
      seq_puts(filp,(char *)"RQ context is not initialized\n");
      #line 1013 
      return -22;
    }
    else 
      #line 1014 
      if (ctype == 2 && pfvf->cq_ctx == (struct qmem *)0) {
        #line 1015 
        seq_puts(filp,(char *)"CQ context is not initialized\n");
        #line 1016 
        return -22;
      }
  #line 1019 
  if (ctype == 1) {
    #line 1020 
    max_id = (int)(pfvf->sq_ctx)->qsize;
    #line 1021 
    ctype_string = (char *)"sq";
    #line 1022 
    print_nix_ctx = & print_nix_sq_ctx;
  }
  else 
    #line 1023 
    if (ctype == 0) {
      #line 1024 
      max_id = (int)(pfvf->rq_ctx)->qsize;
      #line 1025 
      ctype_string = (char *)"rq";
      #line 1026 
      print_nix_ctx = & print_nix_rq_ctx;
    }
    else 
      #line 1027 
      if (ctype == 2) {
        #line 1028 
        max_id = (int)(pfvf->cq_ctx)->qsize;
        #line 1029 
        ctype_string = (char *)"cq";
        #line 1030 
        print_nix_ctx = & print_nix_cq_ctx;
      }
  #line 1033 
  memset((void *)(& aq_req),0,280UL);
  #line 1034 
  aq_req.hdr.pcifunc = pcifunc;
  #line 1035 
  aq_req.ctype = (unsigned char)ctype;
  #line 1036 
  aq_req.op = (unsigned char)3U;
  #line 1037 
  if (all != 0) 
                #line 1038 
                id = 0; else 
                             #line 1040 
                             max_id = id + 1;
  #line 1041 
  qidx = id;
  #line 1041 
  while (qidx < max_id) {
    #line 1042 
    aq_req.qidx = (unsigned int)qidx;
    #line 1043 
    seq_printf(filp,(char *)"=====%s_ctx for nixlf:%d and qidx:%d is=====\n",ctype_string,nixlf,aq_req.qidx);
    #line 1045 
    rc = rvu_mbox_handler_nix_aq_enq(rvu,& aq_req,& rsp);
    #line 1046 
    if (rc != 0) {
      #line 1047 
      seq_puts(filp,(char *)"Failed to read the context\n");
      #line 1048 
      return -22;
    }
    #line 1050 
    (*print_nix_ctx)(filp,& rsp);
    #line 1041 
    qidx ++;
  }
  #line 1052 
  return 0;
}

#line 1055  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int write_nix_queue_ctx(struct rvu *rvu, bool all, int nixlf, int id, int ctype, char *ctype_string)
{
  #line 1058 
  struct rvu_pfvf *pfvf;
  #line 1060 
  u16 pcifunc;
  #line 1059 
  int max_id = 0;
  #line 1062 
  if (! rvu_dbg_is_valid_lf(rvu,3,nixlf,& pcifunc)) 
                                                    #line 1063 
                                                    return -22;
  #line 1065 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 1067 
  if (ctype == 1) {
    #line 1068 
    if (pfvf->sq_ctx == (struct qmem *)0) {
      #line 1069 
      _dev_warn(rvu->dev,(char *)"SQ context is not initialized\n");
      #line 1070 
      return -22;
    }
    #line 1072 
    max_id = (int)(pfvf->sq_ctx)->qsize;
  }
  else 
    #line 1073 
    if (ctype == 0) {
      #line 1074 
      if (pfvf->rq_ctx == (struct qmem *)0) {
        #line 1075 
        _dev_warn(rvu->dev,(char *)"RQ context is not initialized\n");
        #line 1076 
        return -22;
      }
      #line 1078 
      max_id = (int)(pfvf->rq_ctx)->qsize;
    }
    else 
      #line 1079 
      if (ctype == 2) {
        #line 1080 
        if (pfvf->cq_ctx == (struct qmem *)0) {
          #line 1081 
          _dev_warn(rvu->dev,(char *)"CQ context is not initialized\n");
          #line 1082 
          return -22;
        }
        #line 1084 
        max_id = (int)(pfvf->cq_ctx)->qsize;
      }
  #line 1087 
  if (id < 0 || id >= max_id) {
    #line 1088 
    _dev_warn(rvu->dev,(char *)"Invalid %s_ctx valid range 0-%d\n",ctype_string,max_id + -1);
    #line 1090 
    return -22;
  }
  #line 1092 
  switch (ctype) {
    #line 1093 
    case 2: 
            #line 1093 
    ;
    #line 1094 
    rvu->rvu_dbg.nix_cq_ctx.lf = nixlf;
    #line 1095 
    rvu->rvu_dbg.nix_cq_ctx.id = id;
    #line 1096 
    rvu->rvu_dbg.nix_cq_ctx.all = all;
    #line 1097 
    break;
    #line 1099 
    case 1: 
            #line 1099 
    ;
    #line 1100 
    rvu->rvu_dbg.nix_sq_ctx.lf = nixlf;
    #line 1101 
    rvu->rvu_dbg.nix_sq_ctx.id = id;
    #line 1102 
    rvu->rvu_dbg.nix_sq_ctx.all = all;
    #line 1103 
    break;
    #line 1105 
    case 0: 
            #line 1105 
    ;
    #line 1106 
    rvu->rvu_dbg.nix_rq_ctx.lf = nixlf;
    #line 1107 
    rvu->rvu_dbg.nix_rq_ctx.id = id;
    #line 1108 
    rvu->rvu_dbg.nix_rq_ctx.all = all;
    #line 1109 
    break;
    #line 1110 
    default: 
             #line 1110 
    ;
    #line 1111 
    return -22;
  }
  #line 1113 
  return 0;
}

#line 1116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static ssize_t rvu_dbg_nix_queue_ctx_write(struct file *filp, char *buffer, size_t count, loff_t *ppos, int ctype)
{
  #line 1123 
  char *cmd_buf;
  #line 1123 
  char *ctype_string;
  #line 1124 
  int nixlf;
  #line 1124 
  int ret;
  #line 1162 
  long tmp_0;
  #line 1121 
  struct seq_file *m = (struct seq_file *)filp->private_data;
  #line 1122 
  struct rvu *rvu = (struct rvu *)m->private;
  #line 1124 
  int id = 0;
  #line 1125 
  bool all = (_Bool)0;
  #line 1127 
  if (*ppos != 0LL || count == 0UL) 
                                    #line 1128 
                                    return -22L;
  #line 1130 
  switch (ctype) {
    #line 1131 
    case 1: 
            #line 1131 
    ;
    #line 1132 
    ctype_string = (char *)"sq";
    #line 1133 
    break;
    #line 1134 
    case 0: 
            #line 1134 
    ;
    #line 1135 
    ctype_string = (char *)"rq";
    #line 1136 
    break;
    #line 1137 
    case 2: 
            #line 1137 
    ;
    #line 1138 
    ctype_string = (char *)"cq";
    #line 1139 
    break;
    #line 1140 
    default: 
             #line 1140 
    ;
    #line 1141 
    return -22L;
  }
  #line 1144 
  cmd_buf = (char *)kzalloc(count + 1UL,3264U);
  #line 1146 
  if (cmd_buf == (char *)0) 
                            #line 1147 
                            return (long)count;
  #line 1149 
  ret = parse_cmd_buffer_ctx(cmd_buf,& count,buffer,& nixlf,& id,& all);
  #line 1151 
  if (ret < 0) {
    #line 1152 
    _dev_info(rvu->dev,(char *)"Usage: echo <nixlf> [%s number/all] > %s_ctx\n",ctype_string,ctype_string);
    #line 1155 
    goto done;
  }
  else 
       #line 1157 
       ret = write_nix_queue_ctx(rvu,(_Bool)((bool)((int)all) != 0),nixlf,id,ctype,ctype_string);
  #line 1160 
  done: 
        #line 1160 
  ;
  #line 1161 
  kfree((void *)cmd_buf);
  #line 1162 
  if (ret != 0) 
                #line 1162 
                tmp_0 = (long)ret; else 
                                        #line 1162 
                                        tmp_0 = (long)count;
  #line 1162 
  return tmp_0;
}

#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static ssize_t rvu_dbg_nix_sq_ctx_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 1169 
  return rvu_dbg_nix_queue_ctx_write(filp,buffer,count,ppos,1);
}

#line 1173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_nix_sq_ctx_display(struct seq_file *filp, void *unused)
{
  #line 1175 
  return rvu_dbg_nix_queue_ctx_display(filp,unused,1);
}

#line 1178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_nix_sq_ctx(struct inode *inode, struct file *file)
{
  #line 1178 
  return single_open(file,& rvu_dbg_nix_sq_ctx_display,inode->i_private);
}

#line 1178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_nix_sq_ctx_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = & rvu_dbg_nix_sq_ctx_write, .open = & rvu_dbg_open_nix_sq_ctx, .release = & single_release};
#line 1180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static ssize_t rvu_dbg_nix_rq_ctx_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 1184 
  return rvu_dbg_nix_queue_ctx_write(filp,buffer,count,ppos,0);
}

#line 1188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_nix_rq_ctx_display(struct seq_file *filp, void *unused)
{
  #line 1190 
  return rvu_dbg_nix_queue_ctx_display(filp,unused,0);
}

#line 1193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_nix_rq_ctx(struct inode *inode, struct file *file)
{
  #line 1193 
  return single_open(file,& rvu_dbg_nix_rq_ctx_display,inode->i_private);
}

#line 1193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_nix_rq_ctx_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = & rvu_dbg_nix_rq_ctx_write, .open = & rvu_dbg_open_nix_rq_ctx, .release = & single_release};
#line 1195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static ssize_t rvu_dbg_nix_cq_ctx_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 1199 
  return rvu_dbg_nix_queue_ctx_write(filp,buffer,count,ppos,2);
}

#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_nix_cq_ctx_display(struct seq_file *filp, void *unused)
{
  #line 1205 
  return rvu_dbg_nix_queue_ctx_display(filp,unused,2);
}

#line 1208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_nix_cq_ctx(struct inode *inode, struct file *file)
{
  #line 1208 
  return single_open(file,& rvu_dbg_nix_cq_ctx_display,inode->i_private);
}

#line 1208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_nix_cq_ctx_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = & rvu_dbg_nix_cq_ctx_write, .open = & rvu_dbg_open_nix_cq_ctx, .release = & single_release};
#line 1210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void print_nix_qctx_qsize(struct seq_file *filp, int qsize, unsigned long *bmap, char *qtype)
{
  #line 1213 
  char *buf;
  #line 1215 
  buf = (char *)kmalloc(4096UL,3264U);
  #line 1216 
  if (buf == (char *)0) 
                        #line 1217 
                        return;
  #line 1219 
  bitmap_print_to_pagebuf((_Bool)0,buf,bmap,qsize);
  #line 1220 
  seq_printf(filp,(char *)"%s context count : %d\n",qtype,qsize);
  #line 1221 
  seq_printf(filp,(char *)"%s context ena/dis bitmap : %s\n",qtype,buf);
  #line 1223 
  kfree((void *)buf);
  #line 1224 
  return;
}

#line 1226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void print_nix_qsize(struct seq_file *filp, struct rvu_pfvf *pfvf)
{
  #line 1228 
  if (pfvf->cq_ctx == (struct qmem *)0) 
                                        #line 1229 
                                        seq_puts(filp,(char *)"cq context is not initialized\n"); else 
                                                                    #line 1231 
                                                                    print_nix_qctx_qsize(filp,(int)(pfvf->cq_ctx)->qsize,pfvf->cq_bmap,(char *)"cq");
  #line 1234 
  if (pfvf->rq_ctx == (struct qmem *)0) 
                                        #line 1235 
                                        seq_puts(filp,(char *)"rq context is not initialized\n"); else 
                                                                    #line 1237 
                                                                    print_nix_qctx_qsize(filp,(int)(pfvf->rq_ctx)->qsize,pfvf->rq_bmap,(char *)"rq");
  #line 1240 
  if (pfvf->sq_ctx == (struct qmem *)0) 
                                        #line 1241 
                                        seq_puts(filp,(char *)"sq context is not initialized\n"); else 
                                                                    #line 1243 
                                                                    print_nix_qctx_qsize(filp,(int)(pfvf->sq_ctx)->qsize,pfvf->sq_bmap,(char *)"sq");
  #line 1245 
  return;
}

#line 1247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static ssize_t rvu_dbg_nix_qsize_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 1251 
  return rvu_dbg_qsize_write(filp,buffer,count,ppos,3);
}

#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_nix_qsize_display(struct seq_file *filp, void *unused)
{
  #line 1257 
  return rvu_dbg_qsize_display(filp,unused,3);
}

#line 1260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_nix_qsize(struct inode *inode, struct file *file)
{
  #line 1260 
  return single_open(file,& rvu_dbg_nix_qsize_display,inode->i_private);
}

#line 1260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_nix_qsize_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = & rvu_dbg_nix_qsize_write, .open = & rvu_dbg_open_nix_qsize, .release = & single_release};
#line 1262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void rvu_dbg_nix_init(struct rvu *rvu)
{
  #line 1265 
  struct dentry *pfile;
  #line 1264 
  struct device *dev = & (rvu->pdev)->dev;
  #line 1267 
  rvu->rvu_dbg.nix = cif_debugfs_create_dir((char *)"nix",rvu->rvu_dbg.root);
  #line 1268 
  if (rvu->rvu_dbg.nix == (struct dentry *)0) {
    #line 1269 
    _dev_err(rvu->dev,(char *)"create debugfs dir failed for nix\n");
    #line 1270 
    return;
  }
  #line 1273 
  pfile = cif_debugfs_create_file((char *)"sq_ctx",(unsigned short)384,rvu->rvu_dbg.nix,(void *)rvu,& rvu_dbg_nix_sq_ctx_fops);
  #line 1275 
  if (pfile == (struct dentry *)0) 
                                   #line 1276 
                                   goto create_failed;
  #line 1278 
  pfile = cif_debugfs_create_file((char *)"rq_ctx",(unsigned short)384,rvu->rvu_dbg.nix,(void *)rvu,& rvu_dbg_nix_rq_ctx_fops);
  #line 1280 
  if (pfile == (struct dentry *)0) 
                                   #line 1281 
                                   goto create_failed;
  #line 1283 
  pfile = cif_debugfs_create_file((char *)"cq_ctx",(unsigned short)384,rvu->rvu_dbg.nix,(void *)rvu,& rvu_dbg_nix_cq_ctx_fops);
  #line 1285 
  if (pfile == (struct dentry *)0) 
                                   #line 1286 
                                   goto create_failed;
  #line 1288 
  pfile = cif_debugfs_create_file((char *)"ndc_tx_cache",(unsigned short)384,rvu->rvu_dbg.nix,(void *)rvu,& rvu_dbg_nix_ndc_tx_cache_fops);
  #line 1290 
  if (pfile == (struct dentry *)0) 
                                   #line 1291 
                                   goto create_failed;
  #line 1293 
  pfile = cif_debugfs_create_file((char *)"ndc_rx_cache",(unsigned short)384,rvu->rvu_dbg.nix,(void *)rvu,& rvu_dbg_nix_ndc_rx_cache_fops);
  #line 1295 
  if (pfile == (struct dentry *)0) 
                                   #line 1296 
                                   goto create_failed;
  #line 1298 
  pfile = cif_debugfs_create_file((char *)"ndc_tx_hits_miss",(unsigned short)384,rvu->rvu_dbg.nix,(void *)rvu,& rvu_dbg_nix_ndc_tx_hits_miss_fops);
  #line 1300 
  if (pfile == (struct dentry *)0) 
                                   #line 1301 
                                   goto create_failed;
  #line 1303 
  pfile = cif_debugfs_create_file((char *)"ndc_rx_hits_miss",(unsigned short)384,rvu->rvu_dbg.nix,(void *)rvu,& rvu_dbg_nix_ndc_rx_hits_miss_fops);
  #line 1305 
  if (pfile == (struct dentry *)0) 
                                   #line 1306 
                                   goto create_failed;
  #line 1308 
  pfile = cif_debugfs_create_file((char *)"qsize",(unsigned short)384,rvu->rvu_dbg.nix,(void *)rvu,& rvu_dbg_nix_qsize_fops);
  #line 1310 
  if (pfile == (struct dentry *)0) 
                                   #line 1311 
                                   goto create_failed;
  #line 1313 
  return;
  #line 1314 
  create_failed: 
                 #line 1314 
  ;
  #line 1315 
  _dev_err(dev,(char *)"Failed to create debugfs dir/file for NIX\n");
  #line 1316 
  debugfs_remove_recursive(rvu->rvu_dbg.nix);
  #line 1317 
  return;
}

#line 1319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void rvu_dbg_npa_init(struct rvu *rvu)
{
  #line 1322 
  struct dentry *pfile;
  #line 1321 
  struct device *dev = & (rvu->pdev)->dev;
  #line 1324 
  rvu->rvu_dbg.npa = cif_debugfs_create_dir((char *)"npa",rvu->rvu_dbg.root);
  #line 1325 
  if (rvu->rvu_dbg.npa == (struct dentry *)0) 
                                              #line 1326 
                                              return;
  #line 1328 
  pfile = cif_debugfs_create_file((char *)"qsize",(unsigned short)384,rvu->rvu_dbg.npa,(void *)rvu,& rvu_dbg_npa_qsize_fops);
  #line 1330 
  if (pfile == (struct dentry *)0) 
                                   #line 1331 
                                   goto create_failed;
  #line 1333 
  pfile = cif_debugfs_create_file((char *)"aura_ctx",(unsigned short)384,rvu->rvu_dbg.npa,(void *)rvu,& rvu_dbg_npa_aura_ctx_fops);
  #line 1335 
  if (pfile == (struct dentry *)0) 
                                   #line 1336 
                                   goto create_failed;
  #line 1338 
  pfile = cif_debugfs_create_file((char *)"pool_ctx",(unsigned short)384,rvu->rvu_dbg.npa,(void *)rvu,& rvu_dbg_npa_pool_ctx_fops);
  #line 1340 
  if (pfile == (struct dentry *)0) 
                                   #line 1341 
                                   goto create_failed;
  #line 1343 
  pfile = cif_debugfs_create_file((char *)"ndc_cache",(unsigned short)384,rvu->rvu_dbg.npa,(void *)rvu,& rvu_dbg_npa_ndc_cache_fops);
  #line 1345 
  if (pfile == (struct dentry *)0) 
                                   #line 1346 
                                   goto create_failed;
  #line 1348 
  pfile = cif_debugfs_create_file((char *)"ndc_hits_miss",(unsigned short)384,rvu->rvu_dbg.npa,(void *)rvu,& rvu_dbg_npa_ndc_hits_miss_fops);
  #line 1350 
  if (pfile == (struct dentry *)0) 
                                   #line 1351 
                                   goto create_failed;
  #line 1353 
  return;
  #line 1355 
  create_failed: 
                 #line 1355 
  ;
  #line 1356 
  _dev_err(dev,(char *)"Failed to create debugfs dir/file for NPA\n");
  #line 1357 
  debugfs_remove_recursive(rvu->rvu_dbg.npa);
  #line 1358 
  return;
}

#line 1380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int cgx_print_stats(struct seq_file *s, int lmac_id)
{
  #line 1404 
  u64 cnt;
  #line 1426 
  u64 cnt_5;
  #line 1407 
  u64 cnt_0;
  #line 1429 
  u64 cnt_6;
  #line 1410 
  u64 cnt_1;
  #line 1432 
  u64 cnt_7;
  #line 1382 
  struct cgx_link_user_info linfo;
  #line 1384 
  u64 ucast;
  #line 1384 
  u64 mcast;
  #line 1384 
  u64 bcast;
  #line 1386 
  u64 tx_stat;
  #line 1386 
  u64 rx_stat;
  #line 1387 
  struct rvu *rvu;
  #line 1399 
  char *tmp_1;
  #line 1383 
  void *cgxd = s->private;
  #line 1385 
  int stat = 0;
  #line 1385 
  int err = 0;
  #line 1389 
  rvu = (struct rvu *)pci_get_drvdata(pci_get_device(6013U,41061U,(struct pci_dev *)0));
  #line 1391 
  if (rvu == (struct rvu *)0) 
                              #line 1392 
                              return -19;
  #line 1395 
  seq_puts(s,(char *)"\n=======Link Status======\n\n");
  #line 1396 
  err = cgx_get_link_info(cgxd,lmac_id,& linfo);
  #line 1397 
  if (err != 0) 
                #line 1398 
                seq_puts(s,(char *)"Failed to read link status\n");
  #line 1399 
  ;
  #line 1399 
  if ((unsigned int)linfo.link_up != 0U) 
                                         #line 1399 
                                         tmp_1 = (char *)"UP"; else 
                                                                    #line 1399 
                                                                    tmp_1 = (char *)"DOWN";
  #line 1399 
  ;
  #line 1399 
  seq_printf(s,(char *)"\nLink is %s %d Mbps\n\n",tmp_1,(int)linfo.speed);
  #line 1403 
  seq_puts(s,(char *)"\n=======NIX RX_STATS(CGX port level)======\n\n");
  #line 1404 
  err = rvu_cgx_nix_cuml_stats(rvu,cgxd,lmac_id,1,0,& cnt);
  #line 1404 
  if (err == 0) 
                #line 1404 
                seq_printf(s,(char *)"%s: %llu\n",(char *)"rx_ucast_frames",cnt);
  #line 1404 
  ucast = cnt;
  #line 1405 
  if (err != 0) 
                #line 1406 
                return err;
  #line 1407 
  err = rvu_cgx_nix_cuml_stats(rvu,cgxd,lmac_id,3,0,& cnt_0);
  #line 1407 
  if (err == 0) 
                #line 1407 
                seq_printf(s,(char *)"%s: %llu\n",(char *)"rx_mcast_frames",cnt_0);
  #line 1407 
  mcast = cnt_0;
  #line 1408 
  if (err != 0) 
                #line 1409 
                return err;
  #line 1410 
  err = rvu_cgx_nix_cuml_stats(rvu,cgxd,lmac_id,2,0,& cnt_1);
  #line 1410 
  if (err == 0) 
                #line 1410 
                seq_printf(s,(char *)"%s: %llu\n",(char *)"rx_bcast_frames",cnt_1);
  #line 1410 
  bcast = cnt_1;
  #line 1411 
  if (err != 0) 
                #line 1412 
                return err;
  #line 1413 
  seq_printf(s,(char *)"rx_frames: %llu\n",(ucast + mcast) + bcast);
  {
    #line 1414 
    u64 cnt_2;
    #line 1414 
    err = rvu_cgx_nix_cuml_stats(rvu,cgxd,lmac_id,0,0,& cnt_2);
    #line 1414 
    if (err == 0) 
                  #line 1414 
                  seq_printf(s,(char *)"%s: %llu\n",(char *)"rx_bytes",cnt_2);
    #line 1414 
    u64 tmp_5 = cnt_2;
  }
  #line 1415 
  if (err != 0) 
                #line 1416 
                return err;
  {
    #line 1417 
    u64 cnt_3;
    #line 1417 
    err = rvu_cgx_nix_cuml_stats(rvu,cgxd,lmac_id,4,0,& cnt_3);
    #line 1417 
    if (err == 0) 
                  #line 1417 
                  seq_printf(s,(char *)"%s: %llu\n",(char *)"rx_drops",cnt_3);
    #line 1417 
    u64 tmp_7 = cnt_3;
  }
  #line 1418 
  if (err != 0) 
                #line 1419 
                return err;
  {
    #line 1420 
    u64 cnt_4;
    #line 1420 
    err = rvu_cgx_nix_cuml_stats(rvu,cgxd,lmac_id,7,0,& cnt_4);
    #line 1420 
    if (err == 0) 
                  #line 1420 
                  seq_printf(s,(char *)"%s: %llu\n",(char *)"rx_errors",cnt_4);
    #line 1420 
    u64 tmp_9 = cnt_4;
  }
  #line 1421 
  if (err != 0) 
                #line 1422 
                return err;
  #line 1425 
  seq_puts(s,(char *)"\n=======NIX TX_STATS(CGX port level)======\n\n");
  #line 1426 
  err = rvu_cgx_nix_cuml_stats(rvu,cgxd,lmac_id,0,1,& cnt_5);
  #line 1426 
  if (err == 0) 
                #line 1426 
                seq_printf(s,(char *)"%s: %llu\n",(char *)"tx_ucast_frames",cnt_5);
  #line 1426 
  ucast = cnt_5;
  #line 1427 
  if (err != 0) 
                #line 1428 
                return err;
  #line 1429 
  err = rvu_cgx_nix_cuml_stats(rvu,cgxd,lmac_id,2,1,& cnt_6);
  #line 1429 
  if (err == 0) 
                #line 1429 
                seq_printf(s,(char *)"%s: %llu\n",(char *)"tx_mcast_frames",cnt_6);
  #line 1429 
  mcast = cnt_6;
  #line 1430 
  if (err != 0) 
                #line 1431 
                return err;
  #line 1432 
  err = rvu_cgx_nix_cuml_stats(rvu,cgxd,lmac_id,1,1,& cnt_7);
  #line 1432 
  if (err == 0) 
                #line 1432 
                seq_printf(s,(char *)"%s: %llu\n",(char *)"tx_bcast_frames",cnt_7);
  #line 1432 
  bcast = cnt_7;
  #line 1433 
  if (err != 0) 
                #line 1434 
                return err;
  #line 1435 
  seq_printf(s,(char *)"tx_frames: %llu\n",(ucast + mcast) + bcast);
  {
    #line 1436 
    u64 cnt_8;
    #line 1436 
    err = rvu_cgx_nix_cuml_stats(rvu,cgxd,lmac_id,4,1,& cnt_8);
    #line 1436 
    if (err == 0) 
                  #line 1436 
                  seq_printf(s,(char *)"%s: %llu\n",(char *)"tx_bytes",cnt_8);
    #line 1436 
    u64 tmp_11 = cnt_8;
  }
  #line 1437 
  if (err != 0) 
                #line 1438 
                return err;
  {
    #line 1439 
    u64 cnt_9;
    #line 1439 
    err = rvu_cgx_nix_cuml_stats(rvu,cgxd,lmac_id,3,1,& cnt_9);
    #line 1439 
    if (err == 0) 
                  #line 1439 
                  seq_printf(s,(char *)"%s: %llu\n",(char *)"tx_drops",cnt_9);
    #line 1439 
    u64 tmp_13 = cnt_9;
  }
  #line 1440 
  if (err != 0) 
                #line 1441 
                return err;
  #line 1444 
  seq_puts(s,(char *)"\n=======CGX RX_STATS======\n\n");
  #line 1445 
  while (stat <= 12) {
    #line 1446 
    err = cgx_get_rx_stats(cgxd,lmac_id,stat,& rx_stat);
    #line 1447 
    if (err != 0) 
                  #line 1448 
                  return err;
    #line 1449 
    seq_printf(s,(char *)"%s: %llu\n",cgx_rx_stats_fields[stat],rx_stat);
    #line 1450 
    stat ++;
  }
  #line 1454 
  stat = 0;
  #line 1455 
  seq_puts(s,(char *)"\n=======CGX TX_STATS======\n\n");
  #line 1456 
  while (stat <= 17) {
    #line 1457 
    err = cgx_get_tx_stats(cgxd,lmac_id,stat,& tx_stat);
    #line 1458 
    if (err != 0) 
                  #line 1459 
                  return err;
    #line 1460 
    seq_printf(s,(char *)"%s: %llu\n",cgx_tx_stats_fields[stat],tx_stat);
    #line 1461 
    stat ++;
  }
  #line 1464 
  return err;
}

#line 1467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_cgx_stat_display(struct seq_file *filp, void *unused)
{
  #line 1469 
  struct dentry *current_dir;
  #line 1470 
  int err;
  #line 1470 
  int lmac_id;
  #line 1471 
  char *buf;
  #line 1473 
  current_dir = ((filp->file)->f_path.dentry)->d_parent;
  #line 1474 
  buf = strrchr((char *)current_dir->d_name.name,99);
  #line 1475 
  if (buf == (char *)0) 
                        #line 1476 
                        return -22;
  #line 1478 
  err = kstrtoint(buf + 1U,10U,& lmac_id);
  #line 1479 
  if (err == 0) {
    #line 1480 
    err = cgx_print_stats(filp,lmac_id);
    #line 1481 
    if (err != 0) 
                  #line 1482 
                  return err;
  }
  #line 1484 
  return err;
}

#line 1487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_cgx_stat(struct inode *inode, struct file *file)
{
  #line 1487 
  return single_open(file,& rvu_dbg_cgx_stat_display,inode->i_private);
}

#line 1487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_cgx_stat_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & rvu_dbg_open_cgx_stat, .release = & single_release};
#line 1489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void rvu_dbg_cgx_init(struct rvu *rvu)
{
  #line 1492 
  struct dentry *pfile;
  #line 1493 
  int i;
  #line 1493 
  int lmac_id;
  #line 1494 
  char dname[20U];
  #line 1495 
  void *cgx;
  #line 1491 
  struct device *dev = & (rvu->pdev)->dev;
  #line 1497 
  rvu->rvu_dbg.cgx_root = cif_debugfs_create_dir((char *)"cgx",rvu->rvu_dbg.root);
  #line 1499 
  i = 0;
  #line 1499 
  while (1) {
    #line 1499 
    ;
    #line 1499 
    if (! (cgx_get_cgxcnt_max() > i)) 
                                      #line 1499 
                                      break;
    #line 1500 
    cgx = rvu_cgx_pdata((unsigned char)((int)((unsigned char)i)),rvu);
    #line 1501 
    if (cgx == (void *)0) 
                          #line 1502 
                          goto __Cont;
    #line 1504 
    sprintf((char *)(& dname),(char *)"cgx%d",i);
    #line 1505 
    rvu->rvu_dbg.cgx = cif_debugfs_create_dir((char *)(& dname),rvu->rvu_dbg.cgx_root);
    #line 1507 
    lmac_id = 0;
    #line 1507 
    while (1) {
      #line 1507 
      ;
      #line 1507 
      if (! (cgx_get_lmac_cnt(cgx) > lmac_id)) 
                                               #line 1507 
                                               break;
      #line 1509 
      sprintf((char *)(& dname),(char *)"lmac%d",lmac_id);
      #line 1510 
      rvu->rvu_dbg.lmac = cif_debugfs_create_dir((char *)(& dname),rvu->rvu_dbg.cgx);
      #line 1513 
      pfile = cif_debugfs_create_file((char *)"stats",(unsigned short)384,rvu->rvu_dbg.lmac,cgx,& rvu_dbg_cgx_stat_fops);
      #line 1516 
      if (pfile == (struct dentry *)0) 
                                       #line 1517 
                                       goto create_failed;
      #line 1507 
      lmac_id ++;
    }
    #line 1499 
    __Cont: 
            #line 1499 
    i ++;
  }
  #line 1520 
  return;
  #line 1522 
  create_failed: 
                 #line 1522 
  ;
  #line 1523 
  _dev_err(dev,(char *)"Failed to create debugfs dir/file for CGX\n");
  #line 1524 
  debugfs_remove_recursive(rvu->rvu_dbg.cgx_root);
  #line 1525 
  return;
}

#line 1528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void rvu_print_npc_mcam_info(struct seq_file *s, u16 pcifunc, int blkaddr)
{
  #line 1532 
  int entry_acnt;
  #line 1532 
  int entry_ecnt;
  #line 1533 
  int cntr_acnt;
  #line 1533 
  int cntr_ecnt;
  #line 1531 
  struct rvu *rvu = (struct rvu *)s->private;
  #line 1536 
  if ((unsigned int)pcifunc == 0U) 
                                   #line 1537 
                                   return;
  #line 1538 
  rvu_npc_get_mcam_entry_alloc_info(rvu,(unsigned short)((int)pcifunc),blkaddr,& entry_acnt,& entry_ecnt);
  #line 1540 
  rvu_npc_get_mcam_counter_alloc_info(rvu,(unsigned short)((int)pcifunc),blkaddr,& cntr_acnt,& cntr_ecnt);
  #line 1542 
  if (entry_acnt == 0 && cntr_acnt == 0) 
                                         #line 1543 
                                         return;
  #line 1545 
  if (((int)pcifunc & 1023) == 0) {
    #line 1546 
    ;
    #line 1546 
    seq_printf(s,(char *)"\n\t\t Device \t\t: PF%d\n",rvu_get_pf((unsigned short)((int)pcifunc)));
  }
  else {
    #line 1549 
    ;
    #line 1549 
    ;
    #line 1549 
    seq_printf(s,(char *)"\n\t\t Device \t\t: PF%d VF%d\n",rvu_get_pf((unsigned short)((int)pcifunc)),((int)pcifunc & 1023) + -1);
  }
  #line 1553 
  if (entry_acnt != 0) {
    #line 1554 
    seq_printf(s,(char *)"\t\t Entries allocated \t: %d\n",entry_acnt);
    #line 1555 
    seq_printf(s,(char *)"\t\t Entries enabled \t: %d\n",entry_ecnt);
  }
  #line 1557 
  if (cntr_acnt != 0) {
    #line 1558 
    seq_printf(s,(char *)"\t\t Counters allocated \t: %d\n",cntr_acnt);
    #line 1559 
    seq_printf(s,(char *)"\t\t Counters enabled \t: %d\n",cntr_ecnt);
  }
  #line 1561 
  return;
}

#line 1563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_npc_mcam_info_display(struct seq_file *filp, void *unsued)
{
  #line 1586 
  char *tmp_1;
  #line 1581 
  char *tmp;
  #line 1566 
  int pf;
  #line 1566 
  int vf;
  #line 1566 
  int numvfs;
  #line 1566 
  int blkaddr;
  #line 1567 
  struct npc_mcam *mcam;
  #line 1568 
  u16 pcifunc;
  #line 1569 
  u64 cfg;
  #line 1581 
  char *tmp_0;
  #line 1586 
  char *tmp_2;
  #line 1565 
  struct rvu *rvu = (struct rvu *)filp->private;
  #line 1571 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 1572 
  if (blkaddr < 0) 
                   #line 1573 
                   return -19;
  #line 1575 
  mcam = & (rvu->hw)->mcam;
  #line 1577 
  seq_puts(filp,(char *)"\nNPC MCAM info:\n");
  #line 1579 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,4112ULL);
  #line 1580 
  cfg = (cfg >> 32) & 7ULL;
  #line 1581 
  if (cfg != 0ULL) {
    #line 1581 
    if (cfg == 1ULL) 
                     #line 1581 
                     tmp = (char *)"224bits"; else 
                                                   #line 1581 
                                                   tmp = (char *)"448bits";
    #line 1581 
    tmp_0 = tmp;
  }
  else 
       #line 1581 
       tmp_0 = (char *)"112bits";
  #line 1581 
  ;
  #line 1581 
  seq_printf(filp,(char *)"\t\t RX keywidth \t: %s\n",tmp_0);
  #line 1584 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,4368ULL);
  #line 1585 
  cfg = (cfg >> 32) & 7ULL;
  #line 1586 
  if (cfg != 0ULL) {
    #line 1586 
    if (cfg == 1ULL) 
                     #line 1586 
                     tmp_1 = (char *)"224bits"; else 
                                                     #line 1586 
                                                     tmp_1 = (char *)"448bits";
    #line 1586 
    tmp_2 = tmp_1;
  }
  else 
       #line 1586 
       tmp_2 = (char *)"112bits";
  #line 1586 
  ;
  #line 1586 
  seq_printf(filp,(char *)"\t\t TX keywidth \t: %s\n",tmp_2);
  #line 1590 
  cif_mutex_lock_lock_of_npc_mcam(& mcam->lock);
  #line 1592 
  seq_printf(filp,(char *)"\n\t\t MCAM entries \t: %d\n",(int)mcam->total_entries);
  #line 1593 
  seq_printf(filp,(char *)"\t\t Reserved \t: %d\n",(int)mcam->total_entries - (int)mcam->bmap_entries);
  #line 1595 
  seq_printf(filp,(char *)"\t\t Available \t: %d\n",(int)mcam->bmap_fcnt);
  #line 1598 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,32ULL);
  #line 1599 
  cfg >>= 48;
  #line 1600 
  seq_printf(filp,(char *)"\n\t\t MCAM counters \t: %lld\n",cfg);
  #line 1601 
  seq_printf(filp,(char *)"\t\t Reserved \t: %lld\n",cfg - (unsigned long long)mcam->counters.max);
  #line 1602 
  ;
  #line 1602 
  seq_printf(filp,(char *)"\t\t Available \t: %d\n",rvu_rsrc_free_count(& mcam->counters));
  #line 1605 
  if ((int)mcam->bmap_entries == (int)mcam->bmap_fcnt) {
    #line 1606 
    cif_mutex_unlock_lock_of_npc_mcam(& mcam->lock);
    #line 1607 
    return 0;
  }
  #line 1610 
  seq_puts(filp,(char *)"\n\t\t Current allocation\n");
  #line 1611 
  seq_puts(filp,(char *)"\t\t====================\n");
  #line 1612 
  pf = 0;
  #line 1612 
  while ((int)(rvu->hw)->total_pfs > pf) {
    #line 1613 
    pcifunc = (unsigned short)((int)((unsigned short)pf) << 10U);
    #line 1614 
    rvu_print_npc_mcam_info(filp,(unsigned short)((int)pcifunc),blkaddr);
    #line 1616 
    cfg = rvu_read64(rvu,0ULL,(unsigned long long)((pf << 16) | 134217984));
    #line 1617 
    numvfs = (int)(cfg >> 12) & 255;
    #line 1618 
    vf = 0;
    #line 1618 
    while (vf < numvfs) {
      #line 1619 
      pcifunc = (unsigned short)((unsigned int)(pf << 10) | ((unsigned int)vf + 1U));
      #line 1620 
      rvu_print_npc_mcam_info(filp,(unsigned short)((int)pcifunc),blkaddr);
      #line 1618 
      vf ++;
    }
    #line 1612 
    pf ++;
  }
  #line 1624 
  cif_mutex_unlock_lock_of_npc_mcam(& mcam->lock);
  #line 1625 
  return 0;
}

#line 1628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_npc_mcam_info(struct inode *inode, struct file *file)
{
  #line 1628 
  return single_open(file,& rvu_dbg_npc_mcam_info_display,inode->i_private);
}

#line 1628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_npc_mcam_info_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & rvu_dbg_open_npc_mcam_info, .release = & single_release};
#line 1630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_npc_rx_miss_stats_display(struct seq_file *filp, void *unused)
{
  #line 1634 
  struct npc_mcam *mcam;
  #line 1635 
  int blkaddr;
  #line 1633 
  struct rvu *rvu = (struct rvu *)filp->private;
  #line 1637 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 1638 
  if (blkaddr < 0) 
                   #line 1639 
                   return -19;
  #line 1641 
  mcam = & (rvu->hw)->mcam;
  #line 1643 
  seq_puts(filp,(char *)"\nNPC MCAM RX miss action stats\n");
  #line 1644 
  ;
  #line 1644 
  ;
  #line 1644 
  seq_printf(filp,(char *)"\t\tStat %d: \t%lld\n",(int)mcam->rx_miss_act_cntr,rvu_read64(rvu,(unsigned long long)blkaddr,
                 (unsigned long long)(((int)mcam->rx_miss_act_cntr << 8) | 25690120)));
  #line 1648 
  return 0;
}

#line 1651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static int rvu_dbg_open_npc_rx_miss_act(struct inode *inode, struct file *file)
{
  #line 1651 
  return single_open(file,& rvu_dbg_npc_rx_miss_stats_display,inode->i_private);
}

#line 1651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static struct file_operations rvu_dbg_npc_rx_miss_act_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & rvu_dbg_open_npc_rx_miss_act, .release = & single_release};
#line 1653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
static void rvu_dbg_npc_init(struct rvu *rvu)
{
  #line 1656 
  struct dentry *pfile;
  #line 1655 
  struct device *dev = & (rvu->pdev)->dev;
  #line 1658 
  rvu->rvu_dbg.npc = cif_debugfs_create_dir((char *)"npc",rvu->rvu_dbg.root);
  #line 1659 
  if (rvu->rvu_dbg.npc == (struct dentry *)0) 
                                              #line 1660 
                                              return;
  #line 1662 
  pfile = cif_debugfs_create_file((char *)"mcam_info",(unsigned short)292,rvu->rvu_dbg.npc,(void *)rvu,& rvu_dbg_npc_mcam_info_fops);
  #line 1664 
  if (pfile == (struct dentry *)0) 
                                   #line 1665 
                                   goto create_failed;
  #line 1667 
  pfile = cif_debugfs_create_file((char *)"rx_miss_act_stats",(unsigned short)292,rvu->rvu_dbg.npc,(void *)rvu,& rvu_dbg_npc_rx_miss_act_fops);
  #line 1669 
  if (pfile == (struct dentry *)0) 
                                   #line 1670 
                                   goto create_failed;
  #line 1672 
  return;
  #line 1674 
  create_failed: 
                 #line 1674 
  ;
  #line 1675 
  _dev_err(dev,(char *)"Failed to create debugfs dir/file for NPC\n");
  #line 1676 
  debugfs_remove_recursive(rvu->rvu_dbg.npc);
  #line 1677 
  return;
}

#line 1679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
void rvu_dbg_init(struct rvu *rvu)
{
  #line 1682 
  struct dentry *pfile;
  #line 1681 
  struct device *dev = & (rvu->pdev)->dev;
  #line 1684 
  rvu->rvu_dbg.root = cif_debugfs_create_dir((char *)"octeontx2",(struct dentry *)0);
  #line 1685 
  if (rvu->rvu_dbg.root == (struct dentry *)0) {
    #line 1686 
    _dev_err(rvu->dev,(char *)"%s failed\n",(char *)"rvu_dbg_init");
    #line 1687 
    return;
  }
  #line 1689 
  pfile = cif_debugfs_create_file((char *)"rsrc_alloc",(unsigned short)292,rvu->rvu_dbg.root,(void *)rvu,& rvu_dbg_rsrc_status_fops);
  #line 1691 
  if (pfile == (struct dentry *)0) 
                                   #line 1692 
                                   goto create_failed;
  #line 1694 
  rvu_dbg_npa_init(rvu);
  #line 1695 
  rvu_dbg_nix_init(rvu);
  #line 1696 
  rvu_dbg_cgx_init(rvu);
  #line 1697 
  rvu_dbg_npc_init(rvu);
  #line 1699 
  return;
  #line 1701 
  create_failed: 
                 #line 1701 
  ;
  #line 1702 
  _dev_err(dev,(char *)"Failed to create debugfs dir\n");
  #line 1703 
  debugfs_remove_recursive(rvu->rvu_dbg.root);
  #line 1704 
  return;
}

#line 1706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_debugfs.c"
void rvu_dbg_exit(struct rvu *rvu)
{
  #line 1708 
  debugfs_remove_recursive(rvu->rvu_dbg.root);
  #line 1709 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_cgx_stat_fops = & rvu_dbg_cgx_stat_fops;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_nix_cq_ctx_fops = & rvu_dbg_nix_cq_ctx_fops;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_nix_ndc_rx_cache_fops = & rvu_dbg_nix_ndc_rx_cache_fops;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_nix_ndc_rx_hits_miss_fops = & rvu_dbg_nix_ndc_rx_hits_miss_fops;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_nix_ndc_tx_cache_fops = & rvu_dbg_nix_ndc_tx_cache_fops;
#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_nix_ndc_tx_hits_miss_fops = & rvu_dbg_nix_ndc_tx_hits_miss_fops;
#line 99  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_nix_qsize_fops = & rvu_dbg_nix_qsize_fops;
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_nix_rq_ctx_fops = & rvu_dbg_nix_rq_ctx_fops;
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_nix_sq_ctx_fops = & rvu_dbg_nix_sq_ctx_fops;
#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_npa_aura_ctx_fops = & rvu_dbg_npa_aura_ctx_fops;
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_npa_ndc_cache_fops = & rvu_dbg_npa_ndc_cache_fops;
#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_npa_ndc_hits_miss_fops = & rvu_dbg_npa_ndc_hits_miss_fops;
#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_npa_pool_ctx_fops = & rvu_dbg_npa_pool_ctx_fops;
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_npa_qsize_fops = & rvu_dbg_npa_qsize_fops;
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_npc_mcam_info_fops = & rvu_dbg_npc_mcam_info_fops;
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_npc_rx_miss_act_fops = & rvu_dbg_npc_rx_miss_act_fops;
#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
struct file_operations *emg_alias_rvu_dbg_rsrc_status_fops = & rvu_dbg_rsrc_status_fops;
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int (*emg_alias_simple_open)(struct inode *, struct file *) = & simple_open;
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int (*emg_alias_single_release)(struct inode *, struct file *) = & single_release;
#line 115 
#line 115 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 116 
#line 116 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
long emg_wrapper_rvu_dbg_nix_cq_ctx_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 125 
  return rvu_dbg_nix_cq_ctx_write(arg0,arg1,arg2,arg3);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
long emg_wrapper_rvu_dbg_nix_qsize_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 130 
  return rvu_dbg_nix_qsize_write(arg0,arg1,arg2,arg3);
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
long emg_wrapper_rvu_dbg_nix_rq_ctx_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 135 
  return rvu_dbg_nix_rq_ctx_write(arg0,arg1,arg2,arg3);
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
long emg_wrapper_rvu_dbg_nix_sq_ctx_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 140 
  return rvu_dbg_nix_sq_ctx_write(arg0,arg1,arg2,arg3);
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
long emg_wrapper_rvu_dbg_npa_aura_ctx_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 145 
  return rvu_dbg_npa_aura_ctx_write(arg0,arg1,arg2,arg3);
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
long emg_wrapper_rvu_dbg_npa_pool_ctx_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 150 
  return rvu_dbg_npa_pool_ctx_write(arg0,arg1,arg2,arg3);
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
long emg_wrapper_rvu_dbg_npa_qsize_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 155 
  return rvu_dbg_npa_qsize_write(arg0,arg1,arg2,arg3);
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_cgx_stat(struct inode *arg0, struct file *arg1)
{
  #line 160 
  return rvu_dbg_open_cgx_stat(arg0,arg1);
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_nix_cq_ctx(struct inode *arg0, struct file *arg1)
{
  #line 165 
  return rvu_dbg_open_nix_cq_ctx(arg0,arg1);
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_nix_ndc_rx_cache(struct inode *arg0, struct file *arg1)
{
  #line 170 
  return rvu_dbg_open_nix_ndc_rx_cache(arg0,arg1);
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_nix_ndc_rx_hits_miss(struct inode *arg0, struct file *arg1)
{
  #line 175 
  return rvu_dbg_open_nix_ndc_rx_hits_miss(arg0,arg1);
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_nix_ndc_tx_cache(struct inode *arg0, struct file *arg1)
{
  #line 180 
  return rvu_dbg_open_nix_ndc_tx_cache(arg0,arg1);
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_nix_ndc_tx_hits_miss(struct inode *arg0, struct file *arg1)
{
  #line 185 
  return rvu_dbg_open_nix_ndc_tx_hits_miss(arg0,arg1);
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_nix_qsize(struct inode *arg0, struct file *arg1)
{
  #line 190 
  return rvu_dbg_open_nix_qsize(arg0,arg1);
}

#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_nix_rq_ctx(struct inode *arg0, struct file *arg1)
{
  #line 195 
  return rvu_dbg_open_nix_rq_ctx(arg0,arg1);
}

#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_nix_sq_ctx(struct inode *arg0, struct file *arg1)
{
  #line 200 
  return rvu_dbg_open_nix_sq_ctx(arg0,arg1);
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_npa_aura_ctx(struct inode *arg0, struct file *arg1)
{
  #line 205 
  return rvu_dbg_open_npa_aura_ctx(arg0,arg1);
}

#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_npa_ndc_cache(struct inode *arg0, struct file *arg1)
{
  #line 210 
  return rvu_dbg_open_npa_ndc_cache(arg0,arg1);
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_npa_ndc_hits_miss(struct inode *arg0, struct file *arg1)
{
  #line 215 
  return rvu_dbg_open_npa_ndc_hits_miss(arg0,arg1);
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_npa_pool_ctx(struct inode *arg0, struct file *arg1)
{
  #line 220 
  return rvu_dbg_open_npa_pool_ctx(arg0,arg1);
}

#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_npa_qsize(struct inode *arg0, struct file *arg1)
{
  #line 225 
  return rvu_dbg_open_npa_qsize(arg0,arg1);
}

#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_npc_mcam_info(struct inode *arg0, struct file *arg1)
{
  #line 230 
  return rvu_dbg_open_npc_mcam_info(arg0,arg1);
}

#line 234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
int emg_wrapper_rvu_dbg_open_npc_rx_miss_act(struct inode *arg0, struct file *arg1)
{
  #line 235 
  return rvu_dbg_open_npc_rx_miss_act(arg0,arg1);
}

#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
long emg_wrapper_rvu_dbg_rsrc_attach_status(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 240 
  return rvu_dbg_rsrc_attach_status(arg0,arg1,arg2,arg3);
}

#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 283 
  return ldv_strncmp(cs,ct,count);
}

#line 287  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static size_t cif_strlen(char *s)
{
  #line 290 
  return ldv_strlen(s);
}

#line 357  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 360 
  return ldv_is_err(ptr);
}

#line 589  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 592 
  return ldv_kmalloc(size,flags);
}

#line 624  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 627 
  return ldv_kzalloc(size,flags);
}

#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 807 
  return ldv_strcmp(cs,ct);
}

#line 811  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 815 
  return emg_debugfs_create_dir(name,parent);
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 823 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static void cif_mutex_lock_lock_of_npc_mcam(struct mutex *lock)
{
  #line 830 
  ldv_mutex_model_lock(lock,(char *)"lock_of_npc_mcam");
  #line 831 
  return;
}

#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_debugfs.i.aux"
static void cif_mutex_unlock_lock_of_npc_mcam(struct mutex *lock)
{
  #line 837 
  ldv_mutex_model_unlock(lock,(char *)"lock_of_npc_mcam");
  #line 838 
  return;
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_1423 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_1425 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 677  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_spin_lock_cgx_evq_lock_of_rvu(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 686  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_spin_unlock_cgx_evq_lock_of_rvu(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 668  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_spin_unlock_irqrestore_cgx_evq_lock_of_rvu(spinlock_t *lock, unsigned long flags);
#line 26 
#line 695 
static void cif_mutex_lock_cgx_cfg_lock_of_rvu(struct mutex *lock);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 659 
static void cif___ldv_spin_lock_cgx_evq_lock_of_rvu(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 26 
void *ldv_devm_kmalloc(size_t size, gfp_t flags);
#line 27 
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 702  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_mutex_unlock_cgx_cfg_lock_of_rvu(struct mutex *lock);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 454 
#line 454 
void flush_workqueue(struct workqueue_struct *);
#line 496 
#line 298  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 378  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void *cif_devm_kmalloc(struct device *dev, size_t size, gfp_t flags);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 495  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 444  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags);
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
#line 100 
void otx2_mbox_msg_send(struct otx2_mbox *, int);
#line 101 
#line 101 
int otx2_mbox_wait_for_rsp(struct otx2_mbox *, int);
#line 103 
#line 103 
struct mbox_msghdr *otx2_mbox_alloc_msg_rsp(struct otx2_mbox *, int, int, int);
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 367 
int rvu_alloc_rsrc(struct rsrc_bmap *rsrc);
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
__inline static bool is_pf_cgxmapped(struct rvu *rvu, u8 pf)
{
  #line 398 
  return (_Bool)(((unsigned int)pf != 0U && (int)rvu->cgx_mapped_pfs >= (int)pf) != 0);
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
__inline static void rvu_get_cgx_lmac_id(u8 map, u8 *cgx_id, u8 *lmac_id)
{
  #line 403 
  *cgx_id = (unsigned char)((int)map >> 4);
  #line 404 
  *lmac_id = (unsigned char)((unsigned int)map & 15U);
  #line 405 
  return;
}

#line 409 
#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_start_rxtx(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_stop_rxtx(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_stats(struct rvu *rvu, struct msg_req *req, struct cgx_stats_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_mac_addr_set(struct rvu *rvu, struct cgx_mac_addr_set_or_get *req, struct cgx_mac_addr_set_or_get *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_mac_addr_get(struct rvu *rvu, struct cgx_mac_addr_set_or_get *req, struct cgx_mac_addr_set_or_get *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_promisc_enable(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_promisc_disable(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_start_linkevents(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_stop_linkevents(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_get_linkinfo(struct rvu *rvu, struct msg_req *req, struct cgx_link_info_msg *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_intlbk_enable(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_intlbk_disable(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_cgx_init(struct rvu *rvu);
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_cgx_exit(struct rvu *rvu);
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_cgx_config_rxtx(struct rvu *rvu, u16 pcifunc, bool start);
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
void rvu_cgx_enadis_rx_bp(struct rvu *rvu, int pf, bool enable);
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_cgx_start_stop_io(struct rvu *rvu, u16 pcifunc, bool start);
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.h"
#line 109 
int cgx_get_cgxid(void *cgxd);
#line 111 
#line 111 
void *cgx_get_pdata(int cgx_id);
#line 113 
#line 113 
int cgx_lmac_evh_register(struct cgx_event_cb *cb, void *cgxd, int lmac_id);
#line 114 
#line 114 
int cgx_lmac_evh_unregister(void *cgxd, int lmac_id);
#line 117 
#line 117 
int cgx_lmac_rx_tx_enable(void *cgxd, int lmac_id, bool enable);
#line 119 
#line 119 
int cgx_lmac_addr_set(u8 cgx_id, u8 lmac_id, u8 *mac_addr);
#line 120 
#line 120 
u64 cgx_lmac_addr_get(u8 cgx_id, u8 lmac_id);
#line 121 
#line 121 
void cgx_lmac_promisc_config(int cgx_id, int lmac_id, bool enable);
#line 122 
#line 122 
void cgx_lmac_enadis_rx_pause_fwding(void *cgxd, int lmac_id, bool enable);
#line 123 
#line 123 
int cgx_lmac_internal_loopback(void *cgxd, int lmac_id, bool enable);
#line 126 
#line 126 
int cgx_lmac_linkup_start(void *cgxd);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static struct cgx_link_info_msg *otx2_mbox_alloc_msg_cgx_link_event(struct rvu *rvu, int devid)
{
  #line 40 
  struct cgx_link_info_msg *req;
  #line 40 
  req = (struct cgx_link_info_msg *)otx2_mbox_alloc_msg_rsp(& rvu->afpf_wq_info.mbox_up,devid,40,16);
  #line 40 
  if (req == (struct cgx_link_info_msg *)0) 
                                            #line 40 
                                            return (struct cgx_link_info_msg *)0;
  #line 40 
  req->hdr.sig = (unsigned short)57005U;
  #line 40 
  req->hdr.id = (unsigned short)3072U;
  #line 40 
  return req;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static u16 cgxlmac_to_pfmap(struct rvu *rvu, u8 cgx_id, u8 lmac_id)
{
  #line 46 
  return *(rvu->cgxlmac2pf_map + (unsigned long)((int)cgx_id * 4 + (int)lmac_id));
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static int cgxlmac_to_pf(struct rvu *rvu, int cgx_id, int lmac_id)
{
  #line 51 
  unsigned long pfmap;
  #line 53 
  pfmap = (unsigned long)cgxlmac_to_pfmap(rvu,(unsigned char)((int)((unsigned char)cgx_id)),
                       (unsigned char)((int)((unsigned char)lmac_id)));
  #line 56 
  if (pfmap == 0UL) 
                    #line 57 
                    return -19;
  else {
    #line 59 
    return (int)cif_find_first_bit(& pfmap,16UL);
  }
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static u8 cgxlmac_id_to_bmap(u8 cgx_id, u8 lmac_id)
{
  #line 64 
  return (unsigned char)(((int)cgx_id << 4) | ((int)lmac_id & 15));
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
void *rvu_cgx_pdata(u8 cgx_id, struct rvu *rvu)
{
  #line 69 
  if ((int)rvu->cgx_cnt_max <= (int)cgx_id) 
                                            #line 70 
                                            return (void *)0;
  #line 72 
  return *(rvu->cgx_idmap + (unsigned long)cgx_id);
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static int rvu_map_cgx_lmac_pf(struct rvu *rvu)
{
  #line 79 
  int cgx;
  #line 79 
  int lmac_cnt;
  #line 79 
  int lmac;
  #line 81 
  int size;
  #line 81 
  int free_pkind;
  #line 77 
  struct npc_pkind *pkind = & (rvu->hw)->pkind;
  #line 78 
  int cgx_cnt_max = (int)rvu->cgx_cnt_max;
  #line 80 
  int pf = 1;
  #line 83 
  if (cgx_cnt_max == 0) 
                        #line 84 
                        return 0;
  #line 86 
  if (cgx_cnt_max > 15) 
                        #line 87 
                        return -22;
  #line 93 
  size = cgx_cnt_max * 4 + 1;
  #line 94 
  rvu->pf2cgxlmac_map = (u8 *)cif_devm_kmalloc(rvu->dev,(unsigned long)size,3264U);
  #line 95 
  if (rvu->pf2cgxlmac_map == (u8 *)0U) 
                                       #line 96 
                                       return -12;
  #line 99 
  memset((void *)rvu->pf2cgxlmac_map,255,(unsigned long)size);
  #line 102 
  rvu->cgxlmac2pf_map = (u16 *)cif_devm_kzalloc(rvu->dev,(unsigned long)(cgx_cnt_max * 4) * 2UL,3264U);
  #line 105 
  if (rvu->cgxlmac2pf_map == (u16 *)0U) 
                                        #line 106 
                                        return -12;
  #line 108 
  rvu->cgx_mapped_pfs = (unsigned char)0U;
  #line 109 
  cgx = 0;
  #line 109 
  while (cgx < cgx_cnt_max) {
    {
      #line 110 
      if (rvu_cgx_pdata((unsigned char)((int)((unsigned char)cgx)),rvu) == (void *)0) 
        #line 111 
        goto __Cont;
      #line 112 
      lmac_cnt = cgx_get_lmac_cnt(rvu_cgx_pdata((unsigned char)((int)((unsigned char)cgx)),rvu));
      #line 113 
      lmac = 0;
      #line 113 
      while (lmac < lmac_cnt) {
        #line 114 
        *(rvu->pf2cgxlmac_map + (unsigned long)pf) = cgxlmac_id_to_bmap((unsigned char)((int)((unsigned char)cgx)),(unsigned char)((int)((unsigned char)lmac)));
        #line 115 
        *(rvu->cgxlmac2pf_map + (unsigned long)(cgx * 4 + lmac)) = (unsigned short)(1 << pf);
        #line 116 
        free_pkind = rvu_alloc_rsrc(& pkind->rsrc);
        #line 117 
        *(pkind->pfchan_map + (unsigned long)free_pkind) = (unsigned int)(pf << 16) & 4128768U;
        #line 118 
        rvu->cgx_mapped_pfs = (u8)((int)rvu->cgx_mapped_pfs + 1);
        #line 113 
        lmac ++;
        #line 113 
        pf ++;
      }
    }
    #line 109 
    __Cont: 
            #line 109 
    cgx ++;
  }
  #line 121 
  return 0;
}

#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static int rvu_cgx_send_link_info(int cgx_id, int lmac_id, struct rvu *rvu)
{
  #line 126 
  struct cgx_evq_entry *qentry;
  #line 127 
  unsigned long flags;
  #line 128 
  int err;
  #line 130 
  qentry = (struct cgx_evq_entry *)kmalloc_0(48UL,3264U);
  #line 131 
  if (qentry == (struct cgx_evq_entry *)0) 
                                           #line 132 
                                           return -12;
  #line 135 
  cif___ldv_spin_lock_cgx_evq_lock_of_rvu(& rvu->cgx_evq_lock);
  #line 136 
  ;
  #line 136 
  ;
  #line 136 
  err = cgx_get_link_info(rvu_cgx_pdata((unsigned char)((int)((unsigned char)cgx_id)),rvu),lmac_id,& qentry->link_event.link_uinfo);
  #line 138 
  qentry->link_event.cgx_id = (unsigned char)cgx_id;
  #line 139 
  qentry->link_event.lmac_id = (unsigned char)lmac_id;
  #line 140 
  if (err != 0) 
                #line 141 
                goto skip_add;
  #line 142 
  list_add_tail(& qentry->evq_node,& rvu->cgx_evq_head);
  #line 143 
  skip_add: 
            #line 143 
  ;
  #line 144 
  cif_spin_unlock_irqrestore_cgx_evq_lock_of_rvu(& rvu->cgx_evq_lock,flags);
  #line 147 
  cif_queue_work(rvu->cgx_evh_wq,& rvu->cgx_evh_work);
  #line 149 
  return 0;
}

#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static int cgx_lmac_postevent(struct cgx_link_event *event, void *data)
{
  #line 155 
  struct cgx_evq_entry *qentry;
  #line 156 
  struct rvu *rvu = (struct rvu *)data;
  #line 159 
  qentry = (struct cgx_evq_entry *)kmalloc_0(48UL,2592U);
  #line 160 
  if (qentry == (struct cgx_evq_entry *)0) 
                                           #line 161 
                                           return -12;
  #line 162 
  qentry->link_event = *event;
  #line 163 
  cif_spin_lock_cgx_evq_lock_of_rvu(& rvu->cgx_evq_lock);
  #line 164 
  list_add_tail(& qentry->evq_node,& rvu->cgx_evq_head);
  #line 165 
  cif_spin_unlock_cgx_evq_lock_of_rvu(& rvu->cgx_evq_lock);
  #line 168 
  cif_queue_work(rvu->cgx_evh_wq,& rvu->cgx_evh_work);
  #line 170 
  return 0;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static void cgx_notify_pfs(struct cgx_link_event *event, struct rvu *rvu)
{
  #line 175 
  struct cgx_link_user_info *linfo;
  #line 176 
  struct cgx_link_info_msg *msg;
  #line 177 
  unsigned long pfmap;
  #line 178 
  int err;
  #line 178 
  int pfid;
  #line 180 
  linfo = & event->link_uinfo;
  #line 181 
  pfmap = (unsigned long)cgxlmac_to_pfmap(rvu,(unsigned char)((int)event->cgx_id),
                       (unsigned char)((int)event->lmac_id));
  #line 183 
  while (1) {
    {
      #line 184 
      pfid = (int)cif_find_first_bit(& pfmap,16UL);
      #line 185 
      cif_clear_bit((long)pfid,& pfmap);
      #line 188 
      if (! test_bit((long)pfid,& rvu->pf_notify_bmap)) {
        #line 189 
        char *tmp_1;
        #line 189 
        if ((unsigned int)linfo->link_up != 0U) 
                                                #line 189 
                                                tmp_1 = (char *)"UP"; else 
                                                                    #line 189 
                                                                    tmp_1 = (char *)"DOWN";
        #line 189 
        ;
        #line 189 
        ;
        #line 189 
        ;
        #line 189 
        _dev_info(rvu->dev,(char *)"cgx %d: lmac %d Link status %s\n",(int)event->cgx_id,(int)event->lmac_id,tmp_1);
        #line 192 
        goto __Cont;
      }
      #line 196 
      msg = otx2_mbox_alloc_msg_cgx_link_event(rvu,pfid);
      #line 197 
      if (msg == (struct cgx_link_info_msg *)0) 
                                                #line 198 
                                                goto __Cont;
      #line 199 
      msg->link_info = *linfo;
      #line 200 
      otx2_mbox_msg_send(& rvu->afpf_wq_info.mbox_up,pfid);
      #line 201 
      err = otx2_mbox_wait_for_rsp(& rvu->afpf_wq_info.mbox_up,pfid);
      #line 202 
      if (err != 0) 
                    #line 203 
                    _dev_warn(rvu->dev,(char *)"notification to pf %d failed\n",pfid);
    }
    #line 183 
    __Cont: 
            #line 204 
    ;
    #line 204 
    if (! (pfmap != 0UL)) 
                          #line 183 
                          break;
  }
  #line 206 
  return;
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static void cgx_evhandler_task(struct work_struct *work)
{
  #line 210 
  void *__mptr;
  #line 211 
  struct cgx_evq_entry *qentry;
  #line 212 
  struct cgx_link_event *event;
  #line 213 
  unsigned long flags;
  #line 210 
  __mptr = (void *)work;
  #line 210 
  struct rvu *rvu = ((struct rvu *)(__mptr + 18446744073709550808U));
  #line 215 
  while (1) {
    #line 218 
    void *__mptr_0;
    #line 218 
    struct cgx_evq_entry *tmp_2;
    #line 217 
    cif___ldv_spin_lock_cgx_evq_lock_of_rvu(& rvu->cgx_evq_lock);
    {
      #line 219 
      union __anonunion___u_2117 __u;
      #line 218 
      struct list_head *head__ = & rvu->cgx_evq_head;
      #line 218 
      __read_once_size((void *)(& head__->next),(void *)(& __u.__c),8);
      #line 218 
      struct list_head *pos__ = (__u.__val);
      #line 218 
      if (pos__ != head__) {
        #line 218 
        __mptr_0 = (void *)pos__;
        #line 218 
        tmp_2 = ((struct cgx_evq_entry *)__mptr_0);
      }
      else 
           #line 218 
           tmp_2 = (struct cgx_evq_entry *)0;
      }
    #line 218 
    qentry = tmp_2;
    #line 221 
    if (qentry != (struct cgx_evq_entry *)0) 
                                             #line 222 
                                             list_del(& qentry->evq_node);
    #line 223 
    cif_spin_unlock_irqrestore_cgx_evq_lock_of_rvu(& rvu->cgx_evq_lock,flags);
    #line 224 
    if (qentry == (struct cgx_evq_entry *)0) 
                                             #line 225 
                                             break;
    #line 227 
    event = & qentry->link_event;
    #line 230 
    cgx_notify_pfs(event,rvu);
    #line 231 
    kfree((void *)qentry);
  }
  #line 233 
  return;
}

#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static int cgx_lmac_event_handler_init(struct rvu *rvu)
{
  #line 237 
  struct cgx_event_cb cb;
  #line 238 
  int cgx;
  #line 238 
  int lmac;
  #line 238 
  int err;
  #line 239 
  void *cgxd;
  #line 241 
  spinlock_check(& rvu->cgx_evq_lock);
  {
    #line 241 
    struct lock_class_key __key;
    #line 241 
    __raw_spin_lock_init(& rvu->cgx_evq_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&rvu->cgx_evq_lock)->rlock",& __key);
  }
  #line 242 
  INIT_LIST_HEAD(& rvu->cgx_evq_head);
  {
    #line 243 
    struct lock_class_key __key_0;
    #line 243 
    __init_work(& rvu->cgx_evh_work,0);
    #line 243 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 243 
    rvu->cgx_evh_work.data = __constr_expr_34;
    #line 243 
    lockdep_init_map(& rvu->cgx_evh_work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 243 
    INIT_LIST_HEAD(& rvu->cgx_evh_work.entry);
    #line 243 
    rvu->cgx_evh_work.func = & cgx_evhandler_task;
  }
  #line 244 
  rvu->cgx_evh_wq = alloc_workqueue((char *)"rvu_evh_wq",0U,0);
  #line 245 
  if (rvu->cgx_evh_wq == (struct workqueue_struct *)0) {
    #line 246 
    _dev_err(rvu->dev,(char *)"alloc workqueue failed");
    #line 247 
    return -12;
  }
  #line 250 
  cb.notify_link_chg = & cgx_lmac_postevent;
  #line 251 
  cb.data = (void *)rvu;
  #line 253 
  cgx = 0;
  #line 253 
  while ((int)rvu->cgx_cnt_max >= cgx) {
    #line 254 
    cgxd = rvu_cgx_pdata((unsigned char)((int)((unsigned char)cgx)),rvu);
    #line 255 
    if (cgxd == (void *)0) 
                           #line 256 
                           goto __Cont;
    #line 257 
    lmac = 0;
    #line 257 
    while (1) {
      #line 257 
      ;
      #line 257 
      if (! (cgx_get_lmac_cnt(cgxd) > lmac)) 
                                             #line 257 
                                             break;
      #line 258 
      err = cgx_lmac_evh_register(& cb,cgxd,lmac);
      #line 259 
      if (err != 0) 
                    #line 260 
                    _dev_err(rvu->dev,(char *)"%d:%d handler register failed\n",cgx,lmac);
      #line 257 
      lmac ++;
    }
    #line 253 
    __Cont: 
            #line 253 
    cgx ++;
  }
  #line 266 
  return 0;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static void rvu_cgx_wq_destroy(struct rvu *rvu)
{
  #line 271 
  if (rvu->cgx_evh_wq != (struct workqueue_struct *)0) {
    #line 272 
    flush_workqueue(rvu->cgx_evh_wq);
    #line 273 
    destroy_workqueue(rvu->cgx_evh_wq);
    #line 274 
    rvu->cgx_evh_wq = (struct workqueue_struct *)0;
  }
  #line 276 
  return;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_cgx_init(struct rvu *rvu)
{
  #line 280 
  int cgx;
  #line 280 
  int err;
  #line 281 
  void *cgxd;
  #line 286 
  rvu->cgx_cnt_max = (unsigned char)cgx_get_cgxcnt_max();
  #line 287 
  if ((unsigned int)rvu->cgx_cnt_max == 0U) {
    #line 288 
    _dev_info(rvu->dev,(char *)"No CGX devices found!\n");
    #line 289 
    return -19;
  }
  #line 292 
  rvu->cgx_idmap = (void **)cif_devm_kzalloc(rvu->dev,(unsigned long)rvu->cgx_cnt_max * 8UL,3264U);
  #line 294 
  if (rvu->cgx_idmap == (void **)0) 
                                    #line 295 
                                    return -12;
  #line 298 
  cgx = 0;
  #line 298 
  while ((int)rvu->cgx_cnt_max > cgx) {
    #line 299 
    *(rvu->cgx_idmap + (unsigned long)cgx) = cgx_get_pdata(cgx);
    #line 298 
    cgx ++;
  }
  #line 302 
  err = rvu_map_cgx_lmac_pf(rvu);
  #line 303 
  if (err != 0) 
                #line 304 
                return err;
  #line 307 
  err = cgx_lmac_event_handler_init(rvu);
  #line 308 
  if (err != 0) 
                #line 309 
                return err;
  {
    #line 311 
    struct lock_class_key __key;
    #line 311 
    __mutex_init(& rvu->cgx_cfg_lock,(char *)"&rvu->cgx_cfg_lock",& __key);
  }
  #line 313 
  ldv_inline_asm();
  #line 319 
  cgx = 0;
  #line 319 
  while ((int)rvu->cgx_cnt_max >= cgx) {
    #line 320 
    cgxd = rvu_cgx_pdata((unsigned char)((int)((unsigned char)cgx)),rvu);
    #line 321 
    if (cgxd == (void *)0) 
                           #line 322 
                           goto __Cont;
    #line 323 
    err = cgx_lmac_linkup_start(cgxd);
    #line 324 
    if (err != 0) 
                  #line 325 
                  _dev_err(rvu->dev,(char *)"Link up process failed to start on cgx %d\n",cgx);
    #line 319 
    __Cont: 
            #line 319 
    cgx ++;
  }
  #line 330 
  return 0;
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_cgx_exit(struct rvu *rvu)
{
  #line 335 
  int cgx;
  #line 335 
  int lmac;
  #line 336 
  void *cgxd;
  #line 338 
  cgx = 0;
  #line 338 
  while ((int)rvu->cgx_cnt_max >= cgx) {
    #line 339 
    cgxd = rvu_cgx_pdata((unsigned char)((int)((unsigned char)cgx)),rvu);
    #line 340 
    if (cgxd == (void *)0) 
                           #line 341 
                           goto __Cont;
    #line 342 
    lmac = 0;
    #line 342 
    while (1) {
      #line 342 
      ;
      #line 342 
      if (! (cgx_get_lmac_cnt(cgxd) > lmac)) 
                                             #line 342 
                                             break;
      #line 343 
      cgx_lmac_evh_unregister(cgxd,lmac);
      #line 342 
      lmac ++;
    }
    #line 338 
    __Cont: 
            #line 338 
    cgx ++;
  }
  #line 345 
  ldv_inline_asm();
  #line 349 
  rvu_cgx_wq_destroy(rvu);
  #line 350 
  return 0;
}

#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
void rvu_cgx_enadis_rx_bp(struct rvu *rvu, int pf, bool enable)
{
  #line 355 
  u8 cgx_id;
  #line 355 
  u8 lmac_id;
  #line 356 
  void *cgxd;
  #line 358 
  if (! is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf)))) 
    #line 359 
    return;
  #line 361 
  rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx_id,& lmac_id);
  #line 362 
  cgxd = rvu_cgx_pdata((unsigned char)((int)cgx_id),rvu);
  #line 365 
  if ((int)enable != 0) 
                        #line 366 
                        cgx_lmac_enadis_rx_pause_fwding(cgxd,(int)lmac_id,(_Bool)1); else 
                                                                    #line 368 
                                                                    cgx_lmac_enadis_rx_pause_fwding(cgxd,(int)lmac_id,(_Bool)0);
  #line 369 
  return;
}

#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_cgx_config_rxtx(struct rvu *rvu, u16 pcifunc, bool start)
{
  #line 374 
  u8 cgx_id;
  #line 374 
  u8 lmac_id;
  #line 373 
  int pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 379 
  if (((int)pcifunc & 1023) != 0) 
                                  #line 380 
                                  return -19;
  else {
    #line 379 
    if (! is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf)))) 
      #line 380 
      return -19;
  }
  #line 382 
  rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx_id,& lmac_id);
  #line 384 
  ;
  #line 384 
  ;
  #line 384 
  cgx_lmac_rx_tx_enable(rvu_cgx_pdata((unsigned char)((int)cgx_id),rvu),(int)lmac_id,(_Bool)((bool)((int)start) != 0));
  #line 386 
  return 0;
}

#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_start_rxtx(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 392 
  rvu_cgx_config_rxtx(rvu,(unsigned short)((int)req->hdr.pcifunc),(_Bool)1);
  #line 393 
  return 0;
}

#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_stop_rxtx(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 399 
  rvu_cgx_config_rxtx(rvu,(unsigned short)((int)req->hdr.pcifunc),(_Bool)0);
  #line 400 
  return 0;
}

#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_stats(struct rvu *rvu, struct msg_req *req, struct cgx_stats_rsp *rsp)
{
  #line 408 
  u64 tx_stat;
  #line 408 
  u64 rx_stat;
  #line 409 
  u8 cgx_idx;
  #line 409 
  u8 lmac;
  #line 410 
  void *cgxd;
  #line 406 
  int pf = rvu_get_pf((unsigned short)((int)req->hdr.pcifunc));
  #line 407 
  int stat = 0;
  #line 407 
  int err = 0;
  #line 412 
  if (((int)req->hdr.pcifunc & 1023) != 0) 
                                           #line 414 
                                           return -19;
  else {
    #line 413 
    if (! is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf)))) 
      #line 414 
      return -19;
  }
  #line 416 
  rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx_idx,& lmac);
  #line 417 
  cgxd = rvu_cgx_pdata((unsigned char)((int)cgx_idx),rvu);
  #line 420 
  while (stat <= 12) {
    #line 421 
    err = cgx_get_rx_stats(cgxd,(int)lmac,stat,& rx_stat);
    #line 422 
    if (err != 0) 
                  #line 423 
                  return err;
    #line 424 
    rsp->rx_stats[stat] = rx_stat;
    #line 425 
    stat ++;
  }
  #line 429 
  stat = 0;
  #line 430 
  while (stat <= 17) {
    #line 431 
    err = cgx_get_tx_stats(cgxd,(int)lmac,stat,& tx_stat);
    #line 432 
    if (err != 0) 
                  #line 433 
                  return err;
    #line 434 
    rsp->tx_stats[stat] = tx_stat;
    #line 435 
    stat ++;
  }
  #line 437 
  return 0;
}

#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_mac_addr_set(struct rvu *rvu, struct cgx_mac_addr_set_or_get *req, struct cgx_mac_addr_set_or_get *rsp)
{
  #line 445 
  u8 cgx_id;
  #line 445 
  u8 lmac_id;
  #line 444 
  int pf = rvu_get_pf((unsigned short)((int)req->hdr.pcifunc));
  #line 447 
  rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx_id,& lmac_id);
  #line 449 
  cgx_lmac_addr_set((unsigned char)((int)cgx_id),(unsigned char)((int)lmac_id),(u8 *)(& req->mac_addr));
  #line 451 
  return 0;
}

#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_mac_addr_get(struct rvu *rvu, struct cgx_mac_addr_set_or_get *req, struct cgx_mac_addr_set_or_get *rsp)
{
  #line 459 
  u8 cgx_id;
  #line 459 
  u8 lmac_id;
  #line 460 
  int i;
  #line 461 
  u64 cfg;
  #line 458 
  int pf = rvu_get_pf((unsigned short)((int)req->hdr.pcifunc));
  #line 460 
  int rc = 0;
  #line 463 
  rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx_id,& lmac_id);
  #line 465 
  rsp->hdr.rc = rc;
  #line 466 
  cfg = cgx_lmac_addr_get((unsigned char)((int)cgx_id),(unsigned char)((int)lmac_id));
  #line 468 
  i = 0;
  #line 468 
  while (i <= 5) {
    #line 469 
    rsp->mac_addr[i] = (unsigned char)(cfg >> (5 - i) * 8);
    #line 468 
    i ++;
  }
  #line 470 
  return 0;
}

#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_promisc_enable(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 478 
  u8 cgx_id;
  #line 478 
  u8 lmac_id;
  #line 476 
  u16 pcifunc = req->hdr.pcifunc;
  #line 477 
  int pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 483 
  if (((int)req->hdr.pcifunc & 1023) != 0) 
                                           #line 485 
                                           return -19;
  else {
    #line 484 
    if (! is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf)))) 
      #line 485 
      return -19;
  }
  #line 487 
  rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx_id,& lmac_id);
  #line 489 
  cgx_lmac_promisc_config((int)cgx_id,(int)lmac_id,(_Bool)1);
  #line 490 
  return 0;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_promisc_disable(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 498 
  u8 cgx_id;
  #line 498 
  u8 lmac_id;
  #line 496 
  u16 pcifunc = req->hdr.pcifunc;
  #line 497 
  int pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 503 
  if (((int)req->hdr.pcifunc & 1023) != 0) 
                                           #line 505 
                                           return -19;
  else {
    #line 504 
    if (! is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf)))) 
      #line 505 
      return -19;
  }
  #line 507 
  rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx_id,& lmac_id);
  #line 509 
  cgx_lmac_promisc_config((int)cgx_id,(int)lmac_id,(_Bool)0);
  #line 510 
  return 0;
}

#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static int rvu_cgx_config_linkevents(struct rvu *rvu, u16 pcifunc, bool en)
{
  #line 516 
  u8 cgx_id;
  #line 516 
  u8 lmac_id;
  #line 515 
  int pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 521 
  if (((int)pcifunc & 1023) != 0) 
                                  #line 522 
                                  return -19;
  else {
    #line 521 
    if (! is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf)))) 
      #line 522 
      return -19;
  }
  #line 524 
  rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx_id,& lmac_id);
  #line 526 
  if ((int)en != 0) {
    #line 527 
    cif_set_bit((long)pf,& rvu->pf_notify_bmap);
    #line 529 
    rvu_cgx_send_link_info((int)cgx_id,(int)lmac_id,rvu);
  }
  else 
       #line 531 
       cif_clear_bit((long)pf,& rvu->pf_notify_bmap);
  #line 534 
  return 0;
}

#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_start_linkevents(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 540 
  rvu_cgx_config_linkevents(rvu,(unsigned short)((int)req->hdr.pcifunc),(_Bool)1);
  #line 541 
  return 0;
}

#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_stop_linkevents(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 547 
  rvu_cgx_config_linkevents(rvu,(unsigned short)((int)req->hdr.pcifunc),(_Bool)0);
  #line 548 
  return 0;
}

#line 551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_get_linkinfo(struct rvu *rvu, struct msg_req *req, struct cgx_link_info_msg *rsp)
{
  #line 554 
  u8 cgx_id;
  #line 554 
  u8 lmac_id;
  #line 555 
  int pf;
  #line 555 
  int err;
  #line 557 
  pf = rvu_get_pf((unsigned short)((int)req->hdr.pcifunc));
  #line 559 
  if (! is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf)))) 
    #line 560 
    return -19;
  #line 562 
  rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx_id,& lmac_id);
  #line 564 
  ;
  #line 564 
  ;
  #line 564 
  err = cgx_get_link_info(rvu_cgx_pdata((unsigned char)((int)cgx_id),rvu),(int)lmac_id,& rsp->link_info);
  #line 566 
  return err;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
static int rvu_cgx_config_intlbk(struct rvu *rvu, u16 pcifunc, bool en)
{
  #line 572 
  u8 cgx_id;
  #line 572 
  u8 lmac_id;
  #line 571 
  int pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 577 
  if (((int)pcifunc & 1023) != 0) 
                                  #line 578 
                                  return -19;
  else {
    #line 577 
    if (! is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf)))) 
      #line 578 
      return -19;
  }
  #line 580 
  rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx_id,& lmac_id);
  #line 582 
  ;
  #line 582 
  ;
  #line 582 
  return cgx_lmac_internal_loopback(rvu_cgx_pdata((unsigned char)((int)cgx_id),rvu),
                                   (int)lmac_id,
                                   (_Bool)((bool)((int)en) != 0));
}

#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_intlbk_enable(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 589 
  rvu_cgx_config_intlbk(rvu,(unsigned short)((int)req->hdr.pcifunc),(_Bool)1);
  #line 590 
  return 0;
}

#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_mbox_handler_cgx_intlbk_disable(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 596 
  rvu_cgx_config_intlbk(rvu,(unsigned short)((int)req->hdr.pcifunc),(_Bool)0);
  #line 597 
  return 0;
}

#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_cgx_nix_cuml_stats(struct rvu *rvu, void *cgxd, int lmac_id, int index, int rxtxflag, u64 *stat)
{
  #line 606 
  struct rvu_block *block;
  #line 607 
  int blkaddr;
  #line 608 
  u16 pcifunc;
  #line 609 
  int pf;
  #line 609 
  int lf;
  #line 611 
  *stat = 0ULL;
  #line 613 
  if (cgxd == (void *)0 || rvu == (struct rvu *)0) 
                                                   #line 614 
                                                   return -22;
  #line 616 
  ;
  #line 616 
  ;
  #line 616 
  pf = cgxlmac_to_pf(rvu,cgx_get_cgxid(cgxd),lmac_id);
  #line 617 
  if (pf < 0) 
              #line 618 
              return pf;
  #line 623 
  pcifunc = (unsigned short)((int)((unsigned short)pf) << 10U);
  #line 624 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 625 
  if (blkaddr < 0) 
                   #line 626 
                   return 0;
  #line 627 
  block = & (rvu->hw)->block[blkaddr];
  #line 629 
  lf = 0;
  #line 629 
  while ((int)block->lf.max > lf) {
    #line 631 
    if ((((int)*(block->fn_map + (unsigned long)lf) ^ (int)pcifunc) & -1024) != 0) 
      #line 633 
      goto __Cont;
    #line 634 
    if (rxtxflag == 0) {
      #line 636 
      *stat += rvu_read64(rvu,(unsigned long long)blkaddr,
                   (unsigned long long)(((lf << 17) | 17664) | (index << 3)));
    }
    else {
      #line 639 
      *stat += rvu_read64(rvu,(unsigned long long)blkaddr,
                   (unsigned long long)(((lf << 17) | 17408) | (index << 3)));
    }
    #line 629 
    __Cont: 
            #line 629 
    lf ++;
  }
  #line 642 
  return 0;
}

#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_cgx.c"
int rvu_cgx_start_stop_io(struct rvu *rvu, u16 pcifunc, bool start)
{
  #line 647 
  struct rvu_pfvf *parent_pf;
  #line 647 
  struct rvu_pfvf *pfvf;
  #line 648 
  int cgx_users;
  #line 648 
  int err = 0;
  #line 650 
  ;
  #line 650 
  if (! is_pf_cgxmapped(rvu,
                        (unsigned char)((int)((unsigned char)rvu_get_pf((unsigned short)((int)pcifunc)))))) 
    #line 651 
    return 0;
  #line 653 
  parent_pf = rvu->pf + (unsigned long)rvu_get_pf((unsigned short)((int)pcifunc));
  #line 654 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 656 
  cif_mutex_lock_cgx_cfg_lock_of_rvu(& rvu->cgx_cfg_lock);
  #line 658 
  if ((int)start != 0 && (int)pfvf->cgx_in_use != 0) 
                                                     #line 659 
                                                     goto exit;
  #line 660 
  if (! start && ! pfvf->cgx_in_use) 
                                     #line 661 
                                     goto exit;
  #line 663 
  if ((int)start != 0) {
    #line 664 
    cgx_users = parent_pf->cgx_users;
    #line 665 
    (parent_pf->cgx_users) ++;
  }
  else {
    #line 667 
    (parent_pf->cgx_users) --;
    #line 668 
    cgx_users = parent_pf->cgx_users;
  }
  #line 674 
  if (cgx_users == 0) {
    #line 675 
    err = rvu_cgx_config_rxtx(rvu,(unsigned short)((int)pcifunc & 64512),(_Bool)((bool)((int)start) != 0));
    #line 677 
    if (err != 0) {
      #line 678 
      char *tmp_2;
      #line 678 
      if ((int)start != 0) 
                           #line 678 
                           tmp_2 = (char *)"start"; else 
                                                         #line 678 
                                                         tmp_2 = (char *)"stop";
      #line 678 
      ;
      #line 678 
      _dev_err(rvu->dev,(char *)"Unable to %s CGX\n",tmp_2);
      #line 681 
      if ((int)start != 0) 
                           #line 681 
                           parent_pf->cgx_users += -1; else 
                                                            #line 681 
                                                            (parent_pf->cgx_users) ++;
      #line 683 
      goto exit;
    }
  }
  #line 686 
  pfvf->cgx_in_use = start;
  #line 687 
  exit: 
        #line 687 
  ;
  #line 688 
  cif_mutex_unlock_cgx_cfg_lock_of_rvu(& rvu->cgx_cfg_lock);
  #line 689 
  return err;
}

#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
#line 96 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 117 
  ldv_set_bit(nr,addr);
  #line 118 
  return;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 124 
  ldv_clear_bit(nr,addr);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 131 
  ldv_init_list_head(list);
  #line 132 
  return;
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 152 
  return ldv_find_first_bit(addr,size);
}

#line 298  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 302 
  return emg_queue_work(wq,work);
}

#line 378  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void *cif_devm_kmalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 381 
  return ldv_devm_kmalloc(size,flags);
}

#line 444  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags)
{
  #line 447 
  return ldv_kmalloc(size,flags);
}

#line 495  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 498 
  return ldv_devm_kzalloc(size,flags);
}

#line 659  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif___ldv_spin_lock_cgx_evq_lock_of_rvu(spinlock_t *lock)
{
  #line 662 
  ldv_spin_model_lock((char *)"cgx_evq_lock_of_rvu");
  #line 664 
  __ldv_spin_lock(lock);
  #line 665 
  return;
}

#line 668  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_spin_unlock_irqrestore_cgx_evq_lock_of_rvu(spinlock_t *lock, unsigned long flags)
{
  #line 671 
  ldv_spin_model_unlock((char *)"cgx_evq_lock_of_rvu");
  #line 673 
  spin_unlock_irqrestore(lock,flags);
  #line 674 
  return;
}

#line 677  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_spin_lock_cgx_evq_lock_of_rvu(spinlock_t *lock)
{
  #line 680 
  ldv_spin_model_lock((char *)"cgx_evq_lock_of_rvu");
  #line 682 
  spin_lock(lock);
  #line 683 
  return;
}

#line 686  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_spin_unlock_cgx_evq_lock_of_rvu(spinlock_t *lock)
{
  #line 689 
  ldv_spin_model_unlock((char *)"cgx_evq_lock_of_rvu");
  #line 691 
  spin_unlock(lock);
  #line 692 
  return;
}

#line 695  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_mutex_lock_cgx_cfg_lock_of_rvu(struct mutex *lock)
{
  #line 698 
  ldv_mutex_model_lock(lock,(char *)"cgx_cfg_lock_of_rvu");
  #line 699 
  return;
}

#line 702  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_cgx.i.aux"
static void cif_mutex_unlock_cgx_cfg_lock_of_rvu(struct mutex *lock)
{
  #line 705 
  ldv_mutex_model_unlock(lock,(char *)"cgx_cfg_lock_of_rvu");
  #line 706 
  return;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
__inline static void rep_nop(void)
{
  #line 679 
  ldv_inline_asm();
  #line 680 
  return;
}

#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
__inline static void cpu_relax(void)
{
  #line 684 
  rep_nop();
  #line 685 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 659  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npa.i.aux"
static void cif_spin_lock_lock_of_admin_queue(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 668  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npa.i.aux"
static void cif_spin_unlock_lock_of_admin_queue(spinlock_t *lock);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeq(u64 val, void *addr)
{
  #line 99 
  ldv_inline_asm();
  #line 100 
  return;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 495  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npa.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 952 
void devm_kfree(struct device *, void *);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 458  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npa.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/common.h"
__inline static int qmem_alloc(struct device *dev, struct qmem **q, int qsize, int entry_sz)
{
  #line 54 
  struct qmem *qmem;
  #line 55 
  int aligned_addr;
  #line 57 
  if (qsize == 0) 
                  #line 58 
                  return -22;
  #line 60 
  *q = (struct qmem *)cif_devm_kzalloc_0(dev,32UL,3264U);
  #line 61 
  if (*q == (struct qmem *)0) 
                              #line 62 
                              return -12;
  #line 63 
  qmem = *q;
  #line 65 
  qmem->entry_sz = (unsigned char)entry_sz;
  #line 66 
  qmem->alloc_sz = qsize * entry_sz + 128;
  #line 67 
  qmem->base = dma_alloc_coherent(dev,(unsigned long)qmem->alloc_sz,& qmem->iova,3264U);
  #line 69 
  if (qmem->base == (void *)0) 
                               #line 70 
                               return -12;
  #line 72 
  qmem->qsize = (unsigned int)qsize;
  #line 74 
  aligned_addr = (int)(qmem->iova + (dma_addr_t)127U) & -128;
  #line 75 
  qmem->align = (unsigned char)((int)((unsigned char)aligned_addr) - (int)((unsigned char)qmem->iova));
  #line 76 
  qmem->base += (unsigned long)qmem->align;
  #line 77 
  qmem->iova += (unsigned long long)qmem->align;
  #line 78 
  return 0;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/common.h"
__inline static void qmem_free(struct device *dev, struct qmem *qmem)
{
  #line 83 
  if (qmem == (struct qmem *)0) 
                                #line 84 
                                return;
  #line 86 
  if (qmem->base != (void *)0) 
                               #line 87 
                               dma_free_coherent(dev,(unsigned long)qmem->alloc_sz,qmem->base + - ((int)qmem->align),qmem->iova - (unsigned long long)qmem->align);
  #line 90 
  devm_kfree(dev,(void *)qmem);
  #line 91 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
__inline static void rvu_write64(struct rvu *rvu, u64 block, u64 offset, u64 val)
{
  #line 323 
  writeq(val,rvu->afreg_base + ((block << 28) | offset));
  #line 324 
  return;
}

#line 377 
#line 377 
int rvu_get_lf(struct rvu *rvu, struct rvu_block *block, u16 pcifunc, u16 slot);
#line 378 
#line 378 
int rvu_lf_reset(struct rvu *rvu, struct rvu_block *block, int lf);
#line 391 
#line 391 
int rvu_aq_alloc(struct rvu *rvu, struct admin_queue **ad_queue, int qsize, int inst_size, int res_size);
#line 393 
#line 393 
void rvu_aq_free(struct rvu *rvu, struct admin_queue *aq);
#line 409 
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
int rvu_mbox_handler_npa_lf_alloc(struct rvu *rvu, struct npa_lf_alloc_req *req, struct npa_lf_alloc_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
int rvu_mbox_handler_npa_lf_free(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
int rvu_mbox_handler_npa_aq_enq(struct rvu *rvu, struct npa_aq_enq_req *req, struct npa_aq_enq_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
int rvu_mbox_handler_npa_hwctx_disable(struct rvu *rvu, struct hwctx_disable_req *req, struct msg_rsp *rsp);
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
int rvu_npa_init(struct rvu *rvu);
#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
void rvu_npa_freemem(struct rvu *rvu);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
void rvu_npa_lf_teardown(struct rvu *rvu, u16 pcifunc, int npalf);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
static int npa_aq_enqueue_wait(struct rvu *rvu, struct rvu_block *block, struct npa_aq_inst_s *inst)
{
  #line 22 
  struct npa_aq_res_s *result;
  #line 24 
  u64 reg;
  #line 24 
  u64 head;
  #line 21 
  struct admin_queue *aq = block->aq;
  #line 23 
  int timeout = 1000;
  #line 26 
  result = (struct npa_aq_res_s *)(aq->res)->base;
  #line 29 
  reg = rvu_read64(rvu,(unsigned long long)block->addr,1568ULL);
  #line 30 
  head = (reg >> 4) & 1048575ULL;
  #line 32 
  memcpy((aq->inst)->base + (unsigned long long)(aq->inst)->entry_sz * head,(void *)inst,(unsigned long)(aq->inst)->entry_sz);
  #line 34 
  memset((void *)result,0,16UL);
  #line 35 
  ldv_inline_asm();
  #line 39 
  rvu_write64(rvu,(unsigned long long)block->addr,1584ULL,1ULL);
  #line 40 
  while ((unsigned int)result->compcode == 0U) {
    #line 41 
    cpu_relax();
    #line 42 
    __const_udelay(4295UL);
    #line 43 
    timeout --;
    #line 44 
    if (timeout == 0) 
                      #line 45 
                      return -16;
  }
  #line 48 
  if ((unsigned int)result->compcode != 1U) 
                                            #line 50 
                                            return -16;
  #line 52 
  return 0;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
int rvu_npa_aq_enq_inst(struct rvu *rvu, struct npa_aq_enq_req *req, struct npa_aq_enq_rsp *rsp)
{
  #line 60 
  int blkaddr;
  #line 60 
  int npalf;
  #line 61 
  struct npa_aq_inst_s inst;
  #line 62 
  struct rvu_block *block;
  #line 63 
  struct admin_queue *aq;
  #line 64 
  struct rvu_pfvf *pfvf;
  #line 65 
  void *ctx;
  #line 65 
  void *mask;
  #line 66 
  bool ena;
  #line 58 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 59 
  u16 pcifunc = req->hdr.pcifunc;
  #line 60 
  int rc = 0;
  #line 68 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 69 
  if (pfvf->aura_ctx == (struct qmem *)0 || req->aura_id >= (pfvf->aura_ctx)->qsize) 
    #line 70 
    return -303;
  #line 72 
  blkaddr = rvu_get_blkaddr(rvu,4,(unsigned short)((int)pcifunc));
  #line 73 
  if (! pfvf->npalf || blkaddr < 0) 
                                    #line 74 
                                    return -304;
  #line 76 
  block = & hw->block[blkaddr];
  #line 77 
  aq = block->aq;
  #line 78 
  if (aq == (struct admin_queue *)0) {
    #line 79 
    _dev_warn(rvu->dev,(char *)"%s: NPA AQ not initialized\n",(char *)"rvu_npa_aq_enq_inst");
    #line 80 
    return -303;
  }
  #line 83 
  npalf = rvu_get_lf(rvu,block,(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 84 
  if (npalf < 0) 
                 #line 85 
                 return -304;
  #line 87 
  memset((void *)(& inst),0,16UL);
  #line 88 
  inst.cindex = (unsigned long long)req->aura_id;
  #line 89 
  inst.lf = (unsigned long long)npalf;
  #line 90 
  inst.ctype = (unsigned long long)req->ctype;
  #line 91 
  inst.op = (unsigned long long)req->op;
  #line 95 
  inst.res_addr = (aq->res)->iova;
  #line 98 
  memset((aq->res)->base,0,(unsigned long)(aq->res)->entry_sz);
  #line 100 
  ctx = (aq->res)->base + 128U;
  #line 102 
  mask = (aq->res)->base + 256U;
  #line 104 
  switch ((int)req->op) {
    #line 105 
    case 2: 
            #line 105 
    ;
    #line 107 
    if ((unsigned int)req->ctype == 0U) {
      #line 108 
      memcpy(mask,(void *)(& req->__anonCompField_npa_aq_enq_req_163.aura_mask),64UL);
      #line 110 
      memcpy(ctx,(void *)(& req->__anonCompField_npa_aq_enq_req_162.aura),64UL);
    }
    else {
      #line 112 
      memcpy(mask,(void *)(& req->__anonCompField_npa_aq_enq_req_163.pool_mask),128UL);
      #line 114 
      memcpy(ctx,(void *)(& req->__anonCompField_npa_aq_enq_req_162.pool),128UL);
    }
    #line 116 
    break;
    #line 117 
    case 1: 
            #line 117 
    ;
    #line 118 
    if ((unsigned int)req->ctype == 0U) {
      #line 119 
      if (req->__anonCompField_npa_aq_enq_req_162.aura.pool_addr >= (unsigned long long)(pfvf->pool_ctx)->qsize) {
        #line 120 
        rc = -302;
        #line 121 
        break;
      }
      #line 124 
      req->__anonCompField_npa_aq_enq_req_162.aura.pool_addr = (pfvf->pool_ctx)->iova + req->__anonCompField_npa_aq_enq_req_162.aura.pool_addr * (unsigned long long)(pfvf->pool_ctx)->entry_sz;
      #line 126 
      memcpy(ctx,(void *)(& req->__anonCompField_npa_aq_enq_req_162.aura),64UL);
    }
    else 
         #line 128 
         memcpy(ctx,(void *)(& req->__anonCompField_npa_aq_enq_req_162.pool),128UL);
    #line 130 
    break;
    #line 131 
    case 0: 
            #line 131 
    ;
    #line 132 
    case 3: 
            #line 132 
    ;
    #line 133 
    case 4: 
            #line 133 
    ;
    #line 134 
    case 5: 
            #line 134 
    ;
    #line 135 
    break;
    #line 136 
    default: 
             #line 136 
    ;
    #line 137 
    rc = -302;
    #line 138 
    break;
  }
  #line 141 
  if (rc != 0) 
               #line 142 
               return rc;
  #line 144 
  cif_spin_lock_lock_of_admin_queue(& aq->lock);
  #line 147 
  rc = npa_aq_enqueue_wait(rvu,block,& inst);
  #line 148 
  if (rc != 0) {
    #line 149 
    cif_spin_unlock_lock_of_admin_queue(& aq->lock);
    #line 150 
    return rc;
  }
  #line 154 
  if ((unsigned int)req->ctype == 0U) {
    #line 155 
    if ((unsigned int)req->op == 1U && (unsigned int)req->__anonCompField_npa_aq_enq_req_162.aura.ena != 0U) 
      #line 156 
      __set_bit((long)req->aura_id,pfvf->aura_bmap);
    #line 157 
    if ((unsigned int)req->op == 2U) {
      #line 158 
      ena = (_Bool)((((int)req->__anonCompField_npa_aq_enq_req_162.aura.ena & (int)req->__anonCompField_npa_aq_enq_req_163.aura_mask.ena) | ((int)test_bit((long)req->aura_id,pfvf->aura_bmap) & ~ ((int)req->__anonCompField_npa_aq_enq_req_163.aura_mask.ena))) != 0);
      #line 161 
      if ((int)ena != 0) 
                         #line 162 
                         __set_bit((long)req->aura_id,pfvf->aura_bmap); else 
                                                                    #line 164 
                                                                    __set_bit((long)req->aura_id,pfvf->aura_bmap);
    }
  }
  #line 169 
  if ((unsigned int)req->ctype == 1U) {
    #line 170 
    if ((unsigned int)req->op == 1U && (unsigned int)req->__anonCompField_npa_aq_enq_req_162.pool.ena != 0U) 
      #line 171 
      __set_bit((long)req->aura_id,pfvf->pool_bmap);
    #line 172 
    if ((unsigned int)req->op == 2U) {
      #line 173 
      ena = (_Bool)((((int)req->__anonCompField_npa_aq_enq_req_162.pool.ena & (int)req->__anonCompField_npa_aq_enq_req_163.pool_mask.ena) | ((int)test_bit((long)req->aura_id,pfvf->pool_bmap) & ~ ((int)req->__anonCompField_npa_aq_enq_req_163.pool_mask.ena))) != 0);
      #line 176 
      if ((int)ena != 0) 
                         #line 177 
                         __set_bit((long)req->aura_id,pfvf->pool_bmap); else 
                                                                    #line 179 
                                                                    __set_bit((long)req->aura_id,pfvf->pool_bmap);
    }
  }
  #line 182 
  cif_spin_unlock_lock_of_admin_queue(& aq->lock);
  #line 184 
  if (rsp != (struct npa_aq_enq_rsp *)0) 
    #line 186 
    if ((unsigned int)req->op == 3U) 
      #line 187 
      if ((unsigned int)req->ctype == 0U) 
                                          #line 188 
                                          memcpy((void *)(& rsp->__anonCompField_npa_aq_enq_rsp_164.aura),ctx,64UL); else 
                                                                    #line 191 
                                                                    memcpy((void *)(& rsp->__anonCompField_npa_aq_enq_rsp_164.pool),ctx,128UL);
  #line 196 
  return 0;
}

#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
static int npa_lf_hwctx_disable(struct rvu *rvu, struct hwctx_disable_req *req)
{
  #line 202 
  struct npa_aq_enq_req aq_req;
  #line 203 
  unsigned long *bmap;
  #line 204 
  int id;
  #line 205 
  int rc;
  #line 201 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,(int)req->hdr.pcifunc);
  #line 204 
  int cnt = 0;
  #line 205 
  int err = 0;
  #line 207 
  if (pfvf->pool_ctx == (struct qmem *)0 || pfvf->aura_ctx == (struct qmem *)0) 
    #line 208 
    return -303;
  #line 210 
  memset((void *)(& aq_req),0,280UL);
  #line 211 
  aq_req.hdr.pcifunc = req->hdr.pcifunc;
  #line 213 
  if ((unsigned int)req->ctype == 1U) {
    #line 214 
    aq_req.__anonCompField_npa_aq_enq_req_162.pool.ena = (unsigned long long)0U;
    #line 215 
    aq_req.__anonCompField_npa_aq_enq_req_163.pool_mask.ena = (unsigned long long)1U;
    #line 216 
    cnt = (int)(pfvf->pool_ctx)->qsize;
    #line 217 
    bmap = pfvf->pool_bmap;
  }
  else 
    #line 218 
    if ((unsigned int)req->ctype == 0U) {
      #line 219 
      aq_req.__anonCompField_npa_aq_enq_req_162.aura.ena = (unsigned long long)0U;
      #line 220 
      aq_req.__anonCompField_npa_aq_enq_req_163.aura_mask.ena = (unsigned long long)1U;
      #line 221 
      cnt = (int)(pfvf->aura_ctx)->qsize;
      #line 222 
      bmap = pfvf->aura_bmap;
    }
  #line 225 
  aq_req.ctype = req->ctype;
  #line 226 
  aq_req.op = (unsigned char)2U;
  #line 228 
  id = 0;
  #line 228 
  while (id < cnt) {
    {
      #line 229 
      if (! test_bit((long)id,bmap)) 
                                     #line 230 
                                     goto __Cont;
      #line 231 
      aq_req.aura_id = (unsigned int)id;
      #line 232 
      rc = rvu_npa_aq_enq_inst(rvu,& aq_req,(struct npa_aq_enq_rsp *)0);
      #line 233 
      if (rc != 0) {
        #line 235 
        char *tmp_1;
        #line 234 
        err = rc;
        #line 235 
        ;
        #line 235 
        if ((unsigned int)req->ctype == 0U) 
                                            #line 235 
                                            tmp_1 = (char *)"Aura"; else 
                                                                    #line 235 
                                                                    tmp_1 = (char *)"Pool";
        #line 235 
        ;
        #line 235 
        _dev_err(rvu->dev,(char *)"Failed to disable %s:%d context\n",tmp_1,id);
      }
    }
    #line 228 
    __Cont: 
            #line 228 
    id ++;
  }
  #line 241 
  return err;
}

#line 245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
static int npa_lf_hwctx_lockdown(struct rvu *rvu, struct npa_aq_enq_req *req)
{
  #line 247 
  struct npa_aq_enq_req lock_ctx_req;
  #line 248 
  int err;
  #line 250 
  if ((unsigned int)req->op != 1U) 
                                   #line 251 
                                   return 0;
  #line 253 
  memset((void *)(& lock_ctx_req),0,280UL);
  #line 254 
  lock_ctx_req.hdr.pcifunc = req->hdr.pcifunc;
  #line 255 
  lock_ctx_req.ctype = req->ctype;
  #line 256 
  lock_ctx_req.op = (unsigned char)4U;
  #line 257 
  lock_ctx_req.aura_id = req->aura_id;
  #line 258 
  err = rvu_npa_aq_enq_inst(rvu,& lock_ctx_req,(struct npa_aq_enq_rsp *)0);
  #line 259 
  if (err != 0) {
    #line 260 
    char *tmp;
    #line 260 
    ;
    #line 260 
    if ((unsigned int)req->ctype == 0U) 
                                        #line 260 
                                        tmp = (char *)"Aura"; else 
                                                                   #line 260 
                                                                   tmp = (char *)"Pool";
    #line 260 
    ;
    #line 260 
    ;
    #line 260 
    _dev_err(rvu->dev,(char *)"PFUNC 0x%x: Failed to lock NPA context %s:%d\n",(int)req->hdr.pcifunc,tmp,req->aura_id);
  }
  #line 265 
  return err;
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
int rvu_mbox_handler_npa_aq_enq(struct rvu *rvu, struct npa_aq_enq_req *req, struct npa_aq_enq_rsp *rsp)
{
  #line 272 
  int err;
  #line 274 
  err = rvu_npa_aq_enq_inst(rvu,req,rsp);
  #line 275 
  if (err == 0) 
                #line 276 
                err = npa_lf_hwctx_lockdown(rvu,req);
  #line 277 
  return err;
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
int rvu_mbox_handler_npa_hwctx_disable(struct rvu *rvu, struct hwctx_disable_req *req, struct msg_rsp *rsp)
{
  #line 293 
  return npa_lf_hwctx_disable(rvu,req);
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
static void npa_ctx_free(struct rvu *rvu, struct rvu_pfvf *pfvf)
{
  #line 298 
  kfree((void *)pfvf->aura_bmap);
  #line 299 
  pfvf->aura_bmap = (unsigned long *)0UL;
  #line 301 
  qmem_free(rvu->dev,pfvf->aura_ctx);
  #line 302 
  pfvf->aura_ctx = (struct qmem *)0;
  #line 304 
  kfree((void *)pfvf->pool_bmap);
  #line 305 
  pfvf->pool_bmap = (unsigned long *)0UL;
  #line 307 
  qmem_free(rvu->dev,pfvf->pool_ctx);
  #line 308 
  pfvf->pool_ctx = (struct qmem *)0;
  #line 310 
  qmem_free(rvu->dev,pfvf->npa_qints_ctx);
  #line 311 
  pfvf->npa_qints_ctx = (struct qmem *)0;
  #line 312 
  return;
}

#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
int rvu_mbox_handler_npa_lf_alloc(struct rvu *rvu, struct npa_lf_alloc_req *req, struct npa_lf_alloc_rsp *rsp)
{
  #line 318 
  int npalf;
  #line 318 
  int qints;
  #line 318 
  int hwctx_size;
  #line 318 
  int err;
  #line 321 
  struct rvu_block *block;
  #line 322 
  struct rvu_pfvf *pfvf;
  #line 323 
  u64 cfg;
  #line 323 
  u64 ctx_cfg;
  #line 324 
  int blkaddr;
  #line 318 
  int rc = 0;
  #line 319 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 320 
  u16 pcifunc = req->hdr.pcifunc;
  #line 326 
  if ((req->aura_sz > 15 || req->aura_sz == 0) || req->nr_pools == 0U) 
    #line 328 
    return -301;
  #line 330 
  if (req->way_mask != 0ULL) 
                             #line 331 
                             req->way_mask &= 65535ULL;
  #line 333 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 334 
  blkaddr = rvu_get_blkaddr(rvu,4,(unsigned short)((int)pcifunc));
  #line 335 
  if (! pfvf->npalf || blkaddr < 0) 
                                    #line 336 
                                    return -304;
  #line 338 
  block = & hw->block[blkaddr];
  #line 339 
  npalf = rvu_get_lf(rvu,block,(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 340 
  if (npalf < 0) 
                 #line 341 
                 return -304;
  #line 344 
  err = rvu_lf_reset(rvu,block,npalf);
  #line 345 
  if (err != 0) {
    #line 346 
    _dev_err(rvu->dev,(char *)"Failed to reset NPALF%d\n",npalf);
    #line 347 
    return -306;
  }
  #line 350 
  ctx_cfg = rvu_read64(rvu,(unsigned long long)blkaddr,24ULL);
  #line 353 
  hwctx_size = (int)(1UL << (ctx_cfg & 15ULL));
  #line 354 
  err = qmem_alloc(rvu->dev,& pfvf->aura_ctx,(int)(1ULL << (req->aura_sz + 6)),hwctx_size);
  #line 356 
  if (err != 0) 
                #line 357 
                goto free_mem;
  #line 359 
  pfvf->aura_bmap = (unsigned long *)kcalloc((unsigned long)(1ULL << (req->aura_sz + 6)),8UL,3264U);
  #line 361 
  if (pfvf->aura_bmap == (unsigned long *)0UL) 
                                               #line 362 
                                               goto free_mem;
  #line 365 
  hwctx_size = (int)(1UL << ((ctx_cfg >> 4) & 15ULL));
  #line 366 
  err = qmem_alloc(rvu->dev,& pfvf->pool_ctx,(int)req->nr_pools,hwctx_size);
  #line 367 
  if (err != 0) 
                #line 368 
                goto free_mem;
  #line 370 
  pfvf->pool_bmap = (unsigned long *)kcalloc((unsigned long)(1ULL << (req->aura_sz + 6)),8UL,3264U);
  #line 372 
  if (pfvf->pool_bmap == (unsigned long *)0UL) 
                                               #line 373 
                                               goto free_mem;
  #line 376 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,16ULL);
  #line 377 
  qints = (int)(cfg >> 28) & 4095;
  #line 380 
  hwctx_size = (int)(1UL << ((ctx_cfg >> 8) & 15ULL));
  #line 381 
  err = qmem_alloc(rvu->dev,& pfvf->npa_qints_ctx,qints,hwctx_size);
  #line 382 
  if (err != 0) 
                #line 383 
                goto free_mem;
  #line 385 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)((npalf << 18) | 16384));
  #line 387 
  cfg &= 18446744056529682432ULL;
  #line 389 
  cfg = (((unsigned long long)(req->aura_sz << 16) | req->way_mask) | cfg) | 17179869184ULL;
  #line 391 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((npalf << 18) | 16384),cfg);
  #line 394 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((npalf << 18) | 16400),(pfvf->aura_ctx)->iova);
  #line 398 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((npalf << 18) | 16640),(req->way_mask << 20) | 68719476736ULL);
  #line 400 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((npalf << 18) | 16656),(pfvf->npa_qints_ctx)->iova);
  #line 403 
  goto exit;
  #line 405 
  free_mem: 
            #line 405 
  ;
  #line 406 
  npa_ctx_free(rvu,pfvf);
  #line 407 
  rc = -12;
  #line 409 
  exit: 
        #line 409 
  ;
  #line 411 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,16ULL);
  #line 412 
  rsp->stack_pg_ptrs = (unsigned int)(cfg >> 8) & 255U;
  #line 413 
  rsp->stack_pg_bytes = (unsigned int)cfg & 255U;
  #line 414 
  rsp->qints = (unsigned short)((unsigned int)((unsigned short)(cfg >> 28)) & 4095U);
  #line 415 
  return rc;
}

#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
int rvu_mbox_handler_npa_lf_free(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 423 
  struct rvu_block *block;
  #line 424 
  struct rvu_pfvf *pfvf;
  #line 425 
  int npalf;
  #line 425 
  int err;
  #line 426 
  int blkaddr;
  #line 421 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 422 
  u16 pcifunc = req->hdr.pcifunc;
  #line 428 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 429 
  blkaddr = rvu_get_blkaddr(rvu,4,(unsigned short)((int)pcifunc));
  #line 430 
  if (! pfvf->npalf || blkaddr < 0) 
                                    #line 431 
                                    return -304;
  #line 433 
  block = & hw->block[blkaddr];
  #line 434 
  npalf = rvu_get_lf(rvu,block,(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 435 
  if (npalf < 0) 
                 #line 436 
                 return -304;
  #line 439 
  err = rvu_lf_reset(rvu,block,npalf);
  #line 440 
  if (err != 0) {
    #line 441 
    _dev_err(rvu->dev,(char *)"Failed to reset NPALF%d\n",npalf);
    #line 442 
    return -306;
  }
  #line 445 
  npa_ctx_free(rvu,pfvf);
  #line 447 
  return 0;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
static int npa_aq_init(struct rvu *rvu, struct rvu_block *block)
{
  #line 452 
  u64 cfg;
  #line 453 
  int err;
  #line 456 
  cfg = rvu_read64(rvu,(unsigned long long)block->addr,48ULL);
  #line 461 
  cfg &= 18446744073709551613ULL;
  #line 462 
  rvu_write64(rvu,(unsigned long long)block->addr,48ULL,cfg);
  #line 466 
  cfg = rvu_read64(rvu,(unsigned long long)block->addr,64ULL);
  #line 467 
  cfg &= 18446744073709551554ULL;
  #line 470 
  cfg |= 16ULL;
  #line 472 
  rvu_write64(rvu,(unsigned long long)block->addr,64ULL,cfg);
  #line 478 
  err = rvu_aq_alloc(rvu,& block->aq,16,16,384);
  #line 481 
  if (err != 0) 
                #line 482 
                return err;
  #line 484 
  rvu_write64(rvu,(unsigned long long)block->addr,1536ULL,0ULL);
  #line 485 
  rvu_write64(rvu,(unsigned long long)block->addr,1552ULL,((block->aq)->inst)->iova);
  #line 487 
  return 0;
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
int rvu_npa_init(struct rvu *rvu)
{
  #line 493 
  int blkaddr;
  #line 493 
  int err;
  #line 492 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 495 
  blkaddr = rvu_get_blkaddr(rvu,4,(unsigned short)0);
  #line 496 
  if (blkaddr < 0) 
                   #line 497 
                   return 0;
  #line 500 
  err = npa_aq_init(rvu,& hw->block[blkaddr]);
  #line 501 
  if (err != 0) 
                #line 502 
                return err;
  #line 504 
  return 0;
}

#line 507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
void rvu_npa_freemem(struct rvu *rvu)
{
  #line 510 
  struct rvu_block *block;
  #line 511 
  int blkaddr;
  #line 509 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 513 
  blkaddr = rvu_get_blkaddr(rvu,4,(unsigned short)0);
  #line 514 
  if (blkaddr < 0) 
                   #line 515 
                   return;
  #line 517 
  block = & hw->block[blkaddr];
  #line 518 
  rvu_aq_free(rvu,block->aq);
  #line 519 
  return;
}

#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npa.c"
void rvu_npa_lf_teardown(struct rvu *rvu, u16 pcifunc, int npalf)
{
  #line 524 
  struct hwctx_disable_req ctx_req;
  #line 523 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 527 
  ctx_req.hdr.pcifunc = pcifunc;
  #line 528 
  ctx_req.ctype = (unsigned char)1U;
  #line 529 
  npa_lf_hwctx_disable(rvu,& ctx_req);
  #line 532 
  ctx_req.ctype = (unsigned char)0U;
  #line 533 
  npa_lf_hwctx_disable(rvu,& ctx_req);
  #line 535 
  npa_ctx_free(rvu,pfvf);
  #line 536 
  return;
}

#line 458  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npa.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 461 
  return ldv_kcalloc(n,size,flags);
}

#line 495  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npa.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags)
{
  #line 498 
  return ldv_devm_kzalloc(size,flags);
}

#line 659  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npa.i.aux"
static void cif_spin_lock_lock_of_admin_queue(spinlock_t *lock)
{
  #line 662 
  ldv_spin_model_lock((char *)"lock_of_admin_queue");
  #line 664 
  spin_lock_0(lock);
  #line 665 
  return;
}

#line 668  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npa.i.aux"
static void cif_spin_unlock_lock_of_admin_queue(spinlock_t *lock)
{
  #line 671 
  ldv_spin_model_unlock((char *)"lock_of_admin_queue");
  #line 673 
  spin_unlock_0(lock);
  #line 674 
  return;
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_2835 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add_0(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_2837 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 737  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void cif_spin_lock_event_cb_lock_of_lmac(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 746  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void cif_spin_unlock_event_cb_lock_of_lmac(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 764  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void cif_spin_unlock_irqrestore_event_cb_lock_of_lmac(spinlock_t *lock, unsigned long flags);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
#line 711 
static int cif_mutex_lock_interruptible_cmd_lock_of_lmac(struct mutex *lock);
#line 35 
#line 755 
static void cif___ldv_spin_lock_event_cb_lock_of_lmac(spinlock_t *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 730  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void cif_mutex_unlock_cmd_lock_of_lmac(struct mutex *lock);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 200 
#line 200 
void __wake_up(struct wait_queue_head *, unsigned int, int, void *);
#line 248 
#line 248 
void init_wait_entry(struct wait_queue_entry *, int);
#line 1128 
#line 1128 
long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
#line 1129 
#line 1129 
void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 315  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static bool cif_queue_work_0(struct workqueue_struct *wq, struct work_struct *work);
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 219 
long schedule_timeout(long);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 416  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 704  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void *cif_devm_kzalloc_1(struct device *dev, size_t size, gfp_t flags);
#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 773  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 781  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1447 
#line 1447 
int pci_alloc_irq_vectors_affinity(struct pci_dev *, unsigned int, unsigned int, unsigned int, struct irq_affinity *);
#line 1451 
#line 1451 
void pci_free_irq_vectors(struct pci_dev *);
#line 1452 
#line 1452 
int pci_irq_vector(struct pci_dev *, unsigned int);
#line 1768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_alloc_irq_vectors(struct pci_dev *dev, unsigned int min_vecs, unsigned int max_vecs, unsigned int flags)
{
  #line 1771 
  return pci_alloc_irq_vectors_affinity(dev,min_vecs,max_vecs,flags,
                                     (struct irq_affinity *)0);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1970 
#line 1970 
void *pcim_iomap(struct pci_dev *, int, unsigned long);
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.h"
#line 926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
struct pci_driver cgx_driver;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.h"
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_set_pkind(void *cgxd, u8 lmac_id, int pkind);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.h"
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_lmac_tx_enable(void *cgxd, int lmac_id, bool enable);
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.h"
#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_get_mkex_prfl_info(u64 *addr, u64 *size);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static struct list_head cgx_list = {.next = & cgx_list, .prev = & cgx_list};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static u32 cgx_speed_mbps[12U];
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static char *cgx_lmactype_string[11U];
#line 74 
#line 700 
static int cgx_fwi_link_change(struct cgx *cgx, int lmac_id, bool enable);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static struct pci_device_id cgx_id_table[2U] = {{.vendor = 6013U, .device = 41049U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
struct pci_device_id __mod_pci__cgx_id_table_device_table[2U];
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static void cgx_write(struct cgx *cgx, u64 lmac, u64 offset, u64 val)
{
  #line 86 
  writeq(val,cgx->reg_base + ((lmac << 18) + offset));
  #line 87 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static u64 cgx_read(struct cgx *cgx, u64 lmac, u64 offset)
{
  #line 91 
  return readq(cgx->reg_base + ((lmac << 18) + offset));
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
__inline static struct lmac *lmac_pdata(u8 lmac_id, struct cgx *cgx)
{
  #line 96 
  if (cgx == (struct cgx *)0 || (unsigned int)lmac_id > 3U) 
                                                            #line 97 
                                                            return (struct lmac *)0;
  #line 99 
  return cgx->lmac_idmap[(int)lmac_id];
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_get_cgxcnt_max(void)
{
  #line 107 
  void *__mptr;
  #line 104 
  struct cgx *cgx_dev;
  #line 105 
  int idmax = -19;
  #line 107 
  __mptr = (void *)cgx_list.next;
  #line 107 
  cgx_dev = ((struct cgx *)(__mptr + 18446744073709551472U));
  #line 107 
  while (& cgx_dev->cgx_list != & cgx_list) {
    #line 107 
    void *__mptr_0;
    #line 108 
    if ((int)cgx_dev->cgx_id > idmax) 
                                      #line 109 
                                      idmax = (int)cgx_dev->cgx_id;
    #line 107 
    __mptr_0 = (void *)cgx_dev->cgx_list.next;
    #line 107 
    cgx_dev = ((struct cgx *)(__mptr_0 + 18446744073709551472U));
  }
  #line 111 
  if (idmax < 0) 
                 #line 112 
                 return 0;
  #line 114 
  return idmax + 1;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_get_lmac_cnt(void *cgxd)
{
  #line 120 
  struct cgx *cgx = (struct cgx *)cgxd;
  #line 122 
  if (cgx == (struct cgx *)0) 
                              #line 123 
                              return -19;
  #line 125 
  return (int)cgx->lmac_count;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
void *cgx_get_pdata(int cgx_id)
{
  #line 133 
  void *__mptr;
  #line 131 
  struct cgx *cgx_dev;
  #line 133 
  __mptr = (void *)cgx_list.next;
  #line 133 
  cgx_dev = ((struct cgx *)(__mptr + 18446744073709551472U));
  #line 133 
  while (& cgx_dev->cgx_list != & cgx_list) {
    #line 133 
    void *__mptr_0;
    #line 134 
    if ((int)cgx_dev->cgx_id == cgx_id) 
                                        #line 135 
                                        return (void *)cgx_dev;
    #line 133 
    __mptr_0 = (void *)cgx_dev->cgx_list.next;
    #line 133 
    cgx_dev = ((struct cgx *)(__mptr_0 + 18446744073709551472U));
  }
  #line 137 
  return (void *)0;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_get_cgxid(void *cgxd)
{
  #line 143 
  struct cgx *cgx = (struct cgx *)cgxd;
  #line 145 
  if (cgx == (struct cgx *)0) 
                              #line 146 
                              return -22;
  #line 148 
  return (int)cgx->cgx_id;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_get_link_info(void *cgxd, int lmac_id, struct cgx_link_user_info *linfo)
{
  #line 159 
  struct lmac *lmac = lmac_pdata((unsigned char)((int)((unsigned char)lmac_id)),(struct cgx *)cgxd);
  #line 161 
  if (lmac == (struct lmac *)0) 
                                #line 162 
                                return -19;
  #line 164 
  *linfo = lmac->link_info;
  #line 165 
  return 0;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static u64 mac2u64(u8 *mac_addr)
{
  #line 172 
  int index;
  #line 171 
  u64 mac = 0ULL;
  #line 174 
  index = 5;
  #line 174 
  while (index >= 0) {
    #line 175 
    u8 *tmp;
    #line 175 
    tmp = mac_addr;
    #line 175 
    mac_addr ++;
    #line 175 
    mac = ((unsigned long long)*tmp << index * 8) | mac;
    #line 174 
    index --;
  }
  #line 176 
  return mac;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_lmac_addr_set(u8 cgx_id, u8 lmac_id, u8 *mac_addr)
{
  #line 182 
  u64 cfg;
  #line 181 
  struct cgx *cgx_dev = cgx_get_pdata((int)cgx_id);
  #line 187 
  cfg = mac2u64(mac_addr);
  #line 189 
  cgx_write(cgx_dev,0ULL,(unsigned long long)(((int)lmac_id + 64) * 8),(((unsigned long long)lmac_id << 49) | cfg) | 281474976710656ULL);
  #line 192 
  cfg = cgx_read(cgx_dev,(unsigned long long)lmac_id,504ULL);
  #line 193 
  cfg |= 8ULL;
  #line 194 
  cgx_write(cgx_dev,(unsigned long long)lmac_id,504ULL,cfg);
  #line 196 
  return 0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
u64 cgx_lmac_addr_get(u8 cgx_id, u8 lmac_id)
{
  #line 203 
  u64 cfg;
  #line 202 
  struct cgx *cgx_dev = cgx_get_pdata((int)cgx_id);
  #line 205 
  cfg = cgx_read(cgx_dev,0ULL,(unsigned long long)(((int)lmac_id + 64) * 8));
  #line 206 
  return cfg & 281474976710655ULL;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_set_pkind(void *cgxd, u8 lmac_id, int pkind)
{
  #line 212 
  struct cgx *cgx = (struct cgx *)cgxd;
  #line 214 
  if (cgx == (struct cgx *)0 || (int)cgx->lmac_count <= (int)lmac_id) 
    #line 215 
    return -19;
  #line 217 
  cgx_write(cgx,(unsigned long long)lmac_id,96ULL,(unsigned long long)pkind & 63ULL);
  #line 218 
  return 0;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
__inline static u8 cgx_get_lmac_type(struct cgx *cgx, int lmac_id)
{
  #line 224 
  u64 cfg;
  #line 226 
  cfg = cgx_read(cgx,(unsigned long long)lmac_id,0ULL);
  #line 227 
  return (unsigned char)((unsigned int)((unsigned char)(cfg >> 40)) & 15U);
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_lmac_internal_loopback(void *cgxd, int lmac_id, bool enable)
{
  #line 234 
  u8 lmac_type;
  #line 235 
  u64 cfg;
  #line 233 
  struct cgx *cgx = (struct cgx *)cgxd;
  #line 237 
  if (cgx == (struct cgx *)0 || (int)cgx->lmac_count <= lmac_id) 
                                                                 #line 238 
                                                                 return -19;
  #line 240 
  lmac_type = cgx_get_lmac_type(cgx,lmac_id);
  #line 241 
  if ((unsigned int)lmac_type == 0U || (unsigned int)lmac_type == 6U) {
    #line 242 
    cfg = cgx_read(cgx,(unsigned long long)lmac_id,196608ULL);
    #line 243 
    if ((int)enable != 0) 
                          #line 244 
                          cfg |= 16384ULL; else 
                                                #line 246 
                                                cfg &= 18446744073709535231ULL;
    #line 247 
    cgx_write(cgx,(unsigned long long)lmac_id,196608ULL,cfg);
  }
  else {
    #line 249 
    cfg = cgx_read(cgx,(unsigned long long)lmac_id,65536ULL);
    #line 250 
    if ((int)enable != 0) 
                          #line 251 
                          cfg |= 16384ULL; else 
                                                #line 253 
                                                cfg &= 18446744073709535231ULL;
    #line 254 
    cgx_write(cgx,(unsigned long long)lmac_id,65536ULL,cfg);
  }
  #line 256 
  return 0;
}

#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
void cgx_lmac_promisc_config(int cgx_id, int lmac_id, bool enable)
{
  #line 262 
  struct cgx *cgx = cgx_get_pdata(cgx_id);
  #line 263 
  u64 cfg = 0ULL;
  #line 265 
  if (cgx == (struct cgx *)0) 
                              #line 266 
                              return;
  #line 268 
  if ((int)enable != 0) {
    #line 270 
    cfg = cgx_read(cgx,(unsigned long long)lmac_id,504ULL);
    #line 271 
    cfg &= 18446744073709551605ULL;
    #line 272 
    cfg |= 1ULL;
    #line 273 
    cgx_write(cgx,(unsigned long long)lmac_id,504ULL,cfg);
    #line 275 
    cfg = cgx_read(cgx,0ULL,(unsigned long long)((lmac_id + 64) * 8));
    #line 277 
    cfg &= 18446462598732840959ULL;
    #line 278 
    cgx_write(cgx,0ULL,(unsigned long long)((lmac_id + 64) * 8),cfg);
  }
  else {
    #line 282 
    cfg = cgx_read(cgx,(unsigned long long)lmac_id,504ULL);
    #line 283 
    cfg |= 10ULL;
    #line 284 
    cgx_write(cgx,(unsigned long long)lmac_id,504ULL,cfg);
    #line 285 
    cfg = cgx_read(cgx,0ULL,(unsigned long long)((lmac_id + 64) * 8));
    #line 287 
    cfg |= 281474976710656ULL;
    #line 288 
    cgx_write(cgx,0ULL,(unsigned long long)((lmac_id + 64) * 8),cfg);
  }
  #line 291 
  return;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
void cgx_lmac_enadis_rx_pause_fwding(void *cgxd, int lmac_id, bool enable)
{
  #line 298 
  u64 cfg;
  #line 297 
  struct cgx *cgx = (struct cgx *)cgxd;
  #line 300 
  if (cgx == (struct cgx *)0) 
                              #line 301 
                              return;
  #line 303 
  if ((int)enable != 0) {
    #line 304 
    cfg = cgx_read(cgx,(unsigned long long)lmac_id,229416ULL);
    #line 305 
    cfg |= 8ULL;
    #line 306 
    cgx_write(cgx,(unsigned long long)lmac_id,229416ULL,cfg);
    #line 308 
    cfg = cgx_read(cgx,(unsigned long long)lmac_id,131104ULL);
    #line 309 
    cfg |= 8ULL;
    #line 310 
    cgx_write(cgx,(unsigned long long)lmac_id,131104ULL,cfg);
  }
  else {
    #line 312 
    cfg = cgx_read(cgx,(unsigned long long)lmac_id,229416ULL);
    #line 313 
    cfg &= 18446744073709551607ULL;
    #line 314 
    cgx_write(cgx,(unsigned long long)lmac_id,229416ULL,cfg);
    #line 316 
    cfg = cgx_read(cgx,(unsigned long long)lmac_id,131104ULL);
    #line 317 
    cfg &= 18446744073709551607ULL;
    #line 318 
    cgx_write(cgx,(unsigned long long)lmac_id,131104ULL,cfg);
  }
  #line 320 
  return;
}

#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_get_rx_stats(void *cgxd, int lmac_id, int idx, u64 *rx_stat)
{
  #line 325 
  struct cgx *cgx = (struct cgx *)cgxd;
  #line 327 
  if (cgx == (struct cgx *)0 || (int)cgx->lmac_count <= lmac_id) 
                                                                 #line 328 
                                                                 return -19;
  #line 329 
  *rx_stat = cgx_read(cgx,(unsigned long long)lmac_id,(unsigned long long)((idx + 14) * 8));
  #line 330 
  return 0;
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_get_tx_stats(void *cgxd, int lmac_id, int idx, u64 *tx_stat)
{
  #line 336 
  struct cgx *cgx = (struct cgx *)cgxd;
  #line 338 
  if (cgx == (struct cgx *)0 || (int)cgx->lmac_count <= lmac_id) 
                                                                 #line 339 
                                                                 return -19;
  #line 340 
  *tx_stat = cgx_read(cgx,(unsigned long long)lmac_id,(unsigned long long)((idx + 224) * 8));
  #line 341 
  return 0;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_lmac_rx_tx_enable(void *cgxd, int lmac_id, bool enable)
{
  #line 348 
  u64 cfg;
  #line 347 
  struct cgx *cgx = (struct cgx *)cgxd;
  #line 350 
  if (cgx == (struct cgx *)0 || (int)cgx->lmac_count <= lmac_id) 
                                                                 #line 351 
                                                                 return -19;
  #line 353 
  cfg = cgx_read(cgx,(unsigned long long)lmac_id,0ULL);
  #line 354 
  if ((int)enable != 0) 
                        #line 355 
                        cfg |= 63050394783186944ULL; else 
                                                          #line 357 
                                                          cfg &= 18383693678926364671ULL;
  #line 358 
  cgx_write(cgx,(unsigned long long)lmac_id,0ULL,cfg);
  #line 359 
  return 0;
}

#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_lmac_tx_enable(void *cgxd, int lmac_id, bool enable)
{
  #line 366 
  u64 cfg;
  #line 366 
  u64 last;
  #line 365 
  struct cgx *cgx = (struct cgx *)cgxd;
  #line 368 
  if (cgx == (struct cgx *)0 || (int)cgx->lmac_count <= lmac_id) 
                                                                 #line 369 
                                                                 return -19;
  #line 371 
  cfg = cgx_read(cgx,(unsigned long long)lmac_id,0ULL);
  #line 372 
  last = cfg;
  #line 373 
  if ((int)enable != 0) 
                        #line 374 
                        cfg |= 9007199254740992ULL; else 
                                                         #line 376 
                                                         cfg &= 18437736874454810623ULL;
  #line 378 
  if (cfg != last) 
                   #line 379 
                   cgx_write(cgx,(unsigned long long)lmac_id,0ULL,cfg);
  #line 380 
  return (last & 9007199254740992ULL) != 0ULL;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static int cgx_fwi_cmd_send(u64 req, u64 *resp, struct lmac *lmac)
{
  #line 414 
  long __ret;
  #line 388 
  struct device *dev;
  #line 390 
  u64 cmd;
  #line 387 
  struct cgx *cgx = lmac->cgx;
  #line 389 
  int err = 0;
  #line 393 
  err = cif_mutex_lock_interruptible_cmd_lock_of_lmac(& lmac->cmd_lock);
  #line 394 
  if (err != 0) 
                #line 395 
                return err;
  #line 398 
  cmd = cgx_read(cgx,(unsigned long long)lmac->lmac_id,4184ULL);
  #line 399 
  if ((cmd & 1ULL) != 0ULL) {
    #line 400 
    err = -16;
    #line 401 
    goto unlock;
  }
  #line 405 
  req = (req & 18446744073709551614ULL) | 1ULL;
  #line 408 
  lmac->cmd_pend = (_Bool)1;
  #line 411 
  cgx_write(cgx,(unsigned long long)lmac->lmac_id,4184ULL,req);
  {
    #line 414 
    __ret = (long)msecs_to_jiffies(2200U);
    #line 414 
    __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c",414,0);
    {
      #line 414 
      bool __cond_0;
      #line 414 
      __cond_0 = (_Bool)(! ((int)lmac->cmd_pend != 0));
      #line 414 
      if ((int)__cond_0 != 0 && __ret == 0L) 
                                             #line 414 
                                             __ret = 1L;
      #line 414 
      if ((((int)__cond_0 != 0 || __ret == 0L) != 0) == 0) {
        #line 414 
        long __ret_0;
        {
          #line 414 
          struct wait_queue_entry __wq_entry;
          #line 414 
          __ret_0 = (long)msecs_to_jiffies(2200U);
          #line 414 
          init_wait_entry(& __wq_entry,0);
          #line 414 
          while (1) {
            #line 414 
            bool __cond;
            #line 414 
            long __int = prepare_to_wait_event(& lmac->wq_cmd_cmplt,& __wq_entry,2);
            #line 414 
            __cond = (_Bool)(! ((int)lmac->cmd_pend != 0));
            #line 414 
            if ((int)__cond != 0 && __ret_0 == 0L) 
                                                   #line 414 
                                                   __ret_0 = 1L;
            #line 414 
            if ((((int)__cond != 0 || __ret_0 == 0L) != 0) != 0) 
                                                                 #line 414 
                                                                 break;
            #line 414 
            __ret_0 = schedule_timeout(__ret_0);
          }
          #line 414 
          finish_wait(& lmac->wq_cmd_cmplt,& __wq_entry);
          #line 414 
          __out_0: 
                   #line 414 
          ;
          }
        #line 414 
        __ret = __ret_0;
      }
    }
    }
  #line 414 
  if (__ret == 0L) {
    #line 416 
    dev = & (cgx->pdev)->dev;
    #line 417 
    _dev_err(dev,(char *)"cgx port %d:%d cmd timeout\n",(int)cgx->cgx_id,(int)lmac->lmac_id);
    #line 419 
    err = -5;
    #line 420 
    goto unlock;
  }
  #line 422 
  ldv_inline_asm();
  #line 425 
  *resp = lmac->resp;
  #line 427 
  unlock: 
          #line 427 
  ;
  #line 428 
  cif_mutex_unlock_cmd_lock_of_lmac(& lmac->cmd_lock);
  #line 430 
  return err;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
__inline static int cgx_fwi_cmd_generic(u64 req, u64 *resp, struct cgx *cgx, int lmac_id)
{
  #line 436 
  struct lmac *lmac;
  #line 437 
  int err;
  #line 439 
  lmac = lmac_pdata((unsigned char)((int)((unsigned char)lmac_id)),cgx);
  #line 440 
  if (lmac == (struct lmac *)0) 
                                #line 441 
                                return -19;
  #line 443 
  err = cgx_fwi_cmd_send(req,resp,lmac);
  #line 446 
  if (err == 0) 
    #line 447 
    if (((*resp >> 2) & 1ULL) == 1ULL) 
                                       #line 448 
                                       return -5; else 
                                                       #line 450 
                                                       return 0;
  #line 453 
  return err;
}

#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
__inline static void cgx_link_usertable_init(void)
{
  #line 458 
  cgx_speed_mbps[0] = 0U;
  #line 459 
  cgx_speed_mbps[1] = 10U;
  #line 460 
  cgx_speed_mbps[2] = 100U;
  #line 461 
  cgx_speed_mbps[3] = 1000U;
  #line 462 
  cgx_speed_mbps[4] = 2500U;
  #line 463 
  cgx_speed_mbps[5] = 5000U;
  #line 464 
  cgx_speed_mbps[6] = 10000U;
  #line 465 
  cgx_speed_mbps[7] = 20000U;
  #line 466 
  cgx_speed_mbps[8] = 25000U;
  #line 467 
  cgx_speed_mbps[9] = 40000U;
  #line 468 
  cgx_speed_mbps[10] = 50000U;
  #line 469 
  cgx_speed_mbps[11] = 100000U;
  #line 471 
  cgx_lmactype_string[0] = (char *)"SGMII";
  #line 472 
  cgx_lmactype_string[1] = (char *)"XAUI";
  #line 473 
  cgx_lmactype_string[2] = (char *)"RXAUI";
  #line 474 
  cgx_lmactype_string[3] = (char *)"10G_R";
  #line 475 
  cgx_lmactype_string[4] = (char *)"40G_R";
  #line 476 
  cgx_lmactype_string[6] = (char *)"QSGMII";
  #line 477 
  cgx_lmactype_string[7] = (char *)"25G_R";
  #line 478 
  cgx_lmactype_string[8] = (char *)"50G_R";
  #line 479 
  cgx_lmactype_string[9] = (char *)"100G_R";
  #line 480 
  cgx_lmactype_string[10] = (char *)"USXGMII";
  #line 481 
  return;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
__inline static void link_status_user_format(u64 lstat, struct cgx_link_user_info *linfo, struct cgx *cgx, u8 lmac_id)
{
  #line 487 
  char *lmac_string;
  #line 489 
  ;
  #line 489 
  linfo->link_up = (unsigned long long)((lstat >> 9) & 1ULL);
  #line 490 
  ;
  #line 490 
  linfo->full_duplex = (unsigned long long)((lstat >> 10) & 1ULL);
  #line 491 
  ;
  #line 491 
  linfo->speed = (unsigned long long)cgx_speed_mbps[(lstat >> 11) & 15ULL];
  #line 492 
  linfo->lmac_type_id = (unsigned long long)cgx_get_lmac_type(cgx,(int)lmac_id);
  #line 493 
  lmac_string = cgx_lmactype_string[(int)linfo->lmac_type_id];
  #line 494 
  strncpy((char *)(& linfo->lmac_type),lmac_string,15UL);
  #line 495 
  return;
}

#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
__inline static void cgx_link_change_handler(u64 lstat, struct lmac *lmac)
{
  #line 501 
  struct cgx_link_user_info *linfo;
  #line 503 
  struct cgx_link_event event;
  #line 504 
  struct device *dev;
  #line 505 
  int err_type;
  #line 502 
  struct cgx *cgx = lmac->cgx;
  #line 507 
  dev = & (cgx->pdev)->dev;
  #line 509 
  link_status_user_format(lstat,& event.link_uinfo,cgx,(unsigned char)((int)lmac->lmac_id));
  #line 510 
  ;
  #line 510 
  err_type = (int)((lstat >> 15) & 1023ULL);
  #line 512 
  event.cgx_id = cgx->cgx_id;
  #line 513 
  event.lmac_id = lmac->lmac_id;
  #line 516 
  lmac->link_info = event.link_uinfo;
  #line 517 
  linfo = & lmac->link_info;
  #line 520 
  cif_spin_lock_event_cb_lock_of_lmac(& lmac->event_cb_lock);
  #line 522 
  if (lmac->event_cb.notify_link_chg == (int (*)(struct cgx_link_event *, void *))0) {
    #line 529 
    char *tmp_0;
    {
      #line 523 
      bool branch;
      #line 523 
      struct _ddebug __UNIQUE_ID_ddebug437 = {.modname = (char *)"octeontx2_af", .function = (char *)"cgx_link_change_handler", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c", .format = (char *)"cgx port %d:%d Link change handler null", .lineno = (unsigned int)523U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 523 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug437.key.dd_key_false.key,(_Bool)0);
      #line 523 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 523 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug437,dev,(char *)"cgx port %d:%d Link change handler null",(int)cgx->cgx_id,(int)lmac->lmac_id);
    }
    #line 525 
    if (err_type != 0) 
                       #line 526 
                       _dev_err(dev,(char *)"cgx port %d:%d Link error %d\n",(int)cgx->cgx_id,(int)lmac->lmac_id,err_type);
    #line 529 
    ;
    #line 529 
    if ((unsigned int)linfo->link_up != 0U) 
                                            #line 529 
                                            tmp_0 = (char *)"UP"; else 
                                                                    #line 529 
                                                                    tmp_0 = (char *)"DOWN";
    #line 529 
    ;
    #line 529 
    ;
    #line 529 
    ;
    #line 529 
    _dev_info(dev,(char *)"cgx port %d:%d Link is %s %d Mbps\n",(int)cgx->cgx_id,(int)lmac->lmac_id,tmp_0,(int)linfo->speed);
    #line 532 
    goto err;
  }
  #line 535 
  if ((*(lmac->event_cb.notify_link_chg))(& event,lmac->event_cb.data) != 0) 
    #line 536 
    _dev_err(dev,(char *)"event notification failure\n");
  #line 537 
  err: 
       #line 537 
  ;
  #line 538 
  cif_spin_unlock_event_cb_lock_of_lmac(& lmac->event_cb_lock);
  #line 539 
  return;
}

#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
__inline static bool cgx_cmdresp_is_linkevent(u64 event)
{
  #line 543 
  u8 id;
  #line 545 
  ;
  #line 545 
  id = (unsigned char)((event >> 3) & 63ULL);
  #line 546 
  if ((unsigned int)id + 251U <= 1U) 
                                     #line 548 
                                     return (_Bool)1; else 
                                                           #line 550 
                                                           return (_Bool)0;
}

#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
__inline static bool cgx_event_is_linkevent(u64 event)
{
  #line 555 
  if (((event >> 3) & 63ULL) == 1ULL) 
                                      #line 556 
                                      return (_Bool)1; else 
                                                            #line 558 
                                                            return (_Bool)0;
}

#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
__inline static int cgx_fwi_get_mkex_prfl_sz(u64 *prfl_sz, struct cgx *cgx)
{
  #line 565 
  u64 resp;
  #line 566 
  int err;
  #line 564 
  u64 req = 0ULL;
  #line 568 
  req = (req & 18446744073709551363ULL) | 52ULL;
  #line 569 
  err = cgx_fwi_cmd_generic(req,& resp,cgx,0);
  #line 570 
  if (err == 0) {
    #line 571 
    ;
    #line 571 
    *prfl_sz = resp >> 9;
  }
  #line 573 
  return err;
}

#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
__inline static int cgx_fwi_get_mkex_prfl_addr(u64 *prfl_addr, struct cgx *cgx)
{
  #line 580 
  u64 resp;
  #line 581 
  int err;
  #line 579 
  u64 req = 0ULL;
  #line 583 
  req = (req & 18446744073709551363ULL) | 56ULL;
  #line 584 
  err = cgx_fwi_cmd_generic(req,& resp,cgx,0);
  #line 585 
  if (err == 0) {
    #line 586 
    ;
    #line 586 
    *prfl_addr = resp >> 9;
  }
  #line 588 
  return err;
}

#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_get_mkex_prfl_info(u64 *addr, u64 *size)
{
  #line 599 
  void *__mptr;
  #line 593 
  struct cgx *cgx_dev;
  #line 594 
  int err;
  #line 596 
  if (addr == (u64 *)0ULL || size == (u64 *)0ULL) 
                                                  #line 597 
                                                  return -22;
  #line 599 
  __mptr = (void *)cgx_list.next;
  #line 599 
  cgx_dev = ((struct cgx *)(__mptr + 18446744073709551472U));
  #line 600 
  if (cgx_dev == (struct cgx *)0) 
                                  #line 601 
                                  return -6;
  #line 603 
  err = cgx_fwi_get_mkex_prfl_sz(size,cgx_dev);
  #line 604 
  if (err != 0) 
                #line 605 
                return -5;
  #line 607 
  err = cgx_fwi_get_mkex_prfl_addr(addr,cgx_dev);
  #line 608 
  if (err != 0) 
                #line 609 
                return -5;
  #line 611 
  return 0;
}

#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static irqreturn_t cgx_fwi_event_handler(int irq, void *data)
{
  #line 618 
  struct cgx *cgx;
  #line 619 
  u64 event;
  #line 617 
  struct lmac *lmac = (struct lmac *)data;
  #line 621 
  cgx = lmac->cgx;
  #line 623 
  event = cgx_read(cgx,(unsigned long long)lmac->lmac_id,4176ULL);
  #line 625 
  if ((event & 1ULL) == 0ULL) 
                              #line 626 
                              return IRQ_NONE;
  #line 628 
  switch ((event >> 1) & 1ULL) {
    #line 629 
    case (unsigned long long)1: 
                                #line 629 
    ;
    #line 633 
    lmac->resp = event;
    #line 634 
    ldv_inline_asm();
    #line 640 
    if ((int)cgx_cmdresp_is_linkevent(event) != 0) 
                                                   #line 641 
                                                   cgx_link_change_handler(event,lmac);
    #line 644 
    lmac->cmd_pend = (_Bool)0;
    #line 645 
    __wake_up(& lmac->wq_cmd_cmplt,1U,1,(void *)0);
    #line 646 
    break;
    #line 647 
    case (unsigned long long)0: 
                                #line 647 
    ;
    #line 648 
    if ((int)cgx_event_is_linkevent(event) != 0) 
                                                 #line 649 
                                                 cgx_link_change_handler(event,lmac);
    #line 650 
    break;
  }
  #line 657 
  cgx_write(lmac->cgx,(unsigned long long)lmac->lmac_id,4176ULL,0ULL);
  #line 658 
  cgx_write(lmac->cgx,(unsigned long long)lmac->lmac_id,64ULL,2ULL);
  #line 660 
  return IRQ_HANDLED;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_lmac_evh_register(struct cgx_event_cb *cb, void *cgxd, int lmac_id)
{
  #line 669 
  struct lmac *lmac;
  #line 668 
  struct cgx *cgx = (struct cgx *)cgxd;
  #line 671 
  lmac = lmac_pdata((unsigned char)((int)((unsigned char)lmac_id)),cgx);
  #line 672 
  if (lmac == (struct lmac *)0) 
                                #line 673 
                                return -19;
  #line 675 
  lmac->event_cb = *cb;
  #line 677 
  return 0;
}

#line 681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_lmac_evh_unregister(void *cgxd, int lmac_id)
{
  #line 683 
  struct lmac *lmac;
  #line 684 
  unsigned long flags;
  #line 685 
  struct cgx *cgx = (struct cgx *)cgxd;
  #line 687 
  lmac = lmac_pdata((unsigned char)((int)((unsigned char)lmac_id)),cgx);
  #line 688 
  if (lmac == (struct lmac *)0) 
                                #line 689 
                                return -19;
  #line 691 
  cif___ldv_spin_lock_event_cb_lock_of_lmac(& lmac->event_cb_lock);
  #line 692 
  lmac->event_cb.notify_link_chg = (int (*)(struct cgx_link_event *, void *))0;
  #line 693 
  lmac->event_cb.data = (void *)0;
  #line 694 
  cif_spin_unlock_irqrestore_event_cb_lock_of_lmac(& lmac->event_cb_lock,flags);
  #line 696 
  return 0;
}

#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static int cgx_fwi_link_change(struct cgx *cgx, int lmac_id, bool enable)
{
  #line 703 
  u64 resp;
  #line 702 
  u64 req = 0ULL;
  #line 705 
  if ((int)enable != 0) {
    #line 706 
    req = (req & 18446744073709551363ULL) | 20ULL;
  }
  else {
    #line 708 
    req = (req & 18446744073709551363ULL) | 24ULL;
  }
  #line 710 
  return cgx_fwi_cmd_generic(req,& resp,cgx,lmac_id);
}

#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
__inline static int cgx_fwi_read_version(u64 *resp, struct cgx *cgx)
{
  #line 715 
  u64 req = 0ULL;
  #line 717 
  req = (req & 18446744073709551363ULL) | 4ULL;
  #line 718 
  return cgx_fwi_cmd_generic(req,resp,cgx,0);
}

#line 721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static int cgx_lmac_verify_fwi_version(struct cgx *cgx)
{
  #line 724 
  int major_ver;
  #line 724 
  int minor_ver;
  #line 725 
  u64 resp;
  #line 726 
  int err;
  #line 723 
  struct device *dev = & (cgx->pdev)->dev;
  #line 728 
  if ((unsigned int)cgx->lmac_count == 0U) 
                                           #line 729 
                                           return 0;
  #line 731 
  err = cgx_fwi_read_version(& resp,cgx);
  #line 732 
  if (err != 0) 
                #line 733 
                return err;
  #line 735 
  ;
  #line 735 
  major_ver = (int)((resp >> 9) & 15ULL);
  #line 736 
  ;
  #line 736 
  minor_ver = (int)((resp >> 13) & 15ULL);
  {
    #line 737 
    bool branch;
    #line 737 
    struct _ddebug __UNIQUE_ID_ddebug438 = {.modname = (char *)"octeontx2_af", .function = (char *)"cgx_lmac_verify_fwi_version", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c", .format = (char *)"Firmware command interface version = %d.%d\n", .lineno = (unsigned int)737U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 737 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug438.key.dd_key_false.key,(_Bool)0);
    #line 737 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 737 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug438,dev,(char *)"Firmware command interface version = %d.%d\n",major_ver,minor_ver);
  }
  #line 739 
  if (major_ver != 1 || minor_ver != 0) 
                                        #line 741 
                                        return -5; else 
                                                        #line 743 
                                                        return 0;
}

#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static void cgx_lmac_linkup_work(struct work_struct *work)
{
  #line 748 
  void *__mptr;
  #line 750 
  int i;
  #line 750 
  int err;
  #line 748 
  __mptr = (void *)work;
  #line 748 
  struct cgx *cgx = ((struct cgx *)(__mptr + 18446744073709551560U));
  #line 749 
  struct device *dev = & (cgx->pdev)->dev;
  #line 753 
  i = 0;
  #line 753 
  while ((int)cgx->lmac_count > i) {
    #line 754 
    err = cgx_fwi_link_change(cgx,i,(_Bool)1);
    #line 755 
    if (err != 0) 
                  #line 756 
                  _dev_info(dev,(char *)"cgx port %d:%d Link up command failed\n",(int)cgx->cgx_id,i);
    #line 753 
    i ++;
  }
  #line 758 
  return;
}

#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
int cgx_lmac_linkup_start(void *cgxd)
{
  #line 763 
  struct cgx *cgx = (struct cgx *)cgxd;
  #line 765 
  if (cgx == (struct cgx *)0) 
                              #line 766 
                              return -19;
  #line 768 
  cif_queue_work_0(cgx->cgx_cmd_workq,& cgx->cgx_cmd_work);
  #line 770 
  return 0;
}

#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static int cgx_lmac_init(struct cgx *cgx)
{
  #line 776 
  struct lmac *lmac;
  #line 777 
  int i;
  #line 777 
  int err;
  #line 779 
  cgx->lmac_count = (unsigned char)((unsigned int)((unsigned char)cgx_read(cgx,0ULL,296ULL)) & 7U);
  #line 780 
  if ((unsigned int)cgx->lmac_count > 4U) 
                                          #line 781 
                                          cgx->lmac_count = (unsigned char)4U;
  #line 783 
  i = 0;
  #line 783 
  while ((int)cgx->lmac_count > i) {
    {
      #line 784 
      lmac = (struct lmac *)kcalloc_0(1UL,400UL,3264U);
      #line 785 
      if (lmac == (struct lmac *)0) 
                                    #line 786 
                                    return -12;
      #line 787 
      lmac->name = (char *)kcalloc_0(1UL,16UL,3264U);
      #line 788 
      if (lmac->name == (char *)0) 
                                   #line 789 
                                   return -12;
      #line 790 
      sprintf(lmac->name,(char *)"cgx_fwi_%d_%d",(int)cgx->cgx_id,i);
      #line 791 
      lmac->lmac_id = (unsigned char)i;
      #line 792 
      lmac->cgx = cgx;
      {
        #line 793 
        struct lock_class_key __key;
        #line 793 
        __init_waitqueue_head(& lmac->wq_cmd_cmplt,(char *)"&lmac->wq_cmd_cmplt",& __key);
      }
      {
        #line 794 
        struct lock_class_key __key_0;
        #line 794 
        __mutex_init(& lmac->cmd_lock,(char *)"&lmac->cmd_lock",& __key_0);
      }
      #line 795 
      spinlock_check(& lmac->event_cb_lock);
      {
        #line 795 
        struct lock_class_key __key_1;
        #line 795 
        __raw_spin_lock_init(& lmac->event_cb_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&lmac->event_cb_lock)->rlock",& __key_1);
      }
      #line 796 
      ;
      #line 796 
      ;
      #line 796 
      err = cif_request_irq((unsigned int)pci_irq_vector(cgx->pdev,(unsigned int)(i * 9)),& cgx_fwi_event_handler,0UL,lmac->name,(void *)lmac);
      #line 799 
      if (err != 0) 
                    #line 800 
                    return err;
      #line 803 
      cgx_write(cgx,(unsigned long long)lmac->lmac_id,88ULL,2ULL);
      #line 807 
      cgx->lmac_idmap[i] = lmac;
    }
    #line 783 
    i ++;
  }
  #line 810 
  return cgx_lmac_verify_fwi_version(cgx);
}

#line 813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static int cgx_lmac_exit(struct cgx *cgx)
{
  #line 815 
  struct lmac *lmac;
  #line 816 
  int i;
  #line 818 
  if (cgx->cgx_cmd_workq != (struct workqueue_struct *)0) {
    #line 819 
    flush_workqueue(cgx->cgx_cmd_workq);
    #line 820 
    destroy_workqueue(cgx->cgx_cmd_workq);
    #line 821 
    cgx->cgx_cmd_workq = (struct workqueue_struct *)0;
  }
  #line 825 
  i = 0;
  #line 825 
  while ((int)cgx->lmac_count > i) {
    {
      #line 826 
      lmac = cgx->lmac_idmap[i];
      #line 827 
      if (lmac == (struct lmac *)0) 
                                    #line 828 
                                    goto __Cont;
      #line 829 
      ;
      #line 829 
      cif_free_irq((unsigned int)pci_irq_vector(cgx->pdev,(unsigned int)(i * 9)),(void *)lmac);
      #line 830 
      kfree((void *)lmac->name);
      #line 831 
      kfree((void *)lmac);
    }
    #line 825 
    __Cont: 
            #line 825 
    i ++;
  }
  #line 834 
  return 0;
}

#line 837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static int cgx_probe(struct pci_dev *pdev, struct pci_device_id *id)
{
  #line 840 
  struct cgx *cgx;
  #line 841 
  int err;
  #line 841 
  int nvec;
  #line 839 
  struct device *dev = & pdev->dev;
  #line 843 
  cgx = (struct cgx *)cif_devm_kzalloc_1(dev,160UL,3264U);
  #line 844 
  if (cgx == (struct cgx *)0) 
                              #line 845 
                              return -12;
  #line 846 
  cgx->pdev = pdev;
  #line 848 
  pci_set_drvdata(pdev,(void *)cgx);
  #line 850 
  err = pci_enable_device(pdev);
  #line 851 
  if (err != 0) {
    #line 852 
    _dev_err(dev,(char *)"Failed to enable PCI device\n");
    #line 853 
    pci_set_drvdata(pdev,(void *)0);
    #line 854 
    return err;
  }
  #line 857 
  err = pci_request_regions(pdev,(char *)"octeontx2-cgx");
  #line 858 
  if (err != 0) {
    #line 859 
    _dev_err(dev,(char *)"PCI request regions failed 0x%x\n",err);
    #line 860 
    goto err_disable_device;
  }
  #line 864 
  cgx->reg_base = pcim_iomap(pdev,0,0UL);
  #line 865 
  if (cgx->reg_base == (void *)0) {
    #line 866 
    _dev_err(dev,(char *)"CGX: Cannot map CSR memory space, aborting\n");
    #line 867 
    err = -12;
    #line 868 
    goto err_release_regions;
  }
  #line 871 
  nvec = 37;
  #line 872 
  err = pci_alloc_irq_vectors(pdev,(unsigned int)nvec,(unsigned int)nvec,4U);
  #line 873 
  if (err < 0 || err != nvec) {
    #line 874 
    _dev_err(dev,(char *)"Request for %d msix vectors failed, err %d\n",nvec,err);
    #line 876 
    goto err_release_regions;
  }
  #line 879 
  cgx->cgx_id = (unsigned char)((unsigned int)((unsigned char)(pdev->resource[0].start >> 24)) & 7U);
  {
    #line 883 
    struct lock_class_key __key;
    #line 883 
    __init_work(& cgx->cgx_cmd_work,0);
    #line 883 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 883 
    cgx->cgx_cmd_work.data = __constr_expr_34;
    #line 883 
    lockdep_init_map(& cgx->cgx_cmd_work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 883 
    INIT_LIST_HEAD_0(& cgx->cgx_cmd_work.entry);
    #line 883 
    cgx->cgx_cmd_work.func = & cgx_lmac_linkup_work;
  }
  #line 884 
  cgx->cgx_cmd_workq = alloc_workqueue((char *)"cgx_cmd_workq",0U,0);
  #line 885 
  if (cgx->cgx_cmd_workq == (struct workqueue_struct *)0) {
    #line 886 
    _dev_err(dev,(char *)"alloc workqueue failed for cgx cmd");
    #line 887 
    err = -12;
    #line 888 
    goto err_free_irq_vectors;
  }
  #line 891 
  list_add(& cgx->cgx_list,& cgx_list);
  #line 893 
  cgx_link_usertable_init();
  #line 895 
  err = cgx_lmac_init(cgx);
  #line 896 
  if (err != 0) 
                #line 897 
                goto err_release_lmac;
  #line 899 
  return 0;
  #line 901 
  err_release_lmac: 
                    #line 901 
  ;
  #line 902 
  cgx_lmac_exit(cgx);
  #line 903 
  list_del_0(& cgx->cgx_list);
  #line 904 
  err_free_irq_vectors: 
                        #line 904 
  ;
  #line 905 
  pci_free_irq_vectors(pdev);
  #line 906 
  err_release_regions: 
                       #line 906 
  ;
  #line 907 
  pci_release_regions(pdev);
  #line 908 
  err_disable_device: 
                      #line 908 
  ;
  #line 909 
  pci_disable_device(pdev);
  #line 910 
  pci_set_drvdata(pdev,(void *)0);
  #line 911 
  return err;
}

#line 914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
static void cgx_remove(struct pci_dev *pdev)
{
  #line 916 
  struct cgx *cgx = pci_get_drvdata(pdev);
  #line 918 
  cgx_lmac_exit(cgx);
  #line 919 
  list_del_0(& cgx->cgx_list);
  #line 920 
  pci_free_irq_vectors(pdev);
  #line 921 
  pci_release_regions(pdev);
  #line 922 
  pci_disable_device(pdev);
  #line 923 
  pci_set_drvdata(pdev,(void *)0);
  #line 924 
  return;
}

#line 926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/cgx.c"
struct pci_driver cgx_driver = {.name = (char *)"octeontx2-cgx", .id_table = (struct pci_device_id *)(& cgx_id_table), .probe = & cgx_probe, .remove = & cgx_remove};
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
#line 94 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 97 
#line 97 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
enum irqreturn emg_wrapper_cgx_fwi_event_handler(int arg0, void *arg1)
{
  #line 102 
  return cgx_fwi_event_handler(arg0,arg1);
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
int emg_wrapper_cgx_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 107 
  return cgx_probe(arg0,arg1);
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
void emg_wrapper_cgx_remove(struct pci_dev *arg0)
{
  #line 112 
  cgx_remove(arg0);
  #line 113 
  return;
}

#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 148 
  ldv_init_list_head(list);
  #line 149 
  return;
}

#line 315  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static bool cif_queue_work_0(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 319 
  return emg_queue_work(wq,work);
}

#line 416  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  #line 419 
  return ldv_kcalloc(n,size,flags);
}

#line 704  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void *cif_devm_kzalloc_1(struct device *dev, size_t size, gfp_t flags)
{
  #line 707 
  return ldv_devm_kzalloc(size,flags);
}

#line 711  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static int cif_mutex_lock_interruptible_cmd_lock_of_lmac(struct mutex *lock)
{
  #line 714 
  int nondetermined = ldv_undef_int();
  #line 716 
  if (nondetermined != 0) {
    #line 718 
    ldv_mutex_model_lock(lock,(char *)"cmd_lock_of_lmac");
    #line 720 
    return 0;
  }
  else 
       #line 725 
       return -4;
}

#line 730  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void cif_mutex_unlock_cmd_lock_of_lmac(struct mutex *lock)
{
  #line 733 
  ldv_mutex_model_unlock(lock,(char *)"cmd_lock_of_lmac");
  #line 734 
  return;
}

#line 737  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void cif_spin_lock_event_cb_lock_of_lmac(spinlock_t *lock)
{
  #line 740 
  ldv_spin_model_lock((char *)"event_cb_lock_of_lmac");
  #line 742 
  spin_lock_1(lock);
  #line 743 
  return;
}

#line 746  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void cif_spin_unlock_event_cb_lock_of_lmac(spinlock_t *lock)
{
  #line 749 
  ldv_spin_model_unlock((char *)"event_cb_lock_of_lmac");
  #line 751 
  spin_unlock_1(lock);
  #line 752 
  return;
}

#line 755  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void cif___ldv_spin_lock_event_cb_lock_of_lmac(spinlock_t *lock)
{
  #line 758 
  ldv_spin_model_lock((char *)"event_cb_lock_of_lmac");
  #line 760 
  __ldv_spin_lock(lock);
  #line 761 
  return;
}

#line 764  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void cif_spin_unlock_irqrestore_event_cb_lock_of_lmac(spinlock_t *lock, unsigned long flags)
{
  #line 767 
  ldv_spin_model_unlock((char *)"event_cb_lock_of_lmac");
  #line 769 
  spin_unlock_irqrestore_0(lock,flags);
  #line 770 
  return;
}

#line 773  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 777 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 781  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/cgx.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 785 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static bool is_power_of_2(unsigned long n)
{
  #line 47 
  return (_Bool)((n != 0UL && ((n + 18446744073709551615UL) & n) == 0UL) != 0);
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n)
{
  #line 759 
  struct hlist_node *next = n->next;
  #line 760 
  struct hlist_node **pprev = n->pprev;
  {
    #line 763 
    union __anonunion___u_3560 __u = {.__val = next};
    #line 762 
    __write_once_size((void *)pprev,(void *)(& __u.__c),8);
    #line 762 
    struct hlist_node *tmp = __u.__val;
  }
  #line 763 
  if (next != (struct hlist_node *)0) 
                                      #line 764 
                                      next->pprev = pprev;
  #line 765 
  return;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n)
{
  #line 769 
  __hlist_del(n);
  #line 770 
  n->next = (struct hlist_node *)(-2401263026318606080);
  #line 771 
  n->pprev = (struct hlist_node **)(-2401263026318606046);
  #line 772 
  return;
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
  #line 784 
  struct hlist_node *first = h->first;
  #line 785 
  n->next = first;
  #line 786 
  if (first != (struct hlist_node *)0) 
                                       #line 787 
                                       first->pprev = & n->next;
  {
    #line 789 
    union __anonunion___u_3562 __u = {.__val = n};
    #line 788 
    __write_once_size((void *)(& h->first),(void *)(& __u.__c),8);
    #line 788 
    struct hlist_node *tmp = __u.__val;
  }
  #line 789 
  n->pprev = & h->first;
  #line 790 
  return;
}

#line 802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_add_behind(struct hlist_node *n, struct hlist_node *prev)
{
  #line 805 
  n->next = prev->next;
  #line 806 
  prev->next = n;
  #line 807 
  n->pprev = & prev->next;
  #line 809 
  if (n->next != (struct hlist_node *)0) 
                                         #line 810 
                                         (n->next)->pprev = & n->next;
  #line 811 
  return;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 691  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static unsigned long cif_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_2(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void cif_spin_lock_lock_of_admin_queue_0(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_2(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 682  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void cif_spin_unlock_lock_of_admin_queue_0(spinlock_t *lock);
#line 26 
#line 659 
static void cif_mutex_lock_rsrc_lock_of_rvu(struct mutex *lock);
#line 26 
#line 698 
static void cif_mutex_lock_mce_lock_of_nix_mcast(struct mutex *lock);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29 
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 29 
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 86 
void mutex_destroy(struct mutex *);
#line 185 
#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void cif_mutex_unlock_rsrc_lock_of_rvu(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void cif_mutex_unlock_mce_lock_of_nix_mcast(struct mutex *lock);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 495  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void *cif_devm_kzalloc_2(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 712  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 458  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 479  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/common.h"
__inline static int qmem_alloc_0(struct device *dev, struct qmem **q, int qsize, int entry_sz)
{
  #line 54 
  struct qmem *qmem;
  #line 55 
  int aligned_addr;
  #line 57 
  if (qsize == 0) 
                  #line 58 
                  return -22;
  #line 60 
  *q = (struct qmem *)cif_devm_kzalloc_2(dev,32UL,3264U);
  #line 61 
  if (*q == (struct qmem *)0) 
                              #line 62 
                              return -12;
  #line 63 
  qmem = *q;
  #line 65 
  qmem->entry_sz = (unsigned char)entry_sz;
  #line 66 
  qmem->alloc_sz = qsize * entry_sz + 128;
  #line 67 
  qmem->base = dma_alloc_coherent(dev,(unsigned long)qmem->alloc_sz,& qmem->iova,3264U);
  #line 69 
  if (qmem->base == (void *)0) 
                               #line 70 
                               return -12;
  #line 72 
  qmem->qsize = (unsigned int)qsize;
  #line 74 
  aligned_addr = (int)(qmem->iova + (dma_addr_t)127U) & -128;
  #line 75 
  qmem->align = (unsigned char)((int)((unsigned char)aligned_addr) - (int)((unsigned char)qmem->iova));
  #line 76 
  qmem->base += (unsigned long)qmem->align;
  #line 77 
  qmem->iova += (unsigned long long)qmem->align;
  #line 78 
  return 0;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
__inline static bool is_rvu_96xx_B0(struct rvu *rvu)
{
  #line 352 
  struct pci_dev *pdev = rvu->pdev;
  #line 354 
  return (_Bool)(((unsigned int)pdev->revision <= 1U && (unsigned int)pdev->subsystem_device == 45568U) != 0);
}

#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
__inline static int is_afvf(u16 pcifunc)
{
  #line 363 
  return ((int)pcifunc & -1024) == 0;
}

#line 366 
#line 366 
int rvu_alloc_bitmap(struct rsrc_bmap *rsrc);
#line 368 
#line 368 
void rvu_free_rsrc(struct rsrc_bmap *rsrc, int id);
#line 371 
#line 371 
bool rvu_rsrc_check_contig(struct rsrc_bmap *rsrc, int nrsrc);
#line 374 
#line 374 
void rvu_get_pf_numvfs(struct rvu *rvu, int pf, int *numvfs, int *hwvf);
#line 376 
#line 376 
bool is_pffunc_map_valid(struct rvu *rvu, u16 pcifunc, int blktype);
#line 380 
#line 380 
int rvu_poll_reg(struct rvu *rvu, u64 block, u64 offset, u64 mask, bool zero);
#line 409 
#line 409 
int rvu_mbox_handler_npc_mcam_alloc_entry(struct rvu *rvu, struct npc_mcam_alloc_entry_req *req, struct npc_mcam_alloc_entry_rsp *rsp);
#line 409 
#line 409 
int rvu_mbox_handler_npc_mcam_free_entry(struct rvu *rvu, struct npc_mcam_free_entry_req *req, struct msg_rsp *rsp);
#line 409 
#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_lf_alloc(struct rvu *rvu, struct nix_lf_alloc_req *req, struct nix_lf_alloc_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 1002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_lf_free(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_hwctx_disable(struct rvu *rvu, struct hwctx_disable_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 1300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_txsch_alloc(struct rvu *rvu, struct nix_txsch_alloc_req *req, struct nix_txsch_alloc_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 1550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_txsch_free(struct rvu *rvu, struct nix_txsch_free_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 1653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_txschq_cfg(struct rvu *rvu, struct nix_txschq_config *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 2119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_stats_rst(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 1766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_vtag_cfg(struct rvu *rvu, struct nix_vtag_config *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 2417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_rss_flowkey_cfg(struct rvu *rvu, struct nix_rss_flowkey_cfg *req, struct nix_rss_flowkey_cfg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 2521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_set_mac_addr(struct rvu *rvu, struct nix_set_mac_addr *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 2549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_set_rx_mode(struct rvu *rvu, struct nix_rx_mode *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 2630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_set_hw_frs(struct rvu *rvu, struct nix_frs_cfg *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 3117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_lf_start_rx(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 3132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_lf_stop_rx(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 1036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_mark_format_cfg(struct rvu *rvu, struct nix_mark_format_cfg *req, struct nix_mark_format_cfg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 2777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_set_rx_cfg(struct rvu *rvu, struct nix_rx_cfg *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_lso_format_cfg(struct rvu *rvu, struct nix_lso_format_cfg *req, struct nix_lso_format_cfg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 2718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_rxvlan_alloc(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
bool is_nixlf_attached(struct rvu *rvu, u16 pcifunc);
#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 2955  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_nix_init(struct rvu *rvu);
#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 2068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_nix_reserve_mark_format(struct rvu *rvu, struct nix_hw *nix_hw, int blkaddr, u32 cfg);
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
void rvu_nix_freemem(struct rvu *rvu);
#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_get_nixlf_count(struct rvu *rvu);
#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 3147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
void rvu_nix_lf_teardown(struct rvu *rvu, u16 pcifunc, int blkaddr, int nixlf);
#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 3100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int nix_get_nixlf(struct rvu *rvu, u16 pcifunc, int *nixlf);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 440 
int rvu_npc_get_pkind(struct rvu *rvu, u16 pf);
#line 441 
#line 441 
void rvu_npc_set_pkind(struct rvu *rvu, int pkind, struct rvu_pfvf *pfvf);
#line 442 
#line 442 
void rvu_npc_install_ucast_entry(struct rvu *rvu, u16 pcifunc, int nixlf, u64 chan, u8 *mac_addr);
#line 444 
#line 444 
void rvu_npc_install_promisc_entry(struct rvu *rvu, u16 pcifunc, int nixlf, u64 chan, bool allmulti);
#line 446 
#line 446 
void rvu_npc_disable_promisc_entry(struct rvu *rvu, u16 pcifunc, int nixlf);
#line 448 
#line 448 
void rvu_npc_install_bcast_match_entry(struct rvu *rvu, u16 pcifunc, int nixlf, u64 chan);
#line 450 
#line 450 
void rvu_npc_disable_bcast_entry(struct rvu *rvu, u16 pcifunc);
#line 451 
#line 451 
int rvu_npc_update_rxvlan(struct rvu *rvu, u16 pcifunc, int nixlf);
#line 452 
#line 452 
void rvu_npc_disable_mcam_entries(struct rvu *rvu, u16 pcifunc, int nixlf);
#line 453 
#line 453 
void rvu_npc_disable_default_entries(struct rvu *rvu, u16 pcifunc, int nixlf);
#line 454 
#line 454 
void rvu_npc_enable_default_entries(struct rvu *rvu, u16 pcifunc, int nixlf);
#line 455 
#line 455 
void rvu_npc_update_flowkey_alg_idx(struct rvu *rvu, u16 pcifunc, int nixlf, int group, int alg_idx, int mcam_index);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
#line 1863 
static int nix_update_bcast_mce_list(struct rvu *rvu, u16 pcifunc, bool add);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
bool is_nixlf_attached(struct rvu *rvu, u16 pcifunc)
{
  #line 73 
  int blkaddr;
  #line 72 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 75 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 76 
  if (! pfvf->nixlf || blkaddr < 0) 
                                    #line 77 
                                    return (_Bool)0;
  #line 78 
  return (_Bool)1;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_get_nixlf_count(struct rvu *rvu)
{
  #line 83 
  struct rvu_block *block;
  #line 84 
  int blkaddr;
  #line 86 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)0);
  #line 87 
  if (blkaddr < 0) 
                   #line 88 
                   return 0;
  #line 89 
  block = & (rvu->hw)->block[blkaddr];
  #line 90 
  return (int)block->lf.max;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_mce_list_init(struct nix_mce_list *list, int max)
{
  #line 95 
  list->head.first = (struct hlist_node *)0;
  #line 96 
  list->count = 0;
  #line 97 
  list->max = max;
  #line 98 
  return;
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static u16 nix_alloc_mce_list(struct nix_mcast *mcast, int count)
{
  #line 102 
  int idx;
  #line 104 
  if (mcast == (struct nix_mcast *)0) 
                                      #line 105 
                                      return (unsigned short)0U;
  #line 107 
  idx = mcast->next_free_mce;
  #line 108 
  mcast->next_free_mce += count;
  #line 109 
  return (unsigned short)idx;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
__inline static struct nix_hw *get_nix_hw(struct rvu_hwinfo *hw, int blkaddr)
{
  #line 114 
  if (blkaddr == 4 && hw->nix0 != (struct nix_hw *)0) 
                                                      #line 115 
                                                      return hw->nix0;
  #line 117 
  return (struct nix_hw *)0;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_rx_sync(struct rvu *rvu, int blkaddr)
{
  #line 122 
  int err;
  #line 125 
  rvu_write64(rvu,(unsigned long long)blkaddr,1360ULL,1ULL);
  #line 126 
  err = rvu_poll_reg(rvu,(unsigned long long)blkaddr,1360ULL,1ULL,(_Bool)1);
  #line 127 
  if (err != 0) 
                #line 128 
                _dev_err(rvu->dev,(char *)"NIX RX software sync failed\n");
  #line 129 
  return;
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static bool is_valid_txschq(struct rvu *rvu, int blkaddr, int lvl, u16 pcifunc, u16 schq)
{
  #line 135 
  struct nix_txsch *txsch;
  #line 136 
  struct nix_hw *nix_hw;
  #line 137 
  u16 map_func;
  #line 134 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 139 
  nix_hw = get_nix_hw(rvu->hw,blkaddr);
  #line 140 
  if (nix_hw == (struct nix_hw *)0) 
                                    #line 141 
                                    return (_Bool)0;
  #line 143 
  txsch = & nix_hw->txsch[lvl];
  #line 145 
  if ((int)txsch->schq.max <= (int)schq) 
                                         #line 146 
                                         return (_Bool)0;
  #line 148 
  cif_mutex_lock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
  #line 149 
  map_func = (unsigned short)*(txsch->pfvf_map + (unsigned long)schq);
  #line 150 
  cif_mutex_unlock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
  #line 153 
  if ((int)hw->cap.nix_tx_aggr_lvl <= lvl) {
    #line 154 
    if (rvu_get_pf((unsigned short)((int)map_func)) != rvu_get_pf((unsigned short)((int)pcifunc))) 
      #line 155 
      return (_Bool)0; else 
                            #line 157 
                            return (_Bool)1;
  }
  #line 160 
  if ((int)map_func != (int)pcifunc) 
                                     #line 161 
                                     return (_Bool)0;
  #line 163 
  return (_Bool)1;
}

#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_interface_init(struct rvu *rvu, u16 pcifunc, int type, int nixlf)
{
  #line 169 
  u8 cgx_id;
  #line 169 
  u8 lmac_id;
  #line 170 
  int pkind;
  #line 170 
  int pf;
  #line 170 
  int vf;
  #line 171 
  int err;
  #line 168 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 173 
  pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 174 
  if (! is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf)))) 
    #line 174 
    if (type != 1) 
                   #line 175 
                   return 0;
  #line 177 
  switch (type) {
    #line 178 
    case 0: 
            #line 178 
    ;
    #line 179 
    pfvf->cgx_lmac = *(rvu->pf2cgxlmac_map + (unsigned long)pf);
    #line 180 
    rvu_get_cgx_lmac_id((unsigned char)((int)pfvf->cgx_lmac),& cgx_id,& lmac_id);
    #line 182 
    pkind = rvu_npc_get_pkind(rvu,(unsigned short)((int)((unsigned short)pf)));
    #line 183 
    if (pkind < 0) {
      #line 184 
      _dev_err(rvu->dev,(char *)"PF_Func 0x%x: Invalid pkind\n",(int)pcifunc);
      #line 186 
      return -22;
    }
    #line 188 
    pfvf->rx_chan_base = (unsigned short)((unsigned int)((unsigned short)(((int)cgx_id + 8) * 16 + (int)lmac_id)) * 16U);
    #line 189 
    pfvf->tx_chan_base = pfvf->rx_chan_base;
    #line 190 
    pfvf->rx_chan_cnt = (unsigned char)1U;
    #line 191 
    pfvf->tx_chan_cnt = (unsigned char)1U;
    #line 192 
    ;
    #line 192 
    ;
    #line 192 
    cgx_set_pkind(rvu_cgx_pdata((unsigned char)((int)cgx_id),rvu),(unsigned char)((int)lmac_id),pkind);
    #line 193 
    rvu_npc_set_pkind(rvu,pkind,pfvf);
    #line 194 
    break;
    #line 195 
    case 1: 
            #line 195 
    ;
    #line 196 
    vf = ((int)pcifunc & 1023) + -1;
    #line 202 
    pfvf->rx_chan_base = (unsigned short)vf;
    #line 203 
    if ((vf & 1) != 0) 
                       #line 203 
                       pfvf->tx_chan_base = (unsigned short)((unsigned int)((unsigned short)vf) + 65535U); else 
                                                                    #line 203 
                                                                    pfvf->tx_chan_base = (unsigned short)((unsigned int)((unsigned short)vf) + 1U);
    #line 205 
    pfvf->rx_chan_cnt = (unsigned char)1U;
    #line 206 
    pfvf->tx_chan_cnt = (unsigned char)1U;
    #line 207 
    rvu_npc_install_promisc_entry(rvu,(unsigned short)((int)pcifunc),nixlf,(unsigned long long)pfvf->rx_chan_base,(_Bool)0);
    #line 209 
    break;
  }
  #line 215 
  rvu_npc_install_ucast_entry(rvu,(unsigned short)((int)pcifunc),nixlf,(unsigned long long)pfvf->rx_chan_base,(u8 *)(& pfvf->mac_addr));
  #line 219 
  err = nix_update_bcast_mce_list(rvu,(unsigned short)((int)pcifunc),(_Bool)1);
  #line 220 
  if (err != 0) {
    #line 221 
    _dev_err(rvu->dev,(char *)"Bcast list, failed to enable PF_FUNC 0x%x\n",(int)pcifunc);
    #line 224 
    return err;
  }
  #line 227 
  rvu_npc_install_bcast_match_entry(rvu,(unsigned short)((int)pcifunc),nixlf,(unsigned long long)pfvf->rx_chan_base);
  #line 229 
  pfvf->maxlen = (unsigned short)40U;
  #line 230 
  pfvf->minlen = (unsigned short)40U;
  #line 232 
  return 0;
}

#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_interface_deinit(struct rvu *rvu, u16 pcifunc, u8 nixlf)
{
  #line 238 
  int err;
  #line 237 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 240 
  pfvf->maxlen = (unsigned short)0U;
  #line 241 
  pfvf->minlen = (unsigned short)0U;
  #line 242 
  pfvf->rxvlan = (_Bool)0;
  #line 245 
  err = nix_update_bcast_mce_list(rvu,(unsigned short)((int)pcifunc),(_Bool)0);
  #line 246 
  if (err != 0) 
                #line 247 
                _dev_err(rvu->dev,(char *)"Bcast list, failed to disable PF_FUNC 0x%x\n",(int)pcifunc);
  #line 253 
  rvu_npc_disable_mcam_entries(rvu,(unsigned short)((int)pcifunc),(int)nixlf);
  #line 254 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_setup_lso_tso_l3(struct rvu *rvu, int blkaddr, u64 format, bool v4, u64 *fidx)
{
  #line 268 
  u64 tmp;
  #line 281 
  u64 tmp_0;
  #line 259 
  struct nix_lso_format field = {.offset = (unsigned long long)0U, .layer = 0ULL, .rsvd_10_11 = 0ULL, .sizem1 = 0ULL, .rsvd_14_15 = 0ULL, .alg = 0ULL, .rsvd_19_63 = 0ULL};
  #line 262 
  field.layer = (unsigned long long)0U;
  #line 264 
  if ((int)v4 != 0) 
                    #line 264 
                    field.offset = (unsigned long long)2U; else 
                                                                #line 264 
                                                                field.offset = (unsigned long long)4U;
  #line 265 
  field.sizem1 = (unsigned long long)1U;
  #line 266 
  field.alg = (unsigned long long)2U;
  #line 267 
  ;
  #line 268 
  tmp = *fidx;
  #line 268 
  (*fidx) ++;
  #line 267 
  ;
  #line 267 
  ;
  #line 267 
  ;
  #line 267 
  rvu_write64(rvu,(unsigned long long)blkaddr,((format << 16) | (tmp << 3)) | 6912ULL,*((u64 *)(& field)));
  #line 272 
  if (! v4) 
            #line 273 
            return;
  #line 276 
  field.layer = (unsigned long long)0U;
  #line 277 
  field.offset = (unsigned long long)4U;
  #line 278 
  field.sizem1 = (unsigned long long)1U;
  #line 279 
  field.alg = (unsigned long long)1U;
  #line 280 
  ;
  #line 281 
  tmp_0 = *fidx;
  #line 281 
  (*fidx) ++;
  #line 280 
  ;
  #line 280 
  ;
  #line 280 
  ;
  #line 280 
  rvu_write64(rvu,(unsigned long long)blkaddr,((format << 16) | (tmp_0 << 3)) | 6912ULL,*((u64 *)(& field)));
  #line 283 
  return;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_setup_lso_tso_l4(struct rvu *rvu, int blkaddr, u64 format, u64 *fidx)
{
  #line 296 
  u64 tmp;
  #line 305 
  u64 tmp_0;
  #line 288 
  struct nix_lso_format field = {.offset = (unsigned long long)0U, .layer = 0ULL, .rsvd_10_11 = 0ULL, .sizem1 = 0ULL, .rsvd_14_15 = 0ULL, .alg = 0ULL, .rsvd_19_63 = 0ULL};
  #line 291 
  field.layer = (unsigned long long)1U;
  #line 292 
  field.offset = (unsigned long long)4U;
  #line 293 
  field.sizem1 = (unsigned long long)3U;
  #line 294 
  field.alg = (unsigned long long)3U;
  #line 295 
  ;
  #line 296 
  tmp = *fidx;
  #line 296 
  (*fidx) ++;
  #line 295 
  ;
  #line 295 
  ;
  #line 295 
  ;
  #line 295 
  rvu_write64(rvu,(unsigned long long)blkaddr,((format << 16) | (tmp << 3)) | 6912ULL,*((u64 *)(& field)));
  #line 300 
  field.layer = (unsigned long long)1U;
  #line 301 
  field.offset = (unsigned long long)12U;
  #line 302 
  field.sizem1 = (unsigned long long)1U;
  #line 303 
  field.alg = (unsigned long long)4U;
  #line 304 
  ;
  #line 305 
  tmp_0 = *fidx;
  #line 305 
  (*fidx) ++;
  #line 304 
  ;
  #line 304 
  ;
  #line 304 
  ;
  #line 304 
  rvu_write64(rvu,(unsigned long long)blkaddr,((format << 16) | (tmp_0 << 3)) | 6912ULL,*((u64 *)(& field)));
  #line 307 
  return;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_setup_lso(struct rvu *rvu, struct nix_hw *nix_hw, int blkaddr)
{
  #line 311 
  u64 cfg;
  #line 311 
  u64 idx;
  #line 311 
  u64 fidx = 0ULL;
  #line 314 
  cfg = (rvu_read64(rvu,(unsigned long long)blkaddr,40ULL) >> 48) & 255ULL;
  #line 315 
  nix_hw->lso.total = (unsigned char)cfg;
  #line 318 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,168ULL);
  #line 322 
  cfg &= 18446462598732906495ULL;
  #line 323 
  cfg |= 281419141218304ULL;
  #line 324 
  rvu_write64(rvu,(unsigned long long)blkaddr,168ULL,cfg | 9223372036854775808ULL);
  #line 330 
  idx = 0ULL;
  #line 331 
  nix_setup_lso_tso_l3(rvu,blkaddr,idx,(_Bool)1,& fidx);
  #line 332 
  nix_setup_lso_tso_l4(rvu,blkaddr,idx,& fidx);
  #line 335 
  while (fidx <= 7ULL) {
    #line 336 
    rvu_write64(rvu,(unsigned long long)blkaddr,((idx << 16) | (fidx << 3)) | 6912ULL,0ULL);
    #line 335 
    fidx ++;
  }
  #line 339 
  nix_hw->lso.in_use = (u8)((int)nix_hw->lso.in_use + 1);
  #line 342 
  idx = 1ULL;
  #line 343 
  fidx = 0ULL;
  #line 344 
  nix_setup_lso_tso_l3(rvu,blkaddr,idx,(_Bool)0,& fidx);
  #line 345 
  nix_setup_lso_tso_l4(rvu,blkaddr,idx,& fidx);
  #line 348 
  while (fidx <= 7ULL) {
    #line 349 
    rvu_write64(rvu,(unsigned long long)blkaddr,((idx << 16) | (fidx << 3)) | 6912ULL,0ULL);
    #line 348 
    fidx ++;
  }
  #line 352 
  nix_hw->lso.in_use = (u8)((int)nix_hw->lso.in_use + 1);
  #line 353 
  return;
}

#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_ctx_free(struct rvu *rvu, struct rvu_pfvf *pfvf)
{
  #line 357 
  kfree((void *)pfvf->rq_bmap);
  #line 358 
  kfree((void *)pfvf->sq_bmap);
  #line 359 
  kfree((void *)pfvf->cq_bmap);
  #line 360 
  if (pfvf->rq_ctx != (struct qmem *)0) 
                                        #line 361 
                                        qmem_free(rvu->dev,pfvf->rq_ctx);
  #line 362 
  if (pfvf->sq_ctx != (struct qmem *)0) 
                                        #line 363 
                                        qmem_free(rvu->dev,pfvf->sq_ctx);
  #line 364 
  if (pfvf->cq_ctx != (struct qmem *)0) 
                                        #line 365 
                                        qmem_free(rvu->dev,pfvf->cq_ctx);
  #line 366 
  if (pfvf->rss_ctx != (struct qmem *)0) 
                                         #line 367 
                                         qmem_free(rvu->dev,pfvf->rss_ctx);
  #line 368 
  if (pfvf->nix_qints_ctx != (struct qmem *)0) 
                                               #line 369 
                                               qmem_free(rvu->dev,pfvf->nix_qints_ctx);
  #line 370 
  if (pfvf->cq_ints_ctx != (struct qmem *)0) 
                                             #line 371 
                                             qmem_free(rvu->dev,pfvf->cq_ints_ctx);
  #line 373 
  pfvf->rq_bmap = (unsigned long *)0UL;
  #line 374 
  pfvf->cq_bmap = (unsigned long *)0UL;
  #line 375 
  pfvf->sq_bmap = (unsigned long *)0UL;
  #line 376 
  pfvf->rq_ctx = (struct qmem *)0;
  #line 377 
  pfvf->sq_ctx = (struct qmem *)0;
  #line 378 
  pfvf->cq_ctx = (struct qmem *)0;
  #line 379 
  pfvf->rss_ctx = (struct qmem *)0;
  #line 380 
  pfvf->nix_qints_ctx = (struct qmem *)0;
  #line 381 
  pfvf->cq_ints_ctx = (struct qmem *)0;
  #line 382 
  return;
}

#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nixlf_rss_ctx_init(struct rvu *rvu, int blkaddr, struct rvu_pfvf *pfvf, int nixlf, int rss_sz, int rss_grps, int hwctx_size, u64 way_mask)
{
  #line 407 
  unsigned long long tmp_28;
  #line 407 
  unsigned long long tmp_60;
  #line 407 
  unsigned long long tmp_61;
  #line 407 
  unsigned long long tmp_29;
  #line 407 
  unsigned long long tmp_30;
  #line 407 
  unsigned long long tmp_31;
  #line 407 
  unsigned long long tmp;
  #line 407 
  unsigned long long tmp_0;
  #line 407 
  unsigned long long tmp_32;
  #line 407 
  unsigned long long tmp_33;
  #line 407 
  unsigned long long tmp_1;
  #line 407 
  unsigned long long tmp_2;
  #line 407 
  unsigned long long tmp_34;
  #line 407 
  unsigned long long tmp_35;
  #line 407 
  unsigned long long tmp_3;
  #line 407 
  unsigned long long tmp_4;
  #line 407 
  unsigned long long tmp_36;
  #line 407 
  unsigned long long tmp_37;
  #line 407 
  unsigned long long tmp_5;
  #line 407 
  unsigned long long tmp_6;
  #line 407 
  unsigned long long tmp_38;
  #line 407 
  unsigned long long tmp_39;
  #line 407 
  unsigned long long tmp_7;
  #line 407 
  unsigned long long tmp_8;
  #line 407 
  unsigned long long tmp_40;
  #line 407 
  unsigned long long tmp_41;
  #line 407 
  unsigned long long tmp_9;
  #line 407 
  unsigned long long tmp_10;
  #line 407 
  unsigned long long tmp_42;
  #line 407 
  unsigned long long tmp_43;
  #line 407 
  unsigned long long tmp_11;
  #line 407 
  unsigned long long tmp_12;
  #line 407 
  unsigned long long tmp_44;
  #line 407 
  unsigned long long tmp_45;
  #line 407 
  unsigned long long tmp_13;
  #line 407 
  unsigned long long tmp_14;
  #line 407 
  unsigned long long tmp_46;
  #line 407 
  unsigned long long tmp_47;
  #line 407 
  unsigned long long tmp_15;
  #line 407 
  unsigned long long tmp_16;
  #line 407 
  unsigned long long tmp_48;
  #line 407 
  unsigned long long tmp_49;
  #line 407 
  unsigned long long tmp_17;
  #line 407 
  unsigned long long tmp_18;
  #line 407 
  unsigned long long tmp_50;
  #line 407 
  unsigned long long tmp_51;
  #line 407 
  unsigned long long tmp_19;
  #line 407 
  unsigned long long tmp_20;
  #line 407 
  unsigned long long tmp_52;
  #line 407 
  unsigned long long tmp_53;
  #line 407 
  unsigned long long tmp_21;
  #line 407 
  unsigned long long tmp_22;
  #line 407 
  unsigned long long tmp_54;
  #line 407 
  unsigned long long tmp_55;
  #line 407 
  unsigned long long tmp_23;
  #line 407 
  unsigned long long tmp_24;
  #line 407 
  unsigned long long tmp_56;
  #line 407 
  unsigned long long tmp_57;
  #line 407 
  unsigned long long tmp_25;
  #line 407 
  unsigned long long tmp_26;
  #line 407 
  unsigned long long tmp_58;
  #line 407 
  unsigned long long tmp_59;
  #line 407 
  unsigned long long tmp_27;
  #line 389 
  int err;
  #line 389 
  int grp;
  #line 389 
  int num_indices;
  #line 405 
  unsigned long long tmp_63;
  #line 392 
  if (rss_sz == 0) 
                   #line 393 
                   return 0;
  #line 394 
  num_indices = rss_sz * rss_grps;
  #line 397 
  err = qmem_alloc_0(rvu->dev,& pfvf->rss_ctx,num_indices,hwctx_size);
  #line 398 
  if (err != 0) 
                #line 399 
                return err;
  #line 401 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16592),(pfvf->rss_ctx)->iova);
  #line 405 
  if (0 != 0) {
    #line 407 
    if (num_indices > 511) {
      #line 407 
      if (((unsigned long long)(num_indices / 256) & 9223372036854775808ULL) == 0ULL) {
        #line 407 
        if (((unsigned long long)(num_indices / 256) & 4611686018427387904ULL) == 0ULL) {
          #line 407 
          if (((unsigned long long)(num_indices / 256) & 2305843009213693952ULL) == 0ULL) {
            #line 407 
            if (((unsigned long long)(num_indices / 256) & 1152921504606846976ULL) == 0ULL) {
              #line 407 
              if (((unsigned long long)(num_indices / 256) & 576460752303423488ULL) == 0ULL) {
                #line 407 
                if (((unsigned long long)(num_indices / 256) & 288230376151711744ULL) == 0ULL) {
                  #line 407 
                  if (((unsigned long long)(num_indices / 256) & 144115188075855872ULL) == 0ULL) {
                    #line 407 
                    if (((unsigned long long)(num_indices / 256) & 72057594037927936ULL) == 0ULL) {
                      #line 407 
                      if (((unsigned long long)(num_indices / 256) & 36028797018963968ULL) == 0ULL) {
                        #line 407 
                        if (((unsigned long long)(num_indices / 256) & 18014398509481984ULL) == 0ULL) {
                          #line 407 
                          if (((unsigned long long)(num_indices / 256) & 9007199254740992ULL) == 0ULL) {
                            #line 407 
                            if (((unsigned long long)(num_indices / 256) & 4503599627370496ULL) == 0ULL) {
                              #line 407 
                              if (((unsigned long long)(num_indices / 256) & 2251799813685248ULL) == 0ULL) {
                                #line 407 
                                if (((unsigned long long)(num_indices / 256) & 1125899906842624ULL) == 0ULL) {
                                  #line 407 
                                  if (((unsigned long long)(num_indices / 256) & 562949953421312ULL) == 0ULL) {
                                    #line 407 
                                    if (((unsigned long long)(num_indices / 256) & 281474976710656ULL) == 0ULL) {
                                      #line 407 
                                      if (((unsigned long long)(num_indices / 256) & 140737488355328ULL) == 0ULL) {
                                        #line 407 
                                        if (((unsigned long long)(num_indices / 256) & 70368744177664ULL) == 0ULL) {
                                          #line 407 
                                          if (((unsigned long long)(num_indices / 256) & 35184372088832ULL) == 0ULL) {
                                            #line 407 
                                            if (((unsigned long long)(num_indices / 256) & 17592186044416ULL) == 0ULL) {
                                              #line 407 
                                              if (((unsigned long long)(num_indices / 256) & 8796093022208ULL) == 0ULL) {
                                                #line 407 
                                                if (((unsigned long long)(num_indices / 256) & 4398046511104ULL) == 0ULL) {
                                                  #line 407 
                                                  if (((unsigned long long)(num_indices / 256) & 2199023255552ULL) == 0ULL) {
                                                    #line 407 
                                                    if (((unsigned long long)(num_indices / 256) & 1099511627776ULL) == 0ULL) {
                                                      #line 407 
                                                      if (((unsigned long long)(num_indices / 256) & 549755813888ULL) == 0ULL) {
                                                        #line 407 
                                                        if (((unsigned long long)(num_indices / 256) & 274877906944ULL) == 0ULL) {
                                                          #line 407 
                                                          if (((unsigned long long)(num_indices / 256) & 137438953472ULL) == 0ULL) {
                                                            #line 407 
                                                            if (((unsigned long long)(num_indices / 256) & 68719476736ULL) == 0ULL) {
                                                              #line 407 
                                                              if (((unsigned long long)(num_indices / 256) & 34359738368ULL) == 0ULL) {
                                                                #line 407 
                                                                if (((unsigned long long)(num_indices / 256) & 17179869184ULL) == 0ULL) {
                                                                  #line 407 
                                                                  if (
                                                                    ((unsigned long long)(num_indices / 256) & 8589934592ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 4294967296ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 2147483648ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 1073741824ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 536870912ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 268435456ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 134217728ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 67108864ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 33554432ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 16777216ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 8388608ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 4194304ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 2097152ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 1048576ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 524288ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 262144ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 131072ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 65536ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 32768ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 16384ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 8192ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 4096ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 2048ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 1024ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 512ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 256ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 128ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 64ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 32ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 16ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 8ULL) == 0ULL) {
                                                                    #line 407 
                                                                    if (
                                                                    ((unsigned long long)(num_indices / 256) & 4ULL) != 0ULL) 
                                                                    #line 407 
                                                                    tmp = 68719476754ULL; else 
                                                                    #line 407 
                                                                    tmp = 68719476753ULL;
                                                                    #line 407 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_0 = 68719476755ULL;
                                                                    #line 407 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_1 = 68719476756ULL;
                                                                    #line 407 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_2 = 68719476757ULL;
                                                                    #line 407 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_3 = 68719476758ULL;
                                                                    #line 407 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_4 = 68719476759ULL;
                                                                    #line 407 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_5 = 68719476760ULL;
                                                                    #line 407 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_6 = 68719476761ULL;
                                                                    #line 407 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_7 = 68719476762ULL;
                                                                    #line 407 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_8 = 68719476763ULL;
                                                                    #line 407 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_9 = 68719476764ULL;
                                                                    #line 407 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_10 = 68719476765ULL;
                                                                    #line 407 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_11 = 68719476766ULL;
                                                                    #line 407 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_12 = 68719476767ULL;
                                                                    #line 407 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_13 = 68719476752ULL;
                                                                    #line 407 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_14 = 68719476753ULL;
                                                                    #line 407 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_15 = 68719476754ULL;
                                                                    #line 407 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_16 = 68719476755ULL;
                                                                    #line 407 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_17 = 68719476756ULL;
                                                                    #line 407 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_18 = 68719476757ULL;
                                                                    #line 407 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_19 = 68719476758ULL;
                                                                    #line 407 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_20 = 68719476759ULL;
                                                                    #line 407 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_21 = 68719476760ULL;
                                                                    #line 407 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_22 = 68719476761ULL;
                                                                    #line 407 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_23 = 68719476762ULL;
                                                                    #line 407 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_24 = 68719476763ULL;
                                                                    #line 407 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_25 = 68719476764ULL;
                                                                    #line 407 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_26 = 68719476765ULL;
                                                                    #line 407 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_27 = 68719476766ULL;
                                                                    #line 407 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_28 = 68719476767ULL;
                                                                    #line 407 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 407 
                                                                    tmp_29 = 68719476784ULL;
                                                                    #line 407 
                                                                    tmp_30 = tmp_29;
                                                                  }
                                                                  else 
                                                                    #line 407 
                                                                    tmp_30 = 68719476785ULL;
                                                                  #line 407 
                                                                  tmp_31 = tmp_30;
                                                                }
                                                                else 
                                                                  #line 407 
                                                                  tmp_31 = 68719476786ULL;
                                                                #line 407 
                                                                tmp_32 = tmp_31;
                                                              }
                                                              else 
                                                                   #line 407 
                                                                   tmp_32 = 68719476787ULL;
                                                              #line 407 
                                                              tmp_33 = tmp_32;
                                                            }
                                                            else 
                                                                 #line 407 
                                                                 tmp_33 = 68719476788ULL;
                                                            #line 407 
                                                            tmp_34 = tmp_33;
                                                          }
                                                          else 
                                                               #line 407 
                                                               tmp_34 = 68719476789ULL;
                                                          #line 407 
                                                          tmp_35 = tmp_34;
                                                        }
                                                        else 
                                                             #line 407 
                                                             tmp_35 = 68719476790ULL;
                                                        #line 407 
                                                        tmp_36 = tmp_35;
                                                      }
                                                      else 
                                                           #line 407 
                                                           tmp_36 = 68719476791ULL;
                                                      #line 407 
                                                      tmp_37 = tmp_36;
                                                    }
                                                    else 
                                                         #line 407 
                                                         tmp_37 = 68719476792ULL;
                                                    #line 407 
                                                    tmp_38 = tmp_37;
                                                  }
                                                  else 
                                                       #line 407 
                                                       tmp_38 = 68719476793ULL;
                                                  #line 407 
                                                  tmp_39 = tmp_38;
                                                }
                                                else 
                                                     #line 407 
                                                     tmp_39 = 68719476794ULL;
                                                #line 407 
                                                tmp_40 = tmp_39;
                                              }
                                              else 
                                                   #line 407 
                                                   tmp_40 = 68719476795ULL;
                                              #line 407 
                                              tmp_41 = tmp_40;
                                            }
                                            else 
                                                 #line 407 
                                                 tmp_41 = 68719476796ULL;
                                            #line 407 
                                            tmp_42 = tmp_41;
                                          }
                                          else 
                                               #line 407 
                                               tmp_42 = 68719476797ULL;
                                          #line 407 
                                          tmp_43 = tmp_42;
                                        }
                                        else 
                                             #line 407 
                                             tmp_43 = 68719476798ULL;
                                        #line 407 
                                        tmp_44 = tmp_43;
                                      }
                                      else 
                                           #line 407 
                                           tmp_44 = 68719476799ULL;
                                      #line 407 
                                      tmp_45 = tmp_44;
                                    }
                                    else 
                                         #line 407 
                                         tmp_45 = 68719476784ULL;
                                    #line 407 
                                    tmp_46 = tmp_45;
                                  }
                                  else 
                                       #line 407 
                                       tmp_46 = 68719476785ULL;
                                  #line 407 
                                  tmp_47 = tmp_46;
                                }
                                else 
                                     #line 407 
                                     tmp_47 = 68719476786ULL;
                                #line 407 
                                tmp_48 = tmp_47;
                              }
                              else 
                                   #line 407 
                                   tmp_48 = 68719476787ULL;
                              #line 407 
                              tmp_49 = tmp_48;
                            }
                            else 
                                 #line 407 
                                 tmp_49 = 68719476788ULL;
                            #line 407 
                            tmp_50 = tmp_49;
                          }
                          else 
                               #line 407 
                               tmp_50 = 68719476789ULL;
                          #line 407 
                          tmp_51 = tmp_50;
                        }
                        else 
                             #line 407 
                             tmp_51 = 68719476790ULL;
                        #line 407 
                        tmp_52 = tmp_51;
                      }
                      else 
                           #line 407 
                           tmp_52 = 68719476791ULL;
                      #line 407 
                      tmp_53 = tmp_52;
                    }
                    else 
                         #line 407 
                         tmp_53 = 68719476792ULL;
                    #line 407 
                    tmp_54 = tmp_53;
                  }
                  else 
                       #line 407 
                       tmp_54 = 68719476793ULL;
                  #line 407 
                  tmp_55 = tmp_54;
                }
                else 
                     #line 407 
                     tmp_55 = 68719476794ULL;
                #line 407 
                tmp_56 = tmp_55;
              }
              else 
                   #line 407 
                   tmp_56 = 68719476795ULL;
              #line 407 
              tmp_57 = tmp_56;
            }
            else 
                 #line 407 
                 tmp_57 = 68719476796ULL;
            #line 407 
            tmp_58 = tmp_57;
          }
          else 
               #line 407 
               tmp_58 = 68719476797ULL;
          #line 407 
          tmp_59 = tmp_58;
        }
        else 
             #line 407 
             tmp_59 = 68719476798ULL;
        #line 407 
        tmp_60 = tmp_59;
      }
      else 
           #line 407 
           tmp_60 = 68719476799ULL;
      #line 407 
      tmp_61 = tmp_60;
    }
    else 
         #line 407 
         tmp_61 = 68719476752ULL;
    #line 405 
    tmp_63 = tmp_61;
  }
  else {
    #line 405 
    tmp_63 = (unsigned long long)__ilog2_u32((unsigned int)(num_indices / 256)) | 68719476752ULL;
  }
  #line 405 
  ;
  #line 405 
  ;
  #line 405 
  ;
  #line 405 
  ;
  #line 405 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16576),tmp_63 | (way_mask << 20));
  #line 410 
  grp = 0;
  #line 410 
  while (grp < rss_grps) {
    #line 412 
    int tmp_92;
    #line 412 
    int tmp_124;
    #line 412 
    int tmp_125;
    #line 412 
    int tmp_93;
    #line 412 
    int tmp_94;
    #line 412 
    int tmp_95;
    #line 412 
    int tmp_64;
    #line 412 
    int tmp_96;
    #line 412 
    int tmp_97;
    #line 412 
    int tmp_65;
    #line 412 
    int tmp_66;
    #line 412 
    int tmp_98;
    #line 412 
    int tmp_99;
    #line 412 
    int tmp_67;
    #line 412 
    int tmp_68;
    #line 412 
    int tmp_100;
    #line 412 
    int tmp_101;
    #line 412 
    int tmp_69;
    #line 412 
    int tmp_70;
    #line 412 
    int tmp_102;
    #line 412 
    int tmp_103;
    #line 412 
    int tmp_71;
    #line 412 
    int tmp_72;
    #line 412 
    int tmp_104;
    #line 412 
    int tmp_105;
    #line 412 
    int tmp_73;
    #line 412 
    int tmp_74;
    #line 412 
    int tmp_106;
    #line 412 
    int tmp_107;
    #line 412 
    int tmp_75;
    #line 412 
    int tmp_76;
    #line 412 
    int tmp_108;
    #line 412 
    int tmp_109;
    #line 412 
    int tmp_77;
    #line 412 
    int tmp_78;
    #line 412 
    int tmp_110;
    #line 412 
    int tmp_111;
    #line 412 
    int tmp_79;
    #line 412 
    int tmp_80;
    #line 412 
    int tmp_112;
    #line 412 
    int tmp_113;
    #line 412 
    int tmp_81;
    #line 412 
    int tmp_82;
    #line 412 
    int tmp_114;
    #line 412 
    int tmp_115;
    #line 412 
    int tmp_83;
    #line 412 
    int tmp_84;
    #line 412 
    int tmp_116;
    #line 412 
    int tmp_117;
    #line 412 
    int tmp_85;
    #line 412 
    int tmp_86;
    #line 412 
    int tmp_118;
    #line 412 
    int tmp_119;
    #line 412 
    int tmp_87;
    #line 412 
    int tmp_88;
    #line 412 
    int tmp_120;
    #line 412 
    int tmp_121;
    #line 412 
    int tmp_89;
    #line 412 
    int tmp_90;
    #line 412 
    int tmp_122;
    #line 412 
    int tmp_123;
    #line 412 
    int tmp_91;
    #line 412 
    int tmp_127;
    #line 412 
    if (0 != 0) {
      #line 412 
      if (rss_sz > 1) {
        #line 412 
        if (((unsigned long long)rss_sz & 9223372036854775808ULL) == 0ULL) {
          #line 412 
          if (((unsigned long long)rss_sz & 4611686018427387904ULL) == 0ULL) {
            #line 412 
            if (((unsigned long long)rss_sz & 2305843009213693952ULL) == 0ULL) {
              #line 412 
              if (((unsigned long long)rss_sz & 1152921504606846976ULL) == 0ULL) {
                #line 412 
                if (((unsigned long long)rss_sz & 576460752303423488ULL) == 0ULL) {
                  #line 412 
                  if (((unsigned long long)rss_sz & 288230376151711744ULL) == 0ULL) {
                    #line 412 
                    if (((unsigned long long)rss_sz & 144115188075855872ULL) == 0ULL) {
                      #line 412 
                      if (((unsigned long long)rss_sz & 72057594037927936ULL) == 0ULL) {
                        #line 412 
                        if (((unsigned long long)rss_sz & 36028797018963968ULL) == 0ULL) {
                          #line 412 
                          if (((unsigned long long)rss_sz & 18014398509481984ULL) == 0ULL) {
                            #line 412 
                            if (((unsigned long long)rss_sz & 9007199254740992ULL) == 0ULL) {
                              #line 412 
                              if (((unsigned long long)rss_sz & 4503599627370496ULL) == 0ULL) {
                                #line 412 
                                if (((unsigned long long)rss_sz & 2251799813685248ULL) == 0ULL) {
                                  #line 412 
                                  if (((unsigned long long)rss_sz & 1125899906842624ULL) == 0ULL) {
                                    #line 412 
                                    if (((unsigned long long)rss_sz & 562949953421312ULL) == 0ULL) {
                                      #line 412 
                                      if (((unsigned long long)rss_sz & 281474976710656ULL) == 0ULL) {
                                        #line 412 
                                        if (((unsigned long long)rss_sz & 140737488355328ULL) == 0ULL) {
                                          #line 412 
                                          if (((unsigned long long)rss_sz & 70368744177664ULL) == 0ULL) {
                                            #line 412 
                                            if (((unsigned long long)rss_sz & 35184372088832ULL) == 0ULL) {
                                              #line 412 
                                              if (((unsigned long long)rss_sz & 17592186044416ULL) == 0ULL) {
                                                #line 412 
                                                if (((unsigned long long)rss_sz & 8796093022208ULL) == 0ULL) {
                                                  #line 412 
                                                  if (((unsigned long long)rss_sz & 4398046511104ULL) == 0ULL) {
                                                    #line 412 
                                                    if (((unsigned long long)rss_sz & 2199023255552ULL) == 0ULL) {
                                                      #line 412 
                                                      if (((unsigned long long)rss_sz & 1099511627776ULL) == 0ULL) {
                                                        #line 412 
                                                        if (((unsigned long long)rss_sz & 549755813888ULL) == 0ULL) {
                                                          #line 412 
                                                          if (((unsigned long long)rss_sz & 274877906944ULL) == 0ULL) {
                                                            #line 412 
                                                            if (((unsigned long long)rss_sz & 137438953472ULL) == 0ULL) {
                                                              #line 412 
                                                              if (((unsigned long long)rss_sz & 68719476736ULL) == 0ULL) {
                                                                #line 412 
                                                                if (((unsigned long long)rss_sz & 34359738368ULL) == 0ULL) {
                                                                  #line 412 
                                                                  if (
                                                                    ((unsigned long long)rss_sz & 17179869184ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 8589934592ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 4294967296ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 2147483648ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 1073741824ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 536870912ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 268435456ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 134217728ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 67108864ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 33554432ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 16777216ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 8388608ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 4194304ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 2097152ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 1048576ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 524288ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 262144ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 131072ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 65536ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 32768ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 16384ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 8192ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 4096ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 2048ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 1024ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 512ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 256ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 128ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 64ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 32ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 16ULL) == 0ULL) {
                                                                    #line 412 
                                                                    if (
                                                                    ((unsigned long long)rss_sz & 8ULL) == 0ULL) 
                                                                    #line 412 
                                                                    tmp_64 = ((int)((unsigned long long)rss_sz >> 2) << 16) & 65536; else 
                                                                    #line 412 
                                                                    tmp_64 = 131072;
                                                                    #line 412 
                                                                    tmp_65 = tmp_64;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_65 = 196608;
                                                                    #line 412 
                                                                    tmp_66 = tmp_65;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_66 = 262144;
                                                                    #line 412 
                                                                    tmp_67 = tmp_66;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_67 = 327680;
                                                                    #line 412 
                                                                    tmp_68 = tmp_67;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_68 = 393216;
                                                                    #line 412 
                                                                    tmp_69 = tmp_68;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_69 = 458752;
                                                                    #line 412 
                                                                    tmp_70 = tmp_69;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_70 = 524288;
                                                                    #line 412 
                                                                    tmp_71 = tmp_70;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_71 = 589824;
                                                                    #line 412 
                                                                    tmp_72 = tmp_71;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_72 = 655360;
                                                                    #line 412 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_73 = 720896;
                                                                    #line 412 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_74 = 786432;
                                                                    #line 412 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_75 = 851968;
                                                                    #line 412 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_76 = 917504;
                                                                    #line 412 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_77 = 983040;
                                                                    #line 412 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_78 = 1048576;
                                                                    #line 412 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_79 = 1114112;
                                                                    #line 412 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_80 = 1179648;
                                                                    #line 412 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_81 = 1245184;
                                                                    #line 412 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_82 = 1310720;
                                                                    #line 412 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_83 = 1376256;
                                                                    #line 412 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_84 = 1441792;
                                                                    #line 412 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_85 = 1507328;
                                                                    #line 412 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_86 = 1572864;
                                                                    #line 412 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_87 = 1638400;
                                                                    #line 412 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_88 = 1703936;
                                                                    #line 412 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_89 = 1769472;
                                                                    #line 412 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_90 = 1835008;
                                                                    #line 412 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_91 = 1900544;
                                                                    #line 412 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_92 = 1966080;
                                                                    #line 412 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_93 = 2031616;
                                                                    #line 412 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    #line 412 
                                                                    tmp_94 = 2097152;
                                                                    #line 412 
                                                                    tmp_95 = tmp_94;
                                                                  }
                                                                  else 
                                                                    #line 412 
                                                                    tmp_95 = 2162688;
                                                                  #line 412 
                                                                  tmp_96 = tmp_95;
                                                                }
                                                                else 
                                                                  #line 412 
                                                                  tmp_96 = 2228224;
                                                                #line 412 
                                                                tmp_97 = tmp_96;
                                                              }
                                                              else 
                                                                   #line 412 
                                                                   tmp_97 = 2293760;
                                                              #line 412 
                                                              tmp_98 = tmp_97;
                                                            }
                                                            else 
                                                                 #line 412 
                                                                 tmp_98 = 2359296;
                                                            #line 412 
                                                            tmp_99 = tmp_98;
                                                          }
                                                          else 
                                                               #line 412 
                                                               tmp_99 = 2424832;
                                                          #line 412 
                                                          tmp_100 = tmp_99;
                                                        }
                                                        else 
                                                             #line 412 
                                                             tmp_100 = 2490368;
                                                        #line 412 
                                                        tmp_101 = tmp_100;
                                                      }
                                                      else 
                                                           #line 412 
                                                           tmp_101 = 2555904;
                                                      #line 412 
                                                      tmp_102 = tmp_101;
                                                    }
                                                    else 
                                                         #line 412 
                                                         tmp_102 = 2621440;
                                                    #line 412 
                                                    tmp_103 = tmp_102;
                                                  }
                                                  else 
                                                       #line 412 
                                                       tmp_103 = 2686976;
                                                  #line 412 
                                                  tmp_104 = tmp_103;
                                                }
                                                else 
                                                     #line 412 
                                                     tmp_104 = 2752512;
                                                #line 412 
                                                tmp_105 = tmp_104;
                                              }
                                              else 
                                                   #line 412 
                                                   tmp_105 = 2818048;
                                              #line 412 
                                              tmp_106 = tmp_105;
                                            }
                                            else 
                                                 #line 412 
                                                 tmp_106 = 2883584;
                                            #line 412 
                                            tmp_107 = tmp_106;
                                          }
                                          else 
                                               #line 412 
                                               tmp_107 = 2949120;
                                          #line 412 
                                          tmp_108 = tmp_107;
                                        }
                                        else 
                                             #line 412 
                                             tmp_108 = 3014656;
                                        #line 412 
                                        tmp_109 = tmp_108;
                                      }
                                      else 
                                           #line 412 
                                           tmp_109 = 3080192;
                                      #line 412 
                                      tmp_110 = tmp_109;
                                    }
                                    else 
                                         #line 412 
                                         tmp_110 = 3145728;
                                    #line 412 
                                    tmp_111 = tmp_110;
                                  }
                                  else 
                                       #line 412 
                                       tmp_111 = 3211264;
                                  #line 412 
                                  tmp_112 = tmp_111;
                                }
                                else 
                                     #line 412 
                                     tmp_112 = 3276800;
                                #line 412 
                                tmp_113 = tmp_112;
                              }
                              else 
                                   #line 412 
                                   tmp_113 = 3342336;
                              #line 412 
                              tmp_114 = tmp_113;
                            }
                            else 
                                 #line 412 
                                 tmp_114 = 3407872;
                            #line 412 
                            tmp_115 = tmp_114;
                          }
                          else 
                               #line 412 
                               tmp_115 = 3473408;
                          #line 412 
                          tmp_116 = tmp_115;
                        }
                        else 
                             #line 412 
                             tmp_116 = 3538944;
                        #line 412 
                        tmp_117 = tmp_116;
                      }
                      else 
                           #line 412 
                           tmp_117 = 3604480;
                      #line 412 
                      tmp_118 = tmp_117;
                    }
                    else 
                         #line 412 
                         tmp_118 = 3670016;
                    #line 412 
                    tmp_119 = tmp_118;
                  }
                  else 
                       #line 412 
                       tmp_119 = 3735552;
                  #line 412 
                  tmp_120 = tmp_119;
                }
                else 
                     #line 412 
                     tmp_120 = 3801088;
                #line 412 
                tmp_121 = tmp_120;
              }
              else 
                   #line 412 
                   tmp_121 = 3866624;
              #line 412 
              tmp_122 = tmp_121;
            }
            else 
                 #line 412 
                 tmp_122 = 3932160;
            #line 412 
            tmp_123 = tmp_122;
          }
          else 
               #line 412 
               tmp_123 = 3997696;
          #line 412 
          tmp_124 = tmp_123;
        }
        else 
             #line 412 
             tmp_124 = 4063232;
        #line 412 
        tmp_125 = tmp_124;
      }
      else 
           #line 412 
           tmp_125 = -65536;
      #line 412 
      tmp_127 = tmp_125;
    }
    else {
      #line 412 
      tmp_127 = (__ilog2_u32((unsigned int)rss_sz) + -1) << 16;
    }
    #line 411 
    ;
    #line 411 
    ;
    #line 411 
    ;
    #line 411 
    ;
    #line 411 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((nixlf << 17) | 17920) | (grp << 3)),(unsigned long long)(tmp_127 | rss_sz * grp));
    #line 410 
    grp ++;
  }
  #line 413 
  return 0;
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_aq_enqueue_wait(struct rvu *rvu, struct rvu_block *block, struct nix_aq_inst_s *inst)
{
  #line 420 
  struct nix_aq_res_s *result;
  #line 422 
  u64 reg;
  #line 422 
  u64 head;
  #line 419 
  struct admin_queue *aq = block->aq;
  #line 421 
  int timeout = 1000;
  #line 424 
  result = (struct nix_aq_res_s *)(aq->res)->base;
  #line 427 
  reg = rvu_read64(rvu,(unsigned long long)block->addr,1056ULL);
  #line 428 
  head = (reg >> 4) & 1048575ULL;
  #line 430 
  memcpy((aq->inst)->base + (unsigned long long)(aq->inst)->entry_sz * head,(void *)inst,(unsigned long)(aq->inst)->entry_sz);
  #line 432 
  memset((void *)result,0,16UL);
  #line 433 
  ldv_inline_asm();
  #line 437 
  rvu_write64(rvu,(unsigned long long)block->addr,1072ULL,1ULL);
  #line 438 
  while ((unsigned int)result->compcode == 0U) {
    #line 439 
    cpu_relax();
    #line 440 
    __const_udelay(4295UL);
    #line 441 
    timeout --;
    #line 442 
    if (timeout == 0) 
                      #line 443 
                      return -16;
  }
  #line 446 
  if ((unsigned int)result->compcode != 1U) 
                                            #line 448 
                                            return -16;
  #line 450 
  return 0;
}

#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int rvu_nix_aq_enq_inst(struct rvu *rvu, struct nix_aq_enq_req *req, struct nix_aq_enq_rsp *rsp)
{
  #line 458 
  int nixlf;
  #line 458 
  int blkaddr;
  #line 459 
  struct nix_aq_inst_s inst;
  #line 460 
  struct rvu_block *block;
  #line 461 
  struct admin_queue *aq;
  #line 462 
  struct rvu_pfvf *pfvf;
  #line 463 
  void *ctx;
  #line 463 
  void *mask;
  #line 464 
  bool ena;
  #line 465 
  u64 cfg;
  #line 456 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 457 
  u16 pcifunc = req->hdr.pcifunc;
  #line 458 
  int rc = 0;
  #line 467 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 468 
  if (blkaddr < 0) 
                   #line 469 
                   return -404;
  #line 471 
  block = & hw->block[blkaddr];
  #line 472 
  aq = block->aq;
  #line 473 
  if (aq == (struct admin_queue *)0) {
    #line 474 
    _dev_warn(rvu->dev,(char *)"%s: NIX AQ not initialized\n",(char *)"rvu_nix_aq_enq_inst");
    #line 475 
    return -403;
  }
  #line 478 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 479 
  nixlf = rvu_get_lf(rvu,block,(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 482 
  if (rsp != (struct nix_aq_enq_rsp *)0 || (unsigned int)req->ctype != 3U) 
    #line 483 
    if (! pfvf->nixlf || nixlf < 0) 
                                    #line 484 
                                    return -404;
  #line 487 
  switch ((int)req->ctype) {
    #line 488 
    case 0: 
            #line 488 
    ;
    #line 490 
    if (pfvf->rq_ctx == (struct qmem *)0 || req->qidx >= (pfvf->rq_ctx)->qsize) 
      #line 491 
      rc = -403;
    #line 492 
    break;
    #line 493 
    case 1: 
            #line 493 
    ;
    #line 494 
    if (pfvf->sq_ctx == (struct qmem *)0 || req->qidx >= (pfvf->sq_ctx)->qsize) 
      #line 495 
      rc = -403;
    #line 496 
    break;
    #line 497 
    case 2: 
            #line 497 
    ;
    #line 498 
    if (pfvf->cq_ctx == (struct qmem *)0 || req->qidx >= (pfvf->cq_ctx)->qsize) 
      #line 499 
      rc = -403;
    #line 500 
    break;
    #line 501 
    case 4: 
            #line 501 
    ;
    #line 503 
    cfg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16576));
    #line 504 
    if (((cfg & 16ULL) == 0ULL || pfvf->rss_ctx == (struct qmem *)0) || (unsigned long)req->qidx >= 256UL << (cfg & 15ULL)) 
      #line 506 
      rc = -403;
    #line 507 
    break;
    #line 508 
    case 3: 
            #line 508 
    ;
    #line 509 
    cfg = rvu_read64(rvu,(unsigned long long)blkaddr,272ULL);
    #line 511 
    if ((hw->nix0)->mcast.mce_ctx == (struct qmem *)0 || (unsigned long)req->qidx >= 256UL << (cfg & 15ULL)) 
      #line 513 
      rc = -403;
    #line 518 
    if (rsp != (struct nix_aq_enq_rsp *)0) 
                                           #line 519 
                                           rc = -403;
    #line 520 
    break;
    #line 521 
    default: 
             #line 521 
    ;
    #line 522 
    rc = -403;
  }
  #line 525 
  if (rc != 0) 
               #line 526 
               return rc;
  #line 529 
  if ((((unsigned int)req->op == 1U || ((unsigned int)req->op == 2U && (unsigned int)req->__anonCompField_nix_aq_enq_req_166.sq_mask.ena != 0U) && (unsigned int)req->__anonCompField_nix_aq_enq_req_166.sq_mask.smq != 0U) && (unsigned int)req->__anonCompField_nix_aq_enq_req_165.sq.ena != 0U) && (unsigned int)req->ctype == 1U) {
    #line 533 
    if (! is_valid_txschq(rvu,blkaddr,0,(unsigned short)((int)pcifunc),
                      (unsigned short)((int)req->__anonCompField_nix_aq_enq_req_165.sq.smq))) 
      #line 535 
      return -403;
  }
  #line 538 
  memset((void *)(& inst),0,16UL);
  #line 539 
  inst.lf = (unsigned long long)nixlf;
  #line 540 
  inst.cindex = (unsigned long long)req->qidx;
  #line 541 
  inst.ctype = (unsigned long long)req->ctype;
  #line 542 
  inst.op = (unsigned long long)req->op;
  #line 546 
  inst.res_addr = (aq->res)->iova;
  #line 549 
  memset((aq->res)->base,0,(unsigned long)(aq->res)->entry_sz);
  #line 551 
  ctx = (aq->res)->base + 128U;
  #line 553 
  mask = (aq->res)->base + 256U;
  #line 555 
  switch ((int)req->op) {
    #line 556 
    case 2: 
            #line 556 
    ;
    #line 557 
    if ((unsigned int)req->ctype == 0U) 
                                        #line 558 
                                        memcpy(mask,(void *)(& req->__anonCompField_nix_aq_enq_req_166.rq_mask),128UL);
    else 
      #line 560 
      if ((unsigned int)req->ctype == 1U) 
                                          #line 561 
                                          memcpy(mask,(void *)(& req->__anonCompField_nix_aq_enq_req_166.sq_mask),128UL);
      else 
        #line 563 
        if ((unsigned int)req->ctype == 2U) 
                                            #line 564 
                                            memcpy(mask,(void *)(& req->__anonCompField_nix_aq_enq_req_166.cq_mask),32UL);
        else 
          #line 566 
          if ((unsigned int)req->ctype == 4U) 
                                              #line 567 
                                              memcpy(mask,(void *)(& req->__anonCompField_nix_aq_enq_req_166.rss_mask),4UL);
          else 
            #line 569 
            if ((unsigned int)req->ctype == 3U) 
                                                #line 570 
                                                memcpy(mask,(void *)(& req->__anonCompField_nix_aq_enq_req_166.mce_mask),8UL);
    #line 573 
    case 1: 
            #line 573 
    ;
    #line 574 
    if ((unsigned int)req->ctype == 0U) 
                                        #line 575 
                                        memcpy(ctx,(void *)(& req->__anonCompField_nix_aq_enq_req_165.rq),128UL);
    else 
      #line 576 
      if ((unsigned int)req->ctype == 1U) 
                                          #line 577 
                                          memcpy(ctx,(void *)(& req->__anonCompField_nix_aq_enq_req_165.sq),128UL);
      else 
        #line 578 
        if ((unsigned int)req->ctype == 2U) 
                                            #line 579 
                                            memcpy(ctx,(void *)(& req->__anonCompField_nix_aq_enq_req_165.cq),32UL);
        else 
          #line 580 
          if ((unsigned int)req->ctype == 4U) 
                                              #line 581 
                                              memcpy(ctx,(void *)(& req->__anonCompField_nix_aq_enq_req_165.rss),4UL);
          else 
            #line 582 
            if ((unsigned int)req->ctype == 3U) 
                                                #line 583 
                                                memcpy(ctx,(void *)(& req->__anonCompField_nix_aq_enq_req_165.mce),8UL);
    #line 584 
    break;
    #line 585 
    case 0: 
            #line 585 
    ;
    #line 586 
    case 3: 
            #line 586 
    ;
    #line 587 
    case 4: 
            #line 587 
    ;
    #line 588 
    case 5: 
            #line 588 
    ;
    #line 589 
    break;
    #line 590 
    default: 
             #line 590 
    ;
    #line 591 
    rc = -403;
    #line 592 
    return rc;
  }
  #line 595 
  cif_spin_lock_lock_of_admin_queue_0(& aq->lock);
  #line 598 
  rc = nix_aq_enqueue_wait(rvu,block,& inst);
  #line 599 
  if (rc != 0) {
    #line 600 
    cif_spin_unlock_lock_of_admin_queue_0(& aq->lock);
    #line 601 
    return rc;
  }
  #line 605 
  if ((unsigned int)req->op == 1U) {
    #line 606 
    if ((unsigned int)req->ctype == 0U && (unsigned int)req->__anonCompField_nix_aq_enq_req_165.rq.ena != 0U) 
      #line 607 
      __set_bit((long)req->qidx,pfvf->rq_bmap);
    #line 608 
    if ((unsigned int)req->ctype == 1U && (unsigned int)req->__anonCompField_nix_aq_enq_req_165.sq.ena != 0U) 
      #line 609 
      __set_bit((long)req->qidx,pfvf->sq_bmap);
    #line 610 
    if ((unsigned int)req->ctype == 2U && (unsigned int)req->__anonCompField_nix_aq_enq_req_165.cq.ena != 0U) 
      #line 611 
      __set_bit((long)req->qidx,pfvf->cq_bmap);
  }
  #line 614 
  if ((unsigned int)req->op == 2U) {
    #line 615 
    if ((unsigned int)req->ctype == 0U) {
      #line 616 
      ena = (_Bool)((((int)req->__anonCompField_nix_aq_enq_req_165.rq.ena & (int)req->__anonCompField_nix_aq_enq_req_166.rq_mask.ena) | ((int)test_bit((long)req->qidx,pfvf->rq_bmap) & ~ ((int)req->__anonCompField_nix_aq_enq_req_166.rq_mask.ena))) != 0);
      #line 619 
      if ((int)ena != 0) 
                         #line 620 
                         __set_bit((long)req->qidx,pfvf->rq_bmap); else 
                                                                    #line 622 
                                                                    __set_bit((long)req->qidx,pfvf->rq_bmap);
    }
    #line 624 
    if ((unsigned int)req->ctype == 1U) {
      #line 625 
      ena = (_Bool)((((int)req->__anonCompField_nix_aq_enq_req_165.rq.ena & (int)req->__anonCompField_nix_aq_enq_req_166.sq_mask.ena) | ((int)test_bit((long)req->qidx,pfvf->sq_bmap) & ~ ((int)req->__anonCompField_nix_aq_enq_req_166.sq_mask.ena))) != 0);
      #line 628 
      if ((int)ena != 0) 
                         #line 629 
                         __set_bit((long)req->qidx,pfvf->sq_bmap); else 
                                                                    #line 631 
                                                                    __set_bit((long)req->qidx,pfvf->sq_bmap);
    }
    #line 633 
    if ((unsigned int)req->ctype == 2U) {
      #line 634 
      ena = (_Bool)((((int)req->__anonCompField_nix_aq_enq_req_165.rq.ena & (int)req->__anonCompField_nix_aq_enq_req_166.cq_mask.ena) | ((int)test_bit((long)req->qidx,pfvf->cq_bmap) & ~ ((int)req->__anonCompField_nix_aq_enq_req_166.cq_mask.ena))) != 0);
      #line 637 
      if ((int)ena != 0) 
                         #line 638 
                         __set_bit((long)req->qidx,pfvf->cq_bmap); else 
                                                                    #line 640 
                                                                    __set_bit((long)req->qidx,pfvf->cq_bmap);
    }
  }
  #line 644 
  if (rsp != (struct nix_aq_enq_rsp *)0) 
    #line 646 
    if ((unsigned int)req->op == 3U) 
      #line 647 
      if ((unsigned int)req->ctype == 0U) 
                                          #line 648 
                                          memcpy((void *)(& rsp->__anonCompField_nix_aq_enq_rsp_167.rq),ctx,128UL);
      else 
        #line 650 
        if ((unsigned int)req->ctype == 1U) 
                                            #line 651 
                                            memcpy((void *)(& rsp->__anonCompField_nix_aq_enq_rsp_167.sq),ctx,128UL);
        else 
          #line 653 
          if ((unsigned int)req->ctype == 2U) 
                                              #line 654 
                                              memcpy((void *)(& rsp->__anonCompField_nix_aq_enq_rsp_167.cq),ctx,32UL);
          else 
            #line 656 
            if ((unsigned int)req->ctype == 4U) 
                                                #line 657 
                                                memcpy((void *)(& rsp->__anonCompField_nix_aq_enq_rsp_167.rss),ctx,4UL);
            else 
              #line 659 
              if ((unsigned int)req->ctype == 3U) 
                                                  #line 660 
                                                  memcpy((void *)(& rsp->__anonCompField_nix_aq_enq_rsp_167.mce),ctx,8UL);
  #line 665 
  cif_spin_unlock_lock_of_admin_queue_0(& aq->lock);
  #line 666 
  return 0;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static char *nix_get_ctx_name(int ctype)
{
  #line 671 
  switch (ctype) {
    #line 672 
    case 2: 
            #line 672 
    ;
    #line 673 
    return (char *)"CQ";
    #line 674 
    case 1: 
            #line 674 
    ;
    #line 675 
    return (char *)"SQ";
    #line 676 
    case 0: 
            #line 676 
    ;
    #line 677 
    return (char *)"RQ";
    #line 678 
    case 4: 
            #line 678 
    ;
    #line 679 
    return (char *)"RSS";
  }
  #line 681 
  return (char *)"";
}

#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_lf_hwctx_disable(struct rvu *rvu, struct hwctx_disable_req *req)
{
  #line 687 
  struct nix_aq_enq_req aq_req;
  #line 688 
  unsigned long *bmap;
  #line 689 
  int qidx;
  #line 690 
  int rc;
  #line 686 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,(int)req->hdr.pcifunc);
  #line 689 
  int q_cnt = 0;
  #line 690 
  int err = 0;
  #line 692 
  if ((pfvf->cq_ctx == (struct qmem *)0 || pfvf->sq_ctx == (struct qmem *)0) || pfvf->rq_ctx == (struct qmem *)0) 
    #line 693 
    return -403;
  #line 695 
  memset((void *)(& aq_req),0,280UL);
  #line 696 
  aq_req.hdr.pcifunc = req->hdr.pcifunc;
  #line 698 
  if ((unsigned int)req->ctype == 2U) {
    #line 699 
    aq_req.__anonCompField_nix_aq_enq_req_165.cq.ena = (unsigned long long)0U;
    #line 700 
    aq_req.__anonCompField_nix_aq_enq_req_166.cq_mask.ena = (unsigned long long)1U;
    #line 701 
    q_cnt = (int)(pfvf->cq_ctx)->qsize;
    #line 702 
    bmap = pfvf->cq_bmap;
  }
  #line 704 
  if ((unsigned int)req->ctype == 1U) {
    #line 705 
    aq_req.__anonCompField_nix_aq_enq_req_165.sq.ena = (unsigned long long)0U;
    #line 706 
    aq_req.__anonCompField_nix_aq_enq_req_166.sq_mask.ena = (unsigned long long)1U;
    #line 707 
    q_cnt = (int)(pfvf->sq_ctx)->qsize;
    #line 708 
    bmap = pfvf->sq_bmap;
  }
  #line 710 
  if ((unsigned int)req->ctype == 0U) {
    #line 711 
    aq_req.__anonCompField_nix_aq_enq_req_165.rq.ena = (unsigned long long)0U;
    #line 712 
    aq_req.__anonCompField_nix_aq_enq_req_166.rq_mask.ena = (unsigned long long)1U;
    #line 713 
    q_cnt = (int)(pfvf->rq_ctx)->qsize;
    #line 714 
    bmap = pfvf->rq_bmap;
  }
  #line 717 
  aq_req.ctype = req->ctype;
  #line 718 
  aq_req.op = (unsigned char)2U;
  #line 720 
  qidx = 0;
  #line 720 
  while (qidx < q_cnt) {
    {
      #line 721 
      if (! test_bit((long)qidx,bmap)) 
                                       #line 722 
                                       goto __Cont;
      #line 723 
      aq_req.qidx = (unsigned int)qidx;
      #line 724 
      rc = rvu_nix_aq_enq_inst(rvu,& aq_req,(struct nix_aq_enq_rsp *)0);
      #line 725 
      if (rc != 0) {
        #line 726 
        err = rc;
        #line 727 
        ;
        #line 727 
        ;
        #line 727 
        _dev_err(rvu->dev,(char *)"Failed to disable %s:%d context\n",nix_get_ctx_name((int)req->ctype),qidx);
      }
    }
    #line 720 
    __Cont: 
            #line 720 
    qidx ++;
  }
  #line 732 
  return err;
}

#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_lf_hwctx_lockdown(struct rvu *rvu, struct nix_aq_enq_req *req)
{
  #line 738 
  struct nix_aq_enq_req lock_ctx_req;
  #line 739 
  int err;
  #line 741 
  if ((unsigned int)req->op != 1U) 
                                   #line 742 
                                   return 0;
  #line 744 
  if ((unsigned int)req->ctype == 3U || (unsigned int)req->ctype == 5U) 
    #line 746 
    return 0;
  #line 748 
  memset((void *)(& lock_ctx_req),0,280UL);
  #line 749 
  lock_ctx_req.hdr.pcifunc = req->hdr.pcifunc;
  #line 750 
  lock_ctx_req.ctype = req->ctype;
  #line 751 
  lock_ctx_req.op = (unsigned char)4U;
  #line 752 
  lock_ctx_req.qidx = req->qidx;
  #line 753 
  err = rvu_nix_aq_enq_inst(rvu,& lock_ctx_req,(struct nix_aq_enq_rsp *)0);
  #line 754 
  if (err != 0) {
    #line 755 
    ;
    #line 755 
    ;
    #line 755 
    ;
    #line 755 
    _dev_err(rvu->dev,(char *)"PFUNC 0x%x: Failed to lock NIX %s:%d context\n",(int)req->hdr.pcifunc,nix_get_ctx_name((int)req->ctype),req->qidx);
  }
  #line 759 
  return err;
}

#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_aq_enq(struct rvu *rvu, struct nix_aq_enq_req *req, struct nix_aq_enq_rsp *rsp)
{
  #line 766 
  int err;
  #line 768 
  err = rvu_nix_aq_enq_inst(rvu,req,rsp);
  #line 769 
  if (err == 0) 
                #line 770 
                err = nix_lf_hwctx_lockdown(rvu,req);
  #line 771 
  return err;
}

#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_hwctx_disable(struct rvu *rvu, struct hwctx_disable_req *req, struct msg_rsp *rsp)
{
  #line 787 
  return nix_lf_hwctx_disable(rvu,req);
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_lf_alloc(struct rvu *rvu, struct nix_lf_alloc_req *req, struct nix_lf_alloc_rsp *rsp)
{
  #line 794 
  int nixlf;
  #line 794 
  int qints;
  #line 794 
  int hwctx_size;
  #line 794 
  int intf;
  #line 794 
  int err;
  #line 797 
  struct rvu_block *block;
  #line 798 
  struct rvu_pfvf *pfvf;
  #line 799 
  u64 cfg;
  #line 799 
  u64 ctx_cfg;
  #line 800 
  int blkaddr;
  #line 794 
  int rc = 0;
  #line 795 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 796 
  u16 pcifunc = req->hdr.pcifunc;
  #line 802 
  if ((req->rq_cnt == 0U || req->sq_cnt == 0U) || req->cq_cnt == 0U) 
    #line 803 
    return -401;
  #line 805 
  if (req->way_mask != 0ULL) 
                             #line 806 
                             req->way_mask &= 65535ULL;
  #line 808 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 809 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 810 
  if (! pfvf->nixlf || blkaddr < 0) 
                                    #line 811 
                                    return -404;
  #line 813 
  block = & hw->block[blkaddr];
  #line 814 
  nixlf = rvu_get_lf(rvu,block,(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 815 
  if (nixlf < 0) 
                 #line 816 
                 return -404;
  #line 819 
  if ((unsigned int)req->npa_func != 0U) {
    #line 821 
    if ((unsigned int)req->npa_func == 65535U) 
                                               #line 822 
                                               req->npa_func = pcifunc;
    #line 823 
    if (! is_pffunc_map_valid(rvu,(unsigned short)((int)req->npa_func),4)) 
      #line 824 
      return -419;
  }
  #line 828 
  if ((unsigned int)req->sso_func != 0U) {
    #line 830 
    if ((unsigned int)req->sso_func == 65535U) 
                                               #line 831 
                                               req->sso_func = pcifunc;
    #line 832 
    if (! is_pffunc_map_valid(rvu,(unsigned short)((int)req->sso_func),6)) 
      #line 833 
      return -420;
  }
  #line 841 
  if ((unsigned int)req->rss_sz != 0U) 
    #line 841 
    if ((unsigned int)req->rss_sz > 256U) 
                                          #line 843 
                                          return -408;
    else {
      #line 842 
      if (! is_power_of_2((unsigned long)req->rss_sz)) 
                                                       #line 843 
                                                       return -408;
    }
  #line 845 
  if ((unsigned int)req->rss_sz != 0U && (unsigned int)req->rss_grps + 255U > 7U) 
    #line 847 
    return -409;
  #line 850 
  err = rvu_lf_reset(rvu,block,nixlf);
  #line 851 
  if (err != 0) {
    #line 852 
    _dev_err(rvu->dev,(char *)"Failed to reset NIX%d LF%d\n",(int)block->addr + -4,nixlf);
    #line 854 
    return -414;
  }
  #line 857 
  ctx_cfg = rvu_read64(rvu,(unsigned long long)blkaddr,56ULL);
  #line 860 
  hwctx_size = (int)(1UL << ((ctx_cfg >> 4) & 15ULL));
  #line 861 
  err = qmem_alloc_0(rvu->dev,& pfvf->rq_ctx,(int)req->rq_cnt,hwctx_size);
  #line 862 
  if (err != 0) 
                #line 863 
                goto free_mem;
  #line 865 
  pfvf->rq_bmap = (unsigned long *)kcalloc_1((unsigned long)req->rq_cnt,8UL,3264U);
  #line 866 
  if (pfvf->rq_bmap == (unsigned long *)0UL) 
                                             #line 867 
                                             goto free_mem;
  #line 869 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16464),(pfvf->rq_ctx)->iova);
  #line 873 
  cfg = ((unsigned long long)(req->rq_cnt + 4294967295U) | (req->way_mask << 20)) | 68719476736ULL;
  #line 874 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16448),cfg);
  #line 877 
  hwctx_size = (int)(1UL << (ctx_cfg & 15ULL));
  #line 878 
  err = qmem_alloc_0(rvu->dev,& pfvf->sq_ctx,(int)req->sq_cnt,hwctx_size);
  #line 879 
  if (err != 0) 
                #line 880 
                goto free_mem;
  #line 882 
  pfvf->sq_bmap = (unsigned long *)kcalloc_1((unsigned long)req->sq_cnt,8UL,3264U);
  #line 883 
  if (pfvf->sq_bmap == (unsigned long *)0UL) 
                                             #line 884 
                                             goto free_mem;
  #line 886 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16432),(pfvf->sq_ctx)->iova);
  #line 889 
  cfg = ((unsigned long long)(req->sq_cnt + 4294967295U) | (req->way_mask << 20)) | 68719476736ULL;
  #line 890 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16416),cfg);
  #line 893 
  hwctx_size = (int)(1UL << ((ctx_cfg >> 8) & 15ULL));
  #line 894 
  err = qmem_alloc_0(rvu->dev,& pfvf->cq_ctx,(int)req->cq_cnt,hwctx_size);
  #line 895 
  if (err != 0) 
                #line 896 
                goto free_mem;
  #line 898 
  pfvf->cq_bmap = (unsigned long *)kcalloc_1((unsigned long)req->cq_cnt,8UL,3264U);
  #line 899 
  if (pfvf->cq_bmap == (unsigned long *)0UL) 
                                             #line 900 
                                             goto free_mem;
  #line 902 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16496),(pfvf->cq_ctx)->iova);
  #line 905 
  cfg = ((unsigned long long)(req->cq_cnt + 4294967295U) | (req->way_mask << 20)) | 68719476736ULL;
  #line 906 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16480),cfg);
  #line 909 
  hwctx_size = (int)(1UL << ((ctx_cfg >> 12) & 15ULL));
  #line 910 
  err = nixlf_rss_ctx_init(rvu,blkaddr,pfvf,nixlf,(int)req->rss_sz,(int)req->rss_grps,hwctx_size,req->way_mask);
  #line 912 
  if (err != 0) 
                #line 913 
                goto free_mem;
  #line 916 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,48ULL);
  #line 917 
  qints = (int)(cfg >> 24) & 4095;
  #line 918 
  hwctx_size = (int)(1UL << ((ctx_cfg >> 24) & 15ULL));
  #line 919 
  err = qmem_alloc_0(rvu->dev,& pfvf->cq_ints_ctx,qints,hwctx_size);
  #line 920 
  if (err != 0) 
                #line 921 
                goto free_mem;
  #line 923 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16688),(pfvf->cq_ints_ctx)->iova);
  #line 926 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16672),(req->way_mask << 20) | 68719476736ULL);
  #line 930 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,48ULL);
  #line 931 
  qints = (int)(cfg >> 12) & 4095;
  #line 932 
  hwctx_size = (int)(1UL << ((ctx_cfg >> 20) & 15ULL));
  #line 933 
  err = qmem_alloc_0(rvu->dev,& pfvf->nix_qints_ctx,qints,hwctx_size);
  #line 934 
  if (err != 0) 
                #line 935 
                goto free_mem;
  #line 937 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16656),(pfvf->nix_qints_ctx)->iova);
  #line 939 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16640),(req->way_mask << 20) | 68719476736ULL);
  #line 946 
  cfg = 2164295848ULL;
  #line 947 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16512),cfg);
  #line 950 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16424),1ULL);
  #line 953 
  if ((unsigned int)req->npa_func != 0U) 
                                         #line 954 
                                         cfg = (unsigned long long)req->npa_func;
  #line 955 
  if ((unsigned int)req->sso_func != 0U) 
                                         #line 956 
                                         cfg = ((unsigned long long)req->sso_func << 16) | cfg;
  #line 958 
  cfg = ((unsigned long long)req->xqe_sz << 33) | cfg;
  #line 959 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16384),cfg);
  #line 962 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16544),req->rx_cfg);
  #line 964 
  intf = is_afvf((unsigned short)((int)pcifunc)) != 0;
  #line 965 
  err = nix_interface_init(rvu,(unsigned short)((int)pcifunc),intf,nixlf);
  #line 966 
  if (err != 0) 
                #line 967 
                goto free_mem;
  #line 970 
  rvu_npc_disable_default_entries(rvu,(unsigned short)((int)pcifunc),nixlf);
  #line 972 
  goto exit;
  #line 974 
  free_mem: 
            #line 974 
  ;
  #line 975 
  nix_ctx_free(rvu,pfvf);
  #line 976 
  rc = -12;
  #line 978 
  exit: 
        #line 978 
  ;
  #line 980 
  ether_addr_copy((u8 *)(& rsp->mac_addr),(u8 *)(& pfvf->mac_addr));
  #line 983 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,64ULL);
  #line 984 
  rsp->sqb_size = (unsigned short)(cfg >> 34);
  #line 985 
  rsp->rx_chan_base = pfvf->rx_chan_base;
  #line 986 
  rsp->tx_chan_base = pfvf->tx_chan_base;
  #line 987 
  rsp->rx_chan_cnt = pfvf->rx_chan_cnt;
  #line 988 
  rsp->tx_chan_cnt = pfvf->tx_chan_cnt;
  #line 989 
  rsp->lso_tsov4_idx = (unsigned char)0U;
  #line 990 
  rsp->lso_tsov6_idx = (unsigned char)1U;
  #line 992 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,40ULL);
  #line 993 
  rsp->lf_rx_stats = (unsigned char)(cfg >> 32);
  #line 994 
  rsp->lf_tx_stats = (unsigned char)(cfg >> 24);
  #line 996 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,48ULL);
  #line 997 
  rsp->qints = (unsigned short)((unsigned int)((unsigned short)(cfg >> 12)) & 4095U);
  #line 998 
  rsp->cints = (unsigned short)((unsigned int)((unsigned short)(cfg >> 24)) & 4095U);
  #line 999 
  return rc;
}

#line 1002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_lf_free(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 1007 
  struct rvu_block *block;
  #line 1008 
  int blkaddr;
  #line 1008 
  int nixlf;
  #line 1008 
  int err;
  #line 1009 
  struct rvu_pfvf *pfvf;
  #line 1005 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1006 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1011 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 1012 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 1013 
  if (! pfvf->nixlf || blkaddr < 0) 
                                    #line 1014 
                                    return -404;
  #line 1016 
  block = & hw->block[blkaddr];
  #line 1017 
  nixlf = rvu_get_lf(rvu,block,(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 1018 
  if (nixlf < 0) 
                 #line 1019 
                 return -404;
  #line 1021 
  nix_interface_deinit(rvu,(unsigned short)((int)pcifunc),(unsigned char)((int)((unsigned char)nixlf)));
  #line 1024 
  err = rvu_lf_reset(rvu,block,nixlf);
  #line 1025 
  if (err != 0) {
    #line 1026 
    _dev_err(rvu->dev,(char *)"Failed to reset NIX%d LF%d\n",(int)block->addr + -4,nixlf);
    #line 1028 
    return -414;
  }
  #line 1031 
  nix_ctx_free(rvu,pfvf);
  #line 1033 
  return 0;
}

#line 1036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_mark_format_cfg(struct rvu *rvu, struct nix_mark_format_cfg *req, struct nix_mark_format_cfg_rsp *rsp)
{
  #line 1041 
  struct nix_hw *nix_hw;
  #line 1042 
  struct rvu_pfvf *pfvf;
  #line 1043 
  int blkaddr;
  #line 1043 
  int rc;
  #line 1044 
  u32 cfg;
  #line 1040 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1046 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 1047 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 1048 
  if (! pfvf->nixlf || blkaddr < 0) 
                                    #line 1049 
                                    return -404;
  #line 1051 
  nix_hw = get_nix_hw(rvu->hw,blkaddr);
  #line 1052 
  if (nix_hw == (struct nix_hw *)0) 
                                    #line 1053 
                                    return -22;
  #line 1055 
  cfg = ((((((unsigned int)req->offset << 16) & 458752U) | (((unsigned int)req->y_mask << 12) & 65535U)) | (((unsigned int)req->y_val << 8) & 3840U)) | (((unsigned int)req->r_mask << 4) & 255U)) | ((unsigned int)req->r_val & 15U);
  #line 1060 
  rc = rvu_nix_reserve_mark_format(rvu,nix_hw,blkaddr,cfg);
  #line 1061 
  if (rc < 0) {
    #line 1062 
    ;
    #line 1062 
    ;
    #line 1062 
    _dev_err(rvu->dev,(char *)"No mark_format_ctl for (pf:%d, vf:%d)",rvu_get_pf((unsigned short)((int)pcifunc)),(int)pcifunc & 1023);
    #line 1064 
    return -417;
  }
  #line 1067 
  rsp->mark_format_idx = (unsigned char)rc;
  #line 1068 
  return 0;
}

#line 1074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_reset_tx_shaping(struct rvu *rvu, int blkaddr, int lvl, int schq)
{
  #line 1078 
  u64 cfg;
  #line 1077 
  u64 cir_reg = 0ULL;
  #line 1077 
  u64 pir_reg = 0ULL;
  #line 1080 
  switch (lvl) {
    #line 1081 
    case 4: 
            #line 1081 
    ;
    #line 1082 
    cir_reg = (unsigned long long)((schq << 16) | 3104);
    #line 1083 
    pir_reg = 0ULL;
    #line 1084 
    break;
    #line 1085 
    case 3: 
            #line 1085 
    ;
    #line 1086 
    cir_reg = (unsigned long long)((schq << 16) | 3616);
    #line 1087 
    pir_reg = (unsigned long long)((schq << 16) | 3632);
    #line 1088 
    break;
    #line 1089 
    case 2: 
            #line 1089 
    ;
    #line 1090 
    cir_reg = (unsigned long long)((schq << 16) | 4128);
    #line 1091 
    pir_reg = (unsigned long long)((schq << 16) | 4144);
    #line 1092 
    break;
    #line 1093 
    case 1: 
            #line 1093 
    ;
    #line 1094 
    cir_reg = (unsigned long long)((schq << 16) | 4640);
    #line 1095 
    pir_reg = (unsigned long long)((schq << 16) | 4656);
    #line 1096 
    break;
  }
  #line 1099 
  if (cir_reg == 0ULL) 
                       #line 1100 
                       return;
  #line 1101 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,cir_reg);
  #line 1102 
  rvu_write64(rvu,(unsigned long long)blkaddr,cir_reg,cfg & 18446744073709551614ULL);
  #line 1104 
  if (pir_reg == 0ULL) 
                       #line 1105 
                       return;
  #line 1106 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,pir_reg);
  #line 1107 
  rvu_write64(rvu,(unsigned long long)blkaddr,pir_reg,cfg & 18446744073709551614ULL);
  #line 1108 
  return;
}

#line 1110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_reset_tx_linkcfg(struct rvu *rvu, int blkaddr, int lvl, int schq)
{
  #line 1114 
  int link;
  #line 1113 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1116 
  if ((int)hw->cap.nix_tx_aggr_lvl <= lvl) 
                                           #line 1117 
                                           return;
  #line 1120 
  if (lvl == 1) 
                #line 1121 
                rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((schq << 16) | 2832),0ULL);
  #line 1123 
  if (lvl != 3) 
                #line 1124 
                return;
  #line 1127 
  link = 0;
  #line 1127 
  while ((int)hw->cgx_links + (int)hw->lbk_links > link) {
    #line 1128 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((schq << 16) | 5888) | (link << 3)),0ULL);
    #line 1127 
    link ++;
  }
  #line 1130 
  return;
}

#line 1132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_get_tx_link(struct rvu *rvu, u16 pcifunc)
{
  #line 1134 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1135 
  int pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 1136 
  u8 cgx_id = (unsigned char)0U;
  #line 1136 
  u8 lmac_id = (unsigned char)0U;
  #line 1138 
  if (is_afvf((unsigned short)((int)pcifunc)) != 0) 
                                                    #line 1139 
                                                    return (int)hw->cgx_links;
  else {
    #line 1140 
    if ((int)is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf))) != 0) {
      #line 1141 
      rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx_id,& lmac_id);
      #line 1142 
      return (int)cgx_id * (int)hw->lmac_per_cgx + (int)lmac_id;
    }
  }
  #line 1146 
  return (int)hw->cgx_links + (int)hw->lbk_links;
}

#line 1149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_get_txschq_range(struct rvu *rvu, u16 pcifunc, int link, int *start, int *end)
{
  #line 1152 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1153 
  int pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 1155 
  if (is_afvf((unsigned short)((int)pcifunc)) != 0) {
    #line 1156 
    *start = (int)hw->cap.nix_txsch_per_cgx_lmac * link;
    #line 1157 
    *end = *start + (int)hw->cap.nix_txsch_per_lbk_lmac;
  }
  else {
    #line 1158 
    if ((int)is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf))) != 0) {
      #line 1159 
      *start = (int)hw->cap.nix_txsch_per_cgx_lmac * link;
      #line 1160 
      *end = *start + (int)hw->cap.nix_txsch_per_cgx_lmac;
    }
    else {
      #line 1162 
      *start = (int)hw->cap.nix_txsch_per_cgx_lmac * (int)hw->cgx_links + (int)hw->cap.nix_txsch_per_lbk_lmac * (int)hw->lbk_links;
      #line 1164 
      *end = *start + (int)hw->cap.nix_txsch_per_sdp_lmac;
    }
  }
  #line 1166 
  return;
}

#line 1168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_check_txschq_alloc_req(struct rvu *rvu, int lvl, u16 pcifunc, struct nix_hw *nix_hw, struct nix_txsch_alloc_req *req)
{
  #line 1173 
  int schq;
  #line 1173 
  int req_schq;
  #line 1173 
  int free_cnt;
  #line 1174 
  struct nix_txsch *txsch;
  #line 1175 
  int link;
  #line 1175 
  int start;
  #line 1175 
  int end;
  #line 1172 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1177 
  txsch = & nix_hw->txsch[lvl];
  #line 1178 
  req_schq = (int)req->schq_contig[lvl] + (int)req->schq[lvl];
  #line 1180 
  if (req_schq == 0) 
                     #line 1181 
                     return 0;
  #line 1183 
  link = nix_get_tx_link(rvu,(unsigned short)((int)pcifunc));
  #line 1186 
  if ((int)hw->cap.nix_tx_aggr_lvl <= lvl) {
    #line 1187 
    if (req_schq != 1) 
                       #line 1188 
                       return -406;
    #line 1189 
    return 0;
  }
  #line 1193 
  if ((int)hw->cap.nix_fixed_txschq_mapping != 0) {
    #line 1194 
    nix_get_txschq_range(rvu,(unsigned short)((int)pcifunc),link,& start,& end);
    #line 1195 
    schq = ((int)pcifunc & 1023) + start;
    #line 1196 
    if ((int)txsch->schq.max >= end && schq < end) {
      #line 1197 
      if (test_bit((long)schq,txsch->schq.bmap)) 
                                                 #line 1200 
                                                 free_cnt = 0; else 
                                                                    #line 1198 
                                                                    free_cnt = 1;
    }
    else 
         #line 1200 
         free_cnt = 0;
  }
  else 
       #line 1202 
       free_cnt = rvu_rsrc_free_count(& txsch->schq);
  #line 1205 
  if (free_cnt < req_schq || req_schq > 128) 
                                             #line 1206 
                                             return -406;
  #line 1209 
  if (! hw->cap.nix_fixed_txschq_mapping && (unsigned int)req->schq_contig[lvl] != 0U) {
    #line 1210 
    if (! rvu_rsrc_check_contig(& txsch->schq,(int)req->schq_contig[lvl])) 
      #line 1211 
      return -406;
  }
  #line 1213 
  return 0;
}

#line 1216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_txsch_alloc(struct rvu *rvu, struct nix_txsch *txsch, struct nix_txsch_alloc_rsp *rsp, int lvl, int start, int end)
{
  #line 1222 
  int idx;
  #line 1222 
  int schq;
  #line 1220 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1221 
  u16 pcifunc = rsp->hdr.pcifunc;
  #line 1227 
  if ((int)hw->cap.nix_tx_aggr_lvl <= lvl) {
    #line 1229 
    if ((unsigned int)rsp->schq_contig[lvl] != 0U) {
      #line 1230 
      rsp->schq_contig[lvl] = (unsigned short)1U;
      #line 1231 
      rsp->schq_contig_list[lvl][0] = (unsigned short)start;
    }
    #line 1235 
    if ((unsigned int)rsp->schq_contig[lvl] != 0U) 
                                                   #line 1236 
                                                   rsp->schq[lvl] = (unsigned short)0U;
    #line 1238 
    if ((unsigned int)rsp->schq[lvl] != 0U) {
      #line 1239 
      rsp->schq[lvl] = (unsigned short)1U;
      #line 1240 
      rsp->schq_list[lvl][0] = (unsigned short)start;
    }
    #line 1242 
    return;
  }
  #line 1248 
  if ((int)hw->cap.nix_fixed_txschq_mapping != 0) {
    #line 1249 
    idx = (int)pcifunc & 1023;
    #line 1250 
    schq = start + idx;
    #line 1251 
    if (end - start <= idx) 
                            #line 1251 
                            goto _LOR;
    else {
      #line 1251 
      if ((int)test_bit((long)schq,txsch->schq.bmap) != 0) {
        #line 1251 
        _LOR: {
                #line 1252 
                rsp->schq_contig[lvl] = (unsigned short)0U;
                #line 1253 
                rsp->schq[lvl] = (unsigned short)0U;
                #line 1254 
                return;
              }
      }
    }
    #line 1257 
    if ((unsigned int)rsp->schq_contig[lvl] != 0U) {
      #line 1258 
      rsp->schq_contig[lvl] = (unsigned short)1U;
      #line 1259 
      cif_set_bit_0((long)schq,txsch->schq.bmap);
      #line 1260 
      rsp->schq_contig_list[lvl][0] = (unsigned short)schq;
      #line 1261 
      rsp->schq[lvl] = (unsigned short)0U;
    }
    else 
      #line 1262 
      if ((unsigned int)rsp->schq[lvl] != 0U) {
        #line 1263 
        rsp->schq[lvl] = (unsigned short)1U;
        #line 1264 
        cif_set_bit_0((long)schq,txsch->schq.bmap);
        #line 1265 
        rsp->schq_list[lvl][0] = (unsigned short)schq;
      }
    #line 1267 
    return;
  }
  #line 1271 
  if ((unsigned int)rsp->schq_contig[lvl] != 0U) {
    #line 1272 
    schq = (int)cif_bitmap_find_next_zero_area(txsch->schq.bmap,
                                       (unsigned long)txsch->schq.max,
                                       (unsigned long)start,
                                       (unsigned int)rsp->schq_contig[lvl],
                                       0UL);
    #line 1275 
    if (schq >= end) 
                     #line 1276 
                     rsp->schq_contig[lvl] = (unsigned short)0U;
    #line 1277 
    idx = 0;
    #line 1277 
    while ((int)rsp->schq_contig[lvl] > idx) {
      #line 1278 
      cif_set_bit_0((long)schq,txsch->schq.bmap);
      #line 1279 
      rsp->schq_contig_list[lvl][idx] = (unsigned short)schq;
      #line 1280 
      schq ++;
      #line 1277 
      idx ++;
    }
  }
  #line 1285 
  if ((unsigned int)rsp->schq[lvl] != 0U) {
    #line 1286 
    idx = 0;
    #line 1287 
    schq = start;
    #line 1287 
    while (schq < end) {
      {
        #line 1288 
        if (! test_bit((long)schq,txsch->schq.bmap)) {
          #line 1290 
          int tmp_1;
          #line 1289 
          cif_set_bit_0((long)schq,txsch->schq.bmap);
          #line 1290 
          tmp_1 = idx;
          #line 1290 
          idx ++;
          #line 1290 
          rsp->schq_list[lvl][tmp_1] = (unsigned short)schq;
        }
        #line 1292 
        if ((int)rsp->schq[lvl] == idx) 
                                        #line 1293 
                                        break;
      }
      #line 1287 
      schq ++;
    }
    #line 1296 
    rsp->schq[lvl] = (unsigned short)idx;
  }
  #line 1298 
  return;
}

#line 1300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_txsch_alloc(struct rvu *rvu, struct nix_txsch_alloc_req *req, struct nix_txsch_alloc_rsp *rsp)
{
  #line 1306 
  int link;
  #line 1306 
  int blkaddr;
  #line 1307 
  int lvl;
  #line 1307 
  int idx;
  #line 1307 
  int start;
  #line 1307 
  int end;
  #line 1308 
  struct nix_txsch *txsch;
  #line 1309 
  struct rvu_pfvf *pfvf;
  #line 1310 
  struct nix_hw *nix_hw;
  #line 1311 
  u32 *pfvf_map;
  #line 1312 
  u16 schq;
  #line 1304 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1305 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1306 
  int rc = 0;
  #line 1314 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 1315 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 1316 
  if (! pfvf->nixlf || blkaddr < 0) 
                                    #line 1317 
                                    return -404;
  #line 1319 
  nix_hw = get_nix_hw(rvu->hw,blkaddr);
  #line 1320 
  if (nix_hw == (struct nix_hw *)0) 
                                    #line 1321 
                                    return -22;
  #line 1323 
  cif_mutex_lock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
  #line 1328 
  lvl = 0;
  #line 1328 
  while (lvl <= 4) {
    #line 1329 
    rc = nix_check_txschq_alloc_req(rvu,lvl,(unsigned short)((int)pcifunc),nix_hw,req);
    #line 1330 
    if (rc != 0) 
                 #line 1331 
                 goto err;
    #line 1328 
    lvl ++;
  }
  #line 1335 
  lvl = 0;
  #line 1335 
  while (lvl <= 4) {
    #line 1336 
    txsch = & nix_hw->txsch[lvl];
    #line 1337 
    pfvf_map = txsch->pfvf_map;
    #line 1339 
    if ((unsigned int)req->schq[lvl] == 0U && (unsigned int)req->schq_contig[lvl] == 0U) 
      #line 1340 
      goto __Cont;
    #line 1342 
    rsp->schq[lvl] = req->schq[lvl];
    #line 1343 
    rsp->schq_contig[lvl] = req->schq_contig[lvl];
    #line 1345 
    link = nix_get_tx_link(rvu,(unsigned short)((int)pcifunc));
    #line 1347 
    if ((int)hw->cap.nix_tx_aggr_lvl <= lvl) {
      #line 1348 
      start = link;
      #line 1349 
      end = link;
    }
    else 
      #line 1350 
      if ((int)hw->cap.nix_fixed_txschq_mapping != 0) 
                                                      #line 1351 
                                                      nix_get_txschq_range(rvu,(unsigned short)((int)pcifunc),link,& start,& end);
      else {
        #line 1353 
        start = 0;
        #line 1354 
        end = (int)txsch->schq.max;
      }
    #line 1357 
    nix_txsch_alloc(rvu,txsch,rsp,lvl,start,end);
    #line 1360 
    idx = 0;
    #line 1360 
    while ((int)req->schq_contig[lvl] > idx) {
      #line 1361 
      schq = rsp->schq_contig_list[lvl][idx];
      #line 1362 
      if (((unsigned long long)(*(pfvf_map + (unsigned long)schq) >> 16) & 1ULL) == 0ULL) 
        #line 1364 
        *(pfvf_map + (unsigned long)schq) = (unsigned int)pcifunc;
      #line 1365 
      nix_reset_tx_linkcfg(rvu,blkaddr,lvl,(int)schq);
      #line 1366 
      nix_reset_tx_shaping(rvu,blkaddr,lvl,(int)schq);
      #line 1360 
      idx ++;
    }
    #line 1369 
    idx = 0;
    #line 1369 
    while ((int)req->schq[lvl] > idx) {
      #line 1370 
      schq = rsp->schq_list[lvl][idx];
      #line 1371 
      if (((unsigned long long)(*(pfvf_map + (unsigned long)schq) >> 16) & 1ULL) == 0ULL) 
        #line 1373 
        *(pfvf_map + (unsigned long)schq) = (unsigned int)pcifunc;
      #line 1374 
      nix_reset_tx_linkcfg(rvu,blkaddr,lvl,(int)schq);
      #line 1375 
      nix_reset_tx_shaping(rvu,blkaddr,lvl,(int)schq);
      #line 1369 
      idx ++;
    }
    #line 1335 
    __Cont: 
            #line 1335 
    lvl ++;
  }
  #line 1379 
  rsp->aggr_level = hw->cap.nix_tx_aggr_lvl;
  #line 1380 
  rsp->aggr_lvl_rr_prio = (unsigned char)1U;
  #line 1381 
  if ((rvu_read64(rvu,(unsigned long long)blkaddr,2048ULL) & 1ULL) != 0ULL) 
    #line 1381 
    rsp->link_cfg_lvl = (unsigned char)2U; else 
                                                #line 1381 
                                                rsp->link_cfg_lvl = (unsigned char)3U;
  #line 1384 
  goto exit;
  #line 1385 
  err: 
       #line 1385 
  ;
  #line 1386 
  rc = -406;
  #line 1387 
  exit: 
        #line 1387 
  ;
  #line 1388 
  cif_mutex_unlock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
  #line 1389 
  return rc;
}

#line 1392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_smq_flush(struct rvu *rvu, int blkaddr, int smq, u16 pcifunc, int nixlf)
{
  #line 1397 
  int err;
  #line 1398 
  u64 cfg;
  #line 1395 
  int pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 1396 
  u8 cgx_id = (unsigned char)0U;
  #line 1396 
  u8 lmac_id = (unsigned char)0U;
  #line 1397 
  int restore_tx_en = 0;
  #line 1401 
  if ((int)is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf))) != 0) {
    #line 1402 
    rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx_id,& lmac_id);
    #line 1403 
    ;
    #line 1403 
    restore_tx_en = cgx_lmac_tx_enable(rvu_cgx_pdata((unsigned char)((int)cgx_id),rvu),
                           (int)lmac_id,(_Bool)1) == 0;
  }
  #line 1407 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)((smq << 16) | 1792));
  #line 1409 
  cfg |= 1688849860263936ULL;
  #line 1410 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((smq << 16) | 1792),cfg);
  #line 1415 
  rvu_cgx_enadis_rx_bp(rvu,pf,(_Bool)0);
  #line 1418 
  err = rvu_poll_reg(rvu,(unsigned long long)blkaddr,(unsigned long long)((smq << 16) | 1792),562949953421312ULL,(_Bool)1);
  #line 1420 
  if (err != 0) 
                #line 1421 
                _dev_err(rvu->dev,(char *)"NIXLF%d: SMQ%d flush failed\n",nixlf,smq);
  #line 1424 
  rvu_cgx_enadis_rx_bp(rvu,pf,(_Bool)1);
  #line 1426 
  if (restore_tx_en != 0) {
    #line 1427 
    ;
    #line 1427 
    cgx_lmac_tx_enable(rvu_cgx_pdata((unsigned char)((int)cgx_id),rvu),(int)lmac_id,(_Bool)0);
  }
  #line 1428 
  return;
}

#line 1430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_txschq_free(struct rvu *rvu, u16 pcifunc)
{
  #line 1432 
  int blkaddr;
  #line 1432 
  int nixlf;
  #line 1432 
  int lvl;
  #line 1432 
  int schq;
  #line 1432 
  int err;
  #line 1434 
  struct nix_txsch *txsch;
  #line 1435 
  struct nix_hw *nix_hw;
  #line 1433 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1437 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 1438 
  if (blkaddr < 0) 
                   #line 1439 
                   return -404;
  #line 1441 
  nix_hw = get_nix_hw(rvu->hw,blkaddr);
  #line 1442 
  if (nix_hw == (struct nix_hw *)0) 
                                    #line 1443 
                                    return -22;
  #line 1445 
  nixlf = rvu_get_lf(rvu,& hw->block[blkaddr],(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 1446 
  if (nixlf < 0) 
                 #line 1447 
                 return -404;
  #line 1450 
  cif_mutex_lock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
  #line 1451 
  lvl = 1;
  #line 1451 
  while (lvl <= 4) {
    #line 1452 
    if (lvl != 3 && lvl != 1) 
                              #line 1453 
                              goto __Cont;
    #line 1455 
    txsch = & nix_hw->txsch[lvl];
    #line 1456 
    schq = 0;
    #line 1456 
    while ((int)txsch->schq.max > schq) {
      #line 1457 
      if ((*(txsch->pfvf_map + (unsigned long)schq) & 65535U) != (unsigned int)pcifunc) 
        #line 1458 
        goto __Cont_0;
      #line 1459 
      nix_reset_tx_linkcfg(rvu,blkaddr,lvl,schq);
      #line 1456 
      __Cont_0: 
                #line 1456 
      schq ++;
    }
    #line 1451 
    __Cont: 
            #line 1451 
    lvl ++;
  }
  #line 1464 
  txsch = & nix_hw->txsch[0];
  #line 1465 
  schq = 0;
  #line 1465 
  while ((int)txsch->schq.max > schq) {
    #line 1466 
    if ((*(txsch->pfvf_map + (unsigned long)schq) & 65535U) != (unsigned int)pcifunc) 
      #line 1467 
      goto __Cont_1;
    #line 1468 
    nix_smq_flush(rvu,blkaddr,schq,(unsigned short)((int)pcifunc),nixlf);
    #line 1465 
    __Cont_1: 
              #line 1465 
    schq ++;
  }
  #line 1472 
  lvl = 0;
  #line 1472 
  while (lvl <= 4) {
    #line 1476 
    if ((int)hw->cap.nix_tx_aggr_lvl <= lvl) 
                                             #line 1477 
                                             goto __Cont_2;
    #line 1479 
    txsch = & nix_hw->txsch[lvl];
    #line 1480 
    schq = 0;
    #line 1480 
    while ((int)txsch->schq.max > schq) {
      #line 1481 
      if ((*(txsch->pfvf_map + (unsigned long)schq) & 65535U) != (unsigned int)pcifunc) 
        #line 1482 
        goto __Cont_3;
      #line 1483 
      rvu_free_rsrc(& txsch->schq,schq);
      #line 1484 
      *(txsch->pfvf_map + (unsigned long)schq) = 131072U;
      #line 1480 
      __Cont_3: 
                #line 1480 
      schq ++;
    }
    #line 1472 
    __Cont_2: 
              #line 1472 
    lvl ++;
  }
  #line 1487 
  cif_mutex_unlock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
  #line 1490 
  rvu_write64(rvu,(unsigned long long)blkaddr,1008ULL,(unsigned long long)(nixlf | 4096));
  #line 1491 
  err = rvu_poll_reg(rvu,(unsigned long long)blkaddr,1008ULL,4096ULL,(_Bool)1);
  #line 1492 
  if (err != 0) 
                #line 1493 
                _dev_err(rvu->dev,(char *)"NDC-TX sync failed for NIXLF %d\n",nixlf);
  #line 1495 
  return 0;
}

#line 1498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_txschq_free_one(struct rvu *rvu, struct nix_txsch_free_req *req)
{
  #line 1503 
  int lvl;
  #line 1503 
  int schq;
  #line 1503 
  int nixlf;
  #line 1503 
  int blkaddr;
  #line 1504 
  struct nix_txsch *txsch;
  #line 1505 
  struct nix_hw *nix_hw;
  #line 1506 
  u32 *pfvf_map;
  #line 1501 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1502 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1508 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 1509 
  if (blkaddr < 0) 
                   #line 1510 
                   return -404;
  #line 1512 
  nix_hw = get_nix_hw(rvu->hw,blkaddr);
  #line 1513 
  if (nix_hw == (struct nix_hw *)0) 
                                    #line 1514 
                                    return -22;
  #line 1516 
  nixlf = rvu_get_lf(rvu,& hw->block[blkaddr],(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 1517 
  if (nixlf < 0) 
                 #line 1518 
                 return -404;
  #line 1520 
  lvl = (int)req->schq_lvl;
  #line 1521 
  schq = (int)req->schq;
  #line 1522 
  txsch = & nix_hw->txsch[lvl];
  #line 1524 
  if ((int)hw->cap.nix_tx_aggr_lvl <= lvl || (int)txsch->schq.max <= schq) 
    #line 1525 
    return 0;
  #line 1527 
  pfvf_map = txsch->pfvf_map;
  #line 1528 
  cif_mutex_lock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
  #line 1530 
  if ((*(pfvf_map + (unsigned long)schq) & 65535U) != (unsigned int)pcifunc) {
    #line 1531 
    cif_mutex_unlock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
    #line 1532 
    goto err;
  }
  #line 1538 
  if (lvl == 0) 
                #line 1539 
                nix_smq_flush(rvu,blkaddr,schq,(unsigned short)((int)pcifunc),nixlf);
  #line 1542 
  rvu_free_rsrc(& txsch->schq,schq);
  #line 1543 
  *(txsch->pfvf_map + (unsigned long)schq) = 131072U;
  #line 1544 
  cif_mutex_unlock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
  #line 1545 
  return 0;
  #line 1546 
  err: 
       #line 1546 
  ;
  #line 1547 
  return -407;
}

#line 1550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_txsch_free(struct rvu *rvu, struct nix_txsch_free_req *req, struct msg_rsp *rsp)
{
  #line 1554 
  if (((unsigned long long)req->flags & 1ULL) != 0ULL) {
    #line 1555 
    return nix_txschq_free(rvu,(unsigned short)((int)req->hdr.pcifunc));
  }
  else {
    #line 1557 
    return nix_txschq_free_one(rvu,req);
  }
}

#line 1560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static bool is_txschq_hierarchy_valid(struct rvu *rvu, u16 pcifunc, int blkaddr, int lvl, u64 reg, u64 regval)
{
  #line 1564 
  u16 schq;
  #line 1564 
  u16 parent;
  #line 1563 
  u64 regbase = reg & 65535ULL;
  #line 1566 
  if (! rvu_check_valid_reg(0,lvl,reg)) 
                                        #line 1567 
                                        return (_Bool)0;
  #line 1569 
  schq = (unsigned short)((unsigned int)((unsigned short)(reg >> 16)) & 1023U);
  #line 1571 
  if (! is_valid_txschq(rvu,blkaddr,lvl,(unsigned short)((int)pcifunc),
                        (unsigned short)((int)schq))) 
    #line 1572 
    return (_Bool)0;
  #line 1574 
  parent = (unsigned short)((unsigned int)((unsigned short)(regval >> 16)) & 511U);
  #line 1576 
  if (regbase == 5248ULL) {
    #line 1577 
    if (! is_valid_txschq(rvu,blkaddr,1,(unsigned short)((int)pcifunc),
                        (unsigned short)((int)parent))) 
      #line 1578 
      return (_Bool)0;
  }
  #line 1581 
  if (regbase == 4744ULL) {
    #line 1582 
    if (! is_valid_txschq(rvu,blkaddr,2,(unsigned short)((int)pcifunc),
                        (unsigned short)((int)parent))) 
      #line 1583 
      return (_Bool)0;
  }
  #line 1586 
  if (regbase == 4232ULL) {
    #line 1587 
    if (! is_valid_txschq(rvu,blkaddr,3,(unsigned short)((int)pcifunc),
                        (unsigned short)((int)parent))) 
      #line 1588 
      return (_Bool)0;
  }
  #line 1591 
  if (regbase == 3720ULL) {
    #line 1592 
    if (! is_valid_txschq(rvu,blkaddr,4,(unsigned short)((int)pcifunc),
                        (unsigned short)((int)parent))) 
      #line 1593 
      return (_Bool)0;
  }
  #line 1595 
  return (_Bool)1;
}

#line 1598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static bool is_txschq_shaping_valid(struct rvu_hwinfo *hw, int lvl, u64 reg)
{
  #line 1600 
  u64 regbase;
  #line 1602 
  if ((int)hw->cap.nix_shaping != 0) 
                                     #line 1603 
                                     return (_Bool)1;
  #line 1608 
  regbase = reg & 65535ULL;
  #line 1610 
  switch (lvl) {
    #line 1611 
    case 4: 
            #line 1611 
    ;
    #line 1612 
    if (regbase == 3104ULL) 
                            #line 1613 
                            return (_Bool)0;
    #line 1614 
    break;
    #line 1615 
    case 3: 
            #line 1615 
    ;
    #line 1616 
    if (regbase == 3616ULL || regbase == 3632ULL) 
                                                  #line 1618 
                                                  return (_Bool)0;
    #line 1619 
    break;
    #line 1620 
    case 2: 
            #line 1620 
    ;
    #line 1621 
    if (regbase == 4128ULL || regbase == 4144ULL) 
                                                  #line 1623 
                                                  return (_Bool)0;
    #line 1624 
    break;
    #line 1625 
    case 1: 
            #line 1625 
    ;
    #line 1626 
    if (regbase == 4640ULL || regbase == 4656ULL) 
                                                  #line 1628 
                                                  return (_Bool)0;
    #line 1629 
    break;
  }
  #line 1631 
  return (_Bool)1;
}

#line 1634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_tl1_default_cfg(struct rvu *rvu, struct nix_hw *nix_hw, u16 pcifunc, int blkaddr)
{
  #line 1637 
  u32 *pfvf_map;
  #line 1638 
  int schq;
  #line 1640 
  schq = nix_get_tx_link(rvu,(unsigned short)((int)pcifunc));
  #line 1641 
  pfvf_map = nix_hw->txsch[4].pfvf_map;
  #line 1643 
  if (((unsigned long long)(*(pfvf_map + (unsigned long)schq) >> 16) & 1ULL) != 0ULL) 
    #line 1644 
    return;
  #line 1645 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((schq << 16) | 3200),2ULL);
  #line 1647 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((schq << 16) | 3072),16777215ULL);
  #line 1649 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((schq << 16) | 3104),0ULL);
  #line 1650 
  *(pfvf_map + (unsigned long)schq) |= 65536U;
  #line 1651 
  return;
}

#line 1653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_txschq_cfg(struct rvu *rvu, struct nix_txschq_config *req, struct msg_rsp *rsp)
{
  #line 1659 
  u64 reg;
  #line 1659 
  u64 regval;
  #line 1659 
  u64 schq_regbase;
  #line 1660 
  struct nix_txsch *txsch;
  #line 1661 
  struct nix_hw *nix_hw;
  #line 1662 
  int blkaddr;
  #line 1662 
  int idx;
  #line 1662 
  int err;
  #line 1663 
  int nixlf;
  #line 1663 
  int schq;
  #line 1664 
  u32 *pfvf_map;
  #line 1657 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1658 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1666 
  if ((unsigned int)req->lvl > 4U || (unsigned int)req->num_regs > 20U) 
    #line 1668 
    return -412;
  #line 1670 
  err = nix_get_nixlf(rvu,(unsigned short)((int)pcifunc),& nixlf);
  #line 1671 
  if (err != 0) 
                #line 1672 
                return -404;
  #line 1674 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 1675 
  if (blkaddr < 0) 
                   #line 1676 
                   return -404;
  #line 1678 
  nix_hw = get_nix_hw(rvu->hw,blkaddr);
  #line 1679 
  if (nix_hw == (struct nix_hw *)0) 
                                    #line 1680 
                                    return -22;
  #line 1682 
  txsch = & nix_hw->txsch[(int)req->lvl];
  #line 1683 
  pfvf_map = txsch->pfvf_map;
  #line 1685 
  if ((int)req->lvl >= (int)hw->cap.nix_tx_aggr_lvl && ((int)pcifunc & 1023) != 0) {
    #line 1687 
    cif_mutex_lock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
    #line 1688 
    if ((unsigned int)req->lvl == 4U) 
                                      #line 1689 
                                      nix_tl1_default_cfg(rvu,nix_hw,(unsigned short)((int)pcifunc),blkaddr);
    #line 1690 
    cif_mutex_unlock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
    #line 1691 
    return 0;
  }
  #line 1694 
  idx = 0;
  #line 1694 
  while ((int)req->num_regs > idx) {
    {
      #line 1695 
      reg = req->reg[idx];
      #line 1696 
      regval = req->regval[idx];
      #line 1697 
      schq_regbase = reg & 65535ULL;
      #line 1699 
      if (! is_txschq_hierarchy_valid(rvu,(unsigned short)((int)pcifunc),blkaddr,
                                (int)txsch->lvl,reg,regval)) 
        #line 1701 
        return -412;
      #line 1704 
      if (! is_txschq_shaping_valid(hw,(int)req->lvl,reg)) 
                                                           #line 1705 
                                                           goto __Cont;
      #line 1708 
      if (schq_regbase == 1792ULL) {
        #line 1709 
        nixlf = rvu_get_lf(rvu,& hw->block[blkaddr],(unsigned short)((int)pcifunc),(unsigned short)0);
        #line 1711 
        regval &= 18446744071578845183ULL;
        #line 1712 
        regval = ((unsigned long long)nixlf << 24) | regval;
      }
      #line 1716 
      if (! hw->cap.nix_tx_link_bp) 
        #line 1717 
        if (schq_regbase == 2832ULL || (schq_regbase & 65280ULL) == 5888ULL) 
          #line 1720 
          regval &= 18446744073709543423ULL;
      #line 1724 
      if (schq_regbase + 18446744073709548544ULL <= 400ULL) {
        #line 1726 
        schq = (int)(reg >> 16) & 1023;
        #line 1727 
        cif_mutex_lock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
        #line 1728 
        *(pfvf_map + (unsigned long)schq) |= 65536U;
        #line 1730 
        cif_mutex_unlock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
      }
      #line 1736 
      if (schq_regbase == 1792ULL && (regval & 562949953421312ULL) != 0ULL) {
        #line 1738 
        schq = (int)(reg >> 16) & 1023;
        #line 1739 
        nix_smq_flush(rvu,blkaddr,schq,(unsigned short)((int)pcifunc),nixlf);
        #line 1740 
        regval &= 18446181123756130303ULL;
      }
      #line 1742 
      rvu_write64(rvu,(unsigned long long)blkaddr,reg,regval);
    }
    #line 1694 
    __Cont: 
            #line 1694 
    idx ++;
  }
  #line 1745 
  return 0;
}

#line 1748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_rx_vtag_cfg(struct rvu *rvu, int nixlf, int blkaddr, struct nix_vtag_config *req)
{
  #line 1751 
  u64 regval = (unsigned long long)req->vtag_size;
  #line 1753 
  if ((unsigned int)req->__anonCompField_nix_vtag_config_168.rx.vtag_type > 7U || (unsigned int)req->vtag_size > 1U) 
    #line 1754 
    return -22;
  #line 1756 
  if ((unsigned int)req->__anonCompField_nix_vtag_config_168.rx.capture_vtag != 0U) 
    #line 1757 
    regval |= 32ULL;
  #line 1758 
  if ((unsigned int)req->__anonCompField_nix_vtag_config_168.rx.strip_vtag != 0U) 
    #line 1759 
    regval |= 16ULL;
  #line 1761 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((nixlf << 17) | 16896) | ((int)req->__anonCompField_nix_vtag_config_168.rx.vtag_type << 3)),regval);
  #line 1763 
  return 0;
}

#line 1766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_vtag_cfg(struct rvu *rvu, struct nix_vtag_config *req, struct msg_rsp *rsp)
{
  #line 1772 
  int blkaddr;
  #line 1772 
  int nixlf;
  #line 1772 
  int err;
  #line 1770 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1771 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1774 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 1775 
  if (blkaddr < 0) 
                   #line 1776 
                   return -404;
  #line 1778 
  nixlf = rvu_get_lf(rvu,& hw->block[blkaddr],(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 1779 
  if (nixlf < 0) 
                 #line 1780 
                 return -404;
  #line 1782 
  if ((unsigned int)req->cfg_type != 0U) {
    #line 1783 
    err = nix_rx_vtag_cfg(rvu,nixlf,blkaddr,req);
    #line 1784 
    if (err != 0) 
                  #line 1785 
                  return -401;
  }
  else 
       #line 1788 
       return 0;
  #line 1791 
  return 0;
}

#line 1794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_setup_mce(struct rvu *rvu, int mce, u8 op, u16 pcifunc, int next, bool eol)
{
  #line 1797 
  struct nix_aq_enq_req aq_req;
  #line 1798 
  int err;
  #line 1800 
  aq_req.hdr.pcifunc = (unsigned short)0U;
  #line 1801 
  aq_req.ctype = (unsigned char)3U;
  #line 1802 
  aq_req.op = op;
  #line 1803 
  aq_req.qidx = (unsigned int)mce;
  #line 1806 
  aq_req.__anonCompField_nix_aq_enq_req_165.mce.op = (unsigned long long)0U;
  #line 1807 
  aq_req.__anonCompField_nix_aq_enq_req_165.mce.index = (unsigned long long)0U;
  #line 1808 
  aq_req.__anonCompField_nix_aq_enq_req_165.mce.eol = (unsigned long long)eol;
  #line 1809 
  aq_req.__anonCompField_nix_aq_enq_req_165.mce.pf_func = (unsigned long long)pcifunc;
  #line 1810 
  aq_req.__anonCompField_nix_aq_enq_req_165.mce.next = (unsigned long long)((unsigned short)next);
  #line 1813 
  *((u64 *)(& aq_req.__anonCompField_nix_aq_enq_req_166.mce_mask)) = 18446744073709551615ULL;
  #line 1815 
  err = rvu_nix_aq_enq_inst(rvu,& aq_req,(struct nix_aq_enq_rsp *)0);
  #line 1816 
  if (err != 0) {
    #line 1817 
    ;
    #line 1817 
    ;
    #line 1817 
    _dev_err(rvu->dev,(char *)"Failed to setup Bcast MCE for PF%d:VF%d\n",rvu_get_pf((unsigned short)((int)pcifunc)),(int)pcifunc & 1023);
    #line 1819 
    return err;
  }
  #line 1821 
  return 0;
}

#line 1824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_update_mce_list(struct nix_mce_list *mce_list, u16 pcifunc, bool add)
{
  #line 1831 
  struct mce *tmp_0;
  #line 1831 
  void *__mptr;
  #line 1827 
  struct mce *mce;
  #line 1827 
  struct mce *tail = (struct mce *)0;
  #line 1828 
  bool delete = (_Bool)0;
  {
    #line 1831 
    struct hlist_node *____ptr = mce_list->head.first;
    #line 1831 
    if (____ptr != (struct hlist_node *)0) {
      #line 1831 
      __mptr = (void *)____ptr;
      #line 1831 
      tmp_0 = ((struct mce *)__mptr);
    }
    else 
         #line 1831 
         tmp_0 = (struct mce *)0;
    }
  #line 1831 
  mce = tmp_0;
  #line 1831 
  while (mce != (struct mce *)0) {
    #line 1831 
    void *__mptr_0;
    #line 1831 
    struct mce *tmp_3;
    #line 1833 
    if ((int)mce->pcifunc == (int)pcifunc && ! add) {
      #line 1834 
      delete = (_Bool)1;
      #line 1835 
      break;
    }
    #line 1837 
    tail = mce;
    {
      #line 1831 
      struct hlist_node *____ptr_0 = mce->node.next;
      #line 1831 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 1831 
        __mptr_0 = (void *)____ptr_0;
        #line 1831 
        tmp_3 = ((struct mce *)__mptr_0);
      }
      else 
           #line 1831 
           tmp_3 = (struct mce *)0;
      }
    #line 1831 
    mce = tmp_3;
  }
  #line 1840 
  if ((int)delete != 0) {
    #line 1841 
    hlist_del(& mce->node);
    #line 1842 
    kfree((void *)mce);
    #line 1843 
    (mce_list->count) --;
    #line 1844 
    return 0;
  }
  #line 1847 
  if (! add) 
             #line 1848 
             return 0;
  #line 1851 
  mce = (struct mce *)kzalloc_0(24UL,3264U);
  #line 1852 
  if (mce == (struct mce *)0) 
                              #line 1853 
                              return -12;
  #line 1854 
  mce->pcifunc = pcifunc;
  #line 1855 
  if (tail == (struct mce *)0) 
                               #line 1856 
                               hlist_add_head(& mce->node,& mce_list->head); else 
                                                                    #line 1858 
                                                                    hlist_add_behind(& mce->node,& tail->node);
  #line 1859 
  (mce_list->count) ++;
  #line 1860 
  return 0;
}

#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_update_bcast_mce_list(struct rvu *rvu, u16 pcifunc, bool add)
{
  #line 1915 
  void *__mptr;
  #line 1915 
  struct mce *tmp_1;
  #line 1865 
  int idx;
  #line 1865 
  int next_idx;
  #line 1865 
  int last_idx;
  #line 1866 
  struct nix_mce_list *mce_list;
  #line 1867 
  struct nix_mcast *mcast;
  #line 1868 
  struct nix_hw *nix_hw;
  #line 1869 
  struct rvu_pfvf *pfvf;
  #line 1870 
  struct mce *mce;
  #line 1871 
  int blkaddr;
  #line 1865 
  int err = 0;
  #line 1874 
  if (is_afvf((unsigned short)((int)pcifunc)) != 0) 
                                                    #line 1875 
                                                    return 0;
  #line 1877 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 1878 
  if (blkaddr < 0) 
                   #line 1879 
                   return 0;
  #line 1881 
  nix_hw = get_nix_hw(rvu->hw,blkaddr);
  #line 1882 
  if (nix_hw == (struct nix_hw *)0) 
                                    #line 1883 
                                    return 0;
  #line 1885 
  mcast = & nix_hw->mcast;
  #line 1888 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc & -1024);
  #line 1889 
  idx = (int)pfvf->bcast_mce_idx + ((int)pcifunc & 1023);
  #line 1891 
  mce_list = & pfvf->bcast_mce_list;
  #line 1892 
  if ((int)pfvf->bcast_mce_idx + mce_list->max < idx) {
    #line 1893 
    _dev_err(rvu->dev,(char *)"%s: Idx %d > max MCE idx %d, for PF%d bcast list\n",(char *)"nix_update_bcast_mce_list",idx,mce_list->max,(int)pcifunc >> 10);
    #line 1897 
    return -22;
  }
  #line 1900 
  cif_mutex_lock_mce_lock_of_nix_mcast(& mcast->mce_lock);
  #line 1902 
  err = nix_update_mce_list(mce_list,(unsigned short)((int)pcifunc),(_Bool)((bool)((int)add) != 0));
  #line 1903 
  if (err != 0) 
                #line 1904 
                goto end;
  #line 1907 
  if (mce_list->count == 0) {
    #line 1908 
    rvu_npc_disable_bcast_entry(rvu,(unsigned short)((int)pcifunc));
    #line 1909 
    goto end;
  }
  #line 1913 
  idx = (int)pfvf->bcast_mce_idx;
  #line 1914 
  last_idx = (mce_list->count + idx) + -1;
  {
    #line 1915 
    struct hlist_node *____ptr = mce_list->head.first;
    #line 1915 
    if (____ptr != (struct hlist_node *)0) {
      #line 1915 
      __mptr = (void *)____ptr;
      #line 1915 
      tmp_1 = ((struct mce *)__mptr);
    }
    else 
         #line 1915 
         tmp_1 = (struct mce *)0;
    }
  #line 1915 
  mce = tmp_1;
  #line 1915 
  while (mce != (struct mce *)0) {
    #line 1915 
    struct mce *tmp_4;
    #line 1915 
    void *__mptr_0;
    #line 1916 
    if (idx > last_idx) 
                        #line 1917 
                        break;
    #line 1919 
    next_idx = idx + 1;
    #line 1921 
    err = nix_setup_mce(rvu,idx,(unsigned char)2,(unsigned short)((int)mce->pcifunc),next_idx,(_Bool)(next_idx > last_idx));
    #line 1924 
    if (err != 0) 
                  #line 1925 
                  goto end;
    #line 1926 
    idx ++;
    {
      #line 1915 
      struct hlist_node *____ptr_0 = mce->node.next;
      #line 1915 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 1915 
        __mptr_0 = (void *)____ptr_0;
        #line 1915 
        tmp_4 = ((struct mce *)__mptr_0);
      }
      else 
           #line 1915 
           tmp_4 = (struct mce *)0;
      }
    #line 1915 
    mce = tmp_4;
  }
  #line 1929 
  end: 
       #line 1929 
  ;
  #line 1930 
  cif_mutex_unlock_mce_lock_of_nix_mcast(& mcast->mce_lock);
  #line 1931 
  return err;
}

#line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_setup_bcast_tables(struct rvu *rvu, struct nix_hw *nix_hw)
{
  #line 1937 
  int err;
  #line 1937 
  int pf;
  #line 1937 
  int numvfs;
  #line 1937 
  int idx;
  #line 1938 
  struct rvu_pfvf *pfvf;
  #line 1939 
  u16 pcifunc;
  #line 1940 
  u64 cfg;
  #line 1936 
  struct nix_mcast *mcast = & nix_hw->mcast;
  #line 1943 
  pf = 1;
  #line 1943 
  while ((int)rvu->cgx_mapped_pfs >= pf) {
    #line 1944 
    cfg = rvu_read64(rvu,0ULL,(unsigned long long)((pf << 16) | 134217984));
    #line 1946 
    if ((cfg & 1048576ULL) == 0ULL) 
                                    #line 1947 
                                    goto __Cont;
    #line 1949 
    numvfs = (int)(cfg >> 12) & 255;
    #line 1951 
    pfvf = rvu->pf + (unsigned long)pf;
    #line 1953 
    pfvf->bcast_mce_idx = nix_alloc_mce_list(mcast,numvfs + 1);
    #line 1955 
    nix_mce_list_init(& pfvf->bcast_mce_list,numvfs + 1);
    #line 1957 
    idx = 0;
    #line 1957 
    while (numvfs >= idx) {
      #line 1959 
      pcifunc = (unsigned short)((int)((unsigned short)pf) << 10U);
      #line 1960 
      pcifunc = (unsigned short)(idx | (int)pcifunc);
      #line 1966 
      err = nix_setup_mce(rvu,(int)pfvf->bcast_mce_idx + idx,(unsigned char)1,(unsigned short)((int)pcifunc),0,(_Bool)1);
      #line 1969 
      if (err != 0) 
                    #line 1970 
                    return err;
      #line 1957 
      idx ++;
    }
    #line 1943 
    __Cont: 
            #line 1943 
    pf ++;
  }
  #line 1973 
  return 0;
}

#line 1976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_setup_mcast(struct rvu *rvu, struct nix_hw *nix_hw, int blkaddr)
{
  #line 1980 
  int err;
  #line 1980 
  int size;
  #line 1978 
  struct nix_mcast *mcast = & nix_hw->mcast;
  #line 1979 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1982 
  size = (int)(rvu_read64(rvu,(unsigned long long)blkaddr,56ULL) >> 16) & 15;
  #line 1983 
  size = (int)(1ULL << size);
  #line 1986 
  err = qmem_alloc_0(rvu->dev,& mcast->mce_ctx,512,size);
  #line 1988 
  if (err != 0) 
                #line 1989 
                return -12;
  #line 1991 
  rvu_write64(rvu,(unsigned long long)blkaddr,256ULL,(mcast->mce_ctx)->iova);
  #line 1995 
  rvu_write64(rvu,(unsigned long long)blkaddr,272ULL,(unsigned long long)((int)hw->max_vfs_per_pf << 4) | 68719476737ULL);
  #line 1999 
  size = (int)rvu_read64(rvu,(unsigned long long)blkaddr,152ULL) & 65535;
  #line 2000 
  err = qmem_alloc_0(rvu->dev,& mcast->mcast_buf,128,size);
  #line 2002 
  if (err != 0) 
                #line 2003 
                return -12;
  #line 2005 
  rvu_write64(rvu,(unsigned long long)blkaddr,288ULL,(mcast->mcast_buf)->iova);
  #line 2009 
  mcast->replay_pkind = rvu_alloc_rsrc(& hw->pkind.rsrc);
  #line 2011 
  rvu_write64(rvu,(unsigned long long)blkaddr,304ULL,(unsigned long long)(mcast->replay_pkind << 24) | 9223372036855824388ULL);
  {
    #line 2015 
    struct lock_class_key __key;
    #line 2015 
    __mutex_init(& mcast->mce_lock,(char *)"&mcast->mce_lock",& __key);
  }
  #line 2017 
  return nix_setup_bcast_tables(rvu,nix_hw);
}

#line 2020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_setup_txschq(struct rvu *rvu, struct nix_hw *nix_hw, int blkaddr)
{
  #line 2022 
  struct nix_txsch *txsch;
  #line 2023 
  int err;
  #line 2023 
  int lvl;
  #line 2023 
  int schq;
  #line 2024 
  u64 cfg;
  #line 2024 
  u64 reg;
  #line 2029 
  lvl = 0;
  #line 2029 
  while (lvl <= 4) {
    #line 2030 
    txsch = & nix_hw->txsch[lvl];
    #line 2031 
    txsch->lvl = (unsigned char)lvl;
    #line 2032 
    switch (lvl) {
      #line 2033 
      case 0: 
              #line 2033 
      ;
      #line 2034 
      reg = 144ULL;
      #line 2035 
      break;
      #line 2036 
      case 1: 
              #line 2036 
      ;
      #line 2037 
      reg = 136ULL;
      #line 2038 
      break;
      #line 2039 
      case 2: 
              #line 2039 
      ;
      #line 2040 
      reg = 128ULL;
      #line 2041 
      break;
      #line 2042 
      case 3: 
              #line 2042 
      ;
      #line 2043 
      reg = 120ULL;
      #line 2044 
      break;
      #line 2045 
      case 4: 
              #line 2045 
      ;
      #line 2046 
      reg = 112ULL;
      #line 2047 
      break;
    }
    #line 2049 
    cfg = rvu_read64(rvu,(unsigned long long)blkaddr,reg);
    #line 2050 
    txsch->schq.max = (unsigned short)cfg;
    #line 2051 
    err = rvu_alloc_bitmap(& txsch->schq);
    #line 2052 
    if (err != 0) 
                  #line 2053 
                  return err;
    #line 2058 
    txsch->pfvf_map = (u32 *)cif_devm_kcalloc(rvu->dev,(unsigned long)txsch->schq.max,4UL,3264U);
    #line 2060 
    if (txsch->pfvf_map == (u32 *)0U) 
                                      #line 2061 
                                      return -12;
    #line 2062 
    schq = 0;
    #line 2062 
    while ((int)txsch->schq.max > schq) {
      #line 2063 
      *(txsch->pfvf_map + (unsigned long)schq) = 131072U;
      #line 2062 
      schq ++;
    }
    #line 2029 
    lvl ++;
  }
  #line 2065 
  return 0;
}

#line 2068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_nix_reserve_mark_format(struct rvu *rvu, struct nix_hw *nix_hw, int blkaddr, u32 cfg)
{
  #line 2071 
  int fmt_idx;
  #line 2073 
  fmt_idx = 0;
  #line 2073 
  while ((int)nix_hw->mark_format.in_use > fmt_idx) {
    #line 2074 
    if (*(nix_hw->mark_format.cfg + (unsigned long)fmt_idx) == cfg) 
                                                                    #line 2075 
                                                                    return fmt_idx;
    #line 2073 
    fmt_idx ++;
  }
  #line 2077 
  if ((int)nix_hw->mark_format.total <= fmt_idx) 
                                                 #line 2078 
                                                 return -34;
  #line 2080 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((fmt_idx << 18) | 2304),(unsigned long long)cfg);
  #line 2081 
  *(nix_hw->mark_format.cfg + (unsigned long)fmt_idx) = cfg;
  #line 2082 
  nix_hw->mark_format.in_use = (u8)((int)nix_hw->mark_format.in_use + 1);
  #line 2083 
  return fmt_idx;
}

#line 2086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_af_mark_format_setup(struct rvu *rvu, struct nix_hw *nix_hw, int blkaddr)
{
  #line 2100 
  int i;
  #line 2100 
  int rc;
  #line 2101 
  u64 total;
  #line 2089 
  u64 cfgs[9U] = {65539ULL, 70144ULL, 70147ULL, 393228ULL, 396288ULL, 396300ULL, 196616ULL, 198656ULL, 198664ULL};
  #line 2103 
  total = (rvu_read64(rvu,(unsigned long long)blkaddr,96ULL) >> 8) & 255ULL;
  #line 2104 
  nix_hw->mark_format.total = (unsigned char)total;
  #line 2105 
  nix_hw->mark_format.cfg = (u32 *)cif_devm_kcalloc(rvu->dev,(unsigned long)total,4UL,3264U);
  #line 2107 
  if (nix_hw->mark_format.cfg == (u32 *)0U) 
                                            #line 2108 
                                            return -12;
  #line 2109 
  i = 0;
  #line 2109 
  while (i <= 8) {
    #line 2110 
    rc = rvu_nix_reserve_mark_format(rvu,nix_hw,blkaddr,(unsigned int)cfgs[i]);
    #line 2111 
    if (rc < 0) 
                #line 2112 
                _dev_err(rvu->dev,(char *)"Err %d in setup mark format %d\n",i,rc);
    #line 2109 
    i ++;
  }
  #line 2116 
  return 0;
}

#line 2119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_stats_rst(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 2124 
  int i;
  #line 2124 
  int nixlf;
  #line 2124 
  int blkaddr;
  #line 2125 
  u64 stats;
  #line 2122 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 2123 
  u16 pcifunc = req->hdr.pcifunc;
  #line 2127 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 2128 
  if (blkaddr < 0) 
                   #line 2129 
                   return -404;
  #line 2131 
  nixlf = rvu_get_lf(rvu,& hw->block[blkaddr],(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 2132 
  if (nixlf < 0) 
                 #line 2133 
                 return -404;
  #line 2136 
  stats = rvu_read64(rvu,(unsigned long long)blkaddr,40ULL);
  #line 2139 
  i = 0;
  #line 2139 
  while ((unsigned long long)i < ((stats >> 24) & 255ULL)) {
    #line 2140 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((nixlf << 17) | 17408) | (i << 3)),0ULL);
    #line 2139 
    i ++;
  }
  #line 2143 
  i = 0;
  #line 2143 
  while ((unsigned long long)i < ((stats >> 32) & 255ULL)) {
    #line 2144 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((nixlf << 17) | 17664) | (i << 3)),0ULL);
    #line 2143 
    i ++;
  }
  #line 2146 
  return 0;
}

#line 2150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int get_flowkey_alg_idx(struct nix_hw *nix_hw, u32 flow_cfg)
{
  #line 2152 
  int i;
  #line 2155 
  i = 0;
  #line 2155 
  while (nix_hw->flowkey.in_use > i) {
    #line 2156 
    if (nix_hw->flowkey.flowkey[i] == flow_cfg) 
                                                #line 2157 
                                                return i;
    #line 2155 
    i ++;
  }
  #line 2159 
  return -34;
}

#line 2162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int set_flowkey_fields(struct nix_rx_flowkey_alg *alg, u32 flow_cfg)
{
  #line 2164 
  int idx;
  #line 2164 
  int nr_field;
  #line 2164 
  int key_off;
  #line 2164 
  int field_marker;
  #line 2164 
  int keyoff_marker;
  #line 2165 
  int max_key_off;
  #line 2165 
  int max_bit_pos;
  #line 2165 
  int group_member;
  #line 2166 
  struct nix_rx_flowkey_alg *field;
  #line 2167 
  struct nix_rx_flowkey_alg tmp;
  #line 2168 
  u32 key_type;
  #line 2168 
  u32 valid_key;
  #line 2170 
  if (alg == (struct nix_rx_flowkey_alg *)0) 
                                             #line 2171 
                                             return -22;
  #line 2176 
  memset((void *)alg,0,40UL);
  #line 2195 
  keyoff_marker = 0;
  #line 2195 
  max_key_off = 0;
  #line 2195 
  group_member = 0;
  #line 2196 
  nr_field = 0;
  #line 2196 
  key_off = 0;
  #line 2196 
  field_marker = 1;
  #line 2197 
  field = & tmp;
  #line 2197 
  max_bit_pos = fls(flow_cfg);
  #line 2198 
  idx = 0;
  #line 2198 
  while ((idx < max_bit_pos && nr_field <= 4) && key_off <= 39) {
    #line 2201 
    key_type = (unsigned int)(1UL << idx);
    #line 2202 
    valid_key = flow_cfg & key_type;
    #line 2204 
    if (field_marker != 0) 
                           #line 2205 
                           memset((void *)(& tmp),0,8UL);
    #line 2207 
    field_marker = 1;
    #line 2208 
    keyoff_marker = 1;
    #line 2209 
    switch (key_type) {
      #line 2210 
      case (u32)1: 
                   #line 2210 
      ;
      #line 2211 
      field->sel_chan = (unsigned long long)1U;
      #line 2213 
      field->bytesm1 = (unsigned long long)1U;
      #line 2214 
      break;
      #line 2215 
      case (u32)2: 
                   #line 2215 
      ;
      #line 2216 
      case (u32)4096: 
                      #line 2216 
      ;
      #line 2217 
      field->lid = (unsigned long long)2U;
      #line 2218 
      field->ltype_match = (unsigned long long)1U;
      #line 2219 
      if (key_type == 4096U) {
        #line 2220 
        field->lid = (unsigned long long)6U;
        #line 2221 
        field->ltype_match = (unsigned long long)1U;
      }
      #line 2223 
      field->hdr_offset = (unsigned long long)12U;
      #line 2224 
      field->bytesm1 = (unsigned long long)7U;
      #line 2225 
      field->ltype_mask = (unsigned long long)15U;
      #line 2226 
      keyoff_marker = 0;
      #line 2227 
      break;
      #line 2228 
      case (u32)4: 
                   #line 2228 
      ;
      #line 2229 
      case (u32)8192: 
                      #line 2229 
      ;
      #line 2230 
      field->lid = (unsigned long long)2U;
      #line 2231 
      field->ltype_match = (unsigned long long)3U;
      #line 2232 
      if (key_type == 8192U) {
        #line 2233 
        field->lid = (unsigned long long)6U;
        #line 2234 
        field->ltype_match = (unsigned long long)2U;
      }
      #line 2236 
      field->hdr_offset = (unsigned long long)8U;
      #line 2237 
      field->bytesm1 = (unsigned long long)31U;
      #line 2238 
      field->ltype_mask = (unsigned long long)15U;
      #line 2239 
      break;
      #line 2240 
      case (u32)8: 
                   #line 2240 
      ;
      #line 2241 
      case (u32)16: 
                    #line 2241 
      ;
      #line 2242 
      case (u32)32: 
                    #line 2242 
      ;
      #line 2243 
      case (u32)16384: 
                       #line 2243 
      ;
      #line 2244 
      case (u32)32768: 
                       #line 2244 
      ;
      #line 2245 
      case (u32)65536: 
                       #line 2245 
      ;
      #line 2246 
      field->lid = (unsigned long long)3U;
      #line 2247 
      if ((key_type == 16384U || key_type == 32768U) || key_type == 65536U) 
        #line 2250 
        field->lid = (unsigned long long)7U;
      #line 2251 
      field->bytesm1 = (unsigned long long)3U;
      #line 2264 
      if ((key_type == 8U || key_type == 16384U) && valid_key != 0U) {
        #line 2267 
        field->ltype_match = (unsigned long long)((unsigned int)field->ltype_match | 1U);
        #line 2268 
        group_member = 1;
      }
      else 
        #line 2269 
        if ((key_type == 16U || key_type == 32768U) && valid_key != 0U) {
          #line 2272 
          field->ltype_match = (unsigned long long)((unsigned int)field->ltype_match | 2U);
          #line 2273 
          group_member = 1;
        }
        else 
          #line 2274 
          if ((key_type == 32U || key_type == 65536U) && valid_key != 0U) {
            #line 2277 
            field->ltype_match = (unsigned long long)((unsigned int)field->ltype_match | 4U);
            #line 2278 
            group_member = 1;
          }
      #line 2280 
      field->ltype_mask = (unsigned long long)(~ ((int)((unsigned char)field->ltype_match)));
      #line 2281 
      if (key_type == 32U || key_type == 65536U) {
        #line 2286 
        if (group_member != 0) {
          #line 2287 
          valid_key = 1U;
          #line 2288 
          group_member = 0;
        }
      }
      else {
        #line 2291 
        field_marker = 0;
        #line 2292 
        keyoff_marker = 0;
      }
      #line 2294 
      break;
      #line 2295 
      case (u32)64: 
                    #line 2295 
      ;
      #line 2296 
      field->lid = (unsigned long long)3U;
      #line 2297 
      field->hdr_offset = (unsigned long long)4U;
      #line 2298 
      field->bytesm1 = (unsigned long long)2U;
      #line 2299 
      field->ltype_match = (unsigned long long)12U;
      #line 2300 
      field->ltype_mask = (unsigned long long)15U;
      #line 2301 
      break;
      #line 2302 
      case (u32)128: 
                     #line 2302 
      ;
      #line 2303 
      case (u32)256: 
                     #line 2303 
      ;
      #line 2304 
      field->lid = (unsigned long long)4U;
      #line 2305 
      field->bytesm1 = (unsigned long long)2U;
      #line 2306 
      field->hdr_offset = (unsigned long long)4U;
      #line 2307 
      field->ltype_mask = (unsigned long long)15U;
      #line 2308 
      field_marker = 0;
      #line 2309 
      keyoff_marker = 0;
      #line 2311 
      if (key_type == 128U && valid_key != 0U) {
        #line 2312 
        field->ltype_match = (unsigned long long)((unsigned int)field->ltype_match | 1U);
        #line 2313 
        group_member = 1;
      }
      #line 2316 
      if (key_type == 256U && valid_key != 0U) {
        #line 2317 
        field->ltype_match = (unsigned long long)((unsigned int)field->ltype_match | 2U);
        #line 2318 
        group_member = 1;
      }
      #line 2321 
      if (key_type == 256U) 
        #line 2322 
        if (group_member != 0) {
          #line 2323 
          field->ltype_mask = (unsigned long long)(~ ((int)((unsigned char)field->ltype_match)));
          #line 2324 
          field_marker = 1;
          #line 2325 
          keyoff_marker = 1;
          #line 2326 
          valid_key = 1U;
          #line 2327 
          group_member = 0;
        }
      #line 2330 
      break;
      #line 2331 
      case (u32)512: 
                     #line 2331 
      ;
      #line 2332 
      case (u32)131072: 
                        #line 2332 
      ;
      #line 2333 
      field->lid = (unsigned long long)0U;
      #line 2334 
      field->ltype_match = (unsigned long long)2U;
      #line 2335 
      if (key_type == 131072U) {
        #line 2336 
        field->lid = (unsigned long long)5U;
        #line 2337 
        field->ltype_match = (unsigned long long)1U;
      }
      #line 2339 
      field->hdr_offset = (unsigned long long)0U;
      #line 2340 
      field->bytesm1 = (unsigned long long)5U;
      #line 2341 
      field->ltype_mask = (unsigned long long)15U;
      #line 2342 
      break;
      #line 2343 
      case (u32)1024: 
                      #line 2343 
      ;
      #line 2344 
      field->lid = (unsigned long long)2U;
      #line 2345 
      field->hdr_offset = (unsigned long long)40U;
      #line 2346 
      field->bytesm1 = (unsigned long long)0U;
      #line 2347 
      field->ltype_match = (unsigned long long)4U;
      #line 2348 
      field->ltype_mask = (unsigned long long)15U;
      #line 2349 
      break;
      #line 2350 
      case (u32)2048: 
                      #line 2350 
      ;
      #line 2351 
      field->lid = (unsigned long long)4U;
      #line 2352 
      field->hdr_offset = (unsigned long long)4U;
      #line 2353 
      field->bytesm1 = (unsigned long long)3U;
      #line 2354 
      field->ltype_match = (unsigned long long)4U;
      #line 2355 
      field->ltype_mask = (unsigned long long)15U;
      #line 2356 
      break;
    }
    #line 2358 
    field->ena = (unsigned long long)1U;
    #line 2361 
    if (valid_key != 0U) {
      #line 2364 
      int __UNIQUE_ID___x436;
      #line 2364 
      int tmp_0;
      #line 2362 
      field->key_offset = (unsigned long long)key_off;
      #line 2363 
      memcpy((void *)(alg + (unsigned long)nr_field),(void *)field,8UL);
      {
        #line 2364 
        __UNIQUE_ID___x436 = max_key_off;
        #line 2364 
        int __UNIQUE_ID___y437 = (int)field->bytesm1 + 1;
        #line 2364 
        if (__UNIQUE_ID___x436 > __UNIQUE_ID___y437) 
                                                     #line 2364 
                                                     tmp_0 = __UNIQUE_ID___x436; else 
                                                                    #line 2364 
                                                                    tmp_0 = __UNIQUE_ID___y437;
        }
      #line 2364 
      max_key_off = tmp_0;
      #line 2367 
      if (field_marker != 0) 
                             #line 2368 
                             nr_field ++;
    }
    #line 2372 
    if (keyoff_marker != 0) {
      #line 2373 
      key_off += max_key_off;
      #line 2374 
      max_key_off = 0;
    }
    #line 2200 
    idx ++;
  }
  #line 2378 
  if (idx == max_bit_pos && key_off <= 40) 
                                           #line 2379 
                                           return 0; else 
                                                          #line 2381 
                                                          return -415;
}

#line 2384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int reserve_flowkey_alg_idx(struct rvu *rvu, int blkaddr, u32 flow_cfg)
{
  #line 2386 
  u64 field[5U];
  #line 2387 
  struct nix_hw *hw;
  #line 2388 
  int fid;
  #line 2388 
  int rc;
  #line 2390 
  hw = get_nix_hw(rvu->hw,blkaddr);
  #line 2391 
  if (hw == (struct nix_hw *)0) 
                                #line 2392 
                                return -22;
  #line 2395 
  if (hw->flowkey.in_use > 31) 
                               #line 2396 
                               return -416;
  #line 2399 
  rc = set_flowkey_fields((struct nix_rx_flowkey_alg *)(& field),flow_cfg);
  #line 2400 
  if (rc != 0) 
               #line 2401 
               return rc;
  #line 2404 
  fid = 0;
  #line 2404 
  while (fid <= 4) {
    #line 2405 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((hw->flowkey.in_use << 18) | 6144) | (fid << 3)),field[fid]);
    #line 2404 
    fid ++;
  }
  #line 2410 
  rc = hw->flowkey.in_use;
  #line 2411 
  hw->flowkey.flowkey[rc] = flow_cfg;
  #line 2412 
  (hw->flowkey.in_use) ++;
  #line 2414 
  return rc;
}

#line 2417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_rss_flowkey_cfg(struct rvu *rvu, struct nix_rss_flowkey_cfg *req, struct nix_rss_flowkey_cfg_rsp *rsp)
{
  #line 2423 
  int alg_idx;
  #line 2423 
  int nixlf;
  #line 2423 
  int blkaddr;
  #line 2424 
  struct nix_hw *nix_hw;
  #line 2421 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 2422 
  u16 pcifunc = req->hdr.pcifunc;
  #line 2426 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 2427 
  if (blkaddr < 0) 
                   #line 2428 
                   return -404;
  #line 2430 
  nixlf = rvu_get_lf(rvu,& hw->block[blkaddr],(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 2431 
  if (nixlf < 0) 
                 #line 2432 
                 return -404;
  #line 2434 
  nix_hw = get_nix_hw(rvu->hw,blkaddr);
  #line 2435 
  if (nix_hw == (struct nix_hw *)0) 
                                    #line 2436 
                                    return -22;
  #line 2438 
  alg_idx = get_flowkey_alg_idx(nix_hw,req->flowkey_cfg);
  #line 2440 
  if (alg_idx < 0) {
    #line 2441 
    alg_idx = reserve_flowkey_alg_idx(rvu,blkaddr,req->flowkey_cfg);
    #line 2443 
    if (alg_idx < 0) 
                     #line 2444 
                     return alg_idx;
  }
  #line 2446 
  rsp->alg_idx = (unsigned char)alg_idx;
  #line 2447 
  rvu_npc_update_flowkey_alg_idx(rvu,(unsigned short)((int)pcifunc),nixlf,(int)req->group,alg_idx,req->mcam_index);
  #line 2449 
  return 0;
}

#line 2452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_rx_flowkey_alg_cfg(struct rvu *rvu, int blkaddr)
{
  #line 2454 
  u32 flowkey_cfg;
  #line 2454 
  u32 minkey_cfg;
  #line 2455 
  int alg;
  #line 2455 
  int fid;
  #line 2455 
  int rc;
  #line 2458 
  alg = 0;
  #line 2458 
  while (alg <= 31) {
    #line 2459 
    fid = 0;
    #line 2459 
    while (fid <= 4) {
      #line 2460 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((alg << 18) | 6144) | (fid << 3)),0ULL);
      #line 2459 
      fid ++;
    }
    #line 2458 
    alg ++;
  }
  #line 2466 
  flowkey_cfg = 6U;
  #line 2467 
  rc = reserve_flowkey_alg_idx(rvu,blkaddr,flowkey_cfg);
  #line 2468 
  if (rc < 0) 
              #line 2469 
              return rc;
  #line 2472 
  minkey_cfg = flowkey_cfg;
  #line 2473 
  flowkey_cfg = minkey_cfg | 8U;
  #line 2474 
  rc = reserve_flowkey_alg_idx(rvu,blkaddr,flowkey_cfg);
  #line 2475 
  if (rc < 0) 
              #line 2476 
              return rc;
  #line 2479 
  flowkey_cfg = minkey_cfg | 16U;
  #line 2480 
  rc = reserve_flowkey_alg_idx(rvu,blkaddr,flowkey_cfg);
  #line 2481 
  if (rc < 0) 
              #line 2482 
              return rc;
  #line 2485 
  flowkey_cfg = minkey_cfg | 32U;
  #line 2486 
  rc = reserve_flowkey_alg_idx(rvu,blkaddr,flowkey_cfg);
  #line 2487 
  if (rc < 0) 
              #line 2488 
              return rc;
  #line 2491 
  flowkey_cfg = minkey_cfg | 24U;
  #line 2493 
  rc = reserve_flowkey_alg_idx(rvu,blkaddr,flowkey_cfg);
  #line 2494 
  if (rc < 0) 
              #line 2495 
              return rc;
  #line 2498 
  flowkey_cfg = minkey_cfg | 40U;
  #line 2500 
  rc = reserve_flowkey_alg_idx(rvu,blkaddr,flowkey_cfg);
  #line 2501 
  if (rc < 0) 
              #line 2502 
              return rc;
  #line 2505 
  flowkey_cfg = minkey_cfg | 48U;
  #line 2507 
  rc = reserve_flowkey_alg_idx(rvu,blkaddr,flowkey_cfg);
  #line 2508 
  if (rc < 0) 
              #line 2509 
              return rc;
  #line 2512 
  flowkey_cfg = minkey_cfg | 56U;
  #line 2514 
  rc = reserve_flowkey_alg_idx(rvu,blkaddr,flowkey_cfg);
  #line 2515 
  if (rc < 0) 
              #line 2516 
              return rc;
  #line 2518 
  return 0;
}

#line 2521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_set_mac_addr(struct rvu *rvu, struct nix_set_mac_addr *req, struct msg_rsp *rsp)
{
  #line 2527 
  struct rvu_pfvf *pfvf;
  #line 2528 
  int blkaddr;
  #line 2528 
  int nixlf;
  #line 2525 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 2526 
  u16 pcifunc = req->hdr.pcifunc;
  #line 2530 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 2531 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 2532 
  if (! pfvf->nixlf || blkaddr < 0) 
                                    #line 2533 
                                    return -404;
  #line 2535 
  nixlf = rvu_get_lf(rvu,& hw->block[blkaddr],(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 2536 
  if (nixlf < 0) 
                 #line 2537 
                 return -404;
  #line 2539 
  ether_addr_copy((u8 *)(& pfvf->mac_addr),(u8 *)(& req->mac_addr));
  #line 2541 
  rvu_npc_install_ucast_entry(rvu,(unsigned short)((int)pcifunc),nixlf,(unsigned long long)pfvf->rx_chan_base,(u8 *)(& req->mac_addr));
  #line 2544 
  rvu_npc_update_rxvlan(rvu,(unsigned short)((int)pcifunc),nixlf);
  #line 2546 
  return 0;
}

#line 2549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_set_rx_mode(struct rvu *rvu, struct nix_rx_mode *req, struct msg_rsp *rsp)
{
  #line 2555 
  struct rvu_pfvf *pfvf;
  #line 2556 
  int blkaddr;
  #line 2556 
  int nixlf;
  #line 2552 
  bool allmulti = (_Bool)0;
  #line 2552 
  bool disable_promisc = (_Bool)0;
  #line 2553 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 2554 
  u16 pcifunc = req->hdr.pcifunc;
  #line 2558 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 2559 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 2560 
  if (! pfvf->nixlf || blkaddr < 0) 
                                    #line 2561 
                                    return -404;
  #line 2563 
  nixlf = rvu_get_lf(rvu,& hw->block[blkaddr],(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 2564 
  if (nixlf < 0) 
                 #line 2565 
                 return -404;
  #line 2567 
  if (((unsigned long)req->mode & 2UL) != 0UL) 
                                               #line 2568 
                                               allmulti = (_Bool)0;
  else 
    #line 2569 
    if (((unsigned long)req->mode & 4UL) != 0UL) 
                                                 #line 2570 
                                                 allmulti = (_Bool)1; else 
                                                                    #line 2572 
                                                                    disable_promisc = (_Bool)1;
  #line 2574 
  if ((int)disable_promisc != 0) 
                                 #line 2575 
                                 rvu_npc_disable_promisc_entry(rvu,(unsigned short)((int)pcifunc),nixlf); else 
                                                                    #line 2577 
                                                                    rvu_npc_install_promisc_entry(rvu,(unsigned short)((int)pcifunc),nixlf,(unsigned long long)pfvf->rx_chan_base,(_Bool)((bool)((int)allmulti) != 0));
  #line 2580 
  rvu_npc_update_rxvlan(rvu,(unsigned short)((int)pcifunc),nixlf);
  #line 2582 
  return 0;
}

#line 2585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_find_link_frs(struct rvu *rvu, struct nix_frs_cfg *req, u16 pcifunc)
{
  #line 2589 
  struct rvu_pfvf *pfvf;
  #line 2590 
  int maxlen;
  #line 2590 
  int minlen;
  #line 2591 
  int numvfs;
  #line 2591 
  int hwvf;
  #line 2592 
  int vf;
  #line 2588 
  int pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 2595 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 2596 
  pfvf->maxlen = req->maxlen;
  #line 2597 
  if ((unsigned int)req->update_minlen != 0U) 
                                              #line 2598 
                                              pfvf->minlen = req->minlen;
  #line 2600 
  maxlen = (int)req->maxlen;
  #line 2601 
  if ((unsigned int)req->update_minlen != 0U) 
                                              #line 2601 
                                              minlen = (int)req->minlen; else 
                                                                    #line 2601 
                                                                    minlen = 0;
  #line 2604 
  rvu_get_pf_numvfs(rvu,pf,& numvfs,& hwvf);
  #line 2607 
  vf = 0;
  #line 2607 
  while (vf < numvfs) {
    #line 2608 
    pfvf = rvu->hwvf + (unsigned long)(hwvf + vf);
    #line 2609 
    if ((int)pfvf->maxlen > maxlen) 
                                    #line 2610 
                                    maxlen = (int)pfvf->maxlen;
    #line 2611 
    if (((unsigned int)req->update_minlen != 0U && (unsigned int)pfvf->minlen != 0U) && (int)pfvf->minlen < minlen) 
      #line 2613 
      minlen = (int)pfvf->minlen;
    #line 2607 
    vf ++;
  }
  #line 2617 
  pfvf = rvu->pf + (unsigned long)pf;
  #line 2618 
  if ((int)pfvf->maxlen > maxlen) 
                                  #line 2619 
                                  maxlen = (int)pfvf->maxlen;
  #line 2620 
  if (((unsigned int)req->update_minlen != 0U && (unsigned int)pfvf->minlen != 0U) && (int)pfvf->minlen < minlen) 
    #line 2622 
    minlen = (int)pfvf->minlen;
  #line 2625 
  req->maxlen = (unsigned short)maxlen;
  #line 2626 
  if ((unsigned int)req->update_minlen != 0U) 
                                              #line 2627 
                                              req->minlen = (unsigned short)minlen;
  #line 2628 
  return;
}

#line 2630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_set_hw_frs(struct rvu *rvu, struct nix_frs_cfg *req, struct msg_rsp *rsp)
{
  #line 2636 
  int blkaddr;
  #line 2636 
  int schq;
  #line 2637 
  struct nix_txsch *txsch;
  #line 2638 
  u64 cfg;
  #line 2638 
  u64 lmac_fifo_len;
  #line 2639 
  struct nix_hw *nix_hw;
  #line 2633 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 2634 
  u16 pcifunc = req->hdr.pcifunc;
  #line 2635 
  int pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 2636 
  int link = -1;
  #line 2640 
  u8 cgx = (unsigned char)0U;
  #line 2640 
  u8 lmac = (unsigned char)0U;
  #line 2642 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 2643 
  if (blkaddr < 0) 
                   #line 2644 
                   return -404;
  #line 2646 
  nix_hw = get_nix_hw(rvu->hw,blkaddr);
  #line 2647 
  if (nix_hw == (struct nix_hw *)0) 
                                    #line 2648 
                                    return -22;
  #line 2650 
  if ((unsigned int)req->sdp_link == 0U && (unsigned int)req->maxlen > 9212U) 
    #line 2651 
    return -410;
  #line 2653 
  if ((unsigned int)req->update_minlen != 0U && (unsigned int)req->minlen <= 39U) 
    #line 2654 
    return -410;
  #line 2657 
  if ((unsigned int)req->update_smq == 0U) 
                                           #line 2658 
                                           goto rx_frscfg;
  #line 2661 
  txsch = & nix_hw->txsch[0];
  #line 2662 
  cif_mutex_lock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
  #line 2663 
  schq = 0;
  #line 2663 
  while ((int)txsch->schq.max > schq) {
    #line 2664 
    if ((*(txsch->pfvf_map + (unsigned long)schq) & 65535U) != (unsigned int)pcifunc) 
      #line 2665 
      goto __Cont;
    #line 2666 
    cfg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)((schq << 16) | 1792));
    #line 2667 
    cfg = (cfg & 18446744073692774655ULL) | ((unsigned long long)req->maxlen << 8);
    #line 2668 
    if ((unsigned int)req->update_minlen != 0U) 
                                                #line 2669 
                                                cfg = (cfg & 18446744073709551488ULL) | ((unsigned long long)req->minlen & 127ULL);
    #line 2670 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((schq << 16) | 1792),cfg);
    #line 2663 
    __Cont: 
            #line 2663 
    schq ++;
  }
  #line 2672 
  cif_mutex_unlock_rsrc_lock_of_rvu(& rvu->rsrc_lock);
  #line 2674 
  rx_frscfg: 
             #line 2674 
  ;
  #line 2676 
  if ((unsigned int)req->sdp_link != 0U) {
    #line 2677 
    if ((unsigned int)hw->sdp_links == 0U) 
                                           #line 2678 
                                           return -411;
    #line 2679 
    link = (int)hw->cgx_links + (int)hw->lbk_links;
    #line 2680 
    goto linkcfg;
  }
  #line 2684 
  if ((int)is_pf_cgxmapped(rvu,(unsigned char)((int)((unsigned char)pf))) != 0) {
    #line 2686 
    rvu_get_cgx_lmac_id((unsigned char)((int)*(rvu->pf2cgxlmac_map + (unsigned long)pf)),& cgx,& lmac);
    #line 2687 
    link = (int)cgx * (int)hw->lmac_per_cgx + (int)lmac;
  }
  else 
    #line 2688 
    if (pf == 0) 
                 #line 2690 
                 link = (int)hw->cgx_links;
  #line 2693 
  if (link < 0) 
                #line 2694 
                return -411;
  #line 2696 
  nix_find_link_frs(rvu,req,(unsigned short)((int)pcifunc));
  #line 2698 
  linkcfg: 
           #line 2698 
  ;
  #line 2699 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)((link << 16) | 1344));
  #line 2700 
  cfg = (cfg & 18446744069414649855ULL) | ((unsigned long long)req->maxlen << 16);
  #line 2701 
  if ((unsigned int)req->update_minlen != 0U) 
                                              #line 2702 
                                              cfg = (cfg & 18446744073709486080ULL) | (unsigned long long)req->minlen;
  #line 2703 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((link << 16) | 1344),cfg);
  #line 2705 
  if ((unsigned int)req->sdp_link != 0U || pf == 0) 
                                                    #line 2706 
                                                    return 0;
  #line 2709 
  lmac_fifo_len = (unsigned long long)(65536 / cgx_get_lmac_cnt(rvu_cgx_pdata((unsigned char)((int)cgx),rvu)));
  #line 2711 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)((link << 16) | 2560));
  #line 2712 
  cfg &= 18446744069414588415ULL;
  #line 2713 
  cfg = ((lmac_fifo_len - (unsigned long long)req->maxlen) / 16ULL << 12) | cfg;
  #line 2714 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((link << 16) | 2560),cfg);
  #line 2715 
  return 0;
}

#line 2718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_rxvlan_alloc(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 2725 
  int blkaddr;
  #line 2725 
  int nixlf;
  #line 2725 
  int err;
  #line 2726 
  struct rvu_pfvf *pfvf;
  #line 2721 
  struct npc_mcam_alloc_entry_req alloc_req = {.hdr = {.pcifunc = (unsigned short)0, .id = (unsigned short)0, .sig = (unsigned short)0, .ver = (unsigned short)0, .next_msgoff = (unsigned short)0, .rc = 0}, .contig = (unsigned char)0, .priority = (unsigned char)0, .ref_entry = (unsigned short)0, .count = (unsigned short)0};
  #line 2722 
  struct npc_mcam_alloc_entry_rsp alloc_rsp = {.hdr = {.pcifunc = (unsigned short)0, .id = (unsigned short)0, .sig = (unsigned short)0, .ver = (unsigned short)0, .next_msgoff = (unsigned short)0, .rc = 0}, .entry = (unsigned short)0, .count = (unsigned short)0, .free_count = (unsigned short)0, .entry_list = {(unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0}};
  #line 2723 
  struct npc_mcam_free_entry_req free_req = {.hdr = {.pcifunc = (unsigned short)0, .id = (unsigned short)0, .sig = (unsigned short)0, .ver = (unsigned short)0, .next_msgoff = (unsigned short)0, .rc = 0}, .entry = (unsigned short)0, .all = (unsigned char)0};
  #line 2724 
  u16 pcifunc = req->hdr.pcifunc;
  #line 2731 
  if (is_afvf((unsigned short)((int)pcifunc)) != 0) 
                                                    #line 2732 
                                                    return 0;
  #line 2734 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 2735 
  if ((int)pfvf->rxvlan != 0) 
                              #line 2736 
                              return 0;
  #line 2739 
  alloc_req.hdr.pcifunc = pcifunc;
  #line 2740 
  alloc_req.count = (unsigned short)1U;
  #line 2742 
  err = rvu_mbox_handler_npc_mcam_alloc_entry(rvu,& alloc_req,& alloc_rsp);
  #line 2744 
  if (err != 0) 
                #line 2745 
                return err;
  #line 2748 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 2749 
  if (blkaddr < 0) {
    #line 2750 
    err = -404;
    #line 2751 
    goto free_entry;
  }
  #line 2754 
  nixlf = rvu_get_lf(rvu,& (rvu->hw)->block[blkaddr],(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 2755 
  if (nixlf < 0) {
    #line 2756 
    err = -404;
    #line 2757 
    goto free_entry;
  }
  #line 2760 
  pfvf->rxvlan_index = (int)alloc_rsp.entry_list[0];
  #line 2762 
  pfvf->rxvlan = (_Bool)1;
  #line 2764 
  err = rvu_npc_update_rxvlan(rvu,(unsigned short)((int)pcifunc),nixlf);
  #line 2765 
  if (err != 0) 
                #line 2766 
                goto free_entry;
  #line 2768 
  return 0;
  #line 2769 
  free_entry: 
              #line 2769 
  ;
  #line 2770 
  free_req.hdr.pcifunc = pcifunc;
  #line 2771 
  free_req.entry = alloc_rsp.entry_list[0];
  #line 2772 
  rvu_mbox_handler_npc_mcam_free_entry(rvu,& free_req,rsp);
  #line 2773 
  pfvf->rxvlan = (_Bool)0;
  #line 2774 
  return err;
}

#line 2777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_set_rx_cfg(struct rvu *rvu, struct nix_rx_cfg *req, struct msg_rsp *rsp)
{
  #line 2782 
  struct rvu_block *block;
  #line 2783 
  struct rvu_pfvf *pfvf;
  #line 2784 
  int nixlf;
  #line 2784 
  int blkaddr;
  #line 2785 
  u64 cfg;
  #line 2780 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 2781 
  u16 pcifunc = req->hdr.pcifunc;
  #line 2787 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 2788 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 2789 
  if (! pfvf->nixlf || blkaddr < 0) 
                                    #line 2790 
                                    return -404;
  #line 2792 
  block = & hw->block[blkaddr];
  #line 2793 
  nixlf = rvu_get_lf(rvu,block,(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 2794 
  if (nixlf < 0) 
                 #line 2795 
                 return -404;
  #line 2797 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16544));
  #line 2799 
  if (((unsigned long)req->len_verify & 1UL) != 0UL) 
                                                     #line 2800 
                                                     cfg |= 2199023255552ULL; else 
                                                                    #line 2802 
                                                                    cfg &= 18446741874686296063ULL;
  #line 2804 
  if (((unsigned long)req->len_verify & 2UL) != 0UL) 
                                                     #line 2805 
                                                     cfg |= 1099511627776ULL; else 
                                                                    #line 2807 
                                                                    cfg &= 18446742974197923839ULL;
  #line 2809 
  if (((unsigned long)req->csum_verify & 1UL) != 0UL) 
                                                      #line 2810 
                                                      cfg |= 137438953472ULL; else 
                                                                    #line 2812 
                                                                    cfg &= 18446743936270598143ULL;
  #line 2814 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((nixlf << 17) | 16544),cfg);
  #line 2816 
  return 0;
}

#line 2819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static void nix_link_config(struct rvu *rvu, int blkaddr)
{
  #line 2822 
  int cgx;
  #line 2822 
  int lmac_cnt;
  #line 2822 
  int slink;
  #line 2822 
  int link;
  #line 2823 
  u64 tx_credits;
  #line 2821 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 2831 
  link = 0;
  #line 2831 
  while ((int)hw->cgx_links + (int)hw->lbk_links > link) {
    #line 2832 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((link << 16) | 1344),603717672ULL);
    #line 2831 
    link ++;
  }
  #line 2836 
  if ((unsigned int)hw->sdp_links != 0U) {
    #line 2837 
    link = (int)hw->cgx_links + (int)hw->lbk_links;
    #line 2838 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((link << 16) | 1344),18446744073709486120ULL);
  }
  #line 2845 
  cgx = 0;
  #line 2845 
  while ((int)hw->cgx > cgx) {
    {
      #line 2846 
      lmac_cnt = cgx_get_lmac_cnt(rvu_cgx_pdata((unsigned char)((int)((unsigned char)cgx)),rvu));
      #line 2847 
      tx_credits = (unsigned long long)((65536 / lmac_cnt + -9212) / 16);
      #line 2849 
      tx_credits = (tx_credits << 12) | 2046ULL;
      #line 2850 
      slink = (int)hw->lmac_per_cgx * cgx;
      #line 2851 
      link = slink;
      #line 2851 
      while (slink + lmac_cnt > link) {
        #line 2852 
        rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((link << 16) | 2560),tx_credits);
        #line 2851 
        link ++;
      }
    }
    #line 2845 
    cgx ++;
  }
  #line 2859 
  slink = (int)hw->cgx_links;
  #line 2860 
  link = slink;
  #line 2860 
  while ((int)hw->lbk_links + slink > link) {
    #line 2861 
    tx_credits = 1000ULL;
    #line 2863 
    tx_credits = (tx_credits << 12) | 2046ULL;
    #line 2864 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((link << 16) | 2560),tx_credits);
    #line 2860 
    link ++;
  }
  #line 2867 
  return;
}

#line 2869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_calibrate_x2p(struct rvu *rvu, int blkaddr)
{
  #line 2871 
  int idx;
  #line 2871 
  int err;
  #line 2872 
  u64 status;
  #line 2875 
  ;
  #line 2875 
  ;
  #line 2875 
  rvu_write64(rvu,(unsigned long long)blkaddr,0ULL,rvu_read64(rvu,(unsigned long long)blkaddr,0ULL) | 512ULL);
  #line 2878 
  err = rvu_poll_reg(rvu,(unsigned long long)blkaddr,16ULL,1024ULL,(_Bool)0);
  #line 2880 
  if (err != 0) {
    #line 2881 
    _dev_err(rvu->dev,(char *)"NIX X2P bus calibration failed\n");
    #line 2882 
    return err;
  }
  #line 2885 
  status = rvu_read64(rvu,(unsigned long long)blkaddr,16ULL);
  #line 2887 
  idx = 0;
  #line 2887 
  while ((int)rvu->cgx_cnt_max > idx) {
    {
      #line 2889 
      if (rvu_cgx_pdata((unsigned char)((int)((unsigned char)idx)),rvu) == (void *)0) 
        #line 2891 
        goto __Cont;
      else 
        #line 2889 
        if (((status >> (idx + 16)) & 1ULL) != 0ULL) 
                                                     #line 2891 
                                                     goto __Cont;
      #line 2892 
      _dev_err(rvu->dev,(char *)"CGX%d didn\'t respond to NIX X2P calibration\n",idx);
      #line 2894 
      err = -16;
    }
    #line 2887 
    __Cont: 
            #line 2887 
    idx ++;
  }
  #line 2898 
  if ((status & 524288ULL) == 0ULL) {
    #line 2899 
    _dev_err(rvu->dev,(char *)"LBK didn\'t respond to NIX X2P calibration\n");
    #line 2901 
    err = -16;
  }
  #line 2905 
  ;
  #line 2905 
  ;
  #line 2905 
  rvu_write64(rvu,(unsigned long long)blkaddr,0ULL,rvu_read64(rvu,(unsigned long long)blkaddr,0ULL) & 18446744073709551103ULL);
  #line 2907 
  if (err != 0 || (status & 1023ULL) != 0ULL) 
                                              #line 2908 
                                              _dev_err(rvu->dev,(char *)"NIX X2P calibration failed, status 0x%llx\n",status);
  #line 2910 
  if (err != 0) 
                #line 2911 
                return err;
  #line 2912 
  return 0;
}

#line 2915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
static int nix_aq_init(struct rvu *rvu, struct rvu_block *block)
{
  #line 2917 
  u64 cfg;
  #line 2918 
  int err;
  #line 2921 
  cfg = rvu_read64(rvu,(unsigned long long)block->addr,0ULL);
  #line 2926 
  cfg &= 18446744073709551359ULL;
  #line 2927 
  rvu_write64(rvu,(unsigned long long)block->addr,0ULL,cfg);
  #line 2931 
  cfg = rvu_read64(rvu,(unsigned long long)block->addr,24ULL);
  #line 2932 
  cfg &= 18446744073709535233ULL;
  #line 2935 
  cfg |= 4ULL;
  #line 2937 
  rvu_write64(rvu,(unsigned long long)block->addr,24ULL,cfg);
  #line 2943 
  err = rvu_aq_alloc(rvu,& block->aq,16,16,384);
  #line 2946 
  if (err != 0) 
                #line 2947 
                return err;
  #line 2949 
  rvu_write64(rvu,(unsigned long long)block->addr,1024ULL,0ULL);
  #line 2950 
  rvu_write64(rvu,(unsigned long long)block->addr,1040ULL,((block->aq)->inst)->iova);
  #line 2952 
  return 0;
}

#line 2955  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_nix_init(struct rvu *rvu)
{
  #line 2958 
  struct rvu_block *block;
  #line 2959 
  int blkaddr;
  #line 2959 
  int err;
  #line 2960 
  u64 cfg;
  #line 2957 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 2962 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)0);
  #line 2963 
  if (blkaddr < 0) 
                   #line 2964 
                   return 0;
  #line 2965 
  block = & hw->block[blkaddr];
  #line 2967 
  if ((int)is_rvu_96xx_B0(rvu) != 0) {
    #line 2972 
    ;
    #line 2972 
    ;
    #line 2972 
    rvu_write64(rvu,(unsigned long long)blkaddr,0ULL,rvu_read64(rvu,(unsigned long long)blkaddr,0ULL) | 64ULL);
    #line 2976 
    rvu_write64(rvu,(unsigned long long)blkaddr,2048ULL,1ULL);
    #line 2982 
    cfg = rvu_read64(rvu,(unsigned long long)blkaddr,1872ULL);
    #line 2983 
    cfg &= 18446744073709518847ULL;
    #line 2984 
    rvu_write64(rvu,(unsigned long long)blkaddr,1872ULL,cfg);
  }
  #line 2988 
  err = nix_calibrate_x2p(rvu,blkaddr);
  #line 2989 
  if (err != 0) 
                #line 2990 
                return err;
  #line 2993 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,32ULL);
  #line 2994 
  hw->cgx = (unsigned char)((unsigned int)((unsigned char)(cfg >> 12)) & 15U);
  #line 2995 
  hw->lmac_per_cgx = (unsigned char)((unsigned int)((unsigned char)(cfg >> 8)) & 15U);
  #line 2996 
  hw->cgx_links = (unsigned char)((int)hw->cgx * (int)hw->lmac_per_cgx);
  #line 2997 
  hw->lbk_links = (unsigned char)1U;
  #line 2998 
  hw->sdp_links = (unsigned char)1U;
  #line 3001 
  err = nix_aq_init(rvu,block);
  #line 3002 
  if (err != 0) 
                #line 3003 
                return err;
  #line 3006 
  rvu_write64(rvu,(unsigned long long)blkaddr,240ULL,0ULL);
  #line 3008 
  if (blkaddr == 4) {
    #line 3009 
    hw->nix0 = (struct nix_hw *)cif_devm_kzalloc_2(rvu->dev,504UL,3264U);
    #line 3011 
    if (hw->nix0 == (struct nix_hw *)0) 
                                        #line 3012 
                                        return -12;
    #line 3014 
    err = nix_setup_txschq(rvu,hw->nix0,blkaddr);
    #line 3015 
    if (err != 0) 
                  #line 3016 
                  return err;
    #line 3018 
    err = nix_af_mark_format_setup(rvu,hw->nix0,blkaddr);
    #line 3019 
    if (err != 0) 
                  #line 3020 
                  return err;
    #line 3022 
    err = nix_setup_mcast(rvu,hw->nix0,blkaddr);
    #line 3023 
    if (err != 0) 
                  #line 3024 
                  return err;
    #line 3027 
    nix_setup_lso(rvu,hw->nix0,blkaddr);
    #line 3033 
    rvu_write64(rvu,(unsigned long long)blkaddr,512ULL,47ULL);
    #line 3035 
    rvu_write64(rvu,(unsigned long long)blkaddr,528ULL,543ULL);
    #line 3037 
    rvu_write64(rvu,(unsigned long long)blkaddr,544ULL,1567ULL);
    #line 3039 
    rvu_write64(rvu,(unsigned long long)blkaddr,560ULL,575ULL);
    #line 3041 
    rvu_write64(rvu,(unsigned long long)blkaddr,576ULL,1583ULL);
    #line 3043 
    rvu_write64(rvu,(unsigned long long)blkaddr,592ULL,799ULL);
    #line 3045 
    rvu_write64(rvu,(unsigned long long)blkaddr,608ULL,1823ULL);
    #line 3047 
    rvu_write64(rvu,(unsigned long long)blkaddr,624ULL,815ULL);
    #line 3049 
    rvu_write64(rvu,(unsigned long long)blkaddr,640ULL,1839ULL);
    #line 3051 
    rvu_write64(rvu,(unsigned long long)blkaddr,656ULL,847ULL);
    #line 3053 
    rvu_write64(rvu,(unsigned long long)blkaddr,672ULL,1871ULL);
    #line 3057 
    err = nix_rx_flowkey_alg_cfg(rvu,blkaddr);
    #line 3058 
    if (err != 0) 
                  #line 3059 
                  return err;
    #line 3062 
    nix_link_config(rvu,blkaddr);
  }
  #line 3064 
  return 0;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
void rvu_nix_freemem(struct rvu *rvu)
{
  #line 3070 
  struct rvu_block *block;
  #line 3071 
  struct nix_txsch *txsch;
  #line 3072 
  struct nix_mcast *mcast;
  #line 3073 
  struct nix_hw *nix_hw;
  #line 3074 
  int blkaddr;
  #line 3074 
  int lvl;
  #line 3069 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 3076 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)0);
  #line 3077 
  if (blkaddr < 0) 
                   #line 3078 
                   return;
  #line 3080 
  block = & hw->block[blkaddr];
  #line 3081 
  rvu_aq_free(rvu,block->aq);
  #line 3083 
  if (blkaddr == 4) {
    #line 3084 
    nix_hw = get_nix_hw(rvu->hw,blkaddr);
    #line 3085 
    if (nix_hw == (struct nix_hw *)0) 
                                      #line 3086 
                                      return;
    #line 3088 
    lvl = 0;
    #line 3088 
    while (lvl <= 4) {
      #line 3089 
      txsch = & nix_hw->txsch[lvl];
      #line 3090 
      kfree((void *)txsch->schq.bmap);
      #line 3088 
      lvl ++;
    }
    #line 3093 
    mcast = & nix_hw->mcast;
    #line 3094 
    qmem_free(rvu->dev,mcast->mce_ctx);
    #line 3095 
    qmem_free(rvu->dev,mcast->mcast_buf);
    #line 3096 
    mutex_destroy(& mcast->mce_lock);
  }
  #line 3098 
  return;
}

#line 3100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int nix_get_nixlf(struct rvu *rvu, u16 pcifunc, int *nixlf)
{
  #line 3104 
  int blkaddr;
  #line 3102 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 3103 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 3106 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 3107 
  if (! pfvf->nixlf || blkaddr < 0) 
                                    #line 3108 
                                    return -404;
  #line 3110 
  *nixlf = rvu_get_lf(rvu,& hw->block[blkaddr],(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 3111 
  if (*nixlf < 0) 
                  #line 3112 
                  return -404;
  #line 3114 
  return 0;
}

#line 3117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_lf_start_rx(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 3121 
  int nixlf;
  #line 3121 
  int err;
  #line 3120 
  u16 pcifunc = req->hdr.pcifunc;
  #line 3123 
  err = nix_get_nixlf(rvu,(unsigned short)((int)pcifunc),& nixlf);
  #line 3124 
  if (err != 0) 
                #line 3125 
                return err;
  #line 3127 
  rvu_npc_enable_default_entries(rvu,(unsigned short)((int)pcifunc),nixlf);
  #line 3129 
  return rvu_cgx_start_stop_io(rvu,(unsigned short)((int)pcifunc),(_Bool)1);
}

#line 3132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_lf_stop_rx(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 3136 
  int nixlf;
  #line 3136 
  int err;
  #line 3135 
  u16 pcifunc = req->hdr.pcifunc;
  #line 3138 
  err = nix_get_nixlf(rvu,(unsigned short)((int)pcifunc),& nixlf);
  #line 3139 
  if (err != 0) 
                #line 3140 
                return err;
  #line 3142 
  rvu_npc_disable_default_entries(rvu,(unsigned short)((int)pcifunc),nixlf);
  #line 3144 
  return rvu_cgx_start_stop_io(rvu,(unsigned short)((int)pcifunc),(_Bool)0);
}

#line 3147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
void rvu_nix_lf_teardown(struct rvu *rvu, u16 pcifunc, int blkaddr, int nixlf)
{
  #line 3150 
  struct hwctx_disable_req ctx_req;
  #line 3151 
  int err;
  #line 3149 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 3153 
  ctx_req.hdr.pcifunc = pcifunc;
  #line 3156 
  nix_interface_deinit(rvu,(unsigned short)((int)pcifunc),(unsigned char)((int)((unsigned char)nixlf)));
  #line 3157 
  nix_rx_sync(rvu,blkaddr);
  #line 3158 
  nix_txschq_free(rvu,(unsigned short)((int)pcifunc));
  #line 3160 
  rvu_cgx_start_stop_io(rvu,(unsigned short)((int)pcifunc),(_Bool)0);
  #line 3162 
  if (pfvf->sq_ctx != (struct qmem *)0) {
    #line 3163 
    ctx_req.ctype = (unsigned char)1U;
    #line 3164 
    err = nix_lf_hwctx_disable(rvu,& ctx_req);
    #line 3165 
    if (err != 0) 
                  #line 3166 
                  _dev_err(rvu->dev,(char *)"SQ ctx disable failed\n");
  }
  #line 3169 
  if (pfvf->rq_ctx != (struct qmem *)0) {
    #line 3170 
    ctx_req.ctype = (unsigned char)0U;
    #line 3171 
    err = nix_lf_hwctx_disable(rvu,& ctx_req);
    #line 3172 
    if (err != 0) 
                  #line 3173 
                  _dev_err(rvu->dev,(char *)"RQ ctx disable failed\n");
  }
  #line 3176 
  if (pfvf->cq_ctx != (struct qmem *)0) {
    #line 3177 
    ctx_req.ctype = (unsigned char)2U;
    #line 3178 
    err = nix_lf_hwctx_disable(rvu,& ctx_req);
    #line 3179 
    if (err != 0) 
                  #line 3180 
                  _dev_err(rvu->dev,(char *)"CQ ctx disable failed\n");
  }
  #line 3183 
  nix_ctx_free(rvu,pfvf);
  #line 3184 
  return;
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_nix.c"
int rvu_mbox_handler_nix_lso_format_cfg(struct rvu *rvu, struct nix_lso_format_cfg *req, struct nix_lso_format_cfg_rsp *rsp)
{
  #line 3191 
  struct nix_hw *nix_hw;
  #line 3192 
  struct rvu_pfvf *pfvf;
  #line 3193 
  int blkaddr;
  #line 3193 
  int idx;
  #line 3193 
  int f;
  #line 3194 
  u64 reg;
  #line 3227 
  u8 tmp;
  #line 3190 
  u16 pcifunc = req->hdr.pcifunc;
  #line 3196 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 3197 
  blkaddr = rvu_get_blkaddr(rvu,3,(unsigned short)((int)pcifunc));
  #line 3198 
  if (! pfvf->nixlf || blkaddr < 0) 
                                    #line 3199 
                                    return -404;
  #line 3201 
  nix_hw = get_nix_hw(rvu->hw,blkaddr);
  #line 3202 
  if (nix_hw == (struct nix_hw *)0) 
                                    #line 3203 
                                    return -22;
  #line 3206 
  idx = 0;
  #line 3206 
  while ((int)nix_hw->lso.in_use > idx) {
    #line 3207 
    f = 0;
    #line 3207 
    while (f <= 7) {
      #line 3208 
      reg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((idx << 16) | 6912) | (f << 3)));
      #line 3210 
      if (req->fields[f] != (req->field_mask & reg)) 
                                                     #line 3211 
                                                     break;
      #line 3207 
      f ++;
    }
    #line 3214 
    if (f == 8) 
                #line 3215 
                break;
    #line 3206 
    idx ++;
  }
  #line 3218 
  if ((int)nix_hw->lso.in_use > idx) {
    #line 3220 
    rsp->lso_format_idx = (unsigned char)idx;
    #line 3221 
    return 0;
  }
  #line 3224 
  if ((int)nix_hw->lso.in_use == (int)nix_hw->lso.total) 
                                                         #line 3225 
                                                         return -418;
  #line 3227 
  tmp = nix_hw->lso.in_use;
  #line 3227 
  nix_hw->lso.in_use = (u8)((int)nix_hw->lso.in_use + 1);
  #line 3227 
  rsp->lso_format_idx = tmp;
  #line 3229 
  f = 0;
  #line 3229 
  while (f <= 7) {
    #line 3230 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((int)rsp->lso_format_idx << 16) | 6912) | (f << 3)),req->fields[f]);
    #line 3229 
    f ++;
  }
  #line 3234 
  return 0;
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 117 
  ldv_set_bit(nr,addr);
  #line 118 
  return;
}

#line 458  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags)
{
  #line 461 
  return ldv_kcalloc(n,size,flags);
}

#line 479  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 482 
  return ldv_kzalloc(size,flags);
}

#line 495  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void *cif_devm_kzalloc_2(struct device *dev, size_t size, gfp_t flags)
{
  #line 498 
  return ldv_devm_kzalloc(size,flags);
}

#line 659  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void cif_mutex_lock_rsrc_lock_of_rvu(struct mutex *lock)
{
  #line 662 
  ldv_mutex_model_lock(lock,(char *)"rsrc_lock_of_rvu");
  #line 663 
  return;
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void cif_mutex_unlock_rsrc_lock_of_rvu(struct mutex *lock)
{
  #line 669 
  ldv_mutex_model_unlock(lock,(char *)"rsrc_lock_of_rvu");
  #line 670 
  return;
}

#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void cif_spin_lock_lock_of_admin_queue_0(spinlock_t *lock)
{
  #line 676 
  ldv_spin_model_lock((char *)"lock_of_admin_queue");
  #line 678 
  spin_lock_2(lock);
  #line 679 
  return;
}

#line 682  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void cif_spin_unlock_lock_of_admin_queue_0(spinlock_t *lock)
{
  #line 685 
  ldv_spin_model_unlock((char *)"lock_of_admin_queue");
  #line 687 
  spin_unlock_2(lock);
  #line 688 
  return;
}

#line 691  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static unsigned long cif_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 694 
  return ldv_bitmap_find_next_zero_area(map,size,start,nr,align_mask);
}

#line 698  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void cif_mutex_lock_mce_lock_of_nix_mcast(struct mutex *lock)
{
  #line 701 
  ldv_mutex_model_lock(lock,(char *)"mce_lock_of_nix_mcast");
  #line 702 
  return;
}

#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void cif_mutex_unlock_mce_lock_of_nix_mcast(struct mutex *lock)
{
  #line 708 
  ldv_mutex_model_unlock(lock,(char *)"mce_lock_of_nix_mcast");
  #line 709 
  return;
}

#line 712  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_nix.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 715 
  return ldv_devm_kcalloc(n,size,flags);
}

/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 70 
unsigned long find_first_zero_bit(unsigned long *, unsigned long);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  #line 45 
  unsigned long res;
  #line 46 
  ldv_inline_asm();
  #line 51 
  return res;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  #line 72 
  unsigned long tmp_0;
  #line 72 
  if (0 != 0) 
              #line 72 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)(((((((((w & 256UL) != 0UL) + ((w & 512UL) != 0UL)) + ((w & 1024UL) != 0UL)) + ((w & 2048UL) != 0UL)) + ((w & 4096UL) != 0UL)) + ((w & 8192UL) != 0UL)) + ((w & 16384UL) != 0UL)) + ((w & 32768UL) != 0UL))) + ((unsigned int)(((((((((w & 65536UL) != 0UL) + ((w & 131072UL) != 0UL)) + ((w & 262144UL) != 0UL)) + ((w & 524288UL) != 0UL)) + ((w & 1048576UL) != 0UL)) + ((w & 2097152UL) != 0UL)) + ((w & 4194304UL) != 0UL)) + ((w & 8388608UL) != 0UL)) + (unsigned int)(((((((((w & 16777216UL) != 0UL) + ((w & 33554432UL) != 0UL)) + ((w & 67108864UL) != 0UL)) + ((w & 134217728UL) != 0UL)) + ((w & 268435456UL) != 0UL)) + ((w & 536870912UL) != 0UL)) + ((w & 1073741824UL) != 0UL)) + ((w & 2147483648UL) != 0UL)))) + (((unsigned int)(((((((((w & 4294967296UL) != 0UL) + ((w & 8589934592UL) != 0UL)) + ((w & 17179869184UL) != 0UL)) + ((w & 34359738368UL) != 0UL)) + ((w & 68719476736UL) != 0UL)) + ((w & 137438953472UL) != 0UL)) + ((w & 274877906944UL) != 0UL)) + ((w & 549755813888UL) != 0UL)) + (unsigned int)(((((((((w & 1099511627776UL) != 0UL) + ((w & 2199023255552UL) != 0UL)) + ((w & 4398046511104UL) != 0UL)) + ((w & 8796093022208UL) != 0UL)) + ((w & 17592186044416UL) != 0UL)) + ((w & 35184372088832UL) != 0UL)) + ((w & 70368744177664UL) != 0UL)) + ((w & 140737488355328UL) != 0UL))) + ((unsigned int)(((((((((w & 281474976710656UL) != 0UL) + ((w & 562949953421312UL) != 0UL)) + ((w & 1125899906842624UL) != 0UL)) + ((w & 2251799813685248UL) != 0UL)) + ((w & 4503599627370496UL) != 0UL)) + ((w & 9007199254740992UL) != 0UL)) + ((w & 18014398509481984UL) != 0UL)) + ((w & 36028797018963968UL) != 0UL)) + (unsigned int)(((((((((w & 72057594037927936UL) != 0UL) + ((w & 144115188075855872UL) != 0UL)) + ((w & 288230376151711744UL) != 0UL)) + ((w & 576460752303423488UL) != 0UL)) + ((w & 1152921504606846976UL) != 0UL)) + ((w & 2305843009213693952UL) != 0UL)) + ((w & 4611686018427387904UL) != 0UL)) + ((w & 9223372036854775808UL) != 0UL))))); else 
                                                                    #line 72 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  #line 72 
  return tmp_0;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 32 
ssize_t strscpy(char *, char *, size_t);
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 151 
int __bitmap_weight(unsigned long *, unsigned int);
#line 184 
#line 702  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static unsigned long cif_bitmap_find_next_zero_area_0(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long *src, unsigned int nbits)
{
  #line 390 
  if (0 != 0 && nbits + 4294967295U <= 63U) {
    #line 391 
    return (int)hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
  }
  #line 392 
  return __bitmap_weight(src,nbits);
}

#line 408 
#line 709  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void cif_bitmap_set(unsigned long *map, unsigned int start, unsigned int nbits);
#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 716  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void cif_bitmap_clear(unsigned long *map, unsigned int start, unsigned int nbits);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
#line 723 
static void cif_mutex_lock_rsrc_lock_of_rvu_0(struct mutex *lock);
#line 26 
#line 744 
static void cif_mutex_lock_flr_lock_of_rvu(struct mutex *lock);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 28 
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 24 
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25 
#line 25 
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 730  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void cif_mutex_unlock_rsrc_lock_of_rvu_0(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 751  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void cif_mutex_unlock_flr_lock_of_rvu(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 292 
#line 292 
unsigned int jiffies_to_usecs(unsigned long);
#line 375 
#line 375 
unsigned long __usecs_to_jiffies(unsigned int);
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _usecs_to_jiffies(unsigned int u)
{
  #line 379 
  return (unsigned long)(((long)u + 3999L) / 4000L);
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long usecs_to_jiffies(unsigned int u)
{
  #line 413 
  if (0 != 0) {
    #line 414 
    ;
    #line 414 
    if (jiffies_to_usecs(4611686018427387902UL) < u) 
                                                     #line 415 
                                                     return 4611686018427387902UL;
    #line 416 
    return _usecs_to_jiffies(u);
  }
  else {
    #line 418 
    return __usecs_to_jiffies(u);
  }
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 341  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static bool cif_queue_work_1(struct workqueue_struct *wq, struct work_struct *work);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
#line 209 
void iounmap(void *);
#line 366 
#line 366 
void *ioremap_wc(resource_size_t, unsigned long);
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
__inline static unsigned long pfn_to_section_nr(unsigned long pfn)
{
  #line 1162 
  return pfn >> 15;
}

#line 1238 
#line 1238 
extern struct mem_section **mem_section;
#line 1248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
__inline static struct mem_section *__nr_to_section(unsigned long nr)
{
  #line 1251 
  if (mem_section == (struct mem_section **)0) 
                                               #line 1252 
                                               return (struct mem_section *)0;
  #line 1254 
  if (*(mem_section + nr / 128UL) == (struct mem_section *)0) 
                                                              #line 1255 
                                                              return (struct mem_section *)0;
  #line 1256 
  return *(mem_section + nr / 128UL) + (nr & 127UL);
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
__inline static int valid_section(struct mem_section *section)
{
  #line 1301 
  return (section != (struct mem_section *)0 && (section->section_mem_map & 2UL) != 0UL) != 0;
}

#line 1304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
__inline static int early_section(struct mem_section *section)
{
  #line 1306 
  return (section != (struct mem_section *)0 && (section->section_mem_map & 8UL) != 0UL) != 0;
}

#line 1338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
__inline static int subsection_map_index(unsigned long pfn)
{
  #line 1340 
  return (int)((pfn & 32767UL) / 512UL);
}

#line 1344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
__inline static int pfn_section_valid(struct mem_section *ms, unsigned long pfn)
{
  #line 1346 
  int idx = subsection_map_index(pfn);
  #line 1348 
  return (int)test_bit((long)idx,(unsigned long *)(& (ms->usage)->subsection_map));
}

#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
__inline static int pfn_valid(unsigned long pfn)
{
  #line 1360 
  struct mem_section *ms;
  #line 1362 
  unsigned long tmp;
  #line 1362 
  unsigned long tmp_1;
  #line 1371 
  int tmp_6;
  #line 1362 
  tmp = pfn_to_section_nr(pfn);
  #line 1362 
  if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                      #line 1362 
                                                      tmp_1 = 33554432UL; else 
                                                                    #line 1362 
                                                                    tmp_1 = 524288UL;
  #line 1362 
  if (tmp >= tmp_1) 
                    #line 1363 
                    return 0;
  #line 1364 
  ms = __nr_to_section(pfn_to_section_nr(pfn));
  #line 1365 
  if (valid_section(ms) == 0) 
                              #line 1366 
                              return 0;
  #line 1371 
  if (early_section(ms) != 0) 
                              #line 1371 
                              tmp_6 = 1;
  else {
    #line 1371 
    if (pfn_section_valid(ms,pfn) != 0) 
                                        #line 1371 
                                        tmp_6 = 1; else 
                                                        #line 1371 
                                                        tmp_6 = 0;
  }
  #line 1371 
  return tmp_6;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 766  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 758  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 435  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void *kcalloc_2(size_t n, size_t size, gfp_t flags);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 695  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void *cif_devm_kzalloc_3(struct device *dev, size_t size, gfp_t flags);
#line 947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 470  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void *cif_devm_kmalloc_array(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 737  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void *cif_devm_kcalloc_0(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1019 
void pci_dev_put(struct pci_dev *);
#line 1346 
#line 774  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 782  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1432 
int pci_msix_vec_count(struct pci_dev *);
#line 2022 
#line 2022 
void *pci_ioremap_bar(struct pci_dev *, int);
#line 2029 
#line 2029 
int pci_enable_sriov(struct pci_dev *, int);
#line 2030 
#line 2030 
void pci_disable_sriov(struct pci_dev *);
#line 2036 
#line 2036 
int pci_sriov_get_totalvfs(struct pci_dev *);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 45 
#line 45 
void debug_dma_map_resource(struct device *, phys_addr_t, size_t, int, dma_addr_t);
#line 49 
#line 49 
void debug_dma_unmap_resource(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 205 
#line 205 
dma_addr_t dma_direct_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_resource(struct device *dev, phys_addr_t phys_addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 352 
  int __ret_warn_on;
  #line 346 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 347 
  dma_addr_t addr = 18446744073709551615ULL;
  #line 349 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 350 
    ldv_inline_asm();
    #line 351 
    ldv_inline_asm();
    #line 352 
    ldv_inline_asm();
    #line 349 
    ;
  }
  {
    #line 352 
    __ret_warn_on = pfn_valid((unsigned long)(phys_addr >> 12)) != 0;
    #line 352 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 353 
      ldv_inline_asm();
      #line 354 
      ldv_inline_asm();
    }
    }
  #line 352 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 353 
                                                return 18446744073709551615ULL;
  #line 355 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 356 
                                    addr = dma_direct_map_resource(dev,phys_addr,size,dir,attrs);
  else 
    #line 357 
    if (ops->map_resource != (dma_addr_t (*)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 358 
      addr = (*(ops->map_resource))(dev,phys_addr,size,dir,attrs);
  #line 360 
  debug_dma_map_resource(dev,phys_addr,size,(int)dir,addr);
  #line 361 
  return addr;
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_resource(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 368 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 370 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 371 
    ldv_inline_asm();
    #line 372 
    ldv_inline_asm();
    #line 373 
    ldv_inline_asm();
    #line 370 
    ;
  }
  #line 371 
  if (! dma_is_direct(ops)) 
    #line 371 
    if (ops->unmap_resource != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 372 
      (*(ops->unmap_resource))(dev,addr,size,dir,attrs);
  #line 373 
  debug_dma_unmap_resource(dev,addr,size,(int)dir);
  #line 374 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/common.h"
__inline static int qmem_alloc_1(struct device *dev, struct qmem **q, int qsize, int entry_sz)
{
  #line 54 
  struct qmem *qmem;
  #line 55 
  int aligned_addr;
  #line 57 
  if (qsize == 0) 
                  #line 58 
                  return -22;
  #line 60 
  *q = (struct qmem *)cif_devm_kzalloc_3(dev,32UL,3264U);
  #line 61 
  if (*q == (struct qmem *)0) 
                              #line 62 
                              return -12;
  #line 63 
  qmem = *q;
  #line 65 
  qmem->entry_sz = (unsigned char)entry_sz;
  #line 66 
  qmem->alloc_sz = qsize * entry_sz + 128;
  #line 67 
  qmem->base = dma_alloc_coherent(dev,(unsigned long)qmem->alloc_sz,& qmem->iova,3264U);
  #line 69 
  if (qmem->base == (void *)0) 
                               #line 70 
                               return -12;
  #line 72 
  qmem->qsize = (unsigned int)qsize;
  #line 74 
  aligned_addr = (int)(qmem->iova + (dma_addr_t)127U) & -128;
  #line 75 
  qmem->align = (unsigned char)((int)((unsigned char)aligned_addr) - (int)((unsigned char)qmem->iova));
  #line 76 
  qmem->base += (unsigned long)qmem->align;
  #line 77 
  qmem->iova += (unsigned long long)qmem->align;
  #line 78 
  return 0;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
#line 95 
void otx2_mbox_reset(struct otx2_mbox *, int);
#line 96 
#line 96 
void otx2_mbox_destroy(struct otx2_mbox *);
#line 97 
#line 97 
int otx2_mbox_init(struct otx2_mbox *, void *, struct pci_dev *, void *, int, int);
#line 108 
#line 108 
int otx2_reply_invalid_msg(struct otx2_mbox *, int, u16, u16);
#line 111 
#line 111 
char *otx2_mbox_id2name(u16);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/mbox.h"
__inline static struct mbox_msghdr *otx2_mbox_alloc_msg(struct otx2_mbox *mbox, int devid, int size)
{
  #line 115 
  return otx2_mbox_alloc_msg_rsp(mbox,devid,size,0);
}

#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
__inline static void rvupf_write64(struct rvu *rvu, u64 offset, u64 val)
{
  #line 333 
  writeq(val,rvu->pfreg_base + offset);
  #line 334 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
__inline static u64 rvupf_read64(struct rvu *rvu, u64 offset)
{
  #line 338 
  return readq(rvu->pfreg_base + offset);
}

#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
__inline static bool is_rvu_96xx_A0(struct rvu *rvu)
{
  #line 344 
  struct pci_dev *pdev = rvu->pdev;
  #line 346 
  return (_Bool)(((unsigned int)pdev->revision == 0U && (unsigned int)pdev->subsystem_device == 45568U) != 0);
}

#line 370 
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_alloc_rsrc_contig(struct rsrc_bmap *rsrc, int nrsrc);
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
bool is_block_implemented(struct rvu_hwinfo *hw, int blkaddr);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_mbox_handler_ready(struct rvu *rvu, struct msg_req *req, struct ready_msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 1195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_mbox_handler_attach_resources(struct rvu *rvu, struct rsrc_attach *attach, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 1047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_mbox_handler_detach_resources(struct rvu *rvu, struct rsrc_detach *detach, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 1318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_mbox_handler_msix_offset(struct rvu *rvu, struct msg_req *req, struct msix_offset_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 1367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_mbox_handler_vf_flr(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 1387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_mbox_handler_get_hw_cap(struct rvu *rvu, struct msg_req *req, struct get_hw_cap_rsp *rsp);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 409 
int rvu_mbox_handler_npc_mcam_write_entry(struct rvu *rvu, struct npc_mcam_write_entry_req *req, struct msg_rsp *rsp);
#line 409 
#line 409 
int rvu_mbox_handler_npc_mcam_ena_entry(struct rvu *rvu, struct npc_mcam_ena_dis_entry_req *req, struct msg_rsp *rsp);
#line 409 
#line 409 
int rvu_mbox_handler_npc_mcam_dis_entry(struct rvu *rvu, struct npc_mcam_ena_dis_entry_req *req, struct msg_rsp *rsp);
#line 409 
#line 409 
int rvu_mbox_handler_npc_mcam_shift_entry(struct rvu *rvu, struct npc_mcam_shift_entry_req *req, struct npc_mcam_shift_entry_rsp *rsp);
#line 409 
#line 409 
int rvu_mbox_handler_npc_mcam_alloc_counter(struct rvu *rvu, struct npc_mcam_alloc_counter_req *req, struct npc_mcam_alloc_counter_rsp *rsp);
#line 409 
#line 409 
int rvu_mbox_handler_npc_mcam_free_counter(struct rvu *rvu, struct npc_mcam_oper_counter_req *req, struct msg_rsp *rsp);
#line 409 
#line 409 
int rvu_mbox_handler_npc_mcam_unmap_counter(struct rvu *rvu, struct npc_mcam_unmap_counter_req *req, struct msg_rsp *rsp);
#line 409 
#line 409 
int rvu_mbox_handler_npc_mcam_clear_counter(struct rvu *rvu, struct npc_mcam_oper_counter_req *req, struct msg_rsp *rsp);
#line 409 
#line 409 
int rvu_mbox_handler_npc_mcam_counter_stats(struct rvu *rvu, struct npc_mcam_oper_counter_req *req, struct npc_mcam_oper_counter_rsp *rsp);
#line 409 
#line 409 
int rvu_mbox_handler_npc_mcam_alloc_and_write_entry(struct rvu *rvu, struct npc_mcam_alloc_and_write_entry_req *req, struct npc_mcam_alloc_and_write_entry_rsp *rsp);
#line 409 
#line 409 
int rvu_mbox_handler_npc_get_kex_cfg(struct rvu *rvu, struct msg_req *req, struct npc_get_kex_cfg_rsp *rsp);
#line 438 
#line 438 
int rvu_npc_init(struct rvu *rvu);
#line 439 
#line 439 
void rvu_npc_freemem(struct rvu *rvu);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
#line 352 
static int rvu_get_hwvf(struct rvu *rvu, int pcifunc);
#line 28 
#line 1269 
static void rvu_set_msix_offset(struct rvu *rvu, struct rvu_pfvf *pfvf, struct rvu_block *block, int lf);
#line 30 
#line 1294 
static void rvu_clear_msix_offset(struct rvu *rvu, struct rvu_pfvf *pfvf, struct rvu_block *block, int lf);
#line 32 
#line 1834 
static void __rvu_flr_handler(struct rvu *rvu, u16 pcifunc);
#line 34 
#line 1615 
static int rvu_mbox_init(struct rvu *rvu, struct mbox_wq_info *mw, int type, int num, void (*mbox_handler)(struct work_struct *), void (*mbox_up_handler)(struct work_struct *));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static struct pci_device_id rvu_id_table[2U] = {{.vendor = 6013U, .device = 41061U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
struct pci_device_id __mod_pci__rvu_id_table_device_table[2U];
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static char *mkex_profile;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_setup_hw_capabilities(struct rvu *rvu)
{
  #line 61 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 63 
  hw->cap.nix_tx_aggr_lvl = (unsigned char)4U;
  #line 64 
  hw->cap.nix_fixed_txschq_mapping = (_Bool)0;
  #line 65 
  hw->cap.nix_shaping = (_Bool)1;
  #line 66 
  hw->cap.nix_tx_link_bp = (_Bool)1;
  #line 67 
  hw->cap.nix_rx_multicast = (_Bool)1;
  #line 69 
  if ((int)is_rvu_96xx_B0(rvu) != 0) {
    #line 70 
    hw->cap.nix_fixed_txschq_mapping = (_Bool)1;
    #line 71 
    hw->cap.nix_txsch_per_cgx_lmac = (unsigned short)4U;
    #line 72 
    hw->cap.nix_txsch_per_lbk_lmac = (unsigned short)132U;
    #line 73 
    hw->cap.nix_txsch_per_sdp_lmac = (unsigned short)76U;
    #line 74 
    hw->cap.nix_shaping = (_Bool)0;
    #line 75 
    hw->cap.nix_tx_link_bp = (_Bool)0;
    #line 76 
    if ((int)is_rvu_96xx_A0(rvu) != 0) 
                                       #line 77 
                                       hw->cap.nix_rx_multicast = (_Bool)0;
  }
  #line 79 
  return;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_poll_reg(struct rvu *rvu, u64 block, u64 offset, u64 mask, bool zero)
{
  #line 87 
  void *reg;
  #line 88 
  u64 reg_val;
  #line 86 
  unsigned long timeout = usecs_to_jiffies(10000U) + jiffies;
  #line 90 
  reg = rvu->afreg_base + ((block << 28) | offset);
  #line 91 
  while (1) {
    {
      #line 91 
      unsigned long __dummy;
      #line 91 
      unsigned long __dummy2;
      }
    #line 91 
    if (1 != 0) {
      {
        #line 91 
        unsigned long __dummy_0;
        #line 91 
        unsigned long __dummy2_0;
        }
      #line 91 
      if (1 != 0) {
        #line 91 
        if (! ((long)(jiffies - timeout) < 0L)) 
                                                #line 91 
                                                break;
      }
      else 
           #line 91 
           break;
    }
    else 
         #line 91 
         break;
    #line 92 
    reg_val = readq(reg);
    #line 93 
    if ((int)zero != 0 && (reg_val & mask) == 0ULL) 
                                                    #line 94 
                                                    return 0;
    #line 95 
    if (! zero && (reg_val & mask) != 0ULL) 
                                            #line 96 
                                            return 0;
    #line 97 
    usleep_range(1UL,5UL);
  }
  #line 99 
  return -16;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_alloc_rsrc(struct rsrc_bmap *rsrc)
{
  #line 104 
  int id;
  #line 106 
  if (rsrc->bmap == (unsigned long *)0UL) 
                                          #line 107 
                                          return -22;
  #line 109 
  id = (int)find_first_zero_bit(rsrc->bmap,(unsigned long)rsrc->max);
  #line 110 
  if ((int)rsrc->max <= id) 
                            #line 111 
                            return -28;
  #line 113 
  __set_bit((long)id,rsrc->bmap);
  #line 115 
  return id;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_alloc_rsrc_contig(struct rsrc_bmap *rsrc, int nrsrc)
{
  #line 120 
  int start;
  #line 122 
  if (rsrc->bmap == (unsigned long *)0UL) 
                                          #line 123 
                                          return -22;
  #line 125 
  start = (int)cif_bitmap_find_next_zero_area_0(rsrc->bmap,(unsigned long)rsrc->max,
                                       0UL,(unsigned int)nrsrc,0UL);
  #line 126 
  if ((int)rsrc->max <= start) 
                               #line 127 
                               return -28;
  #line 129 
  cif_bitmap_set(rsrc->bmap,(unsigned int)start,(unsigned int)nrsrc);
  #line 130 
  return start;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_free_rsrc_contig(struct rsrc_bmap *rsrc, int nrsrc, int start)
{
  #line 135 
  if (rsrc->bmap == (unsigned long *)0UL) 
                                          #line 136 
                                          return;
  #line 137 
  if ((int)rsrc->max <= start) 
                               #line 138 
                               return;
  #line 140 
  cif_bitmap_clear(rsrc->bmap,(unsigned int)start,(unsigned int)nrsrc);
  #line 141 
  return;
}

#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
bool rvu_rsrc_check_contig(struct rsrc_bmap *rsrc, int nrsrc)
{
  #line 145 
  int start;
  #line 147 
  if (rsrc->bmap == (unsigned long *)0UL) 
                                          #line 148 
                                          return (_Bool)0;
  #line 150 
  start = (int)cif_bitmap_find_next_zero_area_0(rsrc->bmap,(unsigned long)rsrc->max,
                                       0UL,(unsigned int)nrsrc,0UL);
  #line 151 
  if ((int)rsrc->max <= start) 
                               #line 152 
                               return (_Bool)0;
  #line 154 
  return (_Bool)1;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
void rvu_free_rsrc(struct rsrc_bmap *rsrc, int id)
{
  #line 159 
  if (rsrc->bmap == (unsigned long *)0UL) 
                                          #line 160 
                                          return;
  #line 162 
  __set_bit((long)id,rsrc->bmap);
  #line 163 
  return;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_rsrc_free_count(struct rsrc_bmap *rsrc)
{
  #line 167 
  int used;
  #line 169 
  if (rsrc->bmap == (unsigned long *)0UL) 
                                          #line 170 
                                          return 0;
  #line 172 
  used = bitmap_weight(rsrc->bmap,(unsigned int)rsrc->max);
  #line 173 
  return (int)rsrc->max - used;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_alloc_bitmap(struct rsrc_bmap *rsrc)
{
  #line 178 
  rsrc->bmap = (unsigned long *)kcalloc_2(((unsigned long)rsrc->max + 63UL) / 64UL,8UL,3264U);
  #line 180 
  if (rsrc->bmap == (unsigned long *)0UL) 
                                          #line 181 
                                          return -12;
  #line 182 
  return 0;
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_get_lf(struct rvu *rvu, struct rvu_block *block, u16 pcifunc, u16 slot)
{
  #line 189 
  int lf;
  #line 188 
  u16 match = (unsigned short)0U;
  #line 191 
  cif_mutex_lock_rsrc_lock_of_rvu_0(& rvu->rsrc_lock);
  #line 192 
  lf = 0;
  #line 192 
  while ((int)block->lf.max > lf) {
    #line 193 
    if ((int)*(block->fn_map + (unsigned long)lf) == (int)pcifunc) {
      #line 194 
      if ((int)slot == (int)match) {
        #line 195 
        cif_mutex_unlock_rsrc_lock_of_rvu_0(& rvu->rsrc_lock);
        #line 196 
        return lf;
      }
      #line 198 
      match = (u16)((int)match + 1);
    }
    #line 192 
    lf ++;
  }
  #line 201 
  cif_mutex_unlock_rsrc_lock_of_rvu_0(& rvu->rsrc_lock);
  #line 202 
  return -19;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_get_blkaddr(struct rvu *rvu, int blktype, u16 pcifunc)
{
  #line 213 
  int devnum;
  #line 214 
  u64 cfg;
  #line 214 
  u64 reg;
  #line 215 
  bool is_pf;
  #line 213 
  int blkaddr = -19;
  #line 217 
  switch (blktype) {
    #line 218 
    case 5: 
            #line 218 
    ;
    #line 219 
    blkaddr = 6;
    #line 220 
    goto exit;
    #line 221 
    case 4: 
            #line 221 
    ;
    #line 222 
    blkaddr = 3;
    #line 223 
    goto exit;
    #line 224 
    case 3: 
            #line 224 
    ;
    #line 226 
    if ((unsigned int)pcifunc == 0U) {
      #line 227 
      blkaddr = 4;
      #line 228 
      goto exit;
    }
    #line 230 
    break;
    #line 231 
    case 6: 
            #line 231 
    ;
    #line 232 
    blkaddr = 7;
    #line 233 
    goto exit;
    #line 234 
    case 7: 
            #line 234 
    ;
    #line 235 
    blkaddr = 8;
    #line 236 
    goto exit;
    #line 237 
    case 8: 
            #line 237 
    ;
    #line 238 
    blkaddr = 9;
    #line 239 
    goto exit;
    #line 240 
    case 9: 
            #line 240 
    ;
    #line 242 
    if ((unsigned int)pcifunc == 0U) {
      #line 243 
      blkaddr = 10;
      #line 244 
      goto exit;
    }
    #line 246 
    break;
  }
  #line 250 
  if (((int)pcifunc & 1023) != 0) {
    #line 251 
    is_pf = (_Bool)0;
    #line 252 
    devnum = rvu_get_hwvf(rvu,(int)pcifunc);
  }
  else {
    #line 254 
    is_pf = (_Bool)1;
    #line 255 
    devnum = rvu_get_pf((unsigned short)((int)pcifunc));
  }
  #line 259 
  if (blktype == 3) {
    #line 260 
    if ((int)is_pf != 0) 
                         #line 260 
                         reg = 134218496ULL; else 
                                                  #line 260 
                                                  reg = 134222592ULL;
    #line 261 
    cfg = rvu_read64(rvu,0ULL,(unsigned long long)(devnum << 16) | reg);
    #line 262 
    if (cfg != 0ULL) 
                     #line 263 
                     blkaddr = 4;
  }
  #line 267 
  if (blktype == 9) {
    #line 268 
    if ((int)is_pf != 0) 
                         #line 268 
                         reg = 134218576ULL; else 
                                                  #line 268 
                                                  reg = 134222672ULL;
    #line 269 
    cfg = rvu_read64(rvu,0ULL,(unsigned long long)(devnum << 16) | reg);
    #line 270 
    if (cfg != 0ULL) 
                     #line 271 
                     blkaddr = 10;
  }
  #line 274 
  exit: 
        #line 274 
  ;
  #line 275 
  if ((int)is_block_implemented(rvu->hw,blkaddr) != 0) 
                                                       #line 276 
                                                       return blkaddr;
  #line 277 
  return -19;
}

#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_update_rsrc_map(struct rvu *rvu, struct rvu_pfvf *pfvf, struct rvu_block *block, u16 pcifunc, u16 lf, bool attach)
{
  #line 284 
  int devnum;
  #line 285 
  bool is_pf;
  #line 286 
  u64 reg;
  #line 284 
  int num_lfs = 0;
  #line 288 
  if ((int)block->lf.max <= (int)lf) {
    #line 289 
    _dev_err(& (rvu->pdev)->dev,(char *)"%s: FATAL: LF %d is >= %s\'s max lfs i.e %d\n",(char *)"rvu_update_rsrc_map",(int)lf,(unsigned char *)(& block->name),(int)block->lf.max);
    #line 292 
    return;
  }
  #line 296 
  if (((int)pcifunc & 1023) != 0) {
    #line 297 
    is_pf = (_Bool)0;
    #line 298 
    devnum = rvu_get_hwvf(rvu,(int)pcifunc);
  }
  else {
    #line 300 
    is_pf = (_Bool)1;
    #line 301 
    devnum = rvu_get_pf((unsigned short)((int)pcifunc));
  }
  #line 304 
  if ((int)attach != 0) 
                        #line 304 
                        *(block->fn_map + (unsigned long)lf) = pcifunc; else 
                                                                    #line 304 
                                                                    *(block->fn_map + (unsigned long)lf) = (unsigned short)0U;
  #line 306 
  switch ((int)block->type) {
    #line 307 
    case 4: 
            #line 307 
    ;
    #line 308 
    pfvf->npalf = (_Bool)((int)attach != 0);
    #line 309 
    num_lfs = (int)pfvf->npalf;
    #line 310 
    break;
    #line 311 
    case 3: 
            #line 311 
    ;
    #line 312 
    pfvf->nixlf = (_Bool)((int)attach != 0);
    #line 313 
    num_lfs = (int)pfvf->nixlf;
    #line 314 
    break;
    #line 315 
    case 6: 
            #line 315 
    ;
    #line 316 
    if ((int)attach != 0) {
      #line 316 
      pfvf->sso = (u16)((int)pfvf->sso + 1);
      #line 316 
      int tmp = (int)pfvf->sso;
    }
    else {
      #line 316 
      pfvf->sso = (u16)((int)pfvf->sso - 1);
      #line 316 
      int tmp_3 = (int)pfvf->sso;
    }
    #line 317 
    num_lfs = (int)pfvf->sso;
    #line 318 
    break;
    #line 319 
    case 7: 
            #line 319 
    ;
    #line 320 
    if ((int)attach != 0) {
      #line 320 
      pfvf->ssow = (u16)((int)pfvf->ssow + 1);
      #line 320 
      int tmp_5 = (int)pfvf->ssow;
    }
    else {
      #line 320 
      pfvf->ssow = (u16)((int)pfvf->ssow - 1);
      #line 320 
      int tmp_7 = (int)pfvf->ssow;
    }
    #line 321 
    num_lfs = (int)pfvf->ssow;
    #line 322 
    break;
    #line 323 
    case 8: 
            #line 323 
    ;
    #line 324 
    if ((int)attach != 0) {
      #line 324 
      pfvf->timlfs = (u16)((int)pfvf->timlfs + 1);
      #line 324 
      int tmp_9 = (int)pfvf->timlfs;
    }
    else {
      #line 324 
      pfvf->timlfs = (u16)((int)pfvf->timlfs - 1);
      #line 324 
      int tmp_11 = (int)pfvf->timlfs;
    }
    #line 325 
    num_lfs = (int)pfvf->timlfs;
    #line 326 
    break;
    #line 327 
    case 9: 
            #line 327 
    ;
    #line 328 
    if ((int)attach != 0) {
      #line 328 
      pfvf->cptlfs = (u16)((int)pfvf->cptlfs + 1);
      #line 328 
      int tmp_13 = (int)pfvf->cptlfs;
    }
    else {
      #line 328 
      pfvf->cptlfs = (u16)((int)pfvf->cptlfs - 1);
      #line 328 
      int tmp_15 = (int)pfvf->cptlfs;
    }
    #line 329 
    num_lfs = (int)pfvf->cptlfs;
    #line 330 
    break;
  }
  #line 333 
  if ((int)is_pf != 0) 
                       #line 333 
                       reg = block->pf_lfcnt_reg; else 
                                                       #line 333 
                                                       reg = block->vf_lfcnt_reg;
  #line 334 
  rvu_write64(rvu,0ULL,(unsigned long long)(devnum << 16) | reg,(unsigned long long)num_lfs);
  #line 335 
  return;
}

#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_get_pf(u16 pcifunc)
{
  #line 339 
  return ((int)pcifunc >> 10) & 63;
}

#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
void rvu_get_pf_numvfs(struct rvu *rvu, int pf, int *numvfs, int *hwvf)
{
  #line 344 
  u64 cfg;
  #line 347 
  cfg = rvu_read64(rvu,0ULL,(unsigned long long)((pf << 16) | 134217984));
  #line 348 
  *numvfs = (int)(cfg >> 12) & 255;
  #line 349 
  *hwvf = (int)cfg & 4095;
  #line 350 
  return;
}

#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_get_hwvf(struct rvu *rvu, int pcifunc)
{
  #line 354 
  int pf;
  #line 354 
  int func;
  #line 355 
  u64 cfg;
  #line 357 
  pf = rvu_get_pf((unsigned short)((int)((unsigned short)pcifunc)));
  #line 358 
  func = pcifunc & 1023;
  #line 361 
  cfg = rvu_read64(rvu,0ULL,(unsigned long long)((pf << 16) | 134217984));
  #line 363 
  return (int)(((cfg & (unsigned long long)4095U) + (unsigned long long)func) + (unsigned long long)4294967295U);
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
struct rvu_pfvf *rvu_get_pfvf(struct rvu *rvu, int pcifunc)
{
  #line 369 
  if ((pcifunc & 1023) != 0) {
    #line 370 
    ;
    #line 370 
    return rvu->hwvf + (unsigned long)rvu_get_hwvf(rvu,pcifunc);
  }
  else {
    #line 372 
    ;
    #line 372 
    return rvu->pf + (unsigned long)rvu_get_pf((unsigned short)((int)((unsigned short)pcifunc)));
  }
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static bool is_pf_func_valid(struct rvu *rvu, u16 pcifunc)
{
  #line 377 
  int pf;
  #line 377 
  int vf;
  #line 377 
  int nvfs;
  #line 378 
  u64 cfg;
  #line 380 
  pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 381 
  if ((int)(rvu->hw)->total_pfs <= pf) 
                                       #line 382 
                                       return (_Bool)0;
  #line 384 
  if (((int)pcifunc & 1023) == 0) 
                                  #line 385 
                                  return (_Bool)1;
  #line 388 
  vf = ((int)pcifunc & 1023) + -1;
  #line 389 
  cfg = rvu_read64(rvu,0ULL,(unsigned long long)((pf << 16) | 134217984));
  #line 390 
  nvfs = (int)(cfg >> 12) & 255;
  #line 391 
  if (vf >= nvfs) 
                  #line 392 
                  return (_Bool)0;
  #line 394 
  return (_Bool)1;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
bool is_block_implemented(struct rvu_hwinfo *hw, int blkaddr)
{
  #line 399 
  struct rvu_block *block;
  #line 401 
  if ((unsigned int)blkaddr > 14U) 
                                   #line 402 
                                   return (_Bool)0;
  #line 404 
  block = & hw->block[blkaddr];
  #line 405 
  return block->implemented;
}

#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_check_block_implemented(struct rvu *rvu)
{
  #line 411 
  struct rvu_block *block;
  #line 412 
  int blkid;
  #line 413 
  u64 cfg;
  #line 410 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 416 
  blkid = 0;
  #line 416 
  while (blkid <= 14) {
    #line 417 
    block = & hw->block[blkid];
    #line 418 
    cfg = rvupf_read64(rvu,(unsigned long long)((blkid << 3) | 512));
    #line 419 
    if ((cfg & 2048ULL) != 0ULL) 
                                 #line 420 
                                 block->implemented = (_Bool)1;
    #line 416 
    blkid ++;
  }
  #line 422 
  return;
}

#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_lf_reset(struct rvu *rvu, struct rvu_block *block, int lf)
{
  #line 426 
  int err;
  #line 428 
  if (! block->implemented) 
                            #line 429 
                            return 0;
  #line 431 
  rvu_write64(rvu,(unsigned long long)block->addr,block->lfreset_reg,(unsigned long long)(lf | 4096));
  #line 432 
  err = rvu_poll_reg(rvu,(unsigned long long)block->addr,block->lfreset_reg,4096ULL,(_Bool)1);
  #line 434 
  return err;
}

#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_block_reset(struct rvu *rvu, int blkaddr, u64 rst_reg)
{
  #line 439 
  struct rvu_block *block = & (rvu->hw)->block[blkaddr];
  #line 441 
  if (! block->implemented) 
                            #line 442 
                            return;
  #line 444 
  rvu_write64(rvu,(unsigned long long)blkaddr,rst_reg,1ULL);
  #line 445 
  rvu_poll_reg(rvu,(unsigned long long)blkaddr,rst_reg,9223372036854775808ULL,(_Bool)1);
  #line 446 
  return;
}

#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_reset_all_blocks(struct rvu *rvu)
{
  #line 451 
  rvu_block_reset(rvu,3,0ULL);
  #line 452 
  rvu_block_reset(rvu,4,176ULL);
  #line 453 
  rvu_block_reset(rvu,6,64ULL);
  #line 454 
  rvu_block_reset(rvu,7,4344ULL);
  #line 455 
  rvu_block_reset(rvu,9,16ULL);
  #line 456 
  rvu_block_reset(rvu,10,286720ULL);
  #line 457 
  rvu_block_reset(rvu,12,752ULL);
  #line 458 
  rvu_block_reset(rvu,13,752ULL);
  #line 459 
  rvu_block_reset(rvu,14,752ULL);
  #line 460 
  return;
}

#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_scan_block(struct rvu *rvu, struct rvu_block *block)
{
  #line 464 
  struct rvu_pfvf *pfvf;
  #line 465 
  u64 cfg;
  #line 466 
  int lf;
  #line 468 
  lf = 0;
  #line 468 
  while ((int)block->lf.max > lf) {
    #line 469 
    cfg = rvu_read64(rvu,(unsigned long long)block->addr,block->lfcfg_reg | (unsigned long long)(lf << (int)block->lfshift));
    #line 471 
    if ((cfg & 9223372036854775808ULL) == 0ULL) 
                                                #line 472 
                                                goto __Cont;
    #line 475 
    __set_bit((long)lf,block->lf.bmap);
    #line 478 
    pfvf = rvu_get_pfvf(rvu,(int)(cfg >> 8) & 65535);
    #line 479 
    rvu_update_rsrc_map(rvu,pfvf,block,(unsigned short)((int)((unsigned short)(cfg >> 8))),(unsigned short)((int)((unsigned short)lf)),(_Bool)1);
    #line 483 
    rvu_set_msix_offset(rvu,pfvf,block,lf);
    #line 468 
    __Cont: 
            #line 468 
    lf ++;
  }
  #line 485 
  return;
}

#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_check_min_msix_vec(struct rvu *rvu, int nvecs, int pf, int vf)
{
  #line 489 
  int min_vecs;
  #line 491 
  if (vf == 0) 
               #line 492 
               goto check_pf;
  #line 494 
  if (nvecs == 0) 
                  #line 495 
                  _dev_warn(rvu->dev,(char *)"PF%d:VF%d is configured with zero msix vectors, %d\n",pf,vf + -1,nvecs);
  #line 499 
  return;
  #line 501 
  check_pf: 
            #line 501 
  ;
  #line 502 
  if (pf == 0) 
               #line 503 
               min_vecs = 12; else 
                                   #line 505 
                                   min_vecs = 7;
  #line 507 
  if (nvecs >= min_vecs) 
                         #line 508 
                         return;
  #line 509 
  _dev_warn(rvu->dev,(char *)"PF%d is configured with too few vectors, %d, min is %d\n",pf,nvecs,min_vecs);
  #line 510 
  return;
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_setup_msix_resources(struct rvu *rvu)
{
  #line 517 
  int pf;
  #line 517 
  int vf;
  #line 517 
  int numvfs;
  #line 517 
  int hwvf;
  #line 517 
  int err;
  #line 518 
  int nvecs;
  #line 518 
  int offset;
  #line 518 
  int max_msix;
  #line 519 
  struct rvu_pfvf *pfvf;
  #line 520 
  u64 cfg;
  #line 520 
  u64 phy_addr;
  #line 521 
  dma_addr_t iova;
  #line 516 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 523 
  pf = 0;
  #line 523 
  while ((int)hw->total_pfs > pf) {
    #line 524 
    cfg = rvu_read64(rvu,0ULL,(unsigned long long)((pf << 16) | 134217984));
    #line 526 
    if ((cfg & 1048576ULL) == 0ULL) 
                                    #line 527 
                                    goto __Cont;
    #line 529 
    rvu_get_pf_numvfs(rvu,pf,& numvfs,& hwvf);
    #line 531 
    pfvf = rvu->pf + (unsigned long)pf;
    #line 533 
    cfg = rvu_read64(rvu,0ULL,(unsigned long long)((pf << 16) | 134218000));
    #line 534 
    pfvf->msix.max = (unsigned short)(((unsigned int)((unsigned short)(cfg >> 32)) & 4095U) + 1U);
    #line 535 
    rvu_check_min_msix_vec(rvu,(int)pfvf->msix.max,pf,0);
    #line 538 
    err = rvu_alloc_bitmap(& pfvf->msix);
    #line 539 
    if (err != 0) 
                  #line 540 
                  return err;
    #line 543 
    pfvf->msix_lfmap = (u16 *)cif_devm_kcalloc_0(rvu->dev,(unsigned long)pfvf->msix.max,2UL,3264U);
    #line 545 
    if (pfvf->msix_lfmap == (u16 *)0U) 
                                       #line 546 
                                       return -12;
    #line 551 
    if (pf == 0) 
                 #line 552 
                 goto setup_vfmsix;
    #line 558 
    cfg = rvu_read64(rvu,0ULL,(unsigned long long)((pf << 16) | 134218240));
    #line 559 
    nvecs = (int)(cfg >> 12) & 255;
    #line 560 
    cfg &= 18446744073709549568ULL;
    #line 561 
    offset = rvu_alloc_rsrc_contig(& pfvf->msix,nvecs);
    #line 562 
    rvu_write64(rvu,0ULL,(unsigned long long)((pf << 16) | 134218240),(unsigned long long)offset | cfg);
    #line 564 
    setup_vfmsix: 
                  #line 564 
    ;
    #line 566 
    vf = 0;
    #line 566 
    while (vf < numvfs) {
      #line 567 
      pfvf = rvu->hwvf + (unsigned long)(hwvf + vf);
      #line 569 
      cfg = rvu_read64(rvu,0ULL,(unsigned long long)((pf << 16) | 134218000));
      #line 571 
      pfvf->msix.max = (unsigned short)(((unsigned int)((unsigned short)cfg) & 4095U) + 1U);
      #line 572 
      rvu_check_min_msix_vec(rvu,(int)pfvf->msix.max,pf,vf + 1);
      #line 575 
      err = rvu_alloc_bitmap(& pfvf->msix);
      #line 576 
      if (err != 0) 
                    #line 577 
                    return err;
      #line 580 
      pfvf->msix_lfmap = (u16 *)cif_devm_kcalloc_0(rvu->dev,(unsigned long)pfvf->msix.max,2UL,3264U);
      #line 582 
      if (pfvf->msix_lfmap == (u16 *)0U) 
                                         #line 583 
                                         return -12;
      #line 589 
      cfg = rvu_read64(rvu,0ULL,(unsigned long long)(((hwvf + vf) << 16) | 134222464));
      #line 591 
      nvecs = (int)(cfg >> 12) & 255;
      #line 592 
      cfg &= 18446744073709549568ULL;
      #line 593 
      offset = rvu_alloc_rsrc_contig(& pfvf->msix,nvecs);
      #line 594 
      rvu_write64(rvu,0ULL,(unsigned long long)(((hwvf + vf) << 16) | 134222464),(unsigned long long)offset | cfg);
      #line 566 
      vf ++;
    }
    #line 523 
    __Cont: 
            #line 523 
    pf ++;
  }
  #line 604 
  cfg = rvu_read64(rvu,0ULL,134217728ULL);
  #line 605 
  max_msix = (int)cfg & 1048575;
  #line 606 
  phy_addr = rvu_read64(rvu,0ULL,16ULL);
  #line 607 
  iova = dma_map_resource(rvu->dev,phy_addr,(unsigned long)(max_msix * 16),(enum dma_data_direction)DMA_BIDIRECTIONAL,0UL);
  #line 611 
  if (dma_mapping_error(rvu->dev,iova) != 0) 
                                             #line 612 
                                             return -12;
  #line 614 
  rvu_write64(rvu,0ULL,16ULL,iova);
  #line 615 
  rvu->msix_base_iova = iova;
  #line 617 
  return 0;
}

#line 620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_free_hw_resources(struct rvu *rvu)
{
  #line 623 
  struct rvu_block *block;
  #line 624 
  struct rvu_pfvf *pfvf;
  #line 625 
  int id;
  #line 625 
  int max_msix;
  #line 626 
  u64 cfg;
  #line 622 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 628 
  rvu_npa_freemem(rvu);
  #line 629 
  rvu_npc_freemem(rvu);
  #line 630 
  rvu_nix_freemem(rvu);
  #line 633 
  id = 0;
  #line 633 
  while (id <= 14) {
    #line 634 
    block = & hw->block[id];
    #line 635 
    kfree((void *)block->lf.bmap);
    #line 633 
    id ++;
  }
  #line 639 
  id = 0;
  #line 639 
  while ((int)hw->total_pfs > id) {
    #line 640 
    pfvf = rvu->pf + (unsigned long)id;
    #line 641 
    kfree((void *)pfvf->msix.bmap);
    #line 639 
    id ++;
  }
  #line 644 
  id = 0;
  #line 644 
  while ((int)hw->total_vfs > id) {
    #line 645 
    pfvf = rvu->hwvf + (unsigned long)id;
    #line 646 
    kfree((void *)pfvf->msix.bmap);
    #line 644 
    id ++;
  }
  #line 650 
  if (rvu->msix_base_iova == 0ULL) 
                                   #line 651 
                                   return;
  #line 652 
  cfg = rvu_read64(rvu,0ULL,134217728ULL);
  #line 653 
  max_msix = (int)cfg & 1048575;
  #line 654 
  dma_unmap_resource(rvu->dev,rvu->msix_base_iova,(unsigned long)(max_msix * 16),(enum dma_data_direction)DMA_BIDIRECTIONAL,0UL);
  #line 658 
  mutex_destroy(& rvu->rsrc_lock);
  #line 659 
  return;
}

#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_setup_hw_resources(struct rvu *rvu)
{
  #line 664 
  struct rvu_block *block;
  #line 665 
  int blkid;
  #line 665 
  int err;
  #line 666 
  u64 cfg;
  #line 663 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 669 
  cfg = rvu_read64(rvu,0ULL,134217728ULL);
  #line 670 
  hw->total_pfs = (unsigned char)(cfg >> 32);
  #line 671 
  hw->total_vfs = (unsigned short)((unsigned int)((unsigned short)(cfg >> 20)) & 4095U);
  #line 672 
  hw->max_vfs_per_pf = (unsigned short)((unsigned int)((unsigned short)(cfg >> 40)) & 255U);
  #line 675 
  block = & hw->block[3];
  #line 676 
  if (! block->implemented) 
                            #line 677 
                            goto nix;
  #line 678 
  cfg = rvu_read64(rvu,3ULL,16ULL);
  #line 679 
  block->lf.max = (unsigned short)((unsigned int)((unsigned short)(cfg >> 16)) & 4095U);
  #line 680 
  block->addr = (unsigned char)3U;
  #line 681 
  block->type = (unsigned char)4U;
  #line 682 
  block->lfshift = (unsigned char)8U;
  #line 683 
  block->lookup_reg = 65584ULL;
  #line 684 
  block->pf_lfcnt_reg = 134218512ULL;
  #line 685 
  block->vf_lfcnt_reg = 134222608ULL;
  #line 686 
  block->lfcfg_reg = 65552ULL;
  #line 687 
  block->msixcfg_reg = 65568ULL;
  #line 688 
  block->lfreset_reg = 32ULL;
  #line 689 
  sprintf((char *)(& block->name),(char *)"NPA");
  #line 690 
  err = rvu_alloc_bitmap(& block->lf);
  #line 691 
  if (err != 0) 
                #line 692 
                return err;
  #line 694 
  nix: 
       #line 694 
  ;
  #line 696 
  block = & hw->block[4];
  #line 697 
  if (! block->implemented) 
                            #line 698 
                            goto sso;
  #line 699 
  cfg = rvu_read64(rvu,4ULL,48ULL);
  #line 700 
  block->lf.max = (unsigned short)((unsigned int)((unsigned short)cfg) & 4095U);
  #line 701 
  block->addr = (unsigned char)4U;
  #line 702 
  block->type = (unsigned char)3U;
  #line 703 
  block->lfshift = (unsigned char)8U;
  #line 704 
  block->lookup_reg = 134217776ULL;
  #line 705 
  block->pf_lfcnt_reg = 134218496ULL;
  #line 706 
  block->vf_lfcnt_reg = 134222592ULL;
  #line 707 
  block->lfcfg_reg = 134217744ULL;
  #line 708 
  block->msixcfg_reg = 134217760ULL;
  #line 709 
  block->lfreset_reg = 336ULL;
  #line 710 
  sprintf((char *)(& block->name),(char *)"NIX");
  #line 711 
  err = rvu_alloc_bitmap(& block->lf);
  #line 712 
  if (err != 0) 
                #line 713 
                return err;
  #line 715 
  sso: 
       #line 715 
  ;
  #line 717 
  block = & hw->block[7];
  #line 718 
  if (! block->implemented) 
                            #line 719 
                            goto ssow;
  #line 720 
  cfg = rvu_read64(rvu,7ULL,4096ULL);
  #line 721 
  block->lf.max = (unsigned short)cfg;
  #line 722 
  block->addr = (unsigned char)7U;
  #line 723 
  block->type = (unsigned char)6U;
  #line 724 
  block->multislot = (_Bool)1;
  #line 725 
  block->lfshift = (unsigned char)3U;
  #line 726 
  block->lookup_reg = 14336ULL;
  #line 727 
  block->pf_lfcnt_reg = 134218528ULL;
  #line 728 
  block->vf_lfcnt_reg = 134222624ULL;
  #line 729 
  block->lfcfg_reg = 65536ULL;
  #line 730 
  block->msixcfg_reg = 131072ULL;
  #line 731 
  block->lfreset_reg = 4320ULL;
  #line 732 
  sprintf((char *)(& block->name),(char *)"SSO GROUP");
  #line 733 
  err = rvu_alloc_bitmap(& block->lf);
  #line 734 
  if (err != 0) 
                #line 735 
                return err;
  #line 737 
  ssow: 
        #line 737 
  ;
  #line 739 
  block = & hw->block[8];
  #line 740 
  if (! block->implemented) 
                            #line 741 
                            goto tim;
  #line 742 
  block->lf.max = (unsigned short)(cfg >> 56);
  #line 743 
  block->addr = (unsigned char)8U;
  #line 744 
  block->type = (unsigned char)7U;
  #line 745 
  block->multislot = (_Bool)1;
  #line 746 
  block->lfshift = (unsigned char)3U;
  #line 747 
  block->lookup_reg = 16ULL;
  #line 748 
  block->pf_lfcnt_reg = 134218544ULL;
  #line 749 
  block->vf_lfcnt_reg = 134222640ULL;
  #line 750 
  block->lfcfg_reg = 4096ULL;
  #line 751 
  block->msixcfg_reg = 8192ULL;
  #line 752 
  block->lfreset_reg = 48ULL;
  #line 753 
  sprintf((char *)(& block->name),(char *)"SSOWS");
  #line 754 
  err = rvu_alloc_bitmap(& block->lf);
  #line 755 
  if (err != 0) 
                #line 756 
                return err;
  #line 758 
  tim: 
       #line 758 
  ;
  #line 760 
  block = & hw->block[9];
  #line 761 
  if (! block->implemented) 
                            #line 762 
                            goto cpt;
  #line 763 
  cfg = rvu_read64(rvu,9ULL,144ULL);
  #line 764 
  block->lf.max = (unsigned short)cfg;
  #line 765 
  block->addr = (unsigned char)9U;
  #line 766 
  block->type = (unsigned char)8U;
  #line 767 
  block->multislot = (_Bool)1;
  #line 768 
  block->lfshift = (unsigned char)3U;
  #line 769 
  block->lookup_reg = 196608ULL;
  #line 770 
  block->pf_lfcnt_reg = 134218560ULL;
  #line 771 
  block->vf_lfcnt_reg = 134222656ULL;
  #line 772 
  block->lfcfg_reg = 131072ULL;
  #line 773 
  block->msixcfg_reg = 147456ULL;
  #line 774 
  block->lfreset_reg = 32ULL;
  #line 775 
  sprintf((char *)(& block->name),(char *)"TIM");
  #line 776 
  err = rvu_alloc_bitmap(& block->lf);
  #line 777 
  if (err != 0) 
                #line 778 
                return err;
  #line 780 
  cpt: 
       #line 780 
  ;
  #line 782 
  block = & hw->block[10];
  #line 783 
  if (! block->implemented) 
                            #line 784 
                            goto init;
  #line 785 
  cfg = rvu_read64(rvu,10ULL,0ULL);
  #line 786 
  block->lf.max = (unsigned short)((unsigned int)((unsigned short)cfg) & 255U);
  #line 787 
  block->addr = (unsigned char)10U;
  #line 788 
  block->type = (unsigned char)9U;
  #line 789 
  block->multislot = (_Bool)1;
  #line 790 
  block->lfshift = (unsigned char)3U;
  #line 791 
  block->lookup_reg = 282624ULL;
  #line 792 
  block->pf_lfcnt_reg = 134218576ULL;
  #line 793 
  block->vf_lfcnt_reg = 134222672ULL;
  #line 794 
  block->lfcfg_reg = 266240ULL;
  #line 795 
  block->msixcfg_reg = 274432ULL;
  #line 796 
  block->lfreset_reg = 278528ULL;
  #line 797 
  sprintf((char *)(& block->name),(char *)"CPT");
  #line 798 
  err = rvu_alloc_bitmap(& block->lf);
  #line 799 
  if (err != 0) 
                #line 800 
                return err;
  #line 802 
  init: 
        #line 802 
  ;
  #line 804 
  rvu->pf = (struct rvu_pfvf *)cif_devm_kcalloc_0(rvu->dev,(unsigned long)hw->total_pfs,336UL,3264U);
  #line 806 
  if (rvu->pf == (struct rvu_pfvf *)0) 
                                       #line 807 
                                       return -12;
  #line 809 
  rvu->hwvf = (struct rvu_pfvf *)cif_devm_kcalloc_0(rvu->dev,(unsigned long)hw->total_vfs,336UL,3264U);
  #line 811 
  if (rvu->hwvf == (struct rvu_pfvf *)0) 
                                         #line 812 
                                         return -12;
  {
    #line 814 
    struct lock_class_key __key;
    #line 814 
    __mutex_init(& rvu->rsrc_lock,(char *)"&rvu->rsrc_lock",& __key);
  }
  #line 816 
  err = rvu_setup_msix_resources(rvu);
  #line 817 
  if (err != 0) 
                #line 818 
                return err;
  #line 820 
  blkid = 0;
  #line 820 
  while (blkid <= 14) {
    #line 821 
    block = & hw->block[blkid];
    #line 822 
    if (block->lf.bmap == (unsigned long *)0UL) 
                                                #line 823 
                                                goto __Cont;
    #line 826 
    block->fn_map = (u16 *)cif_devm_kcalloc_0(rvu->dev,(unsigned long)block->lf.max,2UL,3264U);
    #line 828 
    if (block->fn_map == (u16 *)0U) 
                                    #line 829 
                                    return -12;
    #line 834 
    rvu_scan_block(rvu,block);
    #line 820 
    __Cont: 
            #line 820 
    blkid ++;
  }
  #line 837 
  err = rvu_npc_init(rvu);
  #line 838 
  if (err != 0) 
                #line 839 
                goto exit;
  #line 841 
  err = rvu_cgx_init(rvu);
  #line 842 
  if (err != 0) 
                #line 843 
                goto exit;
  #line 845 
  err = rvu_npa_init(rvu);
  #line 846 
  if (err != 0) 
                #line 847 
                goto cgx_err;
  #line 849 
  err = rvu_nix_init(rvu);
  #line 850 
  if (err != 0) 
                #line 851 
                goto cgx_err;
  #line 853 
  return 0;
  #line 855 
  cgx_err: 
           #line 855 
  ;
  #line 856 
  rvu_cgx_exit(rvu);
  #line 857 
  exit: 
        #line 857 
  ;
  #line 858 
  return err;
}

#line 862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
void rvu_aq_free(struct rvu *rvu, struct admin_queue *aq)
{
  #line 864 
  if (aq == (struct admin_queue *)0) 
                                     #line 865 
                                     return;
  #line 867 
  qmem_free(rvu->dev,aq->inst);
  #line 868 
  qmem_free(rvu->dev,aq->res);
  #line 869 
  devm_kfree(rvu->dev,(void *)aq);
  #line 870 
  return;
}

#line 872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_aq_alloc(struct rvu *rvu, struct admin_queue **ad_queue, int qsize, int inst_size, int res_size)
{
  #line 875 
  struct admin_queue *aq;
  #line 876 
  int err;
  #line 878 
  *ad_queue = (struct admin_queue *)cif_devm_kzalloc_3(rvu->dev,88UL,3264U);
  #line 879 
  if (*ad_queue == (struct admin_queue *)0) 
                                            #line 880 
                                            return -12;
  #line 881 
  aq = *ad_queue;
  #line 884 
  err = qmem_alloc_1(rvu->dev,& aq->inst,qsize,inst_size);
  #line 885 
  if (err != 0) {
    #line 886 
    devm_kfree(rvu->dev,(void *)aq);
    #line 887 
    return err;
  }
  #line 891 
  err = qmem_alloc_1(rvu->dev,& aq->res,qsize,res_size);
  #line 892 
  if (err != 0) {
    #line 893 
    rvu_aq_free(rvu,aq);
    #line 894 
    return err;
  }
  #line 897 
  spinlock_check(& aq->lock);
  {
    #line 897 
    struct lock_class_key __key;
    #line 897 
    __raw_spin_lock_init(& aq->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&aq->lock)->rlock",& __key);
  }
  #line 898 
  return 0;
}

#line 901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_mbox_handler_ready(struct rvu *rvu, struct msg_req *req, struct ready_msg_rsp *rsp)
{
  #line 904 
  return 0;
}

#line 910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static u16 rvu_get_rsrc_mapcount(struct rvu_pfvf *pfvf, int blktype)
{
  #line 912 
  switch (blktype) {
    #line 913 
    case 4: 
            #line 913 
    ;
    #line 914 
    return (unsigned short)((int)pfvf->npalf != 0);
    #line 915 
    case 3: 
            #line 915 
    ;
    #line 916 
    return (unsigned short)((int)pfvf->nixlf != 0);
    #line 917 
    case 6: 
            #line 917 
    ;
    #line 918 
    return pfvf->sso;
    #line 919 
    case 7: 
            #line 919 
    ;
    #line 920 
    return pfvf->ssow;
    #line 921 
    case 8: 
            #line 921 
    ;
    #line 922 
    return pfvf->timlfs;
    #line 923 
    case 9: 
            #line 923 
    ;
    #line 924 
    return pfvf->cptlfs;
  }
  #line 926 
  return (unsigned short)0U;
}

#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
bool is_pffunc_map_valid(struct rvu *rvu, u16 pcifunc, int blktype)
{
  #line 931 
  struct rvu_pfvf *pfvf;
  #line 933 
  if (! is_pf_func_valid(rvu,(unsigned short)((int)pcifunc))) 
                                                              #line 934 
                                                              return (_Bool)0;
  #line 936 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 939 
  if ((unsigned int)rvu_get_rsrc_mapcount(pfvf,blktype) == 0U) 
                                                               #line 940 
                                                               return (_Bool)0;
  #line 942 
  return (_Bool)1;
}

#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_lookup_rsrc(struct rvu *rvu, struct rvu_block *block, int pcifunc, int slot)
{
  #line 948 
  u64 val;
  #line 950 
  val = (((unsigned long long)pcifunc << 24) | (unsigned long long)(slot << 16)) | 8192ULL;
  #line 951 
  rvu_write64(rvu,(unsigned long long)block->addr,block->lookup_reg,val);
  #line 954 
  while (1) {
    #line 954 
    if (! ((rvu_read64(rvu,(unsigned long long)block->addr,block->lookup_reg) & 8192ULL) != 0ULL)) 
      #line 954 
      break;
  }
  #line 957 
  val = rvu_read64(rvu,(unsigned long long)block->addr,block->lookup_reg);
  #line 960 
  if ((val & 4096ULL) == 0ULL) 
                               #line 961 
                               return -1;
  #line 963 
  return (int)val & 4095;
}

#line 966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_detach_block(struct rvu *rvu, int pcifunc, int blktype)
{
  #line 970 
  struct rvu_block *block;
  #line 971 
  int slot;
  #line 971 
  int lf;
  #line 971 
  int num_lfs;
  #line 972 
  int blkaddr;
  #line 968 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,pcifunc);
  #line 969 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 974 
  blkaddr = rvu_get_blkaddr(rvu,blktype,(unsigned short)((int)((unsigned short)pcifunc)));
  #line 975 
  if (blkaddr < 0) 
                   #line 976 
                   return;
  #line 978 
  block = & hw->block[blkaddr];
  #line 980 
  num_lfs = (int)rvu_get_rsrc_mapcount(pfvf,(int)block->type);
  #line 981 
  if (num_lfs == 0) 
                    #line 982 
                    return;
  #line 984 
  slot = 0;
  #line 984 
  while (slot < num_lfs) {
    #line 985 
    lf = rvu_lookup_rsrc(rvu,block,pcifunc,slot);
    #line 986 
    if (lf < 0) 
                #line 987 
                goto __Cont;
    #line 990 
    rvu_write64(rvu,(unsigned long long)blkaddr,block->lfcfg_reg | (unsigned long long)(lf << (int)block->lfshift),0ULL);
    #line 994 
    rvu_update_rsrc_map(rvu,pfvf,block,(unsigned short)((int)((unsigned short)pcifunc)),(unsigned short)((int)((unsigned short)lf)),(_Bool)0);
    #line 998 
    rvu_free_rsrc(& block->lf,lf);
    #line 1001 
    rvu_clear_msix_offset(rvu,pfvf,block,lf);
    #line 984 
    __Cont: 
            #line 984 
    slot ++;
  }
  #line 1003 
  return;
}

#line 1005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_detach_rsrcs(struct rvu *rvu, struct rsrc_detach *detach, u16 pcifunc)
{
  #line 1010 
  struct rvu_block *block;
  #line 1011 
  int blkid;
  #line 1008 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1009 
  bool detach_all = (_Bool)1;
  #line 1013 
  cif_mutex_lock_rsrc_lock_of_rvu_0(& rvu->rsrc_lock);
  #line 1016 
  if (detach != (struct rsrc_detach *)0 && (unsigned int)detach->partial != 0U) 
    #line 1017 
    detach_all = (_Bool)0;
  #line 1022 
  blkid = 0;
  #line 1022 
  while (blkid <= 14) {
    #line 1023 
    block = & hw->block[blkid];
    #line 1024 
    if (block->lf.bmap == (unsigned long *)0UL) 
                                                #line 1025 
                                                goto __Cont;
    #line 1026 
    if (! detach_all && detach != (struct rsrc_detach *)0) 
      #line 1027 
      if (blkid == 3 && (unsigned int)detach->npalf == 0U) 
                                                           #line 1028 
                                                           goto __Cont;
      else 
        #line 1029 
        if (blkid == 4 && (unsigned int)detach->nixlf == 0U) 
                                                             #line 1030 
                                                             goto __Cont;
        else 
          #line 1031 
          if (blkid == 7 && (unsigned int)detach->sso == 0U) 
                                                             #line 1032 
                                                             goto __Cont;
          else 
            #line 1033 
            if (blkid == 8 && (unsigned int)detach->ssow == 0U) 
                                                                #line 1034 
                                                                goto __Cont;
            else 
              #line 1035 
              if (blkid == 9 && (unsigned int)detach->timlfs == 0U) 
                                                                    #line 1036 
                                                                    goto __Cont;
              else 
                #line 1037 
                if (blkid == 10 && (unsigned int)detach->cptlfs == 0U) 
                  #line 1038 
                  goto __Cont;
    #line 1040 
    rvu_detach_block(rvu,(int)pcifunc,(int)block->type);
    #line 1022 
    __Cont: 
            #line 1022 
    blkid ++;
  }
  #line 1043 
  cif_mutex_unlock_rsrc_lock_of_rvu_0(& rvu->rsrc_lock);
  #line 1044 
  return 0;
}

#line 1047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_mbox_handler_detach_resources(struct rvu *rvu, struct rsrc_detach *detach, struct msg_rsp *rsp)
{
  #line 1051 
  return rvu_detach_rsrcs(rvu,detach,(unsigned short)((int)detach->hdr.pcifunc));
}

#line 1054  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_attach_block(struct rvu *rvu, int pcifunc, int blktype, int num_lfs)
{
  #line 1059 
  struct rvu_block *block;
  #line 1060 
  int slot;
  #line 1060 
  int lf;
  #line 1061 
  int blkaddr;
  #line 1062 
  u64 cfg;
  #line 1057 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,pcifunc);
  #line 1058 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1064 
  if (num_lfs == 0) 
                    #line 1065 
                    return;
  #line 1067 
  blkaddr = rvu_get_blkaddr(rvu,blktype,(unsigned short)0);
  #line 1068 
  if (blkaddr < 0) 
                   #line 1069 
                   return;
  #line 1071 
  block = & hw->block[blkaddr];
  #line 1072 
  if (block->lf.bmap == (unsigned long *)0UL) 
                                              #line 1073 
                                              return;
  #line 1075 
  slot = 0;
  #line 1075 
  while (slot < num_lfs) {
    #line 1077 
    lf = rvu_alloc_rsrc(& block->lf);
    #line 1078 
    if (lf < 0) 
                #line 1079 
                return;
    #line 1081 
    cfg = (unsigned long long)((pcifunc << 8) | slot) | 9223372036854775808ULL;
    #line 1082 
    rvu_write64(rvu,(unsigned long long)blkaddr,block->lfcfg_reg | (unsigned long long)(lf << (int)block->lfshift),cfg);
    #line 1084 
    rvu_update_rsrc_map(rvu,pfvf,block,(unsigned short)((int)((unsigned short)pcifunc)),(unsigned short)((int)((unsigned short)lf)),(_Bool)1);
    #line 1088 
    rvu_set_msix_offset(rvu,pfvf,block,lf);
    #line 1075 
    slot ++;
  }
  #line 1090 
  return;
}

#line 1092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_check_rsrc_availability(struct rvu *rvu, struct rsrc_attach *req, u16 pcifunc)
{
  #line 1097 
  struct rvu_block *block;
  #line 1098 
  int free_lfs;
  #line 1098 
  int mappedlfs;
  #line 1095 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 1096 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1101 
  if ((unsigned int)req->npalf != 0U) {
    #line 1101 
    if ((unsigned int)rvu_get_rsrc_mapcount(pfvf,4) == 0U) {
      #line 1102 
      block = & hw->block[3];
      #line 1103 
      free_lfs = rvu_rsrc_free_count(& block->lf);
      #line 1104 
      if (free_lfs == 0) 
                         #line 1105 
                         goto fail;
    }
    else 
         #line 1101 
         goto _LAND;
  }
  else {
    #line 1101 
    _LAND: 
           #line 1106 
    ;
    #line 1106 
    if ((unsigned int)req->npalf != 0U) {
      #line 1107 
      _dev_err(& (rvu->pdev)->dev,(char *)"Func 0x%x: Invalid req, already has NPA\n",(int)pcifunc);
      #line 1110 
      return -22;
    }
  }
  #line 1114 
  if ((unsigned int)req->nixlf != 0U) {
    #line 1114 
    if ((unsigned int)rvu_get_rsrc_mapcount(pfvf,3) == 0U) {
      #line 1115 
      block = & hw->block[4];
      #line 1116 
      free_lfs = rvu_rsrc_free_count(& block->lf);
      #line 1117 
      if (free_lfs == 0) 
                         #line 1118 
                         goto fail;
    }
    else 
         #line 1114 
         goto _LAND_0;
  }
  else {
    #line 1114 
    _LAND_0: 
             #line 1119 
    ;
    #line 1119 
    if ((unsigned int)req->nixlf != 0U) {
      #line 1120 
      _dev_err(& (rvu->pdev)->dev,(char *)"Func 0x%x: Invalid req, already has NIX\n",(int)pcifunc);
      #line 1123 
      return -22;
    }
  }
  #line 1126 
  if ((unsigned int)req->sso != 0U) {
    #line 1127 
    block = & hw->block[7];
    #line 1129 
    if ((int)req->sso > (int)block->lf.max) {
      #line 1130 
      _dev_err(& (rvu->pdev)->dev,(char *)"Func 0x%x: Invalid SSO req, %d > max %d\n",(int)pcifunc,(int)req->sso,(int)block->lf.max);
      #line 1133 
      return -22;
    }
    #line 1135 
    mappedlfs = (int)rvu_get_rsrc_mapcount(pfvf,(int)block->type);
    #line 1136 
    free_lfs = rvu_rsrc_free_count(& block->lf);
    #line 1138 
    if ((int)req->sso > mappedlfs && (int)req->sso - mappedlfs > free_lfs) 
      #line 1140 
      goto fail;
  }
  #line 1143 
  if ((unsigned int)req->ssow != 0U) {
    #line 1144 
    block = & hw->block[8];
    #line 1145 
    if ((int)req->ssow > (int)block->lf.max) {
      #line 1146 
      _dev_err(& (rvu->pdev)->dev,(char *)"Func 0x%x: Invalid SSOW req, %d > max %d\n",(int)pcifunc,(int)req->sso,(int)block->lf.max);
      #line 1149 
      return -22;
    }
    #line 1151 
    mappedlfs = (int)rvu_get_rsrc_mapcount(pfvf,(int)block->type);
    #line 1152 
    free_lfs = rvu_rsrc_free_count(& block->lf);
    #line 1153 
    if ((int)req->ssow > mappedlfs && (int)req->ssow - mappedlfs > free_lfs) 
      #line 1155 
      goto fail;
  }
  #line 1158 
  if ((unsigned int)req->timlfs != 0U) {
    #line 1159 
    block = & hw->block[9];
    #line 1160 
    if ((int)req->timlfs > (int)block->lf.max) {
      #line 1161 
      _dev_err(& (rvu->pdev)->dev,(char *)"Func 0x%x: Invalid TIMLF req, %d > max %d\n",(int)pcifunc,(int)req->timlfs,(int)block->lf.max);
      #line 1164 
      return -22;
    }
    #line 1166 
    mappedlfs = (int)rvu_get_rsrc_mapcount(pfvf,(int)block->type);
    #line 1167 
    free_lfs = rvu_rsrc_free_count(& block->lf);
    #line 1168 
    if ((int)req->timlfs > mappedlfs && (int)req->timlfs - mappedlfs > free_lfs) 
      #line 1170 
      goto fail;
  }
  #line 1173 
  if ((unsigned int)req->cptlfs != 0U) {
    #line 1174 
    block = & hw->block[10];
    #line 1175 
    if ((int)req->cptlfs > (int)block->lf.max) {
      #line 1176 
      _dev_err(& (rvu->pdev)->dev,(char *)"Func 0x%x: Invalid CPTLF req, %d > max %d\n",(int)pcifunc,(int)req->cptlfs,(int)block->lf.max);
      #line 1179 
      return -22;
    }
    #line 1181 
    mappedlfs = (int)rvu_get_rsrc_mapcount(pfvf,(int)block->type);
    #line 1182 
    free_lfs = rvu_rsrc_free_count(& block->lf);
    #line 1183 
    if ((int)req->cptlfs > mappedlfs && (int)req->cptlfs - mappedlfs > free_lfs) 
      #line 1185 
      goto fail;
  }
  #line 1188 
  return 0;
  #line 1190 
  fail: 
        #line 1190 
  ;
  #line 1191 
  _dev_info(rvu->dev,(char *)"Request for %s failed\n",(unsigned char *)(& block->name));
  #line 1192 
  return -28;
}

#line 1195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_mbox_handler_attach_resources(struct rvu *rvu, struct rsrc_attach *attach, struct msg_rsp *rsp)
{
  #line 1200 
  int err;
  #line 1199 
  u16 pcifunc = attach->hdr.pcifunc;
  #line 1203 
  if ((unsigned int)attach->modify == 0U) 
                                          #line 1204 
                                          rvu_detach_rsrcs(rvu,(struct rsrc_detach *)0,(unsigned short)((int)pcifunc));
  #line 1206 
  cif_mutex_lock_rsrc_lock_of_rvu_0(& rvu->rsrc_lock);
  #line 1209 
  err = rvu_check_rsrc_availability(rvu,attach,(unsigned short)((int)pcifunc));
  #line 1210 
  if (err != 0) 
                #line 1211 
                goto exit;
  #line 1214 
  if ((unsigned int)attach->npalf != 0U) 
                                         #line 1215 
                                         rvu_attach_block(rvu,(int)pcifunc,4,1);
  #line 1217 
  if ((unsigned int)attach->nixlf != 0U) 
                                         #line 1218 
                                         rvu_attach_block(rvu,(int)pcifunc,3,1);
  #line 1220 
  if ((unsigned int)attach->sso != 0U) {
    #line 1226 
    if ((unsigned int)attach->modify != 0U) 
                                            #line 1227 
                                            rvu_detach_block(rvu,(int)pcifunc,6);
    #line 1228 
    rvu_attach_block(rvu,(int)pcifunc,6,(int)attach->sso);
  }
  #line 1231 
  if ((unsigned int)attach->ssow != 0U) {
    #line 1232 
    if ((unsigned int)attach->modify != 0U) 
                                            #line 1233 
                                            rvu_detach_block(rvu,(int)pcifunc,7);
    #line 1234 
    rvu_attach_block(rvu,(int)pcifunc,7,(int)attach->ssow);
  }
  #line 1237 
  if ((unsigned int)attach->timlfs != 0U) {
    #line 1238 
    if ((unsigned int)attach->modify != 0U) 
                                            #line 1239 
                                            rvu_detach_block(rvu,(int)pcifunc,8);
    #line 1240 
    rvu_attach_block(rvu,(int)pcifunc,8,(int)attach->timlfs);
  }
  #line 1243 
  if ((unsigned int)attach->cptlfs != 0U) {
    #line 1244 
    if ((unsigned int)attach->modify != 0U) 
                                            #line 1245 
                                            rvu_detach_block(rvu,(int)pcifunc,9);
    #line 1246 
    rvu_attach_block(rvu,(int)pcifunc,9,(int)attach->cptlfs);
  }
  #line 1249 
  exit: 
        #line 1249 
  ;
  #line 1250 
  cif_mutex_unlock_rsrc_lock_of_rvu_0(& rvu->rsrc_lock);
  #line 1251 
  return err;
}

#line 1254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static u16 rvu_get_msix_offset(struct rvu *rvu, struct rvu_pfvf *pfvf, int blkaddr, int lf)
{
  #line 1257 
  u16 vec;
  #line 1259 
  if (lf < 0) 
              #line 1260 
              return (unsigned short)65535U;
  #line 1262 
  vec = (unsigned short)0U;
  #line 1262 
  while ((int)pfvf->msix.max > (int)vec) {
    #line 1263 
    if ((int)*(pfvf->msix_lfmap + (unsigned long)vec) == ((blkaddr << 8) | (lf & 255))) 
      #line 1264 
      return vec;
    #line 1262 
    vec = (u16)((int)vec + 1);
  }
  #line 1266 
  return (unsigned short)65535U;
}

#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_set_msix_offset(struct rvu *rvu, struct rvu_pfvf *pfvf, struct rvu_block *block, int lf)
{
  #line 1272 
  u16 nvecs;
  #line 1272 
  u16 vec;
  #line 1272 
  u16 offset;
  #line 1273 
  u64 cfg;
  #line 1275 
  cfg = rvu_read64(rvu,(unsigned long long)block->addr,block->msixcfg_reg | (unsigned long long)(lf << (int)block->lfshift));
  #line 1277 
  nvecs = (unsigned short)((unsigned int)((unsigned short)(cfg >> 12)) & 255U);
  #line 1280 
  if (! rvu_rsrc_check_contig(& pfvf->msix,(int)nvecs)) 
                                                        #line 1281 
                                                        return;
  #line 1283 
  offset = (unsigned short)rvu_alloc_rsrc_contig(& pfvf->msix,(int)nvecs);
  #line 1286 
  rvu_write64(rvu,(unsigned long long)block->addr,block->msixcfg_reg | (unsigned long long)(lf << (int)block->lfshift),(cfg & 18446744073709549568ULL) | (unsigned long long)offset);
  #line 1290 
  vec = (unsigned short)0U;
  #line 1290 
  while ((int)vec < (int)nvecs) {
    #line 1291 
    *(pfvf->msix_lfmap + (unsigned long)((int)offset + (int)vec)) = (unsigned short)(((int)block->addr << 8) | (lf & 255));
    #line 1290 
    vec = (u16)((int)vec + 1);
  }
  #line 1292 
  return;
}

#line 1294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_clear_msix_offset(struct rvu *rvu, struct rvu_pfvf *pfvf, struct rvu_block *block, int lf)
{
  #line 1297 
  u16 nvecs;
  #line 1297 
  u16 vec;
  #line 1297 
  u16 offset;
  #line 1298 
  u64 cfg;
  #line 1300 
  cfg = rvu_read64(rvu,(unsigned long long)block->addr,block->msixcfg_reg | (unsigned long long)(lf << (int)block->lfshift));
  #line 1302 
  nvecs = (unsigned short)((unsigned int)((unsigned short)(cfg >> 12)) & 255U);
  #line 1305 
  rvu_write64(rvu,(unsigned long long)block->addr,block->msixcfg_reg | (unsigned long long)(lf << (int)block->lfshift),cfg & 18446744073709549568ULL);
  #line 1308 
  offset = rvu_get_msix_offset(rvu,pfvf,(int)block->addr,lf);
  #line 1311 
  vec = (unsigned short)0U;
  #line 1311 
  while ((int)vec < (int)nvecs) {
    #line 1312 
    *(pfvf->msix_lfmap + (unsigned long)((int)offset + (int)vec)) = (unsigned short)0U;
    #line 1311 
    vec = (u16)((int)vec + 1);
  }
  #line 1315 
  rvu_free_rsrc_contig(& pfvf->msix,(int)nvecs,(int)offset);
  #line 1316 
  return;
}

#line 1318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_mbox_handler_msix_offset(struct rvu *rvu, struct msg_req *req, struct msix_offset_rsp *rsp)
{
  #line 1323 
  struct rvu_pfvf *pfvf;
  #line 1324 
  int lf;
  #line 1324 
  int slot;
  #line 1321 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1322 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1326 
  pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 1327 
  if (pfvf->msix.bmap == (unsigned long *)0UL) 
                                               #line 1328 
                                               return 0;
  #line 1331 
  lf = rvu_get_lf(rvu,& hw->block[3],(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 1332 
  rsp->npa_msixoff = rvu_get_msix_offset(rvu,pfvf,3,lf);
  #line 1334 
  lf = rvu_get_lf(rvu,& hw->block[4],(unsigned short)((int)pcifunc),(unsigned short)0);
  #line 1335 
  rsp->nix_msixoff = rvu_get_msix_offset(rvu,pfvf,4,lf);
  #line 1337 
  rsp->sso = (unsigned char)pfvf->sso;
  #line 1338 
  slot = 0;
  #line 1338 
  while ((int)rsp->sso > slot) {
    #line 1339 
    lf = rvu_get_lf(rvu,& hw->block[7],(unsigned short)((int)pcifunc),(unsigned short)((int)((unsigned short)slot)));
    #line 1340 
    rsp->sso_msixoff[slot] = rvu_get_msix_offset(rvu,pfvf,7,lf);
    #line 1338 
    slot ++;
  }
  #line 1344 
  rsp->ssow = (unsigned char)pfvf->ssow;
  #line 1345 
  slot = 0;
  #line 1345 
  while ((int)rsp->ssow > slot) {
    #line 1346 
    lf = rvu_get_lf(rvu,& hw->block[8],(unsigned short)((int)pcifunc),(unsigned short)((int)((unsigned short)slot)));
    #line 1347 
    rsp->ssow_msixoff[slot] = rvu_get_msix_offset(rvu,pfvf,8,lf);
    #line 1345 
    slot ++;
  }
  #line 1351 
  rsp->timlfs = (unsigned char)pfvf->timlfs;
  #line 1352 
  slot = 0;
  #line 1352 
  while ((int)rsp->timlfs > slot) {
    #line 1353 
    lf = rvu_get_lf(rvu,& hw->block[9],(unsigned short)((int)pcifunc),(unsigned short)((int)((unsigned short)slot)));
    #line 1354 
    rsp->timlf_msixoff[slot] = rvu_get_msix_offset(rvu,pfvf,9,lf);
    #line 1352 
    slot ++;
  }
  #line 1358 
  rsp->cptlfs = (unsigned char)pfvf->cptlfs;
  #line 1359 
  slot = 0;
  #line 1359 
  while ((int)rsp->cptlfs > slot) {
    #line 1360 
    lf = rvu_get_lf(rvu,& hw->block[10],(unsigned short)((int)pcifunc),(unsigned short)((int)((unsigned short)slot)));
    #line 1361 
    rsp->cptlf_msixoff[slot] = rvu_get_msix_offset(rvu,pfvf,10,lf);
    #line 1359 
    slot ++;
  }
  #line 1364 
  return 0;
}

#line 1367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_mbox_handler_vf_flr(struct rvu *rvu, struct msg_req *req, struct msg_rsp *rsp)
{
  #line 1371 
  u16 vf;
  #line 1371 
  u16 numvfs;
  #line 1372 
  u64 cfg;
  #line 1370 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1374 
  vf = (unsigned short)((unsigned int)pcifunc & 1023U);
  #line 1375 
  ;
  #line 1375 
  cfg = rvu_read64(rvu,0ULL,(unsigned long long)((rvu_get_pf((unsigned short)((int)pcifunc)) << 16) | 134217984));
  #line 1377 
  numvfs = (unsigned short)((unsigned int)((unsigned short)(cfg >> 12)) & 255U);
  #line 1379 
  if ((unsigned int)vf != 0U && (int)vf <= (int)numvfs) 
                                                        #line 1380 
                                                        __rvu_flr_handler(rvu,(unsigned short)((int)pcifunc)); else 
                                                                    #line 1382 
                                                                    return -256;
  #line 1384 
  return 0;
}

#line 1387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
int rvu_mbox_handler_get_hw_cap(struct rvu *rvu, struct msg_req *req, struct get_hw_cap_rsp *rsp)
{
  #line 1390 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1392 
  rsp->nix_fixed_txschq_mapping = (unsigned char)hw->cap.nix_fixed_txschq_mapping;
  #line 1393 
  rsp->nix_shaping = (unsigned char)hw->cap.nix_shaping;
  #line 1395 
  return 0;
}

#line 1398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_process_mbox_msg(struct otx2_mbox *mbox, int devid, struct mbox_msghdr *req)
{
  #line 1401 
  struct rvu *rvu = pci_get_drvdata(mbox->pdev);
  #line 1404 
  if ((unsigned int)req->sig != 57005U) 
                                        #line 1405 
                                        goto bad_message;
  #line 1407 
  switch ((int)req->id) {
    #line 1438 
    case 1: 
            #line 1438 
    ;
    {
      #line 1438 
      struct ready_msg_rsp *rsp;
      #line 1438 
      int err;
      #line 1438 
      int tmp_1;
      #line 1438 
      rsp = (struct ready_msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,20);
      #line 1438 
      if (rsp == (struct ready_msg_rsp *)0) 
                                            #line 1438 
                                            return -12;
      #line 1438 
      if (rsp != (struct ready_msg_rsp *)0) {
        #line 1438 
        rsp->hdr.id = (unsigned short)1U;
        #line 1438 
        rsp->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp->hdr.rc = 0;
      }
      #line 1438 
      err = rvu_mbox_handler_ready(rvu,(struct msg_req *)req,rsp);
      #line 1438 
      if (rsp != (struct ready_msg_rsp *)0 && err != 0) 
                                                        #line 1438 
                                                        rsp->hdr.rc = err;
      #line 1438 
      if (rsp != (struct ready_msg_rsp *)0) 
                                            #line 1438 
                                            tmp_1 = err; else 
                                                              #line 1438 
                                                              tmp_1 = -12;
      #line 1438 
      return tmp_1;
    }
    #line 1438 
    case 2: 
            #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_0;
      #line 1438 
      int err_0;
      #line 1438 
      int tmp_3;
      #line 1438 
      rsp_0 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_0 == (struct msg_rsp *)0) 
                                        #line 1438 
                                        return -12;
      #line 1438 
      if (rsp_0 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_0->hdr.id = (unsigned short)2U;
        #line 1438 
        rsp_0->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_0->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_0->hdr.rc = 0;
      }
      #line 1438 
      err_0 = rvu_mbox_handler_attach_resources(rvu,(struct rsrc_attach *)req,rsp_0);
      #line 1438 
      if (rsp_0 != (struct msg_rsp *)0 && err_0 != 0) 
                                                      #line 1438 
                                                      rsp_0->hdr.rc = err_0;
      #line 1438 
      if (rsp_0 != (struct msg_rsp *)0) 
                                        #line 1438 
                                        tmp_3 = err_0; else 
                                                            #line 1438 
                                                            tmp_3 = -12;
      #line 1438 
      return tmp_3;
    }
    #line 1438 
    case 3: 
            #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_1;
      #line 1438 
      int err_1;
      #line 1438 
      int tmp_5;
      #line 1438 
      rsp_1 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_1 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_1->hdr.id = (unsigned short)3U;
        #line 1438 
        rsp_1->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_1->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_1->hdr.rc = 0;
      }
      #line 1438 
      err_1 = rvu_mbox_handler_detach_resources(rvu,(struct rsrc_detach *)req,rsp_1);
      #line 1438 
      if (rsp_1 != (struct msg_rsp *)0 && err_1 != 0) 
                                                      #line 1438 
                                                      rsp_1->hdr.rc = err_1;
      #line 1438 
      if (rsp_1 != (struct msg_rsp *)0) 
                                        #line 1438 
                                        tmp_5 = err_1; else 
                                                            #line 1438 
                                                            tmp_5 = -12;
      #line 1438 
      return tmp_5;
    }
    #line 1438 
    case 4: 
            #line 1438 
    ;
    {
      #line 1438 
      struct msix_offset_rsp *rsp_2;
      #line 1438 
      int err_2;
      #line 1438 
      int tmp_7;
      #line 1438 
      rsp_2 = (struct msix_offset_rsp *)otx2_mbox_alloc_msg(mbox,devid,2072);
      #line 1438 
      if (rsp_2 == (struct msix_offset_rsp *)0) 
                                                #line 1438 
                                                return -12;
      #line 1438 
      if (rsp_2 != (struct msix_offset_rsp *)0) {
        #line 1438 
        rsp_2->hdr.id = (unsigned short)4U;
        #line 1438 
        rsp_2->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_2->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_2->hdr.rc = 0;
      }
      #line 1438 
      err_2 = rvu_mbox_handler_msix_offset(rvu,(struct msg_req *)req,rsp_2);
      #line 1438 
      if (rsp_2 != (struct msix_offset_rsp *)0 && err_2 != 0) 
                                                              #line 1438 
                                                              rsp_2->hdr.rc = err_2;
      #line 1438 
      if (rsp_2 != (struct msix_offset_rsp *)0) 
                                                #line 1438 
                                                tmp_7 = err_2; else 
                                                                    #line 1438 
                                                                    tmp_7 = -12;
      #line 1438 
      return tmp_7;
    }
    #line 1438 
    case 6: 
            #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_3;
      #line 1438 
      int err_3;
      #line 1438 
      int tmp_9;
      #line 1438 
      rsp_3 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_3 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_3->hdr.id = (unsigned short)6U;
        #line 1438 
        rsp_3->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_3->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_3->hdr.rc = 0;
      }
      #line 1438 
      err_3 = rvu_mbox_handler_vf_flr(rvu,(struct msg_req *)req,rsp_3);
      #line 1438 
      if (rsp_3 != (struct msg_rsp *)0 && err_3 != 0) 
                                                      #line 1438 
                                                      rsp_3->hdr.rc = err_3;
      #line 1438 
      if (rsp_3 != (struct msg_rsp *)0) 
                                        #line 1438 
                                        tmp_9 = err_3; else 
                                                            #line 1438 
                                                            tmp_9 = -12;
      #line 1438 
      return tmp_9;
    }
    #line 1438 
    case 8: 
            #line 1438 
    ;
    {
      #line 1438 
      struct get_hw_cap_rsp *rsp_4;
      #line 1438 
      int err_4;
      #line 1438 
      int tmp_11;
      #line 1438 
      rsp_4 = (struct get_hw_cap_rsp *)otx2_mbox_alloc_msg(mbox,devid,20);
      #line 1438 
      if (rsp_4 == (struct get_hw_cap_rsp *)0) 
                                               #line 1438 
                                               return -12;
      #line 1438 
      if (rsp_4 != (struct get_hw_cap_rsp *)0) {
        #line 1438 
        rsp_4->hdr.id = (unsigned short)8U;
        #line 1438 
        rsp_4->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_4->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_4->hdr.rc = 0;
      }
      #line 1438 
      err_4 = rvu_mbox_handler_get_hw_cap(rvu,(struct msg_req *)req,rsp_4);
      #line 1438 
      if (rsp_4 != (struct get_hw_cap_rsp *)0 && err_4 != 0) 
                                                             #line 1438 
                                                             rsp_4->hdr.rc = err_4;
      #line 1438 
      if (rsp_4 != (struct get_hw_cap_rsp *)0) 
                                               #line 1438 
                                               tmp_11 = err_4; else 
                                                                    #line 1438 
                                                                    tmp_11 = -12;
      #line 1438 
      return tmp_11;
    }
    #line 1438 
    case 512: 
              #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_5;
      #line 1438 
      int err_5;
      #line 1438 
      int tmp_13;
      #line 1438 
      rsp_5 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_5 == (struct msg_rsp *)0) 
                                        #line 1438 
                                        return -12;
      #line 1438 
      if (rsp_5 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_5->hdr.id = (unsigned short)512U;
        #line 1438 
        rsp_5->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_5->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_5->hdr.rc = 0;
      }
      #line 1438 
      err_5 = rvu_mbox_handler_cgx_start_rxtx(rvu,(struct msg_req *)req,rsp_5);
      #line 1438 
      if (rsp_5 != (struct msg_rsp *)0 && err_5 != 0) 
                                                      #line 1438 
                                                      rsp_5->hdr.rc = err_5;
      #line 1438 
      if (rsp_5 != (struct msg_rsp *)0) 
                                        #line 1438 
                                        tmp_13 = err_5; else 
                                                             #line 1438 
                                                             tmp_13 = -12;
      #line 1438 
      return tmp_13;
    }
    #line 1438 
    case 513: 
              #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_6;
      #line 1438 
      int err_6;
      #line 1438 
      int tmp_15;
      #line 1438 
      rsp_6 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_6 == (struct msg_rsp *)0) 
                                        #line 1438 
                                        return -12;
      #line 1438 
      if (rsp_6 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_6->hdr.id = (unsigned short)513U;
        #line 1438 
        rsp_6->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_6->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_6->hdr.rc = 0;
      }
      #line 1438 
      err_6 = rvu_mbox_handler_cgx_stop_rxtx(rvu,(struct msg_req *)req,rsp_6);
      #line 1438 
      if (rsp_6 != (struct msg_rsp *)0 && err_6 != 0) 
                                                      #line 1438 
                                                      rsp_6->hdr.rc = err_6;
      #line 1438 
      if (rsp_6 != (struct msg_rsp *)0) 
                                        #line 1438 
                                        tmp_15 = err_6; else 
                                                             #line 1438 
                                                             tmp_15 = -12;
      #line 1438 
      return tmp_15;
    }
    #line 1438 
    case 514: 
              #line 1438 
    ;
    {
      #line 1438 
      struct cgx_stats_rsp *rsp_7;
      #line 1438 
      int err_7;
      #line 1438 
      int tmp_17;
      #line 1438 
      rsp_7 = (struct cgx_stats_rsp *)otx2_mbox_alloc_msg(mbox,devid,264);
      #line 1438 
      if (rsp_7 == (struct cgx_stats_rsp *)0) 
                                              #line 1438 
                                              return -12;
      #line 1438 
      if (rsp_7 != (struct cgx_stats_rsp *)0) {
        #line 1438 
        rsp_7->hdr.id = (unsigned short)514U;
        #line 1438 
        rsp_7->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_7->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_7->hdr.rc = 0;
      }
      #line 1438 
      err_7 = rvu_mbox_handler_cgx_stats(rvu,(struct msg_req *)req,rsp_7);
      #line 1438 
      if (rsp_7 != (struct cgx_stats_rsp *)0 && err_7 != 0) 
                                                            #line 1438 
                                                            rsp_7->hdr.rc = err_7;
      #line 1438 
      if (rsp_7 != (struct cgx_stats_rsp *)0) 
                                              #line 1438 
                                              tmp_17 = err_7; else 
                                                                   #line 1438 
                                                                   tmp_17 = -12;
      #line 1438 
      return tmp_17;
    }
    #line 1438 
    case 515: 
              #line 1438 
    ;
    {
      #line 1438 
      struct cgx_mac_addr_set_or_get *rsp_8;
      #line 1438 
      int err_8;
      #line 1438 
      int tmp_19;
      #line 1438 
      rsp_8 = (struct cgx_mac_addr_set_or_get *)otx2_mbox_alloc_msg(mbox,devid,24);
      #line 1438 
      if (rsp_8 == (struct cgx_mac_addr_set_or_get *)0) 
                                                        #line 1438 
                                                        return -12;
      #line 1438 
      if (rsp_8 != (struct cgx_mac_addr_set_or_get *)0) {
        #line 1438 
        rsp_8->hdr.id = (unsigned short)515U;
        #line 1438 
        rsp_8->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_8->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_8->hdr.rc = 0;
      }
      #line 1438 
      err_8 = rvu_mbox_handler_cgx_mac_addr_set(rvu,(struct cgx_mac_addr_set_or_get *)req,rsp_8);
      #line 1438 
      if (rsp_8 != (struct cgx_mac_addr_set_or_get *)0 && err_8 != 0) 
        #line 1438 
        rsp_8->hdr.rc = err_8;
      #line 1438 
      if (rsp_8 != (struct cgx_mac_addr_set_or_get *)0) 
                                                        #line 1438 
                                                        tmp_19 = err_8; else 
                                                                    #line 1438 
                                                                    tmp_19 = -12;
      #line 1438 
      return tmp_19;
    }
    #line 1438 
    case 516: 
              #line 1438 
    ;
    {
      #line 1438 
      struct cgx_mac_addr_set_or_get *rsp_9;
      #line 1438 
      int err_9;
      #line 1438 
      int tmp_21;
      #line 1438 
      rsp_9 = (struct cgx_mac_addr_set_or_get *)otx2_mbox_alloc_msg(mbox,devid,24);
      #line 1438 
      if (rsp_9 == (struct cgx_mac_addr_set_or_get *)0) 
                                                        #line 1438 
                                                        return -12;
      #line 1438 
      if (rsp_9 != (struct cgx_mac_addr_set_or_get *)0) {
        #line 1438 
        rsp_9->hdr.id = (unsigned short)516U;
        #line 1438 
        rsp_9->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_9->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_9->hdr.rc = 0;
      }
      #line 1438 
      err_9 = rvu_mbox_handler_cgx_mac_addr_get(rvu,(struct cgx_mac_addr_set_or_get *)req,rsp_9);
      #line 1438 
      if (rsp_9 != (struct cgx_mac_addr_set_or_get *)0 && err_9 != 0) 
        #line 1438 
        rsp_9->hdr.rc = err_9;
      #line 1438 
      if (rsp_9 != (struct cgx_mac_addr_set_or_get *)0) 
                                                        #line 1438 
                                                        tmp_21 = err_9; else 
                                                                    #line 1438 
                                                                    tmp_21 = -12;
      #line 1438 
      return tmp_21;
    }
    #line 1438 
    case 517: 
              #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_10;
      #line 1438 
      int err_10;
      #line 1438 
      int tmp_23;
      #line 1438 
      rsp_10 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_10 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_10 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_10->hdr.id = (unsigned short)517U;
        #line 1438 
        rsp_10->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_10->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_10->hdr.rc = 0;
      }
      #line 1438 
      err_10 = rvu_mbox_handler_cgx_promisc_enable(rvu,(struct msg_req *)req,rsp_10);
      #line 1438 
      if (rsp_10 != (struct msg_rsp *)0 && err_10 != 0) 
                                                        #line 1438 
                                                        rsp_10->hdr.rc = err_10;
      #line 1438 
      if (rsp_10 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_23 = err_10; else 
                                                               #line 1438 
                                                               tmp_23 = -12;
      #line 1438 
      return tmp_23;
    }
    #line 1438 
    case 518: 
              #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_11;
      #line 1438 
      int err_11;
      #line 1438 
      int tmp_25;
      #line 1438 
      rsp_11 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_11 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_11 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_11->hdr.id = (unsigned short)518U;
        #line 1438 
        rsp_11->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_11->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_11->hdr.rc = 0;
      }
      #line 1438 
      err_11 = rvu_mbox_handler_cgx_promisc_disable(rvu,(struct msg_req *)req,rsp_11);
      #line 1438 
      if (rsp_11 != (struct msg_rsp *)0 && err_11 != 0) 
                                                        #line 1438 
                                                        rsp_11->hdr.rc = err_11;
      #line 1438 
      if (rsp_11 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_25 = err_11; else 
                                                               #line 1438 
                                                               tmp_25 = -12;
      #line 1438 
      return tmp_25;
    }
    #line 1438 
    case 519: 
              #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_12;
      #line 1438 
      int err_12;
      #line 1438 
      int tmp_27;
      #line 1438 
      rsp_12 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_12 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_12 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_12->hdr.id = (unsigned short)519U;
        #line 1438 
        rsp_12->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_12->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_12->hdr.rc = 0;
      }
      #line 1438 
      err_12 = rvu_mbox_handler_cgx_start_linkevents(rvu,(struct msg_req *)req,rsp_12);
      #line 1438 
      if (rsp_12 != (struct msg_rsp *)0 && err_12 != 0) 
                                                        #line 1438 
                                                        rsp_12->hdr.rc = err_12;
      #line 1438 
      if (rsp_12 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_27 = err_12; else 
                                                               #line 1438 
                                                               tmp_27 = -12;
      #line 1438 
      return tmp_27;
    }
    #line 1438 
    case 520: 
              #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_13;
      #line 1438 
      int err_13;
      #line 1438 
      int tmp_29;
      #line 1438 
      rsp_13 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_13 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_13 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_13->hdr.id = (unsigned short)520U;
        #line 1438 
        rsp_13->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_13->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_13->hdr.rc = 0;
      }
      #line 1438 
      err_13 = rvu_mbox_handler_cgx_stop_linkevents(rvu,(struct msg_req *)req,rsp_13);
      #line 1438 
      if (rsp_13 != (struct msg_rsp *)0 && err_13 != 0) 
                                                        #line 1438 
                                                        rsp_13->hdr.rc = err_13;
      #line 1438 
      if (rsp_13 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_29 = err_13; else 
                                                               #line 1438 
                                                               tmp_29 = -12;
      #line 1438 
      return tmp_29;
    }
    #line 1438 
    case 521: 
              #line 1438 
    ;
    {
      #line 1438 
      struct cgx_link_info_msg *rsp_14;
      #line 1438 
      int err_14;
      #line 1438 
      int tmp_31;
      #line 1438 
      rsp_14 = (struct cgx_link_info_msg *)otx2_mbox_alloc_msg(mbox,devid,40);
      #line 1438 
      if (rsp_14 == (struct cgx_link_info_msg *)0) 
                                                   #line 1438 
                                                   return -12;
      #line 1438 
      if (rsp_14 != (struct cgx_link_info_msg *)0) {
        #line 1438 
        rsp_14->hdr.id = (unsigned short)521U;
        #line 1438 
        rsp_14->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_14->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_14->hdr.rc = 0;
      }
      #line 1438 
      err_14 = rvu_mbox_handler_cgx_get_linkinfo(rvu,(struct msg_req *)req,rsp_14);
      #line 1438 
      if (rsp_14 != (struct cgx_link_info_msg *)0 && err_14 != 0) 
                                                                  #line 1438 
                                                                  rsp_14->hdr.rc = err_14;
      #line 1438 
      if (rsp_14 != (struct cgx_link_info_msg *)0) 
                                                   #line 1438 
                                                   tmp_31 = err_14; else 
                                                                    #line 1438 
                                                                    tmp_31 = -12;
      #line 1438 
      return tmp_31;
    }
    #line 1438 
    case 522: 
              #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_15;
      #line 1438 
      int err_15;
      #line 1438 
      int tmp_33;
      #line 1438 
      rsp_15 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_15 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_15 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_15->hdr.id = (unsigned short)522U;
        #line 1438 
        rsp_15->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_15->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_15->hdr.rc = 0;
      }
      #line 1438 
      err_15 = rvu_mbox_handler_cgx_intlbk_enable(rvu,(struct msg_req *)req,rsp_15);
      #line 1438 
      if (rsp_15 != (struct msg_rsp *)0 && err_15 != 0) 
                                                        #line 1438 
                                                        rsp_15->hdr.rc = err_15;
      #line 1438 
      if (rsp_15 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_33 = err_15; else 
                                                               #line 1438 
                                                               tmp_33 = -12;
      #line 1438 
      return tmp_33;
    }
    #line 1438 
    case 523: 
              #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_16;
      #line 1438 
      int err_16;
      #line 1438 
      int tmp_35;
      #line 1438 
      rsp_16 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_16 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_16 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_16->hdr.id = (unsigned short)523U;
        #line 1438 
        rsp_16->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_16->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_16->hdr.rc = 0;
      }
      #line 1438 
      err_16 = rvu_mbox_handler_cgx_intlbk_disable(rvu,(struct msg_req *)req,rsp_16);
      #line 1438 
      if (rsp_16 != (struct msg_rsp *)0 && err_16 != 0) 
                                                        #line 1438 
                                                        rsp_16->hdr.rc = err_16;
      #line 1438 
      if (rsp_16 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_35 = err_16; else 
                                                               #line 1438 
                                                               tmp_35 = -12;
      #line 1438 
      return tmp_35;
    }
    #line 1438 
    case 1024: 
               #line 1438 
    ;
    {
      #line 1438 
      struct npa_lf_alloc_rsp *rsp_17;
      #line 1438 
      int err_17;
      #line 1438 
      int tmp_37;
      #line 1438 
      rsp_17 = (struct npa_lf_alloc_rsp *)otx2_mbox_alloc_msg(mbox,devid,28);
      #line 1438 
      if (rsp_17 == (struct npa_lf_alloc_rsp *)0) 
                                                  #line 1438 
                                                  return -12;
      #line 1438 
      if (rsp_17 != (struct npa_lf_alloc_rsp *)0) {
        #line 1438 
        rsp_17->hdr.id = (unsigned short)1024U;
        #line 1438 
        rsp_17->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_17->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_17->hdr.rc = 0;
      }
      #line 1438 
      err_17 = rvu_mbox_handler_npa_lf_alloc(rvu,(struct npa_lf_alloc_req *)req,rsp_17);
      #line 1438 
      if (rsp_17 != (struct npa_lf_alloc_rsp *)0 && err_17 != 0) 
                                                                 #line 1438 
                                                                 rsp_17->hdr.rc = err_17;
      #line 1438 
      if (rsp_17 != (struct npa_lf_alloc_rsp *)0) 
                                                  #line 1438 
                                                  tmp_37 = err_17; else 
                                                                    #line 1438 
                                                                    tmp_37 = -12;
      #line 1438 
      return tmp_37;
    }
    #line 1438 
    case 1025: 
               #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_18;
      #line 1438 
      int err_18;
      #line 1438 
      int tmp_39;
      #line 1438 
      rsp_18 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_18 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_18 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_18->hdr.id = (unsigned short)1025U;
        #line 1438 
        rsp_18->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_18->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_18->hdr.rc = 0;
      }
      #line 1438 
      err_18 = rvu_mbox_handler_npa_lf_free(rvu,(struct msg_req *)req,rsp_18);
      #line 1438 
      if (rsp_18 != (struct msg_rsp *)0 && err_18 != 0) 
                                                        #line 1438 
                                                        rsp_18->hdr.rc = err_18;
      #line 1438 
      if (rsp_18 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_39 = err_18; else 
                                                               #line 1438 
                                                               tmp_39 = -12;
      #line 1438 
      return tmp_39;
    }
    #line 1438 
    case 1026: 
               #line 1438 
    ;
    {
      #line 1438 
      struct npa_aq_enq_rsp *rsp_19;
      #line 1438 
      int err_19;
      #line 1438 
      int tmp_41;
      #line 1438 
      rsp_19 = (struct npa_aq_enq_rsp *)otx2_mbox_alloc_msg(mbox,devid,144);
      #line 1438 
      if (rsp_19 == (struct npa_aq_enq_rsp *)0) 
                                                #line 1438 
                                                return -12;
      #line 1438 
      if (rsp_19 != (struct npa_aq_enq_rsp *)0) {
        #line 1438 
        rsp_19->hdr.id = (unsigned short)1026U;
        #line 1438 
        rsp_19->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_19->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_19->hdr.rc = 0;
      }
      #line 1438 
      err_19 = rvu_mbox_handler_npa_aq_enq(rvu,(struct npa_aq_enq_req *)req,rsp_19);
      #line 1438 
      if (rsp_19 != (struct npa_aq_enq_rsp *)0 && err_19 != 0) 
                                                               #line 1438 
                                                               rsp_19->hdr.rc = err_19;
      #line 1438 
      if (rsp_19 != (struct npa_aq_enq_rsp *)0) 
                                                #line 1438 
                                                tmp_41 = err_19; else 
                                                                   #line 1438 
                                                                   tmp_41 = -12;
      #line 1438 
      return tmp_41;
    }
    #line 1438 
    case 1027: 
               #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_20;
      #line 1438 
      int err_20;
      #line 1438 
      int tmp_43;
      #line 1438 
      rsp_20 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_20 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_20 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_20->hdr.id = (unsigned short)1027U;
        #line 1438 
        rsp_20->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_20->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_20->hdr.rc = 0;
      }
      #line 1438 
      err_20 = rvu_mbox_handler_npa_hwctx_disable(rvu,(struct hwctx_disable_req *)req,rsp_20);
      #line 1438 
      if (rsp_20 != (struct msg_rsp *)0 && err_20 != 0) 
                                                        #line 1438 
                                                        rsp_20->hdr.rc = err_20;
      #line 1438 
      if (rsp_20 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_43 = err_20; else 
                                                               #line 1438 
                                                               tmp_43 = -12;
      #line 1438 
      return tmp_43;
    }
    #line 1438 
    case 24576: 
                #line 1438 
    ;
    {
      #line 1438 
      struct npc_mcam_alloc_entry_rsp *rsp_21;
      #line 1438 
      int err_21;
      #line 1438 
      int tmp_45;
      #line 1438 
      rsp_21 = (struct npc_mcam_alloc_entry_rsp *)otx2_mbox_alloc_msg(mbox,devid,536);
      #line 1438 
      if (rsp_21 == (struct npc_mcam_alloc_entry_rsp *)0) 
                                                          #line 1438 
                                                          return -12;
      #line 1438 
      if (rsp_21 != (struct npc_mcam_alloc_entry_rsp *)0) {
        #line 1438 
        rsp_21->hdr.id = (unsigned short)24576U;
        #line 1438 
        rsp_21->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_21->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_21->hdr.rc = 0;
      }
      #line 1438 
      err_21 = rvu_mbox_handler_npc_mcam_alloc_entry(rvu,(struct npc_mcam_alloc_entry_req *)req,rsp_21);
      #line 1438 
      if (rsp_21 != (struct npc_mcam_alloc_entry_rsp *)0 && err_21 != 0) 
        #line 1438 
        rsp_21->hdr.rc = err_21;
      #line 1438 
      if (rsp_21 != (struct npc_mcam_alloc_entry_rsp *)0) 
                                                          #line 1438 
                                                          tmp_45 = err_21; else 
                                                                    #line 1438 
                                                                    tmp_45 = -12;
      #line 1438 
      return tmp_45;
    }
    #line 1438 
    case 24577: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_22;
      #line 1438 
      int err_22;
      #line 1438 
      int tmp_47;
      #line 1438 
      rsp_22 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_22 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_22 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_22->hdr.id = (unsigned short)24577U;
        #line 1438 
        rsp_22->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_22->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_22->hdr.rc = 0;
      }
      #line 1438 
      err_22 = rvu_mbox_handler_npc_mcam_free_entry(rvu,(struct npc_mcam_free_entry_req *)req,rsp_22);
      #line 1438 
      if (rsp_22 != (struct msg_rsp *)0 && err_22 != 0) 
                                                        #line 1438 
                                                        rsp_22->hdr.rc = err_22;
      #line 1438 
      if (rsp_22 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_47 = err_22; else 
                                                               #line 1438 
                                                               tmp_47 = -12;
      #line 1438 
      return tmp_47;
    }
    #line 1438 
    case 24578: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_23;
      #line 1438 
      int err_23;
      #line 1438 
      int tmp_49;
      #line 1438 
      rsp_23 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_23 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_23 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_23->hdr.id = (unsigned short)24578U;
        #line 1438 
        rsp_23->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_23->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_23->hdr.rc = 0;
      }
      #line 1438 
      err_23 = rvu_mbox_handler_npc_mcam_write_entry(rvu,(struct npc_mcam_write_entry_req *)req,rsp_23);
      #line 1438 
      if (rsp_23 != (struct msg_rsp *)0 && err_23 != 0) 
                                                        #line 1438 
                                                        rsp_23->hdr.rc = err_23;
      #line 1438 
      if (rsp_23 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_49 = err_23; else 
                                                               #line 1438 
                                                               tmp_49 = -12;
      #line 1438 
      return tmp_49;
    }
    #line 1438 
    case 24579: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_24;
      #line 1438 
      int err_24;
      #line 1438 
      int tmp_51;
      #line 1438 
      rsp_24 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_24 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_24 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_24->hdr.id = (unsigned short)24579U;
        #line 1438 
        rsp_24->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_24->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_24->hdr.rc = 0;
      }
      #line 1438 
      err_24 = rvu_mbox_handler_npc_mcam_ena_entry(rvu,(struct npc_mcam_ena_dis_entry_req *)req,rsp_24);
      #line 1438 
      if (rsp_24 != (struct msg_rsp *)0 && err_24 != 0) 
                                                        #line 1438 
                                                        rsp_24->hdr.rc = err_24;
      #line 1438 
      if (rsp_24 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_51 = err_24; else 
                                                               #line 1438 
                                                               tmp_51 = -12;
      #line 1438 
      return tmp_51;
    }
    #line 1438 
    case 24580: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_25;
      #line 1438 
      int err_25;
      #line 1438 
      int tmp_53;
      #line 1438 
      rsp_25 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_25 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_25 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_25->hdr.id = (unsigned short)24580U;
        #line 1438 
        rsp_25->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_25->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_25->hdr.rc = 0;
      }
      #line 1438 
      err_25 = rvu_mbox_handler_npc_mcam_dis_entry(rvu,(struct npc_mcam_ena_dis_entry_req *)req,rsp_25);
      #line 1438 
      if (rsp_25 != (struct msg_rsp *)0 && err_25 != 0) 
                                                        #line 1438 
                                                        rsp_25->hdr.rc = err_25;
      #line 1438 
      if (rsp_25 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_53 = err_25; else 
                                                               #line 1438 
                                                               tmp_53 = -12;
      #line 1438 
      return tmp_53;
    }
    #line 1438 
    case 24581: 
                #line 1438 
    ;
    {
      #line 1438 
      struct npc_mcam_shift_entry_rsp *rsp_26;
      #line 1438 
      int err_26;
      #line 1438 
      int tmp_55;
      #line 1438 
      rsp_26 = (struct npc_mcam_shift_entry_rsp *)otx2_mbox_alloc_msg(mbox,devid,20);
      #line 1438 
      if (rsp_26 == (struct npc_mcam_shift_entry_rsp *)0) 
                                                          #line 1438 
                                                          return -12;
      #line 1438 
      if (rsp_26 != (struct npc_mcam_shift_entry_rsp *)0) {
        #line 1438 
        rsp_26->hdr.id = (unsigned short)24581U;
        #line 1438 
        rsp_26->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_26->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_26->hdr.rc = 0;
      }
      #line 1438 
      err_26 = rvu_mbox_handler_npc_mcam_shift_entry(rvu,(struct npc_mcam_shift_entry_req *)req,rsp_26);
      #line 1438 
      if (rsp_26 != (struct npc_mcam_shift_entry_rsp *)0 && err_26 != 0) 
        #line 1438 
        rsp_26->hdr.rc = err_26;
      #line 1438 
      if (rsp_26 != (struct npc_mcam_shift_entry_rsp *)0) 
                                                          #line 1438 
                                                          tmp_55 = err_26; else 
                                                                    #line 1438 
                                                                    tmp_55 = -12;
      #line 1438 
      return tmp_55;
    }
    #line 1438 
    case 24582: 
                #line 1438 
    ;
    {
      #line 1438 
      struct npc_mcam_alloc_counter_rsp *rsp_27;
      #line 1438 
      int err_27;
      #line 1438 
      int tmp_57;
      #line 1438 
      rsp_27 = (struct npc_mcam_alloc_counter_rsp *)otx2_mbox_alloc_msg(mbox,devid,148);
      #line 1438 
      if (rsp_27 == (struct npc_mcam_alloc_counter_rsp *)0) 
                                                            #line 1438 
                                                            return -12;
      #line 1438 
      if (rsp_27 != (struct npc_mcam_alloc_counter_rsp *)0) {
        #line 1438 
        rsp_27->hdr.id = (unsigned short)24582U;
        #line 1438 
        rsp_27->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_27->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_27->hdr.rc = 0;
      }
      #line 1438 
      err_27 = rvu_mbox_handler_npc_mcam_alloc_counter(rvu,(struct npc_mcam_alloc_counter_req *)req,rsp_27);
      #line 1438 
      if (rsp_27 != (struct npc_mcam_alloc_counter_rsp *)0 && err_27 != 0) 
        #line 1438 
        rsp_27->hdr.rc = err_27;
      #line 1438 
      if (rsp_27 != (struct npc_mcam_alloc_counter_rsp *)0) 
                                                            #line 1438 
                                                            tmp_57 = err_27; else 
                                                                    #line 1438 
                                                                    tmp_57 = -12;
      #line 1438 
      return tmp_57;
    }
    #line 1438 
    case 24583: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_28;
      #line 1438 
      int err_28;
      #line 1438 
      int tmp_59;
      #line 1438 
      rsp_28 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_28 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_28 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_28->hdr.id = (unsigned short)24583U;
        #line 1438 
        rsp_28->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_28->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_28->hdr.rc = 0;
      }
      #line 1438 
      err_28 = rvu_mbox_handler_npc_mcam_free_counter(rvu,(struct npc_mcam_oper_counter_req *)req,rsp_28);
      #line 1438 
      if (rsp_28 != (struct msg_rsp *)0 && err_28 != 0) 
                                                        #line 1438 
                                                        rsp_28->hdr.rc = err_28;
      #line 1438 
      if (rsp_28 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_59 = err_28; else 
                                                               #line 1438 
                                                               tmp_59 = -12;
      #line 1438 
      return tmp_59;
    }
    #line 1438 
    case 24584: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_29;
      #line 1438 
      int err_29;
      #line 1438 
      int tmp_61;
      #line 1438 
      rsp_29 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_29 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_29 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_29->hdr.id = (unsigned short)24584U;
        #line 1438 
        rsp_29->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_29->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_29->hdr.rc = 0;
      }
      #line 1438 
      err_29 = rvu_mbox_handler_npc_mcam_unmap_counter(rvu,(struct npc_mcam_unmap_counter_req *)req,rsp_29);
      #line 1438 
      if (rsp_29 != (struct msg_rsp *)0 && err_29 != 0) 
                                                        #line 1438 
                                                        rsp_29->hdr.rc = err_29;
      #line 1438 
      if (rsp_29 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_61 = err_29; else 
                                                               #line 1438 
                                                               tmp_61 = -12;
      #line 1438 
      return tmp_61;
    }
    #line 1438 
    case 24585: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_30;
      #line 1438 
      int err_30;
      #line 1438 
      int tmp_63;
      #line 1438 
      rsp_30 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_30 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_30 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_30->hdr.id = (unsigned short)24585U;
        #line 1438 
        rsp_30->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_30->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_30->hdr.rc = 0;
      }
      #line 1438 
      err_30 = rvu_mbox_handler_npc_mcam_clear_counter(rvu,(struct npc_mcam_oper_counter_req *)req,rsp_30);
      #line 1438 
      if (rsp_30 != (struct msg_rsp *)0 && err_30 != 0) 
                                                        #line 1438 
                                                        rsp_30->hdr.rc = err_30;
      #line 1438 
      if (rsp_30 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_63 = err_30; else 
                                                               #line 1438 
                                                               tmp_63 = -12;
      #line 1438 
      return tmp_63;
    }
    #line 1438 
    case 24586: 
                #line 1438 
    ;
    {
      #line 1438 
      struct npc_mcam_oper_counter_rsp *rsp_31;
      #line 1438 
      int err_31;
      #line 1438 
      int tmp_65;
      #line 1438 
      rsp_31 = (struct npc_mcam_oper_counter_rsp *)otx2_mbox_alloc_msg(mbox,devid,24);
      #line 1438 
      if (rsp_31 == (struct npc_mcam_oper_counter_rsp *)0) 
                                                           #line 1438 
                                                           return -12;
      #line 1438 
      if (rsp_31 != (struct npc_mcam_oper_counter_rsp *)0) {
        #line 1438 
        rsp_31->hdr.id = (unsigned short)24586U;
        #line 1438 
        rsp_31->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_31->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_31->hdr.rc = 0;
      }
      #line 1438 
      err_31 = rvu_mbox_handler_npc_mcam_counter_stats(rvu,(struct npc_mcam_oper_counter_req *)req,rsp_31);
      #line 1438 
      if (rsp_31 != (struct npc_mcam_oper_counter_rsp *)0 && err_31 != 0) 
        #line 1438 
        rsp_31->hdr.rc = err_31;
      #line 1438 
      if (rsp_31 != (struct npc_mcam_oper_counter_rsp *)0) 
                                                           #line 1438 
                                                           tmp_65 = err_31; else 
                                                                    #line 1438 
                                                                    tmp_65 = -12;
      #line 1438 
      return tmp_65;
    }
    #line 1438 
    case 24587: 
                #line 1438 
    ;
    {
      #line 1438 
      struct npc_mcam_alloc_and_write_entry_rsp *rsp_32;
      #line 1438 
      int err_32;
      #line 1438 
      int tmp_67;
      #line 1438 
      rsp_32 = (struct npc_mcam_alloc_and_write_entry_rsp *)otx2_mbox_alloc_msg(mbox,devid,20);
      #line 1438 
      if (rsp_32 == (struct npc_mcam_alloc_and_write_entry_rsp *)0) 
                                                                    #line 1438 
                                                                    return -12;
      #line 1438 
      if (rsp_32 != (struct npc_mcam_alloc_and_write_entry_rsp *)0) {
        #line 1438 
        rsp_32->hdr.id = (unsigned short)24587U;
        #line 1438 
        rsp_32->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_32->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_32->hdr.rc = 0;
      }
      #line 1438 
      err_32 = rvu_mbox_handler_npc_mcam_alloc_and_write_entry(rvu,(struct npc_mcam_alloc_and_write_entry_req *)req,rsp_32);
      #line 1438 
      if (rsp_32 != (struct npc_mcam_alloc_and_write_entry_rsp *)0 && err_32 != 0) 
        #line 1438 
        rsp_32->hdr.rc = err_32;
      #line 1438 
      if (rsp_32 != (struct npc_mcam_alloc_and_write_entry_rsp *)0) 
                                                                    #line 1438 
                                                                    tmp_67 = err_32; else 
                                                                    #line 1438 
                                                                    tmp_67 = -12;
      #line 1438 
      return tmp_67;
    }
    #line 1438 
    case 24588: 
                #line 1438 
    ;
    {
      #line 1438 
      struct npc_get_kex_cfg_rsp *rsp_33;
      #line 1438 
      int err_33;
      #line 1438 
      int tmp_69;
      #line 1438 
      rsp_33 = (struct npc_get_kex_cfg_rsp *)otx2_mbox_alloc_msg(mbox,devid,4784);
      #line 1438 
      if (rsp_33 == (struct npc_get_kex_cfg_rsp *)0) 
                                                     #line 1438 
                                                     return -12;
      #line 1438 
      if (rsp_33 != (struct npc_get_kex_cfg_rsp *)0) {
        #line 1438 
        rsp_33->hdr.id = (unsigned short)24588U;
        #line 1438 
        rsp_33->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_33->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_33->hdr.rc = 0;
      }
      #line 1438 
      err_33 = rvu_mbox_handler_npc_get_kex_cfg(rvu,(struct msg_req *)req,rsp_33);
      #line 1438 
      if (rsp_33 != (struct npc_get_kex_cfg_rsp *)0 && err_33 != 0) 
                                                                    #line 1438 
                                                                    rsp_33->hdr.rc = err_33;
      #line 1438 
      if (rsp_33 != (struct npc_get_kex_cfg_rsp *)0) 
                                                     #line 1438 
                                                     tmp_69 = err_33; else 
                                                                    #line 1438 
                                                                    tmp_69 = -12;
      #line 1438 
      return tmp_69;
    }
    #line 1438 
    case 32768: 
                #line 1438 
    ;
    {
      #line 1438 
      struct nix_lf_alloc_rsp *rsp_34;
      #line 1438 
      int err_34;
      #line 1438 
      int tmp_71;
      #line 1438 
      rsp_34 = (struct nix_lf_alloc_rsp *)otx2_mbox_alloc_msg(mbox,devid,40);
      #line 1438 
      if (rsp_34 == (struct nix_lf_alloc_rsp *)0) 
                                                  #line 1438 
                                                  return -12;
      #line 1438 
      if (rsp_34 != (struct nix_lf_alloc_rsp *)0) {
        #line 1438 
        rsp_34->hdr.id = (unsigned short)32768U;
        #line 1438 
        rsp_34->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_34->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_34->hdr.rc = 0;
      }
      #line 1438 
      err_34 = rvu_mbox_handler_nix_lf_alloc(rvu,(struct nix_lf_alloc_req *)req,rsp_34);
      #line 1438 
      if (rsp_34 != (struct nix_lf_alloc_rsp *)0 && err_34 != 0) 
                                                                 #line 1438 
                                                                 rsp_34->hdr.rc = err_34;
      #line 1438 
      if (rsp_34 != (struct nix_lf_alloc_rsp *)0) 
                                                  #line 1438 
                                                  tmp_71 = err_34; else 
                                                                    #line 1438 
                                                                    tmp_71 = -12;
      #line 1438 
      return tmp_71;
    }
    #line 1438 
    case 32769: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_35;
      #line 1438 
      int err_35;
      #line 1438 
      int tmp_73;
      #line 1438 
      rsp_35 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_35 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_35 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_35->hdr.id = (unsigned short)32769U;
        #line 1438 
        rsp_35->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_35->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_35->hdr.rc = 0;
      }
      #line 1438 
      err_35 = rvu_mbox_handler_nix_lf_free(rvu,(struct msg_req *)req,rsp_35);
      #line 1438 
      if (rsp_35 != (struct msg_rsp *)0 && err_35 != 0) 
                                                        #line 1438 
                                                        rsp_35->hdr.rc = err_35;
      #line 1438 
      if (rsp_35 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_73 = err_35; else 
                                                               #line 1438 
                                                               tmp_73 = -12;
      #line 1438 
      return tmp_73;
    }
    #line 1438 
    case 32770: 
                #line 1438 
    ;
    {
      #line 1438 
      struct nix_aq_enq_rsp *rsp_36;
      #line 1438 
      int err_36;
      #line 1438 
      int tmp_75;
      #line 1438 
      rsp_36 = (struct nix_aq_enq_rsp *)otx2_mbox_alloc_msg(mbox,devid,144);
      #line 1438 
      if (rsp_36 == (struct nix_aq_enq_rsp *)0) 
                                                #line 1438 
                                                return -12;
      #line 1438 
      if (rsp_36 != (struct nix_aq_enq_rsp *)0) {
        #line 1438 
        rsp_36->hdr.id = (unsigned short)32770U;
        #line 1438 
        rsp_36->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_36->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_36->hdr.rc = 0;
      }
      #line 1438 
      err_36 = rvu_mbox_handler_nix_aq_enq(rvu,(struct nix_aq_enq_req *)req,rsp_36);
      #line 1438 
      if (rsp_36 != (struct nix_aq_enq_rsp *)0 && err_36 != 0) 
                                                               #line 1438 
                                                               rsp_36->hdr.rc = err_36;
      #line 1438 
      if (rsp_36 != (struct nix_aq_enq_rsp *)0) 
                                                #line 1438 
                                                tmp_75 = err_36; else 
                                                                   #line 1438 
                                                                   tmp_75 = -12;
      #line 1438 
      return tmp_75;
    }
    #line 1438 
    case 32771: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_37;
      #line 1438 
      int err_37;
      #line 1438 
      int tmp_77;
      #line 1438 
      rsp_37 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_37 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_37 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_37->hdr.id = (unsigned short)32771U;
        #line 1438 
        rsp_37->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_37->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_37->hdr.rc = 0;
      }
      #line 1438 
      err_37 = rvu_mbox_handler_nix_hwctx_disable(rvu,(struct hwctx_disable_req *)req,rsp_37);
      #line 1438 
      if (rsp_37 != (struct msg_rsp *)0 && err_37 != 0) 
                                                        #line 1438 
                                                        rsp_37->hdr.rc = err_37;
      #line 1438 
      if (rsp_37 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_77 = err_37; else 
                                                               #line 1438 
                                                               tmp_77 = -12;
      #line 1438 
      return tmp_77;
    }
    #line 1438 
    case 32772: 
                #line 1438 
    ;
    {
      #line 1438 
      struct nix_txsch_alloc_rsp *rsp_38;
      #line 1438 
      int err_38;
      #line 1438 
      int tmp_79;
      #line 1438 
      rsp_38 = (struct nix_txsch_alloc_rsp *)otx2_mbox_alloc_msg(mbox,devid,2600);
      #line 1438 
      if (rsp_38 == (struct nix_txsch_alloc_rsp *)0) 
                                                     #line 1438 
                                                     return -12;
      #line 1438 
      if (rsp_38 != (struct nix_txsch_alloc_rsp *)0) {
        #line 1438 
        rsp_38->hdr.id = (unsigned short)32772U;
        #line 1438 
        rsp_38->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_38->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_38->hdr.rc = 0;
      }
      #line 1438 
      err_38 = rvu_mbox_handler_nix_txsch_alloc(rvu,(struct nix_txsch_alloc_req *)req,rsp_38);
      #line 1438 
      if (rsp_38 != (struct nix_txsch_alloc_rsp *)0 && err_38 != 0) 
                                                                    #line 1438 
                                                                    rsp_38->hdr.rc = err_38;
      #line 1438 
      if (rsp_38 != (struct nix_txsch_alloc_rsp *)0) 
                                                     #line 1438 
                                                     tmp_79 = err_38; else 
                                                                    #line 1438 
                                                                    tmp_79 = -12;
      #line 1438 
      return tmp_79;
    }
    #line 1438 
    case 32773: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_39;
      #line 1438 
      int err_39;
      #line 1438 
      int tmp_81;
      #line 1438 
      rsp_39 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_39 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_39->hdr.id = (unsigned short)32773U;
        #line 1438 
        rsp_39->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_39->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_39->hdr.rc = 0;
      }
      #line 1438 
      err_39 = rvu_mbox_handler_nix_txsch_free(rvu,(struct nix_txsch_free_req *)req,rsp_39);
      #line 1438 
      if (rsp_39 != (struct msg_rsp *)0 && err_39 != 0) 
                                                        #line 1438 
                                                        rsp_39->hdr.rc = err_39;
      #line 1438 
      if (rsp_39 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_81 = err_39; else 
                                                               #line 1438 
                                                               tmp_81 = -12;
      #line 1438 
      return tmp_81;
    }
    #line 1438 
    case 32774: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_40;
      #line 1438 
      int err_40;
      #line 1438 
      int tmp_83;
      #line 1438 
      rsp_40 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_40 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_40 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_40->hdr.id = (unsigned short)32774U;
        #line 1438 
        rsp_40->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_40->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_40->hdr.rc = 0;
      }
      #line 1438 
      err_40 = rvu_mbox_handler_nix_txschq_cfg(rvu,(struct nix_txschq_config *)req,rsp_40);
      #line 1438 
      if (rsp_40 != (struct msg_rsp *)0 && err_40 != 0) 
                                                        #line 1438 
                                                        rsp_40->hdr.rc = err_40;
      #line 1438 
      if (rsp_40 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_83 = err_40; else 
                                                               #line 1438 
                                                               tmp_83 = -12;
      #line 1438 
      return tmp_83;
    }
    #line 1438 
    case 32775: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_41;
      #line 1438 
      int err_41;
      #line 1438 
      int tmp_85;
      #line 1438 
      rsp_41 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_41 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_41 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_41->hdr.id = (unsigned short)32775U;
        #line 1438 
        rsp_41->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_41->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_41->hdr.rc = 0;
      }
      #line 1438 
      err_41 = rvu_mbox_handler_nix_stats_rst(rvu,(struct msg_req *)req,rsp_41);
      #line 1438 
      if (rsp_41 != (struct msg_rsp *)0 && err_41 != 0) 
                                                        #line 1438 
                                                        rsp_41->hdr.rc = err_41;
      #line 1438 
      if (rsp_41 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_85 = err_41; else 
                                                               #line 1438 
                                                               tmp_85 = -12;
      #line 1438 
      return tmp_85;
    }
    #line 1438 
    case 32776: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_42;
      #line 1438 
      int err_42;
      #line 1438 
      int tmp_87;
      #line 1438 
      rsp_42 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_42 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_42 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_42->hdr.id = (unsigned short)32776U;
        #line 1438 
        rsp_42->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_42->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_42->hdr.rc = 0;
      }
      #line 1438 
      err_42 = rvu_mbox_handler_nix_vtag_cfg(rvu,(struct nix_vtag_config *)req,rsp_42);
      #line 1438 
      if (rsp_42 != (struct msg_rsp *)0 && err_42 != 0) 
                                                        #line 1438 
                                                        rsp_42->hdr.rc = err_42;
      #line 1438 
      if (rsp_42 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_87 = err_42; else 
                                                               #line 1438 
                                                               tmp_87 = -12;
      #line 1438 
      return tmp_87;
    }
    #line 1438 
    case 32777: 
                #line 1438 
    ;
    {
      #line 1438 
      struct nix_rss_flowkey_cfg_rsp *rsp_43;
      #line 1438 
      int err_43;
      #line 1438 
      int tmp_89;
      #line 1438 
      rsp_43 = (struct nix_rss_flowkey_cfg_rsp *)otx2_mbox_alloc_msg(mbox,devid,20);
      #line 1438 
      if (rsp_43 == (struct nix_rss_flowkey_cfg_rsp *)0) 
                                                         #line 1438 
                                                         return -12;
      #line 1438 
      if (rsp_43 != (struct nix_rss_flowkey_cfg_rsp *)0) {
        #line 1438 
        rsp_43->hdr.id = (unsigned short)32777U;
        #line 1438 
        rsp_43->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_43->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_43->hdr.rc = 0;
      }
      #line 1438 
      err_43 = rvu_mbox_handler_nix_rss_flowkey_cfg(rvu,(struct nix_rss_flowkey_cfg *)req,rsp_43);
      #line 1438 
      if (rsp_43 != (struct nix_rss_flowkey_cfg_rsp *)0 && err_43 != 0) 
        #line 1438 
        rsp_43->hdr.rc = err_43;
      #line 1438 
      if (rsp_43 != (struct nix_rss_flowkey_cfg_rsp *)0) 
                                                         #line 1438 
                                                         tmp_89 = err_43; else 
                                                                    #line 1438 
                                                                    tmp_89 = -12;
      #line 1438 
      return tmp_89;
    }
    #line 1438 
    case 32778: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_44;
      #line 1438 
      int err_44;
      #line 1438 
      int tmp_91;
      #line 1438 
      rsp_44 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_44 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_44 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_44->hdr.id = (unsigned short)32778U;
        #line 1438 
        rsp_44->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_44->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_44->hdr.rc = 0;
      }
      #line 1438 
      err_44 = rvu_mbox_handler_nix_set_mac_addr(rvu,(struct nix_set_mac_addr *)req,rsp_44);
      #line 1438 
      if (rsp_44 != (struct msg_rsp *)0 && err_44 != 0) 
                                                        #line 1438 
                                                        rsp_44->hdr.rc = err_44;
      #line 1438 
      if (rsp_44 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_91 = err_44; else 
                                                               #line 1438 
                                                               tmp_91 = -12;
      #line 1438 
      return tmp_91;
    }
    #line 1438 
    case 32779: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_45;
      #line 1438 
      int err_45;
      #line 1438 
      int tmp_93;
      #line 1438 
      rsp_45 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_45 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_45 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_45->hdr.id = (unsigned short)32779U;
        #line 1438 
        rsp_45->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_45->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_45->hdr.rc = 0;
      }
      #line 1438 
      err_45 = rvu_mbox_handler_nix_set_rx_mode(rvu,(struct nix_rx_mode *)req,rsp_45);
      #line 1438 
      if (rsp_45 != (struct msg_rsp *)0 && err_45 != 0) 
                                                        #line 1438 
                                                        rsp_45->hdr.rc = err_45;
      #line 1438 
      if (rsp_45 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_93 = err_45; else 
                                                               #line 1438 
                                                               tmp_93 = -12;
      #line 1438 
      return tmp_93;
    }
    #line 1438 
    case 32780: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_46;
      #line 1438 
      int err_46;
      #line 1438 
      int tmp_95;
      #line 1438 
      rsp_46 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_46 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_46 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_46->hdr.id = (unsigned short)32780U;
        #line 1438 
        rsp_46->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_46->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_46->hdr.rc = 0;
      }
      #line 1438 
      err_46 = rvu_mbox_handler_nix_set_hw_frs(rvu,(struct nix_frs_cfg *)req,rsp_46);
      #line 1438 
      if (rsp_46 != (struct msg_rsp *)0 && err_46 != 0) 
                                                        #line 1438 
                                                        rsp_46->hdr.rc = err_46;
      #line 1438 
      if (rsp_46 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_95 = err_46; else 
                                                               #line 1438 
                                                               tmp_95 = -12;
      #line 1438 
      return tmp_95;
    }
    #line 1438 
    case 32781: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_47;
      #line 1438 
      int err_47;
      #line 1438 
      int tmp_97;
      #line 1438 
      rsp_47 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_47 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_47 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_47->hdr.id = (unsigned short)32781U;
        #line 1438 
        rsp_47->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_47->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_47->hdr.rc = 0;
      }
      #line 1438 
      err_47 = rvu_mbox_handler_nix_lf_start_rx(rvu,(struct msg_req *)req,rsp_47);
      #line 1438 
      if (rsp_47 != (struct msg_rsp *)0 && err_47 != 0) 
                                                        #line 1438 
                                                        rsp_47->hdr.rc = err_47;
      #line 1438 
      if (rsp_47 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_97 = err_47; else 
                                                               #line 1438 
                                                               tmp_97 = -12;
      #line 1438 
      return tmp_97;
    }
    #line 1438 
    case 32782: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_48;
      #line 1438 
      int err_48;
      #line 1438 
      int tmp_99;
      #line 1438 
      rsp_48 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_48 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_48 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_48->hdr.id = (unsigned short)32782U;
        #line 1438 
        rsp_48->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_48->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_48->hdr.rc = 0;
      }
      #line 1438 
      err_48 = rvu_mbox_handler_nix_lf_stop_rx(rvu,(struct msg_req *)req,rsp_48);
      #line 1438 
      if (rsp_48 != (struct msg_rsp *)0 && err_48 != 0) 
                                                        #line 1438 
                                                        rsp_48->hdr.rc = err_48;
      #line 1438 
      if (rsp_48 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_99 = err_48; else 
                                                               #line 1438 
                                                               tmp_99 = -12;
      #line 1438 
      return tmp_99;
    }
    #line 1438 
    case 32783: 
                #line 1438 
    ;
    {
      #line 1438 
      struct nix_mark_format_cfg_rsp *rsp_49;
      #line 1438 
      int err_49;
      #line 1438 
      int tmp_101;
      #line 1438 
      rsp_49 = (struct nix_mark_format_cfg_rsp *)otx2_mbox_alloc_msg(mbox,devid,20);
      #line 1438 
      if (rsp_49 == (struct nix_mark_format_cfg_rsp *)0) 
                                                         #line 1438 
                                                         return -12;
      #line 1438 
      if (rsp_49 != (struct nix_mark_format_cfg_rsp *)0) {
        #line 1438 
        rsp_49->hdr.id = (unsigned short)32783U;
        #line 1438 
        rsp_49->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_49->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_49->hdr.rc = 0;
      }
      #line 1438 
      err_49 = rvu_mbox_handler_nix_mark_format_cfg(rvu,(struct nix_mark_format_cfg *)req,rsp_49);
      #line 1438 
      if (rsp_49 != (struct nix_mark_format_cfg_rsp *)0 && err_49 != 0) 
        #line 1438 
        rsp_49->hdr.rc = err_49;
      #line 1438 
      if (rsp_49 != (struct nix_mark_format_cfg_rsp *)0) 
                                                         #line 1438 
                                                         tmp_101 = err_49; else 
                                                                    #line 1438 
                                                                    tmp_101 = -12;
      #line 1438 
      return tmp_101;
    }
    #line 1438 
    case 32784: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_50;
      #line 1438 
      int err_50;
      #line 1438 
      int tmp_103;
      #line 1438 
      rsp_50 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_50 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_50 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_50->hdr.id = (unsigned short)32784U;
        #line 1438 
        rsp_50->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_50->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_50->hdr.rc = 0;
      }
      #line 1438 
      err_50 = rvu_mbox_handler_nix_set_rx_cfg(rvu,(struct nix_rx_cfg *)req,rsp_50);
      #line 1438 
      if (rsp_50 != (struct msg_rsp *)0 && err_50 != 0) 
                                                        #line 1438 
                                                        rsp_50->hdr.rc = err_50;
      #line 1438 
      if (rsp_50 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_103 = err_50; else 
                                                                #line 1438 
                                                                tmp_103 = -12;
      #line 1438 
      return tmp_103;
    }
    #line 1438 
    case 32785: 
                #line 1438 
    ;
    {
      #line 1438 
      struct nix_lso_format_cfg_rsp *rsp_51;
      #line 1438 
      int err_51;
      #line 1438 
      int tmp_105;
      #line 1438 
      rsp_51 = (struct nix_lso_format_cfg_rsp *)otx2_mbox_alloc_msg(mbox,devid,20);
      #line 1438 
      if (rsp_51 == (struct nix_lso_format_cfg_rsp *)0) 
                                                        #line 1438 
                                                        return -12;
      #line 1438 
      if (rsp_51 != (struct nix_lso_format_cfg_rsp *)0) {
        #line 1438 
        rsp_51->hdr.id = (unsigned short)32785U;
        #line 1438 
        rsp_51->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_51->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_51->hdr.rc = 0;
      }
      #line 1438 
      err_51 = rvu_mbox_handler_nix_lso_format_cfg(rvu,(struct nix_lso_format_cfg *)req,rsp_51);
      #line 1438 
      if (rsp_51 != (struct nix_lso_format_cfg_rsp *)0 && err_51 != 0) 
        #line 1438 
        rsp_51->hdr.rc = err_51;
      #line 1438 
      if (rsp_51 != (struct nix_lso_format_cfg_rsp *)0) 
                                                        #line 1438 
                                                        tmp_105 = err_51; else 
                                                                    #line 1438 
                                                                    tmp_105 = -12;
      #line 1438 
      return tmp_105;
    }
    #line 1438 
    case 32786: 
                #line 1438 
    ;
    {
      #line 1438 
      struct msg_rsp *rsp_52;
      #line 1438 
      int err_52;
      #line 1438 
      int tmp_107;
      #line 1438 
      rsp_52 = (struct msg_rsp *)otx2_mbox_alloc_msg(mbox,devid,16);
      #line 1438 
      if (rsp_52 == (struct msg_rsp *)0) 
                                         #line 1438 
                                         return -12;
      #line 1438 
      if (rsp_52 != (struct msg_rsp *)0) {
        #line 1438 
        rsp_52->hdr.id = (unsigned short)32786U;
        #line 1438 
        rsp_52->hdr.sig = (unsigned short)48879U;
        #line 1438 
        rsp_52->hdr.pcifunc = req->pcifunc;
        #line 1438 
        rsp_52->hdr.rc = 0;
      }
      #line 1438 
      err_52 = rvu_mbox_handler_nix_rxvlan_alloc(rvu,(struct msg_req *)req,rsp_52);
      #line 1438 
      if (rsp_52 != (struct msg_rsp *)0 && err_52 != 0) 
                                                        #line 1438 
                                                        rsp_52->hdr.rc = err_52;
      #line 1438 
      if (rsp_52 != (struct msg_rsp *)0) 
                                         #line 1438 
                                         tmp_107 = err_52; else 
                                                                #line 1438 
                                                                tmp_107 = -12;
      #line 1438 
      return tmp_107;
    }
    #line 1441 
    bad_message: 
                 #line 1441 
    ;
    #line 1442 
    default: 
             #line 1442 
    ;
    #line 1443 
    otx2_reply_invalid_msg(mbox,devid,(unsigned short)((int)req->pcifunc),(unsigned short)((int)req->id));
    #line 1444 
    return -19;
  }
}

#line 1448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void __rvu_mbox_handler(struct rvu_work *mwork, int type)
{
  #line 1451 
  int offset;
  #line 1451 
  int err;
  #line 1451 
  int id;
  #line 1451 
  int devid;
  #line 1452 
  struct otx2_mbox_dev *mdev;
  #line 1453 
  struct mbox_hdr *req_hdr;
  #line 1454 
  struct mbox_msghdr *msg;
  #line 1455 
  struct mbox_wq_info *mw;
  #line 1456 
  struct otx2_mbox *mbox;
  #line 1450 
  struct rvu *rvu = mwork->rvu;
  #line 1458 
  switch (type) {
    #line 1459 
    case 1: 
            #line 1459 
    ;
    #line 1460 
    mw = & rvu->afpf_wq_info;
    #line 1461 
    break;
    #line 1462 
    case 0: 
            #line 1462 
    ;
    #line 1463 
    mw = & rvu->afvf_wq_info;
    #line 1464 
    break;
    #line 1465 
    default: 
             #line 1465 
    ;
    #line 1466 
    return;
  }
  #line 1469 
  devid = (int)((mwork - mw->mbox_wrk) / 96L);
  #line 1470 
  mbox = & mw->mbox;
  #line 1471 
  mdev = mbox->dev + (unsigned long)devid;
  #line 1474 
  req_hdr = (struct mbox_hdr *)(mdev->mbase + mbox->rx_start);
  #line 1475 
  if ((mw->mbox_wrk + (unsigned long)devid)->num_msgs == 0) 
                                                            #line 1476 
                                                            return;
  #line 1478 
  offset = (int)(mbox->rx_start + (u64)16U);
  #line 1480 
  id = 0;
  #line 1480 
  while ((mw->mbox_wrk + (unsigned long)devid)->num_msgs > id) {
    #line 1481 
    msg = (struct mbox_msghdr *)(mdev->mbase + (unsigned long)offset);
    #line 1484 
    switch (type) {
      #line 1485 
      case 1: 
              #line 1485 
      ;
      #line 1486 
      msg->pcifunc = (unsigned short)((unsigned int)msg->pcifunc & 1023U);
      #line 1488 
      msg->pcifunc = (unsigned short)((int)msg->pcifunc | (devid << 10));
      #line 1489 
      break;
      #line 1490 
      case 0: 
              #line 1490 
      ;
      #line 1491 
      msg->pcifunc = (unsigned short)((unsigned int)msg->pcifunc & 64512U);
      #line 1493 
      msg->pcifunc = (unsigned short)((unsigned int)msg->pcifunc | ((unsigned int)devid + 1U));
      #line 1494 
      break;
    }
    #line 1497 
    err = rvu_process_mbox_msg(mbox,devid,msg);
    #line 1498 
    if (err == 0) {
      #line 1499 
      offset = (int)(mbox->rx_start + (u64)msg->next_msgoff);
      #line 1500 
      goto __Cont;
    }
    #line 1503 
    if (((int)msg->pcifunc & 1023) != 0) {
      #line 1504 
      ;
      #line 1504 
      ;
      #line 1504 
      ;
      #line 1504 
      ;
      #line 1504 
      _dev_warn(rvu->dev,(char *)"Error %d when processing message %s (0x%x) from PF%d:VF%d\n",err,otx2_mbox_id2name((unsigned short)((int)msg->id)),(int)msg->id,rvu_get_pf((unsigned short)((int)msg->pcifunc)),((int)msg->pcifunc & 1023) + -1);
    }
    else {
      #line 1509 
      ;
      #line 1509 
      ;
      #line 1509 
      ;
      #line 1509 
      ;
      #line 1509 
      _dev_warn(rvu->dev,(char *)"Error %d when processing message %s (0x%x) from PF%d\n",err,otx2_mbox_id2name((unsigned short)((int)msg->id)),(int)msg->id,devid);
    }
    #line 1480 
    __Cont: 
            #line 1480 
    id ++;
  }
  #line 1513 
  (mw->mbox_wrk + (unsigned long)devid)->num_msgs = 0;
  #line 1516 
  otx2_mbox_msg_send(mbox,devid);
  #line 1517 
  return;
}

#line 1519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
__inline static void rvu_afpf_mbox_handler(struct work_struct *work)
{
  #line 1521 
  void *__mptr;
  #line 1521 
  __mptr = (void *)work;
  #line 1521 
  struct rvu_work *mwork = ((struct rvu_work *)__mptr);
  #line 1523 
  __rvu_mbox_handler(mwork,1);
  #line 1524 
  return;
}

#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
__inline static void rvu_afvf_mbox_handler(struct work_struct *work)
{
  #line 1528 
  void *__mptr;
  #line 1528 
  __mptr = (void *)work;
  #line 1528 
  struct rvu_work *mwork = ((struct rvu_work *)__mptr);
  #line 1530 
  __rvu_mbox_handler(mwork,0);
  #line 1531 
  return;
}

#line 1533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void __rvu_mbox_up_handler(struct rvu_work *mwork, int type)
{
  #line 1536 
  struct otx2_mbox_dev *mdev;
  #line 1537 
  struct mbox_hdr *rsp_hdr;
  #line 1538 
  struct mbox_msghdr *msg;
  #line 1539 
  struct mbox_wq_info *mw;
  #line 1540 
  struct otx2_mbox *mbox;
  #line 1541 
  int offset;
  #line 1541 
  int id;
  #line 1541 
  int devid;
  #line 1535 
  struct rvu *rvu = mwork->rvu;
  #line 1543 
  switch (type) {
    #line 1544 
    case 1: 
            #line 1544 
    ;
    #line 1545 
    mw = & rvu->afpf_wq_info;
    #line 1546 
    break;
    #line 1547 
    case 0: 
            #line 1547 
    ;
    #line 1548 
    mw = & rvu->afvf_wq_info;
    #line 1549 
    break;
    #line 1550 
    default: 
             #line 1550 
    ;
    #line 1551 
    return;
  }
  #line 1554 
  devid = (int)((mwork - mw->mbox_wrk_up) / 96L);
  #line 1555 
  mbox = & mw->mbox_up;
  #line 1556 
  mdev = mbox->dev + (unsigned long)devid;
  #line 1558 
  rsp_hdr = (struct mbox_hdr *)(mdev->mbase + mbox->rx_start);
  #line 1559 
  if ((mw->mbox_wrk_up + (unsigned long)devid)->up_num_msgs == 0) {
    #line 1560 
    _dev_warn(rvu->dev,(char *)"mbox up handler: num_msgs = 0\n");
    #line 1561 
    return;
  }
  #line 1564 
  offset = (int)(mbox->rx_start + (u64)16U);
  #line 1566 
  id = 0;
  #line 1566 
  while ((mw->mbox_wrk_up + (unsigned long)devid)->up_num_msgs > id) {
    #line 1567 
    msg = (struct mbox_msghdr *)(mdev->mbase + (unsigned long)offset);
    #line 1569 
    if ((unsigned int)msg->id == 65535U) {
      #line 1570 
      _dev_err(rvu->dev,(char *)"Mbox msg with unknown ID 0x%x\n",(int)msg->id);
      #line 1572 
      goto end;
    }
    #line 1575 
    if ((unsigned int)msg->sig != 48879U) {
      #line 1576 
      _dev_err(rvu->dev,(char *)"Mbox msg with wrong signature %x, ID 0x%x\n",(int)msg->sig,(int)msg->id);
      #line 1579 
      goto end;
    }
    #line 1582 
    switch ((int)msg->id) {
      #line 1583 
      case 3072: 
                 #line 1583 
      ;
      #line 1584 
      break;
      #line 1585 
      default: 
               #line 1585 
      ;
      #line 1586 
      if (msg->rc != 0) 
                        #line 1587 
                        _dev_err(rvu->dev,(char *)"Mbox msg response has err %d, ID 0x%x\n",msg->rc,(int)msg->id);
      #line 1590 
      break;
    }
    #line 1592 
    end: 
         #line 1592 
    ;
    #line 1593 
    offset = (int)(mbox->rx_start + (u64)msg->next_msgoff);
    #line 1594 
    mdev->msgs_acked = (u16)((int)mdev->msgs_acked + 1);
    #line 1566 
    id ++;
  }
  #line 1596 
  (mw->mbox_wrk_up + (unsigned long)devid)->up_num_msgs = 0;
  #line 1598 
  otx2_mbox_reset(mbox,devid);
  #line 1599 
  return;
}

#line 1601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
__inline static void rvu_afpf_mbox_up_handler(struct work_struct *work)
{
  #line 1603 
  void *__mptr;
  #line 1603 
  __mptr = (void *)work;
  #line 1603 
  struct rvu_work *mwork = ((struct rvu_work *)__mptr);
  #line 1605 
  __rvu_mbox_up_handler(mwork,1);
  #line 1606 
  return;
}

#line 1608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
__inline static void rvu_afvf_mbox_up_handler(struct work_struct *work)
{
  #line 1610 
  void *__mptr;
  #line 1610 
  __mptr = (void *)work;
  #line 1610 
  struct rvu_work *mwork = ((struct rvu_work *)__mptr);
  #line 1612 
  __rvu_mbox_up_handler(mwork,0);
  #line 1613 
  return;
}

#line 1615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_mbox_init(struct rvu *rvu, struct mbox_wq_info *mw, int type, int num, void (*mbox_handler)(struct work_struct *), void (*mbox_up_handler)(struct work_struct *))
{
  #line 1620 
  void *reg_base;
  #line 1621 
  int err;
  #line 1621 
  int i;
  #line 1621 
  int dir;
  #line 1621 
  int dir_up;
  #line 1622 
  struct rvu_work *mwork;
  #line 1623 
  char *name;
  #line 1624 
  u64 bar4_addr;
  #line 1620 
  void *hwbase = (void *)0;
  #line 1626 
  switch (type) {
    #line 1627 
    case 1: 
            #line 1627 
    ;
    #line 1628 
    name = (char *)"rvu_afpf_mailbox";
    #line 1629 
    bar4_addr = rvu_read64(rvu,0ULL,64ULL);
    #line 1630 
    dir = 0;
    #line 1631 
    dir_up = 4;
    #line 1632 
    reg_base = rvu->afreg_base;
    #line 1633 
    break;
    #line 1634 
    case 0: 
            #line 1634 
    ;
    #line 1635 
    name = (char *)"rvu_afvf_mailbox";
    #line 1636 
    bar4_addr = rvupf_read64(rvu,16ULL);
    #line 1637 
    dir = 2;
    #line 1638 
    dir_up = 6;
    #line 1639 
    reg_base = rvu->pfreg_base;
    #line 1640 
    break;
    #line 1641 
    default: 
             #line 1641 
    ;
    #line 1642 
    return -22;
  }
  #line 1645 
  mw->mbox_wq = alloc_workqueue(name,26U,num);
  #line 1648 
  if (mw->mbox_wq == (struct workqueue_struct *)0) 
                                                   #line 1649 
                                                   return -12;
  #line 1651 
  mw->mbox_wrk = (struct rvu_work *)cif_devm_kcalloc_0(rvu->dev,(unsigned long)num,96UL,3264U);
  #line 1653 
  if (mw->mbox_wrk == (struct rvu_work *)0) {
    #line 1654 
    err = -12;
    #line 1655 
    goto exit;
  }
  #line 1658 
  mw->mbox_wrk_up = (struct rvu_work *)cif_devm_kcalloc_0(rvu->dev,(unsigned long)num,96UL,3264U);
  #line 1660 
  if (mw->mbox_wrk_up == (struct rvu_work *)0) {
    #line 1661 
    err = -12;
    #line 1662 
    goto exit;
  }
  #line 1669 
  hwbase = ioremap_wc(bar4_addr,(unsigned long)(num * 65536));
  #line 1670 
  if (hwbase == (void *)0) {
    #line 1671 
    _dev_err(rvu->dev,(char *)"Unable to map mailbox region\n");
    #line 1672 
    err = -12;
    #line 1673 
    goto exit;
  }
  #line 1676 
  err = otx2_mbox_init(& mw->mbox,hwbase,rvu->pdev,reg_base,dir,num);
  #line 1677 
  if (err != 0) 
                #line 1678 
                goto exit;
  #line 1680 
  err = otx2_mbox_init(& mw->mbox_up,hwbase,rvu->pdev,reg_base,dir_up,num);
  #line 1682 
  if (err != 0) 
                #line 1683 
                goto exit;
  #line 1685 
  i = 0;
  #line 1685 
  while (i < num) {
    #line 1686 
    mwork = mw->mbox_wrk + (unsigned long)i;
    #line 1687 
    mwork->rvu = rvu;
    {
      #line 1688 
      struct lock_class_key __key;
      #line 1688 
      __init_work(& mwork->work,0);
      #line 1688 
      atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
      #line 1688 
      mwork->work.data = __constr_expr_34;
      #line 1688 
      lockdep_init_map(& mwork->work.lockdep_map,(char *)"(work_completion)",& __key,0);
      #line 1688 
      INIT_LIST_HEAD_1(& mwork->work.entry);
      #line 1688 
      mwork->work.func = mbox_handler;
    }
    #line 1690 
    mwork = mw->mbox_wrk_up + (unsigned long)i;
    #line 1691 
    mwork->rvu = rvu;
    {
      #line 1692 
      struct lock_class_key __key_0;
      #line 1692 
      __init_work(& mwork->work,0);
      #line 1692 
      atomic_long_t __constr_expr_35 = {.counter = 137438953408LL};
      #line 1692 
      mwork->work.data = __constr_expr_35;
      #line 1692 
      lockdep_init_map(& mwork->work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
      #line 1692 
      INIT_LIST_HEAD_1(& mwork->work.entry);
      #line 1692 
      mwork->work.func = mbox_up_handler;
    }
    #line 1685 
    i ++;
  }
  #line 1695 
  return 0;
  #line 1696 
  exit: 
        #line 1696 
  ;
  #line 1697 
  if (hwbase != (void *)0) 
                           #line 1698 
                           iounmap(hwbase);
  #line 1699 
  destroy_workqueue(mw->mbox_wq);
  #line 1700 
  return err;
}

#line 1703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_mbox_destroy(struct mbox_wq_info *mw)
{
  #line 1705 
  if (mw->mbox_wq != (struct workqueue_struct *)0) {
    #line 1706 
    flush_workqueue(mw->mbox_wq);
    #line 1707 
    destroy_workqueue(mw->mbox_wq);
    #line 1708 
    mw->mbox_wq = (struct workqueue_struct *)0;
  }
  #line 1711 
  if (mw->mbox.hwbase != (void *)0) 
                                    #line 1712 
                                    iounmap(mw->mbox.hwbase);
  #line 1714 
  otx2_mbox_destroy(& mw->mbox);
  #line 1715 
  otx2_mbox_destroy(& mw->mbox_up);
  #line 1716 
  return;
}

#line 1718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_queue_work(struct mbox_wq_info *mw, int first, int mdevs, u64 intr)
{
  #line 1721 
  struct otx2_mbox_dev *mdev;
  #line 1722 
  struct otx2_mbox *mbox;
  #line 1723 
  struct mbox_hdr *hdr;
  #line 1724 
  int i;
  #line 1726 
  i = first;
  #line 1726 
  while (i < mdevs) {
    #line 1728 
    if (((intr >> (i - first)) & 1ULL) == 0ULL) 
                                                #line 1729 
                                                goto __Cont;
    #line 1731 
    mbox = & mw->mbox;
    #line 1732 
    mdev = mbox->dev + (unsigned long)i;
    #line 1733 
    hdr = (struct mbox_hdr *)(mdev->mbase + mbox->rx_start);
    #line 1743 
    if ((unsigned int)hdr->num_msgs != 0U) {
      #line 1744 
      (mw->mbox_wrk + (unsigned long)i)->num_msgs = (int)hdr->num_msgs;
      #line 1745 
      hdr->num_msgs = (unsigned short)0U;
      #line 1746 
      cif_queue_work_1(mw->mbox_wq,& (mw->mbox_wrk + (unsigned long)i)->work);
    }
    #line 1748 
    mbox = & mw->mbox_up;
    #line 1749 
    mdev = mbox->dev + (unsigned long)i;
    #line 1750 
    hdr = (struct mbox_hdr *)(mdev->mbase + mbox->rx_start);
    #line 1751 
    if ((unsigned int)hdr->num_msgs != 0U) {
      #line 1752 
      (mw->mbox_wrk_up + (unsigned long)i)->up_num_msgs = (int)hdr->num_msgs;
      #line 1753 
      hdr->num_msgs = (unsigned short)0U;
      #line 1754 
      cif_queue_work_1(mw->mbox_wq,& (mw->mbox_wrk_up + (unsigned long)i)->work);
    }
    #line 1726 
    __Cont: 
            #line 1726 
    i ++;
  }
  #line 1757 
  return;
}

#line 1759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static irqreturn_t rvu_mbox_intr_handler(int irq, void *rvu_irq)
{
  #line 1763 
  u64 intr;
  #line 1761 
  struct rvu *rvu = (struct rvu *)rvu_irq;
  #line 1762 
  int vfs = rvu->vfs;
  #line 1765 
  intr = rvu_read64(rvu,0ULL,10368ULL);
  #line 1767 
  rvu_write64(rvu,0ULL,10368ULL,intr);
  #line 1768 
  ldv_inline_asm();
  #line 1772 
  rvu_queue_work(& rvu->afpf_wq_info,0,(int)(rvu->hw)->total_pfs,intr);
  #line 1775 
  if (vfs > 64) {
    #line 1776 
    intr = rvupf_read64(rvu,2184ULL);
    #line 1777 
    rvupf_write64(rvu,2184ULL,intr);
    #line 1779 
    rvu_queue_work(& rvu->afvf_wq_info,64,vfs,intr);
    #line 1780 
    vfs += -64;
  }
  #line 1783 
  intr = rvupf_read64(rvu,2176ULL);
  #line 1784 
  rvupf_write64(rvu,2176ULL,intr);
  #line 1786 
  rvu_queue_work(& rvu->afvf_wq_info,0,vfs,intr);
  #line 1788 
  return IRQ_HANDLED;
}

#line 1791  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_enable_mbox_intr(struct rvu *rvu)
{
  #line 1796 
  unsigned long long tmp;
  #line 1800 
  unsigned long long tmp_0;
  #line 1793 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 1796 
  if ((unsigned int)hw->total_pfs <= 63U) 
                                          #line 1796 
                                          tmp = (1ULL << (int)hw->total_pfs) + 18446744073709551615ULL; else 
                                                                    #line 1796 
                                                                    tmp = 18446744073709551615ULL;
  #line 1796 
  ;
  #line 1796 
  rvu_write64(rvu,0ULL,10368ULL,tmp);
  #line 1800 
  if ((unsigned int)hw->total_pfs <= 63U) 
                                          #line 1800 
                                          tmp_0 = ~ (18446744073709551615ULL << (int)hw->total_pfs) & 18446744073709551614ULL; else 
                                                                    #line 1800 
                                                                    tmp_0 = 18446744073709551614ULL;
  #line 1800 
  ;
  #line 1800 
  rvu_write64(rvu,0ULL,10384ULL,tmp_0);
  #line 1802 
  return;
}

#line 1804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_blklf_teardown(struct rvu *rvu, u16 pcifunc, u8 blkaddr)
{
  #line 1806 
  struct rvu_block *block;
  #line 1807 
  int slot;
  #line 1807 
  int lf;
  #line 1807 
  int num_lfs;
  #line 1808 
  int err;
  #line 1810 
  block = & (rvu->hw)->block[(int)blkaddr];
  #line 1811 
  ;
  #line 1811 
  num_lfs = (int)rvu_get_rsrc_mapcount(rvu_get_pfvf(rvu,(int)pcifunc),
                              (int)block->type);
  #line 1813 
  if (num_lfs == 0) 
                    #line 1814 
                    return;
  #line 1815 
  slot = 0;
  #line 1815 
  while (slot < num_lfs) {
    #line 1816 
    lf = rvu_get_lf(rvu,block,(unsigned short)((int)pcifunc),(unsigned short)((int)((unsigned short)slot)));
    #line 1817 
    if (lf < 0) 
                #line 1818 
                goto __Cont;
    #line 1821 
    if ((unsigned int)block->addr == 4U) 
                                         #line 1822 
                                         rvu_nix_lf_teardown(rvu,(unsigned short)((int)pcifunc),(int)block->addr,lf);
    else 
      #line 1823 
      if ((unsigned int)block->addr == 3U) 
                                           #line 1824 
                                           rvu_npa_lf_teardown(rvu,(unsigned short)((int)pcifunc),lf);
    #line 1826 
    err = rvu_lf_reset(rvu,block,lf);
    #line 1827 
    if (err != 0) 
                  #line 1828 
                  _dev_err(rvu->dev,(char *)"Failed to reset blkaddr %d LF%d\n",(int)block->addr,lf);
    #line 1815 
    __Cont: 
            #line 1815 
    slot ++;
  }
  #line 1830 
  return;
}

#line 1834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void __rvu_flr_handler(struct rvu *rvu, u16 pcifunc)
{
  #line 1836 
  cif_mutex_lock_flr_lock_of_rvu(& rvu->flr_lock);
  #line 1842 
  rvu_blklf_teardown(rvu,(unsigned short)((int)pcifunc),(unsigned char)4);
  #line 1843 
  rvu_blklf_teardown(rvu,(unsigned short)((int)pcifunc),(unsigned char)10);
  #line 1844 
  rvu_blklf_teardown(rvu,(unsigned short)((int)pcifunc),(unsigned char)9);
  #line 1845 
  rvu_blklf_teardown(rvu,(unsigned short)((int)pcifunc),(unsigned char)8);
  #line 1846 
  rvu_blklf_teardown(rvu,(unsigned short)((int)pcifunc),(unsigned char)7);
  #line 1847 
  rvu_blklf_teardown(rvu,(unsigned short)((int)pcifunc),(unsigned char)3);
  #line 1848 
  rvu_detach_rsrcs(rvu,(struct rsrc_detach *)0,(unsigned short)((int)pcifunc));
  #line 1849 
  cif_mutex_unlock_flr_lock_of_rvu(& rvu->flr_lock);
  #line 1850 
  return;
}

#line 1852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_afvf_flr_handler(struct rvu *rvu, int vf)
{
  #line 1854 
  int reg = 0;
  #line 1857 
  __rvu_flr_handler(rvu,(unsigned short)((int)((unsigned int)((unsigned short)vf) + 1U)));
  #line 1859 
  if (vf > 63) {
    #line 1860 
    reg = 1;
    #line 1861 
    vf += -64;
  }
  #line 1865 
  rvupf_write64(rvu,(unsigned long long)((reg << 3) | 2080),1ULL << vf);
  #line 1866 
  rvupf_write64(rvu,(unsigned long long)((reg << 3) | 2368),1ULL << vf);
  #line 1867 
  return;
}

#line 1869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_flr_handler(struct work_struct *work)
{
  #line 1871 
  void *__mptr;
  #line 1873 
  u16 pcifunc;
  #line 1873 
  u16 numvfs;
  #line 1873 
  u16 vf;
  #line 1874 
  u64 cfg;
  #line 1875 
  int pf;
  #line 1871 
  __mptr = (void *)work;
  #line 1871 
  struct rvu_work *flrwork = ((struct rvu_work *)__mptr);
  #line 1872 
  struct rvu *rvu = flrwork->rvu;
  #line 1877 
  pf = (int)((flrwork - rvu->flr_wrk) / 96L);
  #line 1878 
  if ((int)(rvu->hw)->total_pfs <= pf) {
    #line 1879 
    rvu_afvf_flr_handler(rvu,pf - (int)(rvu->hw)->total_pfs);
    #line 1880 
    return;
  }
  #line 1883 
  cfg = rvu_read64(rvu,0ULL,(unsigned long long)((pf << 16) | 134217984));
  #line 1884 
  numvfs = (unsigned short)((unsigned int)((unsigned short)(cfg >> 12)) & 255U);
  #line 1885 
  pcifunc = (unsigned short)((int)((unsigned short)pf) << 10U);
  #line 1887 
  vf = (unsigned short)0U;
  #line 1887 
  while ((int)vf < (int)numvfs) {
    #line 1888 
    __rvu_flr_handler(rvu,(unsigned short)((int)((unsigned short)(((unsigned int)vf + 1U) | (unsigned int)pcifunc))));
    #line 1887 
    vf = (u16)((int)vf + 1);
  }
  #line 1890 
  __rvu_flr_handler(rvu,(unsigned short)((int)pcifunc));
  #line 1893 
  rvu_write64(rvu,0ULL,10256ULL,1ULL << pf);
  #line 1896 
  rvu_write64(rvu,0ULL,10416ULL,1ULL << pf);
  #line 1897 
  return;
}

#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_afvf_queue_flr_work(struct rvu *rvu, int start_vf, int numvfs)
{
  #line 1901 
  int dev;
  #line 1901 
  int vf;
  #line 1902 
  u64 intr;
  #line 1901 
  int reg = 0;
  #line 1904 
  if (start_vf > 63) 
                     #line 1905 
                     reg = 1;
  #line 1907 
  intr = rvupf_read64(rvu,(unsigned long long)((reg << 3) | 2304));
  #line 1908 
  if (intr == 0ULL) 
                    #line 1909 
                    return;
  #line 1911 
  vf = 0;
  #line 1911 
  while (vf < numvfs) {
    #line 1912 
    if (((intr >> vf) & 1ULL) == 0ULL) 
                                       #line 1913 
                                       goto __Cont;
    #line 1914 
    dev = (vf + start_vf) + (int)(rvu->hw)->total_pfs;
    #line 1915 
    cif_queue_work_1(rvu->flr_wq,& (rvu->flr_wrk + (unsigned long)dev)->work);
    #line 1917 
    rvupf_write64(rvu,(unsigned long long)((reg << 3) | 2304),1ULL << vf);
    #line 1918 
    rvupf_write64(rvu,(unsigned long long)((reg << 3) | 2400),1ULL << vf);
    #line 1911 
    __Cont: 
            #line 1911 
    vf ++;
  }
  #line 1920 
  return;
}

#line 1922  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static irqreturn_t rvu_flr_intr_handler(int irq, void *rvu_irq)
{
  #line 1925 
  u64 intr;
  #line 1926 
  u8 pf;
  #line 1924 
  struct rvu *rvu = (struct rvu *)rvu_irq;
  #line 1928 
  intr = rvu_read64(rvu,0ULL,10400ULL);
  #line 1929 
  if (intr == 0ULL) 
                    #line 1930 
                    goto afvf_flr;
  #line 1932 
  pf = (unsigned char)0U;
  #line 1932 
  while ((int)(rvu->hw)->total_pfs > (int)pf) {
    #line 1933 
    if (((intr >> (int)pf) & 1ULL) != 0ULL) {
      #line 1935 
      cif_queue_work_1(rvu->flr_wq,& (rvu->flr_wrk + (unsigned long)pf)->work);
      #line 1937 
      rvu_write64(rvu,0ULL,10400ULL,1ULL << (int)pf);
      #line 1940 
      rvu_write64(rvu,0ULL,10424ULL,1ULL << (int)pf);
    }
    #line 1932 
    pf = (u8)((int)pf + 1);
  }
  #line 1945 
  afvf_flr: 
            #line 1945 
  ;
  #line 1946 
  rvu_afvf_queue_flr_work(rvu,0,64);
  #line 1947 
  if (rvu->vfs > 64) 
                     #line 1948 
                     rvu_afvf_queue_flr_work(rvu,64,rvu->vfs + -64);
  #line 1950 
  return IRQ_HANDLED;
}

#line 1953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_me_handle_vfset(struct rvu *rvu, int idx, u64 intr)
{
  #line 1955 
  int vf;
  #line 1960 
  vf = 0;
  #line 1960 
  while (vf <= 63) {
    #line 1961 
    if (((intr >> vf) & 1ULL) != 0ULL) {
      #line 1963 
      rvupf_write64(rvu,(unsigned long long)((idx << 3) | 2080),1ULL << vf);
      #line 1965 
      rvupf_write64(rvu,(unsigned long long)((idx << 3) | 2432),1ULL << vf);
    }
    #line 1960 
    vf ++;
  }
  #line 1967 
  return;
}

#line 1971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static irqreturn_t rvu_me_vf_intr_handler(int irq, void *rvu_irq)
{
  #line 1974 
  int vfset;
  #line 1975 
  u64 intr;
  #line 1973 
  struct rvu *rvu = (struct rvu *)rvu_irq;
  #line 1977 
  intr = rvu_read64(rvu,0ULL,10432ULL);
  #line 1979 
  vfset = 0;
  #line 1979 
  while (vfset <= 1) {
    #line 1980 
    intr = rvupf_read64(rvu,(unsigned long long)((vfset << 3) | 2432));
    #line 1981 
    if (intr != 0ULL) 
                      #line 1982 
                      rvu_me_handle_vfset(rvu,vfset,intr);
    #line 1979 
    vfset ++;
  }
  #line 1985 
  return IRQ_HANDLED;
}

#line 1989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static irqreturn_t rvu_me_pf_intr_handler(int irq, void *rvu_irq)
{
  #line 1992 
  u64 intr;
  #line 1993 
  u8 pf;
  #line 1991 
  struct rvu *rvu = (struct rvu *)rvu_irq;
  #line 1995 
  intr = rvu_read64(rvu,0ULL,10432ULL);
  #line 2000 
  pf = (unsigned char)0U;
  #line 2000 
  while ((int)(rvu->hw)->total_pfs > (int)pf) {
    #line 2001 
    if (((intr >> (int)pf) & 1ULL) != 0ULL) {
      #line 2003 
      rvu_write64(rvu,0ULL,10256ULL,1ULL << (int)pf);
      #line 2006 
      rvu_write64(rvu,0ULL,10432ULL,1ULL << (int)pf);
    }
    #line 2000 
    pf = (u8)((int)pf + 1);
  }
  #line 2011 
  return IRQ_HANDLED;
}

#line 2014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_unregister_interrupts(struct rvu *rvu)
{
  #line 2016 
  int irq;
  #line 2019 
  unsigned long long tmp;
  #line 2023 
  unsigned long long tmp_0;
  #line 2027 
  unsigned long long tmp_1;
  #line 2019 
  if ((unsigned int)(rvu->hw)->total_pfs <= 63U) 
                                                 #line 2019 
                                                 tmp = ~ (18446744073709551615ULL << (int)(rvu->hw)->total_pfs) & 18446744073709551614ULL; else 
                                                                    #line 2019 
                                                                    tmp = 18446744073709551614ULL;
  #line 2019 
  ;
  #line 2019 
  rvu_write64(rvu,0ULL,10392ULL,tmp);
  #line 2023 
  if ((unsigned int)(rvu->hw)->total_pfs <= 63U) 
                                                 #line 2023 
                                                 tmp_0 = ~ (18446744073709551615ULL << (int)(rvu->hw)->total_pfs) & 18446744073709551614ULL; else 
                                                                    #line 2023 
                                                                    tmp_0 = 18446744073709551614ULL;
  #line 2023 
  ;
  #line 2023 
  rvu_write64(rvu,0ULL,10424ULL,tmp_0);
  #line 2027 
  if ((unsigned int)(rvu->hw)->total_pfs <= 63U) 
                                                 #line 2027 
                                                 tmp_1 = ~ (18446744073709551615ULL << (int)(rvu->hw)->total_pfs) & 18446744073709551614ULL; else 
                                                                    #line 2027 
                                                                    tmp_1 = 18446744073709551614ULL;
  #line 2027 
  ;
  #line 2027 
  rvu_write64(rvu,0ULL,10456ULL,tmp_1);
  #line 2030 
  irq = 0;
  #line 2030 
  while ((int)rvu->num_vec > irq) {
    #line 2031 
    if ((int)*(rvu->irq_allocated + (unsigned long)irq) != 0) {
      #line 2032 
      ;
      #line 2032 
      cif_free_irq_0((unsigned int)pci_irq_vector(rvu->pdev,(unsigned int)irq),(void *)rvu);
    }
    #line 2030 
    irq ++;
  }
  #line 2035 
  pci_free_irq_vectors(rvu->pdev);
  #line 2036 
  rvu->num_vec = (unsigned short)0U;
  #line 2037 
  return;
}

#line 2039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_afvf_msix_vectors_num_ok(struct rvu *rvu)
{
  #line 2042 
  int offset;
  #line 2041 
  struct rvu_pfvf *pfvf = rvu->pf;
  #line 2044 
  pfvf = rvu->pf;
  #line 2045 
  offset = (int)rvu_read64(rvu,0ULL,134218240ULL) & 1023;
  #line 2051 
  return ((unsigned int)pfvf->msix.max > 11U && offset != 0) != 0;
}

#line 2055  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_register_interrupts(struct rvu *rvu)
{
  #line 2057 
  int ret;
  #line 2057 
  int offset;
  #line 2057 
  int pf_vec_start;
  #line 2112 
  unsigned long long tmp_4;
  #line 2115 
  unsigned long long tmp_5;
  #line 2132 
  unsigned long long tmp_7;
  #line 2135 
  unsigned long long tmp_8;
  #line 2059 
  rvu->num_vec = (unsigned short)pci_msix_vec_count(rvu->pdev);
  #line 2061 
  rvu->irq_name = (char *)cif_devm_kmalloc_array(rvu->dev,(unsigned long)rvu->num_vec,32UL,3264U);
  #line 2063 
  if (rvu->irq_name == (char *)0) 
                                  #line 2064 
                                  return -12;
  #line 2066 
  rvu->irq_allocated = (bool *)cif_devm_kcalloc_0(rvu->dev,(unsigned long)rvu->num_vec,1UL,3264U);
  #line 2068 
  if (rvu->irq_allocated == (bool *)0) 
                                       #line 2069 
                                       return -12;
  #line 2072 
  ret = pci_alloc_irq_vectors(rvu->pdev,(unsigned int)rvu->num_vec,(unsigned int)rvu->num_vec,4U);
  #line 2074 
  if (ret < 0) {
    #line 2075 
    _dev_err(rvu->dev,(char *)"RVUAF: Request for %d msix vectors failed, ret %d\n",(int)rvu->num_vec,ret);
    #line 2078 
    return ret;
  }
  #line 2082 
  sprintf(rvu->irq_name + 128U,(char *)"RVUAF Mbox");
  #line 2083 
  ;
  #line 2083 
  ;
  #line 2083 
  ret = cif_request_irq_0((unsigned int)pci_irq_vector(rvu->pdev,4U),& rvu_mbox_intr_handler,0UL,rvu->irq_name + 128U,(void *)rvu);
  #line 2086 
  if (ret != 0) {
    #line 2087 
    _dev_err(rvu->dev,(char *)"RVUAF: IRQ registration failed for mbox irq\n");
    #line 2089 
    goto fail;
  }
  #line 2092 
  *(rvu->irq_allocated + 4U) = (_Bool)1;
  #line 2095 
  rvu_enable_mbox_intr(rvu);
  #line 2098 
  sprintf(rvu->irq_name + 32U,(char *)"RVUAF FLR");
  #line 2100 
  ;
  #line 2100 
  ;
  #line 2100 
  ret = cif_request_irq_0((unsigned int)pci_irq_vector(rvu->pdev,1U),& rvu_flr_intr_handler,0UL,rvu->irq_name + 32U,(void *)rvu);
  #line 2104 
  if (ret != 0) {
    #line 2105 
    _dev_err(rvu->dev,(char *)"RVUAF: IRQ registration failed for FLR\n");
    #line 2107 
    goto fail;
  }
  #line 2109 
  *(rvu->irq_allocated + 1U) = (_Bool)1;
  #line 2112 
  if ((unsigned int)(rvu->hw)->total_pfs <= 63U) 
                                                 #line 2112 
                                                 tmp_4 = (1ULL << (int)(rvu->hw)->total_pfs) + 18446744073709551615ULL; else 
                                                                    #line 2112 
                                                                    tmp_4 = 18446744073709551615ULL;
  #line 2112 
  ;
  #line 2112 
  rvu_write64(rvu,0ULL,10400ULL,tmp_4);
  #line 2115 
  if ((unsigned int)(rvu->hw)->total_pfs <= 63U) 
                                                 #line 2115 
                                                 tmp_5 = ~ (18446744073709551615ULL << (int)(rvu->hw)->total_pfs) & 18446744073709551614ULL; else 
                                                                    #line 2115 
                                                                    tmp_5 = 18446744073709551614ULL;
  #line 2115 
  ;
  #line 2115 
  rvu_write64(rvu,0ULL,10416ULL,tmp_5);
  #line 2119 
  sprintf(rvu->irq_name + 64U,(char *)"RVUAF ME");
  #line 2121 
  ;
  #line 2121 
  ;
  #line 2121 
  ret = cif_request_irq_0((unsigned int)pci_irq_vector(rvu->pdev,2U),& rvu_me_pf_intr_handler,0UL,rvu->irq_name + 64U,(void *)rvu);
  #line 2125 
  if (ret != 0) 
                #line 2126 
                _dev_err(rvu->dev,(char *)"RVUAF: IRQ registration failed for ME\n");
  #line 2129 
  *(rvu->irq_allocated + 2U) = (_Bool)1;
  #line 2132 
  if ((unsigned int)(rvu->hw)->total_pfs <= 63U) 
                                                 #line 2132 
                                                 tmp_7 = (1ULL << (int)(rvu->hw)->total_pfs) + 18446744073709551615ULL; else 
                                                                    #line 2132 
                                                                    tmp_7 = 18446744073709551615ULL;
  #line 2132 
  ;
  #line 2132 
  rvu_write64(rvu,0ULL,10432ULL,tmp_7);
  #line 2135 
  if ((unsigned int)(rvu->hw)->total_pfs <= 63U) 
                                                 #line 2135 
                                                 tmp_8 = ~ (18446744073709551615ULL << (int)(rvu->hw)->total_pfs) & 18446744073709551614ULL; else 
                                                                    #line 2135 
                                                                    tmp_8 = 18446744073709551614ULL;
  #line 2135 
  ;
  #line 2135 
  rvu_write64(rvu,0ULL,10448ULL,tmp_8);
  #line 2138 
  if (rvu_afvf_msix_vectors_num_ok(rvu) == 0) 
                                              #line 2139 
                                              return 0;
  #line 2142 
  pf_vec_start = (int)rvu_read64(rvu,0ULL,134218240ULL) & 1023;
  #line 2146 
  offset = pf_vec_start + 4;
  #line 2147 
  sprintf(rvu->irq_name + (unsigned long)(offset * 32),(char *)"RVUAFVF Mbox0");
  #line 2148 
  ;
  #line 2148 
  ;
  #line 2148 
  ret = cif_request_irq_0((unsigned int)pci_irq_vector(rvu->pdev,(unsigned int)offset),& rvu_mbox_intr_handler,0UL,rvu->irq_name + (unsigned long)(offset * 32),(void *)rvu);
  #line 2152 
  if (ret != 0) 
                #line 2153 
                _dev_err(rvu->dev,(char *)"RVUAF: IRQ registration failed for Mbox0\n");
  #line 2156 
  *(rvu->irq_allocated + (unsigned long)offset) = (_Bool)1;
  #line 2161 
  offset = pf_vec_start + 5;
  #line 2162 
  sprintf(rvu->irq_name + (unsigned long)(offset * 32),(char *)"RVUAFVF Mbox1");
  #line 2163 
  ;
  #line 2163 
  ;
  #line 2163 
  ret = cif_request_irq_0((unsigned int)pci_irq_vector(rvu->pdev,(unsigned int)offset),& rvu_mbox_intr_handler,0UL,rvu->irq_name + (unsigned long)(offset * 32),(void *)rvu);
  #line 2167 
  if (ret != 0) 
                #line 2168 
                _dev_err(rvu->dev,(char *)"RVUAF: IRQ registration failed for Mbox1\n");
  #line 2171 
  *(rvu->irq_allocated + (unsigned long)offset) = (_Bool)1;
  #line 2174 
  offset = pf_vec_start;
  #line 2175 
  sprintf(rvu->irq_name + (unsigned long)(offset * 32),(char *)"RVUAFVF FLR0");
  #line 2176 
  ;
  #line 2176 
  ;
  #line 2176 
  ret = cif_request_irq_0((unsigned int)pci_irq_vector(rvu->pdev,(unsigned int)offset),& rvu_flr_intr_handler,0UL,rvu->irq_name + (unsigned long)(offset * 32),(void *)rvu);
  #line 2179 
  if (ret != 0) {
    #line 2180 
    _dev_err(rvu->dev,(char *)"RVUAF: IRQ registration failed for RVUAFVF FLR0\n");
    #line 2182 
    goto fail;
  }
  #line 2184 
  *(rvu->irq_allocated + (unsigned long)offset) = (_Bool)1;
  #line 2186 
  offset = pf_vec_start + 1;
  #line 2187 
  sprintf(rvu->irq_name + (unsigned long)(offset * 32),(char *)"RVUAFVF FLR1");
  #line 2188 
  ;
  #line 2188 
  ;
  #line 2188 
  ret = cif_request_irq_0((unsigned int)pci_irq_vector(rvu->pdev,(unsigned int)offset),& rvu_flr_intr_handler,0UL,rvu->irq_name + (unsigned long)(offset * 32),(void *)rvu);
  #line 2191 
  if (ret != 0) {
    #line 2192 
    _dev_err(rvu->dev,(char *)"RVUAF: IRQ registration failed for RVUAFVF FLR1\n");
    #line 2194 
    goto fail;
  }
  #line 2196 
  *(rvu->irq_allocated + (unsigned long)offset) = (_Bool)1;
  #line 2199 
  offset = pf_vec_start + 2;
  #line 2200 
  sprintf(rvu->irq_name + (unsigned long)(offset * 32),(char *)"RVUAFVF ME0");
  #line 2201 
  ;
  #line 2201 
  ;
  #line 2201 
  ret = cif_request_irq_0((unsigned int)pci_irq_vector(rvu->pdev,(unsigned int)offset),& rvu_me_vf_intr_handler,0UL,rvu->irq_name + (unsigned long)(offset * 32),(void *)rvu);
  #line 2204 
  if (ret != 0) {
    #line 2205 
    _dev_err(rvu->dev,(char *)"RVUAF: IRQ registration failed for RVUAFVF ME0\n");
    #line 2207 
    goto fail;
  }
  #line 2209 
  *(rvu->irq_allocated + (unsigned long)offset) = (_Bool)1;
  #line 2211 
  offset = pf_vec_start + 3;
  #line 2212 
  sprintf(rvu->irq_name + (unsigned long)(offset * 32),(char *)"RVUAFVF ME1");
  #line 2213 
  ;
  #line 2213 
  ;
  #line 2213 
  ret = cif_request_irq_0((unsigned int)pci_irq_vector(rvu->pdev,(unsigned int)offset),& rvu_me_vf_intr_handler,0UL,rvu->irq_name + (unsigned long)(offset * 32),(void *)rvu);
  #line 2216 
  if (ret != 0) {
    #line 2217 
    _dev_err(rvu->dev,(char *)"RVUAF: IRQ registration failed for RVUAFVF ME1\n");
    #line 2219 
    goto fail;
  }
  #line 2221 
  *(rvu->irq_allocated + (unsigned long)offset) = (_Bool)1;
  #line 2222 
  return 0;
  #line 2224 
  fail: 
        #line 2224 
  ;
  #line 2225 
  rvu_unregister_interrupts(rvu);
  #line 2226 
  return ret;
}

#line 2229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_flr_wq_destroy(struct rvu *rvu)
{
  #line 2231 
  if (rvu->flr_wq != (struct workqueue_struct *)0) {
    #line 2232 
    flush_workqueue(rvu->flr_wq);
    #line 2233 
    destroy_workqueue(rvu->flr_wq);
    #line 2234 
    rvu->flr_wq = (struct workqueue_struct *)0;
  }
  #line 2236 
  return;
}

#line 2238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_flr_init(struct rvu *rvu)
{
  #line 2240 
  int dev;
  #line 2240 
  int num_devs;
  #line 2241 
  u64 cfg;
  #line 2242 
  int pf;
  #line 2245 
  pf = 0;
  #line 2245 
  while ((int)(rvu->hw)->total_pfs > pf) {
    #line 2246 
    cfg = rvu_read64(rvu,0ULL,(unsigned long long)((pf << 16) | 134217984));
    #line 2247 
    rvu_write64(rvu,0ULL,(unsigned long long)((pf << 16) | 134217984),cfg | 4194304ULL);
    #line 2245 
    pf ++;
  }
  #line 2251 
  rvu->flr_wq = alloc_workqueue((char *)"rvu_afpf_flr",26U,1);
  #line 2254 
  if (rvu->flr_wq == (struct workqueue_struct *)0) 
                                                   #line 2255 
                                                   return -12;
  #line 2257 
  num_devs = (int)(rvu->hw)->total_pfs + pci_sriov_get_totalvfs(rvu->pdev);
  #line 2258 
  rvu->flr_wrk = (struct rvu_work *)cif_devm_kcalloc_0(rvu->dev,(unsigned long)num_devs,96UL,3264U);
  #line 2260 
  if (rvu->flr_wrk == (struct rvu_work *)0) {
    #line 2261 
    destroy_workqueue(rvu->flr_wq);
    #line 2262 
    return -12;
  }
  #line 2265 
  dev = 0;
  #line 2265 
  while (dev < num_devs) {
    #line 2266 
    (rvu->flr_wrk + (unsigned long)dev)->rvu = rvu;
    {
      #line 2267 
      struct lock_class_key __key;
      #line 2267 
      __init_work(& (rvu->flr_wrk + (unsigned long)dev)->work,0);
      #line 2267 
      atomic_long_t __constr_expr_36 = {.counter = 137438953408LL};
      #line 2267 
      (rvu->flr_wrk + (unsigned long)dev)->work.data = __constr_expr_36;
      #line 2267 
      lockdep_init_map(& (rvu->flr_wrk + (unsigned long)dev)->work.lockdep_map,(char *)"(work_completion)",& __key,0);
      #line 2267 
      INIT_LIST_HEAD_1(& (rvu->flr_wrk + (unsigned long)dev)->work.entry);
      #line 2267 
      (rvu->flr_wrk + (unsigned long)dev)->work.func = & rvu_flr_handler;
    }
    #line 2265 
    dev ++;
  }
  {
    #line 2270 
    struct lock_class_key __key_0;
    #line 2270 
    __mutex_init(& rvu->flr_lock,(char *)"&rvu->flr_lock",& __key_0);
  }
  #line 2272 
  return 0;
}

#line 2275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_disable_afvf_intr(struct rvu *rvu)
{
  #line 2279 
  unsigned long long tmp;
  #line 2280 
  unsigned long long tmp_0;
  #line 2281 
  unsigned long long tmp_1;
  #line 2285 
  unsigned long long tmp_2;
  #line 2287 
  unsigned long long tmp_3;
  #line 2288 
  unsigned long long tmp_4;
  #line 2277 
  int vfs = rvu->vfs;
  #line 2279 
  if (vfs <= 63) 
                 #line 2279 
                 tmp = (1ULL << vfs) + 18446744073709551615ULL; else 
                                                                  #line 2279 
                                                                  tmp = 18446744073709551615ULL;
  #line 2279 
  ;
  #line 2279 
  rvupf_write64(rvu,2272ULL,tmp);
  #line 2280 
  if (vfs <= 63) 
                 #line 2280 
                 tmp_0 = (1ULL << vfs) + 18446744073709551615ULL; else 
                                                                    #line 2280 
                                                                    tmp_0 = 18446744073709551615ULL;
  #line 2280 
  ;
  #line 2280 
  rvupf_write64(rvu,2400ULL,tmp_0);
  #line 2281 
  if (vfs <= 63) 
                 #line 2281 
                 tmp_1 = (1ULL << vfs) + 18446744073709551615ULL; else 
                                                                    #line 2281 
                                                                    tmp_1 = 18446744073709551615ULL;
  #line 2281 
  ;
  #line 2281 
  rvupf_write64(rvu,2528ULL,tmp_1);
  #line 2282 
  if (vfs <= 64) 
                 #line 2283 
                 return;
  #line 2285 
  if (vfs <= 127) 
                  #line 2285 
                  tmp_2 = (1ULL << (vfs + -64)) + 18446744073709551615ULL; else 
                                                                    #line 2285 
                                                                    tmp_2 = 18446744073709551615ULL;
  #line 2285 
  ;
  #line 2285 
  rvupf_write64(rvu,2280ULL,tmp_2);
  #line 2287 
  if (vfs <= 127) 
                  #line 2287 
                  tmp_3 = (1ULL << (vfs + -64)) + 18446744073709551615ULL; else 
                                                                    #line 2287 
                                                                    tmp_3 = 18446744073709551615ULL;
  #line 2287 
  ;
  #line 2287 
  rvupf_write64(rvu,2408ULL,tmp_3);
  #line 2288 
  if (vfs <= 127) 
                  #line 2288 
                  tmp_4 = (1ULL << (vfs + -64)) + 18446744073709551615ULL; else 
                                                                    #line 2288 
                                                                    tmp_4 = 18446744073709551615ULL;
  #line 2288 
  ;
  #line 2288 
  rvupf_write64(rvu,2536ULL,tmp_4);
  #line 2289 
  return;
}

#line 2291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_enable_afvf_intr(struct rvu *rvu)
{
  #line 2299 
  unsigned long long tmp;
  #line 2300 
  unsigned long long tmp_0;
  #line 2303 
  unsigned long long tmp_1;
  #line 2304 
  unsigned long long tmp_2;
  #line 2305 
  unsigned long long tmp_3;
  #line 2311 
  unsigned long long tmp_4;
  #line 2312 
  unsigned long long tmp_5;
  #line 2315 
  unsigned long long tmp_6;
  #line 2316 
  unsigned long long tmp_7;
  #line 2317 
  unsigned long long tmp_8;
  #line 2293 
  int vfs = rvu->vfs;
  #line 2299 
  if (vfs <= 63) 
                 #line 2299 
                 tmp = (1ULL << vfs) + 18446744073709551615ULL; else 
                                                                  #line 2299 
                                                                  tmp = 18446744073709551615ULL;
  #line 2299 
  ;
  #line 2299 
  rvupf_write64(rvu,2176ULL,tmp);
  #line 2300 
  if (vfs <= 63) 
                 #line 2300 
                 tmp_0 = (1ULL << vfs) + 18446744073709551615ULL; else 
                                                                    #line 2300 
                                                                    tmp_0 = 18446744073709551615ULL;
  #line 2300 
  ;
  #line 2300 
  rvupf_write64(rvu,2240ULL,tmp_0);
  #line 2303 
  if (vfs <= 63) 
                 #line 2303 
                 tmp_1 = (1ULL << vfs) + 18446744073709551615ULL; else 
                                                                    #line 2303 
                                                                    tmp_1 = 18446744073709551615ULL;
  #line 2303 
  ;
  #line 2303 
  rvupf_write64(rvu,2304ULL,tmp_1);
  #line 2304 
  if (vfs <= 63) 
                 #line 2304 
                 tmp_2 = (1ULL << vfs) + 18446744073709551615ULL; else 
                                                                    #line 2304 
                                                                    tmp_2 = 18446744073709551615ULL;
  #line 2304 
  ;
  #line 2304 
  rvupf_write64(rvu,2368ULL,tmp_2);
  #line 2305 
  if (vfs <= 63) 
                 #line 2305 
                 tmp_3 = (1ULL << vfs) + 18446744073709551615ULL; else 
                                                                    #line 2305 
                                                                    tmp_3 = 18446744073709551615ULL;
  #line 2305 
  ;
  #line 2305 
  rvupf_write64(rvu,2496ULL,tmp_3);
  #line 2308 
  if (vfs <= 64) 
                 #line 2309 
                 return;
  #line 2311 
  if (vfs <= 127) 
                  #line 2311 
                  tmp_4 = (1ULL << (vfs + -64)) + 18446744073709551615ULL; else 
                                                                    #line 2311 
                                                                    tmp_4 = 18446744073709551615ULL;
  #line 2311 
  ;
  #line 2311 
  rvupf_write64(rvu,2184ULL,tmp_4);
  #line 2312 
  if (vfs <= 127) 
                  #line 2312 
                  tmp_5 = (1ULL << (vfs + -64)) + 18446744073709551615ULL; else 
                                                                    #line 2312 
                                                                    tmp_5 = 18446744073709551615ULL;
  #line 2312 
  ;
  #line 2312 
  rvupf_write64(rvu,2248ULL,tmp_5);
  #line 2315 
  if (vfs <= 127) 
                  #line 2315 
                  tmp_6 = (1ULL << (vfs + -64)) + 18446744073709551615ULL; else 
                                                                    #line 2315 
                                                                    tmp_6 = 18446744073709551615ULL;
  #line 2315 
  ;
  #line 2315 
  rvupf_write64(rvu,2312ULL,tmp_6);
  #line 2316 
  if (vfs <= 127) 
                  #line 2316 
                  tmp_7 = (1ULL << (vfs + -64)) + 18446744073709551615ULL; else 
                                                                    #line 2316 
                                                                    tmp_7 = 18446744073709551615ULL;
  #line 2316 
  ;
  #line 2316 
  rvupf_write64(rvu,2376ULL,tmp_7);
  #line 2317 
  if (vfs <= 127) 
                  #line 2317 
                  tmp_8 = (1ULL << (vfs + -64)) + 18446744073709551615ULL; else 
                                                                    #line 2317 
                                                                    tmp_8 = 18446744073709551615ULL;
  #line 2317 
  ;
  #line 2317 
  rvupf_write64(rvu,2504ULL,tmp_8);
  #line 2318 
  return;
}

#line 2322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int lbk_get_num_chans(void)
{
  #line 2324 
  struct pci_dev *pdev;
  #line 2325 
  void *base;
  #line 2326 
  int ret = -5;
  #line 2328 
  pdev = pci_get_device(6013U,41057U,(struct pci_dev *)0);
  #line 2330 
  if (pdev == (struct pci_dev *)0) 
                                   #line 2331 
                                   goto err;
  #line 2333 
  base = pci_ioremap_bar(pdev,0);
  #line 2334 
  if (base == (void *)0) 
                         #line 2335 
                         goto err_put;
  #line 2338 
  ret = (int)(readq(base + 16U) >> 32) & 65535;
  #line 2339 
  iounmap(base);
  #line 2340 
  err_put: 
           #line 2340 
  ;
  #line 2341 
  pci_dev_put(pdev);
  #line 2342 
  err: 
       #line 2342 
  ;
  #line 2343 
  return ret;
}

#line 2346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_enable_sriov(struct rvu *rvu)
{
  #line 2349 
  int err;
  #line 2349 
  int chans;
  #line 2349 
  int vfs;
  #line 2348 
  struct pci_dev *pdev = rvu->pdev;
  #line 2351 
  if (rvu_afvf_msix_vectors_num_ok(rvu) == 0) {
    #line 2352 
    _dev_warn(& pdev->dev,(char *)"Skipping SRIOV enablement since not enough IRQs are available\n");
    #line 2354 
    return 0;
  }
  #line 2357 
  chans = lbk_get_num_chans();
  #line 2358 
  if (chans < 0) 
                 #line 2359 
                 return chans;
  #line 2361 
  vfs = pci_sriov_get_totalvfs(pdev);
  #line 2364 
  if (vfs > chans) 
                   #line 2365 
                   vfs = chans;
  #line 2367 
  if (vfs == 0) 
                #line 2368 
                return 0;
  #line 2374 
  rvu->vfs = vfs;
  #line 2376 
  err = rvu_mbox_init(rvu,& rvu->afvf_wq_info,0,vfs,& rvu_afvf_mbox_handler,& rvu_afvf_mbox_up_handler);
  #line 2378 
  if (err != 0) 
                #line 2379 
                return err;
  #line 2381 
  rvu_enable_afvf_intr(rvu);
  #line 2382 
  ldv_inline_asm();
  #line 2385 
  err = pci_enable_sriov(pdev,vfs);
  #line 2386 
  if (err != 0) {
    #line 2387 
    rvu_disable_afvf_intr(rvu);
    #line 2388 
    rvu_mbox_destroy(& rvu->afvf_wq_info);
    #line 2389 
    return err;
  }
  #line 2392 
  return 0;
}

#line 2395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_disable_sriov(struct rvu *rvu)
{
  #line 2397 
  rvu_disable_afvf_intr(rvu);
  #line 2398 
  rvu_mbox_destroy(& rvu->afvf_wq_info);
  #line 2399 
  pci_disable_sriov(rvu->pdev);
  #line 2400 
  return;
}

#line 2402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_update_module_params(struct rvu *rvu)
{
  #line 2406 
  char *tmp;
  #line 2404 
  char *default_pfl_name = (char *)"default";
  #line 2406 
  if (mkex_profile != (char *)0) 
                                 #line 2406 
                                 tmp = mkex_profile; else 
                                                          #line 2406 
                                                          tmp = default_pfl_name;
  #line 2406 
  ;
  #line 2406 
  strscpy((char *)(& rvu->mkex_pfl_name),tmp,128UL);
  #line 2408 
  return;
}

#line 2410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_probe(struct pci_dev *pdev, struct pci_device_id *id)
{
  #line 2413 
  struct rvu *rvu;
  #line 2414 
  int err;
  #line 2412 
  struct device *dev = & pdev->dev;
  #line 2416 
  rvu = (struct rvu *)cif_devm_kzalloc_3(dev,1400UL,3264U);
  #line 2417 
  if (rvu == (struct rvu *)0) 
                              #line 2418 
                              return -12;
  #line 2420 
  rvu->hw = (struct rvu_hwinfo *)cif_devm_kzalloc_3(dev,2112UL,3264U);
  #line 2421 
  if (rvu->hw == (struct rvu_hwinfo *)0) {
    #line 2422 
    devm_kfree(dev,(void *)rvu);
    #line 2423 
    return -12;
  }
  #line 2426 
  pci_set_drvdata(pdev,(void *)rvu);
  #line 2427 
  rvu->pdev = pdev;
  #line 2428 
  rvu->dev = & pdev->dev;
  #line 2430 
  err = pci_enable_device(pdev);
  #line 2431 
  if (err != 0) {
    #line 2432 
    _dev_err(dev,(char *)"Failed to enable PCI device\n");
    #line 2433 
    goto err_freemem;
  }
  #line 2436 
  err = pci_request_regions(pdev,(char *)"octeontx2-af");
  #line 2437 
  if (err != 0) {
    #line 2438 
    _dev_err(dev,(char *)"PCI request regions failed 0x%x\n",err);
    #line 2439 
    goto err_disable_device;
  }
  #line 2442 
  err = pci_set_dma_mask(pdev,281474976710655ULL);
  #line 2443 
  if (err != 0) {
    #line 2444 
    _dev_err(dev,(char *)"Unable to set DMA mask\n");
    #line 2445 
    goto err_release_regions;
  }
  #line 2448 
  err = pci_set_consistent_dma_mask(pdev,281474976710655ULL);
  #line 2449 
  if (err != 0) {
    #line 2450 
    _dev_err(dev,(char *)"Unable to set consistent DMA mask\n");
    #line 2451 
    goto err_release_regions;
  }
  #line 2455 
  rvu->afreg_base = pcim_iomap(pdev,0,0UL);
  #line 2456 
  rvu->pfreg_base = pcim_iomap(pdev,2,0UL);
  #line 2457 
  if (rvu->afreg_base == (void *)0 || rvu->pfreg_base == (void *)0) {
    #line 2458 
    _dev_err(dev,(char *)"Unable to map admin function CSRs, aborting\n");
    #line 2459 
    err = -12;
    #line 2460 
    goto err_release_regions;
  }
  #line 2464 
  rvu_update_module_params(rvu);
  #line 2467 
  rvu_check_block_implemented(rvu);
  #line 2469 
  rvu_reset_all_blocks(rvu);
  #line 2471 
  rvu_setup_hw_capabilities(rvu);
  #line 2473 
  err = rvu_setup_hw_resources(rvu);
  #line 2474 
  if (err != 0) 
                #line 2475 
                goto err_release_regions;
  #line 2478 
  err = rvu_mbox_init(rvu,& rvu->afpf_wq_info,1,(int)(rvu->hw)->total_pfs,& rvu_afpf_mbox_handler,& rvu_afpf_mbox_up_handler);
  #line 2481 
  if (err != 0) 
                #line 2482 
                goto err_hwsetup;
  #line 2484 
  err = rvu_flr_init(rvu);
  #line 2485 
  if (err != 0) 
                #line 2486 
                goto err_mbox;
  #line 2488 
  err = rvu_register_interrupts(rvu);
  #line 2489 
  if (err != 0) 
                #line 2490 
                goto err_flr;
  #line 2493 
  err = rvu_enable_sriov(rvu);
  #line 2494 
  if (err != 0) 
                #line 2495 
                goto err_irq;
  #line 2498 
  rvu_dbg_init(rvu);
  #line 2500 
  return 0;
  #line 2501 
  err_irq: 
           #line 2501 
  ;
  #line 2502 
  rvu_unregister_interrupts(rvu);
  #line 2503 
  err_flr: 
           #line 2503 
  ;
  #line 2504 
  rvu_flr_wq_destroy(rvu);
  #line 2505 
  err_mbox: 
            #line 2505 
  ;
  #line 2506 
  rvu_mbox_destroy(& rvu->afpf_wq_info);
  #line 2507 
  err_hwsetup: 
               #line 2507 
  ;
  #line 2508 
  rvu_cgx_exit(rvu);
  #line 2509 
  rvu_reset_all_blocks(rvu);
  #line 2510 
  rvu_free_hw_resources(rvu);
  #line 2511 
  err_release_regions: 
                       #line 2511 
  ;
  #line 2512 
  pci_release_regions(pdev);
  #line 2513 
  err_disable_device: 
                      #line 2513 
  ;
  #line 2514 
  pci_disable_device(pdev);
  #line 2515 
  err_freemem: 
               #line 2515 
  ;
  #line 2516 
  pci_set_drvdata(pdev,(void *)0);
  #line 2517 
  devm_kfree(& pdev->dev,(void *)rvu->hw);
  #line 2518 
  devm_kfree(dev,(void *)rvu);
  #line 2519 
  return err;
}

#line 2522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_remove(struct pci_dev *pdev)
{
  #line 2524 
  struct rvu *rvu = pci_get_drvdata(pdev);
  #line 2526 
  rvu_dbg_exit(rvu);
  #line 2527 
  rvu_unregister_interrupts(rvu);
  #line 2528 
  rvu_flr_wq_destroy(rvu);
  #line 2529 
  rvu_cgx_exit(rvu);
  #line 2530 
  rvu_mbox_destroy(& rvu->afpf_wq_info);
  #line 2531 
  rvu_disable_sriov(rvu);
  #line 2532 
  rvu_reset_all_blocks(rvu);
  #line 2533 
  rvu_free_hw_resources(rvu);
  #line 2535 
  pci_release_regions(pdev);
  #line 2536 
  pci_disable_device(pdev);
  #line 2537 
  pci_set_drvdata(pdev,(void *)0);
  #line 2539 
  devm_kfree(& pdev->dev,(void *)rvu->hw);
  #line 2540 
  devm_kfree(& pdev->dev,(void *)rvu);
  #line 2541 
  return;
}

#line 2543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static struct pci_driver rvu_driver = {.name = (char *)"octeontx2-af", .id_table = (struct pci_device_id *)(& rvu_id_table), .probe = & rvu_probe, .remove = & rvu_remove};
#line 2550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static int rvu_init_module(void)
{
  #line 2552 
  int err;
  #line 2554 
  printk((char *)"\001",(char *)"octeontx2-af",(char *)"Marvell OcteonTX2 RVU Admin Function Driver");
  #line 2556 
  err = cif___pci_register_driver(& cgx_driver,& __this_module,(char *)"octeontx2_af");
  #line 2557 
  if (err < 0) 
               #line 2558 
               return err;
  #line 2560 
  err = cif___pci_register_driver(& rvu_driver,& __this_module,(char *)"octeontx2_af");
  #line 2561 
  if (err < 0) 
               #line 2562 
               cif_pci_unregister_driver(& cgx_driver);
  #line 2564 
  return err;
}

#line 2567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.c"
static void rvu_cleanup_module(void)
{
  #line 2569 
  cif_pci_unregister_driver(& rvu_driver);
  #line 2570 
  cif_pci_unregister_driver(& cgx_driver);
  #line 2571 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
struct pci_driver *emg_alias_rvu_driver = & rvu_driver;
#line 96 
#line 96 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 98 
#line 98 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
enum irqreturn emg_wrapper_rvu_flr_intr_handler(int arg0, void *arg1)
{
  #line 105 
  return rvu_flr_intr_handler(arg0,arg1);
}

#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
enum irqreturn emg_wrapper_rvu_mbox_intr_handler(int arg0, void *arg1)
{
  #line 110 
  return rvu_mbox_intr_handler(arg0,arg1);
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
enum irqreturn emg_wrapper_rvu_me_pf_intr_handler(int arg0, void *arg1)
{
  #line 115 
  return rvu_me_pf_intr_handler(arg0,arg1);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
enum irqreturn emg_wrapper_rvu_me_vf_intr_handler(int arg0, void *arg1)
{
  #line 120 
  return rvu_me_vf_intr_handler(arg0,arg1);
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
int emg_wrapper_rvu_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 125 
  return rvu_probe(arg0,arg1);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
void emg_wrapper_rvu_remove(struct pci_dev *arg0)
{
  #line 130 
  rvu_remove(arg0);
  #line 131 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
void emg_rvu_cleanup_module(void)
{
  #line 135 
  rvu_cleanup_module();
  #line 136 
  return;
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
int emg_rvu_init_module(void)
{
  #line 139 
  return rvu_init_module();
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list)
{
  #line 174 
  ldv_init_list_head(list);
  #line 175 
  return;
}

#line 341  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static bool cif_queue_work_1(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 345 
  return emg_queue_work(wq,work);
}

#line 435  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void *kcalloc_2(size_t n, size_t size, gfp_t flags)
{
  #line 438 
  return ldv_kcalloc(n,size,flags);
}

#line 470  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void *cif_devm_kmalloc_array(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 473 
  return ldv_devm_kmalloc_array(n,size,flags);
}

#line 695  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void *cif_devm_kzalloc_3(struct device *dev, size_t size, gfp_t flags)
{
  #line 698 
  return ldv_devm_kzalloc(size,flags);
}

#line 702  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static unsigned long cif_bitmap_find_next_zero_area_0(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 705 
  return ldv_bitmap_find_next_zero_area(map,size,start,nr,align_mask);
}

#line 709  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void cif_bitmap_set(unsigned long *map, unsigned int start, unsigned int nbits)
{
  #line 712 
  ldv_bitmap_set(map,start,(int)nbits);
  #line 713 
  return;
}

#line 716  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void cif_bitmap_clear(unsigned long *map, unsigned int start, unsigned int nbits)
{
  #line 719 
  ldv_bitmap_clear(map,start,(int)nbits);
  #line 720 
  return;
}

#line 723  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void cif_mutex_lock_rsrc_lock_of_rvu_0(struct mutex *lock)
{
  #line 726 
  ldv_mutex_model_lock(lock,(char *)"rsrc_lock_of_rvu");
  #line 727 
  return;
}

#line 730  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void cif_mutex_unlock_rsrc_lock_of_rvu_0(struct mutex *lock)
{
  #line 733 
  ldv_mutex_model_unlock(lock,(char *)"rsrc_lock_of_rvu");
  #line 734 
  return;
}

#line 737  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void *cif_devm_kcalloc_0(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 740 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 744  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void cif_mutex_lock_flr_lock_of_rvu(struct mutex *lock)
{
  #line 747 
  ldv_mutex_model_lock(lock,(char *)"flr_lock_of_rvu");
  #line 748 
  return;
}

#line 751  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void cif_mutex_unlock_flr_lock_of_rvu(struct mutex *lock)
{
  #line 754 
  ldv_mutex_model_unlock(lock,(char *)"flr_lock_of_rvu");
  #line 755 
  return;
}

#line 758  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 762 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 766  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 770 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 774  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 778 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 782  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 786 
  emg_pci_unregister_driver(dev);
  #line 787 
  return;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npc.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npc.i.aux"
static unsigned long cif_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npc.i.aux"
static int cif_strncmp_0(char *cs, char *ct, __kernel_size_t count);
#line 26 
#line 659 
static void cif_mutex_lock_lock_of_npc_mcam_0(struct mutex *lock);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npc.i.aux"
static void cif_mutex_unlock_lock_of_npc_mcam_0(struct mutex *lock);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npc.i.aux"
static void *cif_devm_kcalloc_1(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu.h"
#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_enable_promisc_entry(struct rvu *rvu, u16 pcifunc, int nixlf);
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action ikpu_action_entries[64U] = {{.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)1U}, {.dp0_offset = (unsigned char)36U, .dp1_offset = (unsigned char)40U, .dp2_offset = (unsigned char)44U, .next_state = (unsigned char)6U}, {.dp0_offset = (unsigned char)28U, .dp1_offset = (unsigned char)32U, .dp2_offset = (unsigned char)36U, .next_state = (unsigned char)5U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)4U}, {.dp0_offset = (unsigned char)20U, .dp1_offset = (unsigned char)24U, .dp2_offset = (unsigned char)28U, .next_state = (unsigned char)2U}};
#line 1000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu1_cam_entries[74U] = {{.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35135U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)56026U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)64512U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1024U, .dp0_mask = (unsigned short)65024U}, {.state = (unsigned char)1U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35135U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)2U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)3U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)40960U, .dp0_mask = (unsigned short)40960U}, {.state = (unsigned char)3U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32768U, .dp0_mask = (unsigned short)40960U}, {.state = (unsigned char)3U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)40960U}, {.state = (unsigned char)3U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)4U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)4096U, .dp0_mask = (unsigned short)4096U}, {.state = (unsigned char)4U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)4096U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35135U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)5U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35135U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)6U, .state_mask = (unsigned char)255U}};
#line 1669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu2_cam_entries[125U] = {{.state = (unsigned char)7U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)7U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)7U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)7U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)7U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)7U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)7U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)7U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)7U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)7U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)32821U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35063U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35078U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34887U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34888U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35151U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34984U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)2048U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)34525U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)2054U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)32821U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)35063U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)35078U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)34887U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)34888U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)35151U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)34984U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)33024U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)9U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)32821U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35063U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35078U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34887U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34888U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35151U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)37120U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)10U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35047U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)2048U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)34525U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)2054U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)34984U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U, .dp2 = (unsigned short)33024U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35047U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)11U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U, .dp2 = (unsigned short)2048U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U, .dp2 = (unsigned short)34525U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U, .dp2 = (unsigned short)2054U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)12U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)8U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)8U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)8U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)8U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)8U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)8U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)8U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)8U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)8U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)8U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)8U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)13U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)13U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)13U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)13U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)13U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)13U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)13U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)13U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)13U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)13U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)13U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)13U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32768U, .dp0_mask = (unsigned short)32768U, .dp2 = (unsigned short)2048U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32768U, .dp0_mask = (unsigned short)32768U, .dp2 = (unsigned short)34525U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32768U, .dp0_mask = (unsigned short)32768U, .dp2 = (unsigned short)2054U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32768U, .dp0_mask = (unsigned short)32768U, .dp2 = (unsigned short)32821U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32768U, .dp0_mask = (unsigned short)32768U, .dp2 = (unsigned short)35063U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32768U, .dp0_mask = (unsigned short)32768U, .dp2 = (unsigned short)35078U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32768U, .dp0_mask = (unsigned short)32768U, .dp2 = (unsigned short)33024U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32768U, .dp0_mask = (unsigned short)32768U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)32768U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)32768U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)32768U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)32768U, .dp1 = (unsigned short)32821U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)32768U, .dp1 = (unsigned short)35063U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)32768U, .dp1 = (unsigned short)35078U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)32768U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)14U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)32768U}};
#line 2797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu3_cam_entries[124U] = {{.state = (unsigned char)15U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)15U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)15U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)15U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)15U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)15U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)15U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)15U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)15U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)15U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)32821U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35063U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35078U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34887U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34888U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35151U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)16U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)32821U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35063U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35078U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34887U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34888U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35151U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)17U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U, .dp2 = (unsigned short)2048U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U, .dp2 = (unsigned short)34525U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U, .dp2 = (unsigned short)2054U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)18U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)19U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)19U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)19U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)19U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)19U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)19U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)19U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)19U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)19U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)19U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)32821U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35063U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35078U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34887U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34888U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35151U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)20U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)32821U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35063U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35078U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34887U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34888U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35151U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)21U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)32821U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35063U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35078U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)32821U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35063U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)35078U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)22U, .state_mask = (unsigned char)255U}};
#line 3916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu4_cam_entries[10U] = {{.state = (unsigned char)23U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U}, {.state = (unsigned char)23U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1 = (unsigned short)256U, .dp1_mask = (unsigned short)256U}, {.state = (unsigned char)23U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)256U, .dp2 = (unsigned short)256U, .dp2_mask = (unsigned short)256U}, {.state = (unsigned char)23U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)256U, .dp2_mask = (unsigned short)256U}, {.state = (unsigned char)24U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1U, .dp0_mask = (unsigned short)255U}, {.state = (unsigned char)24U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2U, .dp0_mask = (unsigned short)255U}, {.state = (unsigned char)24U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)3U, .dp0_mask = (unsigned short)255U}, {.state = (unsigned char)24U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)5U, .dp0_mask = (unsigned short)255U}, {.state = (unsigned char)24U, .state_mask = (unsigned char)255U}};
#line 4009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu5_cam_entries[63U] = {{.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp2 = (unsigned short)1U, .dp2_mask = (unsigned short)8191U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)6U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)17U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)132U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)50U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)51U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)47U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)4U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)41U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)137U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)6U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)17U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)132U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)50U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)51U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)47U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)4U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)41U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)137U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U, .dp2_mask = (unsigned short)16383U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)25U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)27U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)28U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)29U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)30U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)255U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1536U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)4352U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33792U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)14848U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12032U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)10496U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35072U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)15360U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)11008U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)11264U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12800U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)13056U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34560U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35584U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35840U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)26U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)31U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)31U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)31U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)31U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U}, {.state = (unsigned char)31U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U}, {.state = (unsigned char)32U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)16384U, .dp0_mask = (unsigned short)61440U}, {.state = (unsigned char)32U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)24576U, .dp0_mask = (unsigned short)61440U}, {.state = (unsigned char)32U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)32U, .state_mask = (unsigned char)255U}};
#line 4579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu6_cam_entries[38U] = {{.state = (unsigned char)34U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)37U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1536U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)37U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)4352U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)37U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33792U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)37U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)37U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)14848U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)37U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12800U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)37U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)13056U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)37U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12032U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)37U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)10496U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)37U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35072U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)37U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1536U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)4352U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33792U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)14848U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12800U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)13056U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12032U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)10496U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35072U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)11008U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)11264U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)35U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)36U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1536U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)36U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)4352U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)36U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33792U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)36U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)36U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)14848U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)36U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12800U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)36U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)13056U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)36U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12032U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)36U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)10496U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)36U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35072U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)36U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)11264U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)36U, .state_mask = (unsigned char)255U}};
#line 4924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu7_cam_entries[24U] = {{.state = (unsigned char)38U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)39U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1536U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)39U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)4352U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)39U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33792U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)39U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)39U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)14848U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)39U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12800U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)39U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)13056U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)39U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12032U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)39U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)10496U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)39U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35072U, .dp0_mask = (unsigned short)65280U}, {.state = (unsigned char)39U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)40U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1536U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)40U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)4352U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)40U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33792U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)40U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)40U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)14848U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)40U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12800U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)40U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)13056U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)40U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12032U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)40U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)10496U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)40U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35072U, .dp0_mask = (unsigned short)65280U, .dp1_mask = (unsigned short)65528U}, {.state = (unsigned char)40U, .state_mask = (unsigned char)255U}};
#line 5143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu8_cam_entries[81U] = {{.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)1U, .dp1_mask = (unsigned short)63U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp1_mask = (unsigned short)63U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)5U, .dp1_mask = (unsigned short)5U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)34U, .dp1_mask = (unsigned short)34U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)6U, .dp1_mask = (unsigned short)6U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)3U, .dp1_mask = (unsigned short)3U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)80U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)20480U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)443U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)20480U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1723U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)20480U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)20480U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)80U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)443U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1723U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)41U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)42U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)4789U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)42U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)4790U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)42U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)6081U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)42U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2123U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)42U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2152U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)42U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)319U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)42U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)320U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)42U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)6635U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)42U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)43U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)44U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)45U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)46U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)48U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)49U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)25944U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)8192U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)25944U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)32768U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)8192U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)4096U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)40960U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)36864U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)12288U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34887U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)45056U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)32768U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)8192U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)4096U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)40960U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)36864U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)12288U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34888U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)45056U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)32768U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)8192U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)4096U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)40960U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)36864U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)12288U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)35151U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)45056U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)32768U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)8192U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)4096U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)40960U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)36864U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)12288U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)45056U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)32768U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)8192U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)4096U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)40960U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)36864U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)12288U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)45056U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)20479U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)65535U, .dp1_mask = (unsigned short)20479U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)65535U, .dp1_mask = (unsigned short)3U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34827U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)8193U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34827U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)12289U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34827U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)8321U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34827U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)12417U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)8193U, .dp1_mask = (unsigned short)61311U}, {.state = (unsigned char)47U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)1U, .dp1_mask = (unsigned short)3U}};
#line 5875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu9_cam_entries[51U] = {{.state = (unsigned char)50U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U}, {.state = (unsigned char)50U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1 = (unsigned short)256U, .dp1_mask = (unsigned short)256U}, {.state = (unsigned char)50U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)256U, .dp2 = (unsigned short)256U, .dp2_mask = (unsigned short)256U}, {.state = (unsigned char)50U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)256U, .dp2_mask = (unsigned short)256U}, {.state = (unsigned char)51U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U}, {.state = (unsigned char)51U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1 = (unsigned short)256U, .dp1_mask = (unsigned short)256U}, {.state = (unsigned char)51U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)256U, .dp2 = (unsigned short)256U, .dp2_mask = (unsigned short)256U}, {.state = (unsigned char)51U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)256U, .dp2_mask = (unsigned short)256U}, {.state = (unsigned char)52U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U}, {.state = (unsigned char)52U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1 = (unsigned short)256U, .dp1_mask = (unsigned short)256U}, {.state = (unsigned char)52U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)256U, .dp2 = (unsigned short)256U, .dp2_mask = (unsigned short)256U}, {.state = (unsigned char)52U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)256U, .dp2_mask = (unsigned short)256U}, {.state = (unsigned char)54U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1U, .dp0_mask = (unsigned short)255U}, {.state = (unsigned char)54U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2U, .dp0_mask = (unsigned short)255U}, {.state = (unsigned char)54U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)3U, .dp0_mask = (unsigned short)255U}, {.state = (unsigned char)54U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)55U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)2048U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)55U, .state_mask = (unsigned char)255U, .dp1_mask = (unsigned short)65535U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)55U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)56U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)3072U, .dp1_mask = (unsigned short)3072U, .dp2 = (unsigned short)1U, .dp2_mask = (unsigned short)255U}, {.state = (unsigned char)56U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)3072U, .dp1_mask = (unsigned short)3072U, .dp2 = (unsigned short)2U, .dp2_mask = (unsigned short)255U}, {.state = (unsigned char)56U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)3072U, .dp1_mask = (unsigned short)3072U, .dp2 = (unsigned short)3U, .dp2_mask = (unsigned short)255U}, {.state = (unsigned char)56U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)3072U, .dp1_mask = (unsigned short)3072U, .dp2 = (unsigned short)4U, .dp2_mask = (unsigned short)255U}, {.state = (unsigned char)56U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)3072U, .dp1_mask = (unsigned short)3072U, .dp2 = (unsigned short)5U, .dp2_mask = (unsigned short)255U}, {.state = (unsigned char)56U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)1024U, .dp1_mask = (unsigned short)3072U, .dp2 = (unsigned short)1U, .dp2_mask = (unsigned short)255U}, {.state = (unsigned char)56U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)1024U, .dp1_mask = (unsigned short)3072U, .dp2 = (unsigned short)2U, .dp2_mask = (unsigned short)255U}, {.state = (unsigned char)56U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)1024U, .dp1_mask = (unsigned short)3072U, .dp2 = (unsigned short)3U, .dp2_mask = (unsigned short)255U}, {.state = (unsigned char)56U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)1024U, .dp1_mask = (unsigned short)3072U, .dp2 = (unsigned short)4U, .dp2_mask = (unsigned short)255U}, {.state = (unsigned char)56U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)1024U, .dp1_mask = (unsigned short)3072U, .dp2 = (unsigned short)5U, .dp2_mask = (unsigned short)255U}, {.state = (unsigned char)56U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)1024U, .dp1_mask = (unsigned short)1024U}, {.state = (unsigned char)56U, .state_mask = (unsigned char)255U, .dp1_mask = (unsigned short)1024U}, {.state = (unsigned char)57U, .state_mask = (unsigned char)255U, .dp1_mask = (unsigned short)192U, .dp2 = (unsigned short)25944U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)57U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)128U, .dp1_mask = (unsigned short)192U, .dp2 = (unsigned short)25944U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)57U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)64U, .dp1_mask = (unsigned short)192U, .dp2 = (unsigned short)25944U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)57U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)192U, .dp1_mask = (unsigned short)192U, .dp2 = (unsigned short)25944U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)57U, .state_mask = (unsigned char)255U, .dp1_mask = (unsigned short)192U, .dp2 = (unsigned short)2048U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)57U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)128U, .dp1_mask = (unsigned short)192U, .dp2 = (unsigned short)2048U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)57U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)64U, .dp1_mask = (unsigned short)192U, .dp2 = (unsigned short)2048U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)57U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)192U, .dp1_mask = (unsigned short)192U, .dp2 = (unsigned short)2048U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)57U, .state_mask = (unsigned char)255U, .dp1_mask = (unsigned short)192U, .dp2 = (unsigned short)34525U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)57U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)128U, .dp1_mask = (unsigned short)192U, .dp2 = (unsigned short)34525U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)57U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)64U, .dp1_mask = (unsigned short)192U, .dp2 = (unsigned short)34525U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)57U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)192U, .dp1_mask = (unsigned short)192U, .dp2 = (unsigned short)34525U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)58U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)59U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)12543U, .dp1_mask = (unsigned short)61695U}, {.state = (unsigned char)59U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)53U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U}, {.state = (unsigned char)53U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1 = (unsigned short)256U, .dp1_mask = (unsigned short)256U}, {.state = (unsigned char)53U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)256U, .dp2 = (unsigned short)256U, .dp2_mask = (unsigned short)256U}, {.state = (unsigned char)53U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)256U, .dp2_mask = (unsigned short)256U}};
#line 6337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu10_cam_entries[18U] = {{.state = (unsigned char)62U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)62U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)62U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)62U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U}, {.state = (unsigned char)62U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U}, {.state = (unsigned char)61U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)16384U, .dp0_mask = (unsigned short)61440U}, {.state = (unsigned char)61U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)24576U, .dp0_mask = (unsigned short)61440U}, {.state = (unsigned char)61U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)61U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)60U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U}, {.state = (unsigned char)60U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1 = (unsigned short)256U, .dp1_mask = (unsigned short)256U}, {.state = (unsigned char)60U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)256U, .dp2 = (unsigned short)256U, .dp2_mask = (unsigned short)256U}, {.state = (unsigned char)60U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U, .dp1_mask = (unsigned short)256U, .dp2_mask = (unsigned short)256U}, {.state = (unsigned char)63U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1U, .dp0_mask = (unsigned short)255U}, {.state = (unsigned char)63U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2U, .dp0_mask = (unsigned short)255U}, {.state = (unsigned char)63U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)3U, .dp0_mask = (unsigned short)255U}, {.state = (unsigned char)63U, .state_mask = (unsigned char)255U}};
#line 6502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu11_cam_entries[34U] = {{.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2048U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34525U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2054U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33024U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U, .dp2 = (unsigned short)2048U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U, .dp2 = (unsigned short)34525U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U, .dp2 = (unsigned short)2054U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)34984U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U, .dp2 = (unsigned short)2048U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U, .dp2 = (unsigned short)34525U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U, .dp2 = (unsigned short)2054U, .dp2_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)33024U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2048U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)34525U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)2054U, .dp1_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)37120U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)64U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)65U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)68U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)68U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)68U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)256U}, {.state = (unsigned char)68U, .state_mask = (unsigned char)255U, .dp0_mask = (unsigned short)256U}, {.state = (unsigned char)67U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)16384U, .dp0_mask = (unsigned short)61440U}, {.state = (unsigned char)67U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)24576U, .dp0_mask = (unsigned short)61440U}, {.state = (unsigned char)67U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)69U, .state_mask = (unsigned char)255U}};
#line 6811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu12_cam_entries[28U] = {{.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)6U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)17U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)132U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)50U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)51U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)17664U, .dp1_mask = (unsigned short)65280U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)6U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)17U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)132U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)2U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)50U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)51U, .dp0_mask = (unsigned short)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)16384U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)70U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)72U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)71U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1536U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)71U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)4352U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)71U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)33792U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)71U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)256U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)71U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)14848U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)71U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)12800U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)71U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)13056U, .dp0_mask = (unsigned short)65280U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)71U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)24576U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)71U, .state_mask = (unsigned char)255U}};
#line 7066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu13_cam_entries[1U] = {{.state = (unsigned char)73U, .state_mask = (unsigned char)255U}};
#line 7078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu14_cam_entries[1U] = {{.state = (unsigned char)74U, .state_mask = (unsigned char)255U}};
#line 7090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu15_cam_entries[22U] = {{.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)1U, .dp1_mask = (unsigned short)63U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp1_mask = (unsigned short)63U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)5U, .dp1_mask = (unsigned short)5U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)34U, .dp1_mask = (unsigned short)34U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)6U, .dp1_mask = (unsigned short)6U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)3U, .dp1_mask = (unsigned short)3U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)80U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)20480U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)443U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)20480U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1723U, .dp0_mask = (unsigned short)65535U, .dp1 = (unsigned short)20480U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp1 = (unsigned short)20480U, .dp1_mask = (unsigned short)61440U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)80U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)443U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U, .dp0 = (unsigned short)1723U, .dp0_mask = (unsigned short)65535U}, {.state = (unsigned char)75U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)76U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)77U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)78U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)79U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)80U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)81U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)82U, .state_mask = (unsigned char)255U}};
#line 7291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_cam kpu16_cam_entries[6U] = {{.state = (unsigned char)86U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)83U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)84U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)85U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)87U, .state_mask = (unsigned char)255U}, {.state = (unsigned char)88U, .state_mask = (unsigned char)255U}};
#line 7348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu1_action_entries[74U] = {{.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)8U, .dp1_offset = (unsigned char)12U, .next_state = (unsigned char)8U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U, .flags = (unsigned char)18U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .next_state = (unsigned char)7U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U, .flags = (unsigned char)18U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .dp2_offset = (unsigned char)22U, .next_state = (unsigned char)9U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U, .flags = (unsigned char)18U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .next_state = (unsigned char)10U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U, .flags = (unsigned char)18U}, {.dp0_offset = (unsigned char)8U, .dp1_offset = (unsigned char)12U, .dp2_offset = (unsigned char)26U, .next_state = (unsigned char)11U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U, .flags = (unsigned char)19U}, {.dp0_offset = (unsigned char)18U, .dp1_offset = (unsigned char)22U, .dp2_offset = (unsigned char)26U, .next_state = (unsigned char)12U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U, .flags = (unsigned char)20U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U, .flags = (unsigned char)5U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U, .flags = (unsigned char)5U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U, .flags = (unsigned char)6U}, {.dp0_offset = (unsigned char)8U, .dp1_offset = (unsigned char)12U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)22U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)1U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)1U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U, .flags = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)32U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)32U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)32U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)32U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)32U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)32U}, {.dp0_offset = (unsigned char)8U, .dp1_offset = (unsigned char)12U, .next_state = (unsigned char)8U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)50U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .next_state = (unsigned char)7U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)50U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .dp2_offset = (unsigned char)22U, .next_state = (unsigned char)9U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)50U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .next_state = (unsigned char)10U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)50U}, {.dp0_offset = (unsigned char)8U, .dp1_offset = (unsigned char)12U, .dp2_offset = (unsigned char)26U, .next_state = (unsigned char)11U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)51U}, {.dp0_offset = (unsigned char)18U, .dp1_offset = (unsigned char)22U, .dp2_offset = (unsigned char)26U, .next_state = (unsigned char)12U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)52U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)37U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)37U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)38U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)33U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)14U, .dp2_offset = (unsigned char)16U, .next_state = (unsigned char)13U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)4U, .offset = (unsigned char)1U, .mask = (unsigned char)255U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)14U, .dp2_offset = (unsigned char)16U, .next_state = (unsigned char)13U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)5U, .offset = (unsigned char)1U, .mask = (unsigned char)255U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)14U, .dp2_offset = (unsigned char)16U, .next_state = (unsigned char)13U, .ptr_advance = (unsigned char)2U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)6U, .offset = (unsigned char)1U, .mask = (unsigned char)255U}, {.errlev = (unsigned char)1U, .errcode = (unsigned char)2U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U, .flags = (unsigned char)1U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .dp2_offset = (unsigned char)16U, .next_state = (unsigned char)14U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U}, {.errlev = (unsigned char)1U, .errcode = (unsigned char)3U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)30U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)64U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)30U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)64U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)30U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)64U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)30U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)64U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)30U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)64U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)30U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)64U}, {.dp0_offset = (unsigned char)8U, .dp1_offset = (unsigned char)12U, .next_state = (unsigned char)8U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)82U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .next_state = (unsigned char)7U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)82U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .dp2_offset = (unsigned char)22U, .next_state = (unsigned char)9U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)82U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .next_state = (unsigned char)10U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)82U}, {.dp0_offset = (unsigned char)8U, .dp1_offset = (unsigned char)12U, .dp2_offset = (unsigned char)26U, .next_state = (unsigned char)11U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)83U}, {.dp0_offset = (unsigned char)18U, .dp1_offset = (unsigned char)22U, .dp2_offset = (unsigned char)26U, .next_state = (unsigned char)12U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)84U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)30U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)69U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)30U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)69U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)30U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)70U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)65U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)38U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)96U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)38U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)96U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)38U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)96U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)38U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)96U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)38U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)96U}, {.bypass_count = (unsigned char)3U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)38U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)96U}, {.dp0_offset = (unsigned char)8U, .dp1_offset = (unsigned char)12U, .next_state = (unsigned char)8U, .ptr_advance = (unsigned char)36U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)114U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .next_state = (unsigned char)7U, .ptr_advance = (unsigned char)36U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)114U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .dp2_offset = (unsigned char)22U, .next_state = (unsigned char)9U, .ptr_advance = (unsigned char)36U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)114U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .next_state = (unsigned char)10U, .ptr_advance = (unsigned char)36U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)114U}, {.dp0_offset = (unsigned char)8U, .dp1_offset = (unsigned char)12U, .dp2_offset = (unsigned char)26U, .next_state = (unsigned char)11U, .ptr_advance = (unsigned char)36U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)115U}, {.dp0_offset = (unsigned char)18U, .dp1_offset = (unsigned char)22U, .dp2_offset = (unsigned char)26U, .next_state = (unsigned char)12U, .ptr_advance = (unsigned char)36U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)116U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)38U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)101U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)38U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)101U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)38U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)102U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)97U}, {.errlev = (unsigned char)1U, .errcode = (unsigned char)4U, .parse_done = (unsigned char)1U}};
#line 7965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu2_action_entries[125U] = {{.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)6U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)6U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)6U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)6U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)6U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)6U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)6U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)6U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)6U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U, .flags = (unsigned char)128U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)66U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .next_state = (unsigned char)15U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)67U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .next_state = (unsigned char)16U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)68U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)4U, .flags = (unsigned char)71U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)4U, .flags = (unsigned char)71U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)4U, .flags = (unsigned char)71U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)4U, .flags = (unsigned char)71U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)4U, .flags = (unsigned char)71U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)4U, .flags = (unsigned char)71U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)4U, .flags = (unsigned char)71U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)4U, .flags = (unsigned char)71U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)4U, .flags = (unsigned char)71U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)16U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)4U, .flags = (unsigned char)72U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)15U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)4U, .flags = (unsigned char)73U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)4U, .flags = (unsigned char)74U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)128U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)65U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)66U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .next_state = (unsigned char)15U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)69U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .next_state = (unsigned char)17U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)70U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)128U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)15U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)65U}, {.dp0_offset = (unsigned char)16U, .dp1_offset = (unsigned char)20U, .dp2_offset = (unsigned char)24U, .next_state = (unsigned char)18U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)75U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .next_state = (unsigned char)16U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)76U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .next_state = (unsigned char)17U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)77U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)71U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)71U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)71U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)16U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)72U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)15U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)73U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)74U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)1U, .flags = (unsigned char)128U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U, .flags = (unsigned char)67U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U, .flags = (unsigned char)67U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)28U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U, .flags = (unsigned char)67U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U, .flags = (unsigned char)76U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U, .flags = (unsigned char)76U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U, .flags = (unsigned char)76U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U, .flags = (unsigned char)65U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U, .flags = (unsigned char)65U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)24U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)5U, .flags = (unsigned char)65U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .next_state = (unsigned char)17U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)70U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U, .flags = (unsigned char)128U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)14U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)14U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)14U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)14U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)14U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)14U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .next_state = (unsigned char)19U, .ptr_advance = (unsigned char)14U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)20U, .ptr_advance = (unsigned char)14U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .next_state = (unsigned char)21U, .ptr_advance = (unsigned char)14U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)14U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)14U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)14U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)16U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)16U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)16U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)16U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)16U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)16U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .next_state = (unsigned char)15U, .ptr_advance = (unsigned char)16U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)9U, .flags = (unsigned char)17U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)8U, .flags = (unsigned char)144U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)10U, .flags = (unsigned char)18U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)10U, .flags = (unsigned char)18U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)10U, .flags = (unsigned char)18U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)10U, .flags = (unsigned char)18U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)10U, .flags = (unsigned char)18U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)10U, .flags = (unsigned char)18U}, {.dp0_offset = (unsigned char)4U, .dp1_offset = (unsigned char)8U, .next_state = (unsigned char)15U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)11U, .flags = (unsigned char)19U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)10U, .flags = (unsigned char)146U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)6U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}};
#line 8968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu3_action_entries[124U] = {{.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)18U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)18U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)18U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)18U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)26U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)26U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)26U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)22U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)22U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)22U, .lid = (unsigned char)1U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)22U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)22U, .lid = (unsigned char)1U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)22U, .lid = (unsigned char)1U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)23U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)24U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)7U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)6U, .flags = (unsigned char)14U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)6U, .flags = (unsigned char)14U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)6U, .flags = (unsigned char)14U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)6U, .flags = (unsigned char)14U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)6U, .flags = (unsigned char)14U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)10U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)6U, .flags = (unsigned char)14U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)25U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)15U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)26U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)15U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)27U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)15U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)28U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)15U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)29U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)15U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)30U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)15U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)7U, .flags = (unsigned char)142U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)1U, .ltype = (unsigned char)6U, .flags = (unsigned char)143U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)6U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}};
#line 9963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu4_action_entries[10U] = {{.next_state = (unsigned char)32U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)7U}, {.next_state = (unsigned char)32U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)7U, .flags = (unsigned char)8U}, {.next_state = (unsigned char)32U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)7U, .flags = (unsigned char)7U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)4U, .next_state = (unsigned char)31U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)7U, .flags = (unsigned char)6U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)7U, .next_state = (unsigned char)70U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)8U, .offset = (unsigned char)1U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)7U, .next_state = (unsigned char)71U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)8U, .offset = (unsigned char)1U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)6U, .next_state = (unsigned char)64U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)8U, .offset = (unsigned char)1U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)4U, .next_state = (unsigned char)51U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)8U, .offset = (unsigned char)1U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.errlev = (unsigned char)3U, .errcode = (unsigned char)11U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)8U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)8U, .parse_done = (unsigned char)1U, .lid = (unsigned char)2U}};
#line 10046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu5_action_entries[63U] = {{.errlev = (unsigned char)3U, .errcode = (unsigned char)12U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U}, {.errlev = (unsigned char)3U, .errcode = (unsigned char)13U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U, .flags = (unsigned char)32U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)12U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)41U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)42U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)43U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)44U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)45U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)48U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)49U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)47U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)6U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U, .flags = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)6U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U, .flags = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)52U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U, .flags = (unsigned char)3U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U, .flags = (unsigned char)16U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U, .flags = (unsigned char)32U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)12U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)41U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)8U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)42U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)43U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)44U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)45U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)48U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)49U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)47U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)6U, .next_state = (unsigned char)70U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .flags = (unsigned char)1U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)6U, .next_state = (unsigned char)71U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .flags = (unsigned char)2U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)52U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .flags = (unsigned char)3U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .flags = (unsigned char)16U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)2U, .flags = (unsigned char)32U}, {.errlev = (unsigned char)3U, .errcode = (unsigned char)14U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)1U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)5U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)6U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)9U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)10U}, {.errlev = (unsigned char)3U, .errcode = (unsigned char)15U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)12U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)41U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)42U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)43U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)44U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)46U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)3U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)47U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)6U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)3U, .flags = (unsigned char)4U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)52U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)3U, .flags = (unsigned char)5U}, {.next_state = (unsigned char)35U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)4U, .flags = (unsigned char)9U}, {.next_state = (unsigned char)35U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)4U, .flags = (unsigned char)10U}, {.next_state = (unsigned char)36U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)4U, .flags = (unsigned char)11U}, {.dp1_offset = (unsigned char)2U, .next_state = (unsigned char)37U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)4U, .flags = (unsigned char)64U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)48U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)4U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)49U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)4U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)4U, .flags = (unsigned char)12U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)4U, .flags = (unsigned char)13U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)4U, .flags = (unsigned char)14U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)3U, .flags = (unsigned char)16U}, {.errlev = (unsigned char)3U, .errcode = (unsigned char)16U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)2U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)6U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)6U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)5U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)5U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.errlev = (unsigned char)2U, .errcode = (unsigned char)9U, .parse_done = (unsigned char)1U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)6U, .next_state = (unsigned char)70U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)6U, .next_state = (unsigned char)71U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)5U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)5U, .next_state = (unsigned char)64U, .lid = (unsigned char)1U}, {.errlev = (unsigned char)3U, .errcode = (unsigned char)1U, .parse_done = (unsigned char)1U, .lid = (unsigned char)2U}};
#line 10553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu6_action_entries[38U] = {{.parse_done = (unsigned char)1U, .lid = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)12U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)41U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)8U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)42U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)43U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)44U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)46U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)48U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)49U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)47U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)5U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)52U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.parse_done = (unsigned char)1U, .lid = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)12U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)41U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)8U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)42U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)43U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)44U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)46U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)48U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)49U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)47U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)5U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)52U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.next_state = (unsigned char)39U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.dp1_offset = (unsigned char)2U, .next_state = (unsigned char)40U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.parse_done = (unsigned char)1U, .lid = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)12U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)41U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)8U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)42U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)43U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)44U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)46U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)48U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)49U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.bypass_count = (unsigned char)1U, .next_state = (unsigned char)47U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)5U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)52U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.dp1_offset = (unsigned char)2U, .next_state = (unsigned char)40U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.parse_done = (unsigned char)1U, .lid = (unsigned char)2U}, {.errlev = (unsigned char)3U, .errcode = (unsigned char)1U, .parse_done = (unsigned char)1U, .lid = (unsigned char)2U}};
#line 10860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu7_action_entries[24U] = {{.parse_done = (unsigned char)1U, .lid = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)12U, .next_state = (unsigned char)41U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)8U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)42U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.next_state = (unsigned char)43U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.next_state = (unsigned char)44U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.next_state = (unsigned char)46U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.next_state = (unsigned char)48U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.next_state = (unsigned char)49U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.next_state = (unsigned char)47U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)4U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)52U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U, .offset = (unsigned char)1U, .mask = (unsigned char)255U, .shift = (unsigned char)3U}, {.parse_done = (unsigned char)1U, .lid = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)12U, .next_state = (unsigned char)41U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)8U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)42U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.next_state = (unsigned char)43U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.next_state = (unsigned char)44U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.next_state = (unsigned char)46U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.next_state = (unsigned char)48U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.next_state = (unsigned char)49U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.next_state = (unsigned char)47U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)4U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)52U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)2U}, {.parse_done = (unsigned char)1U, .lid = (unsigned char)2U}, {.errlev = (unsigned char)3U, .errcode = (unsigned char)1U, .parse_done = (unsigned char)1U, .lid = (unsigned char)2U}};
#line 11055  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu8_action_entries[81U] = {{.errlev = (unsigned char)4U, .errcode = (unsigned char)17U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U}, {.errlev = (unsigned char)4U, .errcode = (unsigned char)18U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U}, {.errlev = (unsigned char)4U, .errcode = (unsigned char)19U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U}, {.errlev = (unsigned char)4U, .errcode = (unsigned char)20U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U}, {.errlev = (unsigned char)4U, .errcode = (unsigned char)21U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U}, {.errlev = (unsigned char)4U, .errcode = (unsigned char)22U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)7U, .next_state = (unsigned char)83U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)7U, .next_state = (unsigned char)84U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)7U, .next_state = (unsigned char)85U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)7U, .next_state = (unsigned char)86U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U, .flags = (unsigned char)1U}, {.bypass_count = (unsigned char)7U, .next_state = (unsigned char)83U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U, .flags = (unsigned char)2U, .offset = (unsigned char)12U, .mask = (unsigned char)240U, .right = (unsigned char)1U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)7U, .next_state = (unsigned char)84U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U, .flags = (unsigned char)2U, .offset = (unsigned char)12U, .mask = (unsigned char)240U, .right = (unsigned char)1U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)7U, .next_state = (unsigned char)85U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U, .flags = (unsigned char)2U, .offset = (unsigned char)12U, .mask = (unsigned char)240U, .right = (unsigned char)1U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)7U, .next_state = (unsigned char)86U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)1U, .flags = (unsigned char)3U, .offset = (unsigned char)12U, .mask = (unsigned char)240U, .right = (unsigned char)1U, .shift = (unsigned char)2U}, {.dp2_offset = (unsigned char)2U, .next_state = (unsigned char)55U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)2U}, {.dp2_offset = (unsigned char)2U, .next_state = (unsigned char)56U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)2U}, {.dp2_offset = (unsigned char)2U, .next_state = (unsigned char)57U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)2U}, {.dp2_offset = (unsigned char)2U, .next_state = (unsigned char)58U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)2U}, {.dp2_offset = (unsigned char)2U, .next_state = (unsigned char)59U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)2U}, {.parse_done = (unsigned char)1U, .next_state = (unsigned char)88U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)2U}, {.parse_done = (unsigned char)1U, .next_state = (unsigned char)88U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)53U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)7U, .next_state = (unsigned char)87U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)2U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)4U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)3U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)8U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)5U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)9U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)10U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)12U, .flags = (unsigned char)5U}, {.errlev = (unsigned char)4U, .errcode = (unsigned char)24U, .parse_done = (unsigned char)1U, .lid = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)7U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)8U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)9U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)10U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)11U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)12U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)16U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)13U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)7U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)8U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)9U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)10U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)11U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)12U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)50U, .ptr_advance = (unsigned char)16U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)13U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)54U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)54U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)7U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)54U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)8U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)54U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)9U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)54U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)10U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)54U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)11U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)54U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)12U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)54U, .ptr_advance = (unsigned char)16U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)13U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)7U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)8U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)9U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)10U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)11U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)12U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)16U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)13U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)7U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)8U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)9U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)10U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)11U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)12U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)3U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)16U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)13U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)14U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)15U}, {.errlev = (unsigned char)4U, .errcode = (unsigned char)25U, .parse_done = (unsigned char)1U, .lid = (unsigned char)3U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)65U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)16U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)65U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)17U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)65U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)18U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)65U, .ptr_advance = (unsigned char)16U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)19U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)11U, .flags = (unsigned char)20U}, {.errlev = (unsigned char)4U, .errcode = (unsigned char)26U, .parse_done = (unsigned char)1U, .lid = (unsigned char)3U}, {.errlev = (unsigned char)4U, .errcode = (unsigned char)1U, .parse_done = (unsigned char)1U, .lid = (unsigned char)3U}};
#line 11706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu9_action_entries[51U] = {{.next_state = (unsigned char)61U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)8U}, {.next_state = (unsigned char)61U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)8U}, {.next_state = (unsigned char)61U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)8U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)4U, .next_state = (unsigned char)62U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)8U}, {.next_state = (unsigned char)61U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)14U}, {.next_state = (unsigned char)61U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)14U, .flags = (unsigned char)23U}, {.next_state = (unsigned char)61U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)14U, .flags = (unsigned char)22U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)4U, .next_state = (unsigned char)62U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)14U, .flags = (unsigned char)21U}, {.next_state = (unsigned char)61U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)15U}, {.next_state = (unsigned char)61U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)15U, .flags = (unsigned char)23U}, {.next_state = (unsigned char)61U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)15U, .flags = (unsigned char)22U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)4U, .next_state = (unsigned char)62U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)3U, .ltype = (unsigned char)15U, .flags = (unsigned char)21U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)70U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)9U, .offset = (unsigned char)1U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)71U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)9U, .offset = (unsigned char)1U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)64U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)9U, .offset = (unsigned char)1U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.errlev = (unsigned char)5U, .errcode = (unsigned char)11U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)9U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)1U}, {.errlev = (unsigned char)5U, .errcode = (unsigned char)23U, .parse_done = (unsigned char)1U, .lid = (unsigned char)4U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)5U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)5U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)5U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)63U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)5U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)60U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)5U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)5U, .flags = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)5U, .flags = (unsigned char)1U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)5U, .flags = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)63U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)5U, .flags = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)6U, .dp2_offset = (unsigned char)10U, .next_state = (unsigned char)60U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)5U, .flags = (unsigned char)1U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)5U, .flags = (unsigned char)2U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)5U, .flags = (unsigned char)3U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)2U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)2U, .flags = (unsigned char)4U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)2U, .flags = (unsigned char)5U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)2U, .flags = (unsigned char)6U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)2U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)2U, .flags = (unsigned char)4U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)2U, .flags = (unsigned char)5U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)2U, .flags = (unsigned char)6U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)2U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)2U, .flags = (unsigned char)4U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)2U, .flags = (unsigned char)5U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)2U, .flags = (unsigned char)6U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)6U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)4U, .flags = (unsigned char)7U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)4U, .flags = (unsigned char)8U}, {.next_state = (unsigned char)61U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)10U}, {.next_state = (unsigned char)61U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)10U}, {.next_state = (unsigned char)61U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)10U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)4U, .next_state = (unsigned char)62U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)4U, .ltype = (unsigned char)10U}, {.errlev = (unsigned char)5U, .errcode = (unsigned char)1U, .parse_done = (unsigned char)1U, .lid = (unsigned char)4U}};
#line 12117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu10_action_entries[18U] = {{.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)5U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)5U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)8U, .lid = (unsigned char)5U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)5U}, {.errlev = (unsigned char)5U, .errcode = (unsigned char)9U, .parse_done = (unsigned char)1U, .lid = (unsigned char)5U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)70U, .lid = (unsigned char)5U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)71U, .lid = (unsigned char)5U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)64U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)5U}, {.dp0_offset = (unsigned char)12U, .dp1_offset = (unsigned char)16U, .dp2_offset = (unsigned char)20U, .next_state = (unsigned char)64U, .lid = (unsigned char)5U}, {.next_state = (unsigned char)67U, .ptr_advance = (unsigned char)4U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)3U}, {.next_state = (unsigned char)67U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)3U}, {.next_state = (unsigned char)67U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)4U, .next_state = (unsigned char)68U, .ptr_advance = (unsigned char)12U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)70U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)4U, .offset = (unsigned char)1U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .bypass_count = (unsigned char)1U, .next_state = (unsigned char)71U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)4U, .offset = (unsigned char)1U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .next_state = (unsigned char)69U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)4U, .offset = (unsigned char)1U, .mask = (unsigned char)63U, .shift = (unsigned char)2U}, {.errlev = (unsigned char)6U, .errcode = (unsigned char)11U, .dp0_offset = (unsigned char)6U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)4U}, {.errlev = (unsigned char)5U, .errcode = (unsigned char)1U, .parse_done = (unsigned char)1U, .lid = (unsigned char)5U}};
#line 12264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu11_action_entries[34U] = {{.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U}, {.next_state = (unsigned char)72U, .ptr_advance = (unsigned char)14U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)1U}, {.next_state = (unsigned char)72U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)1U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)17U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)2U}, {.dp0_offset = (unsigned char)6U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)2U}, {.next_state = (unsigned char)72U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)2U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)18U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)1U}, {.dp0_offset = (unsigned char)6U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)1U}, {.next_state = (unsigned char)72U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)1U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)17U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)4U}, {.dp0_offset = (unsigned char)6U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)4U}, {.next_state = (unsigned char)72U, .ptr_advance = (unsigned char)22U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)4U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)20U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)5U}, {.dp0_offset = (unsigned char)6U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)5U}, {.next_state = (unsigned char)72U, .ptr_advance = (unsigned char)18U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)5U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)21U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)1U, .flags = (unsigned char)16U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)5U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .next_state = (unsigned char)70U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)5U}, {.dp0_offset = (unsigned char)6U, .next_state = (unsigned char)71U, .ptr_advance = (unsigned char)4U, .lid = (unsigned char)5U}, {.errlev = (unsigned char)6U, .errcode = (unsigned char)10U, .parse_done = (unsigned char)1U, .lid = (unsigned char)5U}, {.errlev = (unsigned char)6U, .errcode = (unsigned char)9U, .parse_done = (unsigned char)1U, .lid = (unsigned char)5U}, {.dp0_offset = (unsigned char)8U, .dp2_offset = (unsigned char)6U, .next_state = (unsigned char)70U, .lid = (unsigned char)5U}, {.dp0_offset = (unsigned char)6U, .next_state = (unsigned char)71U, .lid = (unsigned char)5U}, {.errlev = (unsigned char)6U, .errcode = (unsigned char)10U, .parse_done = (unsigned char)1U, .lid = (unsigned char)5U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)4U}, {.errlev = (unsigned char)6U, .errcode = (unsigned char)1U, .parse_done = (unsigned char)1U, .lid = (unsigned char)5U}};
#line 12539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu12_action_entries[28U] = {{.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)12U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)75U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)76U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)77U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)78U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)79U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)81U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)82U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U, .flags = (unsigned char)16U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)12U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)75U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U, .flags = (unsigned char)32U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)76U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U, .flags = (unsigned char)32U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)77U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U, .flags = (unsigned char)32U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)78U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U, .flags = (unsigned char)32U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)79U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U, .flags = (unsigned char)32U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)81U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U, .flags = (unsigned char)32U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)82U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U, .flags = (unsigned char)32U, .mask = (unsigned char)15U, .shift = (unsigned char)2U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U, .flags = (unsigned char)48U}, {.errlev = (unsigned char)6U, .errcode = (unsigned char)14U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)1U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)3U}, {.dp0_offset = (unsigned char)2U, .dp1_offset = (unsigned char)12U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)75U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .bypass_count = (unsigned char)2U, .next_state = (unsigned char)76U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)77U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)78U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)80U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)81U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)2U}, {.bypass_count = (unsigned char)2U, .next_state = (unsigned char)82U, .ptr_advance = (unsigned char)40U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)2U}, {.dp0_offset = (unsigned char)2U, .next_state = (unsigned char)73U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)2U, .flags = (unsigned char)64U}, {.errlev = (unsigned char)6U, .errcode = (unsigned char)16U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)6U, .ltype = (unsigned char)2U}, {.errlev = (unsigned char)6U, .errcode = (unsigned char)1U, .parse_done = (unsigned char)1U, .lid = (unsigned char)6U}};
#line 12766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu13_action_entries[1U] = {{.parse_done = (unsigned char)1U, .lid = (unsigned char)2U}};
#line 12777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu14_action_entries[1U] = {{.parse_done = (unsigned char)1U, .lid = (unsigned char)2U}};
#line 12788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu15_action_entries[22U] = {{.errlev = (unsigned char)7U, .errcode = (unsigned char)17U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U}, {.errlev = (unsigned char)7U, .errcode = (unsigned char)18U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U}, {.errlev = (unsigned char)7U, .errcode = (unsigned char)19U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U}, {.errlev = (unsigned char)7U, .errcode = (unsigned char)20U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U}, {.errlev = (unsigned char)7U, .errcode = (unsigned char)21U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U}, {.errlev = (unsigned char)7U, .errcode = (unsigned char)22U, .parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U}, {.next_state = (unsigned char)83U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U, .flags = (unsigned char)1U}, {.next_state = (unsigned char)84U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U, .flags = (unsigned char)1U}, {.next_state = (unsigned char)85U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U, .flags = (unsigned char)3U}, {.next_state = (unsigned char)86U, .ptr_advance = (unsigned char)20U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U, .flags = (unsigned char)4U}, {.next_state = (unsigned char)83U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U, .flags = (unsigned char)129U, .offset = (unsigned char)12U, .mask = (unsigned char)240U, .right = (unsigned char)1U, .shift = (unsigned char)2U}, {.next_state = (unsigned char)84U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U, .flags = (unsigned char)130U, .offset = (unsigned char)12U, .mask = (unsigned char)240U, .right = (unsigned char)1U, .shift = (unsigned char)2U}, {.next_state = (unsigned char)85U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U, .flags = (unsigned char)131U, .offset = (unsigned char)12U, .mask = (unsigned char)240U, .right = (unsigned char)1U, .shift = (unsigned char)2U}, {.next_state = (unsigned char)86U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)1U, .flags = (unsigned char)132U, .offset = (unsigned char)12U, .mask = (unsigned char)240U, .right = (unsigned char)1U, .shift = (unsigned char)2U}, {.next_state = (unsigned char)87U, .ptr_advance = (unsigned char)8U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)2U, .flags = (unsigned char)5U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)4U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)3U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)8U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)5U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)9U}, {.parse_done = (unsigned char)1U, .cap_ena = (unsigned char)1U, .lid = (unsigned char)7U, .ltype = (unsigned char)10U}, {.errlev = (unsigned char)7U, .errcode = (unsigned char)27U, .parse_done = (unsigned char)1U, .lid = (unsigned char)7U}};
#line 12967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile_action kpu16_action_entries[6U] = {{.parse_done = (unsigned char)1U, .lid = (unsigned char)7U}, {.parse_done = (unsigned char)1U, .lid = (unsigned char)7U}, {.parse_done = (unsigned char)1U, .lid = (unsigned char)7U}, {.parse_done = (unsigned char)1U, .lid = (unsigned char)7U}, {.parse_done = (unsigned char)1U, .lid = (unsigned char)7U}, {.parse_done = (unsigned char)1U, .lid = (unsigned char)7U}};
#line 13018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/npc_profile.h"
static struct npc_kpu_profile npc_kpu_profiles[16U] = {{.cam_entries = 74, .action_entries = 74, .cam = kpu1_cam_entries, .action = kpu1_action_entries}, {.cam_entries = 125, .action_entries = 125, .cam = kpu2_cam_entries, .action = kpu2_action_entries}, {.cam_entries = 124, .action_entries = 124, .cam = kpu3_cam_entries, .action = kpu3_action_entries}, {.cam_entries = 10, .action_entries = 10, .cam = kpu4_cam_entries, .action = kpu4_action_entries}, {.cam_entries = 63, .action_entries = 63, .cam = kpu5_cam_entries, .action = kpu5_action_entries}, {.cam_entries = 38, .action_entries = 38, .cam = kpu6_cam_entries, .action = kpu6_action_entries}, {.cam_entries = 24, .action_entries = 24, .cam = kpu7_cam_entries, .action = kpu7_action_entries}, {.cam_entries = 81, .action_entries = 81, .cam = kpu8_cam_entries, .action = kpu8_action_entries}, {.cam_entries = 51, .action_entries = 51, .cam = kpu9_cam_entries, .action = kpu9_action_entries}, {.cam_entries = 18, .action_entries = 18, .cam = kpu10_cam_entries, .action = kpu10_action_entries}, {.cam_entries = 34, .action_entries = 34, .cam = kpu11_cam_entries, .action = kpu11_action_entries}, {.cam_entries = 28, .action_entries = 28, .cam = kpu12_cam_entries, .action = kpu12_action_entries}, {.cam_entries = 1, .action_entries = 1, .cam = kpu13_cam_entries, .action = kpu13_action_entries}, {.cam_entries = 1, .action_entries = 1, .cam = kpu14_cam_entries, .action = kpu14_action_entries}, {.cam_entries = 22, .action_entries = 22, .cam = kpu15_cam_entries, .action = kpu15_action_entries}, {.cam_entries = 6, .action_entries = 6, .cam = kpu16_cam_entries, .action = kpu16_action_entries}};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
#line 1380 
static void npc_mcam_free_all_entries(struct rvu *rvu, struct npc_mcam *mcam, int blkaddr, u16 pcifunc);
#line 33 
#line 1404 
static void npc_mcam_free_all_counters(struct rvu *rvu, struct npc_mcam *mcam, u16 pcifunc);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_set_pkind(struct rvu *rvu, int pkind, struct rvu_pfvf *pfvf)
{
  #line 38 
  int blkaddr;
  #line 39 
  u64 val = 0ULL;
  #line 41 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 42 
  if (blkaddr < 0) 
                   #line 43 
                   return;
  #line 46 
  val = (unsigned long long)pkind | 4611686018427387904ULL;
  #line 47 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((pkind << 6) | 524320),val);
  #line 48 
  return;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_npc_get_pkind(struct rvu *rvu, u16 pf)
{
  #line 53 
  u32 map;
  #line 54 
  int i;
  #line 52 
  struct npc_pkind *pkind = & (rvu->hw)->pkind;
  #line 56 
  i = 0;
  #line 56 
  while ((int)pkind->rsrc.max > i) {
    #line 57 
    map = *(pkind->pfchan_map + (unsigned long)i);
    #line 58 
    if (((map >> 16) & 63U) == (unsigned int)pf) 
                                                 #line 59 
                                                 return i;
    #line 56 
    i ++;
  }
  #line 61 
  return -1;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static int npc_get_nixlf_mcam_index(struct npc_mcam *mcam, u16 pcifunc, int nixlf, int type)
{
  #line 68 
  int index;
  #line 67 
  int pf = rvu_get_pf((unsigned short)((int)pcifunc));
  #line 71 
  if (pf != 0 && ((int)pcifunc & 1023) == 0) {
    #line 73 
    pf --;
    #line 74 
    index = (int)mcam->pf_offset + pf * 2;
    #line 78 
    if (type == 1) 
                   #line 79 
                   return index;
    else 
      #line 80 
      if (type == 2) 
                     #line 81 
                     return index + 1;
  }
  #line 84 
  return (int)mcam->nixlf_offset + nixlf;
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static int npc_get_bank(struct npc_mcam *mcam, int index)
{
  #line 89 
  int bank = index / (int)mcam->banksize;
  #line 92 
  if ((unsigned int)mcam->keysize == 1U) {
    #line 93 
    int tmp;
    #line 93 
    if (bank != 0) 
                   #line 93 
                   tmp = 2; else 
                                 #line 93 
                                 tmp = 0;
    #line 93 
    return tmp;
  }
  #line 95 
  return bank;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static bool is_mcam_entry_enabled(struct rvu *rvu, struct npc_mcam *mcam, int blkaddr, int index)
{
  #line 102 
  u64 cfg;
  #line 101 
  int bank = npc_get_bank(mcam,index);
  #line 104 
  index = ((int)mcam->banksize + -1) & index;
  #line 105 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 8) | 25165824) | (bank << 4)));
  #line 106 
  return (_Bool)((cfg & 1ULL) != 0ULL);
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_enable_mcam_entry(struct rvu *rvu, struct npc_mcam *mcam, int blkaddr, int index, bool enable)
{
  #line 112 
  int bank = npc_get_bank(mcam,index);
  #line 113 
  int actbank = bank;
  #line 115 
  index = ((int)mcam->banksize + -1) & index;
  #line 116 
  while ((int)mcam->banks_per_entry + actbank > bank) {
    #line 117 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 8) | 25165824) | (bank << 4)),(unsigned long long)((int)enable != 0));
    #line 116 
    bank ++;
  }
  #line 120 
  return;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_clear_mcam_entry(struct rvu *rvu, struct npc_mcam *mcam, int blkaddr, int index)
{
  #line 126 
  int bank = npc_get_bank(mcam,index);
  #line 127 
  int actbank = bank;
  #line 129 
  index = ((int)mcam->banksize + -1) & index;
  #line 130 
  while ((int)mcam->banks_per_entry + actbank > bank) {
    #line 131 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((index << 10) | 16777216) | (bank << 6)) | 8),0ULL);
    #line 133 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 10) | 16777216) | (bank << 6)),0ULL);
    #line 136 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((index << 10) | 16777232) | (bank << 6)) | 8),0ULL);
    #line 138 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 10) | 16777232) | (bank << 6)),0ULL);
    #line 141 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((index << 10) | 16777248) | (bank << 6)) | 8),0ULL);
    #line 143 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 10) | 16777248) | (bank << 6)),0ULL);
    #line 130 
    bank ++;
  }
  #line 146 
  return;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_get_keyword(struct mcam_entry *entry, int idx, u64 *cam0, u64 *cam1)
{
  #line 151 
  u64 kw_mask = 0ULL;
  #line 160 
  switch (idx) {
    #line 161 
    case 0: 
            #line 161 
    ;
    #line 163 
    *cam1 = entry->kw[0];
    #line 164 
    kw_mask = entry->kw_mask[0];
    #line 165 
    break;
    #line 166 
    case 1: 
            #line 166 
    ;
    #line 168 
    *cam1 = entry->kw[1] & 281474976710655ULL;
    #line 169 
    kw_mask = entry->kw_mask[1] & 281474976710655ULL;
    #line 170 
    break;
    #line 171 
    case 2: 
            #line 171 
    ;
    #line 175 
    *cam1 = entry->kw[1] >> 48;
    #line 176 
    *cam1 |= entry->kw[2] << 16;
    #line 177 
    kw_mask = entry->kw_mask[1] >> 48;
    #line 178 
    kw_mask = (entry->kw_mask[2] << 16) | kw_mask;
    #line 179 
    break;
    #line 180 
    case 3: 
            #line 180 
    ;
    #line 184 
    *cam1 = entry->kw[2] >> 48;
    #line 185 
    *cam1 |= (entry->kw[3] << 16) & 281474976645120ULL;
    #line 186 
    kw_mask = entry->kw_mask[2] >> 48;
    #line 187 
    kw_mask = ((entry->kw_mask[3] << 16) & 281474976645120ULL) | kw_mask;
    #line 188 
    break;
    #line 189 
    case 4: 
            #line 189 
    ;
    #line 193 
    *cam1 = entry->kw[3] >> 32;
    #line 194 
    *cam1 |= entry->kw[4] << 32;
    #line 195 
    kw_mask = entry->kw_mask[3] >> 32;
    #line 196 
    kw_mask = (entry->kw_mask[4] << 32) | kw_mask;
    #line 197 
    break;
    #line 198 
    case 5: 
            #line 198 
    ;
    #line 202 
    *cam1 = entry->kw[4] >> 32;
    #line 203 
    *cam1 |= (entry->kw[5] << 32) & 281470681743360ULL;
    #line 204 
    kw_mask = entry->kw_mask[4] >> 32;
    #line 205 
    kw_mask = ((entry->kw_mask[5] << 32) & 281470681743360ULL) | kw_mask;
    #line 206 
    break;
    #line 207 
    case 6: 
            #line 207 
    ;
    #line 211 
    *cam1 = entry->kw[5] >> 16;
    #line 212 
    *cam1 |= entry->kw[6] << 48;
    #line 213 
    kw_mask = entry->kw_mask[5] >> 16;
    #line 214 
    kw_mask = (entry->kw_mask[6] << 48) | kw_mask;
    #line 215 
    break;
    #line 216 
    case 7: 
            #line 216 
    ;
    #line 218 
    *cam1 = entry->kw[6] >> 16;
    #line 219 
    kw_mask = entry->kw_mask[6] >> 16;
    #line 220 
    break;
  }
  #line 223 
  *cam1 &= kw_mask;
  #line 224 
  *cam0 = ~ *cam1 & kw_mask;
  #line 225 
  return;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_config_mcam_entry(struct rvu *rvu, struct npc_mcam *mcam, int blkaddr, int index, u8 intf, struct mcam_entry *entry, bool enable)
{
  #line 232 
  int actbank;
  #line 232 
  int actindex;
  #line 233 
  u64 cam0;
  #line 233 
  u64 cam1;
  #line 231 
  int bank = npc_get_bank(mcam,index);
  #line 232 
  int kw = 0;
  #line 235 
  actbank = bank;
  #line 236 
  actindex = index;
  #line 237 
  index = ((int)mcam->banksize + -1) & index;
  #line 240 
  npc_enable_mcam_entry(rvu,mcam,blkaddr,actindex,(_Bool)0);
  #line 243 
  npc_clear_mcam_entry(rvu,mcam,blkaddr,actindex);
  #line 251 
  while ((int)mcam->banks_per_entry + actbank > bank) {
    #line 253 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((index << 10) | 16777216) | (bank << 6)) | 8),(unsigned long long)intf);
    #line 256 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 10) | 16777216) | (bank << 6)),(unsigned long long)(~ ((int)intf)) & 3ULL);
    #line 261 
    npc_get_keyword(entry,kw,& cam0,& cam1);
    #line 262 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((index << 10) | 16777232) | (bank << 6)) | 8),cam1);
    #line 264 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 10) | 16777232) | (bank << 6)),cam0);
    #line 267 
    npc_get_keyword(entry,kw + 1,& cam0,& cam1);
    #line 268 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((index << 10) | 16777248) | (bank << 6)) | 8),cam1);
    #line 270 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 10) | 16777248) | (bank << 6)),cam0);
    #line 251 
    bank ++;
    #line 251 
    kw += 2;
  }
  #line 275 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 8) | 26214400) | (actbank << 4)),entry->action);
  #line 279 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 8) | 26214408) | (actbank << 4)),entry->vtag_action);
  #line 283 
  if ((int)enable != 0) 
                        #line 284 
                        npc_enable_mcam_entry(rvu,mcam,blkaddr,actindex,(_Bool)1);
  #line 285 
  return;
}

#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_copy_mcam_entry(struct rvu *rvu, struct npc_mcam *mcam, int blkaddr, u16 src, u16 dest)
{
  #line 292 
  u64 cfg;
  #line 292 
  u64 sreg;
  #line 292 
  u64 dreg;
  #line 293 
  int bank;
  #line 293 
  int i;
  #line 290 
  int dbank = npc_get_bank(mcam,(int)dest);
  #line 291 
  int sbank = npc_get_bank(mcam,(int)src);
  #line 295 
  src = (unsigned short)(((unsigned int)mcam->banksize + 65535U) & (unsigned int)src);
  #line 296 
  dest = (unsigned short)(((unsigned int)mcam->banksize + 65535U) & (unsigned int)dest);
  #line 299 
  bank = 0;
  #line 299 
  while ((int)mcam->banks_per_entry > bank) {
    #line 300 
    sreg = (unsigned long long)((((int)src << 10) | 16777216) | ((sbank + bank) << 6));
    #line 301 
    dreg = (unsigned long long)((((int)dest << 10) | 16777216) | ((dbank + bank) << 6));
    #line 302 
    i = 0;
    #line 302 
    while (i <= 5) {
      #line 303 
      cfg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)(i * 8) + sreg);
      #line 304 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(i * 8) + dreg,cfg);
      #line 302 
      i ++;
    }
    #line 299 
    bank ++;
  }
  #line 309 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((int)src << 8) | 26214400) | (sbank << 4)));
  #line 311 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((int)dest << 8) | 26214400) | (dbank << 4)),cfg);
  #line 315 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((int)src << 8) | 26214408) | (sbank << 4)));
  #line 317 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((int)dest << 8) | 26214408) | (dbank << 4)),cfg);
  #line 321 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((int)src << 8) | 25165824) | (sbank << 4)));
  #line 323 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((int)dest << 8) | 25165824) | (dbank << 4)),cfg);
  #line 325 
  return;
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static u64 npc_get_mcam_action(struct rvu *rvu, struct npc_mcam *mcam, int blkaddr, int index)
{
  #line 330 
  int bank = npc_get_bank(mcam,index);
  #line 332 
  index = ((int)mcam->banksize + -1) & index;
  #line 333 
  return rvu_read64(rvu,(unsigned long long)blkaddr,
                   (unsigned long long)(((index << 8) | 26214400) | (
                                        bank << 4)));
}

#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_install_ucast_entry(struct rvu *rvu, u16 pcifunc, int nixlf, u64 chan, u8 *mac_addr)
{
  #line 343 
  struct nix_rx_action action;
  #line 344 
  int blkaddr;
  #line 344 
  int index;
  #line 344 
  int kwi;
  #line 340 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 341 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 342 
  struct mcam_entry entry = {.kw = {0ULL}, .kw_mask = {0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL}, .action = 0ULL, .vtag_action = 0ULL};
  #line 345 
  u64 mac = 0ULL;
  #line 348 
  if (is_afvf((unsigned short)((int)pcifunc)) != 0) 
                                                    #line 349 
                                                    return;
  #line 351 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 352 
  if (blkaddr < 0) 
                   #line 353 
                   return;
  #line 355 
  index = 5;
  #line 355 
  while (index >= 0) {
    #line 356 
    u8 *tmp_1;
    #line 356 
    tmp_1 = mac_addr;
    #line 356 
    mac_addr ++;
    #line 356 
    mac = ((unsigned long long)*tmp_1 << index * 8) | mac;
    #line 355 
    index --;
  }
  #line 358 
  index = npc_get_nixlf_mcam_index(mcam,(unsigned short)((int)pcifunc),nixlf,0);
  #line 362 
  entry.kw[0] = chan;
  #line 363 
  entry.kw_mask[0] = 4095ULL;
  #line 365 
  kwi = 1;
  #line 366 
  entry.kw[kwi] = mac;
  #line 367 
  entry.kw_mask[kwi] = 281474976710655ULL;
  #line 372 
  if ((int)is_mcam_entry_enabled(rvu,mcam,blkaddr,index) != 0) 
                                                               #line 373 
                                                               *((u64 *)(& action)) = npc_get_mcam_action(rvu,mcam,blkaddr,index);
  else {
    #line 376 
    *((u64 *)(& action)) = 0ULL;
    #line 377 
    action.op = (unsigned long long)1U;
    #line 378 
    action.pf_func = (unsigned long long)pcifunc;
  }
  #line 381 
  entry.action = *((u64 *)(& action));
  #line 382 
  npc_config_mcam_entry(rvu,mcam,blkaddr,index,(unsigned char)0,& entry,(_Bool)1);
  #line 386 
  entry.kw[0] |= 3145728ULL;
  #line 387 
  entry.kw_mask[0] |= 2097152ULL;
  #line 389 
  entry.vtag_action = ((0ULL | 0ULL) | 12ULL) | 32768ULL;
  #line 394 
  memcpy((void *)(& pfvf->entry),(void *)(& entry),128UL);
  #line 395 
  return;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_install_promisc_entry(struct rvu *rvu, u16 pcifunc, int nixlf, u64 chan, bool allmulti)
{
  #line 401 
  int blkaddr;
  #line 401 
  int ucast_idx;
  #line 401 
  int index;
  #line 401 
  int kwi;
  #line 400 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 402 
  struct mcam_entry entry = {.kw = {0ULL}, .kw_mask = {0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL}, .action = 0ULL, .vtag_action = 0ULL};
  #line 403 
  struct nix_rx_action action = {.op = 0ULL, .pf_func = 0ULL, .index = 0ULL, .match_id = 0ULL, .flow_key_alg = 0ULL, .rsvd_63_61 = 0ULL};
  #line 406 
  if (((int)pcifunc & 1023) != 0) {
    #line 406 
    if (is_afvf((unsigned short)((int)pcifunc)) == 0) 
                                                      #line 407 
                                                      return;
  }
  #line 409 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 410 
  if (blkaddr < 0) 
                   #line 411 
                   return;
  #line 413 
  index = npc_get_nixlf_mcam_index(mcam,(unsigned short)((int)pcifunc),nixlf,2);
  #line 416 
  entry.kw[0] = chan;
  #line 417 
  entry.kw_mask[0] = 4095ULL;
  #line 419 
  if ((int)allmulti != 0) {
    #line 420 
    kwi = 1;
    #line 421 
    entry.kw[kwi] = 1099511627776ULL;
    #line 422 
    entry.kw_mask[kwi] = 1099511627776ULL;
  }
  #line 425 
  ucast_idx = npc_get_nixlf_mcam_index(mcam,(unsigned short)((int)pcifunc),nixlf,0);
  #line 431 
  if ((int)is_mcam_entry_enabled(rvu,mcam,blkaddr,ucast_idx) != 0) 
                                                                   #line 432 
                                                                   *((u64 *)(& action)) = npc_get_mcam_action(rvu,mcam,blkaddr,ucast_idx);
  #line 435 
  if ((unsigned int)action.op != 4U) {
    #line 436 
    *((u64 *)(& action)) = 0ULL;
    #line 437 
    action.op = (unsigned long long)1U;
    #line 438 
    action.pf_func = (unsigned long long)pcifunc;
  }
  #line 441 
  entry.action = *((u64 *)(& action));
  #line 442 
  npc_config_mcam_entry(rvu,mcam,blkaddr,index,(unsigned char)0,& entry,(_Bool)1);
  #line 444 
  return;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_enadis_promisc_entry(struct rvu *rvu, u16 pcifunc, int nixlf, bool enable)
{
  #line 450 
  int blkaddr;
  #line 450 
  int index;
  #line 449 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 452 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 453 
  if (blkaddr < 0) 
                   #line 454 
                   return;
  #line 457 
  if (((int)pcifunc & 1023) != 0) 
                                  #line 458 
                                  return;
  #line 460 
  index = npc_get_nixlf_mcam_index(mcam,(unsigned short)((int)pcifunc),nixlf,2);
  #line 462 
  npc_enable_mcam_entry(rvu,mcam,blkaddr,index,(_Bool)((bool)((int)enable) != 0));
  #line 463 
  return;
}

#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_disable_promisc_entry(struct rvu *rvu, u16 pcifunc, int nixlf)
{
  #line 467 
  npc_enadis_promisc_entry(rvu,(unsigned short)((int)pcifunc),nixlf,(_Bool)0);
  #line 468 
  return;
}

#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_enable_promisc_entry(struct rvu *rvu, u16 pcifunc, int nixlf)
{
  #line 472 
  npc_enadis_promisc_entry(rvu,(unsigned short)((int)pcifunc),nixlf,(_Bool)1);
  #line 473 
  return;
}

#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_install_bcast_match_entry(struct rvu *rvu, u16 pcifunc, int nixlf, u64 chan)
{
  #line 481 
  struct nix_rx_action action;
  #line 482 
  struct rvu_pfvf *pfvf;
  #line 483 
  int blkaddr;
  #line 483 
  int index;
  #line 478 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 479 
  struct mcam_entry entry = {.kw = {0ULL}, .kw_mask = {0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL}, .action = 0ULL, .vtag_action = 0ULL};
  #line 480 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 485 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 486 
  if (blkaddr < 0) 
                   #line 487 
                   return;
  #line 490 
  if (is_afvf((unsigned short)((int)pcifunc)) != 0) 
                                                    #line 491 
                                                    return;
  #line 496 
  if (! hw->cap.nix_rx_multicast && ((int)pcifunc & 1023) != 0) 
                                                                #line 497 
                                                                return;
  #line 500 
  pcifunc = (unsigned short)((unsigned int)pcifunc & 64512U);
  #line 501 
  index = npc_get_nixlf_mcam_index(mcam,(unsigned short)((int)pcifunc),nixlf,1);
  #line 505 
  entry.kw[0] = chan;
  #line 506 
  entry.kw_mask[0] = 4095ULL;
  #line 511 
  entry.kw[1] = 281474976710655ULL;
  #line 512 
  entry.kw_mask[1] = 281474976710655ULL;
  #line 514 
  *((u64 *)(& action)) = 0ULL;
  #line 515 
  if (! hw->cap.nix_rx_multicast) {
    #line 520 
    action.op = (unsigned long long)1U;
    #line 521 
    action.pf_func = (unsigned long long)pcifunc;
  }
  else {
    #line 523 
    pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
    #line 524 
    action.index = (unsigned long long)pfvf->bcast_mce_idx;
    #line 525 
    action.op = (unsigned long long)3U;
  }
  #line 528 
  entry.action = *((u64 *)(& action));
  #line 529 
  npc_config_mcam_entry(rvu,mcam,blkaddr,index,(unsigned char)0,& entry,(_Bool)1);
  #line 531 
  return;
}

#line 533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_disable_bcast_entry(struct rvu *rvu, u16 pcifunc)
{
  #line 536 
  int blkaddr;
  #line 536 
  int index;
  #line 535 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 538 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 539 
  if (blkaddr < 0) 
                   #line 540 
                   return;
  #line 543 
  pcifunc = (unsigned short)((unsigned int)pcifunc & 64512U);
  #line 545 
  index = npc_get_nixlf_mcam_index(mcam,(unsigned short)((int)pcifunc),0,1);
  #line 546 
  npc_enable_mcam_entry(rvu,mcam,blkaddr,index,(_Bool)0);
  #line 547 
  return;
}

#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_update_flowkey_alg_idx(struct rvu *rvu, u16 pcifunc, int nixlf, int group, int alg_idx, int mcam_index)
{
  #line 553 
  struct nix_rx_action action;
  #line 554 
  int blkaddr;
  #line 554 
  int index;
  #line 554 
  int bank;
  #line 552 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 556 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 557 
  if (blkaddr < 0) 
                   #line 558 
                   return;
  #line 561 
  if (mcam_index < 0) {
    #line 562 
    if (group != 0) 
                    #line 563 
                    return;
    #line 564 
    index = npc_get_nixlf_mcam_index(mcam,(unsigned short)((int)pcifunc),nixlf,0);
  }
  else 
       #line 568 
       index = mcam_index;
  #line 571 
  if ((int)mcam->total_entries <= index) 
                                         #line 572 
                                         return;
  #line 574 
  bank = npc_get_bank(mcam,index);
  #line 575 
  index = ((int)mcam->banksize + -1) & index;
  #line 577 
  *((u64 *)(& action)) = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 8) | 26214400) | (bank << 4)));
  #line 580 
  if (*((u64 *)(& action)) == 0ULL) 
                                    #line 581 
                                    return;
  #line 583 
  action.op = (unsigned long long)4U;
  #line 584 
  action.pf_func = (unsigned long long)pcifunc;
  #line 585 
  action.index = (unsigned long long)group;
  #line 586 
  action.flow_key_alg = (unsigned long long)alg_idx;
  #line 588 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 8) | 26214400) | (bank << 4)),*((u64 *)(& action)));
  #line 591 
  index = npc_get_nixlf_mcam_index(mcam,(unsigned short)((int)pcifunc),nixlf,2);
  #line 597 
  if ((int)is_mcam_entry_enabled(rvu,mcam,blkaddr,index) != 0) {
    #line 598 
    bank = npc_get_bank(mcam,index);
    #line 599 
    index = ((int)mcam->banksize + -1) & index;
    #line 601 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((index << 8) | 26214400) | (bank << 4)),*((u64 *)(& action)));
  }
  #line 606 
  rvu_npc_update_rxvlan(rvu,(unsigned short)((int)pcifunc),nixlf);
  #line 607 
  return;
}

#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_enadis_default_entries(struct rvu *rvu, u16 pcifunc, int nixlf, bool enable)
{
  #line 613 
  struct nix_rx_action action;
  #line 614 
  int index;
  #line 614 
  int bank;
  #line 614 
  int blkaddr;
  #line 612 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 616 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 617 
  if (blkaddr < 0) 
                   #line 618 
                   return;
  #line 621 
  index = npc_get_nixlf_mcam_index(mcam,(unsigned short)((int)pcifunc),nixlf,0);
  #line 623 
  npc_enable_mcam_entry(rvu,mcam,blkaddr,index,(_Bool)((bool)((int)enable) != 0));
  #line 626 
  if (((int)pcifunc & 1023) != 0) 
                                  #line 627 
                                  return;
  #line 634 
  index = npc_get_nixlf_mcam_index(mcam,(unsigned short)((int)pcifunc),nixlf,1);
  #line 636 
  bank = npc_get_bank(mcam,index);
  #line 637 
  *((u64 *)(& action)) = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((((int)mcam->banksize + -1) & index) << 8) | 26214400) | (bank << 4)));
  #line 639 
  if ((unsigned int)action.op != 3U) 
                                     #line 640 
                                     npc_enable_mcam_entry(rvu,mcam,blkaddr,index,(_Bool)((bool)((int)enable) != 0));
  #line 642 
  if ((int)enable != 0) 
                        #line 643 
                        rvu_npc_enable_promisc_entry(rvu,(unsigned short)((int)pcifunc),nixlf); else 
                                                                    #line 645 
                                                                    rvu_npc_disable_promisc_entry(rvu,(unsigned short)((int)pcifunc),nixlf);
  #line 647 
  rvu_npc_update_rxvlan(rvu,(unsigned short)((int)pcifunc),nixlf);
  #line 648 
  return;
}

#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_disable_default_entries(struct rvu *rvu, u16 pcifunc, int nixlf)
{
  #line 652 
  npc_enadis_default_entries(rvu,(unsigned short)((int)pcifunc),nixlf,(_Bool)0);
  #line 653 
  return;
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_enable_default_entries(struct rvu *rvu, u16 pcifunc, int nixlf)
{
  #line 657 
  npc_enadis_default_entries(rvu,(unsigned short)((int)pcifunc),nixlf,(_Bool)1);
  #line 658 
  return;
}

#line 660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_disable_mcam_entries(struct rvu *rvu, u16 pcifunc, int nixlf)
{
  #line 663 
  int blkaddr;
  #line 662 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 665 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 666 
  if (blkaddr < 0) 
                   #line 667 
                   return;
  #line 669 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 672 
  npc_mcam_free_all_entries(rvu,mcam,blkaddr,(unsigned short)((int)pcifunc));
  #line 675 
  npc_mcam_free_all_counters(rvu,mcam,(unsigned short)((int)pcifunc));
  #line 677 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 679 
  rvu_npc_disable_default_entries(rvu,(unsigned short)((int)pcifunc),nixlf);
  #line 680 
  return;
}

#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_config_ldata_extract(struct rvu *rvu, int blkaddr)
{
  #line 697 
  int lid;
  #line 697 
  int ltype;
  #line 698 
  int lid_count;
  #line 699 
  u64 cfg;
  #line 696 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 701 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,32ULL);
  #line 702 
  lid_count = (int)(cfg >> 4) & 15;
  #line 707 
  lid = 0;
  #line 707 
  while (lid < lid_count) {
    #line 708 
    ltype = 0;
    #line 708 
    while (ltype <= 15) {
      #line 709 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((lid << 12) | 9437184) | (ltype << 5)),0ULL);
      #line 710 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((lid << 12) | 9437184) | (ltype << 5)) | 8),0ULL);
      #line 711 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((lid << 12) | 9502720) | (ltype << 5)),0ULL);
      #line 712 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((lid << 12) | 9502720) | (ltype << 5)) | 8),0ULL);
      #line 714 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((ltype << 3) | 9961472),0ULL);
      #line 715 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((ltype << 3) | 9965568),0ULL);
      #line 716 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((ltype << 3) | 10027008),0ULL);
      #line 717 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((ltype << 3) | 10031104),0ULL);
      #line 708 
      ltype ++;
    }
    #line 707 
    lid ++;
  }
  #line 721 
  if ((unsigned int)mcam->keysize != 1U) 
                                         #line 722 
                                         return;
  #line 728 
  cfg = 327816ULL;
  #line 729 
  rvu_write64(rvu,(unsigned long long)blkaddr,9437248ULL,cfg);
  #line 732 
  cfg = 68740ULL;
  #line 733 
  rvu_write64(rvu,(unsigned long long)blkaddr,9437256ULL,cfg);
  #line 737 
  cfg = 196740ULL;
  #line 738 
  rvu_write64(rvu,(unsigned long long)blkaddr,9441344ULL,cfg);
  #line 742 
  cfg = 197764ULL;
  #line 743 
  rvu_write64(rvu,(unsigned long long)blkaddr,9441376ULL,cfg);
  #line 747 
  cfg = 461968ULL;
  #line 748 
  rvu_write64(rvu,(unsigned long long)blkaddr,9445408ULL,cfg);
  #line 750 
  cfg = 399ULL;
  #line 751 
  rvu_write64(rvu,(unsigned long long)blkaddr,9445416ULL,cfg);
  #line 755 
  cfg = 65688ULL;
  #line 756 
  rvu_write64(rvu,(unsigned long long)blkaddr,9449536ULL,cfg);
  #line 758 
  cfg = 66202ULL;
  #line 759 
  rvu_write64(rvu,(unsigned long long)blkaddr,9449544ULL,cfg);
  #line 763 
  cfg = 65688ULL;
  #line 764 
  rvu_write64(rvu,(unsigned long long)blkaddr,9449504ULL,cfg);
  #line 766 
  cfg = 66202ULL;
  #line 767 
  rvu_write64(rvu,(unsigned long long)blkaddr,9449512ULL,cfg);
  #line 768 
  return;
}

#line 770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_program_mkex_profile(struct rvu *rvu, int blkaddr, struct npc_mcam_kex *mkex)
{
  #line 773 
  int lid;
  #line 773 
  int lt;
  #line 773 
  int ld;
  #line 773 
  int fl;
  #line 775 
  rvu_write64(rvu,(unsigned long long)blkaddr,4112ULL,mkex->keyx_cfg[0]);
  #line 777 
  rvu_write64(rvu,(unsigned long long)blkaddr,4368ULL,mkex->keyx_cfg[1]);
  #line 780 
  ld = 0;
  #line 780 
  while (ld <= 1) {
    #line 781 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((ld << 3) | 2048),mkex->kex_ld_flags[ld]);
    #line 780 
    ld ++;
  }
  #line 784 
  lid = 0;
  #line 784 
  while (lid <= 7) {
    #line 785 
    lt = 0;
    #line 785 
    while (lt <= 15) {
      #line 786 
      ld = 0;
      #line 786 
      while (ld <= 1) {
        #line 787 
        rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((lid << 12) | 9437184) | (lt << 5)) | (ld << 3)),mkex->intf_lid_lt_ld[0][lid][lt][ld]);
        #line 791 
        rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((lid << 12) | 9502720) | (lt << 5)) | (ld << 3)),mkex->intf_lid_lt_ld[1][lid][lt][ld]);
        #line 786 
        ld ++;
      }
      #line 785 
      lt ++;
    }
    #line 784 
    lid ++;
  }
  #line 798 
  ld = 0;
  #line 798 
  while (ld <= 1) {
    #line 799 
    fl = 0;
    #line 799 
    while (fl <= 15) {
      #line 800 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((ld << 12) | 9961472) | (fl << 3)),mkex->intf_ld_flags[0][ld][fl]);
      #line 804 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((ld << 12) | 10027008) | (fl << 3)),mkex->intf_ld_flags[1][ld][fl]);
      #line 799 
      fl ++;
    }
    #line 798 
    ld ++;
  }
  #line 807 
  return;
}

#line 815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_load_mkex_profile(struct rvu *rvu, int blkaddr)
{
  #line 820 
  struct npc_mcam_kex *mcam_kex;
  #line 821 
  u64 prfl_addr;
  #line 822 
  u64 prfl_sz;
  #line 817 
  char *mkex_profile_0 = (char *)(& rvu->mkex_pfl_name);
  #line 818 
  struct device *dev = & (rvu->pdev)->dev;
  #line 819 
  void *mkex_prfl_addr = (void *)0;
  #line 825 
  if (cif_strncmp_0(mkex_profile_0,(char *)"default",128UL) == 0) 
                                                                  #line 826 
                                                                  goto load_default;
  #line 828 
  if (cgx_get_mkex_prfl_info(& prfl_addr,& prfl_sz) != 0) 
                                                          #line 829 
                                                          goto load_default;
  #line 831 
  if (prfl_addr == 0ULL || prfl_sz == 0ULL) 
                                            #line 832 
                                            goto load_default;
  #line 834 
  mkex_prfl_addr = ioremap_wc(prfl_addr,(unsigned long)prfl_sz);
  #line 835 
  if (mkex_prfl_addr == (void *)0) 
                                   #line 836 
                                   goto load_default;
  #line 838 
  mcam_kex = (struct npc_mcam_kex *)mkex_prfl_addr;
  #line 840 
  while ((long long)prfl_sz > 0LL && mcam_kex->mkex_sign != 3735928559ULL) {
    #line 842 
    if (mcam_kex->mkex_sign == 1768450412895ULL) {
      #line 842 
      if (cif_strncmp_0((char *)(& mcam_kex->name),mkex_profile_0,128UL) == 0) {
        #line 848 
        if ((int)is_rvu_96xx_B0(rvu) != 0) 
          #line 848 
          if (mcam_kex->keyx_cfg[0] != mcam_kex->keyx_cfg[1]) 
                                                              #line 851 
                                                              goto load_default;
        #line 854 
        npc_program_mkex_profile(rvu,blkaddr,mcam_kex);
        #line 856 
        goto unmap;
      }
    }
    #line 859 
    mcam_kex ++;
    #line 860 
    prfl_sz += 18446744073709546816ULL;
  }
  #line 862 
  _dev_warn(dev,(char *)"Failed to load requested profile: %s\n",(char *)(& rvu->mkex_pfl_name));
  #line 865 
  load_default: 
                #line 865 
  ;
  #line 866 
  _dev_info(rvu->dev,(char *)"Using default mkex profile\n");
  #line 868 
  npc_config_ldata_extract(rvu,blkaddr);
  #line 870 
  unmap: 
         #line 870 
  ;
  #line 871 
  if (mkex_prfl_addr != (void *)0) 
                                   #line 872 
                                   iounmap(mkex_prfl_addr);
  #line 873 
  return;
}

#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_config_kpuaction(struct rvu *rvu, int blkaddr, struct npc_kpu_profile_action *kpuaction, int kpu, int entry, bool pkind)
{
  #line 881 
  u64 reg;
  #line 879 
  struct npc_kpu_action0 action0 = {.var_len_shift = (unsigned long long)0U, .var_len_right = 0ULL, .var_len_mask = 0ULL, .var_len_offset = 0ULL, .ptr_advance = 0ULL, .capture_flags = 0ULL, .capture_ltype = 0ULL, .capture_lid = 0ULL, .rsvd_43 = 0ULL, .next_state = 0ULL, .parse_done = 0ULL, .capture_ena = 0ULL, .byp_count = 0ULL, .rsvd_63_57 = 0ULL};
  #line 880 
  struct npc_kpu_action1 action1 = {.dp0_offset = (unsigned long long)0U, .dp1_offset = 0ULL, .dp2_offset = 0ULL, .errcode = 0ULL, .errlev = 0ULL, .rsvd_63_36 = 0ULL};
  #line 883 
  action1.errlev = (unsigned long long)kpuaction->errlev;
  #line 884 
  action1.errcode = (unsigned long long)kpuaction->errcode;
  #line 885 
  action1.dp0_offset = (unsigned long long)kpuaction->dp0_offset;
  #line 886 
  action1.dp1_offset = (unsigned long long)kpuaction->dp1_offset;
  #line 887 
  action1.dp2_offset = (unsigned long long)kpuaction->dp2_offset;
  #line 889 
  if ((int)pkind != 0) 
                       #line 890 
                       reg = (unsigned long long)((entry << 6) | 524296); else 
                                                                    #line 892 
                                                                    reg = (unsigned long long)(((kpu << 14) | 1048616) | (entry << 6));
  #line 894 
  rvu_write64(rvu,(unsigned long long)blkaddr,reg,*((u64 *)(& action1)));
  #line 896 
  action0.byp_count = (unsigned long long)kpuaction->bypass_count;
  #line 897 
  action0.capture_ena = (unsigned long long)kpuaction->cap_ena;
  #line 898 
  action0.parse_done = (unsigned long long)kpuaction->parse_done;
  #line 899 
  action0.next_state = (unsigned long long)kpuaction->next_state;
  #line 900 
  action0.capture_lid = (unsigned long long)kpuaction->lid;
  #line 901 
  action0.capture_ltype = (unsigned long long)kpuaction->ltype;
  #line 902 
  action0.capture_flags = (unsigned long long)kpuaction->flags;
  #line 903 
  action0.ptr_advance = (unsigned long long)kpuaction->ptr_advance;
  #line 904 
  action0.var_len_offset = (unsigned long long)kpuaction->offset;
  #line 905 
  action0.var_len_mask = (unsigned long long)kpuaction->mask;
  #line 906 
  action0.var_len_right = (unsigned long long)kpuaction->right;
  #line 907 
  action0.var_len_shift = (unsigned long long)kpuaction->shift;
  #line 909 
  if ((int)pkind != 0) 
                       #line 910 
                       reg = (unsigned long long)((entry << 6) | 524288); else 
                                                                    #line 912 
                                                                    reg = (unsigned long long)(((kpu << 14) | 1048608) | (entry << 6));
  #line 914 
  rvu_write64(rvu,(unsigned long long)blkaddr,reg,*((u64 *)(& action0)));
  #line 915 
  return;
}

#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_config_kpucam(struct rvu *rvu, int blkaddr, struct npc_kpu_profile_cam *kpucam, int kpu, int entry)
{
  #line 921 
  struct npc_kpu_cam cam0 = {.dp0_data = (unsigned long long)0U, .dp1_data = 0ULL, .dp2_data = 0ULL, .state = 0ULL, .rsvd_63_56 = 0ULL};
  #line 922 
  struct npc_kpu_cam cam1 = {.dp0_data = (unsigned long long)0U, .dp1_data = 0ULL, .dp2_data = 0ULL, .state = 0ULL, .rsvd_63_56 = 0ULL};
  #line 924 
  cam1.state = (unsigned long long)((int)kpucam->state & (int)kpucam->state_mask);
  #line 925 
  cam1.dp0_data = (unsigned long long)((int)kpucam->dp0 & (int)kpucam->dp0_mask);
  #line 926 
  cam1.dp1_data = (unsigned long long)((int)kpucam->dp1 & (int)kpucam->dp1_mask);
  #line 927 
  cam1.dp2_data = (unsigned long long)((int)kpucam->dp2 & (int)kpucam->dp2_mask);
  #line 929 
  cam0.state = (unsigned long long)((unsigned char)(~ ((int)kpucam->state) & (int)kpucam->state_mask));
  #line 930 
  cam0.dp0_data = (unsigned long long)((unsigned short)(~ ((int)kpucam->dp0) & (int)kpucam->dp0_mask));
  #line 931 
  cam0.dp1_data = (unsigned long long)((unsigned short)(~ ((int)kpucam->dp1) & (int)kpucam->dp1_mask));
  #line 932 
  cam0.dp2_data = (unsigned long long)((unsigned short)(~ ((int)kpucam->dp2) & (int)kpucam->dp2_mask));
  #line 934 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((kpu << 14) | 1048576) | (entry << 6)),*((u64 *)(& cam0)));
  #line 936 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((kpu << 14) | 1048576) | (entry << 6)) | 8),*((u64 *)(& cam1)));
  #line 938 
  return;
}

#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
__inline static u64 enable_mask(int count)
{
  #line 942 
  unsigned long long tmp;
  #line 942 
  if (count <= 63) 
                   #line 942 
                   tmp = - (1ULL << count); else 
                                                 #line 942 
                                                 tmp = 0ULL;
  #line 942 
  return tmp;
}

#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_program_kpu_profile(struct rvu *rvu, int blkaddr, int kpu, struct npc_kpu_profile *profile)
{
  #line 959 
  int __UNIQUE_ID___x436;
  #line 959 
  int tmp_0;
  #line 965 
  int __UNIQUE_ID___x438;
  #line 965 
  int tmp_2;
  #line 971 
  int __UNIQUE_ID___x440;
  #line 971 
  int tmp_4;
  #line 948 
  int entry;
  #line 948 
  int num_entries;
  #line 948 
  int max_entries;
  #line 950 
  if (profile->cam_entries != profile->action_entries) 
                                                       #line 951 
                                                       _dev_err(rvu->dev,(char *)"KPU%d: CAM and action entries [%d != %d] not equal\n",kpu,profile->cam_entries,profile->action_entries);
  #line 956 
  max_entries = (int)rvu_read64(rvu,(unsigned long long)blkaddr,48ULL) & 4095;
  {
    #line 959 
    __UNIQUE_ID___x436 = profile->cam_entries;
    #line 959 
    int __UNIQUE_ID___y437 = max_entries;
    #line 959 
    if (__UNIQUE_ID___x436 < __UNIQUE_ID___y437) 
                                                 #line 959 
                                                 tmp_0 = __UNIQUE_ID___x436; else 
                                                                    #line 959 
                                                                    tmp_0 = __UNIQUE_ID___y437;
    }
  #line 959 
  num_entries = tmp_0;
  #line 960 
  entry = 0;
  #line 960 
  while (entry < num_entries) {
    #line 961 
    npc_config_kpucam(rvu,blkaddr,profile->cam + (unsigned long)entry,kpu,entry);
    #line 960 
    entry ++;
  }
  {
    #line 965 
    __UNIQUE_ID___x438 = profile->action_entries;
    #line 965 
    int __UNIQUE_ID___y439 = max_entries;
    #line 965 
    if (__UNIQUE_ID___x438 < __UNIQUE_ID___y439) 
                                                 #line 965 
                                                 tmp_2 = __UNIQUE_ID___x438; else 
                                                                    #line 965 
                                                                    tmp_2 = __UNIQUE_ID___y439;
    }
  #line 965 
  num_entries = tmp_2;
  #line 966 
  entry = 0;
  #line 966 
  while (entry < num_entries) {
    #line 967 
    npc_config_kpuaction(rvu,blkaddr,profile->action + (unsigned long)entry,kpu,entry,(_Bool)0);
    #line 966 
    entry ++;
  }
  {
    #line 971 
    __UNIQUE_ID___x440 = profile->action_entries;
    #line 971 
    int __UNIQUE_ID___y441 = profile->cam_entries;
    #line 971 
    if (__UNIQUE_ID___x440 < __UNIQUE_ID___y441) 
                                                 #line 971 
                                                 tmp_4 = __UNIQUE_ID___x440; else 
                                                                    #line 971 
                                                                    tmp_4 = __UNIQUE_ID___y441;
    }
  #line 971 
  num_entries = tmp_4;
  #line 972 
  ;
  #line 972 
  ;
  #line 972 
  ;
  #line 972 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((kpu << 6) | 1572864),enable_mask(num_entries));
  #line 974 
  if (num_entries > 64) {
    #line 975 
    ;
    #line 975 
    ;
    #line 975 
    ;
    #line 975 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((kpu << 6) | 1572872),enable_mask(num_entries + -64));
  }
  #line 981 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((kpu << 3) | 1280),1ULL);
  #line 982 
  return;
}

#line 984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_parser_profile_init(struct rvu *rvu, int blkaddr)
{
  #line 1008 
  int __UNIQUE_ID___x442;
  #line 1008 
  int tmp_0;
  #line 1016 
  int __UNIQUE_ID___x444;
  #line 1016 
  int tmp_2;
  #line 987 
  int num_pkinds;
  #line 987 
  int num_kpus;
  #line 987 
  int idx;
  #line 988 
  struct npc_pkind *pkind;
  #line 986 
  struct rvu_hwinfo *hw = rvu->hw;
  #line 991 
  hw->npc_kpus = (unsigned char)((unsigned int)((unsigned char)(rvu_read64(rvu,(unsigned long long)blkaddr,32ULL) >> 8)) & 31U);
  #line 994 
  idx = 0;
  #line 994 
  while ((int)hw->npc_kpus > idx) {
    #line 995 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((idx << 6) | 1572864),18446744073709551615ULL);
    #line 997 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((idx << 6) | 1572872),18446744073709551615ULL);
    #line 999 
    rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((idx << 3) | 1280),0ULL);
    #line 994 
    idx ++;
  }
  #line 1006 
  pkind = & hw->pkind;
  #line 1007 
  num_pkinds = 64;
  {
    #line 1008 
    __UNIQUE_ID___x442 = (int)pkind->rsrc.max;
    #line 1008 
    int __UNIQUE_ID___y443 = num_pkinds;
    #line 1008 
    if (__UNIQUE_ID___x442 < __UNIQUE_ID___y443) 
                                                 #line 1008 
                                                 tmp_0 = __UNIQUE_ID___x442; else 
                                                                    #line 1008 
                                                                    tmp_0 = __UNIQUE_ID___y443;
    }
  #line 1008 
  num_pkinds = tmp_0;
  #line 1010 
  idx = 0;
  #line 1010 
  while (idx < num_pkinds) {
    #line 1011 
    npc_config_kpuaction(rvu,blkaddr,& ikpu_action_entries[idx],0,idx,(_Bool)1);
    #line 1010 
    idx ++;
  }
  #line 1015 
  num_kpus = 16;
  {
    #line 1016 
    __UNIQUE_ID___x444 = (int)hw->npc_kpus;
    #line 1016 
    int __UNIQUE_ID___y445 = num_kpus;
    #line 1016 
    if (__UNIQUE_ID___x444 < __UNIQUE_ID___y445) 
                                                 #line 1016 
                                                 tmp_2 = __UNIQUE_ID___x444; else 
                                                                    #line 1016 
                                                                    tmp_2 = __UNIQUE_ID___y445;
    }
  #line 1016 
  num_kpus = tmp_2;
  #line 1018 
  idx = 0;
  #line 1018 
  while (idx < num_kpus) {
    #line 1019 
    npc_program_kpu_profile(rvu,blkaddr,idx,& npc_kpu_profiles[idx]);
    #line 1018 
    idx ++;
  }
  #line 1021 
  return;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static int npc_mcam_rsrcs_init(struct rvu *rvu, int blkaddr)
{
  #line 1027 
  int rsvd;
  #line 1027 
  int err;
  #line 1028 
  u64 cfg;
  #line 1025 
  int nixlf_count = rvu_get_nixlf_count(rvu);
  #line 1026 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 1031 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,32ULL);
  #line 1032 
  mcam->banks = (unsigned char)((unsigned int)((unsigned char)(cfg >> 44)) & 15U);
  #line 1033 
  mcam->banksize = (unsigned short)(cfg >> 28);
  #line 1034 
  mcam->counters.max = (unsigned short)(cfg >> 48);
  #line 1037 
  cfg = (rvu_read64(rvu,(unsigned long long)blkaddr,4112ULL) >> 32) & 7ULL;
  #line 1039 
  mcam->total_entries = (unsigned short)((int)((unsigned short)((unsigned long long)mcam->banks >> cfg)) * (int)mcam->banksize);
  #line 1040 
  mcam->keysize = (unsigned char)cfg;
  #line 1043 
  if (cfg == 2ULL) 
                   #line 1044 
                   mcam->banks_per_entry = (unsigned char)4U;
  else 
    #line 1045 
    if (cfg == 1ULL) 
                     #line 1046 
                     mcam->banks_per_entry = (unsigned char)2U; else 
                                                                  #line 1048 
                                                                  mcam->banks_per_entry = (unsigned char)1U;
  #line 1057 
  rsvd = ((int)(rvu->hw)->total_pfs + -1) * 2 + nixlf_count;
  #line 1059 
  if ((int)mcam->total_entries <= rsvd) {
    #line 1060 
    _dev_warn(rvu->dev,(char *)"Insufficient NPC MCAM size %d for pkt I/O, exiting\n",(int)mcam->total_entries);
    #line 1063 
    return -12;
  }
  #line 1066 
  mcam->bmap_entries = (unsigned short)((int)mcam->total_entries - (int)((unsigned short)rsvd));
  #line 1067 
  mcam->nixlf_offset = mcam->bmap_entries;
  #line 1068 
  mcam->pf_offset = (unsigned short)((int)mcam->nixlf_offset + (int)((unsigned short)nixlf_count));
  #line 1071 
  mcam->bmap = (unsigned long *)cif_devm_kcalloc_1(rvu->dev,((unsigned long)mcam->bmap_entries + 63UL) / 64UL,8UL,3264U);
  #line 1073 
  if (mcam->bmap == (unsigned long *)0UL) 
                                          #line 1074 
                                          return -12;
  #line 1076 
  mcam->bmap_reverse = (unsigned long *)cif_devm_kcalloc_1(rvu->dev,((unsigned long)mcam->bmap_entries + 63UL) / 64UL,8UL,3264U);
  #line 1079 
  if (mcam->bmap_reverse == (unsigned long *)0UL) 
                                                  #line 1080 
                                                  return -12;
  #line 1082 
  mcam->bmap_fcnt = mcam->bmap_entries;
  #line 1085 
  mcam->entry2pfvf_map = (u16 *)cif_devm_kcalloc_1(rvu->dev,(unsigned long)mcam->bmap_entries,2UL,3264U);
  #line 1087 
  if (mcam->entry2pfvf_map == (u16 *)0U) 
                                         #line 1088 
                                         return -12;
  #line 1094 
  mcam->lprio_count = (unsigned short)((unsigned int)mcam->bmap_entries / 8U);
  #line 1095 
  if ((unsigned int)mcam->lprio_count > 64U) 
                                             #line 1096 
                                             mcam->lprio_count = (unsigned short)((unsigned int)mcam->lprio_count & 65472U);
  #line 1098 
  mcam->lprio_start = (unsigned short)((int)mcam->bmap_entries - (int)mcam->lprio_count);
  #line 1099 
  mcam->hprio_count = mcam->lprio_count;
  #line 1100 
  mcam->hprio_end = mcam->hprio_count;
  #line 1106 
  mcam->counters.max = (u16)((int)mcam->counters.max - 1);
  #line 1107 
  mcam->rx_miss_act_cntr = mcam->counters.max;
  #line 1112 
  err = rvu_alloc_bitmap(& mcam->counters);
  #line 1113 
  if (err != 0) 
                #line 1114 
                return err;
  #line 1116 
  mcam->cntr2pfvf_map = (u16 *)cif_devm_kcalloc_1(rvu->dev,(unsigned long)mcam->counters.max,2UL,3264U);
  #line 1118 
  if (mcam->cntr2pfvf_map == (u16 *)0U) 
                                        #line 1119 
                                        goto free_mem;
  #line 1124 
  mcam->entry2cntr_map = (u16 *)cif_devm_kcalloc_1(rvu->dev,(unsigned long)mcam->bmap_entries,2UL,3264U);
  #line 1126 
  if (mcam->entry2cntr_map == (u16 *)0U) 
                                         #line 1127 
                                         goto free_mem;
  #line 1129 
  mcam->cntr_refcnt = (u16 *)cif_devm_kcalloc_1(rvu->dev,(unsigned long)mcam->counters.max,2UL,3264U);
  #line 1131 
  if (mcam->cntr_refcnt == (u16 *)0U) 
                                      #line 1132 
                                      goto free_mem;
  {
    #line 1134 
    struct lock_class_key __key;
    #line 1134 
    __mutex_init(& mcam->lock,(char *)"&mcam->lock",& __key);
  }
  #line 1136 
  return 0;
  #line 1138 
  free_mem: 
            #line 1138 
  ;
  #line 1139 
  kfree((void *)mcam->counters.bmap);
  #line 1140 
  return -12;
}

#line 1143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_npc_init(struct rvu *rvu)
{
  #line 1148 
  int blkaddr;
  #line 1148 
  int entry;
  #line 1148 
  int bank;
  #line 1148 
  int err;
  #line 1149 
  u64 cfg;
  #line 1149 
  u64 nibble_ena;
  #line 1145 
  struct npc_pkind *pkind = & (rvu->hw)->pkind;
  #line 1146 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 1147 
  u64 keyz = 1ULL;
  #line 1151 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 1152 
  if (blkaddr < 0) {
    #line 1153 
    _dev_err(rvu->dev,(char *)"%s: NPC block not implemented\n",(char *)"rvu_npc_init");
    #line 1154 
    return -19;
  }
  #line 1158 
  cfg = rvu_read64(rvu,(unsigned long long)blkaddr,32ULL);
  #line 1159 
  bank = 0;
  #line 1159 
  while ((unsigned long long)bank < ((cfg >> 44) & 15ULL)) {
    #line 1160 
    entry = 0;
    #line 1160 
    while ((unsigned long long)entry < ((cfg >> 28) & 65535ULL)) {
      #line 1161 
      rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((entry << 8) | 25165824) | (bank << 4)),0ULL);
      #line 1160 
      entry ++;
    }
    #line 1159 
    bank ++;
  }
  #line 1166 
  pkind->rsrc.max = (unsigned short)((unsigned int)((unsigned short)(rvu_read64(rvu,(unsigned long long)blkaddr,48ULL) >> 12)) & 255U);
  #line 1168 
  err = rvu_alloc_bitmap(& pkind->rsrc);
  #line 1169 
  if (err != 0) 
                #line 1170 
                return err;
  #line 1173 
  pkind->pfchan_map = (u32 *)cif_devm_kcalloc_1(rvu->dev,(unsigned long)pkind->rsrc.max,4UL,3264U);
  #line 1175 
  if (pkind->pfchan_map == (u32 *)0U) 
                                      #line 1176 
                                      return -12;
  #line 1179 
  npc_parser_profile_init(rvu,blkaddr);
  #line 1182 
  rvu_write64(rvu,(unsigned long long)blkaddr,1552ULL,47ULL);
  #line 1184 
  rvu_write64(rvu,(unsigned long long)blkaddr,1568ULL,543ULL);
  #line 1188 
  rvu_write64(rvu,(unsigned long long)blkaddr,1600ULL,1567ULL);
  #line 1197 
  ;
  #line 1197 
  ;
  #line 1197 
  rvu_write64(rvu,(unsigned long long)blkaddr,1536ULL,rvu_read64(rvu,(unsigned long long)blkaddr,1536ULL) | 4311744582ULL);
  #line 1205 
  nibble_ena = 299591ULL;
  #line 1206 
  rvu_write64(rvu,(unsigned long long)blkaddr,4112ULL,((keyz << 32) & 12884901888ULL) | nibble_ena);
  #line 1211 
  if (! is_rvu_96xx_B0(rvu)) 
                             #line 1212 
                             nibble_ena = 524287ULL;
  #line 1213 
  rvu_write64(rvu,(unsigned long long)blkaddr,4368ULL,((keyz << 32) & 12884901888ULL) | nibble_ena);
  #line 1216 
  err = npc_mcam_rsrcs_init(rvu,blkaddr);
  #line 1217 
  if (err != 0) 
                #line 1218 
                return err;
  #line 1221 
  npc_load_mkex_profile(rvu,blkaddr);
  #line 1226 
  rvu_write64(rvu,(unsigned long long)blkaddr,27262992ULL,1ULL);
  #line 1232 
  rvu_write64(rvu,(unsigned long long)blkaddr,27262976ULL,0ULL);
  #line 1234 
  rvu_write64(rvu,(unsigned long long)blkaddr,25690176ULL,(unsigned long long)((unsigned int)mcam->rx_miss_act_cntr | 512U));
  #line 1237 
  return 0;
}

#line 1240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_freemem(struct rvu *rvu)
{
  #line 1242 
  struct npc_pkind *pkind = & (rvu->hw)->pkind;
  #line 1243 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 1245 
  kfree((void *)pkind->rsrc.bmap);
  #line 1246 
  kfree((void *)mcam->counters.bmap);
  #line 1247 
  mutex_destroy(& mcam->lock);
  #line 1248 
  return;
}

#line 1250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_get_mcam_entry_alloc_info(struct rvu *rvu, u16 pcifunc, int blkaddr, int *alloc_cnt, int *enable_cnt)
{
  #line 1255 
  int entry;
  #line 1254 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 1257 
  *alloc_cnt = 0;
  #line 1258 
  *enable_cnt = 0;
  #line 1260 
  entry = 0;
  #line 1260 
  while ((int)mcam->bmap_entries > entry) {
    #line 1261 
    if ((int)*(mcam->entry2pfvf_map + (unsigned long)entry) == (int)pcifunc) {
      #line 1262 
      (*alloc_cnt) ++;
      #line 1263 
      if ((int)is_mcam_entry_enabled(rvu,mcam,blkaddr,entry) != 0) 
                                                                   #line 1264 
                                                                   (*enable_cnt) ++;
    }
    #line 1260 
    entry ++;
  }
  #line 1266 
  return;
}

#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
void rvu_npc_get_mcam_counter_alloc_info(struct rvu *rvu, u16 pcifunc, int blkaddr, int *alloc_cnt, int *enable_cnt)
{
  #line 1274 
  int cntr;
  #line 1273 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 1276 
  *alloc_cnt = 0;
  #line 1277 
  *enable_cnt = 0;
  #line 1279 
  cntr = 0;
  #line 1279 
  while ((int)mcam->counters.max > cntr) {
    #line 1280 
    if ((int)*(mcam->cntr2pfvf_map + (unsigned long)cntr) == (int)pcifunc) {
      #line 1281 
      (*alloc_cnt) ++;
      #line 1282 
      if ((unsigned int)*(mcam->cntr_refcnt + (unsigned long)cntr) != 0U) 
        #line 1283 
        (*enable_cnt) ++;
    }
    #line 1279 
    cntr ++;
  }
  #line 1285 
  return;
}

#line 1288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static int npc_mcam_verify_entry(struct npc_mcam *mcam, u16 pcifunc, int entry)
{
  #line 1294 
  if ((int)mcam->bmap_entries <= entry) 
                                        #line 1295 
                                        return -701;
  #line 1297 
  if ((int)*(mcam->entry2pfvf_map + (unsigned long)entry) != (int)pcifunc) 
    #line 1298 
    return -704;
  #line 1300 
  return 0;
}

#line 1303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static int npc_mcam_verify_counter(struct npc_mcam *mcam, u16 pcifunc, int cntr)
{
  #line 1309 
  if ((int)mcam->counters.max <= cntr) 
                                       #line 1310 
                                       return -701;
  #line 1312 
  if ((int)*(mcam->cntr2pfvf_map + (unsigned long)cntr) != (int)pcifunc) 
    #line 1313 
    return -704;
  #line 1315 
  return 0;
}

#line 1318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_map_mcam_entry_and_cntr(struct rvu *rvu, struct npc_mcam *mcam, int blkaddr, u16 entry, u16 cntr)
{
  #line 1321 
  u16 index = (unsigned short)(((unsigned int)mcam->banksize + 65535U) & (unsigned int)entry);
  #line 1322 
  u16 bank = (unsigned short)npc_get_bank(mcam,(int)entry);
  #line 1325 
  *(mcam->entry2cntr_map + (unsigned long)entry) = cntr;
  #line 1326 
  *(mcam->cntr_refcnt + (unsigned long)cntr) = (u16)((int)*(mcam->cntr_refcnt + (unsigned long)cntr) + 1);
  #line 1328 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((int)index << 8) | 25690112) | ((int)bank << 4)),(unsigned long long)((unsigned int)cntr | 512U));
  #line 1331 
  return;
}

#line 1333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_unmap_mcam_entry_and_cntr(struct rvu *rvu, struct npc_mcam *mcam, int blkaddr, u16 entry, u16 cntr)
{
  #line 1337 
  u16 index = (unsigned short)(((unsigned int)mcam->banksize + 65535U) & (unsigned int)entry);
  #line 1338 
  u16 bank = (unsigned short)npc_get_bank(mcam,(int)entry);
  #line 1341 
  *(mcam->entry2cntr_map + (unsigned long)entry) = (unsigned short)65535U;
  #line 1342 
  *(mcam->cntr_refcnt + (unsigned long)cntr) = (u16)((int)*(mcam->cntr_refcnt + (unsigned long)cntr) - 1);
  #line 1344 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)((((int)index << 8) | 25690112) | ((int)bank << 4)),0ULL);
  #line 1346 
  return;
}

#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_mcam_set_bit(struct npc_mcam *mcam, u16 index)
{
  #line 1354 
  u16 entry;
  #line 1354 
  u16 rentry;
  #line 1356 
  entry = index;
  #line 1357 
  rentry = (unsigned short)((unsigned int)((int)mcam->bmap_entries - (int)index) + 65535U);
  #line 1359 
  __set_bit((long)entry,mcam->bmap);
  #line 1360 
  __set_bit((long)rentry,mcam->bmap_reverse);
  #line 1361 
  mcam->bmap_fcnt = (u16)((int)mcam->bmap_fcnt - 1);
  #line 1362 
  return;
}

#line 1368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_mcam_clear_bit(struct npc_mcam *mcam, u16 index)
{
  #line 1370 
  u16 entry;
  #line 1370 
  u16 rentry;
  #line 1372 
  entry = index;
  #line 1373 
  rentry = (unsigned short)((unsigned int)((int)mcam->bmap_entries - (int)index) + 65535U);
  #line 1375 
  __set_bit((long)entry,mcam->bmap);
  #line 1376 
  __set_bit((long)rentry,mcam->bmap_reverse);
  #line 1377 
  mcam->bmap_fcnt = (u16)((int)mcam->bmap_fcnt + 1);
  #line 1378 
  return;
}

#line 1380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_mcam_free_all_entries(struct rvu *rvu, struct npc_mcam *mcam, int blkaddr, u16 pcifunc)
{
  #line 1383 
  u16 index;
  #line 1383 
  u16 cntr;
  #line 1386 
  index = (unsigned short)0U;
  #line 1386 
  while ((int)mcam->bmap_entries > (int)index) {
    #line 1387 
    if ((int)*(mcam->entry2pfvf_map + (unsigned long)index) == (int)pcifunc) {
      #line 1388 
      *(mcam->entry2pfvf_map + (unsigned long)index) = (unsigned short)65535U;
      #line 1390 
      npc_mcam_clear_bit(mcam,(unsigned short)((int)index));
      #line 1392 
      npc_enable_mcam_entry(rvu,mcam,blkaddr,(int)index,(_Bool)0);
      #line 1395 
      cntr = *(mcam->entry2cntr_map + (unsigned long)index);
      #line 1396 
      if ((unsigned int)cntr != 65535U) 
                                        #line 1397 
                                        npc_unmap_mcam_entry_and_cntr(rvu,mcam,blkaddr,(unsigned short)((int)index),(unsigned short)((int)cntr));
    }
    #line 1386 
    index = (u16)((int)index + 1);
  }
  #line 1399 
  return;
}

#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_mcam_free_all_counters(struct rvu *rvu, struct npc_mcam *mcam, u16 pcifunc)
{
  #line 1407 
  u16 cntr;
  #line 1410 
  cntr = (unsigned short)0U;
  #line 1410 
  while ((int)mcam->counters.max > (int)cntr) {
    #line 1411 
    if ((int)*(mcam->cntr2pfvf_map + (unsigned long)cntr) == (int)pcifunc) {
      #line 1412 
      *(mcam->cntr2pfvf_map + (unsigned long)cntr) = (unsigned short)65535U;
      #line 1413 
      *(mcam->cntr_refcnt + (unsigned long)cntr) = (unsigned short)0U;
      #line 1414 
      rvu_free_rsrc(& mcam->counters,(int)cntr);
    }
    #line 1410 
    cntr = (u16)((int)cntr + 1);
  }
  #line 1416 
  return;
}

#line 1427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static u16 npc_mcam_find_zero_area(unsigned long *map, u16 size, u16 start, u16 nr, u16 *max_area)
{
  #line 1431 
  u16 index;
  #line 1431 
  u16 next;
  #line 1431 
  u16 end;
  #line 1440 
  int tmp_0;
  #line 1430 
  u16 max_area_start = (unsigned short)0U;
  #line 1433 
  *max_area = (unsigned short)0U;
  #line 1435 
  again: 
         #line 1435 
  ;
  #line 1436 
  index = (unsigned short)cif_find_next_zero_bit(map,(unsigned long)size,(unsigned long)start);
  #line 1437 
  if ((int)index >= (int)size) 
                               #line 1438 
                               return max_area_start;
  #line 1440 
  if ((int)index + (int)nr < (int)size) 
                                        #line 1440 
                                        tmp_0 = (int)index + (int)nr; else 
                                                                    #line 1440 
                                                                    tmp_0 = (int)size;
  #line 1440 
  end = (unsigned short)tmp_0;
  #line 1441 
  next = (unsigned short)cif_find_next_bit(map,(unsigned long)end,(unsigned long)index);
  #line 1442 
  if ((int)*max_area < (int)next - (int)index) {
    #line 1443 
    *max_area = (unsigned short)((int)next - (int)index);
    #line 1444 
    max_area_start = index;
  }
  #line 1447 
  if ((int)next < (int)end) {
    #line 1448 
    start = (unsigned short)((unsigned int)next + 1U);
    #line 1449 
    goto again;
  }
  #line 1452 
  return max_area_start;
}

#line 1458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static u16 npc_mcam_get_free_count(unsigned long *map, u16 start, u16 end)
{
  #line 1460 
  u16 index;
  #line 1460 
  u16 next;
  #line 1461 
  u16 fcnt = (unsigned short)0U;
  #line 1463 
  again: 
         #line 1463 
  ;
  #line 1464 
  if ((int)start >= (int)end) 
                              #line 1465 
                              return fcnt;
  #line 1467 
  index = (unsigned short)cif_find_next_zero_bit(map,(unsigned long)end,(unsigned long)start);
  #line 1468 
  if ((int)index >= (int)end) 
                              #line 1469 
                              return fcnt;
  #line 1471 
  next = (unsigned short)cif_find_next_bit(map,(unsigned long)end,(unsigned long)index);
  #line 1472 
  if ((int)next <= (int)end) {
    #line 1473 
    fcnt = (unsigned short)(((int)next - (int)index) + (int)fcnt);
    #line 1474 
    start = (unsigned short)((unsigned int)next + 1U);
    #line 1475 
    goto again;
  }
  #line 1478 
  fcnt = (unsigned short)(((int)end - (int)index) + (int)fcnt);
  #line 1479 
  return fcnt;
}

#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static void npc_get_mcam_search_range_priority(struct npc_mcam *mcam, struct npc_mcam_alloc_entry_req *req, u16 *start, u16 *end, bool *reverse)
{
  #line 1487 
  u16 fcnt;
  #line 1489 
  if ((unsigned int)req->priority == 2U) 
                                         #line 1490 
                                         goto hprio;
  #line 1502 
  *reverse = (_Bool)0;
  #line 1503 
  *start = (unsigned short)((unsigned int)req->ref_entry + 1U);
  #line 1504 
  *end = mcam->bmap_entries;
  #line 1506 
  if ((int)req->ref_entry >= (int)mcam->hprio_end) 
                                                   #line 1507 
                                                   return;
  #line 1509 
  fcnt = npc_mcam_get_free_count(mcam->bmap,(unsigned short)((int)mcam->hprio_end),(unsigned short)((int)mcam->bmap_entries));
  #line 1511 
  if ((int)req->count < (int)fcnt) 
                                   #line 1512 
                                   *start = mcam->hprio_end; else 
                                                                  #line 1514 
                                                                  *reverse = (_Bool)1;
  #line 1515 
  return;
  #line 1517 
  hprio: 
         #line 1517 
  ;
  #line 1527 
  *reverse = (_Bool)1;
  #line 1528 
  *start = (unsigned short)0U;
  #line 1529 
  *end = req->ref_entry;
  #line 1531 
  if ((int)req->ref_entry <= (int)mcam->lprio_start) 
                                                     #line 1532 
                                                     return;
  #line 1534 
  fcnt = npc_mcam_get_free_count(mcam->bmap,(unsigned short)((int)mcam->hprio_end),(unsigned short)((int)mcam->lprio_start));
  #line 1536 
  if ((int)req->count > (int)fcnt) 
                                   #line 1537 
                                   return;
  #line 1538 
  *start = mcam->hprio_end;
  #line 1539 
  *end = mcam->lprio_start;
  #line 1540 
  return;
}

#line 1542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
static int npc_mcam_alloc_entries(struct npc_mcam *mcam, u16 pcifunc, struct npc_mcam_alloc_entry_req *req, struct npc_mcam_alloc_entry_rsp *rsp)
{
  #line 1546 
  u16 entry_list[256U];
  #line 1547 
  u16 fcnt;
  #line 1547 
  u16 hp_fcnt;
  #line 1547 
  u16 lp_fcnt;
  #line 1548 
  u16 start;
  #line 1548 
  u16 end;
  #line 1548 
  u16 index;
  #line 1549 
  int entry;
  #line 1549 
  int next_start;
  #line 1551 
  unsigned long *bmap;
  #line 1552 
  u16 max_contig;
  #line 1550 
  bool reverse = (_Bool)0;
  #line 1554 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1557 
  if ((unsigned int)mcam->bmap_fcnt == 0U) {
    #line 1558 
    cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
    #line 1559 
    return -703;
  }
  #line 1579 
  if ((unsigned int)req->priority != 0U) {
    #line 1580 
    npc_get_mcam_search_range_priority(mcam,req,& start,& end,& reverse);
    #line 1582 
    goto alloc;
  }
  #line 1589 
  lp_fcnt = npc_mcam_get_free_count(mcam->bmap,(unsigned short)((int)mcam->lprio_start),(unsigned short)((int)mcam->bmap_entries));
  #line 1592 
  hp_fcnt = npc_mcam_get_free_count(mcam->bmap,(unsigned short)0,(unsigned short)((int)mcam->hprio_end));
  #line 1593 
  fcnt = (unsigned short)(((int)mcam->bmap_fcnt - (int)lp_fcnt) - (int)hp_fcnt);
  #line 1596 
  if ((int)req->count < (int)fcnt) {
    #line 1597 
    start = mcam->hprio_end;
    #line 1598 
    end = mcam->lprio_start;
  }
  else 
    #line 1599 
    if (((int)fcnt + (int)((unsigned int)hp_fcnt / 2U)) + (int)((unsigned int)lp_fcnt / 2U) > (int)req->count) {
      #line 1603 
      start = (unsigned short)((unsigned int)mcam->hprio_end / 2U);
      #line 1604 
      end = (unsigned short)((int)mcam->bmap_entries - (int)((unsigned short)((unsigned int)mcam->lprio_count / 2U)));
      #line 1605 
      reverse = (_Bool)1;
    }
    else {
      #line 1610 
      reverse = (_Bool)1;
      #line 1611 
      start = (unsigned short)0U;
      #line 1612 
      end = mcam->bmap_entries;
    }
  #line 1615 
  alloc: 
         #line 1615 
  ;
  #line 1616 
  if ((int)reverse != 0) {
    #line 1617 
    bmap = mcam->bmap_reverse;
    #line 1618 
    start = (unsigned short)((int)mcam->bmap_entries - (int)start);
    #line 1619 
    end = (unsigned short)((int)mcam->bmap_entries - (int)end);
    #line 1620 
    index = start;
    #line 1621 
    start = end;
    #line 1622 
    end = index;
  }
  else 
       #line 1624 
       bmap = mcam->bmap;
  #line 1627 
  if ((unsigned int)req->contig != 0U) {
    #line 1631 
    index = npc_mcam_find_zero_area(bmap,(unsigned short)((int)end),(unsigned short)((int)start),(unsigned short)((int)req->count),& max_contig);
    #line 1633 
    rsp->count = max_contig;
    #line 1634 
    if ((int)reverse != 0) 
                           #line 1635 
                           rsp->entry = (unsigned short)(((int)mcam->bmap_entries - (int)index) - (int)max_contig); else 
                                                                    #line 1637 
                                                                    rsp->entry = index;
  }
  else {
    #line 1642 
    rsp->count = (unsigned short)0U;
    #line 1643 
    next_start = (int)start;
    #line 1644 
    entry = 0;
    #line 1644 
    while ((int)req->count > entry) {
      {
        #line 1645 
        index = (unsigned short)cif_find_next_zero_bit(bmap,(unsigned long)end,
                             (unsigned long)next_start);
        #line 1646 
        if ((int)index >= (int)end) 
                                    #line 1647 
                                    break;
        #line 1649 
        next_start = (int)index + 1;
        #line 1652 
        if ((int)reverse != 0) 
                               #line 1653 
                               index = (unsigned short)((unsigned int)((int)mcam->bmap_entries - (int)index) + 65535U);
        #line 1654 
        entry_list[entry] = index;
        #line 1655 
        rsp->count = (u16)((int)rsp->count + 1);
      }
      #line 1644 
      entry ++;
    }
  }
  #line 1662 
  if (((unsigned int)req->priority == 0U && (int)rsp->count < (int)req->count) && (int)end - (int)start != (int)mcam->bmap_entries) {
    #line 1664 
    reverse = (_Bool)1;
    #line 1665 
    start = (unsigned short)0U;
    #line 1666 
    end = mcam->bmap_entries;
    #line 1667 
    goto alloc;
  }
  #line 1673 
  if ((unsigned int)req->priority != 0U && (int)rsp->count < (int)req->count) 
    #line 1674 
    if ((unsigned int)req->priority == 1U && (int)start != (int)req->ref_entry + 1) {
      #line 1676 
      start = (unsigned short)((unsigned int)req->ref_entry + 1U);
      #line 1677 
      end = mcam->bmap_entries;
      #line 1678 
      reverse = (_Bool)0;
      #line 1679 
      goto alloc;
    }
    else 
      #line 1680 
      if ((unsigned int)req->priority == 2U && (int)end - (int)start != (int)req->ref_entry) {
        #line 1682 
        start = (unsigned short)0U;
        #line 1683 
        end = req->ref_entry;
        #line 1684 
        reverse = (_Bool)1;
        #line 1685 
        goto alloc;
      }
  #line 1693 
  if ((unsigned int)req->contig == 0U && (unsigned int)rsp->count != 0U) {
    #line 1694 
    index = (unsigned short)0U;
    #line 1695 
    entry = (int)rsp->count + -1;
    #line 1695 
    while (entry >= 0) {
      #line 1696 
      if ((int)reverse != 0) {
        #line 1697 
        u16 tmp_0;
        #line 1697 
        tmp_0 = index;
        #line 1697 
        index = (u16)((int)index + 1);
        #line 1697 
        rsp->entry_list[(int)tmp_0] = entry_list[entry];
      }
      else 
           #line 1699 
           rsp->entry_list[entry] = entry_list[entry];
      #line 1695 
      entry --;
    }
  }
  #line 1704 
  entry = 0;
  #line 1704 
  while ((int)rsp->count > entry) {
    #line 1705 
    if ((unsigned int)req->contig != 0U) 
                                         #line 1705 
                                         index = (unsigned short)((int)rsp->entry + (int)((unsigned short)entry)); else 
                                                                    #line 1705 
                                                                    index = rsp->entry_list[entry];
    #line 1707 
    npc_mcam_set_bit(mcam,(unsigned short)((int)index));
    #line 1708 
    *(mcam->entry2pfvf_map + (unsigned long)index) = pcifunc;
    #line 1709 
    *(mcam->entry2cntr_map + (unsigned long)index) = (unsigned short)65535U;
    #line 1704 
    entry ++;
  }
  #line 1713 
  rsp->free_count = mcam->bmap_fcnt;
  #line 1715 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1716 
  return 0;
}

#line 1719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_mcam_alloc_entry(struct rvu *rvu, struct npc_mcam_alloc_entry_req *req, struct npc_mcam_alloc_entry_rsp *rsp)
{
  #line 1725 
  int blkaddr;
  #line 1723 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 1724 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1727 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 1728 
  if (blkaddr < 0) 
                   #line 1729 
                   return -701;
  #line 1731 
  rsp->entry = (unsigned short)65535U;
  #line 1732 
  rsp->free_count = (unsigned short)0U;
  #line 1735 
  if ((unsigned int)req->priority != 0U && (int)req->ref_entry >= (int)mcam->bmap_entries) 
    #line 1736 
    return -701;
  #line 1741 
  if ((unsigned int)req->ref_entry == 0U && (unsigned int)req->priority == 2U || (int)req->ref_entry == (int)mcam->bmap_entries + -1 && (unsigned int)req->priority == 1U) 
    #line 1744 
    return -701;
  #line 1749 
  if ((unsigned int)req->contig == 0U && (unsigned int)req->count > 256U) 
    #line 1750 
    return -701;
  #line 1753 
  if (! is_nixlf_attached(rvu,(unsigned short)((int)pcifunc))) 
                                                               #line 1754 
                                                               return -702;
  #line 1756 
  return npc_mcam_alloc_entries(mcam,(unsigned short)((int)pcifunc),req,rsp);
}

#line 1759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_mcam_free_entry(struct rvu *rvu, struct npc_mcam_free_entry_req *req, struct msg_rsp *rsp)
{
  #line 1765 
  int blkaddr;
  #line 1766 
  u16 cntr;
  #line 1763 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 1764 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1765 
  int rc = 0;
  #line 1768 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 1769 
  if (blkaddr < 0) 
                   #line 1770 
                   return -701;
  #line 1773 
  if (! is_nixlf_attached(rvu,(unsigned short)((int)pcifunc))) 
                                                               #line 1774 
                                                               return -701;
  #line 1776 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1778 
  if ((unsigned int)req->all != 0U) 
                                    #line 1779 
                                    goto free_all;
  #line 1781 
  rc = npc_mcam_verify_entry(mcam,(unsigned short)((int)pcifunc),(int)req->entry);
  #line 1782 
  if (rc != 0) 
               #line 1783 
               goto exit;
  #line 1785 
  *(mcam->entry2pfvf_map + (unsigned long)req->entry) = (unsigned short)0U;
  #line 1786 
  npc_mcam_clear_bit(mcam,(unsigned short)((int)req->entry));
  #line 1787 
  npc_enable_mcam_entry(rvu,mcam,blkaddr,(int)req->entry,(_Bool)0);
  #line 1790 
  cntr = *(mcam->entry2cntr_map + (unsigned long)req->entry);
  #line 1791 
  if ((unsigned int)cntr != 65535U) 
                                    #line 1792 
                                    npc_unmap_mcam_entry_and_cntr(rvu,mcam,blkaddr,(unsigned short)((int)req->entry),(unsigned short)((int)cntr));
  #line 1795 
  goto exit;
  #line 1797 
  free_all: 
            #line 1797 
  ;
  #line 1799 
  npc_mcam_free_all_entries(rvu,mcam,blkaddr,(unsigned short)((int)pcifunc));
  #line 1800 
  exit: 
        #line 1800 
  ;
  #line 1801 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1802 
  return rc;
}

#line 1805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_mcam_write_entry(struct rvu *rvu, struct npc_mcam_write_entry_req *req, struct msg_rsp *rsp)
{
  #line 1811 
  int blkaddr;
  #line 1811 
  int rc;
  #line 1809 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 1810 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1813 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 1814 
  if (blkaddr < 0) 
                   #line 1815 
                   return -701;
  #line 1817 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1818 
  rc = npc_mcam_verify_entry(mcam,(unsigned short)((int)pcifunc),(int)req->entry);
  #line 1819 
  if (rc != 0) 
               #line 1820 
               goto exit;
  #line 1822 
  if ((unsigned int)req->set_cntr != 0U) {
    #line 1822 
    if (npc_mcam_verify_counter(mcam,(unsigned short)((int)pcifunc),
                              (int)req->cntr) != 0) {
      #line 1824 
      rc = -701;
      #line 1825 
      goto exit;
    }
  }
  #line 1828 
  if ((unsigned int)req->intf > 1U) {
    #line 1829 
    rc = -701;
    #line 1830 
    goto exit;
  }
  #line 1833 
  npc_config_mcam_entry(rvu,mcam,blkaddr,(int)req->entry,(unsigned char)((int)req->intf),& req->entry_data,(_Bool)((unsigned int)req->enable_entry != 0U));
  #line 1836 
  if ((unsigned int)req->set_cntr != 0U) 
                                         #line 1837 
                                         npc_map_mcam_entry_and_cntr(rvu,mcam,blkaddr,(unsigned short)((int)req->entry),(unsigned short)((int)req->cntr));
  #line 1840 
  rc = 0;
  #line 1841 
  exit: 
        #line 1841 
  ;
  #line 1842 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1843 
  return rc;
}

#line 1846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_mcam_ena_entry(struct rvu *rvu, struct npc_mcam_ena_dis_entry_req *req, struct msg_rsp *rsp)
{
  #line 1852 
  int blkaddr;
  #line 1852 
  int rc;
  #line 1850 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 1851 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1854 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 1855 
  if (blkaddr < 0) 
                   #line 1856 
                   return -701;
  #line 1858 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1859 
  rc = npc_mcam_verify_entry(mcam,(unsigned short)((int)pcifunc),(int)req->entry);
  #line 1860 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1861 
  if (rc != 0) 
               #line 1862 
               return rc;
  #line 1864 
  npc_enable_mcam_entry(rvu,mcam,blkaddr,(int)req->entry,(_Bool)1);
  #line 1866 
  return 0;
}

#line 1869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_mcam_dis_entry(struct rvu *rvu, struct npc_mcam_ena_dis_entry_req *req, struct msg_rsp *rsp)
{
  #line 1875 
  int blkaddr;
  #line 1875 
  int rc;
  #line 1873 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 1874 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1877 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 1878 
  if (blkaddr < 0) 
                   #line 1879 
                   return -701;
  #line 1881 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1882 
  rc = npc_mcam_verify_entry(mcam,(unsigned short)((int)pcifunc),(int)req->entry);
  #line 1883 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1884 
  if (rc != 0) 
               #line 1885 
               return rc;
  #line 1887 
  npc_enable_mcam_entry(rvu,mcam,blkaddr,(int)req->entry,(_Bool)0);
  #line 1889 
  return 0;
}

#line 1892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_mcam_shift_entry(struct rvu *rvu, struct npc_mcam_shift_entry_req *req, struct npc_mcam_shift_entry_rsp *rsp)
{
  #line 1898 
  u16 old_entry;
  #line 1898 
  u16 new_entry;
  #line 1899 
  u16 index;
  #line 1899 
  u16 cntr;
  #line 1900 
  int blkaddr;
  #line 1900 
  int rc;
  #line 1896 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 1897 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1902 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 1903 
  if (blkaddr < 0) 
                   #line 1904 
                   return -701;
  #line 1906 
  if ((unsigned int)req->shift_count > 64U) 
                                            #line 1907 
                                            return -701;
  #line 1909 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1910 
  index = (unsigned short)0U;
  #line 1910 
  while ((int)req->shift_count > (int)index) {
    #line 1911 
    old_entry = req->curr_entry[(int)index];
    #line 1912 
    new_entry = req->new_entry[(int)index];
    #line 1917 
    rc = npc_mcam_verify_entry(mcam,(unsigned short)((int)pcifunc),(int)old_entry);
    #line 1918 
    if (rc != 0) 
                 #line 1919 
                 break;
    #line 1921 
    rc = npc_mcam_verify_entry(mcam,(unsigned short)((int)pcifunc),(int)new_entry);
    #line 1922 
    if (rc != 0) 
                 #line 1923 
                 break;
    #line 1926 
    if ((unsigned int)*(mcam->entry2cntr_map + (unsigned long)new_entry) != 65535U) {
      #line 1927 
      rc = -704;
      #line 1928 
      break;
    }
    #line 1932 
    npc_enable_mcam_entry(rvu,mcam,blkaddr,(int)new_entry,(_Bool)0);
    #line 1935 
    npc_copy_mcam_entry(rvu,mcam,blkaddr,(unsigned short)((int)old_entry),(unsigned short)((int)new_entry));
    #line 1938 
    cntr = *(mcam->entry2cntr_map + (unsigned long)old_entry);
    #line 1939 
    if ((unsigned int)cntr != 65535U) {
      #line 1940 
      npc_unmap_mcam_entry_and_cntr(rvu,mcam,blkaddr,(unsigned short)((int)old_entry),(unsigned short)((int)cntr));
      #line 1942 
      npc_map_mcam_entry_and_cntr(rvu,mcam,blkaddr,(unsigned short)((int)new_entry),(unsigned short)((int)cntr));
    }
    #line 1947 
    npc_enable_mcam_entry(rvu,mcam,blkaddr,(int)new_entry,(_Bool)1);
    #line 1948 
    npc_enable_mcam_entry(rvu,mcam,blkaddr,(int)old_entry,(_Bool)0);
    #line 1910 
    index = (u16)((int)index + 1);
  }
  #line 1952 
  if ((int)req->shift_count != (int)index) {
    #line 1953 
    rc = -704;
    #line 1954 
    rsp->failed_entry_idx = index;
  }
  #line 1957 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1958 
  return rc;
}

#line 1961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_mcam_alloc_counter(struct rvu *rvu, struct npc_mcam_alloc_counter_req *req, struct npc_mcam_alloc_counter_rsp *rsp)
{
  #line 1967 
  u16 max_contig;
  #line 1967 
  u16 cntr;
  #line 1968 
  int blkaddr;
  #line 1968 
  int index;
  #line 1965 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 1966 
  u16 pcifunc = req->hdr.pcifunc;
  #line 1970 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 1971 
  if (blkaddr < 0) 
                   #line 1972 
                   return -701;
  #line 1975 
  if (! is_nixlf_attached(rvu,(unsigned short)((int)pcifunc))) 
                                                               #line 1976 
                                                               return -701;
  #line 1981 
  if ((unsigned int)req->contig == 0U && (unsigned int)req->count > 64U) 
    #line 1982 
    return -701;
  #line 1984 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 1987 
  if (rvu_rsrc_free_count(& mcam->counters) == 0) {
    #line 1988 
    cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
    #line 1989 
    return -703;
  }
  #line 1992 
  rsp->count = (unsigned short)0U;
  #line 1994 
  if ((unsigned int)req->contig != 0U) {
    #line 1998 
    index = (int)npc_mcam_find_zero_area(mcam->counters.bmap,
                                (unsigned short)((int)mcam->counters.max),
                                (unsigned short)0,
                                (unsigned short)((int)req->count),
                                & max_contig);
    #line 2001 
    rsp->count = max_contig;
    #line 2002 
    rsp->cntr = (unsigned short)index;
    #line 2003 
    cntr = (unsigned short)index;
    #line 2003 
    while ((int)cntr < (int)max_contig + index) {
      #line 2004 
      __set_bit((long)cntr,mcam->counters.bmap);
      #line 2005 
      *(mcam->cntr2pfvf_map + (unsigned long)cntr) = pcifunc;
      #line 2003 
      cntr = (u16)((int)cntr + 1);
    }
  }
  else {
    #line 2011 
    cntr = (unsigned short)0U;
    #line 2011 
    while ((int)req->count > (int)cntr) {
      #line 2012 
      index = rvu_alloc_rsrc(& mcam->counters);
      #line 2013 
      if (index < 0) 
                     #line 2014 
                     break;
      #line 2015 
      rsp->cntr_list[(int)cntr] = (unsigned short)index;
      #line 2016 
      rsp->count = (u16)((int)rsp->count + 1);
      #line 2017 
      *(mcam->cntr2pfvf_map + (unsigned long)index) = pcifunc;
      #line 2011 
      cntr = (u16)((int)cntr + 1);
    }
  }
  #line 2021 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 2022 
  return 0;
}

#line 2025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_mcam_free_counter(struct rvu *rvu, struct npc_mcam_oper_counter_req *req, struct msg_rsp *rsp)
{
  #line 2029 
  u16 index;
  #line 2030 
  int blkaddr;
  #line 2030 
  int err;
  #line 2028 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 2029 
  u16 entry = (unsigned short)0U;
  #line 2032 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 2033 
  if (blkaddr < 0) 
                   #line 2034 
                   return -701;
  #line 2036 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 2037 
  err = npc_mcam_verify_counter(mcam,(unsigned short)((int)req->hdr.pcifunc),(int)req->cntr);
  #line 2038 
  if (err != 0) {
    #line 2039 
    cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
    #line 2040 
    return err;
  }
  #line 2044 
  *(mcam->cntr2pfvf_map + (unsigned long)req->cntr) = (unsigned short)65535U;
  #line 2045 
  rvu_free_rsrc(& mcam->counters,(int)req->cntr);
  #line 2048 
  while ((int)mcam->bmap_entries > (int)entry) {
    #line 2049 
    if ((unsigned int)*(mcam->cntr_refcnt + (unsigned long)req->cntr) == 0U) 
      #line 2050 
      break;
    #line 2052 
    index = (unsigned short)cif_find_next_bit(mcam->bmap,(unsigned long)mcam->bmap_entries,
                        (unsigned long)entry);
    #line 2053 
    if ((int)mcam->bmap_entries <= (int)index) 
                                               #line 2054 
                                               break;
    #line 2055 
    if ((int)*(mcam->entry2cntr_map + (unsigned long)index) != (int)req->cntr) 
      #line 2056 
      continue;
    #line 2058 
    entry = (unsigned short)((unsigned int)index + 1U);
    #line 2059 
    npc_unmap_mcam_entry_and_cntr(rvu,mcam,blkaddr,(unsigned short)((int)index),(unsigned short)((int)req->cntr));
  }
  #line 2063 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 2064 
  return 0;
}

#line 2067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_mcam_unmap_counter(struct rvu *rvu, struct npc_mcam_unmap_counter_req *req, struct msg_rsp *rsp)
{
  #line 2071 
  u16 index;
  #line 2072 
  int blkaddr;
  #line 2072 
  int rc;
  #line 2070 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 2071 
  u16 entry = (unsigned short)0U;
  #line 2074 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 2075 
  if (blkaddr < 0) 
                   #line 2076 
                   return -701;
  #line 2078 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 2079 
  rc = npc_mcam_verify_counter(mcam,(unsigned short)((int)req->hdr.pcifunc),(int)req->cntr);
  #line 2080 
  if (rc != 0) 
               #line 2081 
               goto exit;
  #line 2084 
  if ((unsigned int)req->all == 0U) {
    #line 2085 
    rc = npc_mcam_verify_entry(mcam,(unsigned short)((int)req->hdr.pcifunc),(int)req->entry);
    #line 2086 
    if (rc != 0) 
                 #line 2087 
                 goto exit;
    #line 2088 
    npc_unmap_mcam_entry_and_cntr(rvu,mcam,blkaddr,(unsigned short)((int)req->entry),(unsigned short)((int)req->cntr));
    #line 2090 
    goto exit;
  }
  #line 2094 
  while ((int)mcam->bmap_entries > (int)entry) {
    #line 2095 
    if ((unsigned int)*(mcam->cntr_refcnt + (unsigned long)req->cntr) == 0U) 
      #line 2096 
      break;
    #line 2098 
    index = (unsigned short)cif_find_next_bit(mcam->bmap,(unsigned long)mcam->bmap_entries,
                        (unsigned long)entry);
    #line 2099 
    if ((int)mcam->bmap_entries <= (int)index) 
                                               #line 2100 
                                               break;
    #line 2101 
    if ((int)*(mcam->entry2cntr_map + (unsigned long)index) != (int)req->cntr) 
      #line 2102 
      continue;
    #line 2104 
    entry = (unsigned short)((unsigned int)index + 1U);
    #line 2105 
    npc_unmap_mcam_entry_and_cntr(rvu,mcam,blkaddr,(unsigned short)((int)index),(unsigned short)((int)req->cntr));
  }
  #line 2108 
  exit: 
        #line 2108 
  ;
  #line 2109 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 2110 
  return rc;
}

#line 2113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_mcam_clear_counter(struct rvu *rvu, struct npc_mcam_oper_counter_req *req, struct msg_rsp *rsp)
{
  #line 2117 
  int blkaddr;
  #line 2117 
  int err;
  #line 2116 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 2119 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 2120 
  if (blkaddr < 0) 
                   #line 2121 
                   return -701;
  #line 2123 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 2124 
  err = npc_mcam_verify_counter(mcam,(unsigned short)((int)req->hdr.pcifunc),(int)req->cntr);
  #line 2125 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 2126 
  if (err != 0) 
                #line 2127 
                return err;
  #line 2129 
  rvu_write64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((int)req->cntr << 8) | 25690120),0ULL);
  #line 2131 
  return 0;
}

#line 2134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_mcam_counter_stats(struct rvu *rvu, struct npc_mcam_oper_counter_req *req, struct npc_mcam_oper_counter_rsp *rsp)
{
  #line 2139 
  int blkaddr;
  #line 2139 
  int err;
  #line 2138 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 2141 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 2142 
  if (blkaddr < 0) 
                   #line 2143 
                   return -701;
  #line 2145 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 2146 
  err = npc_mcam_verify_counter(mcam,(unsigned short)((int)req->hdr.pcifunc),(int)req->cntr);
  #line 2147 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 2148 
  if (err != 0) 
                #line 2149 
                return err;
  #line 2151 
  rsp->stat = rvu_read64(rvu,(unsigned long long)blkaddr,(unsigned long long)(((int)req->cntr << 8) | 25690120));
  #line 2152 
  rsp->stat &= 281474976710655ULL;
  #line 2154 
  return 0;
}

#line 2157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_mcam_alloc_and_write_entry(struct rvu *rvu, struct npc_mcam_alloc_and_write_entry_req *req, struct npc_mcam_alloc_and_write_entry_rsp *rsp)
{
  #line 2161 
  struct npc_mcam_alloc_counter_req cntr_req;
  #line 2162 
  struct npc_mcam_alloc_counter_rsp cntr_rsp;
  #line 2163 
  struct npc_mcam_alloc_entry_req entry_req;
  #line 2164 
  struct npc_mcam_alloc_entry_rsp entry_rsp;
  #line 2168 
  int blkaddr;
  #line 2168 
  int rc;
  #line 2165 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 2166 
  u16 entry = (unsigned short)65535U;
  #line 2167 
  u16 cntr = (unsigned short)65535U;
  #line 2170 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 2171 
  if (blkaddr < 0) 
                   #line 2172 
                   return -701;
  #line 2174 
  if ((unsigned int)req->intf > 1U) 
                                    #line 2175 
                                    return -701;
  #line 2178 
  entry_req.hdr.pcifunc = req->hdr.pcifunc;
  #line 2179 
  entry_req.contig = (unsigned char)1U;
  #line 2180 
  entry_req.priority = req->priority;
  #line 2181 
  entry_req.ref_entry = req->ref_entry;
  #line 2182 
  entry_req.count = (unsigned short)1U;
  #line 2184 
  rc = rvu_mbox_handler_npc_mcam_alloc_entry(rvu,& entry_req,& entry_rsp);
  #line 2186 
  if (rc != 0) 
               #line 2187 
               return rc;
  #line 2189 
  if ((unsigned int)entry_rsp.count == 0U) 
                                           #line 2190 
                                           return -703;
  #line 2192 
  entry = entry_rsp.entry;
  #line 2194 
  if ((unsigned int)req->alloc_cntr == 0U) 
                                           #line 2195 
                                           goto write_entry;
  #line 2198 
  cntr_req.hdr.pcifunc = req->hdr.pcifunc;
  #line 2199 
  cntr_req.contig = (unsigned char)1U;
  #line 2200 
  cntr_req.count = (unsigned short)1U;
  #line 2202 
  rc = rvu_mbox_handler_npc_mcam_alloc_counter(rvu,& cntr_req,& cntr_rsp);
  #line 2203 
  if (rc != 0) {
    #line 2205 
    cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
    #line 2206 
    *(mcam->entry2pfvf_map + (unsigned long)entry) = (unsigned short)0U;
    #line 2207 
    npc_mcam_clear_bit(mcam,(unsigned short)((int)entry));
    #line 2208 
    cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
    #line 2209 
    return rc;
  }
  #line 2212 
  cntr = cntr_rsp.cntr;
  #line 2214 
  write_entry: 
               #line 2214 
  ;
  #line 2215 
  cif_mutex_lock_lock_of_npc_mcam_0(& mcam->lock);
  #line 2216 
  npc_config_mcam_entry(rvu,mcam,blkaddr,(int)entry,(unsigned char)((int)req->intf),& req->entry_data,(_Bool)((unsigned int)req->enable_entry != 0U));
  #line 2219 
  if ((unsigned int)req->alloc_cntr != 0U) 
                                           #line 2220 
                                           npc_map_mcam_entry_and_cntr(rvu,mcam,blkaddr,(unsigned short)((int)entry),(unsigned short)((int)cntr));
  #line 2221 
  cif_mutex_unlock_lock_of_npc_mcam_0(& mcam->lock);
  #line 2223 
  rsp->entry = entry;
  #line 2224 
  rsp->cntr = cntr;
  #line 2226 
  return 0;
}

#line 2243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_mbox_handler_npc_get_kex_cfg(struct rvu *rvu, struct msg_req *req, struct npc_get_kex_cfg_rsp *rsp)
{
  #line 2246 
  int lid;
  #line 2246 
  int lt;
  #line 2246 
  int ld;
  #line 2246 
  int fl;
  #line 2248 
  rsp->rx_keyx_cfg = rvu_read64(rvu,6ULL,4112ULL);
  #line 2249 
  rsp->tx_keyx_cfg = rvu_read64(rvu,6ULL,4368ULL);
  #line 2250 
  lid = 0;
  #line 2250 
  while (lid <= 7) {
    #line 2251 
    lt = 0;
    #line 2251 
    while (lt <= 15) {
      #line 2252 
      ld = 0;
      #line 2252 
      while (ld <= 1) {
        #line 2253 
        rsp->intf_lid_lt_ld[0][lid][lt][ld] = rvu_read64(rvu,6ULL,(unsigned long long)((((lid << 12) | 9437184) | (lt << 5)) | (ld << 3)));
        #line 2255 
        rsp->intf_lid_lt_ld[1][lid][lt][ld] = rvu_read64(rvu,6ULL,(unsigned long long)((((lid << 12) | 9502720) | (lt << 5)) | (ld << 3)));
        #line 2252 
        ld ++;
      }
      #line 2251 
      lt ++;
    }
    #line 2250 
    lid ++;
  }
  #line 2260 
  ld = 0;
  #line 2260 
  while (ld <= 1) {
    #line 2261 
    rsp->kex_ld_flags[ld] = rvu_read64(rvu,6ULL,(unsigned long long)((ld << 3) | 2048));
    #line 2260 
    ld ++;
  }
  #line 2263 
  ld = 0;
  #line 2263 
  while (ld <= 1) {
    #line 2264 
    fl = 0;
    #line 2264 
    while (fl <= 15) {
      #line 2265 
      rsp->intf_ld_flags[0][ld][fl] = rvu_read64(rvu,6ULL,(unsigned long long)(((ld << 12) | 9961472) | (fl << 3)));
      #line 2267 
      rsp->intf_ld_flags[1][ld][fl] = rvu_read64(rvu,6ULL,(unsigned long long)(((ld << 12) | 10027008) | (fl << 3)));
      #line 2264 
      fl ++;
    }
    #line 2263 
    ld ++;
  }
  #line 2271 
  memcpy((void *)(& rsp->mkex_pfl_name),(void *)(& rvu->mkex_pfl_name),128UL);
  #line 2272 
  return 0;
}

#line 2275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/octeontx2/af/rvu_npc.c"
int rvu_npc_update_rxvlan(struct rvu *rvu, u16 pcifunc, int nixlf)
{
  #line 2279 
  int blkaddr;
  #line 2279 
  int index;
  #line 2280 
  bool enable;
  #line 2277 
  struct rvu_pfvf *pfvf = rvu_get_pfvf(rvu,(int)pcifunc);
  #line 2278 
  struct npc_mcam *mcam = & (rvu->hw)->mcam;
  #line 2282 
  blkaddr = rvu_get_blkaddr(rvu,5,(unsigned short)0);
  #line 2283 
  if (blkaddr < 0) 
                   #line 2284 
                   return -404;
  #line 2286 
  if (! pfvf->rxvlan) 
                      #line 2287 
                      return 0;
  #line 2289 
  index = npc_get_nixlf_mcam_index(mcam,(unsigned short)((int)pcifunc),nixlf,0);
  #line 2291 
  pfvf->entry.action = npc_get_mcam_action(rvu,mcam,blkaddr,index);
  #line 2292 
  enable = is_mcam_entry_enabled(rvu,mcam,blkaddr,index);
  #line 2293 
  npc_config_mcam_entry(rvu,mcam,blkaddr,pfvf->rxvlan_index,(unsigned char)0,& pfvf->entry,(_Bool)((bool)((int)enable) != 0));
  #line 2296 
  return 0;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npc.i.aux"
static unsigned long cif_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 103 
  return ldv_find_next_zero_bit(addr,size,offset);
}

#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npc.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 110 
  return ldv_find_next_bit(addr,size,offset);
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npc.i.aux"
static int cif_strncmp_0(char *cs, char *ct, __kernel_size_t count)
{
  #line 138 
  return ldv_strncmp(cs,ct,count);
}

#line 659  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npc.i.aux"
static void cif_mutex_lock_lock_of_npc_mcam_0(struct mutex *lock)
{
  #line 662 
  ldv_mutex_model_lock(lock,(char *)"lock_of_npc_mcam");
  #line 663 
  return;
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npc.i.aux"
static void cif_mutex_unlock_lock_of_npc_mcam_0(struct mutex *lock)
{
  #line 669 
  ldv_mutex_model_unlock(lock,(char *)"lock_of_npc_mcam");
  #line 670 
  return;
}

#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/0/concurrency safety/weaver/rvu_npc.i.aux"
static void *cif_devm_kcalloc_1(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 676 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  #line 26 
  return (void *)error;
}

#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
#line 373 
void emg_dispatch_deregister_6(struct pci_driver *arg0);
#line 106 
#line 334 
void emg_dispatch_irq_deregister_5(int arg0);
#line 107 
#line 389 
void emg_dispatch_irq_register_8(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 108 
#line 169 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 109 
#line 189 
void emg_dispatch_register_4(struct file_operations *arg0);
#line 110 
#line 4293 
void *emg_entry_point_insmod(void *arg0);
#line 111 
#line 453 
void *emg_file_operations_character_driver_scenario_rvu_dbg_cgx_stat_fops(void *arg0);
#line 112 
#line 630 
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_cq_ctx_fops(void *arg0);
#line 113 
#line 805 
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_ndc_rx_cache_fops(void *arg0);
#line 114 
#line 982 
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_ndc_rx_hits_miss_fops(void *arg0);
#line 115 
#line 1159 
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_ndc_tx_cache_fops(void *arg0);
#line 116 
#line 1336 
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_ndc_tx_hits_miss_fops(void *arg0);
#line 117 
#line 1513 
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_qsize_fops(void *arg0);
#line 118 
#line 1688 
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_rq_ctx_fops(void *arg0);
#line 119 
#line 1863 
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_sq_ctx_fops(void *arg0);
#line 120 
#line 2038 
void *emg_file_operations_character_driver_scenario_rvu_dbg_npa_aura_ctx_fops(void *arg0);
#line 121 
#line 2213 
void *emg_file_operations_character_driver_scenario_rvu_dbg_npa_ndc_cache_fops(void *arg0);
#line 122 
#line 2390 
void *emg_file_operations_character_driver_scenario_rvu_dbg_npa_ndc_hits_miss_fops(void *arg0);
#line 123 
#line 2567 
void *emg_file_operations_character_driver_scenario_rvu_dbg_npa_pool_ctx_fops(void *arg0);
#line 124 
#line 2742 
void *emg_file_operations_character_driver_scenario_rvu_dbg_npa_qsize_fops(void *arg0);
#line 125 
#line 2917 
void *emg_file_operations_character_driver_scenario_rvu_dbg_npc_mcam_info_fops(void *arg0);
#line 126 
#line 3094 
void *emg_file_operations_character_driver_scenario_rvu_dbg_npc_rx_miss_act_fops(void *arg0);
#line 127 
#line 3271 
void *emg_file_operations_character_driver_scenario_rvu_dbg_rsrc_status_fops(void *arg0);
#line 129 
#line 3436 
void *emg_interrupt_interrupt_scenario_cgx_fwi_event_handler(void *arg0);
#line 130 
#line 3499 
void *emg_interrupt_interrupt_scenario_rvu_flr_intr_handler(void *arg0);
#line 131 
#line 3562 
void *emg_interrupt_interrupt_scenario_rvu_mbox_intr_handler(void *arg0);
#line 132 
#line 3625 
void *emg_interrupt_interrupt_scenario_rvu_me_pf_intr_handler(void *arg0);
#line 133 
#line 3688 
void *emg_interrupt_interrupt_scenario_rvu_me_vf_intr_handler(void *arg0);
#line 134 
#line 3751 
void *emg_pci_pci_scenario_cgx_driver(void *arg0);
#line 135 
#line 3929 
void *emg_pci_pci_scenario_rvu_driver(void *arg0);
#line 139 
#line 4322 
int main(void);
#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_10;
#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_11;
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_23;
#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_24;
#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_25;
#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_26;
#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_27;
#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_28;
#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_29;
#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_30;
#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_31;
#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_32;
#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_9;
#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 170 
  int ret;
  #line 171 
  struct emg_struct_pci_scenario_cgx_driver_31 *cf_arg_31;
  #line 172 
  struct emg_struct_pci_scenario_cgx_driver_31 *cf_arg_32;
  #line 173 
  if (ldv_undef_int() != 0) {
    #line 174 
    cf_arg_31 = (struct emg_struct_pci_scenario_cgx_driver_31 *)ldv_xmalloc(16UL);
    #line 175 
    cf_arg_31->arg0 = arg0;
    #line 176 
    ret = pthread_create(& emg_thread_31,(pthread_attr_t *)0,& emg_pci_pci_scenario_cgx_driver,(void *)cf_arg_31);
    #line 177 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 180 
    cf_arg_32 = (struct emg_struct_pci_scenario_cgx_driver_31 *)ldv_xmalloc(16UL);
    #line 181 
    cf_arg_32->arg0 = arg0;
    #line 182 
    ret = pthread_create(& emg_thread_32,(pthread_attr_t *)0,& emg_pci_pci_scenario_rvu_driver,(void *)cf_arg_32);
    #line 183 
    __VERIFIER_assume(ret == 0);
  }
  #line 185 
  return;
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_4(struct file_operations *arg0)
{
  #line 190 
  int ret;
  #line 191 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_10;
  #line 192 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_11;
  #line 193 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_12;
  #line 194 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_13;
  #line 195 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_14;
  #line 196 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_15;
  #line 197 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_16;
  #line 198 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_17;
  #line 199 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_18;
  #line 200 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_19;
  #line 201 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_20;
  #line 202 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_21;
  #line 203 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_22;
  #line 204 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_23;
  #line 205 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_24;
  #line 206 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_25;
  #line 207 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *cf_arg_9;
  #line 208 
  switch (ldv_undef_int()) {
    #line 209 
    case 0: 
            #line 209 
    ;
    #line 210 
    cf_arg_10 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 211 
    cf_arg_10->arg0 = arg0;
    #line 212 
    ret = pthread_create(& emg_thread_10,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_nix_cq_ctx_fops,(void *)cf_arg_10);
    #line 213 
    __VERIFIER_assume(ret == 0);
    #line 214 
    break;
    #line 216 
    case 1: 
            #line 216 
    ;
    #line 217 
    cf_arg_11 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 218 
    cf_arg_11->arg0 = arg0;
    #line 219 
    ret = pthread_create(& emg_thread_11,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_nix_ndc_rx_cache_fops,(void *)cf_arg_11);
    #line 220 
    __VERIFIER_assume(ret == 0);
    #line 221 
    break;
    #line 223 
    case 2: 
            #line 223 
    ;
    #line 224 
    cf_arg_12 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 225 
    cf_arg_12->arg0 = arg0;
    #line 226 
    ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_nix_ndc_rx_hits_miss_fops,(void *)cf_arg_12);
    #line 227 
    __VERIFIER_assume(ret == 0);
    #line 228 
    break;
    #line 230 
    case 3: 
            #line 230 
    ;
    #line 231 
    cf_arg_13 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 232 
    cf_arg_13->arg0 = arg0;
    #line 233 
    ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_nix_ndc_tx_cache_fops,(void *)cf_arg_13);
    #line 234 
    __VERIFIER_assume(ret == 0);
    #line 235 
    break;
    #line 237 
    case 4: 
            #line 237 
    ;
    #line 238 
    cf_arg_14 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 239 
    cf_arg_14->arg0 = arg0;
    #line 240 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_nix_ndc_tx_hits_miss_fops,(void *)cf_arg_14);
    #line 241 
    __VERIFIER_assume(ret == 0);
    #line 242 
    break;
    #line 244 
    case 5: 
            #line 244 
    ;
    #line 245 
    cf_arg_15 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 246 
    cf_arg_15->arg0 = arg0;
    #line 247 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_nix_qsize_fops,(void *)cf_arg_15);
    #line 248 
    __VERIFIER_assume(ret == 0);
    #line 249 
    break;
    #line 251 
    case 6: 
            #line 251 
    ;
    #line 252 
    cf_arg_16 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 253 
    cf_arg_16->arg0 = arg0;
    #line 254 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_nix_rq_ctx_fops,(void *)cf_arg_16);
    #line 255 
    __VERIFIER_assume(ret == 0);
    #line 256 
    break;
    #line 258 
    case 7: 
            #line 258 
    ;
    #line 259 
    cf_arg_17 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 260 
    cf_arg_17->arg0 = arg0;
    #line 261 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_nix_sq_ctx_fops,(void *)cf_arg_17);
    #line 262 
    __VERIFIER_assume(ret == 0);
    #line 263 
    break;
    #line 265 
    case 8: 
            #line 265 
    ;
    #line 266 
    cf_arg_18 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 267 
    cf_arg_18->arg0 = arg0;
    #line 268 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_npa_aura_ctx_fops,(void *)cf_arg_18);
    #line 269 
    __VERIFIER_assume(ret == 0);
    #line 270 
    break;
    #line 272 
    case 9: 
            #line 272 
    ;
    #line 273 
    cf_arg_19 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 274 
    cf_arg_19->arg0 = arg0;
    #line 275 
    ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_npa_ndc_cache_fops,(void *)cf_arg_19);
    #line 276 
    __VERIFIER_assume(ret == 0);
    #line 277 
    break;
    #line 279 
    case 10: 
             #line 279 
    ;
    #line 280 
    cf_arg_20 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 281 
    cf_arg_20->arg0 = arg0;
    #line 282 
    ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_npa_ndc_hits_miss_fops,(void *)cf_arg_20);
    #line 283 
    __VERIFIER_assume(ret == 0);
    #line 284 
    break;
    #line 286 
    case 11: 
             #line 286 
    ;
    #line 287 
    cf_arg_21 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 288 
    cf_arg_21->arg0 = arg0;
    #line 289 
    ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_npa_pool_ctx_fops,(void *)cf_arg_21);
    #line 290 
    __VERIFIER_assume(ret == 0);
    #line 291 
    break;
    #line 293 
    case 12: 
             #line 293 
    ;
    #line 294 
    cf_arg_22 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 295 
    cf_arg_22->arg0 = arg0;
    #line 296 
    ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_npa_qsize_fops,(void *)cf_arg_22);
    #line 297 
    __VERIFIER_assume(ret == 0);
    #line 298 
    break;
    #line 300 
    case 13: 
             #line 300 
    ;
    #line 301 
    cf_arg_23 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 302 
    cf_arg_23->arg0 = arg0;
    #line 303 
    ret = pthread_create(& emg_thread_23,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_npc_mcam_info_fops,(void *)cf_arg_23);
    #line 304 
    __VERIFIER_assume(ret == 0);
    #line 305 
    break;
    #line 307 
    case 14: 
             #line 307 
    ;
    #line 308 
    cf_arg_24 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 309 
    cf_arg_24->arg0 = arg0;
    #line 310 
    ret = pthread_create(& emg_thread_24,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_npc_rx_miss_act_fops,(void *)cf_arg_24);
    #line 311 
    __VERIFIER_assume(ret == 0);
    #line 312 
    break;
    #line 314 
    case 15: 
             #line 314 
    ;
    #line 315 
    cf_arg_25 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 316 
    cf_arg_25->arg0 = arg0;
    #line 317 
    ret = pthread_create(& emg_thread_25,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_rsrc_status_fops,(void *)cf_arg_25);
    #line 318 
    __VERIFIER_assume(ret == 0);
    #line 319 
    break;
    #line 321 
    case 16: 
             #line 321 
    ;
    #line 322 
    cf_arg_9 = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)ldv_xmalloc(16UL);
    #line 323 
    cf_arg_9->arg0 = arg0;
    #line 324 
    ret = pthread_create(& emg_thread_9,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rvu_dbg_cgx_stat_fops,(void *)cf_arg_9);
    #line 325 
    __VERIFIER_assume(ret == 0);
    #line 326 
    break;
    #line 328 
    default: 
             #line 328 
    ;
    #line 328 
    __VERIFIER_assume(0);
  }
  #line 330 
  return;
}

#line 334  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_5(int arg0)
{
  #line 335 
  int ret;
  #line 336 
  struct emg_struct_free_irq_5 *cf_arg_26;
  #line 337 
  struct emg_struct_free_irq_5 *cf_arg_27;
  #line 338 
  struct emg_struct_free_irq_5 *cf_arg_28;
  #line 339 
  struct emg_struct_free_irq_5 *cf_arg_29;
  #line 340 
  struct emg_struct_free_irq_5 *cf_arg_30;
  #line 341 
  switch (ldv_undef_int()) {
    #line 342 
    case 0: 
            #line 342 
    ;
    #line 343 
    ret = pthread_join(emg_thread_26,(void **)0);
    #line 344 
    __VERIFIER_assume(ret == 0);
    #line 345 
    break;
    #line 347 
    case 1: 
            #line 347 
    ;
    #line 348 
    ret = pthread_join(emg_thread_27,(void **)0);
    #line 349 
    __VERIFIER_assume(ret == 0);
    #line 350 
    break;
    #line 352 
    case 2: 
            #line 352 
    ;
    #line 353 
    ret = pthread_join(emg_thread_28,(void **)0);
    #line 354 
    __VERIFIER_assume(ret == 0);
    #line 355 
    break;
    #line 357 
    case 3: 
            #line 357 
    ;
    #line 358 
    ret = pthread_join(emg_thread_29,(void **)0);
    #line 359 
    __VERIFIER_assume(ret == 0);
    #line 360 
    break;
    #line 362 
    case 4: 
            #line 362 
    ;
    #line 363 
    ret = pthread_join(emg_thread_30,(void **)0);
    #line 364 
    __VERIFIER_assume(ret == 0);
    #line 365 
    break;
    #line 367 
    default: 
             #line 367 
    ;
    #line 367 
    __VERIFIER_assume(0);
  }
  #line 369 
  return;
}

#line 373  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_6(struct pci_driver *arg0)
{
  #line 374 
  int ret;
  #line 375 
  struct emg_struct_pci_scenario_cgx_driver_31 *cf_arg_31;
  #line 376 
  struct emg_struct_pci_scenario_cgx_driver_31 *cf_arg_32;
  #line 377 
  if (ldv_undef_int() != 0) {
    #line 378 
    ret = pthread_join(emg_thread_31,(void **)0);
    #line 379 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 382 
    ret = pthread_join(emg_thread_32,(void **)0);
    #line 383 
    __VERIFIER_assume(ret == 0);
  }
  #line 385 
  return;
}

#line 389  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_8(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 390 
  int ret;
  #line 391 
  struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *cf_arg_26;
  #line 392 
  struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *cf_arg_27;
  #line 393 
  struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *cf_arg_28;
  #line 394 
  struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *cf_arg_29;
  #line 395 
  struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *cf_arg_30;
  #line 396 
  switch (ldv_undef_int()) {
    #line 397 
    case 0: 
            #line 397 
    ;
    #line 398 
    cf_arg_26 = (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)ldv_xmalloc(40UL);
    #line 399 
    cf_arg_26->arg0 = arg0;
    #line 400 
    cf_arg_26->arg1 = arg1;
    #line 401 
    cf_arg_26->arg2 = arg2;
    #line 402 
    cf_arg_26->arg3 = arg3;
    #line 403 
    ret = pthread_create(& emg_thread_26,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_cgx_fwi_event_handler,(void *)cf_arg_26);
    #line 404 
    __VERIFIER_assume(ret == 0);
    #line 405 
    break;
    #line 407 
    case 1: 
            #line 407 
    ;
    #line 408 
    cf_arg_27 = (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)ldv_xmalloc(40UL);
    #line 409 
    cf_arg_27->arg0 = arg0;
    #line 410 
    cf_arg_27->arg1 = arg1;
    #line 411 
    cf_arg_27->arg2 = arg2;
    #line 412 
    cf_arg_27->arg3 = arg3;
    #line 413 
    ret = pthread_create(& emg_thread_27,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_rvu_flr_intr_handler,(void *)cf_arg_27);
    #line 414 
    __VERIFIER_assume(ret == 0);
    #line 415 
    break;
    #line 417 
    case 2: 
            #line 417 
    ;
    #line 418 
    cf_arg_28 = (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)ldv_xmalloc(40UL);
    #line 419 
    cf_arg_28->arg0 = arg0;
    #line 420 
    cf_arg_28->arg1 = arg1;
    #line 421 
    cf_arg_28->arg2 = arg2;
    #line 422 
    cf_arg_28->arg3 = arg3;
    #line 423 
    ret = pthread_create(& emg_thread_28,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_rvu_mbox_intr_handler,(void *)cf_arg_28);
    #line 424 
    __VERIFIER_assume(ret == 0);
    #line 425 
    break;
    #line 427 
    case 3: 
            #line 427 
    ;
    #line 428 
    cf_arg_29 = (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)ldv_xmalloc(40UL);
    #line 429 
    cf_arg_29->arg0 = arg0;
    #line 430 
    cf_arg_29->arg1 = arg1;
    #line 431 
    cf_arg_29->arg2 = arg2;
    #line 432 
    cf_arg_29->arg3 = arg3;
    #line 433 
    ret = pthread_create(& emg_thread_29,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_rvu_me_pf_intr_handler,(void *)cf_arg_29);
    #line 434 
    __VERIFIER_assume(ret == 0);
    #line 435 
    break;
    #line 437 
    case 4: 
            #line 437 
    ;
    #line 438 
    cf_arg_30 = (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)ldv_xmalloc(40UL);
    #line 439 
    cf_arg_30->arg0 = arg0;
    #line 440 
    cf_arg_30->arg1 = arg1;
    #line 441 
    cf_arg_30->arg2 = arg2;
    #line 442 
    cf_arg_30->arg3 = arg3;
    #line 443 
    ret = pthread_create(& emg_thread_30,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_rvu_me_vf_intr_handler,(void *)cf_arg_30);
    #line 444 
    __VERIFIER_assume(ret == 0);
    #line 445 
    break;
    #line 447 
    default: 
             #line 447 
    ;
    #line 447 
    __VERIFIER_assume(0);
  }
  #line 449 
  return;
}

#line 453  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_cgx_stat_fops(void *arg0)
{
  #line 456 
  struct file_operations *emg_9_container;
  #line 457 
  long long emg_9_emg_param_1_0;
  #line 458 
  char *emg_9_emg_param_1_2;
  #line 459 
  char *emg_9_emg_param_1_4;
  #line 460 
  int emg_9_emg_param_2_1;
  #line 461 
  long long *emg_9_emg_param_3_3;
  #line 462 
  long long *emg_9_emg_param_3_5;
  #line 463 
  struct file *emg_9_resource_0;
  #line 464 
  struct inode *emg_9_resource_1;
  #line 465 
  int emg_9_ret;
  #line 466 
  unsigned long emg_9_size_cnt;
  #line 467 
  int emg_repeat_cnt_main_9_0 = 1;
  #line 468 
  int emg_repeat_cnt_main_9_1 = 1;
  #line 469 
  int emg_repeat_cnt_call_9 = 1;
  #line 471 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 475 
  emg_9_ret = ldv_undef_int();
  #line 476 
  emg_9_container = emg_alias_rvu_dbg_cgx_stat_fops;
  #line 477 
  emg_9_ret = ldv_undef_int();
  #line 479 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_cgx_stat_fops);
  #line 481 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 482 
    emg_9_container = data->arg0;
    #line 483 
    ldv_free((void *)data);
  }
  #line 488 
  emg_9_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 489 
  emg_9_size_cnt = (unsigned long)ldv_undef_int();
  #line 493 
  goto emg_main_9;
  #line 497 
  return (void *)0;
  #line 500 
  emg_call_9: 
              #line 500 
  ;
  #line 501 
  if (ldv_undef_int() != 0) {
    #line 502 
    switch (ldv_undef_int()) {
      #line 503 
      case 0: 
              #line 503 
      ;
      #line 505 
      emg_9_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 505 
      emg_9_emg_param_1_2 = emg_9_emg_param_1_2;
      #line 506 
      emg_9_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 506 
      emg_9_emg_param_3_3 = emg_9_emg_param_3_3;
      #line 510 
      seq_read(emg_9_resource_0,emg_9_emg_param_1_2,emg_9_size_cnt,emg_9_emg_param_3_3);
      #line 514 
      ldv_free((void *)emg_9_emg_param_1_2);
      #line 515 
      ldv_free((void *)emg_9_emg_param_3_3);
      #line 517 
      break;
      #line 519 
      case 1: 
              #line 519 
      ;
      #line 521 
      seq_lseek(emg_9_resource_0,emg_9_emg_param_1_0,emg_9_emg_param_2_1);
      #line 523 
      break;
      #line 525 
      case 2: 
              #line 525 
      ;
      #line 532 
      __VERIFIER_assume(emg_9_size_cnt <= 2147479552UL);
      #line 533 
      emg_9_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 533 
      emg_9_emg_param_1_4 = emg_9_emg_param_1_4;
      #line 534 
      emg_9_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 534 
      emg_9_emg_param_3_5 = emg_9_emg_param_3_5;
      #line 538 
      if (emg_9_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 539 
        (*(emg_9_container->write))(emg_9_resource_0,emg_9_emg_param_1_4,emg_9_size_cnt,emg_9_emg_param_3_5);
      #line 544 
      ldv_free((void *)emg_9_emg_param_1_4);
      #line 545 
      ldv_free((void *)emg_9_emg_param_3_5);
      #line 547 
      break;
      #line 549 
      default: 
               #line 549 
      ;
      #line 549 
      __VERIFIER_assume(0);
    }
    #line 552 
    if (emg_repeat_cnt_call_9 > 0) {
      #line 553 
      emg_repeat_cnt_call_9 --;
      #line 555 
      goto emg_call_9;
    }
    else 
         #line 557 
         __VERIFIER_assume(0);
  }
  else {
    #line 563 
    (*emg_alias_single_release)(emg_9_resource_1,emg_9_resource_0);
    #line 566 
    if (emg_repeat_cnt_main_9_0 > 0) {
      #line 567 
      emg_repeat_cnt_main_9_0 --;
      #line 569 
      goto emg_main_9;
    }
    else 
         #line 571 
         __VERIFIER_assume(0);
  }
  #line 577 
  return (void *)0;
  #line 580 
  emg_main_9: 
              #line 580 
  ;
  #line 581 
  if (ldv_undef_int() != 0) {
    #line 583 
    emg_9_ret = emg_wrapper_rvu_dbg_open_cgx_stat(emg_9_resource_1,emg_9_resource_0);
    #line 588 
    emg_9_ret = ldv_filter_err_code(emg_9_ret);
    #line 591 
    if (ldv_undef_int() != 0) {
      #line 593 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 597 
      goto emg_call_9;
    }
    else {
      #line 602 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 605 
      if (emg_repeat_cnt_main_9_1 > 0) {
        #line 606 
        emg_repeat_cnt_main_9_1 --;
        #line 608 
        goto emg_main_9;
      }
      else 
           #line 610 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 617 
       ldv_free((void *)emg_9_resource_0);
  #line 625 
  return (void *)0;
}

#line 630  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_cq_ctx_fops(void *arg0)
{
  #line 633 
  struct file_operations *emg_10_container;
  #line 634 
  long long emg_10_emg_param_1_0;
  #line 635 
  char *emg_10_emg_param_1_2;
  #line 636 
  char *emg_10_emg_param_1_4;
  #line 637 
  int emg_10_emg_param_2_1;
  #line 638 
  long long *emg_10_emg_param_3_3;
  #line 639 
  long long *emg_10_emg_param_3_5;
  #line 640 
  struct file *emg_10_resource_0;
  #line 641 
  struct inode *emg_10_resource_1;
  #line 642 
  int emg_10_ret;
  #line 643 
  unsigned long emg_10_size_cnt;
  #line 644 
  int emg_repeat_cnt_main_10_0 = 1;
  #line 645 
  int emg_repeat_cnt_main_10_1 = 1;
  #line 646 
  int emg_repeat_cnt_call_10 = 1;
  #line 648 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 652 
  emg_10_ret = ldv_undef_int();
  #line 653 
  emg_10_container = emg_alias_rvu_dbg_nix_cq_ctx_fops;
  #line 654 
  emg_10_ret = ldv_undef_int();
  #line 656 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_nix_cq_ctx_fops);
  #line 658 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 659 
    emg_10_container = data->arg0;
    #line 660 
    ldv_free((void *)data);
  }
  #line 665 
  emg_10_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 666 
  emg_10_size_cnt = (unsigned long)ldv_undef_int();
  #line 670 
  goto emg_main_10;
  #line 674 
  return (void *)0;
  #line 677 
  emg_call_10: 
               #line 677 
  ;
  #line 678 
  if (ldv_undef_int() != 0) {
    #line 679 
    switch (ldv_undef_int()) {
      #line 680 
      case 0: 
              #line 680 
      ;
      #line 682 
      emg_10_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 682 
      emg_10_emg_param_1_2 = emg_10_emg_param_1_2;
      #line 683 
      emg_10_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 683 
      emg_10_emg_param_3_3 = emg_10_emg_param_3_3;
      #line 687 
      seq_read(emg_10_resource_0,emg_10_emg_param_1_2,emg_10_size_cnt,emg_10_emg_param_3_3);
      #line 691 
      ldv_free((void *)emg_10_emg_param_1_2);
      #line 692 
      ldv_free((void *)emg_10_emg_param_3_3);
      #line 694 
      break;
      #line 696 
      case 1: 
              #line 696 
      ;
      #line 698 
      seq_lseek(emg_10_resource_0,emg_10_emg_param_1_0,emg_10_emg_param_2_1);
      #line 700 
      break;
      #line 702 
      case 2: 
              #line 702 
      ;
      #line 709 
      __VERIFIER_assume(emg_10_size_cnt <= 2147479552UL);
      #line 710 
      emg_10_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 710 
      emg_10_emg_param_1_4 = emg_10_emg_param_1_4;
      #line 711 
      emg_10_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 711 
      emg_10_emg_param_3_5 = emg_10_emg_param_3_5;
      #line 715 
      emg_wrapper_rvu_dbg_nix_cq_ctx_write(emg_10_resource_0,emg_10_emg_param_1_4,emg_10_size_cnt,emg_10_emg_param_3_5);
      #line 719 
      ldv_free((void *)emg_10_emg_param_1_4);
      #line 720 
      ldv_free((void *)emg_10_emg_param_3_5);
      #line 722 
      break;
      #line 724 
      default: 
               #line 724 
      ;
      #line 724 
      __VERIFIER_assume(0);
    }
    #line 727 
    if (emg_repeat_cnt_call_10 > 0) {
      #line 728 
      emg_repeat_cnt_call_10 --;
      #line 730 
      goto emg_call_10;
    }
    else 
         #line 732 
         __VERIFIER_assume(0);
  }
  else {
    #line 738 
    (*emg_alias_single_release)(emg_10_resource_1,emg_10_resource_0);
    #line 741 
    if (emg_repeat_cnt_main_10_0 > 0) {
      #line 742 
      emg_repeat_cnt_main_10_0 --;
      #line 744 
      goto emg_main_10;
    }
    else 
         #line 746 
         __VERIFIER_assume(0);
  }
  #line 752 
  return (void *)0;
  #line 755 
  emg_main_10: 
               #line 755 
  ;
  #line 756 
  if (ldv_undef_int() != 0) {
    #line 758 
    emg_10_ret = emg_wrapper_rvu_dbg_open_nix_cq_ctx(emg_10_resource_1,emg_10_resource_0);
    #line 763 
    emg_10_ret = ldv_filter_err_code(emg_10_ret);
    #line 766 
    if (ldv_undef_int() != 0) {
      #line 768 
      __VERIFIER_assume(emg_10_ret == 0);
      #line 772 
      goto emg_call_10;
    }
    else {
      #line 777 
      __VERIFIER_assume(emg_10_ret != 0);
      #line 780 
      if (emg_repeat_cnt_main_10_1 > 0) {
        #line 781 
        emg_repeat_cnt_main_10_1 --;
        #line 783 
        goto emg_main_10;
      }
      else 
           #line 785 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 792 
       ldv_free((void *)emg_10_resource_0);
  #line 800 
  return (void *)0;
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_ndc_rx_cache_fops(void *arg0)
{
  #line 808 
  struct file_operations *emg_11_container;
  #line 809 
  long long emg_11_emg_param_1_0;
  #line 810 
  char *emg_11_emg_param_1_2;
  #line 811 
  char *emg_11_emg_param_1_4;
  #line 812 
  int emg_11_emg_param_2_1;
  #line 813 
  long long *emg_11_emg_param_3_3;
  #line 814 
  long long *emg_11_emg_param_3_5;
  #line 815 
  struct file *emg_11_resource_0;
  #line 816 
  struct inode *emg_11_resource_1;
  #line 817 
  int emg_11_ret;
  #line 818 
  unsigned long emg_11_size_cnt;
  #line 819 
  int emg_repeat_cnt_main_11_1 = 1;
  #line 820 
  int emg_repeat_cnt_call_11 = 1;
  #line 821 
  int emg_repeat_cnt_main_11_0 = 1;
  #line 823 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 827 
  emg_11_ret = ldv_undef_int();
  #line 828 
  emg_11_container = emg_alias_rvu_dbg_nix_ndc_rx_cache_fops;
  #line 829 
  emg_11_ret = ldv_undef_int();
  #line 831 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_nix_ndc_rx_cache_fops);
  #line 833 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 834 
    emg_11_container = data->arg0;
    #line 835 
    ldv_free((void *)data);
  }
  #line 840 
  emg_11_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 841 
  emg_11_size_cnt = (unsigned long)ldv_undef_int();
  #line 845 
  goto emg_main_11;
  #line 849 
  return (void *)0;
  #line 852 
  emg_call_11: 
               #line 852 
  ;
  #line 853 
  if (ldv_undef_int() != 0) {
    #line 854 
    switch (ldv_undef_int()) {
      #line 855 
      case 0: 
              #line 855 
      ;
      #line 857 
      emg_11_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 857 
      emg_11_emg_param_1_2 = emg_11_emg_param_1_2;
      #line 858 
      emg_11_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 858 
      emg_11_emg_param_3_3 = emg_11_emg_param_3_3;
      #line 862 
      seq_read(emg_11_resource_0,emg_11_emg_param_1_2,emg_11_size_cnt,emg_11_emg_param_3_3);
      #line 866 
      ldv_free((void *)emg_11_emg_param_1_2);
      #line 867 
      ldv_free((void *)emg_11_emg_param_3_3);
      #line 869 
      break;
      #line 871 
      case 1: 
              #line 871 
      ;
      #line 873 
      seq_lseek(emg_11_resource_0,emg_11_emg_param_1_0,emg_11_emg_param_2_1);
      #line 875 
      break;
      #line 877 
      case 2: 
              #line 877 
      ;
      #line 884 
      __VERIFIER_assume(emg_11_size_cnt <= 2147479552UL);
      #line 885 
      emg_11_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 885 
      emg_11_emg_param_1_4 = emg_11_emg_param_1_4;
      #line 886 
      emg_11_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 886 
      emg_11_emg_param_3_5 = emg_11_emg_param_3_5;
      #line 890 
      if (emg_11_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 891 
        (*(emg_11_container->write))(emg_11_resource_0,emg_11_emg_param_1_4,emg_11_size_cnt,emg_11_emg_param_3_5);
      #line 896 
      ldv_free((void *)emg_11_emg_param_1_4);
      #line 897 
      ldv_free((void *)emg_11_emg_param_3_5);
      #line 899 
      break;
      #line 901 
      default: 
               #line 901 
      ;
      #line 901 
      __VERIFIER_assume(0);
    }
    #line 904 
    if (emg_repeat_cnt_call_11 > 0) {
      #line 905 
      emg_repeat_cnt_call_11 --;
      #line 907 
      goto emg_call_11;
    }
    else 
         #line 909 
         __VERIFIER_assume(0);
  }
  else {
    #line 915 
    (*emg_alias_single_release)(emg_11_resource_1,emg_11_resource_0);
    #line 918 
    if (emg_repeat_cnt_main_11_1 > 0) {
      #line 919 
      emg_repeat_cnt_main_11_1 --;
      #line 921 
      goto emg_main_11;
    }
    else 
         #line 923 
         __VERIFIER_assume(0);
  }
  #line 929 
  return (void *)0;
  #line 932 
  emg_main_11: 
               #line 932 
  ;
  #line 933 
  if (ldv_undef_int() != 0) {
    #line 935 
    emg_11_ret = emg_wrapper_rvu_dbg_open_nix_ndc_rx_cache(emg_11_resource_1,emg_11_resource_0);
    #line 940 
    emg_11_ret = ldv_filter_err_code(emg_11_ret);
    #line 943 
    if (ldv_undef_int() != 0) {
      #line 945 
      __VERIFIER_assume(emg_11_ret == 0);
      #line 949 
      goto emg_call_11;
    }
    else {
      #line 954 
      __VERIFIER_assume(emg_11_ret != 0);
      #line 957 
      if (emg_repeat_cnt_main_11_0 > 0) {
        #line 958 
        emg_repeat_cnt_main_11_0 --;
        #line 960 
        goto emg_main_11;
      }
      else 
           #line 962 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 969 
       ldv_free((void *)emg_11_resource_0);
  #line 977 
  return (void *)0;
}

#line 982  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_ndc_rx_hits_miss_fops(void *arg0)
{
  #line 985 
  struct file_operations *emg_12_container;
  #line 986 
  long long emg_12_emg_param_1_0;
  #line 987 
  char *emg_12_emg_param_1_2;
  #line 988 
  char *emg_12_emg_param_1_4;
  #line 989 
  int emg_12_emg_param_2_1;
  #line 990 
  long long *emg_12_emg_param_3_3;
  #line 991 
  long long *emg_12_emg_param_3_5;
  #line 992 
  struct file *emg_12_resource_0;
  #line 993 
  struct inode *emg_12_resource_1;
  #line 994 
  int emg_12_ret;
  #line 995 
  unsigned long emg_12_size_cnt;
  #line 996 
  int emg_repeat_cnt_call_12 = 1;
  #line 997 
  int emg_repeat_cnt_main_12_1 = 1;
  #line 998 
  int emg_repeat_cnt_main_12_0 = 1;
  #line 1000 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 1004 
  emg_12_ret = ldv_undef_int();
  #line 1005 
  emg_12_container = emg_alias_rvu_dbg_nix_ndc_rx_hits_miss_fops;
  #line 1006 
  emg_12_ret = ldv_undef_int();
  #line 1008 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_nix_ndc_rx_hits_miss_fops);
  #line 1010 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 1011 
    emg_12_container = data->arg0;
    #line 1012 
    ldv_free((void *)data);
  }
  #line 1017 
  emg_12_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1018 
  emg_12_size_cnt = (unsigned long)ldv_undef_int();
  #line 1022 
  goto emg_main_12;
  #line 1026 
  return (void *)0;
  #line 1029 
  emg_call_12: 
               #line 1029 
  ;
  #line 1030 
  if (ldv_undef_int() != 0) {
    #line 1031 
    switch (ldv_undef_int()) {
      #line 1032 
      case 0: 
              #line 1032 
      ;
      #line 1034 
      emg_12_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1034 
      emg_12_emg_param_1_2 = emg_12_emg_param_1_2;
      #line 1035 
      emg_12_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1035 
      emg_12_emg_param_3_3 = emg_12_emg_param_3_3;
      #line 1039 
      seq_read(emg_12_resource_0,emg_12_emg_param_1_2,emg_12_size_cnt,emg_12_emg_param_3_3);
      #line 1043 
      ldv_free((void *)emg_12_emg_param_1_2);
      #line 1044 
      ldv_free((void *)emg_12_emg_param_3_3);
      #line 1046 
      break;
      #line 1048 
      case 1: 
              #line 1048 
      ;
      #line 1050 
      seq_lseek(emg_12_resource_0,emg_12_emg_param_1_0,emg_12_emg_param_2_1);
      #line 1052 
      break;
      #line 1054 
      case 2: 
              #line 1054 
      ;
      #line 1061 
      __VERIFIER_assume(emg_12_size_cnt <= 2147479552UL);
      #line 1062 
      emg_12_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1062 
      emg_12_emg_param_1_4 = emg_12_emg_param_1_4;
      #line 1063 
      emg_12_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1063 
      emg_12_emg_param_3_5 = emg_12_emg_param_3_5;
      #line 1067 
      if (emg_12_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1068 
        (*(emg_12_container->write))(emg_12_resource_0,emg_12_emg_param_1_4,emg_12_size_cnt,emg_12_emg_param_3_5);
      #line 1073 
      ldv_free((void *)emg_12_emg_param_1_4);
      #line 1074 
      ldv_free((void *)emg_12_emg_param_3_5);
      #line 1076 
      break;
      #line 1078 
      default: 
               #line 1078 
      ;
      #line 1078 
      __VERIFIER_assume(0);
    }
    #line 1081 
    if (emg_repeat_cnt_call_12 > 0) {
      #line 1082 
      emg_repeat_cnt_call_12 --;
      #line 1084 
      goto emg_call_12;
    }
    else 
         #line 1086 
         __VERIFIER_assume(0);
  }
  else {
    #line 1092 
    (*emg_alias_single_release)(emg_12_resource_1,emg_12_resource_0);
    #line 1095 
    if (emg_repeat_cnt_main_12_1 > 0) {
      #line 1096 
      emg_repeat_cnt_main_12_1 --;
      #line 1098 
      goto emg_main_12;
    }
    else 
         #line 1100 
         __VERIFIER_assume(0);
  }
  #line 1106 
  return (void *)0;
  #line 1109 
  emg_main_12: 
               #line 1109 
  ;
  #line 1110 
  if (ldv_undef_int() != 0) {
    #line 1112 
    emg_12_ret = emg_wrapper_rvu_dbg_open_nix_ndc_rx_hits_miss(emg_12_resource_1,emg_12_resource_0);
    #line 1117 
    emg_12_ret = ldv_filter_err_code(emg_12_ret);
    #line 1120 
    if (ldv_undef_int() != 0) {
      #line 1122 
      __VERIFIER_assume(emg_12_ret == 0);
      #line 1126 
      goto emg_call_12;
    }
    else {
      #line 1131 
      __VERIFIER_assume(emg_12_ret != 0);
      #line 1134 
      if (emg_repeat_cnt_main_12_0 > 0) {
        #line 1135 
        emg_repeat_cnt_main_12_0 --;
        #line 1137 
        goto emg_main_12;
      }
      else 
           #line 1139 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1146 
       ldv_free((void *)emg_12_resource_0);
  #line 1154 
  return (void *)0;
}

#line 1159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_ndc_tx_cache_fops(void *arg0)
{
  #line 1162 
  struct file_operations *emg_13_container;
  #line 1163 
  long long emg_13_emg_param_1_0;
  #line 1164 
  char *emg_13_emg_param_1_2;
  #line 1165 
  char *emg_13_emg_param_1_4;
  #line 1166 
  int emg_13_emg_param_2_1;
  #line 1167 
  long long *emg_13_emg_param_3_3;
  #line 1168 
  long long *emg_13_emg_param_3_5;
  #line 1169 
  struct file *emg_13_resource_0;
  #line 1170 
  struct inode *emg_13_resource_1;
  #line 1171 
  int emg_13_ret;
  #line 1172 
  unsigned long emg_13_size_cnt;
  #line 1173 
  int emg_repeat_cnt_call_13 = 1;
  #line 1174 
  int emg_repeat_cnt_main_13_0 = 1;
  #line 1175 
  int emg_repeat_cnt_main_13_1 = 1;
  #line 1177 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 1181 
  emg_13_ret = ldv_undef_int();
  #line 1182 
  emg_13_container = emg_alias_rvu_dbg_nix_ndc_tx_cache_fops;
  #line 1183 
  emg_13_ret = ldv_undef_int();
  #line 1185 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_nix_ndc_tx_cache_fops);
  #line 1187 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 1188 
    emg_13_container = data->arg0;
    #line 1189 
    ldv_free((void *)data);
  }
  #line 1194 
  emg_13_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1195 
  emg_13_size_cnt = (unsigned long)ldv_undef_int();
  #line 1199 
  goto emg_main_13;
  #line 1203 
  return (void *)0;
  #line 1206 
  emg_call_13: 
               #line 1206 
  ;
  #line 1207 
  if (ldv_undef_int() != 0) {
    #line 1208 
    switch (ldv_undef_int()) {
      #line 1209 
      case 0: 
              #line 1209 
      ;
      #line 1211 
      emg_13_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1211 
      emg_13_emg_param_1_2 = emg_13_emg_param_1_2;
      #line 1212 
      emg_13_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1212 
      emg_13_emg_param_3_3 = emg_13_emg_param_3_3;
      #line 1216 
      seq_read(emg_13_resource_0,emg_13_emg_param_1_2,emg_13_size_cnt,emg_13_emg_param_3_3);
      #line 1220 
      ldv_free((void *)emg_13_emg_param_1_2);
      #line 1221 
      ldv_free((void *)emg_13_emg_param_3_3);
      #line 1223 
      break;
      #line 1225 
      case 1: 
              #line 1225 
      ;
      #line 1227 
      seq_lseek(emg_13_resource_0,emg_13_emg_param_1_0,emg_13_emg_param_2_1);
      #line 1229 
      break;
      #line 1231 
      case 2: 
              #line 1231 
      ;
      #line 1238 
      __VERIFIER_assume(emg_13_size_cnt <= 2147479552UL);
      #line 1239 
      emg_13_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1239 
      emg_13_emg_param_1_4 = emg_13_emg_param_1_4;
      #line 1240 
      emg_13_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1240 
      emg_13_emg_param_3_5 = emg_13_emg_param_3_5;
      #line 1244 
      if (emg_13_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1245 
        (*(emg_13_container->write))(emg_13_resource_0,emg_13_emg_param_1_4,emg_13_size_cnt,emg_13_emg_param_3_5);
      #line 1250 
      ldv_free((void *)emg_13_emg_param_1_4);
      #line 1251 
      ldv_free((void *)emg_13_emg_param_3_5);
      #line 1253 
      break;
      #line 1255 
      default: 
               #line 1255 
      ;
      #line 1255 
      __VERIFIER_assume(0);
    }
    #line 1258 
    if (emg_repeat_cnt_call_13 > 0) {
      #line 1259 
      emg_repeat_cnt_call_13 --;
      #line 1261 
      goto emg_call_13;
    }
    else 
         #line 1263 
         __VERIFIER_assume(0);
  }
  else {
    #line 1269 
    (*emg_alias_single_release)(emg_13_resource_1,emg_13_resource_0);
    #line 1272 
    if (emg_repeat_cnt_main_13_0 > 0) {
      #line 1273 
      emg_repeat_cnt_main_13_0 --;
      #line 1275 
      goto emg_main_13;
    }
    else 
         #line 1277 
         __VERIFIER_assume(0);
  }
  #line 1283 
  return (void *)0;
  #line 1286 
  emg_main_13: 
               #line 1286 
  ;
  #line 1287 
  if (ldv_undef_int() != 0) {
    #line 1289 
    emg_13_ret = emg_wrapper_rvu_dbg_open_nix_ndc_tx_cache(emg_13_resource_1,emg_13_resource_0);
    #line 1294 
    emg_13_ret = ldv_filter_err_code(emg_13_ret);
    #line 1297 
    if (ldv_undef_int() != 0) {
      #line 1299 
      __VERIFIER_assume(emg_13_ret == 0);
      #line 1303 
      goto emg_call_13;
    }
    else {
      #line 1308 
      __VERIFIER_assume(emg_13_ret != 0);
      #line 1311 
      if (emg_repeat_cnt_main_13_1 > 0) {
        #line 1312 
        emg_repeat_cnt_main_13_1 --;
        #line 1314 
        goto emg_main_13;
      }
      else 
           #line 1316 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1323 
       ldv_free((void *)emg_13_resource_0);
  #line 1331 
  return (void *)0;
}

#line 1336  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_ndc_tx_hits_miss_fops(void *arg0)
{
  #line 1339 
  struct file_operations *emg_14_container;
  #line 1340 
  long long emg_14_emg_param_1_0;
  #line 1341 
  char *emg_14_emg_param_1_2;
  #line 1342 
  char *emg_14_emg_param_1_4;
  #line 1343 
  int emg_14_emg_param_2_1;
  #line 1344 
  long long *emg_14_emg_param_3_3;
  #line 1345 
  long long *emg_14_emg_param_3_5;
  #line 1346 
  struct file *emg_14_resource_0;
  #line 1347 
  struct inode *emg_14_resource_1;
  #line 1348 
  int emg_14_ret;
  #line 1349 
  unsigned long emg_14_size_cnt;
  #line 1350 
  int emg_repeat_cnt_call_14 = 1;
  #line 1351 
  int emg_repeat_cnt_main_14_1 = 1;
  #line 1352 
  int emg_repeat_cnt_main_14_0 = 1;
  #line 1354 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 1358 
  emg_14_ret = ldv_undef_int();
  #line 1359 
  emg_14_container = emg_alias_rvu_dbg_nix_ndc_tx_hits_miss_fops;
  #line 1360 
  emg_14_ret = ldv_undef_int();
  #line 1362 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_nix_ndc_tx_hits_miss_fops);
  #line 1364 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 1365 
    emg_14_container = data->arg0;
    #line 1366 
    ldv_free((void *)data);
  }
  #line 1371 
  emg_14_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1372 
  emg_14_size_cnt = (unsigned long)ldv_undef_int();
  #line 1376 
  goto emg_main_14;
  #line 1380 
  return (void *)0;
  #line 1383 
  emg_call_14: 
               #line 1383 
  ;
  #line 1384 
  if (ldv_undef_int() != 0) {
    #line 1385 
    switch (ldv_undef_int()) {
      #line 1386 
      case 0: 
              #line 1386 
      ;
      #line 1388 
      emg_14_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1388 
      emg_14_emg_param_1_2 = emg_14_emg_param_1_2;
      #line 1389 
      emg_14_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1389 
      emg_14_emg_param_3_3 = emg_14_emg_param_3_3;
      #line 1393 
      seq_read(emg_14_resource_0,emg_14_emg_param_1_2,emg_14_size_cnt,emg_14_emg_param_3_3);
      #line 1397 
      ldv_free((void *)emg_14_emg_param_1_2);
      #line 1398 
      ldv_free((void *)emg_14_emg_param_3_3);
      #line 1400 
      break;
      #line 1402 
      case 1: 
              #line 1402 
      ;
      #line 1404 
      seq_lseek(emg_14_resource_0,emg_14_emg_param_1_0,emg_14_emg_param_2_1);
      #line 1406 
      break;
      #line 1408 
      case 2: 
              #line 1408 
      ;
      #line 1415 
      __VERIFIER_assume(emg_14_size_cnt <= 2147479552UL);
      #line 1416 
      emg_14_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1416 
      emg_14_emg_param_1_4 = emg_14_emg_param_1_4;
      #line 1417 
      emg_14_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1417 
      emg_14_emg_param_3_5 = emg_14_emg_param_3_5;
      #line 1421 
      if (emg_14_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1422 
        (*(emg_14_container->write))(emg_14_resource_0,emg_14_emg_param_1_4,emg_14_size_cnt,emg_14_emg_param_3_5);
      #line 1427 
      ldv_free((void *)emg_14_emg_param_1_4);
      #line 1428 
      ldv_free((void *)emg_14_emg_param_3_5);
      #line 1430 
      break;
      #line 1432 
      default: 
               #line 1432 
      ;
      #line 1432 
      __VERIFIER_assume(0);
    }
    #line 1435 
    if (emg_repeat_cnt_call_14 > 0) {
      #line 1436 
      emg_repeat_cnt_call_14 --;
      #line 1438 
      goto emg_call_14;
    }
    else 
         #line 1440 
         __VERIFIER_assume(0);
  }
  else {
    #line 1446 
    (*emg_alias_single_release)(emg_14_resource_1,emg_14_resource_0);
    #line 1449 
    if (emg_repeat_cnt_main_14_0 > 0) {
      #line 1450 
      emg_repeat_cnt_main_14_0 --;
      #line 1452 
      goto emg_main_14;
    }
    else 
         #line 1454 
         __VERIFIER_assume(0);
  }
  #line 1460 
  return (void *)0;
  #line 1463 
  emg_main_14: 
               #line 1463 
  ;
  #line 1464 
  if (ldv_undef_int() != 0) {
    #line 1466 
    emg_14_ret = emg_wrapper_rvu_dbg_open_nix_ndc_tx_hits_miss(emg_14_resource_1,emg_14_resource_0);
    #line 1471 
    emg_14_ret = ldv_filter_err_code(emg_14_ret);
    #line 1474 
    if (ldv_undef_int() != 0) {
      #line 1476 
      __VERIFIER_assume(emg_14_ret == 0);
      #line 1480 
      goto emg_call_14;
    }
    else {
      #line 1485 
      __VERIFIER_assume(emg_14_ret != 0);
      #line 1488 
      if (emg_repeat_cnt_main_14_1 > 0) {
        #line 1489 
        emg_repeat_cnt_main_14_1 --;
        #line 1491 
        goto emg_main_14;
      }
      else 
           #line 1493 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1500 
       ldv_free((void *)emg_14_resource_0);
  #line 1508 
  return (void *)0;
}

#line 1513  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_qsize_fops(void *arg0)
{
  #line 1516 
  struct file_operations *emg_15_container;
  #line 1517 
  long long emg_15_emg_param_1_0;
  #line 1518 
  char *emg_15_emg_param_1_2;
  #line 1519 
  char *emg_15_emg_param_1_4;
  #line 1520 
  int emg_15_emg_param_2_1;
  #line 1521 
  long long *emg_15_emg_param_3_3;
  #line 1522 
  long long *emg_15_emg_param_3_5;
  #line 1523 
  struct file *emg_15_resource_0;
  #line 1524 
  struct inode *emg_15_resource_1;
  #line 1525 
  int emg_15_ret;
  #line 1526 
  unsigned long emg_15_size_cnt;
  #line 1527 
  int emg_repeat_cnt_main_15_0 = 1;
  #line 1528 
  int emg_repeat_cnt_call_15 = 1;
  #line 1529 
  int emg_repeat_cnt_main_15_1 = 1;
  #line 1531 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 1535 
  emg_15_ret = ldv_undef_int();
  #line 1536 
  emg_15_container = emg_alias_rvu_dbg_nix_qsize_fops;
  #line 1537 
  emg_15_ret = ldv_undef_int();
  #line 1539 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_nix_qsize_fops);
  #line 1541 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 1542 
    emg_15_container = data->arg0;
    #line 1543 
    ldv_free((void *)data);
  }
  #line 1548 
  emg_15_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1549 
  emg_15_size_cnt = (unsigned long)ldv_undef_int();
  #line 1553 
  goto emg_main_15;
  #line 1557 
  return (void *)0;
  #line 1560 
  emg_call_15: 
               #line 1560 
  ;
  #line 1561 
  if (ldv_undef_int() != 0) {
    #line 1562 
    switch (ldv_undef_int()) {
      #line 1563 
      case 0: 
              #line 1563 
      ;
      #line 1565 
      emg_15_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1565 
      emg_15_emg_param_1_2 = emg_15_emg_param_1_2;
      #line 1566 
      emg_15_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1566 
      emg_15_emg_param_3_3 = emg_15_emg_param_3_3;
      #line 1570 
      seq_read(emg_15_resource_0,emg_15_emg_param_1_2,emg_15_size_cnt,emg_15_emg_param_3_3);
      #line 1574 
      ldv_free((void *)emg_15_emg_param_1_2);
      #line 1575 
      ldv_free((void *)emg_15_emg_param_3_3);
      #line 1577 
      break;
      #line 1579 
      case 1: 
              #line 1579 
      ;
      #line 1581 
      seq_lseek(emg_15_resource_0,emg_15_emg_param_1_0,emg_15_emg_param_2_1);
      #line 1583 
      break;
      #line 1585 
      case 2: 
              #line 1585 
      ;
      #line 1592 
      __VERIFIER_assume(emg_15_size_cnt <= 2147479552UL);
      #line 1593 
      emg_15_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1593 
      emg_15_emg_param_1_4 = emg_15_emg_param_1_4;
      #line 1594 
      emg_15_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1594 
      emg_15_emg_param_3_5 = emg_15_emg_param_3_5;
      #line 1598 
      emg_wrapper_rvu_dbg_nix_qsize_write(emg_15_resource_0,emg_15_emg_param_1_4,emg_15_size_cnt,emg_15_emg_param_3_5);
      #line 1602 
      ldv_free((void *)emg_15_emg_param_1_4);
      #line 1603 
      ldv_free((void *)emg_15_emg_param_3_5);
      #line 1605 
      break;
      #line 1607 
      default: 
               #line 1607 
      ;
      #line 1607 
      __VERIFIER_assume(0);
    }
    #line 1610 
    if (emg_repeat_cnt_call_15 > 0) {
      #line 1611 
      emg_repeat_cnt_call_15 --;
      #line 1613 
      goto emg_call_15;
    }
    else 
         #line 1615 
         __VERIFIER_assume(0);
  }
  else {
    #line 1621 
    (*emg_alias_single_release)(emg_15_resource_1,emg_15_resource_0);
    #line 1624 
    if (emg_repeat_cnt_main_15_1 > 0) {
      #line 1625 
      emg_repeat_cnt_main_15_1 --;
      #line 1627 
      goto emg_main_15;
    }
    else 
         #line 1629 
         __VERIFIER_assume(0);
  }
  #line 1635 
  return (void *)0;
  #line 1638 
  emg_main_15: 
               #line 1638 
  ;
  #line 1639 
  if (ldv_undef_int() != 0) {
    #line 1641 
    emg_15_ret = emg_wrapper_rvu_dbg_open_nix_qsize(emg_15_resource_1,emg_15_resource_0);
    #line 1646 
    emg_15_ret = ldv_filter_err_code(emg_15_ret);
    #line 1649 
    if (ldv_undef_int() != 0) {
      #line 1651 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 1655 
      goto emg_call_15;
    }
    else {
      #line 1660 
      __VERIFIER_assume(emg_15_ret != 0);
      #line 1663 
      if (emg_repeat_cnt_main_15_0 > 0) {
        #line 1664 
        emg_repeat_cnt_main_15_0 --;
        #line 1666 
        goto emg_main_15;
      }
      else 
           #line 1668 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1675 
       ldv_free((void *)emg_15_resource_0);
  #line 1683 
  return (void *)0;
}

#line 1688  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_rq_ctx_fops(void *arg0)
{
  #line 1691 
  struct file_operations *emg_16_container;
  #line 1692 
  long long emg_16_emg_param_1_0;
  #line 1693 
  char *emg_16_emg_param_1_2;
  #line 1694 
  char *emg_16_emg_param_1_4;
  #line 1695 
  int emg_16_emg_param_2_1;
  #line 1696 
  long long *emg_16_emg_param_3_3;
  #line 1697 
  long long *emg_16_emg_param_3_5;
  #line 1698 
  struct file *emg_16_resource_0;
  #line 1699 
  struct inode *emg_16_resource_1;
  #line 1700 
  int emg_16_ret;
  #line 1701 
  unsigned long emg_16_size_cnt;
  #line 1702 
  int emg_repeat_cnt_call_16 = 1;
  #line 1703 
  int emg_repeat_cnt_main_16_0 = 1;
  #line 1704 
  int emg_repeat_cnt_main_16_1 = 1;
  #line 1706 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 1710 
  emg_16_ret = ldv_undef_int();
  #line 1711 
  emg_16_container = emg_alias_rvu_dbg_nix_rq_ctx_fops;
  #line 1712 
  emg_16_ret = ldv_undef_int();
  #line 1714 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_nix_rq_ctx_fops);
  #line 1716 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 1717 
    emg_16_container = data->arg0;
    #line 1718 
    ldv_free((void *)data);
  }
  #line 1723 
  emg_16_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1724 
  emg_16_size_cnt = (unsigned long)ldv_undef_int();
  #line 1728 
  goto emg_main_16;
  #line 1732 
  return (void *)0;
  #line 1735 
  emg_call_16: 
               #line 1735 
  ;
  #line 1736 
  if (ldv_undef_int() != 0) {
    #line 1737 
    switch (ldv_undef_int()) {
      #line 1738 
      case 0: 
              #line 1738 
      ;
      #line 1740 
      emg_16_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1740 
      emg_16_emg_param_1_2 = emg_16_emg_param_1_2;
      #line 1741 
      emg_16_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1741 
      emg_16_emg_param_3_3 = emg_16_emg_param_3_3;
      #line 1745 
      seq_read(emg_16_resource_0,emg_16_emg_param_1_2,emg_16_size_cnt,emg_16_emg_param_3_3);
      #line 1749 
      ldv_free((void *)emg_16_emg_param_1_2);
      #line 1750 
      ldv_free((void *)emg_16_emg_param_3_3);
      #line 1752 
      break;
      #line 1754 
      case 1: 
              #line 1754 
      ;
      #line 1756 
      seq_lseek(emg_16_resource_0,emg_16_emg_param_1_0,emg_16_emg_param_2_1);
      #line 1758 
      break;
      #line 1760 
      case 2: 
              #line 1760 
      ;
      #line 1767 
      __VERIFIER_assume(emg_16_size_cnt <= 2147479552UL);
      #line 1768 
      emg_16_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1768 
      emg_16_emg_param_1_4 = emg_16_emg_param_1_4;
      #line 1769 
      emg_16_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1769 
      emg_16_emg_param_3_5 = emg_16_emg_param_3_5;
      #line 1773 
      emg_wrapper_rvu_dbg_nix_rq_ctx_write(emg_16_resource_0,emg_16_emg_param_1_4,emg_16_size_cnt,emg_16_emg_param_3_5);
      #line 1777 
      ldv_free((void *)emg_16_emg_param_1_4);
      #line 1778 
      ldv_free((void *)emg_16_emg_param_3_5);
      #line 1780 
      break;
      #line 1782 
      default: 
               #line 1782 
      ;
      #line 1782 
      __VERIFIER_assume(0);
    }
    #line 1785 
    if (emg_repeat_cnt_call_16 > 0) {
      #line 1786 
      emg_repeat_cnt_call_16 --;
      #line 1788 
      goto emg_call_16;
    }
    else 
         #line 1790 
         __VERIFIER_assume(0);
  }
  else {
    #line 1796 
    (*emg_alias_single_release)(emg_16_resource_1,emg_16_resource_0);
    #line 1799 
    if (emg_repeat_cnt_main_16_1 > 0) {
      #line 1800 
      emg_repeat_cnt_main_16_1 --;
      #line 1802 
      goto emg_main_16;
    }
    else 
         #line 1804 
         __VERIFIER_assume(0);
  }
  #line 1810 
  return (void *)0;
  #line 1813 
  emg_main_16: 
               #line 1813 
  ;
  #line 1814 
  if (ldv_undef_int() != 0) {
    #line 1816 
    emg_16_ret = emg_wrapper_rvu_dbg_open_nix_rq_ctx(emg_16_resource_1,emg_16_resource_0);
    #line 1821 
    emg_16_ret = ldv_filter_err_code(emg_16_ret);
    #line 1824 
    if (ldv_undef_int() != 0) {
      #line 1826 
      __VERIFIER_assume(emg_16_ret == 0);
      #line 1830 
      goto emg_call_16;
    }
    else {
      #line 1835 
      __VERIFIER_assume(emg_16_ret != 0);
      #line 1838 
      if (emg_repeat_cnt_main_16_0 > 0) {
        #line 1839 
        emg_repeat_cnt_main_16_0 --;
        #line 1841 
        goto emg_main_16;
      }
      else 
           #line 1843 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1850 
       ldv_free((void *)emg_16_resource_0);
  #line 1858 
  return (void *)0;
}

#line 1863  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_nix_sq_ctx_fops(void *arg0)
{
  #line 1866 
  struct file_operations *emg_17_container;
  #line 1867 
  long long emg_17_emg_param_1_0;
  #line 1868 
  char *emg_17_emg_param_1_2;
  #line 1869 
  char *emg_17_emg_param_1_4;
  #line 1870 
  int emg_17_emg_param_2_1;
  #line 1871 
  long long *emg_17_emg_param_3_3;
  #line 1872 
  long long *emg_17_emg_param_3_5;
  #line 1873 
  struct file *emg_17_resource_0;
  #line 1874 
  struct inode *emg_17_resource_1;
  #line 1875 
  int emg_17_ret;
  #line 1876 
  unsigned long emg_17_size_cnt;
  #line 1877 
  int emg_repeat_cnt_call_17 = 1;
  #line 1878 
  int emg_repeat_cnt_main_17_0 = 1;
  #line 1879 
  int emg_repeat_cnt_main_17_1 = 1;
  #line 1881 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 1885 
  emg_17_ret = ldv_undef_int();
  #line 1886 
  emg_17_container = emg_alias_rvu_dbg_nix_sq_ctx_fops;
  #line 1887 
  emg_17_ret = ldv_undef_int();
  #line 1889 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_nix_sq_ctx_fops);
  #line 1891 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 1892 
    emg_17_container = data->arg0;
    #line 1893 
    ldv_free((void *)data);
  }
  #line 1898 
  emg_17_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1899 
  emg_17_size_cnt = (unsigned long)ldv_undef_int();
  #line 1903 
  goto emg_main_17;
  #line 1907 
  return (void *)0;
  #line 1910 
  emg_call_17: 
               #line 1910 
  ;
  #line 1911 
  if (ldv_undef_int() != 0) {
    #line 1912 
    switch (ldv_undef_int()) {
      #line 1913 
      case 0: 
              #line 1913 
      ;
      #line 1915 
      emg_17_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1915 
      emg_17_emg_param_1_2 = emg_17_emg_param_1_2;
      #line 1916 
      emg_17_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1916 
      emg_17_emg_param_3_3 = emg_17_emg_param_3_3;
      #line 1920 
      seq_read(emg_17_resource_0,emg_17_emg_param_1_2,emg_17_size_cnt,emg_17_emg_param_3_3);
      #line 1924 
      ldv_free((void *)emg_17_emg_param_1_2);
      #line 1925 
      ldv_free((void *)emg_17_emg_param_3_3);
      #line 1927 
      break;
      #line 1929 
      case 1: 
              #line 1929 
      ;
      #line 1931 
      seq_lseek(emg_17_resource_0,emg_17_emg_param_1_0,emg_17_emg_param_2_1);
      #line 1933 
      break;
      #line 1935 
      case 2: 
              #line 1935 
      ;
      #line 1942 
      __VERIFIER_assume(emg_17_size_cnt <= 2147479552UL);
      #line 1943 
      emg_17_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1943 
      emg_17_emg_param_1_4 = emg_17_emg_param_1_4;
      #line 1944 
      emg_17_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1944 
      emg_17_emg_param_3_5 = emg_17_emg_param_3_5;
      #line 1948 
      emg_wrapper_rvu_dbg_nix_sq_ctx_write(emg_17_resource_0,emg_17_emg_param_1_4,emg_17_size_cnt,emg_17_emg_param_3_5);
      #line 1952 
      ldv_free((void *)emg_17_emg_param_1_4);
      #line 1953 
      ldv_free((void *)emg_17_emg_param_3_5);
      #line 1955 
      break;
      #line 1957 
      default: 
               #line 1957 
      ;
      #line 1957 
      __VERIFIER_assume(0);
    }
    #line 1960 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 1961 
      emg_repeat_cnt_call_17 --;
      #line 1963 
      goto emg_call_17;
    }
    else 
         #line 1965 
         __VERIFIER_assume(0);
  }
  else {
    #line 1971 
    (*emg_alias_single_release)(emg_17_resource_1,emg_17_resource_0);
    #line 1974 
    if (emg_repeat_cnt_main_17_0 > 0) {
      #line 1975 
      emg_repeat_cnt_main_17_0 --;
      #line 1977 
      goto emg_main_17;
    }
    else 
         #line 1979 
         __VERIFIER_assume(0);
  }
  #line 1985 
  return (void *)0;
  #line 1988 
  emg_main_17: 
               #line 1988 
  ;
  #line 1989 
  if (ldv_undef_int() != 0) {
    #line 1991 
    emg_17_ret = emg_wrapper_rvu_dbg_open_nix_sq_ctx(emg_17_resource_1,emg_17_resource_0);
    #line 1996 
    emg_17_ret = ldv_filter_err_code(emg_17_ret);
    #line 1999 
    if (ldv_undef_int() != 0) {
      #line 2001 
      __VERIFIER_assume(emg_17_ret == 0);
      #line 2005 
      goto emg_call_17;
    }
    else {
      #line 2010 
      __VERIFIER_assume(emg_17_ret != 0);
      #line 2013 
      if (emg_repeat_cnt_main_17_1 > 0) {
        #line 2014 
        emg_repeat_cnt_main_17_1 --;
        #line 2016 
        goto emg_main_17;
      }
      else 
           #line 2018 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2025 
       ldv_free((void *)emg_17_resource_0);
  #line 2033 
  return (void *)0;
}

#line 2038  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_npa_aura_ctx_fops(void *arg0)
{
  #line 2041 
  struct file_operations *emg_18_container;
  #line 2042 
  long long emg_18_emg_param_1_0;
  #line 2043 
  char *emg_18_emg_param_1_2;
  #line 2044 
  char *emg_18_emg_param_1_4;
  #line 2045 
  int emg_18_emg_param_2_1;
  #line 2046 
  long long *emg_18_emg_param_3_3;
  #line 2047 
  long long *emg_18_emg_param_3_5;
  #line 2048 
  struct file *emg_18_resource_0;
  #line 2049 
  struct inode *emg_18_resource_1;
  #line 2050 
  int emg_18_ret;
  #line 2051 
  unsigned long emg_18_size_cnt;
  #line 2052 
  int emg_repeat_cnt_call_18 = 1;
  #line 2053 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 2054 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 2056 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 2060 
  emg_18_ret = ldv_undef_int();
  #line 2061 
  emg_18_container = emg_alias_rvu_dbg_npa_aura_ctx_fops;
  #line 2062 
  emg_18_ret = ldv_undef_int();
  #line 2064 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_npa_aura_ctx_fops);
  #line 2066 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 2067 
    emg_18_container = data->arg0;
    #line 2068 
    ldv_free((void *)data);
  }
  #line 2073 
  emg_18_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2074 
  emg_18_size_cnt = (unsigned long)ldv_undef_int();
  #line 2078 
  goto emg_main_18;
  #line 2082 
  return (void *)0;
  #line 2085 
  emg_call_18: 
               #line 2085 
  ;
  #line 2086 
  if (ldv_undef_int() != 0) {
    #line 2087 
    switch (ldv_undef_int()) {
      #line 2088 
      case 0: 
              #line 2088 
      ;
      #line 2090 
      emg_18_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2090 
      emg_18_emg_param_1_2 = emg_18_emg_param_1_2;
      #line 2091 
      emg_18_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2091 
      emg_18_emg_param_3_3 = emg_18_emg_param_3_3;
      #line 2095 
      seq_read(emg_18_resource_0,emg_18_emg_param_1_2,emg_18_size_cnt,emg_18_emg_param_3_3);
      #line 2099 
      ldv_free((void *)emg_18_emg_param_1_2);
      #line 2100 
      ldv_free((void *)emg_18_emg_param_3_3);
      #line 2102 
      break;
      #line 2104 
      case 1: 
              #line 2104 
      ;
      #line 2106 
      seq_lseek(emg_18_resource_0,emg_18_emg_param_1_0,emg_18_emg_param_2_1);
      #line 2108 
      break;
      #line 2110 
      case 2: 
              #line 2110 
      ;
      #line 2117 
      __VERIFIER_assume(emg_18_size_cnt <= 2147479552UL);
      #line 2118 
      emg_18_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2118 
      emg_18_emg_param_1_4 = emg_18_emg_param_1_4;
      #line 2119 
      emg_18_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2119 
      emg_18_emg_param_3_5 = emg_18_emg_param_3_5;
      #line 2123 
      emg_wrapper_rvu_dbg_npa_aura_ctx_write(emg_18_resource_0,emg_18_emg_param_1_4,emg_18_size_cnt,emg_18_emg_param_3_5);
      #line 2127 
      ldv_free((void *)emg_18_emg_param_1_4);
      #line 2128 
      ldv_free((void *)emg_18_emg_param_3_5);
      #line 2130 
      break;
      #line 2132 
      default: 
               #line 2132 
      ;
      #line 2132 
      __VERIFIER_assume(0);
    }
    #line 2135 
    if (emg_repeat_cnt_call_18 > 0) {
      #line 2136 
      emg_repeat_cnt_call_18 --;
      #line 2138 
      goto emg_call_18;
    }
    else 
         #line 2140 
         __VERIFIER_assume(0);
  }
  else {
    #line 2146 
    (*emg_alias_single_release)(emg_18_resource_1,emg_18_resource_0);
    #line 2149 
    if (emg_repeat_cnt_main_18_0 > 0) {
      #line 2150 
      emg_repeat_cnt_main_18_0 --;
      #line 2152 
      goto emg_main_18;
    }
    else 
         #line 2154 
         __VERIFIER_assume(0);
  }
  #line 2160 
  return (void *)0;
  #line 2163 
  emg_main_18: 
               #line 2163 
  ;
  #line 2164 
  if (ldv_undef_int() != 0) {
    #line 2166 
    emg_18_ret = emg_wrapper_rvu_dbg_open_npa_aura_ctx(emg_18_resource_1,emg_18_resource_0);
    #line 2171 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 2174 
    if (ldv_undef_int() != 0) {
      #line 2176 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 2180 
      goto emg_call_18;
    }
    else {
      #line 2185 
      __VERIFIER_assume(emg_18_ret != 0);
      #line 2188 
      if (emg_repeat_cnt_main_18_1 > 0) {
        #line 2189 
        emg_repeat_cnt_main_18_1 --;
        #line 2191 
        goto emg_main_18;
      }
      else 
           #line 2193 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2200 
       ldv_free((void *)emg_18_resource_0);
  #line 2208 
  return (void *)0;
}

#line 2213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_npa_ndc_cache_fops(void *arg0)
{
  #line 2216 
  struct file_operations *emg_19_container;
  #line 2217 
  long long emg_19_emg_param_1_0;
  #line 2218 
  char *emg_19_emg_param_1_2;
  #line 2219 
  char *emg_19_emg_param_1_4;
  #line 2220 
  int emg_19_emg_param_2_1;
  #line 2221 
  long long *emg_19_emg_param_3_3;
  #line 2222 
  long long *emg_19_emg_param_3_5;
  #line 2223 
  struct file *emg_19_resource_0;
  #line 2224 
  struct inode *emg_19_resource_1;
  #line 2225 
  int emg_19_ret;
  #line 2226 
  unsigned long emg_19_size_cnt;
  #line 2227 
  int emg_repeat_cnt_call_19 = 1;
  #line 2228 
  int emg_repeat_cnt_main_19_0 = 1;
  #line 2229 
  int emg_repeat_cnt_main_19_1 = 1;
  #line 2231 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 2235 
  emg_19_ret = ldv_undef_int();
  #line 2236 
  emg_19_container = emg_alias_rvu_dbg_npa_ndc_cache_fops;
  #line 2237 
  emg_19_ret = ldv_undef_int();
  #line 2239 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_npa_ndc_cache_fops);
  #line 2241 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 2242 
    emg_19_container = data->arg0;
    #line 2243 
    ldv_free((void *)data);
  }
  #line 2248 
  emg_19_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2249 
  emg_19_size_cnt = (unsigned long)ldv_undef_int();
  #line 2253 
  goto emg_main_19;
  #line 2257 
  return (void *)0;
  #line 2260 
  emg_call_19: 
               #line 2260 
  ;
  #line 2261 
  if (ldv_undef_int() != 0) {
    #line 2262 
    switch (ldv_undef_int()) {
      #line 2263 
      case 0: 
              #line 2263 
      ;
      #line 2265 
      emg_19_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2265 
      emg_19_emg_param_1_2 = emg_19_emg_param_1_2;
      #line 2266 
      emg_19_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2266 
      emg_19_emg_param_3_3 = emg_19_emg_param_3_3;
      #line 2270 
      seq_read(emg_19_resource_0,emg_19_emg_param_1_2,emg_19_size_cnt,emg_19_emg_param_3_3);
      #line 2274 
      ldv_free((void *)emg_19_emg_param_1_2);
      #line 2275 
      ldv_free((void *)emg_19_emg_param_3_3);
      #line 2277 
      break;
      #line 2279 
      case 1: 
              #line 2279 
      ;
      #line 2281 
      seq_lseek(emg_19_resource_0,emg_19_emg_param_1_0,emg_19_emg_param_2_1);
      #line 2283 
      break;
      #line 2285 
      case 2: 
              #line 2285 
      ;
      #line 2292 
      __VERIFIER_assume(emg_19_size_cnt <= 2147479552UL);
      #line 2293 
      emg_19_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2293 
      emg_19_emg_param_1_4 = emg_19_emg_param_1_4;
      #line 2294 
      emg_19_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2294 
      emg_19_emg_param_3_5 = emg_19_emg_param_3_5;
      #line 2298 
      if (emg_19_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2299 
        (*(emg_19_container->write))(emg_19_resource_0,emg_19_emg_param_1_4,emg_19_size_cnt,emg_19_emg_param_3_5);
      #line 2304 
      ldv_free((void *)emg_19_emg_param_1_4);
      #line 2305 
      ldv_free((void *)emg_19_emg_param_3_5);
      #line 2307 
      break;
      #line 2309 
      default: 
               #line 2309 
      ;
      #line 2309 
      __VERIFIER_assume(0);
    }
    #line 2312 
    if (emg_repeat_cnt_call_19 > 0) {
      #line 2313 
      emg_repeat_cnt_call_19 --;
      #line 2315 
      goto emg_call_19;
    }
    else 
         #line 2317 
         __VERIFIER_assume(0);
  }
  else {
    #line 2323 
    (*emg_alias_single_release)(emg_19_resource_1,emg_19_resource_0);
    #line 2326 
    if (emg_repeat_cnt_main_19_0 > 0) {
      #line 2327 
      emg_repeat_cnt_main_19_0 --;
      #line 2329 
      goto emg_main_19;
    }
    else 
         #line 2331 
         __VERIFIER_assume(0);
  }
  #line 2337 
  return (void *)0;
  #line 2340 
  emg_main_19: 
               #line 2340 
  ;
  #line 2341 
  if (ldv_undef_int() != 0) {
    #line 2343 
    emg_19_ret = emg_wrapper_rvu_dbg_open_npa_ndc_cache(emg_19_resource_1,emg_19_resource_0);
    #line 2348 
    emg_19_ret = ldv_filter_err_code(emg_19_ret);
    #line 2351 
    if (ldv_undef_int() != 0) {
      #line 2353 
      __VERIFIER_assume(emg_19_ret == 0);
      #line 2357 
      goto emg_call_19;
    }
    else {
      #line 2362 
      __VERIFIER_assume(emg_19_ret != 0);
      #line 2365 
      if (emg_repeat_cnt_main_19_1 > 0) {
        #line 2366 
        emg_repeat_cnt_main_19_1 --;
        #line 2368 
        goto emg_main_19;
      }
      else 
           #line 2370 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2377 
       ldv_free((void *)emg_19_resource_0);
  #line 2385 
  return (void *)0;
}

#line 2390  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_npa_ndc_hits_miss_fops(void *arg0)
{
  #line 2393 
  struct file_operations *emg_20_container;
  #line 2394 
  long long emg_20_emg_param_1_0;
  #line 2395 
  char *emg_20_emg_param_1_2;
  #line 2396 
  char *emg_20_emg_param_1_4;
  #line 2397 
  int emg_20_emg_param_2_1;
  #line 2398 
  long long *emg_20_emg_param_3_3;
  #line 2399 
  long long *emg_20_emg_param_3_5;
  #line 2400 
  struct file *emg_20_resource_0;
  #line 2401 
  struct inode *emg_20_resource_1;
  #line 2402 
  int emg_20_ret;
  #line 2403 
  unsigned long emg_20_size_cnt;
  #line 2404 
  int emg_repeat_cnt_call_20 = 1;
  #line 2405 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 2406 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 2408 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 2412 
  emg_20_ret = ldv_undef_int();
  #line 2413 
  emg_20_container = emg_alias_rvu_dbg_npa_ndc_hits_miss_fops;
  #line 2414 
  emg_20_ret = ldv_undef_int();
  #line 2416 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_npa_ndc_hits_miss_fops);
  #line 2418 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 2419 
    emg_20_container = data->arg0;
    #line 2420 
    ldv_free((void *)data);
  }
  #line 2425 
  emg_20_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2426 
  emg_20_size_cnt = (unsigned long)ldv_undef_int();
  #line 2430 
  goto emg_main_20;
  #line 2434 
  return (void *)0;
  #line 2437 
  emg_call_20: 
               #line 2437 
  ;
  #line 2438 
  if (ldv_undef_int() != 0) {
    #line 2439 
    switch (ldv_undef_int()) {
      #line 2440 
      case 0: 
              #line 2440 
      ;
      #line 2442 
      emg_20_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2442 
      emg_20_emg_param_1_2 = emg_20_emg_param_1_2;
      #line 2443 
      emg_20_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2443 
      emg_20_emg_param_3_3 = emg_20_emg_param_3_3;
      #line 2447 
      seq_read(emg_20_resource_0,emg_20_emg_param_1_2,emg_20_size_cnt,emg_20_emg_param_3_3);
      #line 2451 
      ldv_free((void *)emg_20_emg_param_1_2);
      #line 2452 
      ldv_free((void *)emg_20_emg_param_3_3);
      #line 2454 
      break;
      #line 2456 
      case 1: 
              #line 2456 
      ;
      #line 2458 
      seq_lseek(emg_20_resource_0,emg_20_emg_param_1_0,emg_20_emg_param_2_1);
      #line 2460 
      break;
      #line 2462 
      case 2: 
              #line 2462 
      ;
      #line 2469 
      __VERIFIER_assume(emg_20_size_cnt <= 2147479552UL);
      #line 2470 
      emg_20_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2470 
      emg_20_emg_param_1_4 = emg_20_emg_param_1_4;
      #line 2471 
      emg_20_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2471 
      emg_20_emg_param_3_5 = emg_20_emg_param_3_5;
      #line 2475 
      if (emg_20_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2476 
        (*(emg_20_container->write))(emg_20_resource_0,emg_20_emg_param_1_4,emg_20_size_cnt,emg_20_emg_param_3_5);
      #line 2481 
      ldv_free((void *)emg_20_emg_param_1_4);
      #line 2482 
      ldv_free((void *)emg_20_emg_param_3_5);
      #line 2484 
      break;
      #line 2486 
      default: 
               #line 2486 
      ;
      #line 2486 
      __VERIFIER_assume(0);
    }
    #line 2489 
    if (emg_repeat_cnt_call_20 > 0) {
      #line 2490 
      emg_repeat_cnt_call_20 --;
      #line 2492 
      goto emg_call_20;
    }
    else 
         #line 2494 
         __VERIFIER_assume(0);
  }
  else {
    #line 2500 
    (*emg_alias_single_release)(emg_20_resource_1,emg_20_resource_0);
    #line 2503 
    if (emg_repeat_cnt_main_20_0 > 0) {
      #line 2504 
      emg_repeat_cnt_main_20_0 --;
      #line 2506 
      goto emg_main_20;
    }
    else 
         #line 2508 
         __VERIFIER_assume(0);
  }
  #line 2514 
  return (void *)0;
  #line 2517 
  emg_main_20: 
               #line 2517 
  ;
  #line 2518 
  if (ldv_undef_int() != 0) {
    #line 2520 
    emg_20_ret = emg_wrapper_rvu_dbg_open_npa_ndc_hits_miss(emg_20_resource_1,emg_20_resource_0);
    #line 2525 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 2528 
    if (ldv_undef_int() != 0) {
      #line 2530 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 2534 
      goto emg_call_20;
    }
    else {
      #line 2539 
      __VERIFIER_assume(emg_20_ret != 0);
      #line 2542 
      if (emg_repeat_cnt_main_20_1 > 0) {
        #line 2543 
        emg_repeat_cnt_main_20_1 --;
        #line 2545 
        goto emg_main_20;
      }
      else 
           #line 2547 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2554 
       ldv_free((void *)emg_20_resource_0);
  #line 2562 
  return (void *)0;
}

#line 2567  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_npa_pool_ctx_fops(void *arg0)
{
  #line 2570 
  struct file_operations *emg_21_container;
  #line 2571 
  long long emg_21_emg_param_1_0;
  #line 2572 
  char *emg_21_emg_param_1_2;
  #line 2573 
  char *emg_21_emg_param_1_4;
  #line 2574 
  int emg_21_emg_param_2_1;
  #line 2575 
  long long *emg_21_emg_param_3_3;
  #line 2576 
  long long *emg_21_emg_param_3_5;
  #line 2577 
  struct file *emg_21_resource_0;
  #line 2578 
  struct inode *emg_21_resource_1;
  #line 2579 
  int emg_21_ret;
  #line 2580 
  unsigned long emg_21_size_cnt;
  #line 2581 
  int emg_repeat_cnt_main_21_1 = 1;
  #line 2582 
  int emg_repeat_cnt_call_21 = 1;
  #line 2583 
  int emg_repeat_cnt_main_21_0 = 1;
  #line 2585 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 2589 
  emg_21_ret = ldv_undef_int();
  #line 2590 
  emg_21_container = emg_alias_rvu_dbg_npa_pool_ctx_fops;
  #line 2591 
  emg_21_ret = ldv_undef_int();
  #line 2593 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_npa_pool_ctx_fops);
  #line 2595 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 2596 
    emg_21_container = data->arg0;
    #line 2597 
    ldv_free((void *)data);
  }
  #line 2602 
  emg_21_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2603 
  emg_21_size_cnt = (unsigned long)ldv_undef_int();
  #line 2607 
  goto emg_main_21;
  #line 2611 
  return (void *)0;
  #line 2614 
  emg_call_21: 
               #line 2614 
  ;
  #line 2615 
  if (ldv_undef_int() != 0) {
    #line 2616 
    switch (ldv_undef_int()) {
      #line 2617 
      case 0: 
              #line 2617 
      ;
      #line 2619 
      emg_21_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2619 
      emg_21_emg_param_1_2 = emg_21_emg_param_1_2;
      #line 2620 
      emg_21_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2620 
      emg_21_emg_param_3_3 = emg_21_emg_param_3_3;
      #line 2624 
      seq_read(emg_21_resource_0,emg_21_emg_param_1_2,emg_21_size_cnt,emg_21_emg_param_3_3);
      #line 2628 
      ldv_free((void *)emg_21_emg_param_1_2);
      #line 2629 
      ldv_free((void *)emg_21_emg_param_3_3);
      #line 2631 
      break;
      #line 2633 
      case 1: 
              #line 2633 
      ;
      #line 2635 
      seq_lseek(emg_21_resource_0,emg_21_emg_param_1_0,emg_21_emg_param_2_1);
      #line 2637 
      break;
      #line 2639 
      case 2: 
              #line 2639 
      ;
      #line 2646 
      __VERIFIER_assume(emg_21_size_cnt <= 2147479552UL);
      #line 2647 
      emg_21_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2647 
      emg_21_emg_param_1_4 = emg_21_emg_param_1_4;
      #line 2648 
      emg_21_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2648 
      emg_21_emg_param_3_5 = emg_21_emg_param_3_5;
      #line 2652 
      emg_wrapper_rvu_dbg_npa_pool_ctx_write(emg_21_resource_0,emg_21_emg_param_1_4,emg_21_size_cnt,emg_21_emg_param_3_5);
      #line 2656 
      ldv_free((void *)emg_21_emg_param_1_4);
      #line 2657 
      ldv_free((void *)emg_21_emg_param_3_5);
      #line 2659 
      break;
      #line 2661 
      default: 
               #line 2661 
      ;
      #line 2661 
      __VERIFIER_assume(0);
    }
    #line 2664 
    if (emg_repeat_cnt_call_21 > 0) {
      #line 2665 
      emg_repeat_cnt_call_21 --;
      #line 2667 
      goto emg_call_21;
    }
    else 
         #line 2669 
         __VERIFIER_assume(0);
  }
  else {
    #line 2675 
    (*emg_alias_single_release)(emg_21_resource_1,emg_21_resource_0);
    #line 2678 
    if (emg_repeat_cnt_main_21_0 > 0) {
      #line 2679 
      emg_repeat_cnt_main_21_0 --;
      #line 2681 
      goto emg_main_21;
    }
    else 
         #line 2683 
         __VERIFIER_assume(0);
  }
  #line 2689 
  return (void *)0;
  #line 2692 
  emg_main_21: 
               #line 2692 
  ;
  #line 2693 
  if (ldv_undef_int() != 0) {
    #line 2695 
    emg_21_ret = emg_wrapper_rvu_dbg_open_npa_pool_ctx(emg_21_resource_1,emg_21_resource_0);
    #line 2700 
    emg_21_ret = ldv_filter_err_code(emg_21_ret);
    #line 2703 
    if (ldv_undef_int() != 0) {
      #line 2705 
      __VERIFIER_assume(emg_21_ret == 0);
      #line 2709 
      goto emg_call_21;
    }
    else {
      #line 2714 
      __VERIFIER_assume(emg_21_ret != 0);
      #line 2717 
      if (emg_repeat_cnt_main_21_1 > 0) {
        #line 2718 
        emg_repeat_cnt_main_21_1 --;
        #line 2720 
        goto emg_main_21;
      }
      else 
           #line 2722 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2729 
       ldv_free((void *)emg_21_resource_0);
  #line 2737 
  return (void *)0;
}

#line 2742  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_npa_qsize_fops(void *arg0)
{
  #line 2745 
  struct file_operations *emg_22_container;
  #line 2746 
  long long emg_22_emg_param_1_0;
  #line 2747 
  char *emg_22_emg_param_1_2;
  #line 2748 
  char *emg_22_emg_param_1_4;
  #line 2749 
  int emg_22_emg_param_2_1;
  #line 2750 
  long long *emg_22_emg_param_3_3;
  #line 2751 
  long long *emg_22_emg_param_3_5;
  #line 2752 
  struct file *emg_22_resource_0;
  #line 2753 
  struct inode *emg_22_resource_1;
  #line 2754 
  int emg_22_ret;
  #line 2755 
  unsigned long emg_22_size_cnt;
  #line 2756 
  int emg_repeat_cnt_main_22_0 = 1;
  #line 2757 
  int emg_repeat_cnt_main_22_1 = 1;
  #line 2758 
  int emg_repeat_cnt_call_22 = 1;
  #line 2760 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 2764 
  emg_22_ret = ldv_undef_int();
  #line 2765 
  emg_22_container = emg_alias_rvu_dbg_npa_qsize_fops;
  #line 2766 
  emg_22_ret = ldv_undef_int();
  #line 2768 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_npa_qsize_fops);
  #line 2770 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 2771 
    emg_22_container = data->arg0;
    #line 2772 
    ldv_free((void *)data);
  }
  #line 2777 
  emg_22_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2778 
  emg_22_size_cnt = (unsigned long)ldv_undef_int();
  #line 2782 
  goto emg_main_22;
  #line 2786 
  return (void *)0;
  #line 2789 
  emg_call_22: 
               #line 2789 
  ;
  #line 2790 
  if (ldv_undef_int() != 0) {
    #line 2791 
    switch (ldv_undef_int()) {
      #line 2792 
      case 0: 
              #line 2792 
      ;
      #line 2794 
      emg_22_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2794 
      emg_22_emg_param_1_2 = emg_22_emg_param_1_2;
      #line 2795 
      emg_22_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2795 
      emg_22_emg_param_3_3 = emg_22_emg_param_3_3;
      #line 2799 
      seq_read(emg_22_resource_0,emg_22_emg_param_1_2,emg_22_size_cnt,emg_22_emg_param_3_3);
      #line 2803 
      ldv_free((void *)emg_22_emg_param_1_2);
      #line 2804 
      ldv_free((void *)emg_22_emg_param_3_3);
      #line 2806 
      break;
      #line 2808 
      case 1: 
              #line 2808 
      ;
      #line 2810 
      seq_lseek(emg_22_resource_0,emg_22_emg_param_1_0,emg_22_emg_param_2_1);
      #line 2812 
      break;
      #line 2814 
      case 2: 
              #line 2814 
      ;
      #line 2821 
      __VERIFIER_assume(emg_22_size_cnt <= 2147479552UL);
      #line 2822 
      emg_22_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2822 
      emg_22_emg_param_1_4 = emg_22_emg_param_1_4;
      #line 2823 
      emg_22_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2823 
      emg_22_emg_param_3_5 = emg_22_emg_param_3_5;
      #line 2827 
      emg_wrapper_rvu_dbg_npa_qsize_write(emg_22_resource_0,emg_22_emg_param_1_4,emg_22_size_cnt,emg_22_emg_param_3_5);
      #line 2831 
      ldv_free((void *)emg_22_emg_param_1_4);
      #line 2832 
      ldv_free((void *)emg_22_emg_param_3_5);
      #line 2834 
      break;
      #line 2836 
      default: 
               #line 2836 
      ;
      #line 2836 
      __VERIFIER_assume(0);
    }
    #line 2839 
    if (emg_repeat_cnt_call_22 > 0) {
      #line 2840 
      emg_repeat_cnt_call_22 --;
      #line 2842 
      goto emg_call_22;
    }
    else 
         #line 2844 
         __VERIFIER_assume(0);
  }
  else {
    #line 2850 
    (*emg_alias_single_release)(emg_22_resource_1,emg_22_resource_0);
    #line 2853 
    if (emg_repeat_cnt_main_22_1 > 0) {
      #line 2854 
      emg_repeat_cnt_main_22_1 --;
      #line 2856 
      goto emg_main_22;
    }
    else 
         #line 2858 
         __VERIFIER_assume(0);
  }
  #line 2864 
  return (void *)0;
  #line 2867 
  emg_main_22: 
               #line 2867 
  ;
  #line 2868 
  if (ldv_undef_int() != 0) {
    #line 2870 
    emg_22_ret = emg_wrapper_rvu_dbg_open_npa_qsize(emg_22_resource_1,emg_22_resource_0);
    #line 2875 
    emg_22_ret = ldv_filter_err_code(emg_22_ret);
    #line 2878 
    if (ldv_undef_int() != 0) {
      #line 2880 
      __VERIFIER_assume(emg_22_ret == 0);
      #line 2884 
      goto emg_call_22;
    }
    else {
      #line 2889 
      __VERIFIER_assume(emg_22_ret != 0);
      #line 2892 
      if (emg_repeat_cnt_main_22_0 > 0) {
        #line 2893 
        emg_repeat_cnt_main_22_0 --;
        #line 2895 
        goto emg_main_22;
      }
      else 
           #line 2897 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2904 
       ldv_free((void *)emg_22_resource_0);
  #line 2912 
  return (void *)0;
}

#line 2917  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_npc_mcam_info_fops(void *arg0)
{
  #line 2920 
  struct file_operations *emg_23_container;
  #line 2921 
  long long emg_23_emg_param_1_0;
  #line 2922 
  char *emg_23_emg_param_1_2;
  #line 2923 
  char *emg_23_emg_param_1_4;
  #line 2924 
  int emg_23_emg_param_2_1;
  #line 2925 
  long long *emg_23_emg_param_3_3;
  #line 2926 
  long long *emg_23_emg_param_3_5;
  #line 2927 
  struct file *emg_23_resource_0;
  #line 2928 
  struct inode *emg_23_resource_1;
  #line 2929 
  int emg_23_ret;
  #line 2930 
  unsigned long emg_23_size_cnt;
  #line 2931 
  int emg_repeat_cnt_call_23 = 1;
  #line 2932 
  int emg_repeat_cnt_main_23_0 = 1;
  #line 2933 
  int emg_repeat_cnt_main_23_1 = 1;
  #line 2935 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 2939 
  emg_23_ret = ldv_undef_int();
  #line 2940 
  emg_23_container = emg_alias_rvu_dbg_npc_mcam_info_fops;
  #line 2941 
  emg_23_ret = ldv_undef_int();
  #line 2943 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_npc_mcam_info_fops);
  #line 2945 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 2946 
    emg_23_container = data->arg0;
    #line 2947 
    ldv_free((void *)data);
  }
  #line 2952 
  emg_23_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2953 
  emg_23_size_cnt = (unsigned long)ldv_undef_int();
  #line 2957 
  goto emg_main_23;
  #line 2961 
  return (void *)0;
  #line 2964 
  emg_call_23: 
               #line 2964 
  ;
  #line 2965 
  if (ldv_undef_int() != 0) {
    #line 2966 
    switch (ldv_undef_int()) {
      #line 2967 
      case 0: 
              #line 2967 
      ;
      #line 2969 
      emg_23_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2969 
      emg_23_emg_param_1_2 = emg_23_emg_param_1_2;
      #line 2970 
      emg_23_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2970 
      emg_23_emg_param_3_3 = emg_23_emg_param_3_3;
      #line 2974 
      seq_read(emg_23_resource_0,emg_23_emg_param_1_2,emg_23_size_cnt,emg_23_emg_param_3_3);
      #line 2978 
      ldv_free((void *)emg_23_emg_param_1_2);
      #line 2979 
      ldv_free((void *)emg_23_emg_param_3_3);
      #line 2981 
      break;
      #line 2983 
      case 1: 
              #line 2983 
      ;
      #line 2985 
      seq_lseek(emg_23_resource_0,emg_23_emg_param_1_0,emg_23_emg_param_2_1);
      #line 2987 
      break;
      #line 2989 
      case 2: 
              #line 2989 
      ;
      #line 2996 
      __VERIFIER_assume(emg_23_size_cnt <= 2147479552UL);
      #line 2997 
      emg_23_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2997 
      emg_23_emg_param_1_4 = emg_23_emg_param_1_4;
      #line 2998 
      emg_23_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2998 
      emg_23_emg_param_3_5 = emg_23_emg_param_3_5;
      #line 3002 
      if (emg_23_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3003 
        (*(emg_23_container->write))(emg_23_resource_0,emg_23_emg_param_1_4,emg_23_size_cnt,emg_23_emg_param_3_5);
      #line 3008 
      ldv_free((void *)emg_23_emg_param_1_4);
      #line 3009 
      ldv_free((void *)emg_23_emg_param_3_5);
      #line 3011 
      break;
      #line 3013 
      default: 
               #line 3013 
      ;
      #line 3013 
      __VERIFIER_assume(0);
    }
    #line 3016 
    if (emg_repeat_cnt_call_23 > 0) {
      #line 3017 
      emg_repeat_cnt_call_23 --;
      #line 3019 
      goto emg_call_23;
    }
    else 
         #line 3021 
         __VERIFIER_assume(0);
  }
  else {
    #line 3027 
    (*emg_alias_single_release)(emg_23_resource_1,emg_23_resource_0);
    #line 3030 
    if (emg_repeat_cnt_main_23_0 > 0) {
      #line 3031 
      emg_repeat_cnt_main_23_0 --;
      #line 3033 
      goto emg_main_23;
    }
    else 
         #line 3035 
         __VERIFIER_assume(0);
  }
  #line 3041 
  return (void *)0;
  #line 3044 
  emg_main_23: 
               #line 3044 
  ;
  #line 3045 
  if (ldv_undef_int() != 0) {
    #line 3047 
    emg_23_ret = emg_wrapper_rvu_dbg_open_npc_mcam_info(emg_23_resource_1,emg_23_resource_0);
    #line 3052 
    emg_23_ret = ldv_filter_err_code(emg_23_ret);
    #line 3055 
    if (ldv_undef_int() != 0) {
      #line 3057 
      __VERIFIER_assume(emg_23_ret == 0);
      #line 3061 
      goto emg_call_23;
    }
    else {
      #line 3066 
      __VERIFIER_assume(emg_23_ret != 0);
      #line 3069 
      if (emg_repeat_cnt_main_23_1 > 0) {
        #line 3070 
        emg_repeat_cnt_main_23_1 --;
        #line 3072 
        goto emg_main_23;
      }
      else 
           #line 3074 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3081 
       ldv_free((void *)emg_23_resource_0);
  #line 3089 
  return (void *)0;
}

#line 3094  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_npc_rx_miss_act_fops(void *arg0)
{
  #line 3097 
  struct file_operations *emg_24_container;
  #line 3098 
  long long emg_24_emg_param_1_0;
  #line 3099 
  char *emg_24_emg_param_1_2;
  #line 3100 
  char *emg_24_emg_param_1_4;
  #line 3101 
  int emg_24_emg_param_2_1;
  #line 3102 
  long long *emg_24_emg_param_3_3;
  #line 3103 
  long long *emg_24_emg_param_3_5;
  #line 3104 
  struct file *emg_24_resource_0;
  #line 3105 
  struct inode *emg_24_resource_1;
  #line 3106 
  int emg_24_ret;
  #line 3107 
  unsigned long emg_24_size_cnt;
  #line 3108 
  int emg_repeat_cnt_call_24 = 1;
  #line 3109 
  int emg_repeat_cnt_main_24_0 = 1;
  #line 3110 
  int emg_repeat_cnt_main_24_1 = 1;
  #line 3112 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 3116 
  emg_24_ret = ldv_undef_int();
  #line 3117 
  emg_24_container = emg_alias_rvu_dbg_npc_rx_miss_act_fops;
  #line 3118 
  emg_24_ret = ldv_undef_int();
  #line 3120 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_npc_rx_miss_act_fops);
  #line 3122 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 3123 
    emg_24_container = data->arg0;
    #line 3124 
    ldv_free((void *)data);
  }
  #line 3129 
  emg_24_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3130 
  emg_24_size_cnt = (unsigned long)ldv_undef_int();
  #line 3134 
  goto emg_main_24;
  #line 3138 
  return (void *)0;
  #line 3141 
  emg_call_24: 
               #line 3141 
  ;
  #line 3142 
  if (ldv_undef_int() != 0) {
    #line 3143 
    switch (ldv_undef_int()) {
      #line 3144 
      case 0: 
              #line 3144 
      ;
      #line 3146 
      emg_24_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3146 
      emg_24_emg_param_1_2 = emg_24_emg_param_1_2;
      #line 3147 
      emg_24_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3147 
      emg_24_emg_param_3_3 = emg_24_emg_param_3_3;
      #line 3151 
      seq_read(emg_24_resource_0,emg_24_emg_param_1_2,emg_24_size_cnt,emg_24_emg_param_3_3);
      #line 3155 
      ldv_free((void *)emg_24_emg_param_1_2);
      #line 3156 
      ldv_free((void *)emg_24_emg_param_3_3);
      #line 3158 
      break;
      #line 3160 
      case 1: 
              #line 3160 
      ;
      #line 3162 
      seq_lseek(emg_24_resource_0,emg_24_emg_param_1_0,emg_24_emg_param_2_1);
      #line 3164 
      break;
      #line 3166 
      case 2: 
              #line 3166 
      ;
      #line 3173 
      __VERIFIER_assume(emg_24_size_cnt <= 2147479552UL);
      #line 3174 
      emg_24_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3174 
      emg_24_emg_param_1_4 = emg_24_emg_param_1_4;
      #line 3175 
      emg_24_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3175 
      emg_24_emg_param_3_5 = emg_24_emg_param_3_5;
      #line 3179 
      if (emg_24_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3180 
        (*(emg_24_container->write))(emg_24_resource_0,emg_24_emg_param_1_4,emg_24_size_cnt,emg_24_emg_param_3_5);
      #line 3185 
      ldv_free((void *)emg_24_emg_param_1_4);
      #line 3186 
      ldv_free((void *)emg_24_emg_param_3_5);
      #line 3188 
      break;
      #line 3190 
      default: 
               #line 3190 
      ;
      #line 3190 
      __VERIFIER_assume(0);
    }
    #line 3193 
    if (emg_repeat_cnt_call_24 > 0) {
      #line 3194 
      emg_repeat_cnt_call_24 --;
      #line 3196 
      goto emg_call_24;
    }
    else 
         #line 3198 
         __VERIFIER_assume(0);
  }
  else {
    #line 3204 
    (*emg_alias_single_release)(emg_24_resource_1,emg_24_resource_0);
    #line 3207 
    if (emg_repeat_cnt_main_24_0 > 0) {
      #line 3208 
      emg_repeat_cnt_main_24_0 --;
      #line 3210 
      goto emg_main_24;
    }
    else 
         #line 3212 
         __VERIFIER_assume(0);
  }
  #line 3218 
  return (void *)0;
  #line 3221 
  emg_main_24: 
               #line 3221 
  ;
  #line 3222 
  if (ldv_undef_int() != 0) {
    #line 3224 
    emg_24_ret = emg_wrapper_rvu_dbg_open_npc_rx_miss_act(emg_24_resource_1,emg_24_resource_0);
    #line 3229 
    emg_24_ret = ldv_filter_err_code(emg_24_ret);
    #line 3232 
    if (ldv_undef_int() != 0) {
      #line 3234 
      __VERIFIER_assume(emg_24_ret == 0);
      #line 3238 
      goto emg_call_24;
    }
    else {
      #line 3243 
      __VERIFIER_assume(emg_24_ret != 0);
      #line 3246 
      if (emg_repeat_cnt_main_24_1 > 0) {
        #line 3247 
        emg_repeat_cnt_main_24_1 --;
        #line 3249 
        goto emg_main_24;
      }
      else 
           #line 3251 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3258 
       ldv_free((void *)emg_24_resource_0);
  #line 3266 
  return (void *)0;
}

#line 3271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rvu_dbg_rsrc_status_fops(void *arg0)
{
  #line 3274 
  struct file_operations *emg_25_container;
  #line 3275 
  char *emg_25_emg_param_1_0;
  #line 3276 
  char *emg_25_emg_param_1_2;
  #line 3277 
  long long *emg_25_emg_param_3_1;
  #line 3278 
  long long *emg_25_emg_param_3_3;
  #line 3279 
  struct file *emg_25_resource_0;
  #line 3280 
  struct inode *emg_25_resource_1;
  #line 3281 
  int emg_25_ret;
  #line 3282 
  unsigned long emg_25_size_cnt;
  #line 3283 
  int emg_repeat_cnt_call_25 = 1;
  #line 3284 
  int emg_repeat_cnt_main_25_0 = 1;
  #line 3285 
  int emg_repeat_cnt_main_25_1 = 1;
  #line 3287 
  struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *data = (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)arg0;
  #line 3291 
  emg_25_ret = ldv_undef_int();
  #line 3292 
  emg_25_container = emg_alias_rvu_dbg_rsrc_status_fops;
  #line 3293 
  emg_25_ret = ldv_undef_int();
  #line 3295 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_dbg_rsrc_status_fops);
  #line 3297 
  if (data != (struct emg_struct_character_driver_scenario_rvu_dbg_cgx_stat_fops_9 *)0) {
    #line 3298 
    emg_25_container = data->arg0;
    #line 3299 
    ldv_free((void *)data);
  }
  #line 3304 
  emg_25_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3305 
  emg_25_size_cnt = (unsigned long)ldv_undef_int();
  #line 3309 
  goto emg_main_25;
  #line 3313 
  return (void *)0;
  #line 3316 
  emg_call_25: 
               #line 3316 
  ;
  #line 3317 
  if (ldv_undef_int() != 0) {
    #line 3318 
    if (ldv_undef_int() != 0) {
      #line 3320 
      emg_25_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3320 
      emg_25_emg_param_1_0 = emg_25_emg_param_1_0;
      #line 3321 
      emg_25_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3321 
      emg_25_emg_param_3_1 = emg_25_emg_param_3_1;
      #line 3325 
      emg_wrapper_rvu_dbg_rsrc_attach_status(emg_25_resource_0,emg_25_emg_param_1_0,emg_25_size_cnt,emg_25_emg_param_3_1);
      #line 3329 
      ldv_free((void *)emg_25_emg_param_1_0);
      #line 3330 
      ldv_free((void *)emg_25_emg_param_3_1);
    }
    else {
      #line 3339 
      __VERIFIER_assume(emg_25_size_cnt <= 2147479552UL);
      #line 3340 
      emg_25_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3340 
      emg_25_emg_param_1_2 = emg_25_emg_param_1_2;
      #line 3341 
      emg_25_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3341 
      emg_25_emg_param_3_3 = emg_25_emg_param_3_3;
      #line 3345 
      if (emg_25_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3346 
        (*(emg_25_container->write))(emg_25_resource_0,emg_25_emg_param_1_2,emg_25_size_cnt,emg_25_emg_param_3_3);
      #line 3351 
      ldv_free((void *)emg_25_emg_param_1_2);
      #line 3352 
      ldv_free((void *)emg_25_emg_param_3_3);
    }
    #line 3356 
    if (emg_repeat_cnt_call_25 > 0) {
      #line 3357 
      emg_repeat_cnt_call_25 --;
      #line 3359 
      goto emg_call_25;
    }
    else 
         #line 3361 
         __VERIFIER_assume(0);
  }
  else {
    #line 3367 
    if (emg_25_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3368 
      (*(emg_25_container->release))(emg_25_resource_1,emg_25_resource_0);
    #line 3372 
    if (emg_repeat_cnt_main_25_0 > 0) {
      #line 3373 
      emg_repeat_cnt_main_25_0 --;
      #line 3375 
      goto emg_main_25;
    }
    else 
         #line 3377 
         __VERIFIER_assume(0);
  }
  #line 3383 
  return (void *)0;
  #line 3386 
  emg_main_25: 
               #line 3386 
  ;
  #line 3387 
  if (ldv_undef_int() != 0) {
    #line 3389 
    emg_25_ret = (*emg_alias_simple_open)(emg_25_resource_1,emg_25_resource_0);
    #line 3394 
    emg_25_ret = ldv_filter_err_code(emg_25_ret);
    #line 3397 
    if (ldv_undef_int() != 0) {
      #line 3399 
      __VERIFIER_assume(emg_25_ret == 0);
      #line 3403 
      goto emg_call_25;
    }
    else {
      #line 3408 
      __VERIFIER_assume(emg_25_ret != 0);
      #line 3411 
      if (emg_repeat_cnt_main_25_1 > 0) {
        #line 3412 
        emg_repeat_cnt_main_25_1 --;
        #line 3414 
        goto emg_main_25;
      }
      else 
           #line 3416 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3423 
       ldv_free((void *)emg_25_resource_0);
  #line 3431 
  return (void *)0;
}

#line 3436  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_cgx_fwi_event_handler(void *arg0)
{
  #line 3439 
  enum irqreturn (*emg_26_callback)(int , void *);
  #line 3440 
  void *emg_26_data;
  #line 3441 
  int emg_26_line;
  #line 3442 
  enum irqreturn emg_26_ret_val;
  #line 3443 
  enum irqreturn (*emg_26_thread)(int , void *);
  #line 3445 
  struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *data = (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)arg0;
  #line 3448 
  emg_26_callback = & emg_wrapper_cgx_fwi_event_handler;
  #line 3451 
  if (data != (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)0) {
    #line 3452 
    emg_26_line = data->arg0;
    #line 3453 
    emg_26_callback = data->arg1;
    #line 3454 
    emg_26_thread = data->arg2;
    #line 3455 
    emg_26_data = data->arg3;
    #line 3456 
    ldv_free((void *)data);
  }
  #line 3462 
  ldv_switch_to_interrupt_context();
  #line 3466 
  emg_26_ret_val = emg_wrapper_cgx_fwi_event_handler(emg_26_line,emg_26_data);
  #line 3471 
  ldv_switch_to_process_context();
  #line 3474 
  if (ldv_undef_int() != 0) {
    #line 3476 
    __VERIFIER_assume(emg_26_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 3480 
    if (emg_26_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 3481 
                                                              (*emg_26_thread)(emg_26_line,emg_26_data);
  }
  else 
       #line 3486 
       __VERIFIER_assume(emg_26_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 3494 
  return (void *)0;
}

#line 3499  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_rvu_flr_intr_handler(void *arg0)
{
  #line 3502 
  enum irqreturn (*emg_27_callback)(int , void *);
  #line 3503 
  void *emg_27_data;
  #line 3504 
  int emg_27_line;
  #line 3505 
  enum irqreturn emg_27_ret_val;
  #line 3506 
  enum irqreturn (*emg_27_thread)(int , void *);
  #line 3508 
  struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *data = (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)arg0;
  #line 3511 
  emg_27_callback = & emg_wrapper_rvu_flr_intr_handler;
  #line 3514 
  if (data != (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)0) {
    #line 3515 
    emg_27_line = data->arg0;
    #line 3516 
    emg_27_callback = data->arg1;
    #line 3517 
    emg_27_thread = data->arg2;
    #line 3518 
    emg_27_data = data->arg3;
    #line 3519 
    ldv_free((void *)data);
  }
  #line 3525 
  ldv_switch_to_interrupt_context();
  #line 3529 
  emg_27_ret_val = emg_wrapper_rvu_flr_intr_handler(emg_27_line,emg_27_data);
  #line 3534 
  ldv_switch_to_process_context();
  #line 3537 
  if (ldv_undef_int() != 0) {
    #line 3539 
    __VERIFIER_assume(emg_27_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 3543 
    if (emg_27_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 3544 
                                                              (*emg_27_thread)(emg_27_line,emg_27_data);
  }
  else 
       #line 3549 
       __VERIFIER_assume(emg_27_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 3557 
  return (void *)0;
}

#line 3562  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_rvu_mbox_intr_handler(void *arg0)
{
  #line 3565 
  enum irqreturn (*emg_28_callback)(int , void *);
  #line 3566 
  void *emg_28_data;
  #line 3567 
  int emg_28_line;
  #line 3568 
  enum irqreturn emg_28_ret_val;
  #line 3569 
  enum irqreturn (*emg_28_thread)(int , void *);
  #line 3571 
  struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *data = (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)arg0;
  #line 3574 
  emg_28_callback = & emg_wrapper_rvu_mbox_intr_handler;
  #line 3577 
  if (data != (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)0) {
    #line 3578 
    emg_28_line = data->arg0;
    #line 3579 
    emg_28_callback = data->arg1;
    #line 3580 
    emg_28_thread = data->arg2;
    #line 3581 
    emg_28_data = data->arg3;
    #line 3582 
    ldv_free((void *)data);
  }
  #line 3588 
  ldv_switch_to_interrupt_context();
  #line 3592 
  emg_28_ret_val = emg_wrapper_rvu_mbox_intr_handler(emg_28_line,emg_28_data);
  #line 3597 
  ldv_switch_to_process_context();
  #line 3600 
  if (ldv_undef_int() != 0) {
    #line 3602 
    __VERIFIER_assume(emg_28_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 3606 
    if (emg_28_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 3607 
                                                              (*emg_28_thread)(emg_28_line,emg_28_data);
  }
  else 
       #line 3612 
       __VERIFIER_assume(emg_28_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 3620 
  return (void *)0;
}

#line 3625  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_rvu_me_pf_intr_handler(void *arg0)
{
  #line 3628 
  enum irqreturn (*emg_29_callback)(int , void *);
  #line 3629 
  void *emg_29_data;
  #line 3630 
  int emg_29_line;
  #line 3631 
  enum irqreturn emg_29_ret_val;
  #line 3632 
  enum irqreturn (*emg_29_thread)(int , void *);
  #line 3634 
  struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *data = (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)arg0;
  #line 3637 
  emg_29_callback = & emg_wrapper_rvu_me_pf_intr_handler;
  #line 3640 
  if (data != (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)0) {
    #line 3641 
    emg_29_line = data->arg0;
    #line 3642 
    emg_29_callback = data->arg1;
    #line 3643 
    emg_29_thread = data->arg2;
    #line 3644 
    emg_29_data = data->arg3;
    #line 3645 
    ldv_free((void *)data);
  }
  #line 3651 
  ldv_switch_to_interrupt_context();
  #line 3655 
  emg_29_ret_val = emg_wrapper_rvu_me_pf_intr_handler(emg_29_line,emg_29_data);
  #line 3660 
  ldv_switch_to_process_context();
  #line 3663 
  if (ldv_undef_int() != 0) {
    #line 3665 
    __VERIFIER_assume(emg_29_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 3669 
    if (emg_29_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 3670 
                                                              (*emg_29_thread)(emg_29_line,emg_29_data);
  }
  else 
       #line 3675 
       __VERIFIER_assume(emg_29_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 3683 
  return (void *)0;
}

#line 3688  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_rvu_me_vf_intr_handler(void *arg0)
{
  #line 3691 
  enum irqreturn (*emg_30_callback)(int , void *);
  #line 3692 
  void *emg_30_data;
  #line 3693 
  int emg_30_line;
  #line 3694 
  enum irqreturn emg_30_ret_val;
  #line 3695 
  enum irqreturn (*emg_30_thread)(int , void *);
  #line 3697 
  struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *data = (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)arg0;
  #line 3700 
  emg_30_callback = & emg_wrapper_rvu_me_vf_intr_handler;
  #line 3703 
  if (data != (struct emg_struct_interrupt_scenario_cgx_fwi_event_handler_26 *)0) {
    #line 3704 
    emg_30_line = data->arg0;
    #line 3705 
    emg_30_callback = data->arg1;
    #line 3706 
    emg_30_thread = data->arg2;
    #line 3707 
    emg_30_data = data->arg3;
    #line 3708 
    ldv_free((void *)data);
  }
  #line 3714 
  ldv_switch_to_interrupt_context();
  #line 3718 
  emg_30_ret_val = emg_wrapper_rvu_me_vf_intr_handler(emg_30_line,emg_30_data);
  #line 3723 
  ldv_switch_to_process_context();
  #line 3726 
  if (ldv_undef_int() != 0) {
    #line 3728 
    __VERIFIER_assume(emg_30_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 3732 
    if (emg_30_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 3733 
                                                              (*emg_30_thread)(emg_30_line,emg_30_data);
  }
  else 
       #line 3738 
       __VERIFIER_assume(emg_30_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 3746 
  return (void *)0;
}

#line 3751  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_cgx_driver(void *arg0)
{
  #line 3754 
  int emg_31_choice;
  #line 3755 
  struct pci_driver *emg_31_container;
  #line 3756 
  struct pci_device_id *emg_31_device_id;
  #line 3757 
  struct pci_dev *emg_31_resource_0;
  #line 3758 
  struct pm_message emg_31_resource_1;
  #line 3759 
  int emg_31_ret;
  #line 3760 
  int emg_repeat_cnt_main_31_1 = 1;
  #line 3761 
  int emg_repeat_cnt_call_31_1 = 1;
  #line 3762 
  int emg_repeat_cnt_call_31_0 = 1;
  #line 3763 
  int emg_repeat_cnt_main_31_0 = 1;
  #line 3765 
  struct emg_struct_pci_scenario_cgx_driver_31 *data = (struct emg_struct_pci_scenario_cgx_driver_31 *)arg0;
  #line 3769 
  emg_31_choice = 0;
  #line 3770 
  emg_31_ret = ldv_undef_int();
  #line 3771 
  emg_31_choice = 0;
  #line 3772 
  emg_31_container = & cgx_driver;
  #line 3773 
  emg_31_ret = ldv_undef_int();
  #line 3775 
  __VERIFIER_assume(data->arg0 == & cgx_driver);
  #line 3777 
  if (data != (struct emg_struct_pci_scenario_cgx_driver_31 *)0) {
    #line 3778 
    emg_31_container = data->arg0;
    #line 3779 
    ldv_free((void *)data);
  }
  #line 3784 
  emg_31_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 3785 
  emg_31_choice = 0;
  #line 3786 
  emg_31_device_id = emg_31_container->id_table + (unsigned long)emg_31_choice;
  #line 3790 
  goto emg_main_31;
  #line 3794 
  return (void *)0;
  #line 3797 
  emg_call_31: 
               #line 3797 
  ;
  #line 3798 
  switch (ldv_undef_int()) {
    #line 3799 
    case 0: 
            #line 3799 
    ;
    #line 3804 
    if (emg_repeat_cnt_call_31_1 > 0) {
      #line 3805 
      emg_repeat_cnt_call_31_1 --;
      #line 3807 
      goto emg_call_31;
    }
    else 
         #line 3809 
         __VERIFIER_assume(0);
    #line 3813 
    break;
    #line 3815 
    case 1: 
            #line 3815 
    ;
    #line 3817 
    if (emg_31_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 3818 
      emg_31_ret = (*(emg_31_container->suspend))(emg_31_resource_0,emg_31_resource_1); else 
                                                                    #line 3820 
                                                                    emg_31_ret = ldv_undef_int();
    #line 3826 
    emg_31_ret = ldv_filter_err_code(emg_31_ret);
    #line 3830 
    if (emg_31_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 3831 
                                                                  (*(emg_31_container->resume))(emg_31_resource_0);
    #line 3835 
    if (emg_repeat_cnt_call_31_0 > 0) {
      #line 3836 
      emg_repeat_cnt_call_31_0 --;
      #line 3838 
      goto emg_call_31;
    }
    else 
         #line 3840 
         __VERIFIER_assume(0);
    #line 3844 
    break;
    #line 3846 
    case 2: 
            #line 3846 
    ;
    #line 3848 
    if (emg_31_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 3849 
      (*(emg_31_container->shutdown))(emg_31_resource_0);
    #line 3854 
    emg_wrapper_cgx_remove(emg_31_resource_0);
    #line 3857 
    if (emg_repeat_cnt_main_31_0 > 0) {
      #line 3858 
      emg_repeat_cnt_main_31_0 --;
      #line 3860 
      goto emg_main_31;
    }
    else 
         #line 3862 
         __VERIFIER_assume(0);
    #line 3866 
    break;
    #line 3868 
    default: 
             #line 3868 
    ;
    #line 3868 
    __VERIFIER_assume(0);
  }
  #line 3871 
  return (void *)0;
  #line 3874 
  emg_main_31: 
               #line 3874 
  ;
  #line 3875 
  if (ldv_undef_int() != 0) {
    #line 3878 
    ldv_pre_probe();
    #line 3882 
    emg_31_ret = emg_wrapper_cgx_probe(emg_31_resource_0,emg_31_device_id);
    #line 3887 
    emg_31_ret = ldv_post_probe(emg_31_ret);
    #line 3890 
    if (ldv_undef_int() != 0) {
      #line 3892 
      __VERIFIER_assume(emg_31_ret == 0);
      #line 3896 
      goto emg_call_31;
    }
    else 
         #line 3901 
         __VERIFIER_assume(emg_31_ret != 0);
    #line 3905 
    if (emg_repeat_cnt_main_31_1 > 0) {
      #line 3906 
      emg_repeat_cnt_main_31_1 --;
      #line 3908 
      goto emg_main_31;
    }
    else 
         #line 3910 
         __VERIFIER_assume(0);
  }
  else 
       #line 3916 
       ldv_free((void *)emg_31_resource_0);
  #line 3924 
  return (void *)0;
}

#line 3929  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_rvu_driver(void *arg0)
{
  #line 3932 
  int emg_32_choice;
  #line 3933 
  struct pci_driver *emg_32_container;
  #line 3934 
  struct pci_device_id *emg_32_device_id;
  #line 3935 
  struct pci_dev *emg_32_resource_0;
  #line 3936 
  struct pm_message emg_32_resource_1;
  #line 3937 
  int emg_32_ret;
  #line 3938 
  int emg_repeat_cnt_call_32_1 = 1;
  #line 3939 
  int emg_repeat_cnt_main_32_0 = 1;
  #line 3940 
  int emg_repeat_cnt_main_32_1 = 1;
  #line 3941 
  int emg_repeat_cnt_call_32_0 = 1;
  #line 3943 
  struct emg_struct_pci_scenario_cgx_driver_31 *data = (struct emg_struct_pci_scenario_cgx_driver_31 *)arg0;
  #line 3947 
  emg_32_choice = 0;
  #line 3948 
  emg_32_ret = ldv_undef_int();
  #line 3949 
  emg_32_choice = 0;
  #line 3950 
  emg_32_container = emg_alias_rvu_driver;
  #line 3951 
  emg_32_ret = ldv_undef_int();
  #line 3953 
  __VERIFIER_assume(data->arg0 == emg_alias_rvu_driver);
  #line 3955 
  if (data != (struct emg_struct_pci_scenario_cgx_driver_31 *)0) {
    #line 3956 
    emg_32_container = data->arg0;
    #line 3957 
    ldv_free((void *)data);
  }
  #line 3962 
  emg_32_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 3963 
  emg_32_choice = 0;
  #line 3964 
  emg_32_device_id = emg_32_container->id_table + (unsigned long)emg_32_choice;
  #line 3968 
  goto emg_main_32;
  #line 3972 
  return (void *)0;
  #line 3975 
  emg_call_32: 
               #line 3975 
  ;
  #line 3976 
  switch (ldv_undef_int()) {
    #line 3977 
    case 0: 
            #line 3977 
    ;
    #line 3982 
    if (emg_repeat_cnt_call_32_1 > 0) {
      #line 3983 
      emg_repeat_cnt_call_32_1 --;
      #line 3985 
      goto emg_call_32;
    }
    else 
         #line 3987 
         __VERIFIER_assume(0);
    #line 3991 
    break;
    #line 3993 
    case 1: 
            #line 3993 
    ;
    #line 3995 
    if (emg_32_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 3996 
      emg_32_ret = (*(emg_32_container->suspend))(emg_32_resource_0,emg_32_resource_1); else 
                                                                    #line 3998 
                                                                    emg_32_ret = ldv_undef_int();
    #line 4004 
    emg_32_ret = ldv_filter_err_code(emg_32_ret);
    #line 4008 
    if (emg_32_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 4009 
                                                                  (*(emg_32_container->resume))(emg_32_resource_0);
    #line 4013 
    if (emg_repeat_cnt_call_32_0 > 0) {
      #line 4014 
      emg_repeat_cnt_call_32_0 --;
      #line 4016 
      goto emg_call_32;
    }
    else 
         #line 4018 
         __VERIFIER_assume(0);
    #line 4022 
    break;
    #line 4024 
    case 2: 
            #line 4024 
    ;
    #line 4026 
    if (emg_32_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 4027 
      (*(emg_32_container->shutdown))(emg_32_resource_0);
    #line 4032 
    emg_wrapper_rvu_remove(emg_32_resource_0);
    #line 4035 
    if (emg_repeat_cnt_main_32_0 > 0) {
      #line 4036 
      emg_repeat_cnt_main_32_0 --;
      #line 4038 
      goto emg_main_32;
    }
    else 
         #line 4040 
         __VERIFIER_assume(0);
    #line 4044 
    break;
    #line 4046 
    default: 
             #line 4046 
    ;
    #line 4046 
    __VERIFIER_assume(0);
  }
  #line 4049 
  return (void *)0;
  #line 4052 
  emg_main_32: 
               #line 4052 
  ;
  #line 4053 
  if (ldv_undef_int() != 0) {
    #line 4056 
    ldv_pre_probe();
    #line 4060 
    emg_32_ret = emg_wrapper_rvu_probe(emg_32_resource_0,emg_32_device_id);
    #line 4065 
    emg_32_ret = ldv_post_probe(emg_32_ret);
    #line 4068 
    if (ldv_undef_int() != 0) {
      #line 4070 
      __VERIFIER_assume(emg_32_ret == 0);
      #line 4074 
      goto emg_call_32;
    }
    else 
         #line 4079 
         __VERIFIER_assume(emg_32_ret != 0);
    #line 4083 
    if (emg_repeat_cnt_main_32_1 > 0) {
      #line 4084 
      emg_repeat_cnt_main_32_1 --;
      #line 4086 
      goto emg_main_32;
    }
    else 
         #line 4088 
         __VERIFIER_assume(0);
  }
  else 
       #line 4094 
       ldv_free((void *)emg_32_resource_0);
  #line 4102 
  return (void *)0;
}

#line 4107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 4110 
  struct pci_driver *emg_2_pci_driver;
  #line 4112 
  if (ldv_undef_int() != 0) {
    #line 4114 
    emg_2_pci_driver = arg0;
    #line 4118 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 4122 
    return 0;
  }
  else {
    #line 4126 
    return ldv_undef_int_negative();
  }
}

#line 4134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 4137 
  struct dentry *emg_3_dentry;
  #line 4138 
  struct inode *emg_3_inode;
  #line 4140 
  if (ldv_undef_int() != 0) {
    #line 4142 
    emg_3_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 4143 
    emg_3_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 4144 
    emg_3_inode->i_mode = (unsigned short)16877U;
    #line 4145 
    emg_3_dentry->d_parent = arg1;
    #line 4146 
    emg_3_dentry->d_inode = emg_3_inode;
    #line 4147 
    return emg_3_dentry;
  }
  else {
    #line 4151 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 4159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 4162 
  struct dentry *emg_4_dentry;
  #line 4163 
  struct file_operations *emg_4_file_operations;
  #line 4164 
  struct inode *emg_4_inode;
  #line 4166 
  if (ldv_undef_int() != 0) {
    #line 4168 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 4169 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 4170 
    emg_4_inode->i_mode = arg1;
    #line 4171 
    emg_4_dentry->d_parent = arg2;
    #line 4172 
    emg_4_inode->i_private = arg3;
    #line 4173 
    emg_4_file_operations = arg4;
    #line 4174 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 4175 
    ldv_save_allocated_memory_to_list((void *)emg_4_dentry);
    #line 4179 
    emg_dispatch_register_4(emg_4_file_operations);
    #line 4183 
    return emg_4_dentry;
  }
  else {
    #line 4187 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 4195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 4198 
  int emg_5_line;
  #line 4201 
  emg_5_line = (int)arg0;
  #line 4205 
  emg_dispatch_irq_deregister_5(emg_5_line);
  #line 4206 
  ;
  #line 4206 
  return (void *)0;
}

#line 4212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 4215 
  struct pci_driver *emg_6_pci_driver;
  #line 4218 
  emg_6_pci_driver = arg0;
  #line 4222 
  emg_dispatch_deregister_6(emg_6_pci_driver);
  #line 4225 
  return;
}

#line 4230  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 4233 
  struct work_struct *emg_7_work_struct;
  #line 4235 
  if (ldv_undef_int() != 0) {
    #line 4237 
    emg_7_work_struct = arg1;
    #line 4241 
    if (emg_7_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 4242 
      (*(emg_7_work_struct->func))(emg_7_work_struct);
    #line 4247 
    return (_Bool)1;
  }
  else 
       #line 4251 
       return (_Bool)0;
}

#line 4259  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 4262 
  enum irqreturn (*emg_8_callback)(int , void *);
  #line 4263 
  void *emg_8_data;
  #line 4264 
  int emg_8_line;
  #line 4265 
  enum irqreturn (*emg_8_thread)(int , void *);
  #line 4267 
  emg_8_callback = & emg_wrapper_cgx_fwi_event_handler;
  #line 4268 
  if (ldv_undef_int() != 0) {
    #line 4270 
    emg_8_line = (int)arg0;
    #line 4271 
    emg_8_callback = arg1;
    #line 4272 
    emg_8_thread = (enum irqreturn (*)(int , void *))0;
    #line 4273 
    emg_8_data = arg4;
    #line 4277 
    emg_dispatch_irq_register_8(emg_8_line,emg_8_callback,emg_8_thread,emg_8_data);
    #line 4281 
    return 0;
  }
  else {
    #line 4285 
    return ldv_undef_int_negative();
  }
}

#line 4293  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 4296 
  int emg_1_ret;
  #line 4299 
  emg_1_ret = emg_rvu_init_module();
  #line 4300 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 4303 
  if (ldv_undef_int() != 0) {
    #line 4305 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 4309 
    emg_rvu_cleanup_module();
  }
  else 
       #line 4313 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 4317 
  return (void *)0;
}

#line 4322  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/octeontx2/af/octeontx2_af.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 4324 
  ldv_initialize();
  #line 4326 
  emg_entry_point_insmod((void *)0);
  #line 4328 
  return 0;
}

