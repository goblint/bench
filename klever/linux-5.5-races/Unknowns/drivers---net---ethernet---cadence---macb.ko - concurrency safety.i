/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u16 uint16_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_13 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_15 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct idt_bits {
   u16 ist : 3 ;
   u16 zero : 5 ;
   u16 type : 5 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
} __attribute__((__packed__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct gate_struct {
   u16 offset_low ;
   u16 segment ;
   struct idt_bits bits ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 reserved ;
} __attribute__((__packed__));
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef struct gate_struct gate_desc;
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long p4dval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_p4d_t_55 {
   p4dval_t p4d ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_p4d_t_55 p4d_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 363 
struct flush_tlb_info;
#line 364 
struct mmu_gather;
#line 365 
struct vm_area_struct;
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct paravirt_callee_save {
   void *func ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_init_ops {
   unsigned int (*patch)(u8 , void *, unsigned long , unsigned int ) ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_lazy_ops {
   void (*enter)(void) ;
   void (*leave)(void) ;
   void (*flush)(void) ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_time_ops {
   unsigned long long (*sched_clock)(void) ;
   unsigned long long (*steal_clock)(int ) ;
};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_cpu_ops {
   void (*io_delay)(void) ;
   unsigned long (*get_debugreg)(int ) ;
   void (*set_debugreg)(int , unsigned long ) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long ) ;
   void (*write_cr4)(unsigned long ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr *) ;
   void (*load_idt)(struct desc_ptr *) ;
   void (*set_ldt)(void *, unsigned int ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct *, unsigned int ) ;
   void (*load_gs_index)(unsigned int ) ;
   void (*write_ldt_entry)(struct desc_struct *, int , void *) ;
   void (*write_gdt_entry)(struct desc_struct *, int , void *, int ) ;
   void (*write_idt_entry)(gate_desc *, int , gate_desc *) ;
   void (*alloc_ldt)(struct desc_struct *, unsigned int ) ;
   void (*free_ldt)(struct desc_struct *, unsigned int ) ;
   void (*load_sp0)(unsigned long ) ;
   void (*wbinvd)(void) ;
   void (*cpuid)(unsigned int *, unsigned int *, unsigned int *, unsigned int *) ;
   u64 (*read_msr)(unsigned int ) ;
   void (*write_msr)(unsigned int , unsigned int , unsigned int ) ;
   u64 (*read_msr_safe)(unsigned int , int *) ;
   int (*write_msr_safe)(unsigned int , unsigned int , unsigned int ) ;
   u64 (*read_pmc)(int ) ;
   void (*usergs_sysret64)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   void (*start_context_switch)(struct task_struct *) ;
   void (*end_context_switch)(struct task_struct *) ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_mmu_ops {
   void (*flush_tlb_user)(void) ;
   void (*flush_tlb_kernel)(void) ;
   void (*flush_tlb_one_user)(unsigned long ) ;
   void (*flush_tlb_others)(struct cpumask *, struct flush_tlb_info *) ;
   void (*tlb_remove_table)(struct mmu_gather *, void *) ;
   void (*exit_mmap)(struct mm_struct *) ;
   struct paravirt_callee_save read_cr2 ;
   void (*write_cr2)(unsigned long ) ;
   unsigned long (*read_cr3)(void) ;
   void (*write_cr3)(unsigned long ) ;
   void (*activate_mm)(struct mm_struct *, struct mm_struct *) ;
   void (*dup_mmap)(struct mm_struct *, struct mm_struct *) ;
   int (*pgd_alloc)(struct mm_struct *) ;
   void (*pgd_free)(struct mm_struct *, pgd_t *) ;
   void (*alloc_pte)(struct mm_struct *, unsigned long ) ;
   void (*alloc_pmd)(struct mm_struct *, unsigned long ) ;
   void (*alloc_pud)(struct mm_struct *, unsigned long ) ;
   void (*alloc_p4d)(struct mm_struct *, unsigned long ) ;
   void (*release_pte)(unsigned long ) ;
   void (*release_pmd)(unsigned long ) ;
   void (*release_pud)(unsigned long ) ;
   void (*release_p4d)(unsigned long ) ;
   void (*set_pte)(pte_t *, pte_t ) ;
   void (*set_pte_at)(struct mm_struct *, unsigned long , pte_t *, pte_t ) ;
   void (*set_pmd)(pmd_t *, pmd_t ) ;
   pte_t (*ptep_modify_prot_start)(struct vm_area_struct *, unsigned long , pte_t *) ;
   void (*ptep_modify_prot_commit)(struct vm_area_struct *, unsigned long , pte_t *, pte_t ) ;
   struct paravirt_callee_save pte_val ;
   struct paravirt_callee_save make_pte ;
   struct paravirt_callee_save pgd_val ;
   struct paravirt_callee_save make_pgd ;
   void (*set_pud)(pud_t *, pud_t ) ;
   struct paravirt_callee_save pmd_val ;
   struct paravirt_callee_save make_pmd ;
   struct paravirt_callee_save pud_val ;
   struct paravirt_callee_save make_pud ;
   void (*set_p4d)(p4d_t *, p4d_t ) ;
   struct paravirt_callee_save p4d_val ;
   struct paravirt_callee_save make_p4d ;
   void (*set_pgd)(pgd_t *, pgd_t ) ;
   struct pv_lazy_ops lazy_mode ;
   void (*set_fixmap)(unsigned int , phys_addr_t , pgprot_t ) ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_lock_ops {
   void (*queued_spin_lock_slowpath)(struct qspinlock *, u32 ) ;
   struct paravirt_callee_save queued_spin_unlock ;
   void (*wait)(u8 *, u8 ) ;
   void (*kick)(int ) ;
   struct paravirt_callee_save vcpu_is_preempted ;
};
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct paravirt_patch_template {
   struct pv_init_ops init ;
   struct pv_time_ops time ;
   struct pv_cpu_ops cpu ;
   struct pv_irq_ops irq ;
   struct pv_mmu_ops mmu ;
   struct pv_lock_ops lock ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_114 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_114 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
struct system_device_crosststamp {
   ktime_t device ;
   ktime_t sys_realtime ;
   ktime_t sys_monoraw ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct notifier_block;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 235 
struct clk;
#line 236 
struct device_node;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 160 
struct inode;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/apic.h"
struct irq_data;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_248 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_248 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_249 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_249 kgid_t;
#line 140 
struct dentry;
#line 141 
struct iattr;
#line 142 
struct super_block;
#line 143 
struct poll_table_struct;
#line 144 
struct fs_context;
#line 146 
struct kernfs_open_node;
#line 147 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_250 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_250 __anonCompField_kernfs_node_49 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_254 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_254 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_clk.h"
struct clk_hw;
#line 15 
struct clk_core;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk-provider.h"
struct clk_rate_request {
   unsigned long rate ;
   unsigned long min_rate ;
   unsigned long max_rate ;
   unsigned long best_parent_rate ;
   struct clk_hw *best_parent_hw ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk-provider.h"
struct clk_duty {
   unsigned int num ;
   unsigned int den ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk-provider.h"
struct clk_ops {
   int (*prepare)(struct clk_hw *) ;
   void (*unprepare)(struct clk_hw *) ;
   int (*is_prepared)(struct clk_hw *) ;
   void (*unprepare_unused)(struct clk_hw *) ;
   int (*enable)(struct clk_hw *) ;
   void (*disable)(struct clk_hw *) ;
   int (*is_enabled)(struct clk_hw *) ;
   void (*disable_unused)(struct clk_hw *) ;
   int (*save_context)(struct clk_hw *) ;
   void (*restore_context)(struct clk_hw *) ;
   unsigned long (*recalc_rate)(struct clk_hw *, unsigned long ) ;
   long (*round_rate)(struct clk_hw *, unsigned long , unsigned long *) ;
   int (*determine_rate)(struct clk_hw *, struct clk_rate_request *) ;
   int (*set_parent)(struct clk_hw *, u8 ) ;
   u8 (*get_parent)(struct clk_hw *) ;
   int (*set_rate)(struct clk_hw *, unsigned long , unsigned long ) ;
   int (*set_rate_and_parent)(struct clk_hw *, unsigned long , unsigned long , u8 ) ;
   unsigned long (*recalc_accuracy)(struct clk_hw *, unsigned long ) ;
   int (*get_phase)(struct clk_hw *) ;
   int (*set_phase)(struct clk_hw *, int ) ;
   int (*get_duty_cycle)(struct clk_hw *, struct clk_duty *) ;
   int (*set_duty_cycle)(struct clk_hw *, struct clk_duty *) ;
   void (*init)(struct clk_hw *) ;
   void (*debug_init)(struct clk_hw *, struct dentry *) ;
};
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk-provider.h"
struct clk_parent_data {
   struct clk_hw *hw ;
   char *fw_name ;
   char *name ;
   int index ;
};
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk-provider.h"
struct clk_init_data {
   char *name ;
   struct clk_ops *ops ;
   char **parent_names ;
   struct clk_parent_data *parent_data ;
   struct clk_hw **parent_hws ;
   u8 num_parents ;
   unsigned long flags ;
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk-provider.h"
struct clk_hw {
   struct clk_core *core ;
   struct clk *clk ;
   struct clk_init_data *init ;
};
#line 768 
struct gpio_desc;
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_259 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_258 {
   struct __anonstruct_259 __anonCompField___anonunion_258_51 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_258 __anonCompField_ctl_table_header_52 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_264 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_264 __anonCompField_kernel_param_53 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/circ_buf.h"
struct percpu_ref;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/circ_buf.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_311 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_311 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_312 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_313 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_314 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_315 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_318 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_319 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_317 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_318 _addr_bnd ;
   struct __anonstruct__addr_pkey_319 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_316 {
   void *_addr ;
   union __anonunion_317 __anonCompField___anonstruct__sigfault_316_54 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_320 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_321 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_312 _kill ;
   struct __anonstruct__timer_313 _timer ;
   struct __anonstruct__rt_314 _rt ;
   struct __anonstruct__sigchld_315 _sigchld ;
   struct __anonstruct__sigfault_316 _sigfault ;
   struct __anonstruct__sigpoll_320 _sigpoll ;
   struct __anonstruct__sigsys_321 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_326 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_326 __anonCompField_kernel_siginfo_57 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_331 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_331 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_333 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_333 __anonCompField_task_struct_59 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct pdev_archdata {
   };
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct irq_domain;
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct irq_desc;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqhandler.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqhandler.h"
typedef enum irqreturn irqreturn_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irq_regs.h"
struct msi_msg;
#line 33 
enum irqchip_irq_state;
#line 33 
enum irqchip_irq_state;
#line 65 
struct msi_desc;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_common_data {
   unsigned int state_use_accessors ;
   unsigned int node ;
   void *handler_data ;
   struct msi_desc *msi_desc ;
   cpumask_var_t affinity ;
   cpumask_var_t effective_affinity ;
};
#line 173 
struct irq_chip;
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_data {
   u32 mask ;
   unsigned int irq ;
   unsigned long hwirq ;
   struct irq_common_data *common ;
   struct irq_chip *chip ;
   struct irq_domain *domain ;
   struct irq_data *parent_data ;
   void *chip_data ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip {
   struct device *parent_device ;
   char *name ;
   unsigned int (*irq_startup)(struct irq_data *) ;
   void (*irq_shutdown)(struct irq_data *) ;
   void (*irq_enable)(struct irq_data *) ;
   void (*irq_disable)(struct irq_data *) ;
   void (*irq_ack)(struct irq_data *) ;
   void (*irq_mask)(struct irq_data *) ;
   void (*irq_mask_ack)(struct irq_data *) ;
   void (*irq_unmask)(struct irq_data *) ;
   void (*irq_eoi)(struct irq_data *) ;
   int (*irq_set_affinity)(struct irq_data *, struct cpumask *, bool ) ;
   int (*irq_retrigger)(struct irq_data *) ;
   int (*irq_set_type)(struct irq_data *, unsigned int ) ;
   int (*irq_set_wake)(struct irq_data *, unsigned int ) ;
   void (*irq_bus_lock)(struct irq_data *) ;
   void (*irq_bus_sync_unlock)(struct irq_data *) ;
   void (*irq_cpu_online)(struct irq_data *) ;
   void (*irq_cpu_offline)(struct irq_data *) ;
   void (*irq_suspend)(struct irq_data *) ;
   void (*irq_resume)(struct irq_data *) ;
   void (*irq_pm_shutdown)(struct irq_data *) ;
   void (*irq_calc_mask)(struct irq_data *) ;
   void (*irq_print_chip)(struct irq_data *, struct seq_file *) ;
   int (*irq_request_resources)(struct irq_data *) ;
   void (*irq_release_resources)(struct irq_data *) ;
   void (*irq_compose_msi_msg)(struct irq_data *, struct msi_msg *) ;
   void (*irq_write_msi_msg)(struct irq_data *, struct msi_msg *) ;
   int (*irq_get_irqchip_state)(struct irq_data *, enum irqchip_irq_state , bool *) ;
   int (*irq_set_irqchip_state)(struct irq_data *, enum irqchip_irq_state , bool ) ;
   int (*irq_set_vcpu_affinity)(struct irq_data *, void *) ;
   void (*ipi_send_single)(struct irq_data *, unsigned int ) ;
   void (*ipi_send_mask)(struct irq_data *, struct cpumask *) ;
   int (*irq_nmi_setup)(struct irq_data *) ;
   void (*irq_nmi_teardown)(struct irq_data *) ;
   unsigned long flags ;
};
#line 512 
struct irq_affinity_notify;
#line 513 
struct proc_dir_entry;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdesc.h"
struct irqaction;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdesc.h"
struct irq_desc {
   struct irq_common_data irq_common_data ;
   struct irq_data irq_data ;
   unsigned int *kstat_irqs ;
   void (*handle_irq)(struct irq_desc *) ;
   struct irqaction *action ;
   unsigned int status_use_accessors ;
   unsigned int core_internal_state__do_not_mess_with_it ;
   unsigned int depth ;
   unsigned int wake_depth ;
   unsigned int tot_count ;
   unsigned int irq_count ;
   unsigned long last_unhandled ;
   unsigned int irqs_unhandled ;
   atomic_t threads_handled ;
   int threads_handled_last ;
   raw_spinlock_t lock ;
   struct cpumask *percpu_enabled ;
   struct cpumask *percpu_affinity ;
   struct cpumask *affinity_hint ;
   struct irq_affinity_notify *affinity_notify ;
   cpumask_var_t pending_mask ;
   unsigned long threads_oneshot ;
   atomic_t threads_active ;
   wait_queue_head_t wait_for_threads ;
   unsigned int nr_actions ;
   unsigned int no_suspend_depth ;
   unsigned int cond_suspend_depth ;
   unsigned int force_resume_depth ;
   struct proc_dir_entry *dir ;
   struct dentry *debugfs_file ;
   char *dev_name ;
   struct callback_head rcu ;
   struct kobject kobj ;
   struct mutex request_mutex ;
   int parent_irq ;
   struct module *owner ;
   char *name ;
} __attribute__((__aligned__(4096)));
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_regs {
   unsigned long enable ;
   unsigned long disable ;
   unsigned long mask ;
   unsigned long ack ;
   unsigned long eoi ;
   unsigned long type ;
   unsigned long polarity ;
};
#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_type {
   struct irq_chip chip ;
   struct irq_chip_regs regs ;
   void (*handler)(struct irq_desc *) ;
   u32 type ;
   u32 mask_cache_priv ;
   u32 *mask_cache ;
};
#line 995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_generic {
   raw_spinlock_t lock ;
   void *reg_base ;
   u32 (*reg_readl)(void *) ;
   void (*reg_writel)(u32 , void *) ;
   void (*suspend)(struct irq_chip_generic *) ;
   void (*resume)(struct irq_chip_generic *) ;
   unsigned int irq_base ;
   unsigned int irq_cnt ;
   u32 mask_cache ;
   u32 type_cache ;
   u32 polarity_cache ;
   u32 wake_enabled ;
   u32 wake_active ;
   unsigned int num_ct ;
   void *private ;
   unsigned long installed ;
   unsigned long unused ;
   struct irq_domain *domain ;
   struct list_head list ;
   struct irq_chip_type chip_types[0U] ;
};
#line 1017 
enum irq_gc_flags {
    IRQ_GC_INIT_MASK_CACHE = 1,
    IRQ_GC_INIT_NESTED_LOCK = 2,
    IRQ_GC_MASK_CACHE_PER_TYPE = 4,
    IRQ_GC_NO_MASK = 8,
    IRQ_GC_BE_IO = 16
};
#line 1045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_domain_chip_generic {
   unsigned int irqs_per_chip ;
   unsigned int num_chips ;
   unsigned int irq_flags_to_clear ;
   unsigned int irq_flags_to_set ;
   enum irq_gc_flags gc_flags ;
   struct irq_chip_generic *gc[0U] ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_428 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_427 {
   struct __anonstruct_428 __anonCompField___anonunion_427_67 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_427 __anonCompField_lockref_68 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_430 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_429 {
   struct __anonstruct_430 __anonCompField___anonunion_429_69 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_429 __anonCompField_qstr_70 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_431 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_432 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_431 __anonCompField_dentry_71 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_432 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_439 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_440 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_439 __anonCompField_io_cq_72 ;
   union __anonunion_440 __anonCompField_io_cq_73 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 287 
struct bio;
#line 288 
struct export_operations;
#line 289 
struct hd_geometry;
#line 290 
struct iovec;
#line 291 
struct kiocb;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct iov_iter;
#line 295 
struct fscrypt_info;
#line 296 
struct fscrypt_operations;
#line 297 
struct fsverity_info;
#line 298 
struct fsverity_operations;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_441 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_441 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_442 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_442 __anonCompField_kqid_74 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_444 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_443 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_444 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_443 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_447 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_448 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_449 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628 
struct cdev;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_450 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_447 __anonCompField_inode_75 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_448 __anonCompField_inode_76 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_449 __anonCompField_inode_77 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_450 __anonCompField_inode_78 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_451 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_451 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_453 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_452 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_453 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_452 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 34 
struct key_tag;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_455 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_454 {
   struct __anonstruct_455 __anonCompField___anonunion_454_79 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_454 __anonCompField_keyring_index_key_80 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_456 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_457 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_459 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_458 {
   struct keyring_index_key index_key ;
   struct __anonstruct_459 __anonCompField___anonunion_458_83 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_461 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_460 {
   union key_payload payload ;
   struct __anonstruct_461 __anonCompField___anonunion_460_85 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_456 __anonCompField_key_81 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_457 __anonCompField_key_82 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_458 __anonCompField_key_84 ;
   union __anonunion_460 __anonCompField_key_86 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_464 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_464 __anonCompField_cred_87 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 245 
struct pinctrl;
#line 246 
struct pinctrl_state;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pinctrl/devinfo.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *init_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int , void *) ;
   void *dev_id ;
   void *percpu_dev_id ;
   struct irqaction *next ;
   irqreturn_t (*thread_fn)(int , void *) ;
   struct task_struct *thread ;
   struct irqaction *secondary ;
   unsigned int irq ;
   unsigned int flags ;
   unsigned long thread_flags ;
   unsigned long thread_mask ;
   char *name ;
   struct proc_dir_entry *dir ;
} __attribute__((__aligned__(4096)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity_notify {
   unsigned int irq ;
   struct kref kref ;
   struct work_struct work ;
   void (*notify)(struct irq_affinity_notify *, cpumask_t *) ;
   void (*release)(struct kref *) ;
};
#line 472 
enum irqchip_irq_state {
    IRQCHIP_STATE_PENDING = 0,
    IRQCHIP_STATE_ACTIVE = 1,
    IRQCHIP_STATE_MASKED = 2,
    IRQCHIP_STATE_LINE_LEVEL = 3
};
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103 
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_473 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_475 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_474 {
   unsigned long nr_segs ;
   struct __anonstruct_475 __anonCompField___anonunion_474_89 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_473 __anonCompField_iov_iter_88 ;
   union __anonunion_474 __anonCompField_iov_iter_90 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_478 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_478 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_479 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_479 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_480 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_480 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_481 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_481 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_482 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_482 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_483 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_483 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_484 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_484 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_485 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_485 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_486 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_487 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_486 ifr_ifrn ;
   union __anonunion_ifr_ifru_487 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_11786 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_11786 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_532 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_532 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_533 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_533 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_544 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_545 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_546 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_547 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_544 ports ;
   struct __anonstruct_icmpt_545 icmpt ;
   struct __anonstruct_dnports_546 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_547 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_548 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_548 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_555 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_554 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_555 __anonCompField___anonstruct_554_106 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_553 {
   struct __anonstruct_554 __anonCompField___anonunion_553_107 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_556 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_557 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_559 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_558 {
   struct __anonstruct_559 __anonCompField___anonunion_558_111 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_561 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_560 {
   __wsum csum ;
   struct __anonstruct_561 __anonCompField___anonunion_560_113 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_562 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_563 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_564 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_553 __anonCompField_sk_buff_108 ;
   union __anonunion_556 __anonCompField_sk_buff_109 ;
   union __anonunion_557 __anonCompField_sk_buff_110 ;
   char cb[48U] ;
   union __anonunion_558 __anonCompField_sk_buff_112 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_560 __anonCompField_sk_buff_114 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_562 __anonCompField_sk_buff_115 ;
   __u32 secmark ;
   union __anonunion_563 __anonCompField_sk_buff_116 ;
   union __anonunion_564 __anonCompField_sk_buff_117 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_590 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_590 __anonCompField_ethtool_rxnfc_119 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_593 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_593 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_594 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_594 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_595 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_595 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_596 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_596 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_597 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_597 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_599 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_599 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_611 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_611 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_613 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_612 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_613 __anonCompField___anonunion_612_120 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_612 __anonCompField_uid_gid_map_121 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_615 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_617 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_616 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_617 __anonCompField___anonstruct_616_124 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_618 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_619 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_620 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_621 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_623 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_622 {
   union __anonunion_623 __anonCompField___anonstruct_622_129 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_624 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_625 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_626 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_627 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_628 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_615 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_616 __anonCompField_bpf_attr_125 ;
   struct __anonstruct_618 __anonCompField_bpf_attr_126 ;
   struct __anonstruct_619 __anonCompField_bpf_attr_127 ;
   struct __anonstruct_620 __anonCompField_bpf_attr_128 ;
   struct __anonstruct_test_621 test ;
   struct __anonstruct_622 __anonCompField_bpf_attr_130 ;
   struct __anonstruct_info_624 info ;
   struct __anonstruct_query_625 query ;
   struct __anonstruct_raw_tracepoint_626 raw_tracepoint ;
   struct __anonstruct_627 __anonCompField_bpf_attr_131 ;
   struct __anonstruct_task_fd_query_628 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_655 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_655 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_657 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_656 {
   struct __anonstruct_tail_call_657 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_656 __anonCompField_bpf_jit_poke_descriptor_156 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_658 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_658 __anonCompField_bpf_prog_aux_157 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_660 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_660 __anonCompField_bpf_cgroup_storage_159 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_662 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_661 {
   struct __anonstruct_662 __anonCompField___anonunion_661_160 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_661 __anonCompField_sock_cgroup_data_161 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_685 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_685 __anonCompField_netlink_callback_162 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_690 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_691 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_692 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_693 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_689 {
   struct __anonstruct_690 __anonCompField___anonunion_689_164 ;
   struct __anonstruct_691 __anonCompField___anonunion_689_165 ;
   struct __anonstruct_692 __anonCompField___anonunion_689_166 ;
   struct __anonstruct_xsk_693 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_689 __anonCompField_netdev_bpf_167 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15861 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15862 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_694 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_695 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_694 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15861 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15862 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_695 __anonCompField_net_device_168 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_data/macb.h"
struct macb_platform_data {
   struct clk *pclk ;
   struct clk *hclk ;
};
#line 19 
struct mfd_cell;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device {
   char *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u64 dma_mask ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_driver {
   int (*probe)(struct platform_device *) ;
   int (*remove)(struct platform_device *) ;
   void (*shutdown)(struct platform_device *) ;
   int (*suspend)(struct platform_device *, pm_message_t ) ;
   int (*resume)(struct platform_device *) ;
   struct device_driver driver ;
   struct platform_device_id *id_table ;
   bool prevent_deferred_probe ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_16501 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_16501 phy_interface_t;
#line 186 
struct phylink;
#line 188 
enum ldv_16516 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_16516 state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
struct phylink_link_state {
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   unsigned int link : 1 ;
   unsigned int an_enabled : 1 ;
   unsigned int an_complete : 1 ;
};
#line 56 
enum phylink_op_type {
    PHYLINK_NETDEV = 0,
    PHYLINK_DEV = 1
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
struct phylink_config {
   struct device *dev ;
   enum phylink_op_type type ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
struct phylink_mac_ops {
   void (*validate)(struct phylink_config *, unsigned long *, struct phylink_link_state *) ;
   void (*mac_pcs_get_state)(struct phylink_config *, struct phylink_link_state *) ;
   void (*mac_config)(struct phylink_config *, unsigned int , struct phylink_link_state *) ;
   void (*mac_an_restart)(struct phylink_config *) ;
   void (*mac_link_down)(struct phylink_config *, unsigned int , phy_interface_t ) ;
   void (*mac_link_up)(struct phylink_config *, unsigned int , phy_interface_t , struct phy_device *) ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_706 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_706 __anonCompField_bdi_writeback_169 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_707 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_707 __anonCompField_bio_170 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_710 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_711 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_713 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_714 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_712 {
   struct __anonstruct_elv_713 elv ;
   struct __anonstruct_flush_714 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_715 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_710 __anonCompField_request_171 ;
   union __anonunion_711 __anonCompField_request_172 ;
   union __anonunion_712 __anonCompField_request_173 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_715 __anonCompField_request_174 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_738 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_737 {
   void *validation_data ;
   struct __anonstruct_738 __anonCompField___anonunion_737_175 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_737 __anonCompField_nla_policy_176 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_812 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_813 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_811 {
   struct __anonstruct_812 __anonCompField___anonunion_811_178 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_813 __anonCompField___anonunion_811_179 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_811 __anonCompField_tcf_result_180 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_815 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_815 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_828 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_828 __anonCompField_bpf_prog_182 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/net_tstamp.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_850 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_850 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_852 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   __addrpair skc_addrpair ;
   struct __anonstruct_852 __anonCompField___anonunion_851_184 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_855 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   __portpair skc_portpair ;
   struct __anonstruct_855 __anonCompField___anonunion_854_187 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_856 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_857 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_858 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_859 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_860 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_851 __anonCompField_sock_common_185 ;
   union __anonunion_853 __anonCompField_sock_common_186 ;
   union __anonunion_854 __anonCompField_sock_common_188 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_856 __anonCompField_sock_common_189 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_857 __anonCompField_sock_common_190 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_858 __anonCompField_sock_common_191 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_859 __anonCompField_sock_common_192 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_860 __anonCompField_sock_common_193 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_861 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_862 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_863 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_861 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_862 __anonCompField_sock_194 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_863 __anonCompField_sock_195 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_898 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_898 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
union __anonunion___u_969 {
   u64 __val ;
   char __c[1U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_clock_time {
   __s64 sec ;
   __u32 nsec ;
   __u32 reserved ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_extts_request {
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[2U] ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_perout_request {
   struct ptp_clock_time start ;
   struct ptp_clock_time period ;
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[4U] ;
};
#line 138 
enum ptp_pin_function {
    PTP_PF_NONE = 0,
    PTP_PF_EXTTS = 1,
    PTP_PF_PEROUT = 2,
    PTP_PF_PHYSYNC = 3
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_pin_desc {
   char name[64U] ;
   unsigned int index ;
   unsigned int func ;
   unsigned int chan ;
   unsigned int rsv[5U] ;
};
#line 205 
enum ldv_20228 {
    PTP_CLK_REQ_EXTTS = 0,
    PTP_CLK_REQ_PEROUT = 1,
    PTP_CLK_REQ_PPS = 2
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
union __anonunion_970 {
   struct ptp_extts_request extts ;
   struct ptp_perout_request perout ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_request {
   enum ldv_20228 type ;
   union __anonunion_970 __anonCompField_ptp_clock_request_198 ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_info {
   struct module *owner ;
   char name[16U] ;
   s32 max_adj ;
   int n_alarm ;
   int n_ext_ts ;
   int n_per_out ;
   int n_pins ;
   int pps ;
   struct ptp_pin_desc *pin_config ;
   int (*adjfine)(struct ptp_clock_info *, long ) ;
   int (*adjfreq)(struct ptp_clock_info *, s32 ) ;
   int (*adjtime)(struct ptp_clock_info *, s64 ) ;
   int (*gettime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*gettimex64)(struct ptp_clock_info *, struct timespec64 *, struct ptp_system_timestamp *) ;
   int (*getcrosststamp)(struct ptp_clock_info *, struct system_device_crosststamp *) ;
   int (*settime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*enable)(struct ptp_clock_info *, struct ptp_clock_request *, int ) ;
   int (*verify)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ) ;
   long (*do_aux_work)(struct ptp_clock_info *) ;
};
#line 144 
struct ptp_clock;
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct macb_dma_desc {
   u32 addr ;
   u32 ctrl ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct macb_dma_desc_64 {
   u32 addrh ;
   u32 resvd ;
};
#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct macb_dma_desc_ptp {
   u32 ts_1 ;
   u32 ts_2 ;
};
#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct gem_tx_ts {
   struct sk_buff *skb ;
   struct macb_dma_desc_ptp desc_ptp ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct macb_tx_skb {
   struct sk_buff *skb ;
   dma_addr_t mapping ;
   size_t size ;
   bool mapped_as_page ;
};
#line 862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct macb_stats {
   u32 rx_pause_frames ;
   u32 tx_ok ;
   u32 tx_single_cols ;
   u32 tx_multiple_cols ;
   u32 rx_ok ;
   u32 rx_fcs_errors ;
   u32 rx_align_errors ;
   u32 tx_deferred ;
   u32 tx_late_cols ;
   u32 tx_excessive_cols ;
   u32 tx_underruns ;
   u32 tx_carrier_errors ;
   u32 rx_resource_errors ;
   u32 rx_overruns ;
   u32 rx_symbol_errors ;
   u32 rx_oversize_pkts ;
   u32 rx_jabbers ;
   u32 rx_undersize_pkts ;
   u32 sqe_test_errors ;
   u32 rx_length_mismatch ;
   u32 tx_pause_frames ;
};
#line 886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct gem_stats {
   u32 tx_octets_31_0 ;
   u32 tx_octets_47_32 ;
   u32 tx_frames ;
   u32 tx_broadcast_frames ;
   u32 tx_multicast_frames ;
   u32 tx_pause_frames ;
   u32 tx_64_byte_frames ;
   u32 tx_65_127_byte_frames ;
   u32 tx_128_255_byte_frames ;
   u32 tx_256_511_byte_frames ;
   u32 tx_512_1023_byte_frames ;
   u32 tx_1024_1518_byte_frames ;
   u32 tx_greater_than_1518_byte_frames ;
   u32 tx_underrun ;
   u32 tx_single_collision_frames ;
   u32 tx_multiple_collision_frames ;
   u32 tx_excessive_collisions ;
   u32 tx_late_collisions ;
   u32 tx_deferred_frames ;
   u32 tx_carrier_sense_errors ;
   u32 rx_octets_31_0 ;
   u32 rx_octets_47_32 ;
   u32 rx_frames ;
   u32 rx_broadcast_frames ;
   u32 rx_multicast_frames ;
   u32 rx_pause_frames ;
   u32 rx_64_byte_frames ;
   u32 rx_65_127_byte_frames ;
   u32 rx_128_255_byte_frames ;
   u32 rx_256_511_byte_frames ;
   u32 rx_512_1023_byte_frames ;
   u32 rx_1024_1518_byte_frames ;
   u32 rx_greater_than_1518_byte_frames ;
   u32 rx_undersized_frames ;
   u32 rx_oversize_frames ;
   u32 rx_jabbers ;
   u32 rx_frame_check_sequence_errors ;
   u32 rx_length_field_frame_errors ;
   u32 rx_symbol_errors ;
   u32 rx_alignment_errors ;
   u32 rx_resource_errors ;
   u32 rx_overruns ;
   u32 rx_ip_header_checksum_errors ;
   u32 rx_tcp_checksum_errors ;
   u32 rx_udp_checksum_errors ;
};
#line 938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct gem_statistic {
   char stat_string[32U] ;
   int offset ;
   u32 stat_bits ;
};
#line 1040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
union __anonunion_972 {
   unsigned long first ;
   unsigned long rx_packets ;
};
#line 1040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct queue_stats {
   union __anonunion_972 __anonCompField_queue_stats_200 ;
   unsigned long rx_bytes ;
   unsigned long rx_dropped ;
   unsigned long tx_packets ;
   unsigned long tx_bytes ;
   unsigned long tx_dropped ;
};
#line 1053 
struct macb;
#line 1054 
struct macb_queue;
#line 1066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct macb_or_gem_ops {
   int (*mog_alloc_rx_buffers)(struct macb *) ;
   void (*mog_free_rx_buffers)(struct macb *) ;
   void (*mog_init_rings)(struct macb *) ;
   int (*mog_rx)(struct macb_queue *, struct napi_struct *, int ) ;
};
#line 1075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct macb_ptp_info {
   void (*ptp_init)(struct net_device *) ;
   void (*ptp_remove)(struct net_device *) ;
   s32 (*get_ptp_max_adj)(void) ;
   unsigned int (*get_tsu_rate)(struct macb *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_hwtst)(struct net_device *, struct ifreq *) ;
   int (*set_hwtst)(struct net_device *, struct ifreq *, int ) ;
};
#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct macb_pm_data {
   u32 scrt2 ;
   u32 usrio ;
};
#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct macb_config {
   u32 caps ;
   unsigned int dma_burst_length ;
   int (*clk_init)(struct platform_device *, struct clk **, struct clk **, struct clk **, struct clk **, struct clk **) ;
   int (*init)(struct platform_device *) ;
   int jumbo_max_len ;
};
#line 1103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct tsu_incr {
   u32 sub_ns ;
   u32 ns ;
};
#line 1108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct macb_queue {
   struct macb *bp ;
   int irq ;
   unsigned int ISR ;
   unsigned int IER ;
   unsigned int IDR ;
   unsigned int IMR ;
   unsigned int TBQP ;
   unsigned int TBQPH ;
   unsigned int RBQS ;
   unsigned int RBQP ;
   unsigned int RBQPH ;
   unsigned int tx_head ;
   unsigned int tx_tail ;
   struct macb_dma_desc *tx_ring ;
   struct macb_tx_skb *tx_skb ;
   dma_addr_t tx_ring_dma ;
   struct work_struct tx_error_task ;
   dma_addr_t rx_ring_dma ;
   dma_addr_t rx_buffers_dma ;
   unsigned int rx_tail ;
   unsigned int rx_prepared_head ;
   struct macb_dma_desc *rx_ring ;
   struct sk_buff **rx_skbuff ;
   void *rx_buffers ;
   struct napi_struct napi ;
   struct queue_stats stats ;
   struct work_struct tx_ts_task ;
   unsigned int tx_ts_head ;
   unsigned int tx_ts_tail ;
   struct gem_tx_ts tx_timestamps[128U] ;
};
#line 1145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct ethtool_rx_fs_item {
   struct ethtool_rx_flow_spec fs ;
   struct list_head list ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct ethtool_rx_fs_list {
   struct list_head list ;
   unsigned int count ;
};
#line 1155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
union __anonunion_hw_stats_973 {
   struct macb_stats macb ;
   struct gem_stats gem ;
};
#line 1155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
struct macb {
   void *regs ;
   bool native_io ;
   u32 (*macb_reg_readl)(struct macb *, int ) ;
   void (*macb_reg_writel)(struct macb *, int , u32 ) ;
   size_t rx_buffer_size ;
   unsigned int rx_ring_size ;
   unsigned int tx_ring_size ;
   unsigned int num_queues ;
   unsigned int queue_mask ;
   struct macb_queue queues[8U] ;
   spinlock_t lock ;
   struct platform_device *pdev ;
   struct clk *pclk ;
   struct clk *hclk ;
   struct clk *tx_clk ;
   struct clk *rx_clk ;
   struct clk *tsu_clk ;
   struct net_device *dev ;
   union __anonunion_hw_stats_973 hw_stats ;
   struct macb_or_gem_ops macbgem_ops ;
   struct mii_bus *mii_bus ;
   struct phylink *phylink ;
   struct phylink_config phylink_config ;
   u32 caps ;
   unsigned int dma_burst_length ;
   phy_interface_t phy_interface ;
   int speed ;
   struct sk_buff *skb ;
   dma_addr_t skb_physaddr ;
   int skb_length ;
   unsigned int max_tx_length ;
   u64 ethtool_stats[91U] ;
   unsigned int rx_frm_len_mask ;
   unsigned int jumbo_max_len ;
   u32 wol ;
   struct macb_ptp_info *ptp_info ;
   uint8_t hw_dma_cap ;
   spinlock_t tsu_clk_lock ;
   unsigned int tsu_rate ;
   struct ptp_clock *ptp_clock ;
   struct ptp_clock_info ptp_clock_info ;
   struct tsu_incr tsu_incr ;
   struct hwtstamp_config tstamp_config ;
   struct ethtool_rx_fs_list rx_fs_list ;
   spinlock_t rx_fs_lock ;
   unsigned int max_tuples ;
   struct tasklet_struct hresp_err_tasklet ;
   int rx_bd_rd_prefetch ;
   int tx_bd_rd_prefetch ;
   u32 rx_intr_mask ;
   struct macb_pm_data pm_data ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
struct sifive_fu540_macb_mgmt {
   void *reg ;
   unsigned long rate ;
   struct clk_hw hw ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
enum tk_offsets {
    TK_OFFS_REAL = 0,
    TK_OFFS_BOOT = 1,
    TK_OFFS_TAI = 2,
    TK_OFFS_MAX = 3
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
enum macb_bd_control {
    TSTAMP_DISABLED = 0,
    TSTAMP_FRAME_PTP_EVENT_ONLY = 1,
    TSTAMP_ALL_PTP_FRAMES = 2,
    TSTAMP_ALL_FRAMES = 3
};
#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
union __anonunion___u_1689 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
union __anonunion___u_1691 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
union __anonunion___u_1693 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
union __anonunion___u_1695 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_3474 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_3474 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_3475 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_3475 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_3491 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_3491 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_3495 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_3495 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_3496 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_3497 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_3496 __anonCompField_media_link_90 ;
   union __anonunion_3497 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_3499 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_3498 {
   struct __anonstruct_dev_3499 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_3498 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_3513 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_3514 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_3512 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_3513 i2c ;
   struct __anonstruct_custom_3514 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_3512 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_4415 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_4415 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_platform_instance_macb_driver_18 {
   struct platform_driver *arg0 ;
   int signal_pending ;
};
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_macb_get_ringparam_17 {
   struct net_device *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 304  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 311  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  #line 57 
  return 1UL << fls_long(n + 18446744073709551615UL);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 70 
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 318  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_13 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_15 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
#line 334 
extern struct paravirt_patch_template pv_ops;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 59 
#line 59 
void *__memmove(void *, void *, size_t);
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 136 
int __bitmap_and(unsigned long *, unsigned long *, unsigned long *, unsigned int);
#line 230 
#line 381  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_and(unsigned long *dst, unsigned long *src1, unsigned long *src2, unsigned int nbits)
{
  #line 276 
  if (0 != 0 && nbits + 4294967295U <= 63U) {
    #line 277 
    *dst = ((*src1 & *src2) & (18446744073709551615UL >> (- nbits & 63U)));
    #line 277 
    return ((*src1 & *src2) & (18446744073709551615UL >> (- nbits & 63U))) != 0UL;
  }
  #line 278 
  return __bitmap_and(dst,src1,src2,nbits);
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 237 
#line 367  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void atomic_inc(atomic_t *v);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_save_flags(void)
{
  #line 747 
  unsigned long __ret;
  {
    #line 747 
    unsigned long __edi = __edi;
    #line 747 
    unsigned long __esi = __esi;
    #line 747 
    unsigned long __edx = __edx;
    #line 747 
    unsigned long __ecx = __ecx;
    #line 747 
    unsigned long __eax = __eax;
    #line 747 
    if ((long)(pv_ops.irq.save_fl.func == (void *)0) != 0L) {
      #line 748 
      ldv_inline_asm();
      #line 749 
      ldv_inline_asm();
      #line 750 
      ldv_inline_asm();
      #line 747 
      ;
    }
    {
      #line 747 
      unsigned long __mask;
      #line 751 
      ldv_inline_asm();
      #line 747 
      __mask = 18446744073709551615UL;
      #line 747 
      switch (8UL) {
        #line 747 
        case (unsigned long)1: 
                               #line 747 
        ;
        #line 747 
        __mask = 255UL;
        #line 747 
        break;
        #line 747 
        case (unsigned long)2: 
                               #line 747 
        ;
        #line 747 
        __mask = 65535UL;
        #line 747 
        break;
        #line 747 
        case (unsigned long)4: 
                               #line 747 
        ;
        #line 747 
        __mask = 4294967295UL;
        #line 747 
        break;
        #line 747 
        default: 
                 #line 747 
        ;
        #line 747 
        break;
      }
      #line 747 
      __ret = __mask & __eax;
    }
    }
  #line 747 
  return __ret;
}

#line 750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_restore(unsigned long f)
{
  #line 752 
  unsigned long __edi = __edi;
  #line 752 
  unsigned long __esi = __esi;
  #line 752 
  unsigned long __edx = __edx;
  #line 752 
  unsigned long __ecx = __ecx;
  #line 752 
  unsigned long __eax = __eax;
  #line 752 
  if ((long)(pv_ops.irq.restore_fl.func == (void *)0) != 0L) {
    #line 753 
    ldv_inline_asm();
    #line 754 
    ldv_inline_asm();
    #line 755 
    ldv_inline_asm();
    #line 752 
    ;
  }
  #line 756 
  ldv_inline_asm();
  #line 758 
  return;
}

#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_disable(void)
{
  #line 757 
  unsigned long __edi = __edi;
  #line 757 
  unsigned long __esi = __esi;
  #line 757 
  unsigned long __edx = __edx;
  #line 757 
  unsigned long __ecx = __ecx;
  #line 757 
  unsigned long __eax = __eax;
  #line 757 
  if ((long)(pv_ops.irq.irq_disable.func == (void *)0) != 0L) {
    #line 758 
    ldv_inline_asm();
    #line 759 
    ldv_inline_asm();
    #line 760 
    ldv_inline_asm();
    #line 757 
    ;
  }
  #line 761 
  ldv_inline_asm();
  #line 763 
  return;
}

#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_irq_save(void)
{
  #line 767 
  unsigned long f;
  #line 769 
  f = arch_local_save_flags();
  #line 770 
  arch_local_irq_disable();
  #line 771 
  return f;
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 395  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 402  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static bool IS_ERR(void *ptr);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 409  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static bool IS_ERR_OR_NULL(void *ptr);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
__inline static int arch_irqs_disabled_flags(unsigned long flags)
{
  #line 164 
  return (flags & 512UL) == 0UL;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqflags.h"
#line 32 
void trace_hardirqs_on(void);
#line 33 
#line 33 
void trace_hardirqs_off(void);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 1036  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_spin_lock_lock_of_macb(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 1053  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_spin_unlock_lock_of_macb(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 1027  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_macb(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1071  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_spin_unlock_irqrestore_rx_fs_lock_of_macb(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 1018 
static void cif___ldv_spin_lock_lock_of_macb(spinlock_t *lock);
#line 35 
#line 1062 
static void cif___ldv_spin_lock_rx_fs_lock_of_macb(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 24 
#line 24 
bool ldv_is_err_or_null(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 27 
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 292 
#line 292 
unsigned int jiffies_to_usecs(unsigned long);
#line 375 
#line 375 
unsigned long __usecs_to_jiffies(unsigned int);
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _usecs_to_jiffies(unsigned int u)
{
  #line 379 
  return (unsigned long)(((long)u + 3999L) / 4000L);
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long usecs_to_jiffies(unsigned int u)
{
  #line 413 
  if (0 != 0) {
    #line 414 
    ;
    #line 414 
    if (jiffies_to_usecs(4611686018427387902UL) < u) 
                                                     #line 415 
                                                     return 4611686018427387902UL;
    #line 416 
    return _usecs_to_jiffies(u);
  }
  else {
    #line 418 
    return __usecs_to_jiffies(u);
  }
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static int ktime_compare(ktime_t cmp1, ktime_t cmp2)
{
  #line 114 
  if (cmp1 < cmp2) 
                   #line 115 
                   return -1;
  #line 116 
  if (cmp1 > cmp2) 
                   #line 117 
                   return 1;
  #line 118 
  return 0;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ktime_add_us(ktime_t kt, u64 usec)
{
  #line 198 
  return (long long)(usec * 1000ULL + (unsigned long long)kt);
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 67 
ktime_t ktime_get(void);
#line 177 
#line 177 
u64 ktime_get_mono_fast_ns(void);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 554 
#line 903  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
#line 232 
int clk_prepare(struct clk *);
#line 260 
#line 260 
void clk_unprepare(struct clk *);
#line 419 
#line 419 
struct clk *devm_clk_get(struct device *, char *);
#line 430 
#line 430 
struct clk *devm_clk_get_optional(struct device *, char *);
#line 491 
#line 491 
int clk_enable(struct clk *);
#line 519 
#line 519 
void clk_disable(struct clk *);
#line 544 
#line 544 
unsigned long clk_get_rate(struct clk *);
#line 623 
#line 623 
long clk_round_rate(struct clk *, unsigned long);
#line 632 
#line 632 
int clk_set_rate(struct clk *, unsigned long);
#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
__inline static int clk_prepare_enable(struct clk *clk)
{
  #line 905 
  int ret;
  #line 907 
  ret = clk_prepare(clk);
  #line 908 
  if (ret != 0) 
                #line 909 
                return ret;
  #line 910 
  ret = clk_enable(clk);
  #line 911 
  if (ret != 0) 
                #line 912 
                clk_unprepare(clk);
  #line 914 
  return ret;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
__inline static void clk_disable_unprepare(struct clk *clk)
{
  #line 920 
  clk_disable(clk);
  #line 921 
  clk_unprepare(clk);
  #line 922 
  return;
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int __readl(void *addr)
{
  #line 63 
  unsigned int ret;
  #line 64 
  ldv_inline_asm();
  #line 63 
  return ret;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void __writel(unsigned int val, void *addr)
{
  #line 73 
  ldv_inline_asm();
  #line 74 
  return;
}

#line 206 
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 53 
void iowrite32(u32, void *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
#line 122 
void of_node_put(struct device_node *);
#line 290 
#line 290 
struct device_node *of_get_next_available_child(struct device_node *, struct device_node *);
#line 349 
#line 349 
void *of_get_property(struct device_node *, char *, int *);
#line 360 
#line 360 
struct of_device_id *of_match_node(struct of_device_id *, struct device_node *);
#line 364 
#line 364 
struct device_node *of_parse_phandle(struct device_node *, char *, int);
#line 794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk-provider.h"
#line 794 
struct clk *devm_clk_register(struct device *, struct clk_hw *);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crc32.h"
#line 11 
u32 crc32_le(u32, unsigned char *, size_t);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 567  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 602  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
__inline static resource_size_t resource_size(struct resource *res)
{
  #line 208 
  return (res->end - res->start) + 1ULL;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1080  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 963 
void *devm_ioremap_resource(struct device *, struct resource *);
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
__inline static bool device_may_wakeup(struct device *dev)
{
  #line 84 
  return (_Bool)(((unsigned int)dev->power.can_wakeup != 0U && dev->power.wakeup != (struct wakeup_source *)0) != 0);
}

#line 107 
#line 107 
int device_init_wakeup(struct device *, bool);
#line 108 
#line 108 
int device_set_wakeup_enable(struct device *, bool);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_platdata(struct device *dev)
{
  #line 1583 
  return dev->platform_data;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 197 
int devm_request_threaded_irq(struct device *, unsigned int, irqreturn_t (*)(int , void *), irqreturn_t (*)(int , void *), unsigned long, char *, void *);
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static int devm_request_irq(struct device *dev, unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long irqflags, char *devname, void *dev_id)
{
  #line 206 
  return devm_request_threaded_irq(dev,irq,handler,
                                (irqreturn_t (*)(int , void *))0,irqflags,
                                devname,dev_id);
}

#line 461 
#line 461 
int irq_set_irq_wake(unsigned int, unsigned int);
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static int enable_irq_wake(unsigned int irq)
{
  #line 465 
  return irq_set_irq_wake(irq,1U);
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static int disable_irq_wake(unsigned int irq)
{
  #line 470 
  return irq_set_irq_wake(irq,0U);
}

#line 655 
#line 1045  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t);
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 683 
void tasklet_kill(struct tasklet_struct *);
#line 687 
#line 1119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1119 
#line 1119 
struct sk_buff *skb_copy_expand(struct sk_buff *, int, int, gfp_t);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cloned(struct sk_buff *skb)
{
  #line 1600 
  int tmp_1;
  #line 1600 
  if ((unsigned int)skb->cloned != 0U) {
    #line 1600 
    if ((atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref) & 65535) != 1) 
      #line 1600 
      tmp_1 = 1; else 
                      #line 1600 
                      tmp_1 = 0;
  }
  else 
       #line 1600 
       tmp_1 = 0;
  #line 1600 
  return tmp_1;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_tail_pointer(struct sk_buff *skb)
{
  #line 2158 
  skb->tail = (unsigned int)(skb->data - skb->head);
  #line 2159 
  return;
}

#line 2161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_tail_pointer(struct sk_buff *skb, int offset)
{
  #line 2163 
  skb_reset_tail_pointer(skb);
  #line 2164 
  skb->tail += (unsigned int)offset;
  #line 2165 
  return;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_zero(struct sk_buff *skb, unsigned int len)
{
  #line 2223 
  void *tmp = skb_put(skb,len);
  #line 2225 
  memset(tmp,0,(unsigned long)len);
  #line 2227 
  return tmp;
}

#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_data(struct sk_buff *skb, void *data, unsigned int len)
{
  #line 2233 
  void *tmp = skb_put(skb,len);
  #line 2235 
  memcpy(tmp,data,(unsigned long)len);
  #line 2237 
  return tmp;
}

#line 2240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_put_u8(struct sk_buff *skb, u8 val)
{
  #line 2242 
  *((u8 *)skb_put(skb,1U)) = val;
  #line 2243 
  return;
}

#line 2254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2256 
  skb->len -= len;
  #line 2257 
  if ((long)(skb->len < skb->data_len) != 0L) {
    #line 2258 
    ldv_inline_asm();
    #line 2259 
    ldv_inline_asm();
    #line 2260 
    ldv_inline_asm();
    #line 2257 
    ;
  }
  #line 2258 
  skb->data += (unsigned long)len;
  #line 2258 
  return (void *)skb->data;
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff *skb)
{
  #line 2312 
  int tmp_0;
  #line 2312 
  if ((int)skb_is_nonlinear(skb) == 0) 
                                       #line 2312 
                                       tmp_0 = (int)(skb->end - skb->tail); else 
                                                                    #line 2312 
                                                                    tmp_0 = 0;
  #line 2312 
  return tmp_0;
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_checksum_start(struct sk_buff *skb)
{
  #line 2556 
  return skb->head + (unsigned long)skb->__anonCompField_sk_buff_114.__anonCompField___anonunion_560_113.csum_start;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 3622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data_offset(struct sk_buff *skb, int offset, void *from, unsigned int len)
{
  #line 3627 
  memcpy((void *)(skb->data + (unsigned long)offset),from,(unsigned long)len);
  #line 3628 
  return;
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 87 
#line 87 
int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool napi_reschedule(struct napi_struct *napi)
{
  #line 461 
  if ((int)napi_schedule_prep(napi) != 0) {
    #line 462 
    __napi_schedule(napi);
    #line 463 
    return (_Bool)1;
  }
  #line 465 
  return (_Bool)0;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2679 
#line 1127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  #line 3117 
  netif_tx_start_queue(netdev_get_tx_queue(dev,0U));
  #line 3118 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  #line 3141 
  netif_tx_wake_queue(netdev_get_tx_queue(dev,0U));
  #line 3142 
  return;
}

#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3422 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3423 
  netif_tx_stop_queue(txq);
  #line 3424 
  return;
}

#line 3433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device *dev, u16 queue_index)
{
  #line 3436 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3438 
  return netif_tx_queue_stopped(txq);
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3456 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3458 
  netif_tx_wake_queue(txq);
  #line 3459 
  return;
}

#line 3616 
#line 3616 
void __dev_kfree_skb_irq(struct sk_buff *, enum skb_free_reason);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_consume_skb_irq(struct sk_buff *skb)
{
  #line 3645 
  __dev_kfree_skb_irq(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  #line 3646 
  return;
}

#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  #line 3655 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  #line 3656 
  return;
}

#line 3660 
#line 3660 
int netif_rx(struct sk_buff *);
#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 4131 
#line 1111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 45 
#line 45 
int eth_mac_addr(struct net_device *, void *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 1103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_random(struct net_device *dev)
{
  #line 265 
  dev->addr_assign_type = (unsigned char)1U;
  #line 266 
  eth_random_addr(dev->dev_addr);
  #line 267 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 52 
struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
#line 66 
#line 66 
int platform_get_irq(struct platform_device *, unsigned int);
#line 217 
#line 1175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2);
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 1183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1);
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void *platform_get_drvdata(struct platform_device *pdev)
{
  #line 228 
  return dev_get_drvdata(& pdev->dev);
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void platform_set_drvdata(struct platform_device *pdev, void *data)
{
  #line 234 
  dev_set_drvdata(& pdev->dev,data);
  #line 235 
  return;
}

#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
#line 260 
struct mii_bus *mdiobus_alloc_size(size_t);
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static struct mii_bus *mdiobus_alloc(void)
{
  #line 263 
  return mdiobus_alloc_size(0UL);
}

#line 266 
#line 266 
int __mdiobus_register(struct mii_bus *, struct module *);
#line 268 
#line 268 
void mdiobus_unregister(struct mii_bus *);
#line 269 
#line 269 
void mdiobus_free(struct mii_bus *);
#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static bool phy_interface_mode_is_rgmii(phy_interface_t mode)
{
  #line 955 
  return (_Bool)((unsigned int)mode + 4294967288U <= 3U);
}

#line 1036 
#line 1036 
struct phy_device *phy_find_first(struct mii_bus *);
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
#line 236 
struct phylink *phylink_create(struct phylink_config *, struct fwnode_handle *, phy_interface_t, struct phylink_mac_ops *);
#line 239 
#line 239 
void phylink_destroy(struct phylink *);
#line 241 
#line 241 
int phylink_connect_phy(struct phylink *, struct phy_device *);
#line 242 
#line 242 
int phylink_of_phy_connect(struct phylink *, struct device_node *, u32);
#line 243 
#line 243 
void phylink_disconnect_phy(struct phylink *);
#line 250 
#line 250 
void phylink_start(struct phylink *);
#line 251 
#line 251 
void phylink_stop(struct phylink *);
#line 253 
#line 253 
void phylink_ethtool_get_wol(struct phylink *, struct ethtool_wolinfo *);
#line 254 
#line 254 
int phylink_ethtool_set_wol(struct phylink *, struct ethtool_wolinfo *);
#line 256 
#line 256 
int phylink_ethtool_ksettings_get(struct phylink *, struct ethtool_link_ksettings *);
#line 258 
#line 258 
int phylink_ethtool_ksettings_set(struct phylink *, struct ethtool_link_ksettings *);
#line 269 
#line 269 
int phylink_mii_ioctl(struct phylink *, struct ifreq *, int);
#line 280 
#line 280 
void phylink_set_port_modes(unsigned long *);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_mdio.h"
#line 15 
bool of_mdiobus_child_is_phy(struct device_node *);
#line 16 
#line 16 
int of_mdiobus_register(struct mii_bus *, struct device_node *);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_net.h"
#line 15 
int of_get_phy_mode(struct device_node *, phy_interface_t *);
#line 16 
#line 16 
void *of_get_mac_address(struct device_node *);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 1159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static int cif_pm_runtime_force_suspend(struct device *dev);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 1167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static int cif_pm_runtime_force_resume(struct device *dev);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 37 
int __pm_runtime_idle(struct device *, int);
#line 38 
#line 38 
int __pm_runtime_suspend(struct device *, int);
#line 39 
#line 39 
int __pm_runtime_resume(struct device *, int);
#line 42 
#line 42 
int __pm_runtime_set_status(struct device *, unsigned int);
#line 46 
#line 1095  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_pm_runtime_enable(struct device *dev);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 50 
void __pm_runtime_use_autosuspend(struct device *, bool);
#line 51 
#line 51 
void pm_runtime_set_autosuspend_delay(struct device *, int);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_get_noresume(struct device *dev)
{
  #line 69 
  atomic_inc(& dev->power.usage_count);
  #line 70 
  return;
}

#line 83 
#line 1151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static bool cif_pm_runtime_suspended(struct device *dev);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_mark_last_busy(struct device *dev)
{
  #line 108 
  union __anonunion___u_969 __u = {.__val = ktime_get_mono_fast_ns()};
  #line 107 
  __write_once_size((void *)(& dev->power.last_busy),(void *)(& __u.__c),8);
  #line 107 
  u64 tmp_2 = __u.__val;
  #line 109 
  return;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_get_sync(struct device *dev)
{
  #line 226 
  return __pm_runtime_resume(dev,4);
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_put(struct device *dev)
{
  #line 231 
  return __pm_runtime_idle(dev,5);
}

#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_put_autosuspend(struct device *dev)
{
  #line 236 
  return __pm_runtime_suspend(dev,13);
}

#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_put_sync(struct device *dev)
{
  #line 242 
  return __pm_runtime_idle(dev,4);
}

#line 259 
#line 1087  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static int cif_pm_runtime_set_active(struct device *dev);
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_set_suspended(struct device *dev)
{
  #line 262 
  return __pm_runtime_set_status(dev,2U);
}

#line 269 
#line 1135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_pm_runtime_disable(struct device *dev);
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_use_autosuspend(struct device *dev)
{
  #line 272 
  __pm_runtime_use_autosuspend(dev,(_Bool)1);
  #line 273 
  return;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_dont_use_autosuspend(struct device *dev)
{
  #line 277 
  __pm_runtime_use_autosuspend(dev,(_Bool)0);
  #line 278 
  return;
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 213 
int ptp_clock_index(struct ptp_clock *);
#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
static struct gem_statistic gem_statistics[43U] = {{.stat_string = {(char)'t', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .offset = 256}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 264}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 268}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 272}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 276}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 280}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 284}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 288}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 292}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 296}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 300}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'g', (char)'r', (char)'e', (char)'a', (char)'t', (char)'e', (char)'r', (char)'_', (char)'t', (char)'h', (char)'a', (char)'n', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 304}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, .offset = 308, .stat_bits = 576U}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 312, .stat_bits = 1088U}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'p', (char)'l', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 316, .stat_bits = 1088U}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'x', (char)'c', (char)'e', (char)'s', (char)'s', (char)'i', (char)'v', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .offset = 320, .stat_bits = 1216U}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .offset = 324, .stat_bits = 1088U}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'e', (char)'d', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 328}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'s', (char)'e', (char)'n', (char)'s', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 332, .stat_bits = 1088U}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .offset = 336}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 344}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 348}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 352}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 356}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 360}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 364}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 368}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 372}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 376}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 380}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'g', (char)'r', (char)'e', (char)'a', (char)'t', (char)'e', (char)'r', (char)'_', (char)'t', (char)'h', (char)'a', (char)'n', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 384}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'d', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 388, .stat_bits = 3U}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .offset = 392, .stat_bits = 3U}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'s'}, .offset = 396, .stat_bits = 3U}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'_', (char)'s', (char)'e', (char)'q', (char)'u', (char)'e', (char)'n', (char)'c', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 400, .stat_bits = 9U}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'f', (char)'i', (char)'e', (char)'l', (char)'d', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 404, .stat_bits = 1U}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'y', (char)'m', (char)'b', (char)'o', (char)'l', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 408, .stat_bits = 17U}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'m', (char)'e', (char)'n', (char)'t', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 412, .stat_bits = 5U}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'e', (char)'s', (char)'o', (char)'u', (char)'r', (char)'c', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 416, .stat_bits = 5U}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n', (char)'s'}, .offset = 420, .stat_bits = 33U}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'_', (char)'h', (char)'e', (char)'a', (char)'d', (char)'e', (char)'r', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 424, .stat_bits = 1U}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 428, .stat_bits = 1U}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'d', (char)'p', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .offset = 432, .stat_bits = 1U}};
#line 1052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
static struct gem_statistic queue_statistics[6U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}}};
#line 1248 
#line 1248 
void gem_ptp_init(struct net_device *dev);
#line 1249 
#line 1249 
void gem_ptp_remove(struct net_device *ndev);
#line 1250 
#line 1250 
int gem_ptp_txstamp(struct macb_queue *queue, struct sk_buff *skb, struct macb_dma_desc *desc);
#line 1251 
#line 1251 
void gem_ptp_rxstamp(struct macb *bp, struct sk_buff *skb, struct macb_dma_desc *desc);
#line 1252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
__inline static int gem_ptp_do_txstamp(struct macb_queue *queue, struct sk_buff *skb, struct macb_dma_desc *desc)
{
  #line 1254 
  if ((queue->bp)->tstamp_config.tx_type == 0) 
                                               #line 1255 
                                               return -524;
  #line 1257 
  return gem_ptp_txstamp(queue,skb,desc);
}

#line 1260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
__inline static void gem_ptp_do_rxstamp(struct macb *bp, struct sk_buff *skb, struct macb_dma_desc *desc)
{
  #line 1262 
  if (bp->tstamp_config.rx_filter == 0) 
                                        #line 1263 
                                        return;
  #line 1265 
  gem_ptp_rxstamp(bp,skb,desc);
  #line 1266 
  return;
}

#line 1267 
#line 1267 
int gem_get_hwtst(struct net_device *dev, struct ifreq *rq);
#line 1268 
#line 1268 
int gem_set_hwtst(struct net_device *dev, struct ifreq *ifr, int cmd);
#line 1281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
__inline static bool macb_is_gem(struct macb *bp)
{
  #line 1283 
  return (_Bool)((bp->caps & 2147483648U) != 0U);
}

#line 1286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb.h"
__inline static bool gem_has_ptp(struct macb *bp)
{
  #line 1288 
  return (_Bool)((bp->caps & 64U) != 0U);
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static unsigned int macb_dma_desc_get_size(struct macb *bp)
{
  #line 123 
  unsigned int desc_size;
  #line 125 
  switch ((int)bp->hw_dma_cap) {
    #line 126 
    case 1: 
            #line 126 
    ;
    #line 127 
    desc_size = 16U;
    #line 129 
    break;
    #line 130 
    case 2: 
            #line 130 
    ;
    #line 131 
    desc_size = 16U;
    #line 133 
    break;
    #line 134 
    case 3: 
            #line 134 
    ;
    #line 135 
    desc_size = 24U;
    #line 138 
    break;
    #line 139 
    default: 
             #line 139 
    ;
    #line 140 
    desc_size = 8U;
  }
  #line 142 
  return desc_size;
  #line 144 
  return 8U;
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static unsigned int macb_adj_dma_desc_idx(struct macb *bp, unsigned int desc_idx)
{
  #line 150 
  switch ((int)bp->hw_dma_cap) {
    #line 151 
    case 1: 
            #line 151 
    ;
    #line 152 
    case 2: 
            #line 152 
    ;
    #line 153 
    desc_idx <<= 1;
    #line 154 
    break;
    #line 155 
    case 3: 
            #line 155 
    ;
    #line 156 
    desc_idx *= 3U;
    #line 157 
    break;
    #line 158 
    default: 
             #line 158 
    ;
    #line 159 
    break;
  }
  #line 162 
  return desc_idx;
}

#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_dma_desc_64 *macb_64b_desc(struct macb *bp, struct macb_dma_desc *desc)
{
  #line 168 
  return (struct macb_dma_desc_64 *)((void *)desc + 8UL);
}

#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static unsigned int macb_tx_ring_wrap(struct macb *bp, unsigned int index)
{
  #line 176 
  return (bp->tx_ring_size + 4294967295U) & index;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_dma_desc *macb_tx_desc(struct macb_queue *queue, unsigned int index)
{
  #line 182 
  index = macb_tx_ring_wrap(queue->bp,index);
  #line 183 
  index = macb_adj_dma_desc_idx(queue->bp,index);
  #line 184 
  return queue->tx_ring + (unsigned long)index;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_tx_skb *macb_tx_skb(struct macb_queue *queue, unsigned int index)
{
  #line 190 
  ;
  #line 190 
  return queue->tx_skb + (unsigned long)macb_tx_ring_wrap(queue->bp,index);
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static dma_addr_t macb_tx_dma(struct macb_queue *queue, unsigned int index)
{
  #line 195 
  dma_addr_t offset;
  #line 197 
  offset = (unsigned long long)(macb_tx_ring_wrap(queue->bp,index) * macb_dma_desc_get_size(queue->bp));
  #line 200 
  return queue->tx_ring_dma + offset;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static unsigned int macb_rx_ring_wrap(struct macb *bp, unsigned int index)
{
  #line 205 
  return (bp->rx_ring_size + 4294967295U) & index;
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_dma_desc *macb_rx_desc(struct macb_queue *queue, unsigned int index)
{
  #line 210 
  index = macb_rx_ring_wrap(queue->bp,index);
  #line 211 
  index = macb_adj_dma_desc_idx(queue->bp,index);
  #line 212 
  return queue->rx_ring + (unsigned long)index;
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void *macb_rx_buffer(struct macb_queue *queue, unsigned int index)
{
  #line 217 
  ;
  #line 217 
  return queue->rx_buffers + (queue->bp)->rx_buffer_size * (unsigned long)macb_rx_ring_wrap(queue->bp,index);
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static u32 hw_readl_native(struct macb *bp, int offset)
{
  #line 224 
  return __readl(bp->regs + (unsigned long)offset);
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void hw_writel_native(struct macb *bp, int offset, u32 value)
{
  #line 229 
  __writel(value,bp->regs + (unsigned long)offset);
  #line 230 
  return;
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static u32 hw_readl(struct macb *bp, int offset)
{
  #line 234 
  return __readl(bp->regs + (unsigned long)offset);
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void hw_writel(struct macb *bp, int offset, u32 value)
{
  #line 239 
  __writel(value,bp->regs + (unsigned long)offset);
  #line 240 
  return;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static bool hw_is_native_io(void *addr)
{
  #line 248 
  u32 value = 2U;
  #line 250 
  __writel(value,addr);
  #line 251 
  value = __readl(addr);
  #line 254 
  __writel(0U,addr);
  #line 256 
  return (_Bool)(value == 2U);
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static bool hw_is_gem(void *addr, bool native_io)
{
  #line 261 
  u32 id;
  #line 263 
  if ((int)native_io != 0) 
                           #line 264 
                           id = __readl(addr + 252U); else 
                                                           #line 266 
                                                           id = __readl(addr + 252U);
  #line 268 
  return (_Bool)(((id >> 16) & 4094U) != 0U);
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_set_hwaddr(struct macb *bp)
{
  #line 273 
  u32 bottom;
  #line 274 
  u16 top;
  #line 276 
  bottom = *((u32 *)(bp->dev)->dev_addr);
  {
    #line 277 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 277 
                                   (*(bp->macb_reg_writel))(bp,136,bottom); else 
                                                                    #line 277 
                                                                    (*(bp->macb_reg_writel))(bp,152,bottom);
  }
  #line 278 
  top = *((u16 *)((bp->dev)->dev_addr + 4U));
  {
    #line 279 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 279 
                                   (*(bp->macb_reg_writel))(bp,140,(unsigned int)top); else 
                                                                    #line 279 
                                                                    (*(bp->macb_reg_writel))(bp,156,(unsigned int)top);
  }
  {
    #line 282 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 282 
                                   (*(bp->macb_reg_writel))(bp,144,0U); else 
                                                                    #line 282 
                                                                    (*(bp->macb_reg_writel))(bp,160,0U);
  }
  {
    #line 283 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 283 
                                   (*(bp->macb_reg_writel))(bp,148,0U); else 
                                                                    #line 283 
                                                                    (*(bp->macb_reg_writel))(bp,164,0U);
  }
  {
    #line 284 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 284 
                                   (*(bp->macb_reg_writel))(bp,152,0U); else 
                                                                    #line 284 
                                                                    (*(bp->macb_reg_writel))(bp,168,0U);
  }
  {
    #line 285 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 285 
                                   (*(bp->macb_reg_writel))(bp,156,0U); else 
                                                                    #line 285 
                                                                    (*(bp->macb_reg_writel))(bp,172,0U);
  }
  {
    #line 286 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 286 
                                   (*(bp->macb_reg_writel))(bp,160,0U); else 
                                                                    #line 286 
                                                                    (*(bp->macb_reg_writel))(bp,176,0U);
  }
  {
    #line 287 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 287 
                                   (*(bp->macb_reg_writel))(bp,164,0U); else 
                                                                    #line 287 
                                                                    (*(bp->macb_reg_writel))(bp,180,0U);
  }
  #line 289 
  return;
}

#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_get_hwaddr(struct macb *bp)
{
  #line 292 
  u32 bottom;
  #line 293 
  u16 top;
  #line 294 
  u8 addr[6U];
  #line 295 
  int i;
  #line 298 
  i = 0;
  #line 298 
  while (i <= 3) {
    {
      #line 299 
      u32 __v;
      #line 300 
      u32 __v_0;
      {
        #line 299 
        if ((int)macb_is_gem(bp) != 0) 
                                       #line 299 
                                       __v = (*(bp->macb_reg_readl))(bp,(i + 17) * 8); else 
                                                                    #line 299 
                                                                    __v = (*(bp->macb_reg_readl))(bp,(i + 19) * 8);
      }
      #line 299 
      bottom = __v;
      {
        #line 300 
        if ((int)macb_is_gem(bp) != 0) 
                                       #line 300 
                                       __v_0 = (*(bp->macb_reg_readl))(bp,i * 8 + 140); else 
                                                                    #line 300 
                                                                    __v_0 = (*(bp->macb_reg_readl))(bp,i * 8 + 156);
      }
      #line 300 
      top = (unsigned short)__v_0;
      #line 302 
      addr[0] = (unsigned char)bottom;
      #line 303 
      addr[1] = (unsigned char)(bottom >> 8);
      #line 304 
      addr[2] = (unsigned char)(bottom >> 16);
      #line 305 
      addr[3] = (unsigned char)(bottom >> 24);
      #line 306 
      addr[4] = (unsigned char)top;
      #line 307 
      addr[5] = (unsigned char)((int)top >> 8);
      #line 309 
      if ((int)is_valid_ether_addr((u8 *)(& addr)) != 0) {
        #line 310 
        memcpy((void *)(bp->dev)->dev_addr,(void *)(& addr),6UL);
        #line 311 
        return;
      }
    }
    #line 298 
    i ++;
  }
  #line 315 
  _dev_info(& (bp->pdev)->dev,(char *)"invalid hw address, using random\n");
  #line 316 
  eth_hw_addr_random(bp->dev);
  #line 317 
  return;
}

#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_mdio_wait_for_idle(struct macb *bp)
{
  #line 323 
  int tmp_3;
  #line 321 
  u32 val;
  {
    #line 323 
    u64 __timeout_us = 1000000ULL;
    #line 323 
    unsigned long __sleep_us = 1UL;
    #line 323 
    ;
    #line 323 
    ktime_t __timeout = ktime_add_us(ktime_get(),__timeout_us);
    #line 323 
    if (__sleep_us != 0UL) 
                           #line 323 
                           __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c",323,0);
    #line 323 
    while (1) {
      #line 323 
      val = (*(bp->macb_reg_readl))(bp,8);
      #line 323 
      if ((val & 4U) != 0U) 
                            #line 323 
                            break;
      #line 323 
      if (__timeout_us != 0ULL) {
        #line 323 
        ;
        #line 323 
        if (ktime_compare(ktime_get(),__timeout) > 0) {
          #line 323 
          val = (*(bp->macb_reg_readl))(bp,8);
          #line 323 
          break;
        }
      }
      #line 323 
      if (__sleep_us != 0UL) 
                             #line 323 
                             usleep_range((__sleep_us >> 2) + 1UL,__sleep_us);
    }
    #line 323 
    if ((val & 4U) != 0U) 
                          #line 323 
                          tmp_3 = 0; else 
                                          #line 323 
                                          tmp_3 = -110;
    }
  #line 323 
  return tmp_3;
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_mdio_read(struct mii_bus *bus, int mii_id, int regnum)
{
  #line 330 
  int status;
  #line 329 
  struct macb *bp = (struct macb *)bus->priv;
  #line 332 
  status = pm_runtime_get_sync(& (bp->pdev)->dev);
  #line 333 
  if (status < 0) 
                  #line 334 
                  goto mdio_pm_exit;
  #line 336 
  status = macb_mdio_wait_for_idle(bp);
  #line 337 
  if (status < 0) 
                  #line 338 
                  goto mdio_read_exit;
  #line 340 
  (*(bp->macb_reg_writel))(bp,52,(unsigned int)(((((mii_id << 23) & 260046848) | 1610612736) | ((regnum << 18) & 8126464)) | 131072));
  #line 346 
  status = macb_mdio_wait_for_idle(bp);
  #line 347 
  if (status < 0) 
                  #line 348 
                  goto mdio_read_exit;
  #line 350 
  status = (int)(*(bp->macb_reg_readl))(bp,52) & 65535;
  #line 352 
  mdio_read_exit: 
                  #line 352 
  ;
  #line 353 
  pm_runtime_mark_last_busy(& (bp->pdev)->dev);
  #line 354 
  pm_runtime_put_autosuspend(& (bp->pdev)->dev);
  #line 355 
  mdio_pm_exit: 
                #line 355 
  ;
  #line 356 
  return status;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_mdio_write(struct mii_bus *bus, int mii_id, int regnum, u16 value)
{
  #line 363 
  int status;
  #line 362 
  struct macb *bp = (struct macb *)bus->priv;
  #line 365 
  status = pm_runtime_get_sync(& (bp->pdev)->dev);
  #line 366 
  if (status < 0) 
                  #line 367 
                  goto mdio_pm_exit;
  #line 369 
  status = macb_mdio_wait_for_idle(bp);
  #line 370 
  if (status < 0) 
                  #line 371 
                  goto mdio_write_exit;
  #line 373 
  (*(bp->macb_reg_writel))(bp,52,(unsigned int)((((((mii_id << 23) & 260046848) | 1342177280) | ((regnum << 18) & 8126464)) | 131072) | (int)value));
  #line 380 
  status = macb_mdio_wait_for_idle(bp);
  #line 381 
  if (status < 0) 
                  #line 382 
                  goto mdio_write_exit;
  #line 384 
  mdio_write_exit: 
                   #line 384 
  ;
  #line 385 
  pm_runtime_mark_last_busy(& (bp->pdev)->dev);
  #line 386 
  pm_runtime_put_autosuspend(& (bp->pdev)->dev);
  #line 387 
  mdio_pm_exit: 
                #line 387 
  ;
  #line 388 
  return status;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_init_buffers(struct macb *bp)
{
  #line 393 
  struct macb_queue *queue;
  #line 394 
  unsigned int q;
  #line 396 
  q = 0U;
  #line 396 
  queue = (struct macb_queue *)(& bp->queues);
  #line 396 
  while (bp->num_queues > q) {
    #line 397 
    (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->RBQP,(unsigned int)queue->rx_ring_dma);
    #line 399 
    if (((int)bp->hw_dma_cap & 1) != 0) 
                                        #line 400 
                                        (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->RBQPH,(unsigned int)(queue->rx_ring_dma >> 32));
    #line 403 
    (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->TBQP,(unsigned int)queue->tx_ring_dma);
    #line 405 
    if (((int)bp->hw_dma_cap & 1) != 0) 
                                        #line 406 
                                        (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->TBQPH,(unsigned int)(queue->tx_ring_dma >> 32));
    #line 396 
    q ++;
    #line 396 
    queue ++;
  }
  #line 408 
  return;
}

#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_set_tx_clk(struct clk *clk, int speed, struct net_device *dev)
{
  #line 446 
  long __x;
  #line 446 
  long tmp;
  #line 420 
  long ferr;
  #line 420 
  long rate;
  #line 420 
  long rate_rounded;
  #line 422 
  if (clk == (struct clk *)0) 
                              #line 423 
                              return;
  #line 425 
  switch (speed) {
    #line 426 
    case 10: 
             #line 426 
    ;
    #line 427 
    rate = 2500000L;
    #line 428 
    break;
    #line 429 
    case 100: 
              #line 429 
    ;
    #line 430 
    rate = 25000000L;
    #line 431 
    break;
    #line 432 
    case 1000: 
               #line 432 
    ;
    #line 433 
    rate = 125000000L;
    #line 434 
    break;
    #line 435 
    default: 
             #line 435 
    ;
    #line 436 
    return;
  }
  #line 439 
  rate_rounded = clk_round_rate(clk,(unsigned long)rate);
  #line 440 
  if (rate_rounded < 0L) 
                         #line 441 
                         return;
  #line 446 
  __x = rate_rounded - rate;
  #line 446 
  if (__x < (long)0) 
                     #line 446 
                     tmp = - __x; else 
                                       #line 446 
                                       tmp = __x;
  #line 446 
  ferr = tmp;
  #line 447 
  ferr = ((rate / 100000L + ferr) + -1L) / (rate / 100000L);
  #line 448 
  if (ferr > 5L) 
                 #line 449 
                 netdev_warn(dev,(char *)"unable to generate target frequency: %ld Hz\n",rate);
  #line 452 
  if (clk_set_rate(clk,(unsigned long)rate_rounded) != 0) 
                                                          #line 453 
                                                          netdev_err(dev,(char *)"adjusting tx_clk failed.\n");
  #line 454 
  return;
}

#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_validate(struct phylink_config *config, unsigned long *supported, struct phylink_link_state *state)
{
  #line 460 
  void *__mptr;
  #line 460 
  __mptr = (void *)config->dev;
  #line 460 
  struct net_device *ndev = ((struct net_device *)(__mptr + 18446744073709550144U));
  #line 461 
  unsigned long mask[2U] = {0UL};
  #line 462 
  struct macb *bp = netdev_priv(ndev);
  #line 465 
  if ((((state->interface != (unsigned int)PHY_INTERFACE_MODE_NA && state->interface != (unsigned int)PHY_INTERFACE_MODE_MII) && state->interface != (unsigned int)PHY_INTERFACE_MODE_RMII) && state->interface != (unsigned int)PHY_INTERFACE_MODE_GMII) && state->interface != (unsigned int)PHY_INTERFACE_MODE_SGMII) {
    #line 470 
    if (! phy_interface_mode_is_rgmii(state->interface)) {
      #line 471 
      cif_bitmap_zero(supported,74U);
      #line 472 
      return;
    }
  }
  #line 475 
  if (! macb_is_gem(bp)) 
    #line 475 
    if (state->interface == (unsigned int)PHY_INTERFACE_MODE_GMII) 
                                                                   #line 475 
                                                                   goto _LOR;
    else {
      #line 476 
      if ((int)phy_interface_mode_is_rgmii(state->interface) != 0) {
        #line 475 
        _LOR: {
                #line 478 
                cif_bitmap_zero(supported,74U);
                #line 479 
                return;
              }
      }
    }
  #line 482 
  phylink_set_port_modes((unsigned long *)(& mask));
  #line 483 
  __set_bit(6L,(unsigned long *)(& mask));
  #line 484 
  __set_bit(14L,(unsigned long *)(& mask));
  #line 486 
  __set_bit(0L,(unsigned long *)(& mask));
  #line 487 
  __set_bit(1L,(unsigned long *)(& mask));
  #line 488 
  __set_bit(2L,(unsigned long *)(& mask));
  #line 489 
  __set_bit(3L,(unsigned long *)(& mask));
  #line 491 
  if ((bp->caps & 536870912U) != 0U) 
    #line 491 
    if ((state->interface == (unsigned int)PHY_INTERFACE_MODE_NA || state->interface == (unsigned int)PHY_INTERFACE_MODE_GMII) || state->interface == (unsigned int)PHY_INTERFACE_MODE_SGMII) 
      #line 491 
      goto _LOR_0;
    else {
      #line 494 
      if ((int)phy_interface_mode_is_rgmii(state->interface) != 0) {
        #line 491 
        _LOR_0: {
                  #line 496 
                  __set_bit(5L,(unsigned long *)(& mask));
                  #line 497 
                  __set_bit(41L,(unsigned long *)(& mask));
                  #line 499 
                  if ((bp->caps & 8U) == 0U) 
                                             #line 500 
                                             __set_bit(4L,(unsigned long *)(& mask));
                }
      }
    }
  #line 503 
  bitmap_and(supported,supported,(unsigned long *)(& mask),74U);
  #line 504 
  bitmap_and((unsigned long *)(& state->advertising),(unsigned long *)(& state->advertising),(unsigned long *)(& mask),74U);
  #line 505 
  return;
}

#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_mac_pcs_get_state(struct phylink_config *config, struct phylink_link_state *state)
{
  #line 511 
  state->link = (unsigned int)0U;
  #line 512 
  return;
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_mac_an_restart(struct phylink_config *config)
{
  #line 516 
  return;
}

#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_mac_config(struct phylink_config *config, unsigned int mode, struct phylink_link_state *state)
{
  #line 522 
  void *__mptr;
  #line 529 
  u32 __v;
  #line 524 
  unsigned long flags;
  #line 525 
  u32 old_ctrl;
  #line 525 
  u32 ctrl;
  #line 522 
  __mptr = (void *)config->dev;
  #line 522 
  struct net_device *ndev = ((struct net_device *)(__mptr + 18446744073709550144U));
  #line 523 
  struct macb *bp = netdev_priv(ndev);
  #line 527 
  cif___ldv_spin_lock_lock_of_macb(& bp->lock);
  {
    #line 529 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 529 
                                   __v = (*(bp->macb_reg_readl))(bp,4); else 
                                                                    #line 529 
                                                                    __v = (*(bp->macb_reg_readl))(bp,4);
  }
  #line 529 
  ctrl = __v;
  #line 529 
  old_ctrl = ctrl;
  #line 532 
  ctrl &= 4160738300U;
  #line 535 
  if (state->speed == 1000) 
                            #line 536 
                            ctrl |= 1024U;
  else 
    #line 537 
    if (state->speed == 100) 
                             #line 538 
                             ctrl |= 1U;
  #line 540 
  if (state->duplex != 0) 
                          #line 541 
                          ctrl |= 2U;
  #line 544 
  if ((state->pause & 8) != 0) 
                               #line 545 
                               ctrl |= 8192U;
  #line 547 
  if (state->interface == (unsigned int)PHY_INTERFACE_MODE_SGMII) 
                                                                  #line 548 
                                                                  ctrl |= 134219776U;
  #line 551 
  if (old_ctrl != ctrl) {
    #line 552 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 552 
                                   (*(bp->macb_reg_writel))(bp,4,ctrl); else 
                                                                    #line 552 
                                                                    (*(bp->macb_reg_writel))(bp,4,ctrl);
  }
  #line 554 
  bp->speed = state->speed;
  #line 556 
  cif_spin_unlock_irqrestore_lock_of_macb(& bp->lock,flags);
  #line 557 
  return;
}

#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_mac_link_down(struct phylink_config *config, unsigned int mode, phy_interface_t interface)
{
  #line 562 
  void *__mptr;
  #line 564 
  struct macb_queue *queue;
  #line 565 
  unsigned int q;
  #line 566 
  u32 ctrl;
  #line 562 
  __mptr = (void *)config->dev;
  #line 562 
  struct net_device *ndev = ((struct net_device *)(__mptr + 18446744073709550144U));
  #line 563 
  struct macb *bp = netdev_priv(ndev);
  #line 568 
  q = 0U;
  #line 568 
  queue = (struct macb_queue *)(& bp->queues);
  #line 568 
  while (bp->num_queues > q) {
    #line 569 
    (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->IDR,bp->rx_intr_mask | 2296U);
    #line 568 
    q ++;
    #line 568 
    queue ++;
  }
  #line 573 
  ctrl = (*(bp->macb_reg_readl))(bp,0) & 4294967283U;
  #line 574 
  (*(bp->macb_reg_writel))(bp,0,ctrl);
  #line 576 
  netif_tx_stop_all_queues(ndev);
  #line 577 
  return;
}

#line 579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_mac_link_up(struct phylink_config *config, unsigned int mode, phy_interface_t interface, struct phy_device *phy)
{
  #line 582 
  void *__mptr;
  #line 584 
  struct macb_queue *queue;
  #line 585 
  unsigned int q;
  #line 582 
  __mptr = (void *)config->dev;
  #line 582 
  struct net_device *ndev = ((struct net_device *)(__mptr + 18446744073709550144U));
  #line 583 
  struct macb *bp = netdev_priv(ndev);
  #line 587 
  macb_set_tx_clk(bp->tx_clk,bp->speed,ndev);
  #line 592 
  (*(bp->macbgem_ops.mog_init_rings))(bp);
  #line 593 
  macb_init_buffers(bp);
  #line 595 
  q = 0U;
  #line 595 
  queue = (struct macb_queue *)(& bp->queues);
  #line 595 
  while (bp->num_queues > q) {
    #line 596 
    (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->IER,bp->rx_intr_mask | 2296U);
    #line 595 
    q ++;
    #line 595 
    queue ++;
  }
  #line 600 
  ;
  #line 600 
  (*(bp->macb_reg_writel))(bp,0,(*(bp->macb_reg_readl))(bp,0) | 12U);
  #line 602 
  netif_tx_wake_all_queues(ndev);
  #line 603 
  return;
}

#line 605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct phylink_mac_ops macb_phylink_ops = {.validate = & macb_validate, .mac_pcs_get_state = & macb_mac_pcs_get_state, .mac_config = & macb_mac_config, .mac_an_restart = & macb_mac_an_restart, .mac_link_down = & macb_mac_link_down, .mac_link_up = & macb_mac_link_up};
#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static bool macb_phy_handle_exists(struct device_node *dn)
{
  #line 616 
  dn = of_parse_phandle(dn,(char *)"phy-handle",0);
  #line 617 
  of_node_put(dn);
  #line 618 
  return (_Bool)(dn != (struct device_node *)0);
}

#line 621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_phylink_connect(struct macb *bp)
{
  #line 625 
  struct phy_device *phydev;
  #line 626 
  int ret;
  #line 623 
  struct device_node *dn = (bp->pdev)->dev.of_node;
  #line 624 
  struct net_device *dev = bp->dev;
  #line 628 
  if (dn != (struct device_node *)0) 
                                     #line 629 
                                     ret = phylink_of_phy_connect(bp->phylink,dn,0U);
  #line 631 
  if (dn == (struct device_node *)0) 
                                     #line 631 
                                     goto _LOR;
  else 
    #line 631 
    if (ret != 0) {
      #line 631 
      if (! macb_phy_handle_exists(dn)) {
        #line 631 
        _LOR: {
                #line 632 
                phydev = phy_find_first(bp->mii_bus);
                #line 633 
                if (phydev == (struct phy_device *)0) {
                  #line 634 
                  netdev_err(dev,(char *)"no PHY found\n");
                  #line 635 
                  return -6;
                }
                #line 639 
                ret = phylink_connect_phy(bp->phylink,phydev);
              }
      }
    }
  #line 642 
  if (ret != 0) {
    #line 643 
    netdev_err(dev,(char *)"Could not attach PHY (%d)\n",ret);
    #line 644 
    return ret;
  }
  #line 647 
  phylink_start(bp->phylink);
  #line 649 
  return 0;
}

#line 653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_mii_probe(struct net_device *dev)
{
  #line 655 
  struct macb *bp = netdev_priv(dev);
  #line 657 
  bp->phylink_config.dev = & dev->dev;
  #line 658 
  bp->phylink_config.type = PHYLINK_NETDEV;
  #line 660 
  bp->phylink = phylink_create(& bp->phylink_config,(bp->pdev)->dev.fwnode,bp->phy_interface,& macb_phylink_ops);
  #line 662 
  if ((int)IS_ERR((void *)bp->phylink) != 0) {
    #line 663 
    ;
    #line 663 
    netdev_err(dev,(char *)"Could not create a phylink instance (%ld)\n",PTR_ERR((void *)bp->phylink));
    #line 665 
    return (int)PTR_ERR((void *)bp->phylink);
  }
  #line 668 
  return 0;
}

#line 671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_mdiobus_register(struct macb *bp)
{
  #line 673 
  struct device_node *child;
  #line 673 
  struct device_node *np = (bp->pdev)->dev.of_node;
  #line 680 
  child = of_get_next_available_child(np,(struct device_node *)0);
  #line 680 
  while (child != (struct device_node *)0) {
    #line 681 
    if ((int)of_mdiobus_child_is_phy(child) != 0) {
      #line 685 
      of_node_put(child);
      #line 687 
      return of_mdiobus_register(bp->mii_bus,np);
    }
    #line 680 
    child = of_get_next_available_child(np,child);
  }
  #line 690 
  return __mdiobus_register(bp->mii_bus,& __this_module);
}

#line 693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_mii_init(struct macb *bp)
{
  #line 695 
  int err = -6;
  #line 698 
  (*(bp->macb_reg_writel))(bp,0,16U);
  #line 700 
  bp->mii_bus = mdiobus_alloc();
  #line 701 
  if (bp->mii_bus == (struct mii_bus *)0) {
    #line 702 
    err = -12;
    #line 703 
    goto err_out;
  }
  #line 706 
  (bp->mii_bus)->name = (char *)"MACB_mii_bus";
  #line 707 
  (bp->mii_bus)->read = & macb_mdio_read;
  #line 708 
  (bp->mii_bus)->write = & macb_mdio_write;
  #line 709 
  snprintf((char *)(& (bp->mii_bus)->id),61UL,(char *)"%s-%x",(bp->pdev)->name,(bp->pdev)->id);
  #line 711 
  (bp->mii_bus)->priv = (void *)bp;
  #line 712 
  (bp->mii_bus)->parent = & (bp->pdev)->dev;
  #line 714 
  dev_set_drvdata(& (bp->dev)->dev,(void *)bp->mii_bus);
  #line 716 
  err = macb_mdiobus_register(bp);
  #line 717 
  if (err != 0) 
                #line 718 
                goto err_out_free_mdiobus;
  #line 720 
  err = macb_mii_probe(bp->dev);
  #line 721 
  if (err != 0) 
                #line 722 
                goto err_out_unregister_bus;
  #line 724 
  return 0;
  #line 726 
  err_out_unregister_bus: 
                          #line 726 
  ;
  #line 727 
  mdiobus_unregister(bp->mii_bus);
  #line 728 
  err_out_free_mdiobus: 
                        #line 728 
  ;
  #line 729 
  mdiobus_free(bp->mii_bus);
  #line 730 
  err_out: 
           #line 730 
  ;
  #line 731 
  return err;
}

#line 734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_update_stats(struct macb *bp)
{
  #line 736 
  u32 *p = & bp->hw_stats.macb.rx_pause_frames;
  #line 737 
  u32 *end = & bp->hw_stats.macb.tx_pause_frames + 1U;
  #line 738 
  int offset = 60;
  {
    #line 740 
    int __ret_warn_on = end - p != 84L;
    #line 740 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 741 
      ldv_inline_asm();
      #line 742 
      ldv_inline_asm();
    }
    #line 740 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 742 
  while (p < end) {
    #line 743 
    *p += (*(bp->macb_reg_readl))(bp,offset);
    #line 742 
    p ++;
    #line 742 
    offset += 4;
  }
  #line 744 
  return;
}

#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_halt_tx(struct macb *bp)
{
  #line 748 
  unsigned long halt_time;
  #line 748 
  unsigned long timeout;
  #line 749 
  u32 status;
  #line 751 
  ;
  #line 751 
  (*(bp->macb_reg_writel))(bp,0,(*(bp->macb_reg_readl))(bp,0) | 1024U);
  #line 753 
  timeout = usecs_to_jiffies(1230U) + jiffies;
  #line 754 
  while (1) {
    #line 755 
    halt_time = jiffies;
    #line 756 
    status = (*(bp->macb_reg_readl))(bp,20);
    #line 757 
    if ((status & 8U) == 0U) 
                             #line 758 
                             return 0;
    #line 760 
    __const_udelay(1073750UL);
    {
      #line 761 
      unsigned long __dummy;
      #line 761 
      unsigned long __dummy2;
      }
    #line 762 
    if (1 != 0) {
      {
        #line 761 
        unsigned long __dummy_0;
        #line 761 
        unsigned long __dummy2_0;
        }
      #line 761 
      if (1 != 0) {
        #line 761 
        if (! ((long)(halt_time - timeout) < 0L)) 
                                                  #line 754 
                                                  break;
      }
      else 
           #line 754 
           break;
    }
    else 
         #line 754 
         break;
  }
  #line 763 
  return -110;
}

#line 766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_tx_unmap(struct macb *bp, struct macb_tx_skb *tx_skb)
{
  #line 768 
  if (tx_skb->mapping != 0ULL) {
    #line 769 
    if ((int)tx_skb->mapped_as_page != 0) 
                                          #line 770 
                                          dma_unmap_page_attrs(& (bp->pdev)->dev,tx_skb->mapping,tx_skb->size,(enum dma_data_direction)DMA_TO_DEVICE,0UL); else 
                                                                    #line 773 
                                                                    dma_unmap_single_attrs(& (bp->pdev)->dev,tx_skb->mapping,tx_skb->size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 775 
    tx_skb->mapping = 0ULL;
  }
  #line 778 
  if (tx_skb->skb != (struct sk_buff *)0) {
    #line 779 
    dev_kfree_skb_any(tx_skb->skb);
    #line 780 
    tx_skb->skb = (struct sk_buff *)0;
  }
  #line 782 
  return;
}

#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_set_addr(struct macb *bp, struct macb_dma_desc *desc, dma_addr_t addr)
{
  #line 787 
  struct macb_dma_desc_64 *desc_64;
  #line 789 
  if (((int)bp->hw_dma_cap & 1) != 0) {
    #line 790 
    desc_64 = macb_64b_desc(bp,desc);
    #line 791 
    desc_64->addrh = (unsigned int)(addr >> 32);
    #line 792 
    ldv_inline_asm();
  }
  #line 799 
  desc->addr = (unsigned int)addr;
  #line 800 
  return;
}

#line 802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static dma_addr_t macb_get_addr(struct macb *bp, struct macb_dma_desc *desc)
{
  #line 806 
  struct macb_dma_desc_64 *desc_64;
  #line 804 
  dma_addr_t addr = 0ULL;
  #line 808 
  if (((int)bp->hw_dma_cap & 1) != 0) {
    #line 809 
    desc_64 = macb_64b_desc(bp,desc);
    #line 810 
    addr = (unsigned long long)desc_64->addrh << 32;
  }
  #line 813 
  addr = ((unsigned long long)desc->addr & 4294967292ULL) | addr;
  #line 814 
  return addr;
}

#line 817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_tx_error_task(struct work_struct *work)
{
  #line 819 
  void *__mptr;
  #line 822 
  struct macb_tx_skb *tx_skb;
  #line 823 
  struct macb_dma_desc *desc;
  #line 824 
  struct sk_buff *skb;
  #line 825 
  unsigned int tail;
  #line 826 
  unsigned long flags;
  #line 819 
  __mptr = (void *)work;
  #line 819 
  struct macb_queue *queue = ((struct macb_queue *)(__mptr + 18446744073709551536U));
  #line 821 
  struct macb *bp = queue->bp;
  #line 838 
  cif___ldv_spin_lock_lock_of_macb(& bp->lock);
  #line 841 
  netif_tx_stop_all_queues(bp->dev);
  #line 847 
  if (macb_halt_tx(bp) != 0) 
                             #line 849 
                             netdev_err(bp->dev,(char *)"BUG: halt tx timed out\n");
  #line 854 
  tail = queue->tx_tail;
  #line 854 
  while (queue->tx_head != tail) {
    {
      #line 855 
      u32 ctrl;
      #line 857 
      desc = macb_tx_desc(queue,tail);
      #line 858 
      ctrl = desc->ctrl;
      #line 859 
      tx_skb = macb_tx_skb(queue,tail);
      #line 860 
      skb = tx_skb->skb;
      #line 862 
      if ((ctrl & 2147483648U) != 0U) {
        #line 864 
        while (skb == (struct sk_buff *)0) {
          #line 865 
          macb_tx_unmap(bp,tx_skb);
          #line 866 
          tail ++;
          #line 867 
          tx_skb = macb_tx_skb(queue,tail);
          #line 868 
          skb = tx_skb->skb;
        }
        #line 874 
        if ((ctrl & 134217728U) == 0U) {
          #line 878 
          ((bp->dev)->stats.tx_packets) ++;
          #line 879 
          (queue->stats.tx_packets) ++;
          #line 880 
          (bp->dev)->stats.tx_bytes += (unsigned long)skb->len;
          #line 881 
          queue->stats.tx_bytes += (unsigned long)skb->len;
        }
      }
      else {
        #line 888 
        if ((ctrl & 134217728U) != 0U) 
                                       #line 889 
                                       netdev_err(bp->dev,(char *)"BUG: TX buffers exhausted mid-frame\n");
        #line 892 
        desc->ctrl = ctrl | 2147483648U;
      }
      #line 895 
      macb_tx_unmap(bp,tx_skb);
    }
    #line 854 
    tail ++;
  }
  #line 899 
  desc = macb_tx_desc(queue,0U);
  #line 900 
  macb_set_addr(bp,desc,0ULL);
  #line 901 
  desc->ctrl = 2147483648U;
  #line 902 
  ldv_inline_asm();
  #line 907 
  (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->TBQP,(unsigned int)queue->tx_ring_dma);
  #line 909 
  if (((int)bp->hw_dma_cap & 1) != 0) 
                                      #line 910 
                                      (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->TBQPH,(unsigned int)(queue->tx_ring_dma >> 32));
  #line 913 
  queue->tx_head = 0U;
  #line 914 
  queue->tx_tail = 0U;
  #line 917 
  ;
  #line 917 
  (*(bp->macb_reg_writel))(bp,20,(*(bp->macb_reg_readl))(bp,20));
  #line 918 
  (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->IER,248U);
  #line 921 
  netif_tx_start_all_queues(bp->dev);
  #line 922 
  ;
  #line 922 
  (*(bp->macb_reg_writel))(bp,0,(*(bp->macb_reg_readl))(bp,0) | 512U);
  #line 924 
  cif_spin_unlock_irqrestore_lock_of_macb(& bp->lock,flags);
  #line 925 
  return;
}

#line 927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_tx_interrupt(struct macb_queue *queue)
{
  #line 929 
  unsigned int tail;
  #line 930 
  unsigned int head;
  #line 931 
  u32 status;
  #line 932 
  struct macb *bp = queue->bp;
  #line 933 
  u16 queue_index = (unsigned short)((queue - (struct macb_queue *)(& bp->queues)) / 2784L);
  #line 935 
  status = (*(bp->macb_reg_readl))(bp,20);
  #line 936 
  (*(bp->macb_reg_writel))(bp,20,status);
  #line 938 
  if ((bp->caps & 1U) != 0U) 
                             #line 939 
                             (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->ISR,128U);
  #line 944 
  head = queue->tx_head;
  #line 945 
  tail = queue->tx_tail;
  #line 945 
  while (tail != head) {
    {
      #line 946 
      struct macb_tx_skb *tx_skb;
      #line 947 
      struct sk_buff *skb;
      #line 948 
      struct macb_dma_desc *desc;
      #line 949 
      u32 ctrl;
      #line 951 
      desc = macb_tx_desc(queue,tail);
      #line 952 
      ldv_inline_asm();
      #line 956 
      ctrl = desc->ctrl;
      #line 961 
      if ((ctrl & 2147483648U) == 0U) 
                                      #line 962 
                                      break;
      #line 965 
      while (1) {
        #line 966 
        tx_skb = macb_tx_skb(queue,tail);
        #line 967 
        skb = tx_skb->skb;
        #line 970 
        if (skb != (struct sk_buff *)0) {
          #line 971 
          ;
          #line 971 
          if ((long)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 1) != 0) != 0L) {
            #line 972 
            if (gem_ptp_do_txstamp(queue,skb,desc) == 0) 
                                                         #line 977 
                                                         tx_skb->skb = (struct sk_buff *)0;
          }
          #line 982 
          ((bp->dev)->stats.tx_packets) ++;
          #line 983 
          (queue->stats.tx_packets) ++;
          #line 984 
          (bp->dev)->stats.tx_bytes += (unsigned long)skb->len;
          #line 985 
          queue->stats.tx_bytes += (unsigned long)skb->len;
        }
        #line 989 
        macb_tx_unmap(bp,tx_skb);
        #line 995 
        if (skb != (struct sk_buff *)0) 
                                        #line 996 
                                        break;
        #line 965 
        tail ++;
      }
    }
    #line 945 
    tail ++;
  }
  #line 1000 
  queue->tx_tail = tail;
  #line 1001 
  if ((int)__netif_subqueue_stopped(bp->dev,(unsigned short)((int)queue_index)) != 0) 
    #line 1001 
    if (((queue->tx_head - queue->tx_tail) & (bp->tx_ring_size + 4294967295U)) <= (bp->tx_ring_size * 3U) / 4U) 
      #line 1004 
      netif_wake_subqueue(bp->dev,(unsigned short)((int)queue_index));
  #line 1005 
  return;
}

#line 1007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void gem_rx_refill(struct macb_queue *queue)
{
  #line 1009 
  unsigned int entry;
  #line 1010 
  struct sk_buff *skb;
  #line 1011 
  dma_addr_t paddr;
  #line 1013 
  struct macb_dma_desc *desc;
  #line 1012 
  struct macb *bp = queue->bp;
  #line 1015 
  while ((((queue->rx_tail - queue->rx_prepared_head) + 4294967295U) & (bp->rx_ring_size + 4294967295U)) != 0U) {
    #line 1017 
    entry = macb_rx_ring_wrap(bp,queue->rx_prepared_head);
    #line 1018 
    ldv_inline_asm();
    #line 1022 
    (queue->rx_prepared_head) ++;
    #line 1023 
    desc = macb_rx_desc(queue,entry);
    #line 1025 
    if (*(queue->rx_skbuff + (unsigned long)entry) == (struct sk_buff *)0) {
      #line 1027 
      skb = netdev_alloc_skb(bp->dev,(unsigned int)bp->rx_buffer_size);
      #line 1028 
      if ((long)(skb == (struct sk_buff *)0) != 0L) {
        #line 1029 
        netdev_err(bp->dev,(char *)"Unable to allocate sk_buff\n");
        #line 1031 
        break;
      }
      #line 1035 
      paddr = dma_map_single_attrs(& (bp->pdev)->dev,(void *)skb->data,bp->rx_buffer_size,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 1038 
      if (dma_mapping_error(& (bp->pdev)->dev,paddr) != 0) {
        #line 1039 
        consume_skb(skb);
        #line 1040 
        break;
      }
      #line 1043 
      *(queue->rx_skbuff + (unsigned long)entry) = skb;
      #line 1045 
      if (bp->rx_ring_size + 4294967295U == entry) 
                                                   #line 1046 
                                                   paddr |= 2ULL;
      #line 1047 
      desc->ctrl = 0U;
      #line 1048 
      ldv_inline_asm();
      #line 1052 
      macb_set_addr(bp,desc,paddr);
      #line 1055 
      skb_reserve(skb,0);
    }
    else {
      #line 1057 
      desc->ctrl = 0U;
      #line 1058 
      ldv_inline_asm();
      #line 1059 
      desc->addr &= 4294967294U;
    }
  }
  #line 1062 
  ldv_inline_asm();
  #line 1068 
  return;
}

#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void discard_partial_frame(struct macb_queue *queue, unsigned int begin, unsigned int end)
{
  #line 1074 
  unsigned int frag;
  #line 1076 
  frag = begin;
  #line 1076 
  while (frag != end) {
    {
      #line 1077 
      struct macb_dma_desc *desc = macb_rx_desc(queue,frag);
      #line 1079 
      desc->addr &= 4294967294U;
    }
    #line 1076 
    frag ++;
  }
  #line 1081 
  ldv_inline_asm();
  #line 1082 
  return;
}

#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int gem_rx(struct macb_queue *queue, struct napi_struct *napi, int budget)
{
  #line 1095 
  unsigned int len;
  #line 1096 
  unsigned int entry;
  #line 1097 
  struct sk_buff *skb;
  #line 1098 
  struct macb_dma_desc *desc;
  #line 1094 
  struct macb *bp = queue->bp;
  #line 1099 
  int count = 0;
  #line 1101 
  while (count < budget) {
    #line 1102 
    u32 ctrl;
    #line 1103 
    dma_addr_t addr;
    #line 1104 
    bool rxused;
    #line 1106 
    entry = macb_rx_ring_wrap(bp,queue->rx_tail);
    #line 1107 
    desc = macb_rx_desc(queue,entry);
    #line 1108 
    ldv_inline_asm();
    #line 1112 
    rxused = (_Bool)(((int)desc->addr & 1) != 0);
    #line 1113 
    addr = macb_get_addr(bp,desc);
    #line 1115 
    if (! rxused) 
                  #line 1116 
                  break;
    #line 1117 
    ldv_inline_asm();
    #line 1121 
    ctrl = desc->ctrl;
    #line 1123 
    (queue->rx_tail) ++;
    #line 1124 
    count ++;
    #line 1126 
    if ((ctrl & 16384U) == 0U || (ctrl & 32768U) == 0U) {
      #line 1127 
      netdev_err(bp->dev,(char *)"not whole frame pointed by descriptor\n");
      #line 1129 
      ((bp->dev)->stats.rx_dropped) ++;
      #line 1130 
      (queue->stats.rx_dropped) ++;
      #line 1131 
      break;
    }
    #line 1133 
    skb = *(queue->rx_skbuff + (unsigned long)entry);
    #line 1134 
    if ((long)(skb == (struct sk_buff *)0) != 0L) {
      #line 1135 
      netdev_err(bp->dev,(char *)"inconsistent Rx descriptor chain\n");
      #line 1137 
      ((bp->dev)->stats.rx_dropped) ++;
      #line 1138 
      (queue->stats.rx_dropped) ++;
      #line 1139 
      break;
    }
    #line 1142 
    *(queue->rx_skbuff + (unsigned long)entry) = (struct sk_buff *)0;
    #line 1143 
    len = bp->rx_frm_len_mask & ctrl;
    #line 1147 
    skb_put(skb,len);
    #line 1148 
    dma_unmap_single_attrs(& (bp->pdev)->dev,addr,bp->rx_buffer_size,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 1151 
    skb->protocol = eth_type_trans(skb,bp->dev);
    #line 1152 
    skb_checksum_none_assert(skb);
    #line 1153 
    if ((((bp->dev)->features & 549755813888ULL) != 0ULL && ((bp->dev)->flags & 256U) == 0U) && (ctrl & 8388608U) != 0U) 
      #line 1156 
      skb->ip_summed = (unsigned char)1U;
    #line 1158 
    ((bp->dev)->stats.rx_packets) ++;
    #line 1159 
    (queue->stats.__anonCompField_queue_stats_200.rx_packets) ++;
    #line 1160 
    (bp->dev)->stats.rx_bytes += (unsigned long)skb->len;
    #line 1161 
    queue->stats.rx_bytes += (unsigned long)skb->len;
    #line 1163 
    gem_ptp_do_rxstamp(bp,skb,desc);
    #line 1174 
    napi_gro_receive(napi,skb);
  }
  #line 1177 
  gem_rx_refill(queue);
  #line 1179 
  return count;
}

#line 1182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_rx_frame(struct macb_queue *queue, struct napi_struct *napi, unsigned int first_frag, unsigned int last_frag)
{
  #line 1185 
  unsigned int len;
  #line 1186 
  unsigned int frag;
  #line 1187 
  unsigned int offset;
  #line 1188 
  struct sk_buff *skb;
  #line 1189 
  struct macb_dma_desc *desc;
  #line 1190 
  struct macb *bp = queue->bp;
  #line 1192 
  desc = macb_rx_desc(queue,last_frag);
  #line 1193 
  len = desc->ctrl & bp->rx_frm_len_mask;
  #line 1207 
  skb = netdev_alloc_skb(bp->dev,len);
  #line 1208 
  if (skb == (struct sk_buff *)0) {
    #line 1209 
    ((bp->dev)->stats.rx_dropped) ++;
    #line 1210 
    frag = first_frag;
    #line 1210 
    while (1) {
      #line 1211 
      desc = macb_rx_desc(queue,frag);
      #line 1212 
      desc->addr &= 4294967294U;
      #line 1213 
      if (frag == last_frag) 
                             #line 1214 
                             break;
      #line 1210 
      frag ++;
    }
    #line 1216 
    ldv_inline_asm();
    #line 1220 
    return 1;
  }
  #line 1223 
  offset = 0U;
  #line 1224 
  len = len;
  #line 1225 
  skb_checksum_none_assert(skb);
  #line 1226 
  skb_put(skb,len);
  #line 1228 
  frag = first_frag;
  #line 1228 
  while (1) {
    {
      #line 1229 
      unsigned int frag_len = (unsigned int)bp->rx_buffer_size;
      #line 1231 
      if (offset + frag_len > len) {
        #line 1232 
        if ((long)(frag != last_frag) != 0L) {
          #line 1233 
          dev_kfree_skb_any(skb);
          #line 1234 
          return -1;
        }
        #line 1236 
        frag_len = len - offset;
      }
      #line 1238 
      ;
      #line 1238 
      ;
      #line 1238 
      ;
      #line 1238 
      skb_copy_to_linear_data_offset(skb,(int)offset,macb_rx_buffer(queue,frag),frag_len);
      #line 1241 
      offset = (unsigned int)bp->rx_buffer_size + offset;
      #line 1242 
      desc = macb_rx_desc(queue,frag);
      #line 1243 
      desc->addr &= 4294967294U;
      #line 1245 
      if (frag == last_frag) 
                             #line 1246 
                             break;
    }
    #line 1228 
    frag ++;
  }
  #line 1248 
  ldv_inline_asm();
  #line 1252 
  __skb_pull(skb,0U);
  #line 1253 
  skb->protocol = eth_type_trans(skb,bp->dev);
  #line 1255 
  ((bp->dev)->stats.rx_packets) ++;
  #line 1256 
  (bp->dev)->stats.rx_bytes += (unsigned long)skb->len;
  #line 1259 
  napi_gro_receive(napi,skb);
  #line 1261 
  return 0;
}

#line 1264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
__inline static void macb_init_rx_ring(struct macb_queue *queue)
{
  #line 1267 
  dma_addr_t addr;
  #line 1269 
  int i;
  #line 1266 
  struct macb *bp = queue->bp;
  #line 1268 
  struct macb_dma_desc *desc = (struct macb_dma_desc *)0;
  #line 1271 
  addr = queue->rx_buffers_dma;
  #line 1272 
  i = 0;
  #line 1272 
  while (bp->rx_ring_size > (unsigned int)i) {
    #line 1273 
    desc = macb_rx_desc(queue,(unsigned int)i);
    #line 1274 
    macb_set_addr(bp,desc,addr);
    #line 1275 
    desc->ctrl = 0U;
    #line 1276 
    addr = (unsigned long long)bp->rx_buffer_size + addr;
    #line 1272 
    i ++;
  }
  #line 1278 
  desc->addr |= 2U;
  #line 1279 
  queue->rx_tail = 0U;
  #line 1280 
  return;
}

#line 1282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_rx(struct macb_queue *queue, struct napi_struct *napi, int budget)
{
  #line 1288 
  unsigned int tail;
  #line 1285 
  struct macb *bp = queue->bp;
  #line 1286 
  bool reset_rx_queue = (_Bool)0;
  #line 1287 
  int received = 0;
  #line 1289 
  int first_frag = -1;
  #line 1291 
  tail = queue->rx_tail;
  #line 1291 
  while (budget > 0) {
    {
      #line 1293 
      u32 ctrl;
      #line 1292 
      struct macb_dma_desc *desc = macb_rx_desc(queue,tail);
      #line 1294 
      ldv_inline_asm();
      #line 1298 
      if ((desc->addr & 1U) == 0U) 
                                   #line 1299 
                                   break;
      #line 1300 
      ldv_inline_asm();
      #line 1304 
      ctrl = desc->ctrl;
      #line 1306 
      if ((ctrl & 16384U) != 0U) {
        #line 1307 
        if (first_frag != -1) 
                              #line 1308 
                              discard_partial_frame(queue,(unsigned int)first_frag,tail);
        #line 1309 
        first_frag = (int)tail;
      }
      #line 1312 
      if ((ctrl & 32768U) != 0U) {
        #line 1313 
        int dropped;
        #line 1315 
        if ((long)(first_frag == -1) != 0L) {
          #line 1316 
          reset_rx_queue = (_Bool)1;
          #line 1317 
          goto __Cont;
        }
        #line 1320 
        dropped = macb_rx_frame(queue,napi,(unsigned int)first_frag,tail);
        #line 1321 
        first_frag = -1;
        #line 1322 
        if ((long)(dropped < 0) != 0L) {
          #line 1323 
          reset_rx_queue = (_Bool)1;
          #line 1324 
          goto __Cont;
        }
        #line 1326 
        if (dropped == 0) {
          #line 1327 
          received ++;
          #line 1328 
          budget --;
        }
      }
    }
    #line 1291 
    __Cont: 
            #line 1291 
    tail ++;
  }
  #line 1333 
  if ((long)((int)reset_rx_queue != 0) != 0L) {
    #line 1334 
    unsigned long flags;
    #line 1335 
    u32 ctrl_0;
    #line 1337 
    netdev_err(bp->dev,(char *)"RX queue corruption: reset it\n");
    #line 1339 
    cif___ldv_spin_lock_lock_of_macb(& bp->lock);
    #line 1341 
    ctrl_0 = (*(bp->macb_reg_readl))(bp,0);
    #line 1342 
    (*(bp->macb_reg_writel))(bp,0,ctrl_0 & 4294967291U);
    #line 1344 
    macb_init_rx_ring(queue);
    #line 1345 
    (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->RBQP,(unsigned int)queue->rx_ring_dma);
    #line 1347 
    (*(bp->macb_reg_writel))(bp,0,ctrl_0 | 4U);
    #line 1349 
    cif_spin_unlock_irqrestore_lock_of_macb(& bp->lock,flags);
    #line 1350 
    return received;
  }
  #line 1353 
  if (first_frag != -1) 
                        #line 1354 
                        queue->rx_tail = (unsigned int)first_frag; else 
                                                                    #line 1356 
                                                                    queue->rx_tail = tail;
  #line 1358 
  return received;
}

#line 1361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_poll(struct napi_struct *napi, int budget)
{
  #line 1363 
  void *__mptr;
  #line 1365 
  int work_done;
  #line 1366 
  u32 status;
  #line 1363 
  __mptr = (void *)napi;
  #line 1363 
  struct macb_queue *queue = ((struct macb_queue *)(__mptr + 18446744073709551408U));
  #line 1364 
  struct macb *bp = queue->bp;
  #line 1368 
  status = (*(bp->macb_reg_readl))(bp,32);
  #line 1369 
  (*(bp->macb_reg_writel))(bp,32,status);
  #line 1374 
  work_done = (*(bp->macbgem_ops.mog_rx))(queue,napi,budget);
  #line 1375 
  if (work_done < budget) {
    #line 1376 
    napi_complete_done(napi,work_done);
    #line 1379 
    status = (*(bp->macb_reg_readl))(bp,32);
    #line 1380 
    if (status != 0U) {
      #line 1381 
      if ((bp->caps & 1U) != 0U) 
                                 #line 1382 
                                 (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->ISR,2U);
      #line 1383 
      napi_reschedule(napi);
    }
    else 
         #line 1385 
         (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->IER,bp->rx_intr_mask);
  }
  #line 1391 
  return work_done;
}

#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_hresp_error_task(unsigned long data)
{
  #line 1399 
  unsigned int q;
  #line 1400 
  u32 ctrl;
  #line 1396 
  struct macb *bp = (struct macb *)data;
  #line 1397 
  struct net_device *dev = bp->dev;
  #line 1398 
  struct macb_queue *queue = (struct macb_queue *)(& bp->queues);
  #line 1402 
  q = 0U;
  #line 1402 
  queue = (struct macb_queue *)(& bp->queues);
  #line 1402 
  while (bp->num_queues > q) {
    #line 1403 
    (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->IDR,bp->rx_intr_mask | 2296U);
    #line 1402 
    q ++;
    #line 1402 
    queue ++;
  }
  #line 1407 
  ctrl = (*(bp->macb_reg_readl))(bp,0);
  #line 1408 
  ctrl &= 4294967283U;
  #line 1409 
  (*(bp->macb_reg_writel))(bp,0,ctrl);
  #line 1411 
  netif_tx_stop_all_queues(dev);
  #line 1412 
  netif_carrier_off(dev);
  #line 1414 
  (*(bp->macbgem_ops.mog_init_rings))(bp);
  #line 1417 
  macb_init_buffers(bp);
  #line 1420 
  q = 0U;
  #line 1420 
  queue = (struct macb_queue *)(& bp->queues);
  #line 1420 
  while (bp->num_queues > q) {
    #line 1421 
    (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->IER,bp->rx_intr_mask | 2296U);
    #line 1420 
    q ++;
    #line 1420 
    queue ++;
  }
  #line 1426 
  ctrl |= 12U;
  #line 1427 
  (*(bp->macb_reg_writel))(bp,0,ctrl);
  #line 1429 
  netif_carrier_on(dev);
  #line 1430 
  netif_tx_start_all_queues(dev);
  #line 1431 
  return;
}

#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_tx_restart(struct macb_queue *queue)
{
  #line 1435 
  unsigned int head = queue->tx_head;
  #line 1436 
  unsigned int tail = queue->tx_tail;
  #line 1437 
  struct macb *bp = queue->bp;
  #line 1439 
  if ((bp->caps & 1U) != 0U) 
                             #line 1440 
                             (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->ISR,8U);
  #line 1442 
  if (head == tail) 
                    #line 1443 
                    return;
  #line 1445 
  ;
  #line 1445 
  (*(bp->macb_reg_writel))(bp,0,(*(bp->macb_reg_readl))(bp,0) | 512U);
  #line 1446 
  return;
}

#line 1448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static irqreturn_t macb_interrupt(int irq, void *dev_id)
{
  #line 1453 
  u32 status;
  #line 1453 
  u32 ctrl;
  #line 1450 
  struct macb_queue *queue = (struct macb_queue *)dev_id;
  #line 1451 
  struct macb *bp = queue->bp;
  #line 1452 
  struct net_device *dev = bp->dev;
  #line 1455 
  status = (*((queue->bp)->macb_reg_readl))(queue->bp,(int)queue->ISR);
  #line 1457 
  if ((long)(status == 0U) != 0L) 
                                  #line 1458 
                                  return IRQ_NONE;
  #line 1460 
  cif_spin_lock_lock_of_macb(& bp->lock);
  #line 1462 
  while (status != 0U) {
    #line 1464 
    int tmp_0;
    #line 1464 
    if (netif_running(dev)) 
                            #line 1464 
                            tmp_0 = 0; else 
                                            #line 1464 
                                            tmp_0 = 1;
    #line 1464 
    if ((long)tmp_0 != 0L) {
      #line 1465 
      (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->IDR,4294967295U);
      #line 1466 
      if ((bp->caps & 1U) != 0U) 
                                 #line 1467 
                                 (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->ISR,4294967295U);
      #line 1468 
      break;
    }
    #line 1475 
    if ((bp->rx_intr_mask & status) != 0U) {
      #line 1482 
      (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->IDR,bp->rx_intr_mask);
      #line 1483 
      if ((bp->caps & 1U) != 0U) 
                                 #line 1484 
                                 (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->ISR,2U);
      #line 1486 
      if ((int)napi_schedule_prep(& queue->napi) != 0) 
                                                       #line 1488 
                                                       __napi_schedule(& queue->napi);
    }
    #line 1492 
    if ((long)((status & 112U) != 0U) != 0L) {
      #line 1493 
      (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->IDR,248U);
      #line 1494 
      cif_schedule_work(& queue->tx_error_task);
      #line 1496 
      if ((bp->caps & 1U) != 0U) 
                                 #line 1497 
                                 (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->ISR,112U);
      #line 1499 
      break;
    }
    #line 1502 
    if ((status & 128U) != 0U) 
                               #line 1503 
                               macb_tx_interrupt(queue);
    #line 1505 
    if ((status & 8U) != 0U) 
                             #line 1506 
                             macb_tx_restart(queue);
    #line 1519 
    if ((status & 4U) != 0U) {
      #line 1520 
      ctrl = (*(bp->macb_reg_readl))(bp,0);
      #line 1521 
      (*(bp->macb_reg_writel))(bp,0,ctrl & 4294967291U);
      #line 1522 
      ldv_inline_asm();
      #line 1523 
      (*(bp->macb_reg_writel))(bp,0,ctrl | 4U);
      #line 1525 
      if ((bp->caps & 1U) != 0U) 
                                 #line 1526 
                                 (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->ISR,4U);
    }
    #line 1529 
    if ((status & 1024U) != 0U) {
      #line 1531 
      if ((int)macb_is_gem(bp) != 0) 
                                     #line 1532 
                                     (bp->hw_stats.gem.rx_overruns) ++; else 
                                                                    #line 1534 
                                                                    (bp->hw_stats.macb.rx_overruns) ++;
      #line 1536 
      if ((bp->caps & 1U) != 0U) 
                                 #line 1537 
                                 (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->ISR,1024U);
    }
    #line 1540 
    if ((status & 2048U) != 0U) {
      #line 1541 
      cif_tasklet_schedule(& bp->hresp_err_tasklet);
      #line 1542 
      netdev_err(dev,(char *)"DMA bus error: HRESP not OK\n");
      #line 1544 
      if ((bp->caps & 1U) != 0U) 
                                 #line 1545 
                                 (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->ISR,2048U);
    }
    #line 1547 
    status = (*((queue->bp)->macb_reg_readl))(queue->bp,(int)queue->ISR);
  }
  #line 1550 
  cif_spin_unlock_lock_of_macb(& bp->lock);
  #line 1552 
  return IRQ_HANDLED;
}

#line 1559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_poll_controller(struct net_device *dev)
{
  #line 1562 
  struct macb_queue *queue;
  #line 1563 
  unsigned long flags;
  #line 1564 
  unsigned int q;
  #line 1561 
  struct macb *bp = netdev_priv(dev);
  {
    #line 1566 
    unsigned long __dummy;
    #line 1566 
    unsigned long __dummy2;
    }
  #line 1566 
  flags = arch_local_irq_save();
  #line 1566 
  trace_hardirqs_off();
  #line 1567 
  q = 0U;
  #line 1567 
  queue = (struct macb_queue *)(& bp->queues);
  #line 1567 
  while (bp->num_queues > q) {
    #line 1568 
    macb_interrupt(dev->irq,(void *)queue);
    #line 1567 
    q ++;
    #line 1567 
    queue ++;
  }
  {
    #line 1569 
    unsigned long __dummy_2;
    #line 1569 
    unsigned long __dummy2_2;
    }
  #line 1569 
  if (arch_irqs_disabled_flags(flags) != 0) {
    {
      #line 1569 
      unsigned long __dummy_0;
      #line 1569 
      unsigned long __dummy2_0;
      }
    #line 1569 
    arch_local_irq_restore(flags);
    #line 1569 
    trace_hardirqs_off();
  }
  else {
    #line 1569 
    trace_hardirqs_on();
    {
      #line 1569 
      unsigned long __dummy_1;
      #line 1569 
      unsigned long __dummy2_1;
      }
    #line 1569 
    arch_local_irq_restore(flags);
  }
  #line 1572 
  return;
}

#line 1573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static unsigned int macb_tx_map(struct macb *bp, struct macb_queue *queue, struct sk_buff *skb, unsigned int hdrlen)
{
  #line 1578 
  dma_addr_t mapping;
  #line 1579 
  unsigned int len;
  #line 1579 
  unsigned int entry;
  #line 1579 
  unsigned int i;
  #line 1581 
  struct macb_dma_desc *desc;
  #line 1582 
  unsigned int offset;
  #line 1582 
  unsigned int size;
  #line 1583 
  unsigned int f;
  #line 1585 
  u32 ctrl;
  #line 1579 
  unsigned int tx_head = queue->tx_head;
  #line 1580 
  struct macb_tx_skb *tx_skb = (struct macb_tx_skb *)0;
  #line 1582 
  unsigned int count = 0U;
  #line 1583 
  unsigned int nr_frags = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 1584 
  unsigned int eof = 1U;
  #line 1584 
  unsigned int mss_mfs = 0U;
  #line 1585 
  u32 lso_ctrl = 0U;
  #line 1585 
  u32 seq_ctrl = 0U;
  #line 1588 
  ;
  #line 1588 
  if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U) {
    #line 1589 
    ;
    #line 1589 
    if ((unsigned int)ip_hdr(skb)->protocol == 17U) 
                                                    #line 1591 
                                                    lso_ctrl = 1U; else 
                                                                    #line 1594 
                                                                    lso_ctrl = 2U;
  }
  #line 1598 
  len = skb_headlen(skb);
  #line 1601 
  size = hdrlen;
  #line 1603 
  offset = 0U;
  #line 1604 
  while (len != 0U) {
    #line 1625 
    unsigned int tmp_3;
    #line 1625 
    unsigned int __UNIQUE_ID___x535;
    #line 1605 
    entry = macb_tx_ring_wrap(bp,tx_head);
    #line 1606 
    tx_skb = queue->tx_skb + (unsigned long)entry;
    #line 1608 
    mapping = dma_map_single_attrs(& (bp->pdev)->dev,(void *)(skb->data + (unsigned long)offset),(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 1611 
    if (dma_mapping_error(& (bp->pdev)->dev,mapping) != 0) 
                                                           #line 1612 
                                                           goto dma_error;
    #line 1615 
    tx_skb->skb = (struct sk_buff *)0;
    #line 1616 
    tx_skb->mapping = mapping;
    #line 1617 
    tx_skb->size = (unsigned long)size;
    #line 1618 
    tx_skb->mapped_as_page = (_Bool)0;
    #line 1620 
    len -= size;
    #line 1621 
    offset += size;
    #line 1622 
    count ++;
    #line 1623 
    tx_head ++;
    {
      #line 1625 
      __UNIQUE_ID___x535 = len;
      #line 1625 
      unsigned int __UNIQUE_ID___y536 = bp->max_tx_length;
      #line 1625 
      if (__UNIQUE_ID___x535 < __UNIQUE_ID___y536) 
                                                   #line 1625 
                                                   tmp_3 = __UNIQUE_ID___x535; else 
                                                                    #line 1625 
                                                                    tmp_3 = __UNIQUE_ID___y536;
      }
    #line 1625 
    size = tmp_3;
  }
  #line 1629 
  f = 0U;
  #line 1629 
  while (f < nr_frags) {
    {
      #line 1630 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[f];
      #line 1632 
      len = skb_frag_size(frag);
      #line 1633 
      offset = 0U;
      #line 1634 
      while (len != 0U) {
        #line 1635 
        unsigned int __UNIQUE_ID___x537;
        #line 1635 
        unsigned int tmp_6;
        {
          #line 1635 
          __UNIQUE_ID___x537 = len;
          #line 1635 
          unsigned int __UNIQUE_ID___y538 = bp->max_tx_length;
          #line 1635 
          if (__UNIQUE_ID___x537 < __UNIQUE_ID___y538) 
                                                       #line 1635 
                                                       tmp_6 = __UNIQUE_ID___x537; else 
                                                                    #line 1635 
                                                                    tmp_6 = __UNIQUE_ID___y538;
          }
        #line 1635 
        size = tmp_6;
        #line 1636 
        entry = macb_tx_ring_wrap(bp,tx_head);
        #line 1637 
        tx_skb = queue->tx_skb + (unsigned long)entry;
        #line 1639 
        mapping = skb_frag_dma_map(& (bp->pdev)->dev,frag,(unsigned long)offset,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
        #line 1641 
        if (dma_mapping_error(& (bp->pdev)->dev,mapping) != 0) 
                                                               #line 1642 
                                                               goto dma_error;
        #line 1645 
        tx_skb->skb = (struct sk_buff *)0;
        #line 1646 
        tx_skb->mapping = mapping;
        #line 1647 
        tx_skb->size = (unsigned long)size;
        #line 1648 
        tx_skb->mapped_as_page = (_Bool)1;
        #line 1650 
        len -= size;
        #line 1651 
        offset += size;
        #line 1652 
        count ++;
        #line 1653 
        tx_head ++;
      }
    }
    #line 1629 
    f ++;
  }
  #line 1658 
  if ((long)(tx_skb == (struct macb_tx_skb *)0) != 0L) {
    #line 1659 
    netdev_err(bp->dev,(char *)"BUG! empty skb!\n");
    #line 1660 
    return 0U;
  }
  #line 1664 
  tx_skb->skb = skb;
  #line 1673 
  i = tx_head;
  #line 1674 
  entry = macb_tx_ring_wrap(bp,i);
  #line 1675 
  ctrl = 2147483648U;
  #line 1676 
  desc = macb_tx_desc(queue,entry);
  #line 1677 
  desc->ctrl = ctrl;
  #line 1679 
  if (lso_ctrl != 0U) 
    #line 1680 
    if (lso_ctrl == 1U) {
      #line 1682 
      mss_mfs = (unsigned int)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size + skb_transport_offset(skb)) + 4);
    }
    else {
      #line 1686 
      mss_mfs = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
      #line 1690 
      seq_ctrl = 0U;
    }
  #line 1694 
  while (1) {
    #line 1695 
    i --;
    #line 1696 
    entry = macb_tx_ring_wrap(bp,i);
    #line 1697 
    tx_skb = queue->tx_skb + (unsigned long)entry;
    #line 1698 
    desc = macb_tx_desc(queue,entry);
    #line 1700 
    ctrl = (unsigned int)tx_skb->size;
    #line 1701 
    if (eof != 0U) {
      #line 1702 
      ctrl |= 32768U;
      #line 1703 
      eof = 0U;
    }
    #line 1705 
    if ((long)(bp->tx_ring_size + 4294967295U == entry) != 0L) 
                                                               #line 1706 
                                                               ctrl |= 1073741824U;
    #line 1709 
    if (queue->tx_head == i) {
      #line 1710 
      ctrl = ((lso_ctrl << 17) & 393216U) | ctrl;
      #line 1711 
      ctrl = ((seq_ctrl << 19) & 524288U) | ctrl;
      #line 1712 
      if ((((bp->dev)->features & 8ULL) != 0ULL && (unsigned int)skb->ip_summed != 3U) && lso_ctrl == 0U) 
        #line 1714 
        ctrl |= 65536U;
    }
    else 
         #line 1719 
         ctrl = ((mss_mfs << 16) & 1073676288U) | ctrl;
    #line 1722 
    macb_set_addr(bp,desc,tx_skb->mapping);
    #line 1723 
    ldv_inline_asm();
    #line 1727 
    desc->ctrl = ctrl;
    #line 1728 
    if (! (queue->tx_head != i)) 
                                 #line 1694 
                                 break;
  }
  #line 1730 
  queue->tx_head = tx_head;
  #line 1732 
  return count;
  #line 1734 
  dma_error: 
             #line 1734 
  ;
  #line 1735 
  netdev_err(bp->dev,(char *)"TX DMA map failed\n");
  #line 1737 
  i = queue->tx_head;
  #line 1737 
  while (i != tx_head) {
    #line 1738 
    tx_skb = macb_tx_skb(queue,i);
    #line 1740 
    macb_tx_unmap(bp,tx_skb);
    #line 1737 
    i ++;
  }
  #line 1743 
  return 0U;
}

#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static netdev_features_t macb_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
{
  #line 1750 
  unsigned int nr_frags;
  #line 1750 
  unsigned int f;
  #line 1751 
  unsigned int hdrlen;
  #line 1756 
  if (! skb_is_nonlinear(skb)) 
                               #line 1757 
                               return features;
  #line 1760 
  hdrlen = (unsigned int)skb_transport_offset(skb);
  #line 1761 
  ;
  #line 1761 
  if ((unsigned int)ip_hdr(skb)->protocol == 6U) {
    #line 1762 
    hdrlen = tcp_hdrlen(skb) + hdrlen;
  }
  #line 1768 
  ;
  #line 1768 
  if (((skb_headlen(skb) - hdrlen) & 7U) != 0U) 
                                                #line 1769 
                                                return features & 18446744073709486079ULL;
  #line 1771 
  nr_frags = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 1773 
  nr_frags --;
  #line 1774 
  f = 0U;
  #line 1774 
  while (f < nr_frags) {
    {
      #line 1775 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[f];
      #line 1777 
      if ((skb_frag_size(frag) & 7U) != 0U) 
                                            #line 1778 
                                            return features & 18446744073709486079ULL;
    }
    #line 1774 
    f ++;
  }
  #line 1780 
  return features;
}

#line 1783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
__inline static int macb_clear_csum(struct sk_buff *skb)
{
  #line 1786 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 1787 
                                          return 0;
  #line 1790 
  if ((long)(skb_cow_head(skb,0U) != 0) != 0L) 
                                               #line 1791 
                                               return -1;
  #line 1797 
  *((__sum16 *)(skb_checksum_start(skb) + (unsigned long)skb->__anonCompField_sk_buff_114.__anonCompField___anonunion_560_113.csum_offset)) = (unsigned short)0U;
  #line 1798 
  return 0;
}

#line 1801  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_pad_and_fcs(struct sk_buff **skb, struct net_device *ndev)
{
  #line 1803 
  int tmp_1;
  #line 1807 
  struct sk_buff *nskb;
  #line 1808 
  u32 fcs;
  #line 1803 
  if (skb_cloned(*skb) != 0) 
                             #line 1803 
                             tmp_1 = 1;
  else {
    #line 1803 
    if (skb_header_cloned(*skb) != 0) 
                                      #line 1803 
                                      tmp_1 = 1; else 
                                                      #line 1803 
                                                      tmp_1 = 0;
  }
  #line 1803 
  bool cloned = (_Bool)(tmp_1 != 0);
  #line 1804 
  int padlen = (int)(60U - (*skb)->len);
  #line 1805 
  int headroom = (int)skb_headroom(*skb);
  #line 1806 
  int tailroom = skb_tailroom(*skb);
  #line 1810 
  if ((ndev->features & 8ULL) == 0ULL || (unsigned int)(*skb)->ip_summed == 3U) 
    #line 1813 
    return 0;
  else {
    #line 1811 
    ;
    #line 1811 
    if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(*skb))->gso_size != 0U) 
      #line 1813 
      return 0;
  }
  #line 1815 
  if (padlen <= 0) {
    #line 1817 
    if (tailroom > 3) 
                      #line 1818 
                      goto add_fcs;
    else 
      #line 1820 
      if (! cloned && headroom + tailroom > 3) 
                                               #line 1821 
                                               padlen = 0; else 
                                                                #line 1824 
                                                                padlen = 4;
  }
  else 
       #line 1827 
       padlen += 4;
  #line 1830 
  if (! cloned && headroom + tailroom >= padlen) {
    #line 1831 
    (*skb)->data = (unsigned char *)__memmove((void *)(*skb)->head,(void *)(*skb)->data,(unsigned long)(*skb)->len);
    #line 1832 
    skb_set_tail_pointer(*skb,(int)(*skb)->len);
  }
  else {
    #line 1834 
    nskb = skb_copy_expand(*skb,0,padlen,2592U);
    #line 1835 
    if (nskb == (struct sk_buff *)0) 
                                     #line 1836 
                                     return -12;
    #line 1838 
    dev_consume_skb_any(*skb);
    #line 1839 
    *skb = nskb;
  }
  #line 1842 
  if (padlen > 4) 
                  #line 1843 
                  skb_put_zero(*skb,(unsigned int)(padlen + -4));
  #line 1845 
  add_fcs: 
           #line 1845 
  ;
  #line 1847 
  fcs = crc32_le(4294967295U,(*skb)->data,(unsigned long)(*skb)->len);
  #line 1848 
  fcs = ~ fcs;
  #line 1850 
  skb_put_u8(*skb,(unsigned char)((int)((unsigned char)fcs)));
  #line 1851 
  skb_put_u8(*skb,(unsigned char)((int)((unsigned char)(fcs >> 8))));
  #line 1852 
  skb_put_u8(*skb,(unsigned char)((int)((unsigned char)(fcs >> 16))));
  #line 1853 
  skb_put_u8(*skb,(unsigned char)((int)((unsigned char)(fcs >> 24))));
  #line 1855 
  return 0;
}

#line 1858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static netdev_tx_t macb_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 1863 
  unsigned long flags;
  #line 1864 
  unsigned int desc_cnt;
  #line 1864 
  unsigned int nr_frags;
  #line 1864 
  unsigned int frag_size;
  #line 1864 
  unsigned int f;
  #line 1865 
  unsigned int hdrlen;
  #line 1866 
  bool is_lso;
  #line 1860 
  u16 queue_index = skb_get_queue_mapping(skb);
  #line 1861 
  struct macb *bp = netdev_priv(dev);
  #line 1862 
  struct macb_queue *queue = & bp->queues[(int)queue_index];
  #line 1866 
  bool is_udp = (_Bool)0;
  #line 1867 
  netdev_tx_t ret = (enum netdev_tx)0;
  #line 1869 
  if (macb_clear_csum(skb) != 0) {
    #line 1870 
    dev_kfree_skb_any(skb);
    #line 1871 
    return ret;
  }
  #line 1874 
  if (macb_pad_and_fcs(& skb,dev) != 0) {
    #line 1875 
    dev_kfree_skb_any(skb);
    #line 1876 
    return ret;
  }
  #line 1879 
  is_lso = (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
  #line 1881 
  if ((int)is_lso != 0) {
    #line 1882 
    is_udp = (_Bool)((unsigned int)ip_hdr(skb)->protocol == 17U);
    #line 1885 
    if ((int)is_udp != 0) {
      #line 1887 
      hdrlen = (unsigned int)skb_transport_offset(skb);
    }
    else {
      #line 1889 
      hdrlen = (unsigned int)skb_transport_offset(skb) + tcp_hdrlen(skb);
    }
    #line 1890 
    ;
    #line 1890 
    if (skb_headlen(skb) < hdrlen) {
      #line 1891 
      netdev_err(bp->dev,(char *)"Error - LSO headers fragmented!!!\n");
      #line 1893 
      return NETDEV_TX_BUSY;
    }
  }
  else {
    #line 1896 
    unsigned int __UNIQUE_ID___x539;
    #line 1896 
    unsigned int tmp_10;
    {
      #line 1896 
      __UNIQUE_ID___x539 = skb_headlen(skb);
      #line 1896 
      unsigned int __UNIQUE_ID___y540 = bp->max_tx_length;
      #line 1896 
      if (__UNIQUE_ID___x539 < __UNIQUE_ID___y540) 
                                                   #line 1896 
                                                   tmp_10 = __UNIQUE_ID___x539; else 
                                                                    #line 1896 
                                                                    tmp_10 = __UNIQUE_ID___y540;
      }
    #line 1896 
    hdrlen = tmp_10;
  }
  #line 1911 
  if ((int)is_lso != 0) {
    #line 1911 
    ;
    #line 1911 
    if (skb_headlen(skb) > hdrlen) {
      #line 1913 
      desc_cnt = (((skb_headlen(skb) - hdrlen) + bp->max_tx_length) + 4294967295U) / bp->max_tx_length + 1U;
    }
    else 
         #line 1911 
         goto _LAND;
  }
  else {
    #line 1911 
    _LAND: { /* sequence */
             #line 1915 
             desc_cnt = ((skb_headlen(skb) + bp->max_tx_length) + 4294967295U) / bp->max_tx_length;
           }
  }
  #line 1916 
  nr_frags = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 1917 
  f = 0U;
  #line 1917 
  while (f < nr_frags) {
    {
      #line 1918 
      frag_size = skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[f]);
      #line 1919 
      desc_cnt = ((bp->max_tx_length + frag_size) + 4294967295U) / bp->max_tx_length + desc_cnt;
    }
    #line 1917 
    f ++;
  }
  #line 1922 
  cif___ldv_spin_lock_lock_of_macb(& bp->lock);
  #line 1925 
  if ((((queue->tx_tail - queue->tx_head) + 4294967295U) & (bp->tx_ring_size + 4294967295U)) < desc_cnt) {
    #line 1927 
    netif_stop_subqueue(dev,(unsigned short)((int)queue_index));
    #line 1928 
    cif_spin_unlock_irqrestore_lock_of_macb(& bp->lock,flags);
    {
      #line 1929 
      bool branch;
      #line 1929 
      struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"macb", .function = (char *)"macb_start_xmit", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c", .format = (char *)"tx_head = %u, tx_tail = %u\n", .lineno = (unsigned int)1929U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1929 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
      #line 1929 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1929 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug541,bp->dev,(char *)"tx_head = %u, tx_tail = %u\n",queue->tx_head,queue->tx_tail);
    }
    #line 1931 
    return NETDEV_TX_BUSY;
  }
  #line 1935 
  if (macb_tx_map(bp,queue,skb,hdrlen) == 0U) {
    #line 1936 
    dev_kfree_skb_any(skb);
    #line 1937 
    goto unlock;
  }
  #line 1939 
  ldv_inline_asm();
  #line 1942 
  skb_tx_timestamp(skb);
  #line 1944 
  ;
  #line 1944 
  (*(bp->macb_reg_writel))(bp,0,(*(bp->macb_reg_readl))(bp,0) | 512U);
  #line 1946 
  if ((((queue->tx_tail - queue->tx_head) + 4294967295U) & (bp->tx_ring_size + 4294967295U)) == 0U) 
    #line 1947 
    netif_stop_subqueue(dev,(unsigned short)((int)queue_index));
  #line 1949 
  unlock: 
          #line 1949 
  ;
  #line 1950 
  cif_spin_unlock_irqrestore_lock_of_macb(& bp->lock,flags);
  #line 1952 
  return ret;
}

#line 1955  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_init_rx_buffer_size(struct macb *bp, size_t size)
{
  #line 1957 
  if (macb_is_gem(bp)) {
    #line 1960 
    bp->rx_buffer_size = size;
    #line 1962 
    if ((bp->rx_buffer_size & 63UL) != 0UL) {
      #line 1967 
      int __y;
      {
        #line 1963 
        bool branch;
        #line 1963 
        struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"macb", .function = (char *)"macb_init_rx_buffer_size", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c", .format = (char *)"RX buffer must be multiple of %d bytes, expanding\n", .lineno = (unsigned int)1963U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1963 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
        #line 1963 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1963 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug542,bp->dev,(char *)"RX buffer must be multiple of %d bytes, expanding\n",64);
      }
      #line 1967 
      __y = 64;
      #line 1966 
      bp->rx_buffer_size = (((bp->rx_buffer_size + (unsigned long)(__y + -1)) / (unsigned long)__y) * (unsigned long)__y);
    }
  }
  else 
       #line 1958 
       bp->rx_buffer_size = 128UL;
  {
    #line 1971 
    bool branch_0;
    #line 1971 
    struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"macb", .function = (char *)"macb_init_rx_buffer_size", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c", .format = (char *)"mtu [%u] rx_buffer_size [%zu]\n", .lineno = (unsigned int)1971U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1971 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
    #line 1971 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1971 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug543,bp->dev,(char *)"mtu [%u] rx_buffer_size [%zu]\n",(bp->dev)->mtu,bp->rx_buffer_size);
  }
  #line 1973 
  return;
}

#line 1975  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void gem_free_rx_buffers(struct macb *bp)
{
  #line 1977 
  struct sk_buff *skb;
  #line 1978 
  struct macb_dma_desc *desc;
  #line 1979 
  struct macb_queue *queue;
  #line 1980 
  dma_addr_t addr;
  #line 1981 
  unsigned int q;
  #line 1982 
  int i;
  #line 1984 
  q = 0U;
  #line 1984 
  queue = (struct macb_queue *)(& bp->queues);
  #line 1984 
  while (bp->num_queues > q) {
    #line 1985 
    if (queue->rx_skbuff == (struct sk_buff **)0) 
                                                  #line 1986 
                                                  goto __Cont;
    #line 1988 
    i = 0;
    #line 1988 
    while (bp->rx_ring_size > (unsigned int)i) {
      #line 1989 
      skb = *(queue->rx_skbuff + (unsigned long)i);
      #line 1991 
      if (skb == (struct sk_buff *)0) 
                                      #line 1992 
                                      goto __Cont_0;
      #line 1994 
      desc = macb_rx_desc(queue,(unsigned int)i);
      #line 1995 
      addr = macb_get_addr(bp,desc);
      #line 1997 
      dma_unmap_single_attrs(& (bp->pdev)->dev,addr,bp->rx_buffer_size,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 1999 
      dev_kfree_skb_any(skb);
      #line 2000 
      skb = (struct sk_buff *)0;
      #line 1988 
      __Cont_0: 
                #line 1988 
      i ++;
    }
    #line 2003 
    kfree((void *)queue->rx_skbuff);
    #line 2004 
    queue->rx_skbuff = (struct sk_buff **)0;
    #line 1984 
    __Cont: 
            #line 1984 
    q ++;
    #line 1984 
    queue ++;
  }
  #line 2006 
  return;
}

#line 2008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_free_rx_buffers(struct macb *bp)
{
  #line 2010 
  struct macb_queue *queue = & bp->queues[0];
  #line 2012 
  if (queue->rx_buffers != (void *)0) {
    #line 2013 
    dma_free_coherent(& (bp->pdev)->dev,(unsigned long)bp->rx_ring_size * bp->rx_buffer_size,queue->rx_buffers,queue->rx_buffers_dma);
    #line 2016 
    queue->rx_buffers = (void *)0;
  }
  #line 2018 
  return;
}

#line 2020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_free_consistent(struct macb *bp)
{
  #line 2022 
  struct macb_queue *queue;
  #line 2023 
  unsigned int q;
  #line 2024 
  int size;
  #line 2026 
  (*(bp->macbgem_ops.mog_free_rx_buffers))(bp);
  #line 2028 
  q = 0U;
  #line 2028 
  queue = (struct macb_queue *)(& bp->queues);
  #line 2028 
  while (bp->num_queues > q) {
    #line 2029 
    kfree((void *)queue->tx_skb);
    #line 2030 
    queue->tx_skb = (struct macb_tx_skb *)0;
    #line 2031 
    if (queue->tx_ring != (struct macb_dma_desc *)0) {
      #line 2032 
      size = (int)(macb_dma_desc_get_size(bp) * bp->tx_ring_size + (unsigned int)bp->tx_bd_rd_prefetch);
      #line 2033 
      dma_free_coherent(& (bp->pdev)->dev,(unsigned long)size,(void *)queue->tx_ring,queue->tx_ring_dma);
      #line 2035 
      queue->tx_ring = (struct macb_dma_desc *)0;
    }
    #line 2037 
    if (queue->rx_ring != (struct macb_dma_desc *)0) {
      #line 2038 
      size = (int)(macb_dma_desc_get_size(bp) * bp->rx_ring_size + (unsigned int)bp->rx_bd_rd_prefetch);
      #line 2039 
      dma_free_coherent(& (bp->pdev)->dev,(unsigned long)size,(void *)queue->rx_ring,queue->rx_ring_dma);
      #line 2041 
      queue->rx_ring = (struct macb_dma_desc *)0;
    }
    #line 2028 
    q ++;
    #line 2028 
    queue ++;
  }
  #line 2044 
  return;
}

#line 2046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int gem_alloc_rx_buffers(struct macb *bp)
{
  #line 2048 
  struct macb_queue *queue;
  #line 2049 
  unsigned int q;
  #line 2050 
  int size;
  #line 2052 
  q = 0U;
  #line 2052 
  queue = (struct macb_queue *)(& bp->queues);
  #line 2052 
  while (bp->num_queues > q) {
    #line 2053 
    size = (int)(bp->rx_ring_size * 8U);
    #line 2054 
    queue->rx_skbuff = (struct sk_buff **)kzalloc((unsigned long)size,3264U);
    #line 2055 
    if (queue->rx_skbuff == (struct sk_buff **)0) 
                                                  #line 2056 
                                                  return -12;
    else {
      #line 2058 
      bool branch;
      #line 2058 
      struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"macb", .function = (char *)"gem_alloc_rx_buffers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c", .format = (char *)"Allocated %d RX struct sk_buff entries at %p\n", .lineno = (unsigned int)2058U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2058 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
      #line 2058 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2058 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug544,bp->dev,(char *)"Allocated %d RX struct sk_buff entries at %p\n",bp->rx_ring_size,queue->rx_skbuff);
    }
    #line 2052 
    q ++;
    #line 2052 
    queue ++;
  }
  #line 2062 
  return 0;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_alloc_rx_buffers(struct macb *bp)
{
  #line 2068 
  int size;
  #line 2067 
  struct macb_queue *queue = & bp->queues[0];
  #line 2070 
  size = (int)((size_t)bp->rx_ring_size * bp->rx_buffer_size);
  #line 2071 
  queue->rx_buffers = dma_alloc_coherent(& (bp->pdev)->dev,(unsigned long)size,& queue->rx_buffers_dma,3264U);
  #line 2073 
  if (queue->rx_buffers == (void *)0) 
                                      #line 2074 
                                      return -12;
  {
    #line 2076 
    bool branch;
    #line 2076 
    struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"macb", .function = (char *)"macb_alloc_rx_buffers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c", .format = (char *)"Allocated RX buffers of %d bytes at %08lx (mapped %p)\n", .lineno = (unsigned int)2076U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2076 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
    #line 2076 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2076 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug545,bp->dev,(char *)"Allocated RX buffers of %d bytes at %08lx (mapped %p)\n",size,(unsigned long)queue->rx_buffers_dma,queue->rx_buffers);
  }
  #line 2079 
  return 0;
}

#line 2082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_alloc_consistent(struct macb *bp)
{
  #line 2084 
  struct macb_queue *queue;
  #line 2085 
  unsigned int q;
  #line 2086 
  int size;
  #line 2088 
  q = 0U;
  #line 2088 
  queue = (struct macb_queue *)(& bp->queues);
  #line 2088 
  while (bp->num_queues > q) {
    {
      #line 2089 
      size = (int)(macb_dma_desc_get_size(bp) * bp->tx_ring_size + (unsigned int)bp->tx_bd_rd_prefetch);
      #line 2090 
      queue->tx_ring = (struct macb_dma_desc *)dma_alloc_coherent(& (bp->pdev)->dev,(unsigned long)size,& queue->tx_ring_dma,3264U);
      #line 2093 
      if (queue->tx_ring == (struct macb_dma_desc *)0) 
                                                       #line 2094 
                                                       goto out_err;
      {
        #line 2095 
        bool branch;
        #line 2095 
        struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"macb", .function = (char *)"macb_alloc_consistent", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c", .format = (char *)"Allocated TX ring for queue %u of %d bytes at %08lx (mapped %p)\n", .lineno = (unsigned int)2095U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2095 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
        #line 2095 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 2095 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug546,bp->dev,(char *)"Allocated TX ring for queue %u of %d bytes at %08lx (mapped %p)\n",q,size,(unsigned long)queue->tx_ring_dma,queue->tx_ring);
      }
      #line 2100 
      size = (int)(bp->tx_ring_size * 32U);
      #line 2101 
      queue->tx_skb = (struct macb_tx_skb *)kmalloc((unsigned long)size,3264U);
      #line 2102 
      if (queue->tx_skb == (struct macb_tx_skb *)0) 
                                                    #line 2103 
                                                    goto out_err;
      #line 2105 
      size = (int)(macb_dma_desc_get_size(bp) * bp->rx_ring_size + (unsigned int)bp->rx_bd_rd_prefetch);
      #line 2106 
      queue->rx_ring = (struct macb_dma_desc *)dma_alloc_coherent(& (bp->pdev)->dev,(unsigned long)size,& queue->rx_ring_dma,3264U);
      #line 2108 
      if (queue->rx_ring == (struct macb_dma_desc *)0) 
                                                       #line 2109 
                                                       goto out_err;
      {
        #line 2110 
        bool branch_0;
        #line 2110 
        struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"macb", .function = (char *)"macb_alloc_consistent", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c", .format = (char *)"Allocated RX ring of %d bytes at %08lx (mapped %p)\n", .lineno = (unsigned int)2110U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2110 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
        #line 2110 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 2110 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug547,bp->dev,(char *)"Allocated RX ring of %d bytes at %08lx (mapped %p)\n",size,(unsigned long)queue->rx_ring_dma,queue->rx_ring);
      }
    }
    #line 2088 
    q ++;
    #line 2088 
    queue ++;
  }
  #line 2114 
  if ((*(bp->macbgem_ops.mog_alloc_rx_buffers))(bp) != 0) 
                                                          #line 2115 
                                                          goto out_err;
  #line 2117 
  return 0;
  #line 2119 
  out_err: 
           #line 2119 
  ;
  #line 2120 
  macb_free_consistent(bp);
  #line 2121 
  return -12;
}

#line 2124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void gem_init_rings(struct macb *bp)
{
  #line 2126 
  struct macb_queue *queue;
  #line 2128 
  unsigned int q;
  #line 2129 
  int i;
  #line 2127 
  struct macb_dma_desc *desc = (struct macb_dma_desc *)0;
  #line 2131 
  q = 0U;
  #line 2131 
  queue = (struct macb_queue *)(& bp->queues);
  #line 2131 
  while (bp->num_queues > q) {
    #line 2132 
    i = 0;
    #line 2132 
    while (bp->tx_ring_size > (unsigned int)i) {
      #line 2133 
      desc = macb_tx_desc(queue,(unsigned int)i);
      #line 2134 
      macb_set_addr(bp,desc,0ULL);
      #line 2135 
      desc->ctrl = 2147483648U;
      #line 2132 
      i ++;
    }
    #line 2137 
    desc->ctrl |= 1073741824U;
    #line 2138 
    queue->tx_head = 0U;
    #line 2139 
    queue->tx_tail = 0U;
    #line 2141 
    queue->rx_tail = 0U;
    #line 2142 
    queue->rx_prepared_head = 0U;
    #line 2144 
    gem_rx_refill(queue);
    #line 2131 
    q ++;
    #line 2131 
    queue ++;
  }
  #line 2146 
  return;
}

#line 2149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_init_rings(struct macb *bp)
{
  #line 2151 
  int i;
  #line 2152 
  struct macb_dma_desc *desc = (struct macb_dma_desc *)0;
  #line 2154 
  macb_init_rx_ring(& bp->queues[0]);
  #line 2156 
  i = 0;
  #line 2156 
  while (bp->tx_ring_size > (unsigned int)i) {
    #line 2157 
    desc = macb_tx_desc(& bp->queues[0],(unsigned int)i);
    #line 2158 
    macb_set_addr(bp,desc,0ULL);
    #line 2159 
    desc->ctrl = 2147483648U;
    #line 2156 
    i ++;
  }
  #line 2161 
  bp->queues[0].tx_head = 0U;
  #line 2162 
  bp->queues[0].tx_tail = 0U;
  #line 2163 
  desc->ctrl |= 1073741824U;
  #line 2164 
  return;
}

#line 2166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_reset_hw(struct macb *bp)
{
  #line 2168 
  struct macb_queue *queue;
  #line 2169 
  unsigned int q;
  #line 2170 
  u32 ctrl = (*(bp->macb_reg_readl))(bp,0);
  #line 2175 
  ctrl &= 4294967283U;
  #line 2178 
  ctrl |= 32U;
  #line 2180 
  (*(bp->macb_reg_writel))(bp,0,ctrl);
  #line 2183 
  (*(bp->macb_reg_writel))(bp,20,4294967295U);
  #line 2184 
  (*(bp->macb_reg_writel))(bp,32,4294967295U);
  #line 2187 
  q = 0U;
  #line 2187 
  queue = (struct macb_queue *)(& bp->queues);
  #line 2187 
  while (bp->num_queues > q) {
    #line 2188 
    (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->IDR,4294967295U);
    #line 2189 
    (*((queue->bp)->macb_reg_readl))(queue->bp,(int)queue->ISR);
    #line 2190 
    if ((bp->caps & 1U) != 0U) 
                               #line 2191 
                               (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->ISR,4294967295U);
    #line 2187 
    q ++;
    #line 2187 
    queue ++;
  }
  #line 2193 
  return;
}

#line 2195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static u32 gem_mdc_clk_div(struct macb *bp)
{
  #line 2197 
  u32 config;
  #line 2198 
  unsigned long pclk_hz = clk_get_rate(bp->pclk);
  #line 2200 
  if (pclk_hz <= 20000000UL) 
                             #line 2201 
                             config = 0U;
  else 
    #line 2202 
    if (pclk_hz <= 40000000UL) 
                               #line 2203 
                               config = 262144U;
    else 
      #line 2204 
      if (pclk_hz <= 80000000UL) 
                                 #line 2205 
                                 config = 524288U;
      else 
        #line 2206 
        if (pclk_hz <= 120000000UL) 
                                    #line 2207 
                                    config = 786432U;
        else 
          #line 2208 
          if (pclk_hz <= 160000000UL) 
                                      #line 2209 
                                      config = 1048576U; else 
                                                              #line 2211 
                                                              config = 1310720U;
  #line 2213 
  return config;
}

#line 2216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static u32 macb_mdc_clk_div(struct macb *bp)
{
  #line 2218 
  u32 config;
  #line 2219 
  unsigned long pclk_hz;
  #line 2221 
  if ((int)macb_is_gem(bp) != 0) {
    #line 2222 
    return gem_mdc_clk_div(bp);
  }
  #line 2224 
  pclk_hz = clk_get_rate(bp->pclk);
  #line 2225 
  if (pclk_hz <= 20000000UL) 
                             #line 2226 
                             config = 0U;
  else 
    #line 2227 
    if (pclk_hz <= 40000000UL) 
                               #line 2228 
                               config = 1024U;
    else 
      #line 2229 
      if (pclk_hz <= 80000000UL) 
                                 #line 2230 
                                 config = 2048U; else 
                                                      #line 2232 
                                                      config = 3072U;
  #line 2234 
  return config;
}

#line 2241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static u32 macb_dbw(struct macb *bp)
{
  #line 2243 
  if (! macb_is_gem(bp)) 
                         #line 2244 
                         return 0U;
  #line 2246 
  switch (((*(bp->macb_reg_readl))(bp,640) >> 25) & 7U) {
    #line 2247 
    case (unsigned int)4: 
                          #line 2247 
    ;
    #line 2248 
    return 4194304U;
    #line 2249 
    case (unsigned int)2: 
                          #line 2249 
    ;
    #line 2250 
    return 2097152U;
    #line 2251 
    case (unsigned int)1: 
                          #line 2251 
    ;
    #line 2252 
    default: 
             #line 2252 
    ;
    #line 2253 
    return 0U;
  }
}

#line 2264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_configure_dma(struct macb *bp)
{
  #line 2266 
  struct macb_queue *queue;
  #line 2267 
  u32 buffer_size;
  #line 2268 
  unsigned int q;
  #line 2269 
  u32 dmacfg;
  #line 2271 
  buffer_size = (unsigned int)(bp->rx_buffer_size / 64UL);
  #line 2272 
  if ((int)macb_is_gem(bp) != 0) {
    #line 2273 
    dmacfg = (*(bp->macb_reg_readl))(bp,16) & 4278255615U;
    #line 2274 
    q = 0U;
    #line 2274 
    queue = (struct macb_queue *)(& bp->queues);
    #line 2274 
    while (bp->num_queues > q) {
      #line 2275 
      if (q != 0U) 
                   #line 2276 
                   (*((queue->bp)->macb_reg_writel))(queue->bp,(int)queue->RBQS,buffer_size); else 
                                                                    #line 2278 
                                                                    dmacfg = ((buffer_size << 16) & 16711680U) | dmacfg;
      #line 2274 
      q ++;
      #line 2274 
      queue ++;
    }
    #line 2280 
    if (bp->dma_burst_length != 0U) 
                                    #line 2281 
                                    dmacfg = (dmacfg & 4294967264U) | (bp->dma_burst_length & 31U);
    #line 2282 
    dmacfg |= 1792U;
    #line 2283 
    dmacfg &= 4294967167U;
    #line 2285 
    if ((int)bp->native_io != 0) 
                                 #line 2286 
                                 dmacfg &= 4294967231U; else 
                                                             #line 2288 
                                                             dmacfg |= 64U;
    #line 2290 
    if (((bp->dev)->features & 8ULL) != 0ULL) 
                                              #line 2291 
                                              dmacfg |= 2048U; else 
                                                                    #line 2293 
                                                                    dmacfg &= 4294965247U;
    #line 2295 
    dmacfg &= 3221225471U;
    #line 2297 
    if (((int)bp->hw_dma_cap & 1) != 0) 
                                        #line 2298 
                                        dmacfg |= 1073741824U;
    #line 2301 
    if (((int)bp->hw_dma_cap & 2) != 0) 
                                        #line 2302 
                                        dmacfg |= 805306368U;
    {
      #line 2304 
      bool branch;
      #line 2304 
      struct _ddebug __UNIQUE_ID_ddebug548 = {.modname = (char *)"macb", .function = (char *)"macb_configure_dma", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c", .format = (char *)"Cadence configure DMA with 0x%08x\n", .lineno = (unsigned int)2304U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2304 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug548.key.dd_key_false.key,(_Bool)0);
      #line 2304 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2304 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug548,bp->dev,(char *)"Cadence configure DMA with 0x%08x\n",dmacfg);
    }
    #line 2306 
    (*(bp->macb_reg_writel))(bp,16,dmacfg);
  }
  #line 2308 
  return;
}

#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_init_hw(struct macb *bp)
{
  #line 2312 
  u32 config;
  #line 2314 
  macb_reset_hw(bp);
  #line 2315 
  macb_set_hwaddr(bp);
  #line 2317 
  config = macb_mdc_clk_div(bp);
  #line 2318 
  config = config;
  #line 2319 
  config |= 131072U;
  #line 2320 
  if ((bp->caps & 32U) != 0U) 
                              #line 2321 
                              config |= 8U; else 
                                                 #line 2323 
                                                 config |= 256U;
  #line 2324 
  if (((bp->dev)->flags & 256U) != 0U) 
                                       #line 2325 
                                       config |= 16U;
  else {
    #line 2326 
    if ((int)macb_is_gem(bp) != 0) 
      #line 2326 
      if (((bp->dev)->features & 549755813888ULL) != 0ULL) 
                                                           #line 2327 
                                                           config |= 16777216U;
  }
  #line 2328 
  if (((bp->dev)->flags & 2U) == 0U) 
                                     #line 2329 
                                     config |= 32U;
  #line 2330 
  config = macb_dbw(bp) | config;
  #line 2331 
  (*(bp->macb_reg_writel))(bp,4,config);
  #line 2332 
  if ((bp->caps & 32U) != 0U && bp->jumbo_max_len != 0U) 
                                                         #line 2333 
                                                         (*(bp->macb_reg_writel))(bp,72,bp->jumbo_max_len);
  #line 2334 
  bp->rx_frm_len_mask = 4095U;
  #line 2335 
  if ((bp->caps & 32U) != 0U) 
                              #line 2336 
                              bp->rx_frm_len_mask = 16383U;
  #line 2338 
  macb_configure_dma(bp);
  #line 2339 
  return;
}

#line 2374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
__inline static int hash_bit_value(int bitnr, __u8 *addr)
{
  #line 2376 
  if ((((int)*(addr + (unsigned long)(bitnr / 8)) >> (bitnr & 7)) & 1) != 0) 
    #line 2377 
    return 1;
  #line 2378 
  return 0;
}

#line 2382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int hash_get_index(__u8 *addr)
{
  #line 2384 
  int i;
  #line 2384 
  int j;
  #line 2384 
  int bitval;
  #line 2385 
  int hash_index = 0;
  #line 2387 
  j = 0;
  #line 2387 
  while (j <= 5) {
    #line 2388 
    i = 0;
    #line 2388 
    bitval = 0;
    #line 2388 
    while (i <= 7) {
      #line 2389 
      bitval = hash_bit_value(i * 6 + j,addr) ^ bitval;
      #line 2388 
      i ++;
    }
    #line 2391 
    hash_index = (bitval << j) | hash_index;
    #line 2387 
    j ++;
  }
  #line 2394 
  return hash_index;
}

#line 2398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_sethashtable(struct net_device *dev)
{
  #line 2408 
  void *__mptr;
  #line 2400 
  struct netdev_hw_addr *ha;
  #line 2401 
  unsigned long mc_filter[2U];
  #line 2402 
  unsigned int bitnr;
  #line 2403 
  struct macb *bp = netdev_priv(dev);
  #line 2405 
  mc_filter[0] = 0UL;
  #line 2406 
  mc_filter[1] = 0UL;
  #line 2408 
  __mptr = (void *)dev->mc.list.next;
  #line 2408 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 2408 
  while (& ha->list != & dev->mc.list) {
    #line 2408 
    void *__mptr_0;
    {
      #line 2409 
      bitnr = (unsigned int)hash_get_index((__u8 *)(& ha->addr));
      #line 2410 
      mc_filter[bitnr >> 5] |= (unsigned long)(1 << (bitnr & 31U));
    }
    #line 2408 
    __mptr_0 = (void *)ha->list.next;
    #line 2408 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  {
    #line 2413 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 2413 
                                   (*(bp->macb_reg_writel))(bp,128,(unsigned int)mc_filter[0]); else 
                                                                    #line 2413 
                                                                    (*(bp->macb_reg_writel))(bp,144,(unsigned int)mc_filter[0]);
  }
  {
    #line 2414 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 2414 
                                   (*(bp->macb_reg_writel))(bp,132,(unsigned int)mc_filter[1]); else 
                                                                    #line 2414 
                                                                    (*(bp->macb_reg_writel))(bp,148,(unsigned int)mc_filter[1]);
  }
  #line 2416 
  return;
}

#line 2418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_set_rx_mode(struct net_device *dev)
{
  #line 2420 
  unsigned long cfg;
  #line 2421 
  struct macb *bp = netdev_priv(dev);
  #line 2423 
  cfg = (unsigned long)(*(bp->macb_reg_readl))(bp,4);
  #line 2425 
  if ((dev->flags & 256U) != 0U) {
    #line 2427 
    cfg |= 16UL;
    #line 2430 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 2431 
                                   cfg &= 18446744073692774399UL;
  }
  else {
    #line 2434 
    cfg &= 18446744073709551599UL;
    #line 2437 
    if ((int)macb_is_gem(bp) != 0) 
      #line 2437 
      if ((dev->features & 549755813888ULL) != 0ULL) 
                                                     #line 2438 
                                                     cfg |= 16777216UL;
  }
  #line 2441 
  if ((dev->flags & 512U) != 0U) {
    {
      #line 2443 
      if ((int)macb_is_gem(bp) != 0) 
                                     #line 2443 
                                     (*(bp->macb_reg_writel))(bp,128,4294967295U); else 
                                                                    #line 2443 
                                                                    (*(bp->macb_reg_writel))(bp,144,4294967295U);
    }
    {
      #line 2444 
      if ((int)macb_is_gem(bp) != 0) 
                                     #line 2444 
                                     (*(bp->macb_reg_writel))(bp,132,4294967295U); else 
                                                                    #line 2444 
                                                                    (*(bp->macb_reg_writel))(bp,148,4294967295U);
    }
    #line 2445 
    cfg |= 64UL;
  }
  else 
    #line 2446 
    if (dev->mc.count != 0) {
      #line 2448 
      macb_sethashtable(dev);
      #line 2449 
      cfg |= 64UL;
    }
    else 
      #line 2450 
      if ((dev->flags & 4294966783U) != 0U) {
        {
          #line 2452 
          if ((int)macb_is_gem(bp) != 0) 
                                         #line 2452 
                                         (*(bp->macb_reg_writel))(bp,128,0U); else 
                                                                    #line 2452 
                                                                    (*(bp->macb_reg_writel))(bp,144,0U);
        }
        {
          #line 2453 
          if ((int)macb_is_gem(bp) != 0) 
                                         #line 2453 
                                         (*(bp->macb_reg_writel))(bp,132,0U); else 
                                                                    #line 2453 
                                                                    (*(bp->macb_reg_writel))(bp,148,0U);
        }
        #line 2454 
        cfg &= 18446744073709551551UL;
      }
  #line 2457 
  (*(bp->macb_reg_writel))(bp,4,(unsigned int)cfg);
  #line 2458 
  return;
}

#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_open(struct net_device *dev)
{
  #line 2464 
  struct macb_queue *queue;
  #line 2465 
  unsigned int q;
  #line 2466 
  int err;
  #line 2462 
  size_t bufsz = (unsigned long)(dev->mtu + 18U);
  #line 2463 
  struct macb *bp = netdev_priv(dev);
  {
    #line 2468 
    bool branch;
    #line 2468 
    struct _ddebug __UNIQUE_ID_ddebug549 = {.modname = (char *)"macb", .function = (char *)"macb_open", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c", .format = (char *)"open\n", .lineno = (unsigned int)2468U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2468 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug549.key.dd_key_false.key,(_Bool)0);
    #line 2468 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2468 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug549,bp->dev,(char *)"open\n");
  }
  #line 2470 
  err = pm_runtime_get_sync(& (bp->pdev)->dev);
  #line 2471 
  if (err < 0) 
               #line 2472 
               goto pm_exit;
  #line 2475 
  macb_init_rx_buffer_size(bp,bufsz);
  #line 2477 
  err = macb_alloc_consistent(bp);
  #line 2478 
  if (err != 0) {
    #line 2479 
    netdev_err(dev,(char *)"Unable to allocate DMA memory (error %d)\n",err);
    #line 2481 
    goto pm_exit;
  }
  #line 2484 
  q = 0U;
  #line 2484 
  queue = (struct macb_queue *)(& bp->queues);
  #line 2484 
  while (bp->num_queues > q) {
    #line 2485 
    napi_enable(& queue->napi);
    #line 2484 
    q ++;
    #line 2484 
    queue ++;
  }
  #line 2487 
  macb_init_hw(bp);
  #line 2489 
  err = macb_phylink_connect(bp);
  #line 2490 
  if (err != 0) 
                #line 2491 
                goto pm_exit;
  #line 2493 
  netif_tx_start_all_queues(dev);
  #line 2495 
  if (bp->ptp_info != (struct macb_ptp_info *)0) 
                                                 #line 2496 
                                                 (*((bp->ptp_info)->ptp_init))(dev);
  #line 2498 
  pm_exit: 
           #line 2498 
  ;
  #line 2499 
  if (err != 0) {
    #line 2500 
    pm_runtime_put_sync(& (bp->pdev)->dev);
    #line 2501 
    return err;
  }
  #line 2503 
  return 0;
}

#line 2506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_close(struct net_device *dev)
{
  #line 2509 
  struct macb_queue *queue;
  #line 2510 
  unsigned long flags;
  #line 2511 
  unsigned int q;
  #line 2508 
  struct macb *bp = netdev_priv(dev);
  #line 2513 
  netif_tx_stop_all_queues(dev);
  #line 2515 
  q = 0U;
  #line 2515 
  queue = (struct macb_queue *)(& bp->queues);
  #line 2515 
  while (bp->num_queues > q) {
    #line 2516 
    napi_disable(& queue->napi);
    #line 2515 
    q ++;
    #line 2515 
    queue ++;
  }
  #line 2518 
  phylink_stop(bp->phylink);
  #line 2519 
  phylink_disconnect_phy(bp->phylink);
  #line 2521 
  cif___ldv_spin_lock_lock_of_macb(& bp->lock);
  #line 2522 
  macb_reset_hw(bp);
  #line 2523 
  netif_carrier_off(dev);
  #line 2524 
  cif_spin_unlock_irqrestore_lock_of_macb(& bp->lock,flags);
  #line 2526 
  macb_free_consistent(bp);
  #line 2528 
  if (bp->ptp_info != (struct macb_ptp_info *)0) 
                                                 #line 2529 
                                                 (*((bp->ptp_info)->ptp_remove))(dev);
  #line 2531 
  pm_runtime_put(& (bp->pdev)->dev);
  #line 2533 
  return 0;
}

#line 2536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 2538 
  if ((int)netif_running(dev) != 0) 
                                    #line 2539 
                                    return -16;
  #line 2541 
  dev->mtu = (unsigned int)new_mtu;
  #line 2543 
  return 0;
}

#line 2546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void gem_update_stats(struct macb *bp)
{
  #line 2548 
  struct macb_queue *queue;
  #line 2549 
  unsigned int i;
  #line 2549 
  unsigned int q;
  #line 2549 
  unsigned int idx;
  #line 2550 
  unsigned long *stat;
  #line 2552 
  u32 *p = & bp->hw_stats.gem.tx_octets_31_0;
  #line 2554 
  i = 0U;
  #line 2554 
  while (i <= 42U) {
    {
      #line 2555 
      u32 offset = (unsigned int)gem_statistics[i].offset;
      #line 2556 
      u64 val = (unsigned long long)(*(bp->macb_reg_readl))(bp,(int)offset);
      #line 2558 
      bp->ethtool_stats[i] += val;
      #line 2559 
      *p += (unsigned int)val;
      #line 2561 
      if (offset == 256U || offset == 336U) {
        #line 2563 
        val = (unsigned long long)(*(bp->macb_reg_readl))(bp,(int)(offset + 4U));
        #line 2564 
        bp->ethtool_stats[i] += val << 32;
        #line 2565 
        p ++;
        #line 2565 
        *p += (unsigned int)val;
      }
    }
    #line 2554 
    i ++;
    #line 2554 
    p ++;
  }
  #line 2569 
  idx = 43U;
  #line 2570 
  q = 0U;
  #line 2570 
  queue = (struct macb_queue *)(& bp->queues);
  #line 2570 
  while (bp->num_queues > q) {
    #line 2571 
    i = 0U;
    #line 2571 
    stat = & queue->stats.__anonCompField_queue_stats_200.first;
    #line 2571 
    while (i <= 5U) {
      #line 2572 
      unsigned int tmp_1;
      #line 2572 
      tmp_1 = idx;
      #line 2572 
      idx ++;
      #line 2572 
      bp->ethtool_stats[tmp_1] = (unsigned long long)*stat;
      #line 2571 
      i ++;
      #line 2571 
      stat ++;
    }
    #line 2570 
    q ++;
    #line 2570 
    queue ++;
  }
  #line 2574 
  return;
}

#line 2575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct net_device_stats *gem_get_stats(struct macb *bp)
{
  #line 2577 
  struct gem_stats *hwstat = & bp->hw_stats.gem;
  #line 2578 
  struct net_device_stats *nstat = & (bp->dev)->stats;
  #line 2580 
  gem_update_stats(bp);
  #line 2582 
  nstat->rx_errors = (unsigned long)(((((((hwstat->rx_frame_check_sequence_errors + hwstat->rx_alignment_errors) + hwstat->rx_resource_errors) + hwstat->rx_overruns) + hwstat->rx_oversize_frames) + hwstat->rx_jabbers) + hwstat->rx_undersized_frames) + hwstat->rx_length_field_frame_errors);
  #line 2590 
  nstat->tx_errors = (unsigned long)(((hwstat->tx_late_collisions + hwstat->tx_excessive_collisions) + hwstat->tx_underrun) + hwstat->tx_carrier_sense_errors);
  #line 2594 
  nstat->multicast = (unsigned long)hwstat->rx_multicast_frames;
  #line 2595 
  nstat->collisions = (unsigned long)((hwstat->tx_single_collision_frames + hwstat->tx_multiple_collision_frames) + hwstat->tx_excessive_collisions);
  #line 2598 
  nstat->rx_length_errors = (unsigned long)(((hwstat->rx_oversize_frames + hwstat->rx_jabbers) + hwstat->rx_undersized_frames) + hwstat->rx_length_field_frame_errors);
  #line 2602 
  nstat->rx_over_errors = (unsigned long)hwstat->rx_resource_errors;
  #line 2603 
  nstat->rx_crc_errors = (unsigned long)hwstat->rx_frame_check_sequence_errors;
  #line 2604 
  nstat->rx_frame_errors = (unsigned long)hwstat->rx_alignment_errors;
  #line 2605 
  nstat->rx_fifo_errors = (unsigned long)hwstat->rx_overruns;
  #line 2606 
  nstat->tx_aborted_errors = (unsigned long)hwstat->tx_excessive_collisions;
  #line 2607 
  nstat->tx_carrier_errors = (unsigned long)hwstat->tx_carrier_sense_errors;
  #line 2608 
  nstat->tx_fifo_errors = (unsigned long)hwstat->tx_underrun;
  #line 2610 
  return nstat;
}

#line 2613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void gem_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  #line 2616 
  struct macb *bp;
  #line 2618 
  bp = (struct macb *)netdev_priv(dev);
  #line 2619 
  gem_update_stats(bp);
  #line 2620 
  memcpy((void *)data,(void *)(& bp->ethtool_stats),728UL);
  #line 2621 
  return;
}

#line 2624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int gem_get_sset_count(struct net_device *dev, int sset)
{
  #line 2626 
  struct macb *bp = netdev_priv(dev);
  #line 2628 
  switch (sset) {
    #line 2629 
    case 1: 
            #line 2629 
    ;
    #line 2630 
    return (int)(bp->num_queues * 6U + 43U);
    #line 2631 
    default: 
             #line 2631 
    ;
    #line 2632 
    return -95;
  }
}

#line 2636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void gem_get_ethtool_strings(struct net_device *dev, u32 sset, u8 *p)
{
  #line 2638 
  char stat_string[32U];
  #line 2640 
  struct macb_queue *queue;
  #line 2641 
  unsigned int i;
  #line 2642 
  unsigned int q;
  #line 2639 
  struct macb *bp = netdev_priv(dev);
  #line 2644 
  switch (sset) {
    #line 2645 
    case (u32)1: 
                 #line 2645 
    ;
    #line 2646 
    i = 0U;
    #line 2646 
    while (i <= 42U) {
      #line 2647 
      memcpy((void *)p,(void *)(& gem_statistics[i].stat_string),32UL);
      #line 2646 
      i ++;
      #line 2646 
      p += 32U;
    }
    #line 2650 
    q = 0U;
    #line 2650 
    queue = (struct macb_queue *)(& bp->queues);
    #line 2650 
    while (bp->num_queues > q) {
      #line 2651 
      i = 0U;
      #line 2651 
      while (i <= 5U) {
        #line 2652 
        snprintf((char *)(& stat_string),32UL,(char *)"q%d_%s",q,(char *)(& queue_statistics[i].stat_string));
        #line 2654 
        memcpy((void *)p,(void *)(& stat_string),32UL);
        #line 2651 
        i ++;
        #line 2651 
        p += 32U;
      }
      #line 2650 
      q ++;
      #line 2650 
      queue ++;
    }
    #line 2657 
    break;
  }
  #line 2659 
  return;
}

#line 2661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct net_device_stats *macb_get_stats(struct net_device *dev)
{
  #line 2663 
  struct macb *bp = netdev_priv(dev);
  #line 2664 
  struct net_device_stats *nstat = & (bp->dev)->stats;
  #line 2665 
  struct macb_stats *hwstat = & bp->hw_stats.macb;
  #line 2667 
  if ((int)macb_is_gem(bp) != 0) {
    #line 2668 
    return gem_get_stats(bp);
  }
  #line 2671 
  macb_update_stats(bp);
  #line 2674 
  nstat->rx_errors = (unsigned long)(((((((hwstat->rx_fcs_errors + hwstat->rx_align_errors) + hwstat->rx_resource_errors) + hwstat->rx_overruns) + hwstat->rx_oversize_pkts) + hwstat->rx_jabbers) + hwstat->rx_undersize_pkts) + hwstat->rx_length_mismatch);
  #line 2682 
  nstat->tx_errors = (unsigned long)((((hwstat->tx_late_cols + hwstat->tx_excessive_cols) + hwstat->tx_underruns) + hwstat->tx_carrier_errors) + hwstat->sqe_test_errors);
  #line 2687 
  nstat->collisions = (unsigned long)((hwstat->tx_single_cols + hwstat->tx_multiple_cols) + hwstat->tx_excessive_cols);
  #line 2690 
  nstat->rx_length_errors = (unsigned long)(((hwstat->rx_oversize_pkts + hwstat->rx_jabbers) + hwstat->rx_undersize_pkts) + hwstat->rx_length_mismatch);
  #line 2694 
  nstat->rx_over_errors = (unsigned long)(hwstat->rx_resource_errors + hwstat->rx_overruns);
  #line 2696 
  nstat->rx_crc_errors = (unsigned long)hwstat->rx_fcs_errors;
  #line 2697 
  nstat->rx_frame_errors = (unsigned long)hwstat->rx_align_errors;
  #line 2698 
  nstat->rx_fifo_errors = (unsigned long)hwstat->rx_overruns;
  #line 2700 
  nstat->tx_aborted_errors = (unsigned long)hwstat->tx_excessive_cols;
  #line 2701 
  nstat->tx_carrier_errors = (unsigned long)hwstat->tx_carrier_errors;
  #line 2702 
  nstat->tx_fifo_errors = (unsigned long)hwstat->tx_underruns;
  #line 2705 
  return nstat;
}

#line 2708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_get_regs_len(struct net_device *netdev)
{
  #line 2710 
  return 64;
}

#line 2713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *p)
{
  #line 2727 
  u32 __v;
  #line 2717 
  unsigned int tail;
  #line 2717 
  unsigned int head;
  #line 2716 
  struct macb *bp = netdev_priv(dev);
  #line 2718 
  u32 *regs_buff = (u32 *)p;
  #line 2720 
  regs->version = ((*(bp->macb_reg_readl))(bp,252) & 65535U) | 2U;
  #line 2723 
  tail = macb_tx_ring_wrap(bp,bp->queues[0].tx_tail);
  #line 2724 
  head = macb_tx_ring_wrap(bp,bp->queues[0].tx_head);
  #line 2726 
  *regs_buff = (*(bp->macb_reg_readl))(bp,0);
  {
    #line 2727 
    if ((int)macb_is_gem(bp) != 0) 
                                   #line 2727 
                                   __v = (*(bp->macb_reg_readl))(bp,4); else 
                                                                    #line 2727 
                                                                    __v = (*(bp->macb_reg_readl))(bp,4);
  }
  #line 2727 
  *(regs_buff + 1U) = __v;
  #line 2728 
  *(regs_buff + 2U) = (*(bp->macb_reg_readl))(bp,8);
  #line 2729 
  *(regs_buff + 3U) = (*(bp->macb_reg_readl))(bp,20);
  #line 2730 
  *(regs_buff + 4U) = (*(bp->macb_reg_readl))(bp,24);
  #line 2731 
  *(regs_buff + 5U) = (*(bp->macb_reg_readl))(bp,28);
  #line 2732 
  *(regs_buff + 6U) = (*(bp->macb_reg_readl))(bp,32);
  #line 2733 
  *(regs_buff + 7U) = (*(bp->macb_reg_readl))(bp,48);
  #line 2735 
  *(regs_buff + 8U) = tail;
  #line 2736 
  *(regs_buff + 9U) = head;
  #line 2737 
  *(regs_buff + 10U) = (unsigned int)macb_tx_dma(& bp->queues[0],tail);
  #line 2738 
  *(regs_buff + 11U) = (unsigned int)macb_tx_dma(& bp->queues[0],head);
  #line 2740 
  if ((bp->caps & 16U) == 0U) {
    #line 2741 
    u32 __v_0;
    {
      #line 2741 
      if ((int)macb_is_gem(bp) != 0) 
                                     #line 2741 
                                     __v_0 = (*(bp->macb_reg_readl))(bp,12); else 
                                                                    #line 2741 
                                                                    __v_0 = (*(bp->macb_reg_readl))(bp,192);
    }
    #line 2741 
    *(regs_buff + 12U) = __v_0;
  }
  #line 2742 
  if ((int)macb_is_gem(bp) != 0) 
                                 #line 2743 
                                 *(regs_buff + 13U) = (*(bp->macb_reg_readl))(bp,16);
  #line 2744 
  return;
}

#line 2746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_get_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  #line 2748 
  struct macb *bp = netdev_priv(netdev);
  #line 2750 
  wol->supported = 0U;
  #line 2751 
  wol->wolopts = 0U;
  #line 2753 
  if ((bp->wol & 1U) != 0U) 
                            #line 2754 
                            phylink_ethtool_get_wol(bp->phylink,wol);
  #line 2755 
  return;
}

#line 2757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_set_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  #line 2760 
  int ret;
  #line 2759 
  struct macb *bp = netdev_priv(netdev);
  #line 2762 
  ret = phylink_ethtool_set_wol(bp->phylink,wol);
  #line 2763 
  if (ret == 0) 
                #line 2764 
                return 0;
  #line 2766 
  if ((bp->wol & 1U) == 0U || (wol->wolopts & 4294967263U) != 0U) 
                                                                  #line 2768 
                                                                  return -95;
  #line 2770 
  if ((wol->wolopts & 32U) != 0U) 
                                  #line 2771 
                                  bp->wol |= 2U; else 
                                                      #line 2773 
                                                      bp->wol &= 4294967293U;
  #line 2775 
  device_set_wakeup_enable(& (bp->pdev)->dev,(_Bool)((bp->wol & 2U) != 0U));
  #line 2777 
  return 0;
}

#line 2780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *kset)
{
  #line 2783 
  struct macb *bp = netdev_priv(netdev);
  #line 2785 
  return phylink_ethtool_ksettings_get(bp->phylink,kset);
}

#line 2788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_set_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *kset)
{
  #line 2791 
  struct macb *bp = netdev_priv(netdev);
  #line 2793 
  return phylink_ethtool_ksettings_set(bp->phylink,kset);
}

#line 2796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 2799 
  struct macb *bp = netdev_priv(netdev);
  #line 2801 
  ring->rx_max_pending = 8192U;
  #line 2802 
  ring->tx_max_pending = 4096U;
  #line 2804 
  ring->rx_pending = bp->rx_ring_size;
  #line 2805 
  ring->tx_pending = bp->tx_ring_size;
  #line 2806 
  return;
}

#line 2808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 2818 
  unsigned int __UNIQUE_ID___x552;
  #line 2822 
  unsigned int tmp_73;
  #line 2818 
  unsigned int tmp_2;
  #line 2822 
  unsigned int __UNIQUE_ID___x556;
  #line 2812 
  u32 new_rx_size;
  #line 2812 
  u32 new_tx_size;
  #line 2811 
  struct macb *bp = netdev_priv(netdev);
  #line 2813 
  unsigned int reset = 0U;
  #line 2815 
  if (ring->rx_mini_pending != 0U || ring->rx_jumbo_pending != 0U) 
                                                                   #line 2816 
                                                                   return -22;
  {
    #line 2818 
    unsigned int __UNIQUE_ID___x550;
    #line 2818 
    unsigned int tmp_0;
    {
      #line 2818 
      __UNIQUE_ID___x550 = ring->rx_pending;
      #line 2818 
      unsigned int __UNIQUE_ID___y551 = 64U;
      #line 2818 
      if (__UNIQUE_ID___x550 > __UNIQUE_ID___y551) 
                                                   #line 2818 
                                                   tmp_0 = __UNIQUE_ID___x550; else 
                                                                    #line 2818 
                                                                    tmp_0 = __UNIQUE_ID___y551;
      }
    #line 2818 
    __UNIQUE_ID___x552 = tmp_0;
    #line 2818 
    unsigned int __UNIQUE_ID___y553 = 8192U;
    #line 2818 
    if (__UNIQUE_ID___x552 < __UNIQUE_ID___y553) 
                                                 #line 2818 
                                                 tmp_2 = __UNIQUE_ID___x552; else 
                                                                    #line 2818 
                                                                    tmp_2 = __UNIQUE_ID___y553;
    }
  #line 2818 
  new_rx_size = tmp_2;
  #line 2820 
  if (0 != 0) {
    #line 2820 
    unsigned int tmp_10;
    #line 2820 
    unsigned int tmp_42;
    #line 2820 
    unsigned int tmp_43;
    #line 2820 
    unsigned int tmp_11;
    #line 2820 
    unsigned int tmp_12;
    #line 2820 
    unsigned int tmp_44;
    #line 2820 
    unsigned int tmp_45;
    #line 2820 
    unsigned int tmp_13;
    #line 2820 
    unsigned int tmp_14;
    #line 2820 
    unsigned int tmp_46;
    #line 2820 
    unsigned int tmp_47;
    #line 2820 
    unsigned int tmp_15;
    #line 2820 
    unsigned int tmp_16;
    #line 2820 
    unsigned int tmp_48;
    #line 2820 
    unsigned int tmp_49;
    #line 2820 
    unsigned int tmp_17;
    #line 2820 
    unsigned int tmp_18;
    #line 2820 
    unsigned int tmp_50;
    #line 2820 
    unsigned int tmp_51;
    #line 2820 
    unsigned int tmp_19;
    #line 2820 
    unsigned int tmp_20;
    #line 2820 
    unsigned int tmp_52;
    #line 2820 
    unsigned int tmp_53;
    #line 2820 
    unsigned int tmp_21;
    #line 2820 
    unsigned int tmp_22;
    #line 2820 
    unsigned int tmp_54;
    #line 2820 
    unsigned int tmp_55;
    #line 2820 
    unsigned int tmp_23;
    #line 2820 
    unsigned int tmp_24;
    #line 2820 
    unsigned int tmp_56;
    #line 2820 
    unsigned int tmp_57;
    #line 2820 
    unsigned int tmp_25;
    #line 2820 
    unsigned int tmp_26;
    #line 2820 
    unsigned int tmp_58;
    #line 2820 
    unsigned int tmp_59;
    #line 2820 
    unsigned int tmp_27;
    #line 2820 
    unsigned int tmp_28;
    #line 2820 
    unsigned int tmp_60;
    #line 2820 
    unsigned int tmp_61;
    #line 2820 
    unsigned int tmp_29;
    #line 2820 
    unsigned int tmp_30;
    #line 2820 
    unsigned int tmp_62;
    #line 2820 
    unsigned int tmp_63;
    #line 2820 
    unsigned int tmp_31;
    #line 2820 
    unsigned int tmp_32;
    #line 2820 
    unsigned int tmp_64;
    #line 2820 
    unsigned int tmp_65;
    #line 2820 
    unsigned int tmp_33;
    #line 2820 
    unsigned int tmp_34;
    #line 2820 
    unsigned int tmp_66;
    #line 2820 
    unsigned int tmp_35;
    #line 2820 
    unsigned int tmp_68;
    #line 2820 
    unsigned int tmp_4;
    #line 2820 
    unsigned int tmp_36;
    #line 2820 
    unsigned int tmp_37;
    #line 2820 
    unsigned int tmp_5;
    #line 2820 
    unsigned int tmp_6;
    #line 2820 
    unsigned int tmp_38;
    #line 2820 
    unsigned int tmp_39;
    #line 2820 
    unsigned int tmp_7;
    #line 2820 
    unsigned int tmp_8;
    #line 2820 
    unsigned int tmp_40;
    #line 2820 
    unsigned int tmp_41;
    #line 2820 
    unsigned int tmp_9;
    #line 2820 
    unsigned int tmp_69;
    #line 2820 
    if (new_rx_size != 1U) {
      #line 2820 
      if (0 != 0) {
        #line 2820 
        if (new_rx_size + 4294967295U > 1U) {
          #line 2820 
          if (((unsigned long long)(new_rx_size + 4294967295U) & 9223372036854775808ULL) == 0ULL) {
            #line 2820 
            if (((unsigned long long)(new_rx_size + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
              #line 2820 
              if (((unsigned long long)(new_rx_size + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                #line 2820 
                if (((unsigned long long)(new_rx_size + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                  #line 2820 
                  if (((unsigned long long)(new_rx_size + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                    #line 2820 
                    if (((unsigned long long)(new_rx_size + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                      #line 2820 
                      if (((unsigned long long)(new_rx_size + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                        #line 2820 
                        if (((unsigned long long)(new_rx_size + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                          #line 2820 
                          if (((unsigned long long)(new_rx_size + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                            #line 2820 
                            if (((unsigned long long)(new_rx_size + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                              #line 2820 
                              if (((unsigned long long)(new_rx_size + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                #line 2820 
                                if (((unsigned long long)(new_rx_size + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                  #line 2820 
                                  if (((unsigned long long)(new_rx_size + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                    #line 2820 
                                    if (((unsigned long long)(new_rx_size + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                      #line 2820 
                                      if (((unsigned long long)(new_rx_size + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                        #line 2820 
                                        if (((unsigned long long)(new_rx_size + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                          #line 2820 
                                          if (((unsigned long long)(new_rx_size + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                            #line 2820 
                                            if (((unsigned long long)(new_rx_size + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                              #line 2820 
                                              if (((unsigned long long)(new_rx_size + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                #line 2820 
                                                if (((unsigned long long)(new_rx_size + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                  #line 2820 
                                                  if (((unsigned long long)(new_rx_size + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                    #line 2820 
                                                    if (((unsigned long long)(new_rx_size + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                      #line 2820 
                                                      if (((unsigned long long)(new_rx_size + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                        #line 2820 
                                                        if (((unsigned long long)(new_rx_size + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                          #line 2820 
                                                          if (((unsigned long long)(new_rx_size + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                            #line 2820 
                                                            if (((unsigned long long)(new_rx_size + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                              #line 2820 
                                                              if (((unsigned long long)(new_rx_size + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                #line 2820 
                                                                if (((unsigned long long)(new_rx_size + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                  #line 2820 
                                                                  if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 2147483648ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 512ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 256ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 128ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 64ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 32ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 16ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 8ULL) == 0ULL) {
                                                                    #line 2820 
                                                                    if (
                                                                    ((unsigned long long)(new_rx_size + 4294967295U) & 4ULL) != 0ULL) 
                                                                    #line 2820 
                                                                    tmp_4 = 8U; else 
                                                                    #line 2820 
                                                                    tmp_4 = 4U;
                                                                    #line 2820 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_5 = 16U;
                                                                    #line 2820 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_6 = 32U;
                                                                    #line 2820 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_7 = 64U;
                                                                    #line 2820 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_8 = 128U;
                                                                    #line 2820 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_9 = 256U;
                                                                    #line 2820 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_10 = 512U;
                                                                    #line 2820 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_11 = 1024U;
                                                                    #line 2820 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_12 = 2048U;
                                                                    #line 2820 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_13 = 4096U;
                                                                    #line 2820 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_14 = 8192U;
                                                                    #line 2820 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_15 = 16384U;
                                                                    #line 2820 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_16 = 32768U;
                                                                    #line 2820 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_17 = 65536U;
                                                                    #line 2820 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_18 = 131072U;
                                                                    #line 2820 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_19 = 262144U;
                                                                    #line 2820 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_20 = 524288U;
                                                                    #line 2820 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_21 = 1048576U;
                                                                    #line 2820 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_22 = 2097152U;
                                                                    #line 2820 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_23 = 4194304U;
                                                                    #line 2820 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_24 = 8388608U;
                                                                    #line 2820 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_25 = 16777216U;
                                                                    #line 2820 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_26 = 33554432U;
                                                                    #line 2820 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_27 = 67108864U;
                                                                    #line 2820 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_28 = 134217728U;
                                                                    #line 2820 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_29 = 268435456U;
                                                                    #line 2820 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_30 = 536870912U;
                                                                    #line 2820 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_31 = 1073741824U;
                                                                    #line 2820 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_32 = 2147483648U;
                                                                    #line 2820 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_33 = 0U;
                                                                    #line 2820 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_34 = 0U;
                                                                    #line 2820 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_35 = 0U;
                                                                    #line 2820 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    #line 2820 
                                                                    tmp_36 = 0U;
                                                                    #line 2820 
                                                                    tmp_37 = tmp_36;
                                                                  }
                                                                  else 
                                                                    #line 2820 
                                                                    tmp_37 = 0U;
                                                                  #line 2820 
                                                                  tmp_38 = tmp_37;
                                                                }
                                                                else 
                                                                  #line 2820 
                                                                  tmp_38 = 0U;
                                                                #line 2820 
                                                                tmp_39 = tmp_38;
                                                              }
                                                              else 
                                                                   #line 2820 
                                                                   tmp_39 = 0U;
                                                              #line 2820 
                                                              tmp_40 = tmp_39;
                                                            }
                                                            else 
                                                                 #line 2820 
                                                                 tmp_40 = 0U;
                                                            #line 2820 
                                                            tmp_41 = tmp_40;
                                                          }
                                                          else 
                                                               #line 2820 
                                                               tmp_41 = 0U;
                                                          #line 2820 
                                                          tmp_42 = tmp_41;
                                                        }
                                                        else 
                                                             #line 2820 
                                                             tmp_42 = 0U;
                                                        #line 2820 
                                                        tmp_43 = tmp_42;
                                                      }
                                                      else 
                                                           #line 2820 
                                                           tmp_43 = 0U;
                                                      #line 2820 
                                                      tmp_44 = tmp_43;
                                                    }
                                                    else 
                                                         #line 2820 
                                                         tmp_44 = 0U;
                                                    #line 2820 
                                                    tmp_45 = tmp_44;
                                                  }
                                                  else 
                                                       #line 2820 
                                                       tmp_45 = 0U;
                                                  #line 2820 
                                                  tmp_46 = tmp_45;
                                                }
                                                else 
                                                     #line 2820 
                                                     tmp_46 = 0U;
                                                #line 2820 
                                                tmp_47 = tmp_46;
                                              }
                                              else 
                                                   #line 2820 
                                                   tmp_47 = 0U;
                                              #line 2820 
                                              tmp_48 = tmp_47;
                                            }
                                            else 
                                                 #line 2820 
                                                 tmp_48 = 0U;
                                            #line 2820 
                                            tmp_49 = tmp_48;
                                          }
                                          else 
                                               #line 2820 
                                               tmp_49 = 0U;
                                          #line 2820 
                                          tmp_50 = tmp_49;
                                        }
                                        else 
                                             #line 2820 
                                             tmp_50 = 0U;
                                        #line 2820 
                                        tmp_51 = tmp_50;
                                      }
                                      else 
                                           #line 2820 
                                           tmp_51 = 0U;
                                      #line 2820 
                                      tmp_52 = tmp_51;
                                    }
                                    else 
                                         #line 2820 
                                         tmp_52 = 0U;
                                    #line 2820 
                                    tmp_53 = tmp_52;
                                  }
                                  else 
                                       #line 2820 
                                       tmp_53 = 0U;
                                  #line 2820 
                                  tmp_54 = tmp_53;
                                }
                                else 
                                     #line 2820 
                                     tmp_54 = 0U;
                                #line 2820 
                                tmp_55 = tmp_54;
                              }
                              else 
                                   #line 2820 
                                   tmp_55 = 0U;
                              #line 2820 
                              tmp_56 = tmp_55;
                            }
                            else 
                                 #line 2820 
                                 tmp_56 = 0U;
                            #line 2820 
                            tmp_57 = tmp_56;
                          }
                          else 
                               #line 2820 
                               tmp_57 = 0U;
                          #line 2820 
                          tmp_58 = tmp_57;
                        }
                        else 
                             #line 2820 
                             tmp_58 = 0U;
                        #line 2820 
                        tmp_59 = tmp_58;
                      }
                      else 
                           #line 2820 
                           tmp_59 = 0U;
                      #line 2820 
                      tmp_60 = tmp_59;
                    }
                    else 
                         #line 2820 
                         tmp_60 = 0U;
                    #line 2820 
                    tmp_61 = tmp_60;
                  }
                  else 
                       #line 2820 
                       tmp_61 = 0U;
                  #line 2820 
                  tmp_62 = tmp_61;
                }
                else 
                     #line 2820 
                     tmp_62 = 0U;
                #line 2820 
                tmp_63 = tmp_62;
              }
              else 
                   #line 2820 
                   tmp_63 = 0U;
              #line 2820 
              tmp_64 = tmp_63;
            }
            else 
                 #line 2820 
                 tmp_64 = 0U;
            #line 2820 
            tmp_65 = tmp_64;
          }
          else 
               #line 2820 
               tmp_65 = 0U;
          #line 2820 
          tmp_66 = tmp_65;
        }
        else 
             #line 2820 
             tmp_66 = 2U;
        #line 2820 
        tmp_68 = tmp_66;
      }
      else {
        #line 2820 
        tmp_68 = (unsigned int)(1UL << (__ilog2_u32(new_rx_size + 4294967295U) + 1));
      }
      #line 2820 
      tmp_69 = tmp_68;
    }
    else 
         #line 2820 
         tmp_69 = 1U;
    #line 2820 
    new_rx_size = tmp_69;
  }
  else {
    #line 2820 
    new_rx_size = (unsigned int)__roundup_pow_of_two((unsigned long)new_rx_size);
  }
  {
    #line 2822 
    unsigned int tmp_71;
    #line 2822 
    unsigned int __UNIQUE_ID___x554;
    {
      #line 2822 
      __UNIQUE_ID___x554 = ring->tx_pending;
      #line 2822 
      unsigned int __UNIQUE_ID___y555 = 64U;
      #line 2822 
      if (__UNIQUE_ID___x554 > __UNIQUE_ID___y555) 
                                                   #line 2822 
                                                   tmp_71 = __UNIQUE_ID___x554; else 
                                                                    #line 2822 
                                                                    tmp_71 = __UNIQUE_ID___y555;
      }
    #line 2822 
    __UNIQUE_ID___x556 = tmp_71;
    #line 2822 
    unsigned int __UNIQUE_ID___y557 = 4096U;
    #line 2822 
    if (__UNIQUE_ID___x556 < __UNIQUE_ID___y557) 
                                                 #line 2822 
                                                 tmp_73 = __UNIQUE_ID___x556; else 
                                                                    #line 2822 
                                                                    tmp_73 = __UNIQUE_ID___y557;
    }
  #line 2822 
  new_tx_size = tmp_73;
  #line 2824 
  if (0 != 0) {
    #line 2824 
    unsigned int tmp_134;
    #line 2824 
    unsigned int tmp_102;
    #line 2824 
    unsigned int tmp_103;
    #line 2824 
    unsigned int tmp_135;
    #line 2824 
    unsigned int tmp_136;
    #line 2824 
    unsigned int tmp_104;
    #line 2824 
    unsigned int tmp_105;
    #line 2824 
    unsigned int tmp_137;
    #line 2824 
    unsigned int tmp_106;
    #line 2824 
    unsigned int tmp_139;
    #line 2824 
    unsigned int tmp_75;
    #line 2824 
    unsigned int tmp_107;
    #line 2824 
    unsigned int tmp_108;
    #line 2824 
    unsigned int tmp_76;
    #line 2824 
    unsigned int tmp_77;
    #line 2824 
    unsigned int tmp_109;
    #line 2824 
    unsigned int tmp_110;
    #line 2824 
    unsigned int tmp_78;
    #line 2824 
    unsigned int tmp_79;
    #line 2824 
    unsigned int tmp_111;
    #line 2824 
    unsigned int tmp_112;
    #line 2824 
    unsigned int tmp_80;
    #line 2824 
    unsigned int tmp_81;
    #line 2824 
    unsigned int tmp_113;
    #line 2824 
    unsigned int tmp_114;
    #line 2824 
    unsigned int tmp_82;
    #line 2824 
    unsigned int tmp_83;
    #line 2824 
    unsigned int tmp_115;
    #line 2824 
    unsigned int tmp_116;
    #line 2824 
    unsigned int tmp_84;
    #line 2824 
    unsigned int tmp_85;
    #line 2824 
    unsigned int tmp_117;
    #line 2824 
    unsigned int tmp_118;
    #line 2824 
    unsigned int tmp_86;
    #line 2824 
    unsigned int tmp_87;
    #line 2824 
    unsigned int tmp_119;
    #line 2824 
    unsigned int tmp_120;
    #line 2824 
    unsigned int tmp_88;
    #line 2824 
    unsigned int tmp_89;
    #line 2824 
    unsigned int tmp_121;
    #line 2824 
    unsigned int tmp_122;
    #line 2824 
    unsigned int tmp_90;
    #line 2824 
    unsigned int tmp_91;
    #line 2824 
    unsigned int tmp_123;
    #line 2824 
    unsigned int tmp_124;
    #line 2824 
    unsigned int tmp_92;
    #line 2824 
    unsigned int tmp_93;
    #line 2824 
    unsigned int tmp_125;
    #line 2824 
    unsigned int tmp_126;
    #line 2824 
    unsigned int tmp_94;
    #line 2824 
    unsigned int tmp_95;
    #line 2824 
    unsigned int tmp_127;
    #line 2824 
    unsigned int tmp_128;
    #line 2824 
    unsigned int tmp_96;
    #line 2824 
    unsigned int tmp_97;
    #line 2824 
    unsigned int tmp_129;
    #line 2824 
    unsigned int tmp_130;
    #line 2824 
    unsigned int tmp_98;
    #line 2824 
    unsigned int tmp_99;
    #line 2824 
    unsigned int tmp_131;
    #line 2824 
    unsigned int tmp_132;
    #line 2824 
    unsigned int tmp_100;
    #line 2824 
    unsigned int tmp_101;
    #line 2824 
    unsigned int tmp_133;
    #line 2824 
    unsigned int tmp_140;
    #line 2824 
    if (new_tx_size != 1U) {
      #line 2824 
      if (0 != 0) {
        #line 2824 
        if (new_tx_size + 4294967295U > 1U) {
          #line 2824 
          if (((unsigned long long)(new_tx_size + 4294967295U) & 9223372036854775808ULL) == 0ULL) {
            #line 2824 
            if (((unsigned long long)(new_tx_size + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
              #line 2824 
              if (((unsigned long long)(new_tx_size + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                #line 2824 
                if (((unsigned long long)(new_tx_size + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                  #line 2824 
                  if (((unsigned long long)(new_tx_size + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                    #line 2824 
                    if (((unsigned long long)(new_tx_size + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                      #line 2824 
                      if (((unsigned long long)(new_tx_size + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                        #line 2824 
                        if (((unsigned long long)(new_tx_size + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                          #line 2824 
                          if (((unsigned long long)(new_tx_size + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                            #line 2824 
                            if (((unsigned long long)(new_tx_size + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                              #line 2824 
                              if (((unsigned long long)(new_tx_size + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                #line 2824 
                                if (((unsigned long long)(new_tx_size + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                  #line 2824 
                                  if (((unsigned long long)(new_tx_size + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                    #line 2824 
                                    if (((unsigned long long)(new_tx_size + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                      #line 2824 
                                      if (((unsigned long long)(new_tx_size + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                        #line 2824 
                                        if (((unsigned long long)(new_tx_size + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                          #line 2824 
                                          if (((unsigned long long)(new_tx_size + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                            #line 2824 
                                            if (((unsigned long long)(new_tx_size + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                              #line 2824 
                                              if (((unsigned long long)(new_tx_size + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                #line 2824 
                                                if (((unsigned long long)(new_tx_size + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                  #line 2824 
                                                  if (((unsigned long long)(new_tx_size + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                    #line 2824 
                                                    if (((unsigned long long)(new_tx_size + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                      #line 2824 
                                                      if (((unsigned long long)(new_tx_size + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                        #line 2824 
                                                        if (((unsigned long long)(new_tx_size + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                          #line 2824 
                                                          if (((unsigned long long)(new_tx_size + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                            #line 2824 
                                                            if (((unsigned long long)(new_tx_size + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                              #line 2824 
                                                              if (((unsigned long long)(new_tx_size + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                #line 2824 
                                                                if (((unsigned long long)(new_tx_size + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                  #line 2824 
                                                                  if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 2147483648ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 512ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 256ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 128ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 64ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 32ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 16ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 8ULL) == 0ULL) {
                                                                    #line 2824 
                                                                    if (
                                                                    ((unsigned long long)(new_tx_size + 4294967295U) & 4ULL) != 0ULL) 
                                                                    #line 2824 
                                                                    tmp_75 = 8U; else 
                                                                    #line 2824 
                                                                    tmp_75 = 4U;
                                                                    #line 2824 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_76 = 16U;
                                                                    #line 2824 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_77 = 32U;
                                                                    #line 2824 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_78 = 64U;
                                                                    #line 2824 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_79 = 128U;
                                                                    #line 2824 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_80 = 256U;
                                                                    #line 2824 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_81 = 512U;
                                                                    #line 2824 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_82 = 1024U;
                                                                    #line 2824 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_83 = 2048U;
                                                                    #line 2824 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_84 = 4096U;
                                                                    #line 2824 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_85 = 8192U;
                                                                    #line 2824 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_86 = 16384U;
                                                                    #line 2824 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_87 = 32768U;
                                                                    #line 2824 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_88 = 65536U;
                                                                    #line 2824 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_89 = 131072U;
                                                                    #line 2824 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_90 = 262144U;
                                                                    #line 2824 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_91 = 524288U;
                                                                    #line 2824 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_92 = 1048576U;
                                                                    #line 2824 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_93 = 2097152U;
                                                                    #line 2824 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_94 = 4194304U;
                                                                    #line 2824 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_95 = 8388608U;
                                                                    #line 2824 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_96 = 16777216U;
                                                                    #line 2824 
                                                                    tmp_97 = tmp_96;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_97 = 33554432U;
                                                                    #line 2824 
                                                                    tmp_98 = tmp_97;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_98 = 67108864U;
                                                                    #line 2824 
                                                                    tmp_99 = tmp_98;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_99 = 134217728U;
                                                                    #line 2824 
                                                                    tmp_100 = tmp_99;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_100 = 268435456U;
                                                                    #line 2824 
                                                                    tmp_101 = tmp_100;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_101 = 536870912U;
                                                                    #line 2824 
                                                                    tmp_102 = tmp_101;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_102 = 1073741824U;
                                                                    #line 2824 
                                                                    tmp_103 = tmp_102;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_103 = 2147483648U;
                                                                    #line 2824 
                                                                    tmp_104 = tmp_103;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_104 = 0U;
                                                                    #line 2824 
                                                                    tmp_105 = tmp_104;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_105 = 0U;
                                                                    #line 2824 
                                                                    tmp_106 = tmp_105;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_106 = 0U;
                                                                    #line 2824 
                                                                    tmp_107 = tmp_106;
                                                                    }
                                                                    else 
                                                                    #line 2824 
                                                                    tmp_107 = 0U;
                                                                    #line 2824 
                                                                    tmp_108 = tmp_107;
                                                                  }
                                                                  else 
                                                                    #line 2824 
                                                                    tmp_108 = 0U;
                                                                  #line 2824 
                                                                  tmp_109 = tmp_108;
                                                                }
                                                                else 
                                                                  #line 2824 
                                                                  tmp_109 = 0U;
                                                                #line 2824 
                                                                tmp_110 = tmp_109;
                                                              }
                                                              else 
                                                                   #line 2824 
                                                                   tmp_110 = 0U;
                                                              #line 2824 
                                                              tmp_111 = tmp_110;
                                                            }
                                                            else 
                                                                 #line 2824 
                                                                 tmp_111 = 0U;
                                                            #line 2824 
                                                            tmp_112 = tmp_111;
                                                          }
                                                          else 
                                                               #line 2824 
                                                               tmp_112 = 0U;
                                                          #line 2824 
                                                          tmp_113 = tmp_112;
                                                        }
                                                        else 
                                                             #line 2824 
                                                             tmp_113 = 0U;
                                                        #line 2824 
                                                        tmp_114 = tmp_113;
                                                      }
                                                      else 
                                                           #line 2824 
                                                           tmp_114 = 0U;
                                                      #line 2824 
                                                      tmp_115 = tmp_114;
                                                    }
                                                    else 
                                                         #line 2824 
                                                         tmp_115 = 0U;
                                                    #line 2824 
                                                    tmp_116 = tmp_115;
                                                  }
                                                  else 
                                                       #line 2824 
                                                       tmp_116 = 0U;
                                                  #line 2824 
                                                  tmp_117 = tmp_116;
                                                }
                                                else 
                                                     #line 2824 
                                                     tmp_117 = 0U;
                                                #line 2824 
                                                tmp_118 = tmp_117;
                                              }
                                              else 
                                                   #line 2824 
                                                   tmp_118 = 0U;
                                              #line 2824 
                                              tmp_119 = tmp_118;
                                            }
                                            else 
                                                 #line 2824 
                                                 tmp_119 = 0U;
                                            #line 2824 
                                            tmp_120 = tmp_119;
                                          }
                                          else 
                                               #line 2824 
                                               tmp_120 = 0U;
                                          #line 2824 
                                          tmp_121 = tmp_120;
                                        }
                                        else 
                                             #line 2824 
                                             tmp_121 = 0U;
                                        #line 2824 
                                        tmp_122 = tmp_121;
                                      }
                                      else 
                                           #line 2824 
                                           tmp_122 = 0U;
                                      #line 2824 
                                      tmp_123 = tmp_122;
                                    }
                                    else 
                                         #line 2824 
                                         tmp_123 = 0U;
                                    #line 2824 
                                    tmp_124 = tmp_123;
                                  }
                                  else 
                                       #line 2824 
                                       tmp_124 = 0U;
                                  #line 2824 
                                  tmp_125 = tmp_124;
                                }
                                else 
                                     #line 2824 
                                     tmp_125 = 0U;
                                #line 2824 
                                tmp_126 = tmp_125;
                              }
                              else 
                                   #line 2824 
                                   tmp_126 = 0U;
                              #line 2824 
                              tmp_127 = tmp_126;
                            }
                            else 
                                 #line 2824 
                                 tmp_127 = 0U;
                            #line 2824 
                            tmp_128 = tmp_127;
                          }
                          else 
                               #line 2824 
                               tmp_128 = 0U;
                          #line 2824 
                          tmp_129 = tmp_128;
                        }
                        else 
                             #line 2824 
                             tmp_129 = 0U;
                        #line 2824 
                        tmp_130 = tmp_129;
                      }
                      else 
                           #line 2824 
                           tmp_130 = 0U;
                      #line 2824 
                      tmp_131 = tmp_130;
                    }
                    else 
                         #line 2824 
                         tmp_131 = 0U;
                    #line 2824 
                    tmp_132 = tmp_131;
                  }
                  else 
                       #line 2824 
                       tmp_132 = 0U;
                  #line 2824 
                  tmp_133 = tmp_132;
                }
                else 
                     #line 2824 
                     tmp_133 = 0U;
                #line 2824 
                tmp_134 = tmp_133;
              }
              else 
                   #line 2824 
                   tmp_134 = 0U;
              #line 2824 
              tmp_135 = tmp_134;
            }
            else 
                 #line 2824 
                 tmp_135 = 0U;
            #line 2824 
            tmp_136 = tmp_135;
          }
          else 
               #line 2824 
               tmp_136 = 0U;
          #line 2824 
          tmp_137 = tmp_136;
        }
        else 
             #line 2824 
             tmp_137 = 2U;
        #line 2824 
        tmp_139 = tmp_137;
      }
      else {
        #line 2824 
        tmp_139 = (unsigned int)(1UL << (__ilog2_u32(new_tx_size + 4294967295U) + 1));
      }
      #line 2824 
      tmp_140 = tmp_139;
    }
    else 
         #line 2824 
         tmp_140 = 1U;
    #line 2824 
    new_tx_size = tmp_140;
  }
  else {
    #line 2824 
    new_tx_size = (unsigned int)__roundup_pow_of_two((unsigned long)new_tx_size);
  }
  #line 2826 
  if (bp->tx_ring_size == new_tx_size && bp->rx_ring_size == new_rx_size) 
    #line 2829 
    return 0;
  #line 2832 
  if ((int)netif_running(bp->dev) != 0) {
    #line 2833 
    reset = 1U;
    #line 2834 
    macb_close(bp->dev);
  }
  #line 2837 
  bp->rx_ring_size = new_rx_size;
  #line 2838 
  bp->tx_ring_size = new_tx_size;
  #line 2840 
  if (reset != 0U) 
                   #line 2841 
                   macb_open(bp->dev);
  #line 2843 
  return 0;
}

#line 2847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static unsigned int gem_get_tsu_rate(struct macb *bp)
{
  #line 2849 
  struct clk *tsu_clk;
  #line 2850 
  unsigned int tsu_rate;
  #line 2852 
  tsu_clk = devm_clk_get(& (bp->pdev)->dev,(char *)"tsu_clk");
  #line 2853 
  if (IS_ERR((void *)tsu_clk)) {
    #line 2856 
    if (IS_ERR((void *)bp->pclk)) 
                                  #line 2860 
                                  return 4294966772U;
    else {
      #line 2857 
      tsu_clk = bp->pclk;
      #line 2858 
      tsu_rate = (unsigned int)clk_get_rate(tsu_clk);
    }
  }
  else {
    #line 2854 
    tsu_rate = (unsigned int)clk_get_rate(tsu_clk);
  }
  #line 2861 
  return tsu_rate;
}

#line 2864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static s32 gem_get_ptp_max_adj(void)
{
  #line 2866 
  return 64000000;
}

#line 2869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int gem_get_ts_info(struct net_device *dev, struct ethtool_ts_info *info)
{
  #line 2872 
  struct macb *bp = netdev_priv(dev);
  #line 2874 
  if (((int)bp->hw_dma_cap & 2) == 0) {
    #line 2875 
    ethtool_op_get_ts_info(dev,info);
    #line 2876 
    return 0;
  }
  #line 2879 
  info->so_timestamping = 95U;
  #line 2886 
  info->tx_types = 7U;
  #line 2890 
  info->rx_filters = 3U;
  #line 2894 
  if (bp->ptp_clock != (struct ptp_clock *)0) 
                                              #line 2894 
                                              info->phc_index = ptp_clock_index(bp->ptp_clock); else 
                                                                    #line 2894 
                                                                    info->phc_index = -1;
  #line 2896 
  return 0;
}

#line 2899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_ptp_info gem_ptp_info = {.ptp_init = & gem_ptp_init, .ptp_remove = & gem_ptp_remove, .get_ptp_max_adj = & gem_get_ptp_max_adj, .get_tsu_rate = & gem_get_tsu_rate, .get_ts_info = & gem_get_ts_info, .get_hwtst = & gem_get_hwtst, .set_hwtst = & gem_set_hwtst};
#line 2910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_get_ts_info(struct net_device *netdev, struct ethtool_ts_info *info)
{
  #line 2913 
  struct macb *bp = netdev_priv(netdev);
  #line 2915 
  if (bp->ptp_info != (struct macb_ptp_info *)0) {
    #line 2916 
    return (*((bp->ptp_info)->get_ts_info))(netdev,info);
  }
  #line 2918 
  return ethtool_op_get_ts_info(netdev,info);
}

#line 2921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void gem_enable_flow_filters(struct macb *bp, bool enable)
{
  #line 2933 
  void *__mptr;
  #line 2924 
  struct ethtool_rx_fs_item *item;
  #line 2925 
  u32 t2_scr;
  #line 2926 
  int num_t2_scr;
  #line 2923 
  struct net_device *netdev = bp->dev;
  #line 2928 
  if ((netdev->features & 137438953472ULL) == 0ULL) 
                                                    #line 2929 
                                                    return;
  #line 2931 
  num_t2_scr = (int)((*(bp->macb_reg_readl))(bp,668) >> 16) & 255;
  #line 2933 
  __mptr = (void *)bp->rx_fs_list.list.next;
  #line 2933 
  item = ((struct ethtool_rx_fs_item *)(__mptr + 18446744073709551448U));
  #line 2933 
  while (& item->list != & bp->rx_fs_list.list) {
    #line 2933 
    void *__mptr_0;
    {
      #line 2935 
      struct ethtool_tcpip4_spec *tp4sp_m;
      #line 2934 
      struct ethtool_rx_flow_spec *fs = & item->fs;
      #line 2937 
      if (fs->location >= (unsigned int)num_t2_scr) 
                                                    #line 2938 
                                                    goto __Cont;
      #line 2940 
      t2_scr = (*(bp->macb_reg_readl))(bp,(int)((fs->location + 336U) * 4U));
      #line 2943 
      t2_scr = (t2_scr & 4294963199U) | ((unsigned int)((int)enable << 12) & 4096U);
      #line 2946 
      tp4sp_m = & fs->m_u.tcp_ip4_spec;
      #line 2948 
      if ((int)enable != 0 && tp4sp_m->ip4src == 4294967295U) 
                                                              #line 2949 
                                                              t2_scr |= 262144U; else 
                                                                    #line 2951 
                                                                    t2_scr &= 4294705151U;
      #line 2953 
      if ((int)enable != 0 && tp4sp_m->ip4dst == 4294967295U) 
                                                              #line 2954 
                                                              t2_scr |= 16777216U; else 
                                                                    #line 2956 
                                                                    t2_scr &= 4278190079U;
      #line 2958 
      if ((int)enable != 0 && ((unsigned int)tp4sp_m->psrc == 65535U || (unsigned int)tp4sp_m->pdst == 65535U)) 
        #line 2959 
        t2_scr |= 1073741824U; else 
                                    #line 2961 
                                    t2_scr &= 3221225471U;
      #line 2963 
      (*(bp->macb_reg_writel))(bp,(int)((fs->location + 336U) * 4U),t2_scr);
    }
    #line 2933 
    __Cont: { /* sequence */
              #line 2933 
              __mptr_0 = (void *)item->list.next;
              #line 2933 
              item = ((struct ethtool_rx_fs_item *)(__mptr_0 + 18446744073709551448U));
            }
  }
  #line 2965 
  return;
}

#line 2967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void gem_prog_cmp_regs(struct macb *bp, struct ethtool_rx_flow_spec *fs)
{
  #line 2969 
  struct ethtool_tcpip4_spec *tp4sp_v;
  #line 2969 
  struct ethtool_tcpip4_spec *tp4sp_m;
  #line 2971 
  u32 w0;
  #line 2971 
  u32 w1;
  #line 2971 
  u32 t2_scr;
  #line 2970 
  uint16_t index = (unsigned short)fs->location;
  #line 2972 
  bool cmp_a = (_Bool)0;
  #line 2973 
  bool cmp_b = (_Bool)0;
  #line 2974 
  bool cmp_c = (_Bool)0;
  #line 2976 
  tp4sp_v = & fs->h_u.tcp_ip4_spec;
  #line 2977 
  tp4sp_m = & fs->m_u.tcp_ip4_spec;
  #line 2980 
  if (tp4sp_m->ip4src == 4294967295U) {
    #line 2982 
    w0 = 0U;
    #line 2983 
    w1 = 0U;
    #line 2984 
    w0 = tp4sp_v->ip4src;
    #line 2985 
    w1 |= 512U;
    #line 2986 
    w1 = (w1 & 4294966911U) | 128U;
    #line 2987 
    w1 = (w1 & 4294967168U) | 12U;
    #line 2988 
    (*(bp->macb_reg_writel))(bp,(int)index * 24 + 1792,w0);
    #line 2989 
    (*(bp->macb_reg_writel))(bp,(int)index * 24 + 1796,w1);
    #line 2990 
    cmp_a = (_Bool)1;
  }
  #line 2994 
  if (tp4sp_m->ip4dst == 4294967295U) {
    #line 2996 
    w0 = 0U;
    #line 2997 
    w1 = 0U;
    #line 2998 
    w0 = tp4sp_v->ip4dst;
    #line 2999 
    w1 |= 512U;
    #line 3000 
    w1 = (w1 & 4294966911U) | 128U;
    #line 3001 
    w1 = (w1 & 4294967168U) | 16U;
    #line 3002 
    (*(bp->macb_reg_writel))(bp,((int)index * 3 + 225) * 8,w0);
    #line 3003 
    (*(bp->macb_reg_writel))(bp,((int)index * 3 + 1) * 8 + 1796,w1);
    #line 3004 
    cmp_b = (_Bool)1;
  }
  #line 3008 
  if ((unsigned int)tp4sp_m->psrc == 65535U || (unsigned int)tp4sp_m->pdst == 65535U) {
    #line 3010 
    w0 = 0U;
    #line 3011 
    w1 = 0U;
    #line 3012 
    w1 = (w1 & 4294966911U) | 256U;
    #line 3013 
    if ((int)tp4sp_m->psrc == (int)tp4sp_m->pdst) {
      #line 3014 
      w0 = (w0 & 4294901760U) | (unsigned int)tp4sp_v->psrc;
      #line 3015 
      w0 = (w0 & 65535U) | (unsigned int)((int)tp4sp_v->pdst << 16);
      #line 3016 
      w1 |= 512U;
      #line 3017 
      w1 &= 4294967168U;
    }
    else {
      #line 3020 
      w1 &= 4294966783U;
      #line 3021 
      w0 |= 65535U;
      #line 3022 
      if ((unsigned int)tp4sp_m->psrc == 65535U) {
        #line 3023 
        w0 = (w0 & 65535U) | (unsigned int)((int)tp4sp_v->psrc << 16);
        #line 3024 
        w1 &= 4294967168U;
      }
      else {
        #line 3026 
        w0 = (w0 & 65535U) | (unsigned int)((int)tp4sp_v->pdst << 16);
        #line 3027 
        w1 = (w1 & 4294967168U) | 2U;
      }
    }
    #line 3030 
    (*(bp->macb_reg_writel))(bp,((int)index * 3 + 226) * 8,w0);
    #line 3031 
    (*(bp->macb_reg_writel))(bp,((int)index * 3 + 2) * 8 + 1796,w1);
    #line 3032 
    cmp_c = (_Bool)1;
  }
  #line 3035 
  t2_scr = 0U;
  #line 3036 
  t2_scr = (t2_scr & 4294967280U) | ((unsigned int)fs->ring_cookie & 15U);
  #line 3037 
  t2_scr &= 4294963711U;
  #line 3038 
  if ((int)cmp_a != 0) 
                       #line 3039 
                       t2_scr = (t2_scr & 4294713343U) | ((unsigned int)((int)index * 3 << 13) & 253952U);
  #line 3040 
  if ((int)cmp_b != 0) 
                       #line 3041 
                       t2_scr = (t2_scr & 4278714367U) | ((unsigned int)(((int)index * 3 + 1) << 19) & 16252928U);
  #line 3042 
  if ((int)cmp_c != 0) 
                       #line 3043 
                       t2_scr = (t2_scr & 3254779903U) | ((unsigned int)(((int)index * 3 + 2) << 25) & 1040187392U);
  #line 3044 
  (*(bp->macb_reg_writel))(bp,((int)index + 336) * 4,t2_scr);
  #line 3045 
  return;
}

#line 3047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int gem_add_flow_filter(struct net_device *netdev, struct ethtool_rxnfc *cmd)
{
  #line 3072 
  void *__mptr;
  #line 3052 
  struct ethtool_rx_fs_item *item;
  #line 3052 
  struct ethtool_rx_fs_item *newfs;
  #line 3053 
  unsigned long flags;
  #line 3050 
  struct macb *bp = netdev_priv(netdev);
  #line 3051 
  struct ethtool_rx_flow_spec *fs = & cmd->fs;
  #line 3054 
  int ret = -22;
  #line 3055 
  bool added = (_Bool)0;
  #line 3057 
  newfs = (struct ethtool_rx_fs_item *)kmalloc(184UL,3264U);
  #line 3058 
  if (newfs == (struct ethtool_rx_fs_item *)0) 
                                               #line 3059 
                                               return -12;
  #line 3060 
  memcpy((void *)(& newfs->fs),(void *)fs,168UL);
  {
    #line 3062 
    bool branch;
    #line 3062 
    struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"macb", .function = (char *)"gem_add_flow_filter", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c", .format = (char *)"Adding flow filter entry,type=%u,queue=%u,loc=%u,src=%08X,dst=%08X,ps=%u,pd=%u\n", .lineno = (unsigned int)3062U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3062 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
    #line 3062 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 3062 
      ;
      #line 3062 
      ;
      #line 3062 
      ;
      #line 3062 
      ;
      #line 3062 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug558,netdev,(char *)"Adding flow filter entry,type=%u,queue=%u,loc=%u,src=%08X,dst=%08X,ps=%u,pd=%u\n",fs->flow_type,(int)fs->ring_cookie,fs->location,__builtin_bswap32(fs->h_u.tcp_ip4_spec.ip4src),__builtin_bswap32(fs->h_u.tcp_ip4_spec.ip4dst),(int)__builtin_bswap16((unsigned short)((int)fs->h_u.tcp_ip4_spec.psrc)),(int)__builtin_bswap16((unsigned short)((int)fs->h_u.tcp_ip4_spec.pdst)));
    }
  }
  #line 3069 
  cif___ldv_spin_lock_rx_fs_lock_of_macb(& bp->rx_fs_lock);
  #line 3072 
  __mptr = (void *)bp->rx_fs_list.list.next;
  #line 3072 
  item = ((struct ethtool_rx_fs_item *)(__mptr + 18446744073709551448U));
  #line 3072 
  while (& item->list != & bp->rx_fs_list.list) {
    #line 3072 
    void *__mptr_0;
    #line 3073 
    if (item->fs.location > newfs->fs.location) {
      #line 3074 
      list_add_tail(& newfs->list,& item->list);
      #line 3075 
      added = (_Bool)1;
      #line 3076 
      break;
    }
    else 
      #line 3077 
      if (item->fs.location == fs->location) {
        #line 3078 
        netdev_err(netdev,(char *)"Rule not added: location %d not free!\n",fs->location);
        #line 3080 
        ret = -16;
        #line 3081 
        goto err;
      }
    #line 3072 
    __mptr_0 = (void *)item->list.next;
    #line 3072 
    item = ((struct ethtool_rx_fs_item *)(__mptr_0 + 18446744073709551448U));
  }
  #line 3084 
  if (! added) 
               #line 3085 
               list_add_tail(& newfs->list,& bp->rx_fs_list.list);
  #line 3087 
  gem_prog_cmp_regs(bp,fs);
  #line 3088 
  (bp->rx_fs_list.count) ++;
  #line 3090 
  gem_enable_flow_filters(bp,(_Bool)1);
  #line 3092 
  cif_spin_unlock_irqrestore_rx_fs_lock_of_macb(& bp->rx_fs_lock,flags);
  #line 3093 
  return 0;
  #line 3095 
  err: 
       #line 3095 
  ;
  #line 3096 
  cif_spin_unlock_irqrestore_rx_fs_lock_of_macb(& bp->rx_fs_lock,flags);
  #line 3097 
  kfree((void *)newfs);
  #line 3098 
  return ret;
}

#line 3101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int gem_del_flow_filter(struct net_device *netdev, struct ethtool_rxnfc *cmd)
{
  #line 3111 
  void *__mptr;
  #line 3105 
  struct ethtool_rx_fs_item *item;
  #line 3106 
  struct ethtool_rx_flow_spec *fs;
  #line 3107 
  unsigned long flags;
  #line 3104 
  struct macb *bp = netdev_priv(netdev);
  #line 3109 
  cif___ldv_spin_lock_rx_fs_lock_of_macb(& bp->rx_fs_lock);
  #line 3111 
  __mptr = (void *)bp->rx_fs_list.list.next;
  #line 3111 
  item = ((struct ethtool_rx_fs_item *)(__mptr + 18446744073709551448U));
  #line 3111 
  while (& item->list != & bp->rx_fs_list.list) {
    #line 3111 
    void *__mptr_0;
    #line 3112 
    if (item->fs.location == cmd->fs.location) {
      #line 3114 
      fs = & item->fs;
      {
        #line 3115 
        bool branch;
        #line 3115 
        struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"macb", .function = (char *)"gem_del_flow_filter", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c", .format = (char *)"Deleting flow filter entry,type=%u,queue=%u,loc=%u,src=%08X,dst=%08X,ps=%u,pd=%u\n", .lineno = (unsigned int)3115U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 3115 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
        #line 3115 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 3115 
          ;
          #line 3115 
          ;
          #line 3115 
          ;
          #line 3115 
          ;
          #line 3115 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug559,netdev,(char *)"Deleting flow filter entry,type=%u,queue=%u,loc=%u,src=%08X,dst=%08X,ps=%u,pd=%u\n",fs->flow_type,(int)fs->ring_cookie,fs->location,__builtin_bswap32(fs->h_u.tcp_ip4_spec.ip4src),__builtin_bswap32(fs->h_u.tcp_ip4_spec.ip4dst),(int)__builtin_bswap16((unsigned short)((int)fs->h_u.tcp_ip4_spec.psrc)),(int)__builtin_bswap16((unsigned short)((int)fs->h_u.tcp_ip4_spec.pdst)));
        }
      }
      #line 3123 
      (*(bp->macb_reg_writel))(bp,(int)((fs->location + 336U) * 4U),0U);
      #line 3125 
      list_del(& item->list);
      #line 3126 
      (bp->rx_fs_list.count) --;
      #line 3127 
      cif_spin_unlock_irqrestore_rx_fs_lock_of_macb(& bp->rx_fs_lock,flags);
      #line 3128 
      kfree((void *)item);
      #line 3129 
      return 0;
    }
    #line 3111 
    __mptr_0 = (void *)item->list.next;
    #line 3111 
    item = ((struct ethtool_rx_fs_item *)(__mptr_0 + 18446744073709551448U));
  }
  #line 3133 
  cif_spin_unlock_irqrestore_rx_fs_lock_of_macb(& bp->rx_fs_lock,flags);
  #line 3134 
  return -22;
}

#line 3137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int gem_get_flow_entry(struct net_device *netdev, struct ethtool_rxnfc *cmd)
{
  #line 3143 
  void *__mptr;
  #line 3141 
  struct ethtool_rx_fs_item *item;
  #line 3140 
  struct macb *bp = netdev_priv(netdev);
  #line 3143 
  __mptr = (void *)bp->rx_fs_list.list.next;
  #line 3143 
  item = ((struct ethtool_rx_fs_item *)(__mptr + 18446744073709551448U));
  #line 3143 
  while (& item->list != & bp->rx_fs_list.list) {
    #line 3143 
    void *__mptr_0;
    #line 3144 
    if (item->fs.location == cmd->fs.location) {
      #line 3145 
      memcpy((void *)(& cmd->fs),(void *)(& item->fs),168UL);
      #line 3146 
      return 0;
    }
    #line 3143 
    __mptr_0 = (void *)item->list.next;
    #line 3143 
    item = ((struct ethtool_rx_fs_item *)(__mptr_0 + 18446744073709551448U));
  }
  #line 3149 
  return -22;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int gem_get_all_flow_entries(struct net_device *netdev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 3159 
  void *__mptr;
  #line 3156 
  struct ethtool_rx_fs_item *item;
  #line 3155 
  struct macb *bp = netdev_priv(netdev);
  #line 3157 
  uint32_t cnt = 0U;
  #line 3159 
  __mptr = (void *)bp->rx_fs_list.list.next;
  #line 3159 
  item = ((struct ethtool_rx_fs_item *)(__mptr + 18446744073709551448U));
  #line 3159 
  while (& item->list != & bp->rx_fs_list.list) {
    #line 3159 
    void *__mptr_0;
    #line 3160 
    if (cmd->__anonCompField_ethtool_rxnfc_119.rule_cnt == cnt) 
                                                                #line 3161 
                                                                return -90;
    #line 3162 
    *(rule_locs + (unsigned long)cnt) = item->fs.location;
    #line 3163 
    cnt ++;
    #line 3159 
    __mptr_0 = (void *)item->list.next;
    #line 3159 
    item = ((struct ethtool_rx_fs_item *)(__mptr_0 + 18446744073709551448U));
  }
  #line 3165 
  cmd->data = (unsigned long long)bp->max_tuples;
  #line 3166 
  cmd->__anonCompField_ethtool_rxnfc_119.rule_cnt = cnt;
  #line 3168 
  return 0;
}

#line 3171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int gem_get_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 3174 
  struct macb *bp = netdev_priv(netdev);
  #line 3175 
  int ret = 0;
  #line 3177 
  switch (cmd->cmd) {
    #line 3178 
    case (__u32)45: 
                    #line 3178 
    ;
    #line 3179 
    cmd->data = (unsigned long long)bp->num_queues;
    #line 3180 
    break;
    #line 3181 
    case (__u32)46: 
                    #line 3181 
    ;
    #line 3182 
    cmd->__anonCompField_ethtool_rxnfc_119.rule_cnt = bp->rx_fs_list.count;
    #line 3183 
    break;
    #line 3184 
    case (__u32)47: 
                    #line 3184 
    ;
    #line 3185 
    ret = gem_get_flow_entry(netdev,cmd);
    #line 3186 
    break;
    #line 3187 
    case (__u32)48: 
                    #line 3187 
    ;
    #line 3188 
    ret = gem_get_all_flow_entries(netdev,cmd,rule_locs);
    #line 3189 
    break;
    #line 3190 
    default: 
             #line 3190 
    ;
    #line 3191 
    netdev_err(netdev,(char *)"Command parameter %d is not supported\n",cmd->cmd);
    #line 3193 
    ret = -95;
  }
  #line 3196 
  return ret;
}

#line 3199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int gem_set_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd)
{
  #line 3202 
  int ret;
  #line 3201 
  struct macb *bp = netdev_priv(netdev);
  #line 3204 
  switch (cmd->cmd) {
    #line 3205 
    case (__u32)50: 
                    #line 3205 
    ;
    #line 3206 
    if (cmd->fs.location >= bp->max_tuples || cmd->fs.ring_cookie >= (unsigned long long)bp->num_queues) {
      #line 3208 
      ret = -22;
      #line 3209 
      break;
    }
    #line 3211 
    ret = gem_add_flow_filter(netdev,cmd);
    #line 3212 
    break;
    #line 3213 
    case (__u32)49: 
                    #line 3213 
    ;
    #line 3214 
    ret = gem_del_flow_filter(netdev,cmd);
    #line 3215 
    break;
    #line 3216 
    default: 
             #line 3216 
    ;
    #line 3217 
    netdev_err(netdev,(char *)"Command parameter %d is not supported\n",cmd->cmd);
    #line 3219 
    ret = -95;
  }
  #line 3222 
  return ret;
}

#line 3225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct ethtool_ops macb_ethtool_ops = {.get_regs_len = & macb_get_regs_len, .get_regs = & macb_get_regs, .get_wol = & macb_get_wol, .set_wol = & macb_set_wol, .get_link = & ethtool_op_get_link, .get_ringparam = & macb_get_ringparam, .set_ringparam = & macb_set_ringparam, .get_ts_info = & ethtool_op_get_ts_info, .get_link_ksettings = & macb_get_link_ksettings, .set_link_ksettings = & macb_set_link_ksettings};
#line 3238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct ethtool_ops gem_ethtool_ops = {.get_regs_len = & macb_get_regs_len, .get_regs = & macb_get_regs, .get_link = & ethtool_op_get_link, .get_ringparam = & macb_get_ringparam, .set_ringparam = & macb_set_ringparam, .get_strings = & gem_get_ethtool_strings, .get_ethtool_stats = & gem_get_ethtool_stats, .get_sset_count = & gem_get_sset_count, .get_rxnfc = & gem_get_rxnfc, .set_rxnfc = & gem_set_rxnfc, .get_ts_info = & macb_get_ts_info, .get_link_ksettings = & macb_get_link_ksettings, .set_link_ksettings = & macb_set_link_ksettings};
#line 3254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
{
  #line 3256 
  struct macb *bp = netdev_priv(dev);
  #line 3258 
  if (! netif_running(dev)) 
                            #line 3259 
                            return -22;
  #line 3261 
  if (bp->ptp_info != (struct macb_ptp_info *)0) 
    #line 3262 
    switch (cmd) {
      #line 3263 
      case 35248: 
                  #line 3263 
      ;
      #line 3264 
      return (*((bp->ptp_info)->set_hwtst))(dev,rq,cmd);
      #line 3265 
      case 35249: 
                  #line 3265 
      ;
      #line 3266 
      return (*((bp->ptp_info)->get_hwtst))(dev,rq);
    }
  #line 3270 
  return phylink_mii_ioctl(bp->phylink,rq,cmd);
}

#line 3273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
__inline static void macb_set_txcsum_feature(struct macb *bp, netdev_features_t features)
{
  #line 3276 
  u32 val;
  #line 3278 
  if (! macb_is_gem(bp)) 
                         #line 3279 
                         return;
  #line 3281 
  val = (*(bp->macb_reg_readl))(bp,16);
  #line 3282 
  if ((features & 8ULL) != 0ULL) 
                                 #line 3283 
                                 val |= 2048U; else 
                                                    #line 3285 
                                                    val &= 4294965247U;
  #line 3287 
  (*(bp->macb_reg_writel))(bp,16,val);
  #line 3288 
  return;
}

#line 3290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
__inline static void macb_set_rxcsum_feature(struct macb *bp, netdev_features_t features)
{
  #line 3294 
  u32 val;
  #line 3293 
  struct net_device *netdev = bp->dev;
  #line 3296 
  if (! macb_is_gem(bp)) 
                         #line 3297 
                         return;
  #line 3299 
  val = (*(bp->macb_reg_readl))(bp,4);
  #line 3300 
  if ((features & 549755813888ULL) != 0ULL && (netdev->flags & 256U) == 0U) 
    #line 3301 
    val |= 16777216U; else 
                           #line 3303 
                           val &= 4278190079U;
  #line 3305 
  (*(bp->macb_reg_writel))(bp,4,val);
  #line 3306 
  return;
}

#line 3308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
__inline static void macb_set_rxflow_feature(struct macb *bp, netdev_features_t features)
{
  #line 3311 
  if (! macb_is_gem(bp)) 
                         #line 3312 
                         return;
  #line 3314 
  gem_enable_flow_filters(bp,(_Bool)((features & 137438953472ULL) != 0ULL));
  #line 3315 
  return;
}

#line 3317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 3320 
  struct macb *bp = netdev_priv(netdev);
  #line 3321 
  netdev_features_t changed = netdev->features ^ features;
  #line 3324 
  if ((changed & 8ULL) != 0ULL) 
                                #line 3325 
                                macb_set_txcsum_feature(bp,features);
  #line 3328 
  if ((changed & 549755813888ULL) != 0ULL) 
                                           #line 3329 
                                           macb_set_rxcsum_feature(bp,features);
  #line 3332 
  if ((changed & 137438953472ULL) != 0ULL) 
                                           #line 3333 
                                           macb_set_rxflow_feature(bp,features);
  #line 3335 
  return 0;
}

#line 3338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_restore_features(struct macb *bp)
{
  #line 3340 
  struct net_device *netdev = bp->dev;
  #line 3341 
  netdev_features_t features = netdev->features;
  #line 3344 
  macb_set_txcsum_feature(bp,features);
  #line 3347 
  macb_set_rxcsum_feature(bp,features);
  #line 3350 
  macb_set_rxflow_feature(bp,features);
  #line 3351 
  return;
}

#line 3353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct net_device_ops macb_netdev_ops = {.ndo_open = & macb_open, .ndo_stop = & macb_close, .ndo_start_xmit = & macb_start_xmit, .ndo_features_check = & macb_features_check, .ndo_set_rx_mode = & macb_set_rx_mode, .ndo_set_mac_address = & eth_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & macb_ioctl, .ndo_change_mtu = & macb_change_mtu, .ndo_get_stats = & macb_get_stats, .ndo_poll_controller = & macb_poll_controller, .ndo_set_features = & macb_set_features};
#line 3373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_configure_caps(struct macb *bp, struct macb_config *dt_conf)
{
  #line 3376 
  u32 dcfg;
  #line 3378 
  if (dt_conf != (struct macb_config *)0) 
                                          #line 3379 
                                          bp->caps = dt_conf->caps;
  #line 3381 
  if ((int)hw_is_gem(bp->regs,(_Bool)((bool)((int)bp->native_io) != 0)) != 0) {
    #line 3382 
    bp->caps |= 2147483648U;
    #line 3384 
    dcfg = (*(bp->macb_reg_readl))(bp,640);
    #line 3385 
    if ((dcfg & 8388608U) == 0U) 
                                 #line 3386 
                                 bp->caps |= 1U;
    #line 3387 
    dcfg = (*(bp->macb_reg_readl))(bp,644);
    #line 3388 
    if ((dcfg & 3145728U) == 0U) 
                                 #line 3389 
                                 bp->caps |= 268435456U;
    #line 3391 
    if ((int)gem_has_ptp(bp) != 0) {
      #line 3392 
      if (((*(bp->macb_reg_readl))(bp,656) & 256U) == 0U) 
                                                          #line 3393 
                                                          _dev_err(& (bp->pdev)->dev,(char *)"GEM doesn\'t support hardware ptp.\n");
      else {
        #line 3396 
        bp->hw_dma_cap = (unsigned char)((unsigned int)bp->hw_dma_cap | 2U);
        #line 3397 
        bp->ptp_info = & gem_ptp_info;
      }
    }
  }
  {
    #line 3403 
    bool branch;
    #line 3403 
    struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"macb", .function = (char *)"macb_configure_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c", .format = (char *)"Cadence caps 0x%08x\n", .lineno = (unsigned int)3403U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3403 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
    #line 3403 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 3403 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug560,& (bp->pdev)->dev,(char *)"Cadence caps 0x%08x\n",bp->caps);
  }
  #line 3405 
  return;
}

#line 3406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_probe_queues(void *mem, bool native_io, unsigned int *queue_mask, unsigned int *num_queues)
{
  #line 3411 
  unsigned int hw_q;
  #line 3413 
  *queue_mask = 1U;
  #line 3414 
  *num_queues = 1U;
  #line 3422 
  if (! hw_is_gem(mem,(_Bool)((bool)((int)native_io) != 0))) 
                                                             #line 3423 
                                                             return;
  #line 3426 
  *queue_mask = __readl(mem + 660U) & 255U;
  #line 3428 
  *queue_mask |= 1U;
  #line 3430 
  hw_q = 1U;
  #line 3430 
  while (hw_q <= 7U) {
    #line 3431 
    if ((*queue_mask & (unsigned int)(1 << hw_q)) != 0U) 
                                                         #line 3432 
                                                         (*num_queues) ++;
    #line 3430 
    hw_q ++;
  }
  #line 3433 
  return;
}

#line 3435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_clk_init(struct platform_device *pdev, struct clk **pclk, struct clk **hclk, struct clk **tx_clk, struct clk **rx_clk, struct clk **tsu_clk)
{
  #line 3439 
  struct macb_platform_data *pdata;
  #line 3440 
  int err;
  #line 3442 
  pdata = (struct macb_platform_data *)dev_get_platdata(& pdev->dev);
  #line 3443 
  if (pdata != (struct macb_platform_data *)0) {
    #line 3444 
    *pclk = pdata->pclk;
    #line 3445 
    *hclk = pdata->hclk;
  }
  else {
    #line 3447 
    *pclk = devm_clk_get(& pdev->dev,(char *)"pclk");
    #line 3448 
    *hclk = devm_clk_get(& pdev->dev,(char *)"hclk");
  }
  #line 3451 
  if ((int)IS_ERR_OR_NULL((void *)*pclk) != 0) {
    #line 3452 
    err = (int)PTR_ERR((void *)*pclk);
    #line 3453 
    if (err == 0) 
                  #line 3454 
                  err = -19;
    #line 3456 
    _dev_err(& pdev->dev,(char *)"failed to get macb_clk (%d)\n",err);
    #line 3457 
    return err;
  }
  #line 3460 
  if ((int)IS_ERR_OR_NULL((void *)*hclk) != 0) {
    #line 3461 
    err = (int)PTR_ERR((void *)*hclk);
    #line 3462 
    if (err == 0) 
                  #line 3463 
                  err = -19;
    #line 3465 
    _dev_err(& pdev->dev,(char *)"failed to get hclk (%d)\n",err);
    #line 3466 
    return err;
  }
  #line 3469 
  *tx_clk = devm_clk_get_optional(& pdev->dev,(char *)"tx_clk");
  #line 3470 
  if ((int)IS_ERR((void *)*tx_clk) != 0) {
    #line 3471 
    return (int)PTR_ERR((void *)*tx_clk);
  }
  #line 3473 
  *rx_clk = devm_clk_get_optional(& pdev->dev,(char *)"rx_clk");
  #line 3474 
  if ((int)IS_ERR((void *)*rx_clk) != 0) {
    #line 3475 
    return (int)PTR_ERR((void *)*rx_clk);
  }
  #line 3477 
  *tsu_clk = devm_clk_get_optional(& pdev->dev,(char *)"tsu_clk");
  #line 3478 
  if ((int)IS_ERR((void *)*tsu_clk) != 0) {
    #line 3479 
    return (int)PTR_ERR((void *)*tsu_clk);
  }
  #line 3481 
  err = clk_prepare_enable(*pclk);
  #line 3482 
  if (err != 0) {
    #line 3483 
    _dev_err(& pdev->dev,(char *)"failed to enable pclk (%d)\n",err);
    #line 3484 
    return err;
  }
  #line 3487 
  err = clk_prepare_enable(*hclk);
  #line 3488 
  if (err != 0) {
    #line 3489 
    _dev_err(& pdev->dev,(char *)"failed to enable hclk (%d)\n",err);
    #line 3490 
    goto err_disable_pclk;
  }
  #line 3493 
  err = clk_prepare_enable(*tx_clk);
  #line 3494 
  if (err != 0) {
    #line 3495 
    _dev_err(& pdev->dev,(char *)"failed to enable tx_clk (%d)\n",err);
    #line 3496 
    goto err_disable_hclk;
  }
  #line 3499 
  err = clk_prepare_enable(*rx_clk);
  #line 3500 
  if (err != 0) {
    #line 3501 
    _dev_err(& pdev->dev,(char *)"failed to enable rx_clk (%d)\n",err);
    #line 3502 
    goto err_disable_txclk;
  }
  #line 3505 
  err = clk_prepare_enable(*tsu_clk);
  #line 3506 
  if (err != 0) {
    #line 3507 
    _dev_err(& pdev->dev,(char *)"failed to enable tsu_clk (%d)\n",err);
    #line 3508 
    goto err_disable_rxclk;
  }
  #line 3511 
  return 0;
  #line 3513 
  err_disable_rxclk: 
                     #line 3513 
  ;
  #line 3514 
  clk_disable_unprepare(*rx_clk);
  #line 3516 
  err_disable_txclk: 
                     #line 3516 
  ;
  #line 3517 
  clk_disable_unprepare(*tx_clk);
  #line 3519 
  err_disable_hclk: 
                    #line 3519 
  ;
  #line 3520 
  clk_disable_unprepare(*hclk);
  #line 3522 
  err_disable_pclk: 
                    #line 3522 
  ;
  #line 3523 
  clk_disable_unprepare(*pclk);
  #line 3525 
  return err;
}

#line 3528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_init(struct platform_device *pdev)
{
  #line 3638 
  u32 __UNIQUE_ID___x561;
  #line 3638 
  u32 tmp_4;
  #line 3531 
  unsigned int hw_q;
  #line 3531 
  unsigned int q;
  #line 3533 
  struct macb_queue *queue;
  #line 3534 
  int err;
  #line 3535 
  u32 val;
  #line 3535 
  u32 reg;
  #line 3530 
  struct net_device *dev = platform_get_drvdata(pdev);
  #line 3532 
  struct macb *bp = netdev_priv(dev);
  #line 3537 
  bp->tx_ring_size = 512U;
  #line 3538 
  bp->rx_ring_size = 512U;
  #line 3544 
  hw_q = 0U;
  #line 3544 
  q = 0U;
  #line 3544 
  while (hw_q <= 7U) {
    #line 3545 
    if ((bp->queue_mask & (unsigned int)(1 << hw_q)) == 0U) 
                                                            #line 3546 
                                                            goto __Cont;
    #line 3548 
    queue = & bp->queues[q];
    #line 3549 
    queue->bp = bp;
    #line 3550 
    netif_napi_add(dev,& queue->napi,& macb_poll,64);
    #line 3551 
    if (hw_q != 0U) {
      #line 3552 
      queue->ISR = ((hw_q + 4294967295U) << 2) + 1024U;
      #line 3553 
      queue->IER = ((hw_q + 4294967295U) << 2) + 1536U;
      #line 3554 
      queue->IDR = ((hw_q + 4294967295U) << 2) + 1568U;
      #line 3555 
      queue->IMR = ((hw_q + 4294967295U) << 2) + 1600U;
      #line 3556 
      queue->TBQP = ((hw_q + 4294967295U) << 2) + 1088U;
      #line 3557 
      queue->RBQP = ((hw_q + 4294967295U) << 2) + 1152U;
      #line 3558 
      queue->RBQS = ((hw_q + 4294967295U) << 2) + 1184U;
      #line 3560 
      if (((int)bp->hw_dma_cap & 1) != 0) {
        #line 3561 
        queue->TBQPH = 1224U;
        #line 3562 
        queue->RBQPH = 1236U;
      }
    }
    else {
      #line 3567 
      queue->ISR = 36U;
      #line 3568 
      queue->IER = 40U;
      #line 3569 
      queue->IDR = 44U;
      #line 3570 
      queue->IMR = 48U;
      #line 3571 
      queue->TBQP = 28U;
      #line 3572 
      queue->RBQP = 24U;
      #line 3574 
      if (((int)bp->hw_dma_cap & 1) != 0) {
        #line 3575 
        queue->TBQPH = 1224U;
        #line 3576 
        queue->RBQPH = 1236U;
      }
    }
    #line 3586 
    queue->irq = platform_get_irq(pdev,q);
    #line 3587 
    err = devm_request_irq(& pdev->dev,(unsigned int)queue->irq,& macb_interrupt,128UL,(char *)(& dev->name),(void *)queue);
    #line 3589 
    if (err != 0) {
      #line 3590 
      _dev_err(& pdev->dev,(char *)"Unable to request IRQ %d (error %d)\n",queue->irq,err);
      #line 3593 
      return err;
    }
    {
      #line 3596 
      struct lock_class_key __key;
      #line 3596 
      __init_work(& queue->tx_error_task,0);
      #line 3596 
      atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
      #line 3596 
      queue->tx_error_task.data = __constr_expr_41;
      #line 3596 
      lockdep_init_map(& queue->tx_error_task.lockdep_map,(char *)"(work_completion)",& __key,0);
      #line 3596 
      INIT_LIST_HEAD(& queue->tx_error_task.entry);
      #line 3596 
      queue->tx_error_task.func = & macb_tx_error_task;
    }
    #line 3597 
    q ++;
    #line 3544 
    __Cont: 
            #line 3544 
    hw_q ++;
  }
  #line 3600 
  dev->netdev_ops = & macb_netdev_ops;
  #line 3603 
  if ((int)macb_is_gem(bp) != 0) {
    #line 3604 
    bp->max_tx_length = 16376U;
    #line 3605 
    bp->macbgem_ops.mog_alloc_rx_buffers = & gem_alloc_rx_buffers;
    #line 3606 
    bp->macbgem_ops.mog_free_rx_buffers = & gem_free_rx_buffers;
    #line 3607 
    bp->macbgem_ops.mog_init_rings = & gem_init_rings;
    #line 3608 
    bp->macbgem_ops.mog_rx = & gem_rx;
    #line 3609 
    dev->ethtool_ops = & gem_ethtool_ops;
  }
  else {
    #line 3611 
    bp->max_tx_length = 2040U;
    #line 3612 
    bp->macbgem_ops.mog_alloc_rx_buffers = & macb_alloc_rx_buffers;
    #line 3613 
    bp->macbgem_ops.mog_free_rx_buffers = & macb_free_rx_buffers;
    #line 3614 
    bp->macbgem_ops.mog_init_rings = & macb_init_rings;
    #line 3615 
    bp->macbgem_ops.mog_rx = & macb_rx;
    #line 3616 
    dev->ethtool_ops = & macb_ethtool_ops;
  }
  #line 3620 
  dev->hw_features = 1ULL;
  #line 3623 
  if (((*(bp->macb_reg_readl))(bp,660) & 134217728U) != 0U) 
                                                            #line 3624 
                                                            dev->hw_features |= 65536ULL;
  #line 3627 
  if ((int)macb_is_gem(bp) != 0) 
    #line 3627 
    if ((bp->caps & 268435456U) == 0U) 
                                       #line 3628 
                                       dev->hw_features |= 549755813896ULL;
  #line 3629 
  if ((bp->caps & 1073741824U) != 0U) 
                                      #line 3630 
                                      dev->hw_features &= 18446744073709551614ULL;
  #line 3631 
  dev->features = dev->hw_features;
  #line 3637 
  reg = (*(bp->macb_reg_readl))(bp,668);
  {
    #line 3638 
    __UNIQUE_ID___x561 = (reg & 255U) / 3U;
    #line 3638 
    u32 __UNIQUE_ID___y562 = (reg >> 16) & 255U;
    #line 3638 
    if (__UNIQUE_ID___x561 < __UNIQUE_ID___y562) 
                                                 #line 3638 
                                                 tmp_4 = __UNIQUE_ID___x561; else 
                                                                    #line 3638 
                                                                    tmp_4 = __UNIQUE_ID___y562;
    }
  #line 3638 
  bp->max_tuples = tmp_4;
  #line 3640 
  if (bp->max_tuples != 0U) 
    #line 3642 
    if (((reg >> 8) & 255U) != 0U) {
      #line 3644 
      reg = 0U;
      #line 3645 
      reg = (reg & 4294901760U) | 2048U;
      #line 3646 
      (*(bp->macb_reg_writel))(bp,1760,reg);
      #line 3648 
      dev->hw_features |= 137438953472ULL;
      #line 3650 
      INIT_LIST_HEAD(& bp->rx_fs_list.list);
      #line 3651 
      bp->rx_fs_list.count = 0U;
      #line 3652 
      spinlock_check(& bp->rx_fs_lock);
      {
        #line 3652 
        struct lock_class_key __key_0;
        #line 3652 
        __raw_spin_lock_init(& bp->rx_fs_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&bp->rx_fs_lock)->rlock",& __key_0);
      }
    }
    else 
         #line 3654 
         bp->max_tuples = 0U;
  #line 3657 
  if ((bp->caps & 16U) == 0U) {
    #line 3658 
    val = 0U;
    #line 3659 
    if (bp->phy_interface == (unsigned int)PHY_INTERFACE_MODE_RGMII) 
      #line 3660 
      val = 1U;
    else 
      #line 3661 
      if (bp->phy_interface == (unsigned int)PHY_INTERFACE_MODE_RMII && (bp->caps & 4U) != 0U) 
        #line 3663 
        val = 1U;
      else 
        #line 3664 
        if ((bp->caps & 4U) == 0U) 
                                   #line 3665 
                                   val = 1U;
    #line 3667 
    if ((bp->caps & 2U) != 0U) 
                               #line 3668 
                               val |= 2U;
    {
      #line 3670 
      if ((int)macb_is_gem(bp) != 0) 
                                     #line 3670 
                                     (*(bp->macb_reg_writel))(bp,12,val); else 
                                                                    #line 3670 
                                                                    (*(bp->macb_reg_writel))(bp,192,val);
    }
  }
  #line 3674 
  val = macb_mdc_clk_div(bp);
  #line 3675 
  val = macb_dbw(bp) | val;
  #line 3676 
  if (bp->phy_interface == (unsigned int)PHY_INTERFACE_MODE_SGMII) 
                                                                   #line 3677 
                                                                   val |= 134219776U;
  #line 3678 
  (*(bp->macb_reg_writel))(bp,4,val);
  #line 3680 
  return 0;
}

#line 3689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct sifive_fu540_macb_mgmt *mgmt;
#line 3692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int at91ether_start(struct net_device *dev)
{
  #line 3696 
  struct macb_dma_desc *desc;
  #line 3697 
  dma_addr_t addr;
  #line 3698 
  u32 ctl;
  #line 3699 
  int i;
  #line 3694 
  struct macb *lp = netdev_priv(dev);
  #line 3695 
  struct macb_queue *q = & lp->queues[0];
  #line 3701 
  ;
  #line 3701 
  ;
  #line 3701 
  q->rx_ring = (struct macb_dma_desc *)dma_alloc_coherent(& (lp->pdev)->dev,
                           (unsigned long)(macb_dma_desc_get_size(lp) * 9U),
                           & q->rx_ring_dma,3264U);
  #line 3705 
  if (q->rx_ring == (struct macb_dma_desc *)0) 
                                               #line 3706 
                                               return -12;
  #line 3708 
  q->rx_buffers = dma_alloc_coherent(& (lp->pdev)->dev,13824UL,& q->rx_buffers_dma,3264U);
  #line 3712 
  if (q->rx_buffers == (void *)0) {
    #line 3713 
    ;
    #line 3713 
    ;
    #line 3713 
    ;
    #line 3713 
    dma_free_coherent(& (lp->pdev)->dev,(unsigned long)(macb_dma_desc_get_size(lp) * 9U),(void *)q->rx_ring,q->rx_ring_dma);
    #line 3717 
    q->rx_ring = (struct macb_dma_desc *)0;
    #line 3718 
    return -12;
  }
  #line 3721 
  addr = q->rx_buffers_dma;
  #line 3722 
  i = 0;
  #line 3722 
  while (i <= 8) {
    #line 3723 
    desc = macb_rx_desc(q,(unsigned int)i);
    #line 3724 
    macb_set_addr(lp,desc,addr);
    #line 3725 
    desc->ctrl = 0U;
    #line 3726 
    addr += 1536ULL;
    #line 3722 
    i ++;
  }
  #line 3730 
  desc->addr |= 2U;
  #line 3733 
  q->rx_tail = 0U;
  #line 3736 
  (*(lp->macb_reg_writel))(lp,24,(unsigned int)q->rx_ring_dma);
  #line 3739 
  ctl = (*(lp->macb_reg_readl))(lp,0);
  #line 3740 
  (*(lp->macb_reg_writel))(lp,0,ctl | 12U);
  #line 3742 
  return 0;
}

#line 3746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int at91ether_open(struct net_device *dev)
{
  #line 3749 
  u32 ctl;
  #line 3750 
  int ret;
  #line 3748 
  struct macb *lp = netdev_priv(dev);
  #line 3753 
  ctl = (*(lp->macb_reg_readl))(lp,0);
  #line 3754 
  (*(lp->macb_reg_writel))(lp,0,ctl | 32U);
  #line 3756 
  macb_set_hwaddr(lp);
  #line 3758 
  ret = at91ether_start(dev);
  #line 3759 
  if (ret != 0) 
                #line 3760 
                return ret;
  #line 3763 
  (*(lp->macb_reg_writel))(lp,40,3254U);
  #line 3771 
  ret = macb_phylink_connect(lp);
  #line 3772 
  if (ret != 0) 
                #line 3773 
                return ret;
  #line 3775 
  netif_start_queue(dev);
  #line 3777 
  return 0;
}

#line 3781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int at91ether_close(struct net_device *dev)
{
  #line 3785 
  u32 ctl;
  #line 3783 
  struct macb *lp = netdev_priv(dev);
  #line 3784 
  struct macb_queue *q = & lp->queues[0];
  #line 3788 
  ctl = (*(lp->macb_reg_readl))(lp,0);
  #line 3789 
  (*(lp->macb_reg_writel))(lp,0,ctl & 4294967283U);
  #line 3792 
  (*(lp->macb_reg_writel))(lp,44,3254U);
  #line 3800 
  netif_stop_queue(dev);
  #line 3802 
  phylink_stop(lp->phylink);
  #line 3803 
  phylink_disconnect_phy(lp->phylink);
  #line 3805 
  ;
  #line 3805 
  ;
  #line 3805 
  ;
  #line 3805 
  dma_free_coherent(& (lp->pdev)->dev,(unsigned long)(macb_dma_desc_get_size(lp) * 9U),(void *)q->rx_ring,q->rx_ring_dma);
  #line 3809 
  q->rx_ring = (struct macb_dma_desc *)0;
  #line 3811 
  dma_free_coherent(& (lp->pdev)->dev,13824UL,q->rx_buffers,q->rx_buffers_dma);
  #line 3814 
  q->rx_buffers = (void *)0;
  #line 3816 
  return 0;
}

#line 3820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static netdev_tx_t at91ether_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 3823 
  struct macb *lp = netdev_priv(dev);
  #line 3825 
  if (((*(lp->macb_reg_readl))(lp,20) & 16U) != 0U) {
    #line 3826 
    netif_stop_queue(dev);
    #line 3829 
    lp->skb = skb;
    #line 3830 
    lp->skb_length = (int)skb->len;
    #line 3831 
    lp->skb_physaddr = dma_map_single_attrs(& (lp->pdev)->dev,(void *)skb->data,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 3833 
    if (dma_mapping_error(& (lp->pdev)->dev,lp->skb_physaddr) != 0) {
      #line 3834 
      dev_kfree_skb_any(skb);
      #line 3835 
      (dev->stats.tx_dropped) ++;
      #line 3836 
      netdev_err(dev,(char *)"%s: DMA mapping error\n",(char *)"at91ether_start_xmit");
      #line 3837 
      return NETDEV_TX_OK;
    }
    #line 3841 
    (*(lp->macb_reg_writel))(lp,12,(unsigned int)lp->skb_physaddr);
    #line 3843 
    (*(lp->macb_reg_writel))(lp,16,skb->len);
  }
  else {
    #line 3846 
    netdev_err(dev,(char *)"%s called, but device is busy!\n",(char *)"at91ether_start_xmit");
    #line 3847 
    return NETDEV_TX_BUSY;
  }
  #line 3850 
  return NETDEV_TX_OK;
}

#line 3856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void at91ether_rx(struct net_device *dev)
{
  #line 3860 
  struct macb_dma_desc *desc;
  #line 3861 
  unsigned char *p_recv;
  #line 3862 
  struct sk_buff *skb;
  #line 3863 
  unsigned int pktlen;
  #line 3858 
  struct macb *lp = netdev_priv(dev);
  #line 3859 
  struct macb_queue *q = & lp->queues[0];
  #line 3865 
  desc = macb_rx_desc(q,q->rx_tail);
  #line 3866 
  while ((desc->addr & 1U) != 0U) {
    #line 3867 
    p_recv = (unsigned char *)(q->rx_buffers + (unsigned long)(q->rx_tail * 1536U));
    #line 3868 
    pktlen = desc->ctrl & 4095U;
    #line 3869 
    skb = netdev_alloc_skb(dev,pktlen + 2U);
    #line 3870 
    if (skb != (struct sk_buff *)0) {
      #line 3871 
      skb_reserve(skb,2);
      #line 3872 
      skb_put_data(skb,(void *)p_recv,pktlen);
      #line 3874 
      skb->protocol = eth_type_trans(skb,dev);
      #line 3875 
      (dev->stats.rx_packets) ++;
      #line 3876 
      dev->stats.rx_bytes += (unsigned long)pktlen;
      #line 3877 
      netif_rx(skb);
    }
    else 
         #line 3879 
         (dev->stats.rx_dropped) ++;
    #line 3882 
    if ((desc->ctrl & 1073741824U) != 0U) 
                                          #line 3883 
                                          (dev->stats.multicast) ++;
    #line 3886 
    desc->addr &= 4294967294U;
    #line 3889 
    if (q->rx_tail == 8U) 
                          #line 3890 
                          q->rx_tail = 0U; else 
                                                #line 3892 
                                                (q->rx_tail) ++;
    #line 3894 
    desc = macb_rx_desc(q,q->rx_tail);
  }
  #line 3896 
  return;
}

#line 3899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static irqreturn_t at91ether_interrupt(int irq, void *dev_id)
{
  #line 3903 
  u32 intstatus;
  #line 3903 
  u32 ctl;
  #line 3901 
  struct net_device *dev = (struct net_device *)dev_id;
  #line 3902 
  struct macb *lp = netdev_priv(dev);
  #line 3908 
  intstatus = (*(lp->macb_reg_readl))(lp,36);
  #line 3911 
  if ((intstatus & 2U) != 0U) 
                              #line 3912 
                              at91ether_rx(dev);
  #line 3915 
  if ((intstatus & 128U) != 0U) {
    #line 3917 
    if ((intstatus & 48U) != 0U) 
                                 #line 3918 
                                 (dev->stats.tx_errors) ++;
    #line 3920 
    if (lp->skb != (struct sk_buff *)0) {
      #line 3921 
      dev_consume_skb_irq(lp->skb);
      #line 3922 
      lp->skb = (struct sk_buff *)0;
      #line 3923 
      dma_unmap_single_attrs(& (lp->pdev)->dev,lp->skb_physaddr,(unsigned long)lp->skb_length,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 3925 
      (dev->stats.tx_packets) ++;
      #line 3926 
      dev->stats.tx_bytes += (unsigned long)lp->skb_length;
    }
    #line 3928 
    netif_wake_queue(dev);
  }
  #line 3932 
  if ((intstatus & 4U) != 0U) {
    #line 3933 
    ctl = (*(lp->macb_reg_readl))(lp,0);
    #line 3934 
    (*(lp->macb_reg_writel))(lp,0,ctl & 4294967291U);
    #line 3935 
    ldv_inline_asm();
    #line 3936 
    (*(lp->macb_reg_writel))(lp,0,ctl | 4U);
  }
  #line 3939 
  if ((intstatus & 1024U) != 0U) 
                                 #line 3940 
                                 netdev_err(dev,(char *)"ROVR error\n");
  #line 3942 
  return IRQ_HANDLED;
}

#line 3946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void at91ether_poll_controller(struct net_device *dev)
{
  #line 3948 
  unsigned long flags;
  {
    #line 3950 
    unsigned long __dummy;
    #line 3950 
    unsigned long __dummy2;
    }
  #line 3950 
  flags = arch_local_irq_save();
  #line 3950 
  trace_hardirqs_off();
  #line 3951 
  at91ether_interrupt(dev->irq,(void *)dev);
  {
    #line 3952 
    unsigned long __dummy_2;
    #line 3952 
    unsigned long __dummy2_2;
    }
  #line 3952 
  if (arch_irqs_disabled_flags(flags) != 0) {
    {
      #line 3952 
      unsigned long __dummy_0;
      #line 3952 
      unsigned long __dummy2_0;
      }
    #line 3952 
    arch_local_irq_restore(flags);
    #line 3952 
    trace_hardirqs_off();
  }
  else {
    #line 3952 
    trace_hardirqs_on();
    {
      #line 3952 
      unsigned long __dummy_1;
      #line 3952 
      unsigned long __dummy2_1;
      }
    #line 3952 
    arch_local_irq_restore(flags);
  }
  #line 3955 
  return;
}

#line 3956  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct net_device_ops at91ether_netdev_ops = {.ndo_open = & at91ether_open, .ndo_stop = & at91ether_close, .ndo_start_xmit = & at91ether_start_xmit, .ndo_set_rx_mode = & macb_set_rx_mode, .ndo_set_mac_address = & eth_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & macb_ioctl, .ndo_get_stats = & macb_get_stats, .ndo_poll_controller = & at91ether_poll_controller};
#line 3970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int at91ether_clk_init(struct platform_device *pdev, struct clk **pclk, struct clk **hclk, struct clk **tx_clk, struct clk **rx_clk, struct clk **tsu_clk)
{
  #line 3974 
  int err;
  #line 3976 
  *hclk = (struct clk *)0;
  #line 3977 
  *tx_clk = (struct clk *)0;
  #line 3978 
  *rx_clk = (struct clk *)0;
  #line 3979 
  *tsu_clk = (struct clk *)0;
  #line 3981 
  *pclk = devm_clk_get(& pdev->dev,(char *)"ether_clk");
  #line 3982 
  if ((int)IS_ERR((void *)*pclk) != 0) {
    #line 3983 
    return (int)PTR_ERR((void *)*pclk);
  }
  #line 3985 
  err = clk_prepare_enable(*pclk);
  #line 3986 
  if (err != 0) {
    #line 3987 
    _dev_err(& pdev->dev,(char *)"failed to enable pclk (%d)\n",err);
    #line 3988 
    return err;
  }
  #line 3991 
  return 0;
}

#line 3994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int at91ether_init(struct platform_device *pdev)
{
  #line 3998 
  int err;
  #line 3999 
  u32 reg;
  #line 3996 
  struct net_device *dev = platform_get_drvdata(pdev);
  #line 3997 
  struct macb *bp = netdev_priv(dev);
  #line 4001 
  bp->queues[0].bp = bp;
  #line 4003 
  dev->netdev_ops = & at91ether_netdev_ops;
  #line 4004 
  dev->ethtool_ops = & macb_ethtool_ops;
  #line 4006 
  err = devm_request_irq(& pdev->dev,(unsigned int)dev->irq,& at91ether_interrupt,0UL,(char *)(& dev->name),(void *)dev);
  #line 4008 
  if (err != 0) 
                #line 4009 
                return err;
  #line 4011 
  (*(bp->macb_reg_writel))(bp,0,0U);
  #line 4013 
  reg = 2304U;
  #line 4014 
  if (bp->phy_interface == (unsigned int)PHY_INTERFACE_MODE_RMII) 
                                                                  #line 4015 
                                                                  reg |= 8192U;
  #line 4017 
  (*(bp->macb_reg_writel))(bp,4,reg);
  #line 4019 
  return 0;
}

#line 4022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static unsigned long fu540_macb_tx_recalc_rate(struct clk_hw *hw, unsigned long parent_rate)
{
  #line 4025 
  return mgmt->rate;
}

#line 4028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static long fu540_macb_tx_round_rate(struct clk_hw *hw, unsigned long rate, unsigned long *parent_rate)
{
  #line 4031 
  int __ret_warn_on_3;
  #line 4031 
  __ret_warn_on_3 = rate <= 2499999UL;
  #line 4031 
  if ((long)(__ret_warn_on_3 != 0) != 0L) {
    #line 4032 
    ldv_inline_asm();
    #line 4033 
    ldv_inline_asm();
  }
  #line 4031 
  if ((long)((long)(__ret_warn_on_3 != 0)) != 0L) 
                                                  #line 4032 
                                                  return 2500000L;
  else 
    #line 4033 
    if (rate == 2500000UL) 
                           #line 4034 
                           return 2500000L;
    else {
      #line 4035 
      int __ret_warn_on_2;
      #line 4035 
      __ret_warn_on_2 = rate <= 13749999UL;
      #line 4035 
      if ((long)(__ret_warn_on_2 != 0) != 0L) {
        #line 4036 
        ldv_inline_asm();
        #line 4037 
        ldv_inline_asm();
      }
      #line 4035 
      if ((long)((long)(__ret_warn_on_2 != 0)) != 0L) 
                                                      #line 4036 
                                                      return 2500000L;
      else {
        #line 4037 
        int __ret_warn_on_1;
        #line 4037 
        __ret_warn_on_1 = rate <= 24999999UL;
        #line 4037 
        if ((long)(__ret_warn_on_1 != 0) != 0L) {
          #line 4038 
          ldv_inline_asm();
          #line 4039 
          ldv_inline_asm();
        }
        #line 4037 
        if ((long)((long)(__ret_warn_on_1 != 0)) != 0L) 
                                                        #line 4038 
                                                        return 25000000L;
        else 
          #line 4039 
          if (rate == 25000000UL) 
                                  #line 4040 
                                  return 25000000L;
          else {
            #line 4041 
            int __ret_warn_on_0;
            #line 4041 
            __ret_warn_on_0 = rate <= 74999999UL;
            #line 4041 
            if ((long)(__ret_warn_on_0 != 0) != 0L) {
              #line 4042 
              ldv_inline_asm();
              #line 4043 
              ldv_inline_asm();
            }
            #line 4041 
            if ((long)((long)(__ret_warn_on_0 != 0)) != 0L) 
                                                            #line 4042 
                                                            return 25000000L;
            else {
              #line 4043 
              int __ret_warn_on;
              #line 4043 
              __ret_warn_on = rate <= 124999999UL;
              #line 4043 
              if ((long)(__ret_warn_on != 0) != 0L) {
                #line 4044 
                ldv_inline_asm();
                #line 4045 
                ldv_inline_asm();
              }
              #line 4043 
              if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                            #line 4044 
                                                            return 125000000L;
              else 
                #line 4045 
                if (rate == 125000000UL) 
                                         #line 4046 
                                         return 125000000L;
            }
          }
      }
    }
  {
    #line 4048 
    int __ret_warn_on_4 = rate > 125000000UL;
    #line 4048 
    if ((long)(__ret_warn_on_4 != 0) != 0L) {
      #line 4049 
      ldv_inline_asm();
      #line 4050 
      ldv_inline_asm();
    }
    #line 4048 
    long tmp_4 = (long)(__ret_warn_on_4 != 0);
  }
  #line 4050 
  return 125000000L;
}

#line 4053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int fu540_macb_tx_set_rate(struct clk_hw *hw, unsigned long rate, unsigned long parent_rate)
{
  #line 4056 
  rate = (unsigned long)fu540_macb_tx_round_rate(hw,rate,& parent_rate);
  #line 4057 
  if (rate != 125000000UL) 
                           #line 4058 
                           iowrite32(1U,mgmt->reg); else 
                                                         #line 4060 
                                                         iowrite32(0U,mgmt->reg);
  #line 4061 
  mgmt->rate = rate;
  #line 4063 
  return 0;
}

#line 4066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct clk_ops fu540_c000_ops = {.recalc_rate = & fu540_macb_tx_recalc_rate, .round_rate = & fu540_macb_tx_round_rate, .set_rate = & fu540_macb_tx_set_rate};
#line 4072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int fu540_c000_clk_init(struct platform_device *pdev, struct clk **pclk, struct clk **hclk, struct clk **tx_clk, struct clk **rx_clk, struct clk **tsu_clk)
{
  #line 4076 
  struct clk_init_data init;
  #line 4077 
  int err = 0;
  #line 4079 
  err = macb_clk_init(pdev,pclk,hclk,tx_clk,rx_clk,tsu_clk);
  #line 4080 
  if (err != 0) 
                #line 4081 
                return err;
  #line 4083 
  mgmt = (struct sifive_fu540_macb_mgmt *)cif_devm_kzalloc(& pdev->dev,40UL,3264U);
  #line 4084 
  if (mgmt == (struct sifive_fu540_macb_mgmt *)0) 
                                                  #line 4085 
                                                  return -12;
  #line 4087 
  init.name = (char *)"sifive-gemgxl-mgmt";
  #line 4088 
  init.ops = & fu540_c000_ops;
  #line 4089 
  init.flags = 0UL;
  #line 4090 
  init.num_parents = (unsigned char)0U;
  #line 4092 
  mgmt->rate = 0UL;
  #line 4093 
  mgmt->hw.init = & init;
  #line 4095 
  *tx_clk = devm_clk_register(& pdev->dev,& mgmt->hw);
  #line 4096 
  if ((int)IS_ERR((void *)*tx_clk) != 0) {
    #line 4097 
    return (int)PTR_ERR((void *)*tx_clk);
  }
  #line 4099 
  err = clk_prepare_enable(*tx_clk);
  #line 4100 
  if (err != 0) 
                #line 4101 
                _dev_err(& pdev->dev,(char *)"failed to enable tx_clk (%u)\n",err); else 
                                                                    #line 4103 
                                                                    _dev_info(& pdev->dev,(char *)"Registered clk switch \'%s\'\n",init.name);
  #line 4105 
  return 0;
}

#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int fu540_c000_init(struct platform_device *pdev)
{
  #line 4110 
  struct resource *res;
  #line 4112 
  res = platform_get_resource(pdev,512U,1U);
  #line 4113 
  if (res == (struct resource *)0) 
                                   #line 4114 
                                   return -19;
  #line 4116 
  ;
  #line 4116 
  mgmt->reg = ioremap(res->start,(unsigned long)resource_size(res));
  #line 4117 
  if (mgmt->reg == (void *)0) 
                              #line 4118 
                              return -12;
  #line 4120 
  return macb_init(pdev);
}

#line 4123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_config fu540_c000_config = {.caps = 536871008U, .dma_burst_length = 16U, .clk_init = & fu540_c000_clk_init, .init = & fu540_c000_init, .jumbo_max_len = 10240};
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_config at91sam9260_config = {.caps = 6U, .clk_init = & macb_clk_init, .init = & macb_init};
#line 4138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_config sama5d3macb_config = {.caps = 1073741830U, .clk_init = & macb_clk_init, .init = & macb_init};
#line 4145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_config pc302gem_config = {.caps = 1610612736U, .dma_burst_length = 16U, .clk_init = & macb_clk_init, .init = & macb_init};
#line 4152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_config sama5d2_config = {.caps = 4U, .dma_burst_length = 16U, .clk_init = & macb_clk_init, .init = & macb_init};
#line 4159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_config sama5d3_config = {.caps = 1610612772U, .dma_burst_length = 16U, .clk_init = & macb_clk_init, .init = & macb_init, .jumbo_max_len = 10240};
#line 4168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_config sama5d4_config = {.caps = 4U, .dma_burst_length = 4U, .clk_init = & macb_clk_init, .init = & macb_init};
#line 4175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_config emac_config = {.caps = 256U, .clk_init = & at91ether_clk_init, .init = & at91ether_init};
#line 4181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_config np4_config = {.caps = 16U, .clk_init = & macb_clk_init, .init = & macb_init};
#line 4187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_config zynqmp_config = {.caps = 536871136U, .dma_burst_length = 16U, .clk_init = & macb_clk_init, .init = & macb_init, .jumbo_max_len = 10240};
#line 4197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_config zynq_config = {.caps = 536871176U, .dma_burst_length = 16U, .clk_init = & macb_clk_init, .init = & macb_init};
#line 4205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct of_device_id macb_dt_ids[17U] = {{.compatible = {(char)'c', (char)'d', (char)'n', (char)'s', (char)',', (char)'a', (char)'t', (char)'3', (char)'2', (char)'a', (char)'p', (char)'7', (char)'0', (char)'0', (char)'0', (char)'-', (char)'m', (char)'a', (char)'c', (char)'b'}}, {.compatible = {(char)'c', (char)'d', (char)'n', (char)'s', (char)',', (char)'a', (char)'t', (char)'9', (char)'1', (char)'s', (char)'a', (char)'m', (char)'9', (char)'2', (char)'6', (char)'0', (char)'-', (char)'m', (char)'a', (char)'c', (char)'b'}, .data = (void *)(& at91sam9260_config)}, {.compatible = {(char)'c', (char)'d', (char)'n', (char)'s', (char)',', (char)'m', (char)'a', (char)'c', (char)'b'}}, {.compatible = {(char)'c', (char)'d', (char)'n', (char)'s', (char)',', (char)'n', (char)'p', (char)'4', (char)'-', (char)'m', (char)'a', (char)'c', (char)'b'}, .data = (void *)(& np4_config)}, {.compatible = {(char)'c', (char)'d', (char)'n', (char)'s', (char)',', (char)'p', (char)'c', (char)'3', (char)'0', (char)'2', (char)'-', (char)'g', (char)'e', (char)'m'}, .data = (void *)(& pc302gem_config)}, {.compatible = {(char)'c', (char)'d', (char)'n', (char)'s', (char)',', (char)'g', (char)'e', (char)'m'}, .data = (void *)(& pc302gem_config)}, {.compatible = {(char)'c', (char)'d', (char)'n', (char)'s', (char)',', (char)'s', (char)'a', (char)'m', (char)'9', (char)'x', (char)'6', (char)'0', (char)'-', (char)'m', (char)'a', (char)'c', (char)'b'}, .data = (void *)(& at91sam9260_config)}, {.compatible = {(char)'a', (char)'t', (char)'m', (char)'e', (char)'l', (char)',', (char)'s', (char)'a', (char)'m', (char)'a', (char)'5', (char)'d', (char)'2', (char)'-', (char)'g', (char)'e', (char)'m'}, .data = (void *)(& sama5d2_config)}, {.compatible = {(char)'a', (char)'t', (char)'m', (char)'e', (char)'l', (char)',', (char)'s', (char)'a', (char)'m', (char)'a', (char)'5', (char)'d', (char)'3', (char)'-', (char)'g', (char)'e', (char)'m'}, .data = (void *)(& sama5d3_config)}, {.compatible = {(char)'a', (char)'t', (char)'m', (char)'e', (char)'l', (char)',', (char)'s', (char)'a', (char)'m', (char)'a', (char)'5', (char)'d', (char)'3', (char)'-', (char)'m', (char)'a', (char)'c', (char)'b'}, .data = (void *)(& sama5d3macb_config)}, {.compatible = {(char)'a', (char)'t', (char)'m', (char)'e', (char)'l', (char)',', (char)'s', (char)'a', (char)'m', (char)'a', (char)'5', (char)'d', (char)'4', (char)'-', (char)'g', (char)'e', (char)'m'}, .data = (void *)(& sama5d4_config)}, {.compatible = {(char)'c', (char)'d', (char)'n', (char)'s', (char)',', (char)'a', (char)'t', (char)'9', (char)'1', (char)'r', (char)'m', (char)'9', (char)'2', (char)'0', (char)'0', (char)'-', (char)'e', (char)'m', (char)'a', (char)'c'}, .data = (void *)(& emac_config)}, {.compatible = {(char)'c', (char)'d', (char)'n', (char)'s', (char)',', (char)'e', (char)'m', (char)'a', (char)'c'}, .data = (void *)(& emac_config)}, {.compatible = {(char)'c', (char)'d', (char)'n', (char)'s', (char)',', (char)'z', (char)'y', (char)'n', (char)'q', (char)'m', (char)'p', (char)'-', (char)'g', (char)'e', (char)'m'}, .data = (void *)(& zynqmp_config)}, {.compatible = {(char)'c', (char)'d', (char)'n', (char)'s', (char)',', (char)'z', (char)'y', (char)'n', (char)'q', (char)'-', (char)'g', (char)'e', (char)'m'}, .data = (void *)(& zynq_config)}, {.compatible = {(char)'s', (char)'i', (char)'f', (char)'i', (char)'v', (char)'e', (char)',', (char)'f', (char)'u', (char)'5', (char)'4', (char)'0', (char)'-', (char)'c', (char)'0', (char)'0', (char)'0', (char)'-', (char)'g', (char)'e', (char)'m'}, .data = (void *)(& fu540_c000_config)}};
#line 4224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
struct of_device_id __mod_of__macb_dt_ids_device_table[17U];
#line 4227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct macb_config default_gem_config = {.caps = 536871008U, .dma_burst_length = 16U, .clk_init = & macb_clk_init, .init = & macb_init, .jumbo_max_len = 10240};
#line 4237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_probe(struct platform_device *pdev)
{
  #line 4245 
  struct clk *pclk;
  #line 4247 
  unsigned int queue_mask;
  #line 4247 
  unsigned int num_queues;
  #line 4248 
  bool native_io;
  #line 4249 
  phy_interface_t interface;
  #line 4250 
  struct net_device *dev;
  #line 4251 
  struct resource *regs;
  #line 4252 
  void *mem;
  #line 4253 
  char *mac;
  #line 4254 
  struct macb *bp;
  #line 4255 
  int err;
  #line 4255 
  int val;
  #line 4406 
  u32 tmp_12;
  #line 4405 
  char *tmp_14;
  #line 4239 
  struct macb_config *macb_config = & default_gem_config;
  #line 4240 
  int (*clk_init)(struct platform_device *, struct clk **, struct clk **, struct clk **, struct clk **, struct clk **) = macb_config->clk_init;
  #line 4243 
  int (*init)(struct platform_device *) = macb_config->init;
  #line 4244 
  struct device_node *np = pdev->dev.of_node;
  #line 4245 
  struct clk *hclk = (struct clk *)0;
  #line 4245 
  struct clk *tx_clk = (struct clk *)0;
  #line 4245 
  struct clk *rx_clk = (struct clk *)0;
  #line 4246 
  struct clk *tsu_clk = (struct clk *)0;
  #line 4257 
  regs = platform_get_resource(pdev,512U,0U);
  #line 4258 
  mem = devm_ioremap_resource(& pdev->dev,regs);
  #line 4259 
  if ((int)IS_ERR(mem) != 0) {
    #line 4260 
    return (int)PTR_ERR(mem);
  }
  #line 4262 
  if (np != (struct device_node *)0) {
    #line 4263 
    struct of_device_id *match;
    #line 4265 
    match = of_match_node((struct of_device_id *)(& macb_dt_ids),np);
    #line 4266 
    if (match != (struct of_device_id *)0 && match->data != (void *)0) {
      #line 4267 
      macb_config = (struct macb_config *)match->data;
      #line 4268 
      clk_init = macb_config->clk_init;
      #line 4269 
      init = macb_config->init;
    }
  }
  #line 4273 
  err = (*clk_init)(pdev,& pclk,& hclk,& tx_clk,& rx_clk,& tsu_clk);
  #line 4274 
  if (err != 0) 
                #line 4275 
                return err;
  #line 4277 
  pm_runtime_set_autosuspend_delay(& pdev->dev,100);
  #line 4278 
  pm_runtime_use_autosuspend(& pdev->dev);
  #line 4279 
  pm_runtime_get_noresume(& pdev->dev);
  #line 4280 
  cif_pm_runtime_set_active(& pdev->dev);
  #line 4281 
  cif_pm_runtime_enable(& pdev->dev);
  #line 4282 
  native_io = hw_is_native_io(mem);
  #line 4284 
  macb_probe_queues(mem,(_Bool)((bool)((int)native_io) != 0),& queue_mask,& num_queues);
  #line 4285 
  dev = cif_alloc_etherdev_mqs(23920,num_queues,num_queues);
  #line 4286 
  if (dev == (struct net_device *)0) {
    #line 4287 
    err = -12;
    #line 4288 
    goto err_disable_clocks;
  }
  #line 4291 
  dev->base_addr = (unsigned long)regs->start;
  #line 4293 
  dev->dev.parent = & pdev->dev;
  #line 4295 
  bp = (struct macb *)netdev_priv(dev);
  #line 4296 
  bp->pdev = pdev;
  #line 4297 
  bp->dev = dev;
  #line 4298 
  bp->regs = mem;
  #line 4299 
  bp->native_io = native_io;
  #line 4300 
  if ((int)native_io != 0) {
    #line 4301 
    bp->macb_reg_readl = & hw_readl_native;
    #line 4302 
    bp->macb_reg_writel = & hw_writel_native;
  }
  else {
    #line 4304 
    bp->macb_reg_readl = & hw_readl;
    #line 4305 
    bp->macb_reg_writel = & hw_writel;
  }
  #line 4307 
  bp->num_queues = num_queues;
  #line 4308 
  bp->queue_mask = queue_mask;
  #line 4309 
  if (macb_config != (struct macb_config *)0) 
                                              #line 4310 
                                              bp->dma_burst_length = macb_config->dma_burst_length;
  #line 4311 
  bp->pclk = pclk;
  #line 4312 
  bp->hclk = hclk;
  #line 4313 
  bp->tx_clk = tx_clk;
  #line 4314 
  bp->rx_clk = rx_clk;
  #line 4315 
  bp->tsu_clk = tsu_clk;
  #line 4316 
  if (macb_config != (struct macb_config *)0) 
                                              #line 4317 
                                              bp->jumbo_max_len = (unsigned int)macb_config->jumbo_max_len;
  #line 4319 
  bp->wol = 0U;
  #line 4320 
  if (of_get_property(np,(char *)"magic-packet",(int *)0) != (void *)0) 
    #line 4321 
    bp->wol |= 1U;
  #line 4322 
  device_init_wakeup(& pdev->dev,(_Bool)((bp->wol & 1U) != 0U));
  #line 4324 
  spinlock_check(& bp->lock);
  {
    #line 4324 
    struct lock_class_key __key;
    #line 4324 
    __raw_spin_lock_init(& bp->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&bp->lock)->rlock",& __key);
  }
  #line 4327 
  macb_configure_caps(bp,macb_config);
  #line 4330 
  if (((*(bp->macb_reg_readl))(bp,660) & 8388608U) != 0U) {
    #line 4331 
    dma_set_mask(& pdev->dev,17592186044415ULL);
    #line 4332 
    bp->hw_dma_cap = (unsigned char)((unsigned int)bp->hw_dma_cap | 1U);
  }
  #line 4335 
  platform_set_drvdata(pdev,(void *)dev);
  #line 4337 
  dev->irq = platform_get_irq(pdev,0U);
  #line 4338 
  if (dev->irq < 0) {
    #line 4339 
    err = dev->irq;
    #line 4340 
    goto err_out_free_netdev;
  }
  #line 4344 
  dev->min_mtu = 68U;
  #line 4345 
  if ((bp->caps & 32U) != 0U) {
    #line 4346 
    dev->max_mtu = (*(bp->macb_reg_readl))(bp,72) + 4294967278U;
  }
  else 
       #line 4348 
       dev->max_mtu = 1500U;
  #line 4350 
  if ((bp->caps & 128U) != 0U) {
    #line 4351 
    val = (int)((*(bp->macb_reg_readl))(bp,676) >> 8) & 15;
    #line 4352 
    if (val != 0) {
      #line 4353 
      bp->rx_bd_rd_prefetch = (int)((unsigned int)(2 << (val + -1)) * macb_dma_desc_get_size(bp));
    }
    #line 4356 
    val = (int)((*(bp->macb_reg_readl))(bp,676) >> 12) & 15;
    #line 4357 
    if (val != 0) {
      #line 4358 
      bp->tx_bd_rd_prefetch = (int)((unsigned int)(2 << (val + -1)) * macb_dma_desc_get_size(bp));
    }
  }
  #line 4362 
  bp->rx_intr_mask = 1026U;
  #line 4363 
  if ((bp->caps & 256U) != 0U) 
                               #line 4364 
                               bp->rx_intr_mask |= 4U;
  #line 4366 
  mac = (char *)of_get_mac_address(np);
  #line 4367 
  if (PTR_ERR((void *)mac) == -517L) {
    #line 4368 
    err = -517;
    #line 4369 
    goto err_out_free_netdev;
  }
  else {
    #line 4370 
    if (IS_ERR_OR_NULL((void *)mac)) 
                                     #line 4373 
                                     macb_get_hwaddr(bp); else 
                                                               #line 4371 
                                                               ether_addr_copy((bp->dev)->dev_addr,(u8 *)mac);
  }
  #line 4376 
  err = of_get_phy_mode(np,& interface);
  #line 4377 
  if (err != 0) 
                #line 4379 
                bp->phy_interface = PHY_INTERFACE_MODE_MII; else 
                                                                 #line 4381 
                                                                 bp->phy_interface = interface;
  #line 4383 
  bp->speed = -1;
  #line 4386 
  err = (*init)(pdev);
  #line 4387 
  if (err != 0) 
                #line 4388 
                goto err_out_free_netdev;
  #line 4390 
  err = macb_mii_init(bp);
  #line 4391 
  if (err != 0) 
                #line 4392 
                goto err_out_free_netdev;
  #line 4394 
  netif_carrier_off(dev);
  #line 4396 
  err = cif_register_netdev(dev);
  #line 4397 
  if (err != 0) {
    #line 4398 
    _dev_err(& pdev->dev,(char *)"Cannot register net device, aborting.\n");
    #line 4399 
    goto err_out_unregister_mdio;
  }
  #line 4402 
  cif_tasklet_init(& bp->hresp_err_tasklet,& macb_hresp_error_task,(unsigned long)bp);
  #line 4405 
  ;
  #line 4405 
  ;
  #line 4405 
  ;
  #line 4406 
  tmp_12 = (*(bp->macb_reg_readl))(bp,252);
  #line 4405 
  if ((int)macb_is_gem(bp) != 0) 
                                 #line 4405 
                                 tmp_14 = (char *)"GEM"; else 
                                                              #line 4405 
                                                              tmp_14 = (char *)"MACB";
  #line 4405 
  ;
  #line 4405 
  netdev_info(dev,(char *)"Cadence %s rev 0x%08x at 0x%08lx irq %d (%pM)\n",tmp_14,tmp_12,dev->base_addr,dev->irq,dev->dev_addr);
  #line 4409 
  pm_runtime_mark_last_busy(& (bp->pdev)->dev);
  #line 4410 
  pm_runtime_put_autosuspend(& (bp->pdev)->dev);
  #line 4412 
  return 0;
  #line 4414 
  err_out_unregister_mdio: 
                           #line 4414 
  ;
  #line 4415 
  mdiobus_unregister(bp->mii_bus);
  #line 4416 
  mdiobus_free(bp->mii_bus);
  #line 4418 
  err_out_free_netdev: 
                       #line 4418 
  ;
  #line 4419 
  cif_free_netdev(dev);
  #line 4421 
  err_disable_clocks: 
                      #line 4421 
  ;
  #line 4422 
  clk_disable_unprepare(tx_clk);
  #line 4423 
  clk_disable_unprepare(hclk);
  #line 4424 
  clk_disable_unprepare(pclk);
  #line 4425 
  clk_disable_unprepare(rx_clk);
  #line 4426 
  clk_disable_unprepare(tsu_clk);
  #line 4427 
  cif_pm_runtime_disable(& pdev->dev);
  #line 4428 
  pm_runtime_set_suspended(& pdev->dev);
  #line 4429 
  pm_runtime_dont_use_autosuspend(& pdev->dev);
  #line 4431 
  return err;
}

#line 4434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_remove(struct platform_device *pdev)
{
  #line 4436 
  struct net_device *dev;
  #line 4437 
  struct macb *bp;
  #line 4439 
  dev = (struct net_device *)platform_get_drvdata(pdev);
  #line 4441 
  if (dev != (struct net_device *)0) {
    #line 4442 
    bp = (struct macb *)netdev_priv(dev);
    #line 4443 
    mdiobus_unregister(bp->mii_bus);
    #line 4444 
    mdiobus_free(bp->mii_bus);
    #line 4446 
    cif_unregister_netdev(dev);
    #line 4447 
    tasklet_kill(& bp->hresp_err_tasklet);
    #line 4448 
    cif_pm_runtime_disable(& pdev->dev);
    #line 4449 
    pm_runtime_dont_use_autosuspend(& pdev->dev);
    #line 4450 
    if (! cif_pm_runtime_suspended(& pdev->dev)) {
      #line 4451 
      clk_disable_unprepare(bp->tx_clk);
      #line 4452 
      clk_disable_unprepare(bp->hclk);
      #line 4453 
      clk_disable_unprepare(bp->pclk);
      #line 4454 
      clk_disable_unprepare(bp->rx_clk);
      #line 4455 
      clk_disable_unprepare(bp->tsu_clk);
      #line 4456 
      pm_runtime_set_suspended(& pdev->dev);
    }
    #line 4458 
    phylink_destroy(bp->phylink);
    #line 4459 
    cif_free_netdev(dev);
  }
  #line 4462 
  return 0;
}

#line 4465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_suspend(struct device *dev)
{
  #line 4470 
  unsigned long flags;
  #line 4471 
  unsigned int q;
  #line 4467 
  struct net_device *netdev = dev_get_drvdata(dev);
  #line 4468 
  struct macb *bp = netdev_priv(netdev);
  #line 4469 
  struct macb_queue *queue = (struct macb_queue *)(& bp->queues);
  #line 4473 
  if (! netif_running(netdev)) 
                               #line 4474 
                               return 0;
  #line 4476 
  if ((bp->wol & 2U) != 0U) {
    #line 4477 
    (*(bp->macb_reg_writel))(bp,40,16384U);
    #line 4478 
    (*(bp->macb_reg_writel))(bp,196,65536U);
    #line 4479 
    enable_irq_wake((unsigned int)bp->queues[0].irq);
    #line 4480 
    netif_device_detach(netdev);
  }
  else {
    #line 4482 
    netif_device_detach(netdev);
    #line 4483 
    q = 0U;
    #line 4483 
    queue = (struct macb_queue *)(& bp->queues);
    #line 4483 
    while (bp->num_queues > q) {
      #line 4485 
      napi_disable(& queue->napi);
      #line 4484 
      q ++;
      #line 4484 
      queue ++;
    }
    #line 4486 
    rtnl_lock();
    #line 4487 
    phylink_stop(bp->phylink);
    #line 4488 
    rtnl_unlock();
    #line 4489 
    cif___ldv_spin_lock_lock_of_macb(& bp->lock);
    #line 4490 
    macb_reset_hw(bp);
    #line 4491 
    cif_spin_unlock_irqrestore_lock_of_macb(& bp->lock,flags);
    #line 4493 
    if ((bp->caps & 16U) == 0U) {
      #line 4494 
      u32 __v;
      {
        #line 4494 
        if ((int)macb_is_gem(bp) != 0) 
                                       #line 4494 
                                       __v = (*(bp->macb_reg_readl))(bp,12); else 
                                                                    #line 4494 
                                                                    __v = (*(bp->macb_reg_readl))(bp,192);
      }
      #line 4494 
      bp->pm_data.usrio = __v;
    }
    #line 4496 
    if ((netdev->hw_features & 137438953472ULL) != 0ULL) 
                                                         #line 4497 
                                                         bp->pm_data.scrt2 = (*(bp->macb_reg_readl))(bp,1760);
  }
  #line 4500 
  netif_carrier_off(netdev);
  #line 4501 
  if (bp->ptp_info != (struct macb_ptp_info *)0) 
                                                 #line 4502 
                                                 (*((bp->ptp_info)->ptp_remove))(netdev);
  #line 4503 
  cif_pm_runtime_force_suspend(dev);
  #line 4505 
  return 0;
}

#line 4508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_resume(struct device *dev)
{
  #line 4513 
  unsigned int q;
  #line 4510 
  struct net_device *netdev = dev_get_drvdata(dev);
  #line 4511 
  struct macb *bp = netdev_priv(netdev);
  #line 4512 
  struct macb_queue *queue = (struct macb_queue *)(& bp->queues);
  #line 4515 
  if (! netif_running(netdev)) 
                               #line 4516 
                               return 0;
  #line 4518 
  cif_pm_runtime_force_resume(dev);
  #line 4520 
  if ((bp->wol & 2U) != 0U) {
    #line 4521 
    (*(bp->macb_reg_writel))(bp,44,16384U);
    #line 4522 
    (*(bp->macb_reg_writel))(bp,196,0U);
    #line 4523 
    disable_irq_wake((unsigned int)bp->queues[0].irq);
  }
  else {
    #line 4525 
    (*(bp->macb_reg_writel))(bp,0,16U);
    #line 4527 
    if ((netdev->hw_features & 137438953472ULL) != 0ULL) 
                                                         #line 4528 
                                                         (*(bp->macb_reg_writel))(bp,1760,bp->pm_data.scrt2);
    #line 4530 
    if ((bp->caps & 16U) == 0U) {
      #line 4531 
      if ((int)macb_is_gem(bp) != 0) 
                                     #line 4531 
                                     (*(bp->macb_reg_writel))(bp,12,bp->pm_data.usrio); else 
                                                                    #line 4531 
                                                                    (*(bp->macb_reg_writel))(bp,192,bp->pm_data.usrio);
    }
    #line 4533 
    q = 0U;
    #line 4533 
    queue = (struct macb_queue *)(& bp->queues);
    #line 4533 
    while (bp->num_queues > q) {
      #line 4535 
      napi_enable(& queue->napi);
      #line 4534 
      q ++;
      #line 4534 
      queue ++;
    }
    #line 4536 
    rtnl_lock();
    #line 4537 
    phylink_start(bp->phylink);
    #line 4538 
    rtnl_unlock();
  }
  #line 4541 
  macb_init_hw(bp);
  #line 4542 
  macb_set_rx_mode(netdev);
  #line 4543 
  macb_restore_features(bp);
  #line 4544 
  netif_device_attach(netdev);
  #line 4545 
  if (bp->ptp_info != (struct macb_ptp_info *)0) 
                                                 #line 4546 
                                                 (*((bp->ptp_info)->ptp_init))(netdev);
  #line 4548 
  return 0;
}

#line 4551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_runtime_suspend(struct device *dev)
{
  #line 4553 
  struct net_device *netdev = dev_get_drvdata(dev);
  #line 4554 
  struct macb *bp = netdev_priv(netdev);
  #line 4556 
  if (! device_may_wakeup(& (bp->dev)->dev)) {
    #line 4557 
    clk_disable_unprepare(bp->tx_clk);
    #line 4558 
    clk_disable_unprepare(bp->hclk);
    #line 4559 
    clk_disable_unprepare(bp->pclk);
    #line 4560 
    clk_disable_unprepare(bp->rx_clk);
  }
  #line 4562 
  clk_disable_unprepare(bp->tsu_clk);
  #line 4564 
  return 0;
}

#line 4567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_runtime_resume(struct device *dev)
{
  #line 4569 
  struct net_device *netdev = dev_get_drvdata(dev);
  #line 4570 
  struct macb *bp = netdev_priv(netdev);
  #line 4572 
  if (! device_may_wakeup(& (bp->dev)->dev)) {
    #line 4573 
    clk_prepare_enable(bp->pclk);
    #line 4574 
    clk_prepare_enable(bp->hclk);
    #line 4575 
    clk_prepare_enable(bp->tx_clk);
    #line 4576 
    clk_prepare_enable(bp->rx_clk);
  }
  #line 4578 
  clk_prepare_enable(bp->tsu_clk);
  #line 4580 
  return 0;
}

#line 4583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct dev_pm_ops macb_pm_ops = {.suspend = & macb_suspend, .resume = & macb_resume, .freeze = & macb_suspend, .thaw = & macb_resume, .poweroff = & macb_suspend, .restore = & macb_resume, .runtime_suspend = & macb_runtime_suspend, .runtime_resume = & macb_runtime_resume};
#line 4588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static struct platform_driver macb_driver = {.probe = & macb_probe, .remove = & macb_remove, .driver = {.name = (char *)"macb", .of_match_table = (struct of_device_id *)(& macb_dt_ids), .pm = & macb_pm_ops}};
#line 4598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static int macb_driver_init(void)
{
  #line 4598 
  return cif___platform_driver_register(& macb_driver,& __this_module);
}

#line 4598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_main.c"
static void macb_driver_exit(void)
{
  #line 4598 
  cif_platform_driver_unregister(& macb_driver);
  #line 4599 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
struct platform_driver *emg_alias_macb_driver = & macb_driver;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
struct dev_pm_ops *emg_alias_macb_pm_ops = & macb_pm_ops;
#line 98 
#line 98 
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 100 
#line 100 
void emg_free_netdev(struct net_device *arg0);
#line 101 
#line 101 
void emg_platform_driver_unregister(struct platform_driver *arg0);
#line 102 
#line 102 
void emg_pm_runtime_disable(struct device *arg0);
#line 103 
#line 103 
void emg_pm_runtime_enable(struct device *arg0);
#line 104 
#line 104 
int emg_pm_runtime_force_resume(struct device *arg0);
#line 105 
#line 105 
int emg_pm_runtime_force_suspend(struct device *arg0);
#line 106 
#line 106 
int emg_pm_runtime_set_active(struct device *arg0);
#line 107 
#line 107 
_Bool emg_pm_runtime_suspended(struct device *arg0);
#line 108 
#line 108 
int emg_register_netdev(struct net_device *arg0);
#line 109 
#line 109 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 110 
#line 110 
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2);
#line 111 
#line 111 
void emg_tasklet_schedule(struct tasklet_struct *arg0);
#line 112 
#line 112 
void emg_unregister_netdev(struct net_device *arg0);
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_at91ether_close(struct net_device *arg0)
{
  #line 117 
  return at91ether_close(arg0);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_at91ether_open(struct net_device *arg0)
{
  #line 122 
  return at91ether_open(arg0);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
void emg_wrapper_at91ether_poll_controller(struct net_device *arg0)
{
  #line 127 
  at91ether_poll_controller(arg0);
  #line 128 
  return;
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
enum netdev_tx emg_wrapper_at91ether_start_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 132 
  return at91ether_start_xmit(arg0,arg1);
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_ethtool_op_get_ts_info(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  #line 137 
  return ethtool_op_get_ts_info(arg0,arg1);
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
void emg_wrapper_gem_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 142 
  gem_get_ethtool_stats(arg0,arg1,arg2);
  #line 143 
  return;
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
void emg_wrapper_gem_get_ethtool_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 147 
  gem_get_ethtool_strings(arg0,arg1,arg2);
  #line 148 
  return;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_gem_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 152 
  return gem_get_rxnfc(arg0,arg1,arg2);
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_gem_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 157 
  return gem_get_sset_count(arg0,arg1);
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_gem_set_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  #line 162 
  return gem_set_rxnfc(arg0,arg1);
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_change_mtu(struct net_device *arg0, int arg1)
{
  #line 167 
  return macb_change_mtu(arg0,arg1);
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
unsigned long long emg_wrapper_macb_features_check(struct sk_buff *arg0, struct net_device *arg1, unsigned long long arg2)
{
  #line 172 
  return macb_features_check(arg0,arg1,arg2);
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 177 
  return macb_get_link_ksettings(arg0,arg1);
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
void emg_wrapper_macb_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 182 
  macb_get_regs(arg0,arg1,arg2);
  #line 183 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_get_regs_len(struct net_device *arg0)
{
  #line 187 
  return macb_get_regs_len(arg0);
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
void emg_wrapper_macb_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 192 
  macb_get_ringparam(arg0,arg1);
  #line 193 
  return;
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
struct net_device_stats *emg_wrapper_macb_get_stats(struct net_device *arg0)
{
  #line 197 
  return macb_get_stats(arg0);
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_get_ts_info(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  #line 202 
  return macb_get_ts_info(arg0,arg1);
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
void emg_wrapper_macb_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 207 
  macb_get_wol(arg0,arg1);
  #line 208 
  return;
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 212 
  return macb_ioctl(arg0,arg1,arg2);
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
void emg_wrapper_macb_poll_controller(struct net_device *arg0)
{
  #line 217 
  macb_poll_controller(arg0);
  #line 218 
  return;
}

#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_probe(struct platform_device *arg0)
{
  #line 222 
  return macb_probe(arg0);
}

#line 226  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_remove(struct platform_device *arg0)
{
  #line 227 
  return macb_remove(arg0);
}

#line 231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_resume(struct device *arg0)
{
  #line 232 
  return macb_resume(arg0);
}

#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_runtime_resume(struct device *arg0)
{
  #line 237 
  return macb_runtime_resume(arg0);
}

#line 241  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_runtime_suspend(struct device *arg0)
{
  #line 242 
  return macb_runtime_suspend(arg0);
}

#line 246  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 247 
  return macb_set_features(arg0,arg1);
}

#line 251  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 252 
  return macb_set_link_ksettings(arg0,arg1);
}

#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 257 
  return macb_set_ringparam(arg0,arg1);
}

#line 261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
void emg_wrapper_macb_set_rx_mode(struct net_device *arg0)
{
  #line 262 
  macb_set_rx_mode(arg0);
  #line 263 
  return;
}

#line 266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 267 
  return macb_set_wol(arg0,arg1);
}

#line 271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
enum netdev_tx emg_wrapper_macb_start_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 272 
  return macb_start_xmit(arg0,arg1);
}

#line 276  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_wrapper_macb_suspend(struct device *arg0)
{
  #line 277 
  return macb_suspend(arg0);
}

#line 281  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
void emg_macb_driver_exit(void)
{
  #line 282 
  macb_driver_exit();
  #line 283 
  return;
}

#line 285  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
int emg_macb_driver_init(void)
{
  #line 286 
  return macb_driver_init();
}

#line 304  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 307 
  ldv_set_bit(nr,addr);
  #line 308 
  return;
}

#line 311  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 314 
  ldv_clear_bit(nr,addr);
  #line 315 
  return;
}

#line 318  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 321 
  ldv_init_list_head(list);
  #line 322 
  return;
}

#line 367  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 370 
  ldv_atomic_inc(v);
  #line 371 
  return;
}

#line 381  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 384 
  ldv_bitmap_zero(dst,nbits);
  #line 385 
  return;
}

#line 395  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 398 
  return ldv_ptr_err(ptr);
}

#line 402  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 405 
  return ldv_is_err(ptr);
}

#line 409  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static bool IS_ERR_OR_NULL(void *ptr)
{
  #line 412 
  return ldv_is_err_or_null(ptr);
}

#line 567  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 570 
  return ldv_kmalloc(size,flags);
}

#line 602  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 605 
  return ldv_kzalloc(size,flags);
}

#line 903  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 907 
  return emg_schedule_work(work);
}

#line 1018  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif___ldv_spin_lock_lock_of_macb(spinlock_t *lock)
{
  #line 1021 
  ldv_spin_model_lock((char *)"lock_of_macb");
  #line 1023 
  __ldv_spin_lock(lock);
  #line 1024 
  return;
}

#line 1027  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_macb(spinlock_t *lock, unsigned long flags)
{
  #line 1030 
  ldv_spin_model_unlock((char *)"lock_of_macb");
  #line 1032 
  spin_unlock_irqrestore(lock,flags);
  #line 1033 
  return;
}

#line 1036  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_spin_lock_lock_of_macb(spinlock_t *lock)
{
  #line 1039 
  ldv_spin_model_lock((char *)"lock_of_macb");
  #line 1041 
  spin_lock(lock);
  #line 1042 
  return;
}

#line 1045  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t)
{
  #line 1049 
  emg_tasklet_schedule(t);
  #line 1050 
  return;
}

#line 1053  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_spin_unlock_lock_of_macb(spinlock_t *lock)
{
  #line 1056 
  ldv_spin_model_unlock((char *)"lock_of_macb");
  #line 1058 
  spin_unlock(lock);
  #line 1059 
  return;
}

#line 1062  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif___ldv_spin_lock_rx_fs_lock_of_macb(spinlock_t *lock)
{
  #line 1065 
  ldv_spin_model_lock((char *)"rx_fs_lock_of_macb");
  #line 1067 
  __ldv_spin_lock(lock);
  #line 1068 
  return;
}

#line 1071  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_spin_unlock_irqrestore_rx_fs_lock_of_macb(spinlock_t *lock, unsigned long flags)
{
  #line 1074 
  ldv_spin_model_unlock((char *)"rx_fs_lock_of_macb");
  #line 1076 
  spin_unlock_irqrestore(lock,flags);
  #line 1077 
  return;
}

#line 1080  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 1083 
  return ldv_devm_kzalloc(size,flags);
}

#line 1087  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static int cif_pm_runtime_set_active(struct device *dev)
{
  #line 1091 
  return emg_pm_runtime_set_active(dev);
}

#line 1095  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_pm_runtime_enable(struct device *dev)
{
  #line 1099 
  emg_pm_runtime_enable(dev);
  #line 1100 
  return;
}

#line 1103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 1107 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 1111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1115 
  return emg_register_netdev(dev);
}

#line 1119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data)
{
  #line 1123 
  emg_tasklet_init(t,func,data);
  #line 1124 
  return;
}

#line 1127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1131 
  emg_free_netdev(dev);
  #line 1132 
  return;
}

#line 1135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_pm_runtime_disable(struct device *dev)
{
  #line 1139 
  emg_pm_runtime_disable(dev);
  #line 1140 
  return;
}

#line 1143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1147 
  emg_unregister_netdev(dev);
  #line 1148 
  return;
}

#line 1151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static bool cif_pm_runtime_suspended(struct device *dev)
{
  #line 1155 
  return emg_pm_runtime_suspended(dev);
}

#line 1159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static int cif_pm_runtime_force_suspend(struct device *dev)
{
  #line 1163 
  return emg_pm_runtime_force_suspend(dev);
}

#line 1167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static int cif_pm_runtime_force_resume(struct device *dev)
{
  #line 1171 
  return emg_pm_runtime_force_resume(dev);
}

#line 1175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2)
{
  #line 1179 
  return emg___platform_driver_register(ldv_func_arg1,ldv_func_arg2);
}

#line 1183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_main.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1)
{
  #line 1187 
  emg_platform_driver_unregister(ldv_func_arg1);
  #line 1188 
  return;
}

/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_ptp.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
  #line 26 
  *remainder = (unsigned int)(dividend % (unsigned long long)divisor);
  #line 27 
  return dividend / (unsigned long long)divisor;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64(u64 dividend, u32 divisor)
{
  #line 125 
  u32 remainder;
  #line 126 
  return div_u64_rem(dividend,divisor,& remainder);
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
#line 69 
void set_normalized_timespec64(struct timespec64 *, time64_t, s64);
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
__inline static struct timespec64 timespec64_add(struct timespec64 lhs, struct timespec64 rhs)
{
  #line 74 
  struct timespec64 ts_delta;
  #line 75 
  set_normalized_timespec64(& ts_delta,lhs.tv_sec + rhs.tv_sec,(long long)(lhs.tv_nsec + rhs.tv_nsec));
  #line 77 
  return ts_delta;
}

#line 144 
#line 144 
struct timespec64 ns_to_timespec64(s64);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_ptp.i.aux"
static long PTR_ERR_0(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_ptp.i.aux"
static bool IS_ERR_0(void *ptr);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 685  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_ptp.i.aux"
static void cif_spin_unlock_irqrestore_tsu_clk_lock_of_macb(spinlock_t *lock, unsigned long flags);
#line 35 
#line 676 
static void cif___ldv_spin_lock_tsu_clk_lock_of_macb(spinlock_t *lock);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ktime_set(s64 secs, unsigned long nsecs)
{
  #line 39 
  if ((long)(secs > 9223372035LL) != 0L) 
                                         #line 40 
                                         return 9223372036854775807LL;
  #line 42 
  return secs * 1000000000LL + (long long)nsecs;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static s64 ktime_to_ns(ktime_t kt)
{
  #line 99 
  return kt;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 68 
ktime_t ktime_get_with_offset(enum tk_offsets);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
__inline static ktime_t ktime_get_real(void)
{
  #line 79 
  return ktime_get_with_offset((enum tk_offsets)TK_OFFS_REAL);
}

#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_ptp.i.aux"
static bool cif_schedule_work_0(struct work_struct *work);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
  #line 1407 
  return & ((struct skb_shared_info *)skb_end_pointer(skb))->hwtstamps;
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 186 
struct ptp_clock *ptp_clock_register(struct ptp_clock_info *, struct device *);
#line 195 
#line 195 
int ptp_clock_unregister(struct ptp_clock *);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static struct macb_dma_desc_ptp *macb_ptp_desc(struct macb *bp, struct macb_dma_desc *desc)
{
  #line 31 
  if ((unsigned int)bp->hw_dma_cap == 2U) 
                                          #line 32 
                                          return (struct macb_dma_desc_ptp *)((u8 *)desc + 8UL);
  #line 34 
  if ((unsigned int)bp->hw_dma_cap == 3U) 
                                          #line 35 
                                          return (struct macb_dma_desc_ptp *)((u8 *)desc + 16UL);
  #line 38 
  return (struct macb_dma_desc_ptp *)0;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static int gem_tsu_get_time(struct ptp_clock_info *ptp, struct timespec64 *ts)
{
  #line 43 
  void *__mptr;
  #line 44 
  unsigned long flags;
  #line 45 
  long first;
  #line 45 
  long second;
  #line 46 
  u32 secl;
  #line 46 
  u32 sech;
  #line 43 
  __mptr = (void *)ptp;
  #line 43 
  struct macb *bp = ((struct macb *)(__mptr + 18446744073709528024U));
  #line 48 
  cif___ldv_spin_lock_tsu_clk_lock_of_macb(& bp->tsu_clk_lock);
  #line 49 
  first = (long)(*(bp->macb_reg_readl))(bp,468);
  #line 50 
  secl = (*(bp->macb_reg_readl))(bp,464);
  #line 51 
  sech = (*(bp->macb_reg_readl))(bp,448);
  #line 52 
  second = (long)(*(bp->macb_reg_readl))(bp,468);
  #line 55 
  if (first > second) {
    #line 59 
    ts->tv_nsec = (long)(*(bp->macb_reg_readl))(bp,468);
    #line 60 
    secl = (*(bp->macb_reg_readl))(bp,464);
    #line 61 
    sech = (*(bp->macb_reg_readl))(bp,448);
  }
  else 
       #line 63 
       ts->tv_nsec = first;
  #line 66 
  cif_spin_unlock_irqrestore_tsu_clk_lock_of_macb(& bp->tsu_clk_lock,flags);
  #line 67 
  ts->tv_sec = (long long)(((unsigned long long)sech << 32) | (unsigned long long)secl) & 281474976710655LL;
  #line 69 
  return 0;
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static int gem_tsu_set_time(struct ptp_clock_info *ptp, struct timespec64 *ts)
{
  #line 75 
  void *__mptr;
  #line 76 
  unsigned long flags;
  #line 77 
  u32 ns;
  #line 77 
  u32 sech;
  #line 77 
  u32 secl;
  #line 75 
  __mptr = (void *)ptp;
  #line 75 
  struct macb *bp = ((struct macb *)(__mptr + 18446744073709528024U));
  #line 79 
  secl = (unsigned int)ts->tv_sec;
  #line 80 
  sech = (unsigned int)(ts->tv_sec >> 32) & 65535U;
  #line 81 
  ns = (unsigned int)ts->tv_nsec;
  #line 83 
  cif___ldv_spin_lock_tsu_clk_lock_of_macb(& bp->tsu_clk_lock);
  #line 86 
  (*(bp->macb_reg_writel))(bp,468,0U);
  #line 87 
  (*(bp->macb_reg_writel))(bp,448,sech);
  #line 89 
  (*(bp->macb_reg_writel))(bp,464,secl);
  #line 90 
  (*(bp->macb_reg_writel))(bp,468,ns);
  #line 92 
  cif_spin_unlock_irqrestore_tsu_clk_lock_of_macb(& bp->tsu_clk_lock,flags);
  #line 94 
  return 0;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static int gem_tsu_incr_set(struct macb *bp, struct tsu_incr *incr_spec)
{
  #line 99 
  unsigned long flags;
  #line 106 
  cif___ldv_spin_lock_tsu_clk_lock_of_macb(& bp->tsu_clk_lock);
  #line 108 
  (*(bp->macb_reg_writel))(bp,444,(incr_spec->sub_ns << 24) | ((incr_spec->sub_ns >> 8) & 65535U));
  #line 111 
  (*(bp->macb_reg_writel))(bp,476,incr_spec->ns & 255U);
  #line 112 
  cif_spin_unlock_irqrestore_tsu_clk_lock_of_macb(& bp->tsu_clk_lock,flags);
  #line 114 
  return 0;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static int gem_ptp_adjfine(struct ptp_clock_info *ptp, long scaled_ppm)
{
  #line 119 
  void *__mptr;
  #line 120 
  struct tsu_incr incr_spec;
  #line 122 
  u32 word;
  #line 123 
  u64 adj;
  #line 119 
  __mptr = (void *)ptp;
  #line 119 
  struct macb *bp = ((struct macb *)(__mptr + 18446744073709528024U));
  #line 121 
  bool neg_adj = (_Bool)0;
  #line 125 
  if (scaled_ppm < 0L) {
    #line 126 
    neg_adj = (_Bool)1;
    #line 127 
    scaled_ppm = - scaled_ppm;
  }
  #line 131 
  incr_spec.sub_ns = bp->tsu_incr.sub_ns;
  #line 132 
  incr_spec.ns = bp->tsu_incr.ns;
  #line 135 
  word = (incr_spec.ns << 24U) + incr_spec.sub_ns;
  #line 136 
  adj = (unsigned long long)word * (unsigned long long)scaled_ppm;
  #line 140 
  adj += 500000ULL;
  #line 141 
  adj >>= 16;
  #line 142 
  adj = div_u64(adj,1000000U);
  #line 143 
  if ((int)neg_adj != 0) 
                         #line 143 
                         adj = (unsigned long long)word - adj; else 
                                                                    #line 143 
                                                                    adj = (unsigned long long)word + adj;
  #line 145 
  incr_spec.ns = (unsigned int)(adj >> 24) & 255U;
  #line 147 
  incr_spec.sub_ns = (unsigned int)adj & 16777215U;
  #line 148 
  gem_tsu_incr_set(bp,& incr_spec);
  #line 149 
  return 0;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static int gem_ptp_adjtime(struct ptp_clock_info *ptp, s64 delta)
{
  #line 154 
  void *__mptr;
  #line 155 
  struct timespec64 now;
  #line 156 
  u32 adj;
  #line 154 
  __mptr = (void *)ptp;
  #line 154 
  struct macb *bp = ((struct macb *)(__mptr + 18446744073709528024U));
  #line 155 
  struct timespec64 then = ns_to_timespec64(delta);
  #line 156 
  u32 sign = 0U;
  #line 158 
  if (delta < 0LL) {
    #line 159 
    sign = 1U;
    #line 160 
    delta = - delta;
  }
  #line 163 
  if (delta > 1073741823LL) {
    #line 164 
    gem_tsu_get_time(& bp->ptp_clock_info,& now);
    #line 165 
    now = timespec64_add(now,then);
    #line 167 
    gem_tsu_set_time(& bp->ptp_clock_info,& now);
  }
  else {
    #line 170 
    adj = (unsigned int)((long long)(sign << 31) | delta);
    #line 172 
    (*(bp->macb_reg_writel))(bp,472,adj);
  }
  #line 175 
  return 0;
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static int gem_ptp_enable(struct ptp_clock_info *ptp, struct ptp_clock_request *rq, int on)
{
  #line 181 
  return -95;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static struct ptp_clock_info gem_ptp_caps_template = {.owner = & __this_module, .name = {(char)'g', (char)'e', (char)'m', (char)'-', (char)'p', (char)'t', (char)'p', (char)'-', (char)'t', (char)'i', (char)'m', (char)'e', (char)'r'}, .pps = 1, .adjfine = & gem_ptp_adjfine, .adjtime = & gem_ptp_adjtime, .gettime64 = & gem_tsu_get_time, .settime64 = & gem_tsu_set_time, .enable = & gem_ptp_enable};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static void gem_ptp_init_timer(struct macb *bp)
{
  #line 203 
  u64 adj;
  #line 202 
  u32 rem = 0U;
  #line 205 
  bp->tsu_incr.ns = (unsigned int)div_u64_rem(1000000000ULL,bp->tsu_rate,& rem);
  #line 206 
  if (rem != 0U) {
    #line 207 
    adj = (unsigned long long)rem;
    #line 208 
    adj <<= 24;
    #line 209 
    bp->tsu_incr.sub_ns = (unsigned int)div_u64(adj,bp->tsu_rate);
  }
  else 
       #line 211 
       bp->tsu_incr.sub_ns = 0U;
  #line 212 
  return;
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static void gem_ptp_init_tsu(struct macb *bp)
{
  #line 217 
  struct timespec64 ts;
  #line 220 
  ts = ns_to_timespec64(ktime_to_ns(ktime_get_real()));
  #line 223 
  gem_tsu_set_time(& bp->ptp_clock_info,& ts);
  #line 226 
  gem_tsu_incr_set(bp,& bp->tsu_incr);
  #line 228 
  (*(bp->macb_reg_writel))(bp,472,0U);
  #line 229 
  return;
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static void gem_ptp_clear_timer(struct macb *bp)
{
  #line 233 
  bp->tsu_incr.sub_ns = 0U;
  #line 234 
  bp->tsu_incr.ns = 0U;
  #line 236 
  (*(bp->macb_reg_writel))(bp,444,0U);
  #line 237 
  (*(bp->macb_reg_writel))(bp,476,0U);
  #line 238 
  (*(bp->macb_reg_writel))(bp,472,0U);
  #line 239 
  return;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static int gem_hw_timestamp(struct macb *bp, u32 dma_desc_ts_1, u32 dma_desc_ts_2, struct timespec64 *ts)
{
  #line 244 
  struct timespec64 tsu;
  #line 246 
  ts->tv_sec = (long long)(((dma_desc_ts_2 << 2) & 60U) | (dma_desc_ts_1 >> 30));
  #line 248 
  ts->tv_nsec = (long)dma_desc_ts_1 & 1073741823L;
  #line 254 
  gem_tsu_get_time(& bp->ptp_clock_info,& tsu);
  #line 260 
  if ((ts->tv_sec & 32LL) != 0LL && (tsu.tv_sec & 32LL) == 0LL) 
                                                                #line 262 
                                                                ts->tv_sec += -64LL;
  #line 264 
  ts->tv_sec += tsu.tv_sec & -64LL;
  #line 266 
  return 0;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
void gem_ptp_rxstamp(struct macb *bp, struct sk_buff *skb, struct macb_dma_desc *desc)
{
  #line 273 
  struct macb_dma_desc_ptp *desc_ptp;
  #line 274 
  struct timespec64 ts;
  #line 272 
  struct skb_shared_hwtstamps *shhwtstamps = skb_hwtstamps(skb);
  #line 276 
  if ((desc->addr & 4U) != 0U) {
    #line 277 
    desc_ptp = macb_ptp_desc(bp,desc);
    #line 278 
    gem_hw_timestamp(bp,desc_ptp->ts_1,desc_ptp->ts_2,& ts);
    #line 279 
    memset((void *)shhwtstamps,0,8UL);
    #line 280 
    shhwtstamps->hwtstamp = ktime_set(ts.tv_sec,(unsigned long)ts.tv_nsec);
  }
  #line 282 
  return;
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static void gem_tstamp_tx(struct macb *bp, struct sk_buff *skb, struct macb_dma_desc_ptp *desc_ptp)
{
  #line 287 
  struct skb_shared_hwtstamps shhwtstamps;
  #line 288 
  struct timespec64 ts;
  #line 290 
  gem_hw_timestamp(bp,desc_ptp->ts_1,desc_ptp->ts_2,& ts);
  #line 291 
  memset((void *)(& shhwtstamps),0,8UL);
  #line 292 
  shhwtstamps.hwtstamp = ktime_set(ts.tv_sec,(unsigned long)ts.tv_nsec);
  #line 293 
  skb_tstamp_tx(skb,& shhwtstamps);
  #line 294 
  return;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
int gem_ptp_txstamp(struct macb_queue *queue, struct sk_buff *skb, struct macb_dma_desc *desc)
{
  #line 300 
  union __anonunion___u_1689 __u;
  #line 301 
  struct macb_dma_desc_ptp *desc_ptp;
  #line 302 
  struct gem_tx_ts *tx_timestamp;
  #line 299 
  __read_once_size((void *)(& queue->tx_ts_tail),(void *)(& __u.__c),4);
  #line 299 
  unsigned long tail = (unsigned long)(__u.__val);
  #line 300 
  unsigned long head = (unsigned long)queue->tx_ts_head;
  #line 304 
  if ((desc->ctrl & 8388608U) == 0U) 
                                     #line 305 
                                     return -22;
  #line 307 
  if ((((tail - head) + 18446744073709551615UL) & 127UL) == 0UL) 
                                                                 #line 308 
                                                                 return -12;
  #line 310 
  ((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags | 4U);
  #line 311 
  desc_ptp = macb_ptp_desc(queue->bp,desc);
  #line 312 
  tx_timestamp = & queue->tx_timestamps[head];
  #line 313 
  tx_timestamp->skb = skb;
  #line 314 
  ldv_inline_asm();
  #line 316 
  tx_timestamp->desc_ptp.ts_1 = desc_ptp->ts_1;
  #line 317 
  tx_timestamp->desc_ptp.ts_2 = desc_ptp->ts_2;
  #line 321 
  ldv_inline_asm();
  {
    #line 320 
    union __anonunion___u_1691 __u_0 = {.__val = ((unsigned int)head + 1U) & 127U};
    #line 319 
    __write_once_size((void *)(& queue->tx_ts_head),(void *)(& __u_0.__c),4);
    #line 319 
    unsigned int tmp_2 = __u_0.__val;
  }
  #line 322 
  cif_schedule_work_0(& queue->tx_ts_task);
  #line 323 
  return 0;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static void gem_tx_timestamp_flush(struct work_struct *work)
{
  #line 329 
  void *__mptr;
  #line 334 
  unsigned int ___p1;
  #line 330 
  unsigned long head;
  #line 330 
  unsigned long tail;
  #line 331 
  struct gem_tx_ts *tx_ts;
  #line 329 
  __mptr = (void *)work;
  #line 328 
  struct macb_queue *queue = ((struct macb_queue *)(__mptr + 18446744073709550968U));
  {
    #line 335 
    union __anonunion___u_1693 __u;
    #line 334 
    __read_once_size((void *)(& queue->tx_ts_head),(void *)(& __u.__c),4);
    #line 334 
    ___p1 = (__u.__val);
    #line 337 
    ldv_inline_asm();
    }
  #line 334 
  head = (unsigned long)___p1;
  #line 335 
  tail = (unsigned long)queue->tx_ts_tail;
  #line 337 
  while (((head - tail) & 127UL) != 0UL) {
    #line 338 
    tx_ts = & queue->tx_timestamps[tail];
    #line 339 
    gem_tstamp_tx(queue->bp,tx_ts->skb,& tx_ts->desc_ptp);
    #line 341 
    dev_kfree_skb_any(tx_ts->skb);
    #line 345 
    ldv_inline_asm();
    {
      #line 344 
      union __anonunion___u_1695 __u_0 = {.__val = ((unsigned int)tail + 1U) & 127U};
      #line 343 
      __write_once_size((void *)(& queue->tx_ts_tail),(void *)(& __u_0.__c),4);
      #line 343 
      unsigned int tmp_2 = __u_0.__val;
    }
    #line 345 
    tail = (unsigned long)queue->tx_ts_tail;
  }
  #line 347 
  return;
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
void gem_ptp_init(struct net_device *dev)
{
  #line 352 
  struct macb_queue *queue;
  #line 353 
  unsigned int q;
  #line 351 
  struct macb *bp = netdev_priv(dev);
  #line 355 
  bp->ptp_clock_info = gem_ptp_caps_template;
  #line 358 
  bp->tsu_rate = (*((bp->ptp_info)->get_tsu_rate))(bp);
  #line 359 
  bp->ptp_clock_info.max_adj = (*((bp->ptp_info)->get_ptp_max_adj))();
  #line 360 
  gem_ptp_init_timer(bp);
  #line 361 
  bp->ptp_clock = ptp_clock_register(& bp->ptp_clock_info,& dev->dev);
  #line 362 
  if ((int)IS_ERR_0((void *)bp->ptp_clock) != 0) {
    #line 363 
    printk((char *)"\001",PTR_ERR_0((void *)bp->ptp_clock));
    #line 365 
    bp->ptp_clock = (struct ptp_clock *)0;
    #line 366 
    return;
  }
  else 
    #line 367 
    if (bp->ptp_clock == (struct ptp_clock *)0) {
      #line 368 
      printk((char *)"\001");
      #line 369 
      return;
    }
  #line 372 
  spinlock_check(& bp->tsu_clk_lock);
  {
    #line 372 
    struct lock_class_key __key;
    #line 372 
    __raw_spin_lock_init(& bp->tsu_clk_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&bp->tsu_clk_lock)->rlock",& __key);
  }
  #line 373 
  q = 0U;
  #line 373 
  queue = (struct macb_queue *)(& bp->queues);
  #line 373 
  while (bp->num_queues > q) {
    #line 374 
    queue->tx_ts_head = 0U;
    #line 375 
    queue->tx_ts_tail = 0U;
    {
      #line 376 
      struct lock_class_key __key_0;
      #line 376 
      __init_work(& queue->tx_ts_task,0);
      #line 376 
      atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
      #line 376 
      queue->tx_ts_task.data = __constr_expr_34;
      #line 376 
      lockdep_init_map(& queue->tx_ts_task.lockdep_map,(char *)"(work_completion)",& __key_0,0);
      #line 376 
      INIT_LIST_HEAD_0(& queue->tx_ts_task.entry);
      #line 376 
      queue->tx_ts_task.func = & gem_tx_timestamp_flush;
    }
    #line 373 
    q ++;
    #line 373 
    queue ++;
  }
  #line 379 
  gem_ptp_init_tsu(bp);
  #line 381 
  _dev_info(& (bp->pdev)->dev,(char *)"%s ptp clock registered.\n",(char *)"gem-ptp-timer");
  #line 382 
  return;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
void gem_ptp_remove(struct net_device *ndev)
{
  #line 387 
  struct macb *bp = netdev_priv(ndev);
  #line 389 
  if (bp->ptp_clock != (struct ptp_clock *)0) 
                                              #line 390 
                                              ptp_clock_unregister(bp->ptp_clock);
  #line 392 
  gem_ptp_clear_timer(bp);
  #line 394 
  _dev_info(& (bp->pdev)->dev,(char *)"%s ptp clock unregistered.\n",(char *)"gem-ptp-timer");
  #line 395 
  return;
}

#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static int gem_ptp_set_ts_mode(struct macb *bp, enum macb_bd_control tx_bd_control, enum macb_bd_control rx_bd_control)
{
  #line 402 
  (*(bp->macb_reg_writel))(bp,1228,((unsigned int)tx_bd_control << 4) & 48U);
  #line 403 
  (*(bp->macb_reg_writel))(bp,1232,((unsigned int)rx_bd_control << 4) & 48U);
  #line 405 
  return 0;
}

#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
int gem_get_hwtst(struct net_device *dev, struct ifreq *rq)
{
  #line 410 
  struct hwtstamp_config *tstamp_config;
  #line 411 
  struct macb *bp = netdev_priv(dev);
  #line 413 
  tstamp_config = & bp->tstamp_config;
  #line 414 
  if (((int)bp->hw_dma_cap & 2) == 0) 
                                      #line 415 
                                      return -95;
  #line 417 
  if (copy_to_user(rq->ifr_ifru.ifru_data,(void *)tstamp_config,12UL) != 0UL) 
    #line 418 
    return -14; else 
                     #line 420 
                     return 0;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
static int gem_ptp_set_one_step_sync(struct macb *bp, u8 enable)
{
  #line 425 
  u32 reg_val;
  #line 427 
  reg_val = (*(bp->macb_reg_readl))(bp,0);
  #line 429 
  if ((unsigned int)enable != 0U) 
                                  #line 430 
                                  (*(bp->macb_reg_writel))(bp,0,reg_val | 16777216U); else 
                                                                    #line 432 
                                                                    (*(bp->macb_reg_writel))(bp,0,reg_val & 4278190079U);
  #line 434 
  return 0;
}

#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cadence/macb_ptp.c"
int gem_set_hwtst(struct net_device *dev, struct ifreq *ifr, int cmd)
{
  #line 441 
  struct hwtstamp_config *tstamp_config;
  #line 443 
  u32 regval;
  #line 439 
  enum macb_bd_control tx_bd_control = TSTAMP_DISABLED;
  #line 440 
  enum macb_bd_control rx_bd_control = TSTAMP_DISABLED;
  #line 442 
  struct macb *bp = netdev_priv(dev);
  #line 445 
  tstamp_config = & bp->tstamp_config;
  #line 446 
  if (((int)bp->hw_dma_cap & 2) == 0) 
                                      #line 447 
                                      return -95;
  #line 449 
  if (copy_from_user((void *)tstamp_config,ifr->ifr_ifru.ifru_data,12UL) != 0UL) 
    #line 451 
    return -14;
  #line 454 
  if (tstamp_config->flags != 0) 
                                 #line 455 
                                 return -22;
  #line 457 
  switch (tstamp_config->tx_type) {
    #line 458 
    case 0: 
            #line 458 
    ;
    #line 459 
    break;
    #line 460 
    case 2: 
            #line 460 
    ;
    #line 461 
    if (gem_ptp_set_one_step_sync(bp,(unsigned char)1) != 0) 
                                                             #line 462 
                                                             return -34;
    #line 464 
    case 1: 
            #line 464 
    ;
    #line 465 
    tx_bd_control = TSTAMP_ALL_FRAMES;
    #line 466 
    break;
    #line 467 
    default: 
             #line 467 
    ;
    #line 468 
    return -34;
  }
  #line 471 
  switch (tstamp_config->rx_filter) {
    #line 472 
    case 0: 
            #line 472 
    ;
    #line 473 
    break;
    #line 474 
    case 4: 
            #line 474 
    ;
    #line 475 
    break;
    #line 476 
    case 5: 
            #line 476 
    ;
    #line 477 
    break;
    #line 478 
    case 12: 
             #line 478 
    ;
    #line 479 
    case 9: 
            #line 479 
    ;
    #line 480 
    case 6: 
            #line 480 
    ;
    #line 481 
    case 13: 
             #line 481 
    ;
    #line 482 
    case 10: 
             #line 482 
    ;
    #line 483 
    case 7: 
            #line 483 
    ;
    #line 484 
    case 14: 
             #line 484 
    ;
    #line 485 
    case 11: 
             #line 485 
    ;
    #line 486 
    case 8: 
            #line 486 
    ;
    #line 487 
    rx_bd_control = TSTAMP_ALL_PTP_FRAMES;
    #line 488 
    tstamp_config->rx_filter = 12;
    #line 489 
    regval = (*(bp->macb_reg_readl))(bp,0);
    #line 490 
    (*(bp->macb_reg_writel))(bp,0,regval | 32768U);
    #line 491 
    break;
    #line 492 
    case 3: 
            #line 492 
    ;
    #line 493 
    case 1: 
            #line 493 
    ;
    #line 494 
    rx_bd_control = TSTAMP_ALL_FRAMES;
    #line 495 
    tstamp_config->rx_filter = 1;
    #line 496 
    break;
    #line 497 
    default: 
             #line 497 
    ;
    #line 498 
    tstamp_config->rx_filter = 0;
    #line 499 
    return -34;
  }
  #line 502 
  if (gem_ptp_set_ts_mode(bp,tx_bd_control,rx_bd_control) != 0) 
                                                                #line 503 
                                                                return -34;
  #line 505 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,(void *)tstamp_config,12UL) != 0UL) 
    #line 506 
    return -14; else 
                     #line 508 
                     return 0;
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_ptp.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 135 
  ldv_init_list_head(list);
  #line 136 
  return;
}

#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_ptp.i.aux"
static long PTR_ERR_0(void *ptr)
{
  #line 212 
  return ldv_ptr_err(ptr);
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_ptp.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 219 
  return ldv_is_err(ptr);
}

#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_ptp.i.aux"
static void cif___ldv_spin_lock_tsu_clk_lock_of_macb(spinlock_t *lock)
{
  #line 679 
  ldv_spin_model_lock((char *)"tsu_clk_lock_of_macb");
  #line 681 
  __ldv_spin_lock(lock);
  #line 682 
  return;
}

#line 685  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_ptp.i.aux"
static void cif_spin_unlock_irqrestore_tsu_clk_lock_of_macb(spinlock_t *lock, unsigned long flags)
{
  #line 688 
  ldv_spin_model_unlock((char *)"tsu_clk_lock_of_macb");
  #line 690 
  spin_unlock_irqrestore_0(lock,flags);
  #line 691 
  return;
}

#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/0/concurrency safety/weaver/macb_ptp.i.aux"
static bool cif_schedule_work_0(struct work_struct *work)
{
  #line 698 
  return emg_schedule_work(work);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 74 
#line 156 
void emg_dispatch_deregister_16(struct net_device *arg0);
#line 75 
#line 136 
void emg_dispatch_deregister_5(struct platform_driver *arg0);
#line 76 
#line 106 
void emg_dispatch_pm_deregister_18(void);
#line 77 
#line 115 
void emg_dispatch_pm_register_18(void);
#line 78 
#line 145 
void emg_dispatch_register_12(struct net_device *arg0);
#line 79 
#line 125 
void emg_dispatch_register_2(struct platform_driver *arg0);
#line 80 
#line 2255 
void *emg_entry_point_insmod(void *arg0);
#line 82 
#line 165 
void *emg_net_random_allocationless_scenario_macb_get_ringparam(void *arg0);
#line 84 
#line 694 
void *emg_platform_platform_instance_macb_driver(void *arg0);
#line 85 
#line 871 
void *emg_pm_pm_ops_scenario_macb_pm_ops(void *arg0);
#line 97 
#line 2284 
int main(void);
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_pm_deregister_18(void)
{
  #line 107 
  int ret;
  #line 108 
  struct emg_struct_platform_instance_macb_driver_18 *cf_arg_19;
  #line 109 
  ret = pthread_join(emg_thread_19,(void **)0);
  #line 110 
  __VERIFIER_assume(ret == 0);
  #line 111 
  return;
}

#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_pm_register_18(void)
{
  #line 116 
  int ret;
  #line 117 
  struct emg_struct_platform_instance_macb_driver_18 *cf_arg_19;
  #line 118 
  cf_arg_19 = (struct emg_struct_platform_instance_macb_driver_18 *)ldv_xmalloc(16UL);
  #line 119 
  ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_pm_pm_ops_scenario_macb_pm_ops,(void *)cf_arg_19);
  #line 120 
  __VERIFIER_assume(ret == 0);
  #line 121 
  return;
}

#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct platform_driver *arg0)
{
  #line 126 
  int ret;
  #line 127 
  struct emg_struct_platform_instance_macb_driver_18 *cf_arg_18;
  #line 128 
  cf_arg_18 = (struct emg_struct_platform_instance_macb_driver_18 *)ldv_xmalloc(16UL);
  #line 129 
  cf_arg_18->arg0 = arg0;
  #line 130 
  ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_platform_platform_instance_macb_driver,(void *)cf_arg_18);
  #line 131 
  __VERIFIER_assume(ret == 0);
  #line 132 
  return;
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_5(struct platform_driver *arg0)
{
  #line 137 
  int ret;
  #line 138 
  struct emg_struct_platform_instance_macb_driver_18 *cf_arg_18;
  #line 139 
  ret = pthread_join(emg_thread_18,(void **)0);
  #line 140 
  __VERIFIER_assume(ret == 0);
  #line 141 
  return;
}

#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_12(struct net_device *arg0)
{
  #line 146 
  int ret;
  #line 147 
  struct emg_struct_random_allocationless_scenario_macb_get_ringparam_17 *cf_arg_17;
  #line 148 
  cf_arg_17 = (struct emg_struct_random_allocationless_scenario_macb_get_ringparam_17 *)ldv_xmalloc(16UL);
  #line 149 
  cf_arg_17->arg0 = arg0;
  #line 150 
  ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_macb_get_ringparam,(void *)cf_arg_17);
  #line 151 
  __VERIFIER_assume(ret == 0);
  #line 152 
  return;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_16(struct net_device *arg0)
{
  #line 157 
  int ret;
  #line 158 
  struct emg_struct_random_allocationless_scenario_macb_get_ringparam_17 *cf_arg_17;
  #line 159 
  ret = pthread_join(emg_thread_17,(void **)0);
  #line 160 
  __VERIFIER_assume(ret == 0);
  #line 161 
  return;
}

#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_macb_get_ringparam(void *arg0)
{
  #line 168 
  struct net_device *emg_17_container;
  #line 169 
  struct sk_buff *emg_17_emg_param_0_27;
  #line 170 
  struct sk_buff *emg_17_emg_param_0_31;
  #line 171 
  struct sk_buff *emg_17_emg_param_0_6;
  #line 172 
  struct ethtool_ringparam *emg_17_emg_param_1_0;
  #line 173 
  struct ethtool_regs *emg_17_emg_param_1_1;
  #line 174 
  struct ethtool_ringparam *emg_17_emg_param_1_10;
  #line 175 
  struct ethtool_stats *emg_17_emg_param_1_11;
  #line 176 
  struct ethtool_link_ksettings *emg_17_emg_param_1_13;
  #line 177 
  struct ethtool_regs *emg_17_emg_param_1_14;
  #line 178 
  struct ethtool_ringparam *emg_17_emg_param_1_16;
  #line 179 
  struct ethtool_rxnfc *emg_17_emg_param_1_17;
  #line 180 
  int emg_17_emg_param_1_19;
  #line 181 
  unsigned int emg_17_emg_param_1_20;
  #line 182 
  struct ethtool_ts_info *emg_17_emg_param_1_22;
  #line 183 
  struct ethtool_wolinfo *emg_17_emg_param_1_23;
  #line 184 
  int emg_17_emg_param_1_24;
  #line 185 
  struct ifreq *emg_17_emg_param_1_25;
  #line 186 
  unsigned long long emg_17_emg_param_1_29;
  #line 187 
  struct ifreq *emg_17_emg_param_1_3;
  #line 188 
  void *emg_17_emg_param_1_30;
  #line 189 
  struct ethtool_link_ksettings *emg_17_emg_param_1_32;
  #line 190 
  struct ethtool_ringparam *emg_17_emg_param_1_33;
  #line 191 
  struct ethtool_rxnfc *emg_17_emg_param_1_34;
  #line 192 
  struct ethtool_wolinfo *emg_17_emg_param_1_35;
  #line 193 
  void *emg_17_emg_param_1_5;
  #line 194 
  struct ethtool_link_ksettings *emg_17_emg_param_1_7;
  #line 195 
  struct ethtool_link_ksettings *emg_17_emg_param_1_8;
  #line 196 
  struct ethtool_ts_info *emg_17_emg_param_1_9;
  #line 197 
  unsigned long long *emg_17_emg_param_2_12;
  #line 198 
  void *emg_17_emg_param_2_15;
  #line 199 
  unsigned int *emg_17_emg_param_2_18;
  #line 200 
  void *emg_17_emg_param_2_2;
  #line 201 
  unsigned char *emg_17_emg_param_2_21;
  #line 202 
  int emg_17_emg_param_2_26;
  #line 203 
  unsigned long long emg_17_emg_param_2_28;
  #line 204 
  int emg_17_emg_param_2_4;
  #line 205 
  int emg_repeat_cnt_call_17 = 1;
  #line 207 
  struct emg_struct_random_allocationless_scenario_macb_get_ringparam_17 *data = (struct emg_struct_random_allocationless_scenario_macb_get_ringparam_17 *)arg0;
  #line 212 
  if (data != (struct emg_struct_random_allocationless_scenario_macb_get_ringparam_17 *)0) {
    #line 213 
    emg_17_container = data->arg0;
    #line 214 
    ldv_free((void *)data);
  }
  #line 219 
  goto emg_call_17;
  #line 223 
  return (void *)0;
  #line 226 
  emg_call_17: 
               #line 226 
  ;
  #line 227 
  switch (ldv_undef_int()) {
    #line 228 
    case 0: 
            #line 228 
    ;
    #line 230 
    emg_17_emg_param_1_35 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 230 
    emg_17_emg_param_1_35 = emg_17_emg_param_1_35;
    #line 234 
    emg_wrapper_macb_set_wol(emg_17_container,emg_17_emg_param_1_35);
    #line 238 
    ldv_free((void *)emg_17_emg_param_1_35);
    #line 240 
    break;
    #line 242 
    case 1: 
            #line 242 
    ;
    #line 244 
    emg_17_emg_param_1_34 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 244 
    emg_17_emg_param_1_34 = emg_17_emg_param_1_34;
    #line 248 
    emg_wrapper_gem_set_rxnfc(emg_17_container,emg_17_emg_param_1_34);
    #line 252 
    ldv_free((void *)emg_17_emg_param_1_34);
    #line 254 
    break;
    #line 256 
    case 2: 
            #line 256 
    ;
    #line 258 
    emg_17_emg_param_1_33 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 258 
    emg_17_emg_param_1_33 = emg_17_emg_param_1_33;
    #line 262 
    emg_wrapper_macb_set_ringparam(emg_17_container,emg_17_emg_param_1_33);
    #line 266 
    ldv_free((void *)emg_17_emg_param_1_33);
    #line 268 
    break;
    #line 270 
    case 3: 
            #line 270 
    ;
    #line 272 
    emg_17_emg_param_1_32 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 272 
    emg_17_emg_param_1_32 = emg_17_emg_param_1_32;
    #line 276 
    emg_wrapper_macb_set_link_ksettings(emg_17_container,emg_17_emg_param_1_32);
    #line 280 
    ldv_free((void *)emg_17_emg_param_1_32);
    #line 282 
    break;
    #line 284 
    case 4: 
            #line 284 
    ;
    #line 286 
    (*emg_alias_eth_validate_addr)(emg_17_container);
    #line 288 
    break;
    #line 290 
    case 5: 
            #line 290 
    ;
    #line 292 
    emg_17_emg_param_0_31 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 292 
    emg_17_emg_param_0_31 = emg_17_emg_param_0_31;
    #line 296 
    emg_wrapper_macb_start_xmit(emg_17_emg_param_0_31,emg_17_container);
    #line 300 
    ldv_free((void *)emg_17_emg_param_0_31);
    #line 302 
    break;
    #line 304 
    case 6: 
            #line 304 
    ;
    #line 306 
    emg_wrapper_macb_set_rx_mode(emg_17_container);
    #line 308 
    break;
    #line 310 
    case 7: 
            #line 310 
    ;
    #line 312 
    emg_17_emg_param_1_30 = ldv_xmalloc_unknown_size(0UL);
    #line 312 
    emg_17_emg_param_1_30 = emg_17_emg_param_1_30;
    #line 316 
    eth_mac_addr(emg_17_container,emg_17_emg_param_1_30);
    #line 320 
    ldv_free(emg_17_emg_param_1_30);
    #line 322 
    break;
    #line 324 
    case 8: 
            #line 324 
    ;
    #line 326 
    emg_wrapper_macb_set_features(emg_17_container,emg_17_emg_param_1_29);
    #line 328 
    break;
    #line 330 
    case 9: 
            #line 330 
    ;
    #line 332 
    emg_wrapper_macb_poll_controller(emg_17_container);
    #line 334 
    break;
    #line 336 
    case 10: 
             #line 336 
    ;
    #line 338 
    emg_wrapper_macb_get_stats(emg_17_container);
    #line 340 
    break;
    #line 342 
    case 11: 
             #line 342 
    ;
    #line 344 
    emg_17_emg_param_0_27 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 344 
    emg_17_emg_param_0_27 = emg_17_emg_param_0_27;
    #line 348 
    emg_wrapper_macb_features_check(emg_17_emg_param_0_27,emg_17_container,emg_17_emg_param_2_28);
    #line 352 
    ldv_free((void *)emg_17_emg_param_0_27);
    #line 354 
    break;
    #line 356 
    case 12: 
             #line 356 
    ;
    #line 358 
    emg_17_emg_param_1_25 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 358 
    emg_17_emg_param_1_25 = emg_17_emg_param_1_25;
    #line 362 
    emg_wrapper_macb_ioctl(emg_17_container,emg_17_emg_param_1_25,emg_17_emg_param_2_26);
    #line 366 
    ldv_free((void *)emg_17_emg_param_1_25);
    #line 368 
    break;
    #line 370 
    case 13: 
             #line 370 
    ;
    #line 372 
    emg_wrapper_macb_change_mtu(emg_17_container,emg_17_emg_param_1_24);
    #line 374 
    break;
    #line 376 
    case 14: 
             #line 376 
    ;
    #line 378 
    emg_17_emg_param_1_23 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 378 
    emg_17_emg_param_1_23 = emg_17_emg_param_1_23;
    #line 382 
    emg_wrapper_macb_get_wol(emg_17_container,emg_17_emg_param_1_23);
    #line 386 
    ldv_free((void *)emg_17_emg_param_1_23);
    #line 388 
    break;
    #line 390 
    case 15: 
             #line 390 
    ;
    #line 392 
    emg_17_emg_param_1_22 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 392 
    emg_17_emg_param_1_22 = emg_17_emg_param_1_22;
    #line 396 
    emg_wrapper_ethtool_op_get_ts_info(emg_17_container,emg_17_emg_param_1_22);
    #line 400 
    ldv_free((void *)emg_17_emg_param_1_22);
    #line 402 
    break;
    #line 404 
    case 16: 
             #line 404 
    ;
    #line 406 
    emg_17_emg_param_2_21 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 406 
    emg_17_emg_param_2_21 = emg_17_emg_param_2_21;
    #line 410 
    emg_wrapper_gem_get_ethtool_strings(emg_17_container,emg_17_emg_param_1_20,emg_17_emg_param_2_21);
    #line 414 
    ldv_free((void *)emg_17_emg_param_2_21);
    #line 416 
    break;
    #line 418 
    case 17: 
             #line 418 
    ;
    #line 420 
    emg_wrapper_gem_get_sset_count(emg_17_container,emg_17_emg_param_1_19);
    #line 422 
    break;
    #line 424 
    case 18: 
             #line 424 
    ;
    #line 426 
    emg_17_emg_param_1_17 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 426 
    emg_17_emg_param_1_17 = emg_17_emg_param_1_17;
    #line 427 
    emg_17_emg_param_2_18 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 427 
    emg_17_emg_param_2_18 = emg_17_emg_param_2_18;
    #line 431 
    emg_wrapper_gem_get_rxnfc(emg_17_container,emg_17_emg_param_1_17,emg_17_emg_param_2_18);
    #line 435 
    ldv_free((void *)emg_17_emg_param_1_17);
    #line 436 
    ldv_free((void *)emg_17_emg_param_2_18);
    #line 438 
    break;
    #line 440 
    case 19: 
             #line 440 
    ;
    #line 442 
    emg_17_emg_param_1_16 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 442 
    emg_17_emg_param_1_16 = emg_17_emg_param_1_16;
    #line 446 
    emg_wrapper_macb_get_ringparam(emg_17_container,emg_17_emg_param_1_16);
    #line 450 
    ldv_free((void *)emg_17_emg_param_1_16);
    #line 452 
    break;
    #line 454 
    case 20: 
             #line 454 
    ;
    #line 456 
    emg_wrapper_macb_get_regs_len(emg_17_container);
    #line 458 
    break;
    #line 460 
    case 21: 
             #line 460 
    ;
    #line 462 
    emg_17_emg_param_1_14 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 462 
    emg_17_emg_param_1_14 = emg_17_emg_param_1_14;
    #line 463 
    emg_17_emg_param_2_15 = ldv_xmalloc_unknown_size(0UL);
    #line 463 
    emg_17_emg_param_2_15 = emg_17_emg_param_2_15;
    #line 467 
    emg_wrapper_macb_get_regs(emg_17_container,emg_17_emg_param_1_14,emg_17_emg_param_2_15);
    #line 471 
    ldv_free((void *)emg_17_emg_param_1_14);
    #line 472 
    ldv_free(emg_17_emg_param_2_15);
    #line 474 
    break;
    #line 476 
    case 22: 
             #line 476 
    ;
    #line 478 
    emg_17_emg_param_1_13 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 478 
    emg_17_emg_param_1_13 = emg_17_emg_param_1_13;
    #line 482 
    emg_wrapper_macb_get_link_ksettings(emg_17_container,emg_17_emg_param_1_13);
    #line 486 
    ldv_free((void *)emg_17_emg_param_1_13);
    #line 488 
    break;
    #line 490 
    case 23: 
             #line 490 
    ;
    #line 492 
    ethtool_op_get_link(emg_17_container);
    #line 494 
    break;
    #line 496 
    case 24: 
             #line 496 
    ;
    #line 498 
    emg_17_emg_param_1_11 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 498 
    emg_17_emg_param_1_11 = emg_17_emg_param_1_11;
    #line 499 
    emg_17_emg_param_2_12 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 499 
    emg_17_emg_param_2_12 = emg_17_emg_param_2_12;
    #line 503 
    emg_wrapper_gem_get_ethtool_stats(emg_17_container,emg_17_emg_param_1_11,emg_17_emg_param_2_12);
    #line 507 
    ldv_free((void *)emg_17_emg_param_1_11);
    #line 508 
    ldv_free((void *)emg_17_emg_param_2_12);
    #line 510 
    break;
    #line 512 
    case 25: 
             #line 512 
    ;
    #line 514 
    emg_17_emg_param_1_10 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 514 
    emg_17_emg_param_1_10 = emg_17_emg_param_1_10;
    #line 518 
    emg_wrapper_macb_set_ringparam(emg_17_container,emg_17_emg_param_1_10);
    #line 522 
    ldv_free((void *)emg_17_emg_param_1_10);
    #line 524 
    break;
    #line 526 
    case 26: 
             #line 526 
    ;
    #line 528 
    emg_17_emg_param_1_9 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 528 
    emg_17_emg_param_1_9 = emg_17_emg_param_1_9;
    #line 532 
    emg_wrapper_macb_get_ts_info(emg_17_container,emg_17_emg_param_1_9);
    #line 536 
    ldv_free((void *)emg_17_emg_param_1_9);
    #line 538 
    break;
    #line 540 
    case 27: 
             #line 540 
    ;
    #line 542 
    emg_17_emg_param_1_8 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 542 
    emg_17_emg_param_1_8 = emg_17_emg_param_1_8;
    #line 546 
    emg_wrapper_macb_get_link_ksettings(emg_17_container,emg_17_emg_param_1_8);
    #line 550 
    ldv_free((void *)emg_17_emg_param_1_8);
    #line 552 
    break;
    #line 554 
    case 28: 
             #line 554 
    ;
    #line 556 
    emg_17_emg_param_1_7 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 556 
    emg_17_emg_param_1_7 = emg_17_emg_param_1_7;
    #line 560 
    emg_wrapper_macb_set_link_ksettings(emg_17_container,emg_17_emg_param_1_7);
    #line 564 
    ldv_free((void *)emg_17_emg_param_1_7);
    #line 566 
    break;
    #line 568 
    case 29: 
             #line 568 
    ;
    #line 570 
    emg_17_emg_param_0_6 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 570 
    emg_17_emg_param_0_6 = emg_17_emg_param_0_6;
    #line 574 
    emg_wrapper_at91ether_start_xmit(emg_17_emg_param_0_6,emg_17_container);
    #line 578 
    ldv_free((void *)emg_17_emg_param_0_6);
    #line 580 
    break;
    #line 582 
    case 30: 
             #line 582 
    ;
    #line 584 
    emg_wrapper_macb_set_rx_mode(emg_17_container);
    #line 586 
    break;
    #line 588 
    case 31: 
             #line 588 
    ;
    #line 590 
    emg_17_emg_param_1_5 = ldv_xmalloc_unknown_size(0UL);
    #line 590 
    emg_17_emg_param_1_5 = emg_17_emg_param_1_5;
    #line 594 
    eth_mac_addr(emg_17_container,emg_17_emg_param_1_5);
    #line 598 
    ldv_free(emg_17_emg_param_1_5);
    #line 600 
    break;
    #line 602 
    case 32: 
             #line 602 
    ;
    #line 604 
    emg_17_emg_param_1_3 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 604 
    emg_17_emg_param_1_3 = emg_17_emg_param_1_3;
    #line 608 
    emg_wrapper_macb_ioctl(emg_17_container,emg_17_emg_param_1_3,emg_17_emg_param_2_4);
    #line 612 
    ldv_free((void *)emg_17_emg_param_1_3);
    #line 614 
    break;
    #line 616 
    case 33: 
             #line 616 
    ;
    #line 618 
    emg_wrapper_macb_get_stats(emg_17_container);
    #line 620 
    break;
    #line 622 
    case 34: 
             #line 622 
    ;
    #line 624 
    emg_wrapper_at91ether_poll_controller(emg_17_container);
    #line 626 
    break;
    #line 628 
    case 35: 
             #line 628 
    ;
    #line 630 
    emg_wrapper_macb_get_regs_len(emg_17_container);
    #line 632 
    break;
    #line 634 
    case 36: 
             #line 634 
    ;
    #line 636 
    emg_17_emg_param_1_1 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 636 
    emg_17_emg_param_1_1 = emg_17_emg_param_1_1;
    #line 637 
    emg_17_emg_param_2_2 = ldv_xmalloc_unknown_size(0UL);
    #line 637 
    emg_17_emg_param_2_2 = emg_17_emg_param_2_2;
    #line 641 
    emg_wrapper_macb_get_regs(emg_17_container,emg_17_emg_param_1_1,emg_17_emg_param_2_2);
    #line 645 
    ldv_free((void *)emg_17_emg_param_1_1);
    #line 646 
    ldv_free(emg_17_emg_param_2_2);
    #line 648 
    break;
    #line 650 
    case 37: 
             #line 650 
    ;
    #line 652 
    ethtool_op_get_link(emg_17_container);
    #line 654 
    break;
    #line 656 
    case 38: 
             #line 656 
    ;
    #line 658 
    emg_17_emg_param_1_0 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 658 
    emg_17_emg_param_1_0 = emg_17_emg_param_1_0;
    #line 662 
    emg_wrapper_macb_get_ringparam(emg_17_container,emg_17_emg_param_1_0);
    #line 666 
    ldv_free((void *)emg_17_emg_param_1_0);
    #line 669 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 670 
      emg_repeat_cnt_call_17 --;
      #line 672 
      goto emg_call_17;
    }
    else 
         #line 674 
         __VERIFIER_assume(0);
    #line 678 
    break;
    #line 680 
    case 39: 
             #line 680 
    ;
    #line 684 
    break;
    #line 686 
    default: 
             #line 686 
    ;
    #line 686 
    __VERIFIER_assume(0);
  }
  #line 689 
  return (void *)0;
}

#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_platform_platform_instance_macb_driver(void *arg0)
{
  #line 697 
  struct platform_driver *emg_18_container;
  #line 698 
  struct pm_message *emg_18_emg_param_1_0;
  #line 699 
  int emg_18_probed;
  #line 700 
  struct platform_device *emg_18_resource;
  #line 701 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 702 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 703 
  int emg_repeat_cnt_call_18 = 1;
  #line 705 
  struct emg_struct_platform_instance_macb_driver_18 *data = (struct emg_struct_platform_instance_macb_driver_18 *)arg0;
  #line 709 
  emg_18_probed = 1;
  #line 710 
  emg_18_container = emg_alias_macb_driver;
  #line 711 
  emg_18_probed = 1;
  #line 713 
  __VERIFIER_assume(data->arg0 == emg_alias_macb_driver);
  #line 715 
  if (data != (struct emg_struct_platform_instance_macb_driver_18 *)0) {
    #line 716 
    emg_18_container = data->arg0;
    #line 717 
    ldv_free((void *)data);
  }
  #line 722 
  emg_18_resource = (struct platform_device *)ldv_xmalloc(1632UL);
  #line 723 
  emg_18_resource->id_entry = emg_18_container->id_table;
  #line 724 
  emg_18_resource->dev.platform_data = ldv_xmalloc_unknown_size(0UL);
  #line 728 
  goto emg_main_18;
  #line 732 
  return (void *)0;
  #line 735 
  emg_call_18: 
               #line 735 
  ;
  #line 736 
  if (ldv_undef_int() != 0) {
    #line 737 
    switch (ldv_undef_int()) {
      #line 738 
      case 0: 
              #line 738 
      ;
      #line 740 
      emg_18_emg_param_1_0 = (struct pm_message *)ldv_xmalloc_unknown_size(0UL);
      #line 740 
      emg_18_emg_param_1_0 = emg_18_emg_param_1_0;
      #line 744 
      if (emg_18_container->suspend != (int (*)(struct platform_device *, pm_message_t ))0) 
        #line 745 
        (*(emg_18_container->suspend))(emg_18_resource,*emg_18_emg_param_1_0);
      #line 750 
      ldv_free((void *)emg_18_emg_param_1_0);
      #line 754 
      if (emg_18_container->resume != (int (*)(struct platform_device *))0) 
        #line 755 
        (*(emg_18_container->resume))(emg_18_resource);
      #line 758 
      break;
      #line 760 
      case 1: 
              #line 760 
      ;
      #line 762 
      emg_dispatch_pm_register_18();
      #line 766 
      emg_dispatch_pm_deregister_18();
      #line 768 
      break;
      #line 770 
      case 2: 
              #line 770 
      ;
      #line 773 
      break;
      #line 775 
      default: 
               #line 775 
      ;
      #line 775 
      __VERIFIER_assume(0);
    }
    #line 778 
    if (emg_repeat_cnt_call_18 > 0) {
      #line 779 
      emg_repeat_cnt_call_18 --;
      #line 781 
      goto emg_call_18;
    }
    else 
         #line 783 
         __VERIFIER_assume(0);
  }
  else {
    #line 789 
    if (emg_18_container->shutdown != (void (*)(struct platform_device *))0) 
      #line 790 
      (*(emg_18_container->shutdown))(emg_18_resource);
    #line 795 
    emg_wrapper_macb_remove(emg_18_resource);
    #line 799 
    emg_18_probed = 1;
    #line 802 
    if (emg_repeat_cnt_main_18_0 > 0) {
      #line 803 
      emg_repeat_cnt_main_18_0 --;
      #line 805 
      goto emg_main_18;
    }
    else 
         #line 807 
         __VERIFIER_assume(0);
  }
  #line 813 
  return (void *)0;
  #line 816 
  emg_main_18: 
               #line 816 
  ;
  #line 817 
  if (ldv_undef_int() != 0) {
    #line 820 
    ldv_pre_probe();
    #line 824 
    emg_18_probed = emg_wrapper_macb_probe(emg_18_resource);
    #line 829 
    emg_18_probed = ldv_post_probe(emg_18_probed);
    #line 832 
    if (ldv_undef_int() != 0) {
      #line 834 
      __VERIFIER_assume(emg_18_probed == 0);
      #line 838 
      goto emg_call_18;
    }
    else {
      #line 843 
      __VERIFIER_assume(emg_18_probed != 0);
      #line 846 
      if (emg_repeat_cnt_main_18_1 > 0) {
        #line 847 
        emg_repeat_cnt_main_18_1 --;
        #line 849 
        goto emg_main_18;
      }
      else 
           #line 851 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 858 
       ldv_free((void *)emg_18_resource);
  #line 866 
  return (void *)0;
}

#line 871  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_macb_pm_ops(void *arg0)
{
  #line 874 
  struct device *emg_19_device;
  #line 875 
  struct dev_pm_ops *emg_19_pm_ops;
  #line 876 
  int emg_19_ret;
  #line 877 
  int emg_repeat_cnt_thlate_19 = 1;
  #line 878 
  int emg_repeat_cnt_slate_19 = 1;
  #line 879 
  int emg_repeat_cnt_fnoirq_19 = 1;
  #line 880 
  int emg_repeat_cnt_fr_19 = 1;
  #line 881 
  int emg_repeat_cnt_flate_19 = 1;
  #line 882 
  int emg_repeat_cnt_resnoirq_19 = 1;
  #line 883 
  int emg_repeat_cnt_pno_irq_19 = 1;
  #line 884 
  int emg_repeat_cnt_run_resume_19 = 1;
  #line 885 
  int emg_repeat_cnt_sus_19 = 1;
  #line 886 
  int emg_repeat_cnt_th_19 = 1;
  #line 887 
  int emg_repeat_cnt_tnoirq_19 = 1;
  #line 888 
  int emg_repeat_cnt_reste_19 = 1;
  #line 889 
  int emg_repeat_cnt_rest_19 = 1;
  #line 890 
  int emg_repeat_cnt_plate_19 = 1;
  #line 891 
  int emg_repeat_cnt_no_irq_19 = 1;
  #line 892 
  int emg_repeat_cnt_restnoirq_19 = 1;
  #line 893 
  int emg_repeat_cnt_poff_19 = 1;
  #line 894 
  int emg_repeat_cnt_res_19 = 1;
  #line 895 
  int emg_repeat_cnt_reslate_19 = 1;
  #line 898 
  emg_19_ret = ldv_undef_int();
  #line 899 
  emg_19_pm_ops = emg_alias_macb_pm_ops;
  #line 900 
  emg_19_ret = ldv_undef_int();
  #line 902 
  ldv_free(arg0);
  #line 906 
  goto emg_do_19;
  #line 910 
  return (void *)0;
  #line 913 
  emg_compl_19: 
                #line 913 
  ;
  #line 915 
  if (emg_19_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 916 
                                                               (*(emg_19_pm_ops->complete))(emg_19_device);
  #line 924 
  return (void *)0;
  #line 927 
  emg_do_19: 
             #line 927 
  ;
  #line 928 
  switch (ldv_undef_int()) {
    #line 929 
    case 0: 
            #line 929 
    ;
    #line 931 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 935 
    goto emg_runt_19;
    #line 940 
    case 1: 
            #line 940 
    ;
    #line 942 
    goto emg_normal_19;
    #line 947 
    case 2: 
            #line 947 
    ;
    #line 951 
    break;
    #line 953 
    default: 
             #line 953 
    ;
    #line 953 
    __VERIFIER_assume(0);
  }
  #line 956 
  return (void *)0;
  #line 959 
  emg_flate_19: 
                #line 959 
  ;
  #line 961 
  if (emg_19_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 962 
                                                                 emg_19_ret = (*(emg_19_pm_ops->freeze_late))(emg_19_device); else 
                                                                    #line 964 
                                                                    emg_19_ret = ldv_undef_int();
  #line 970 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 973 
  if (ldv_undef_int() != 0) {
    #line 975 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 979 
    goto emg_thlate_19;
  }
  else 
       #line 984 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 988 
  if (emg_repeat_cnt_flate_19 > 0) {
    #line 989 
    emg_repeat_cnt_flate_19 --;
    #line 991 
    goto emg_flate_19;
  }
  else 
       #line 993 
       __VERIFIER_assume(0);
  #line 998 
  return (void *)0;
  #line 1001 
  emg_fnoirq_19: 
                 #line 1001 
  ;
  #line 1003 
  if (emg_19_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 1004 
                                                                  emg_19_ret = (*(emg_19_pm_ops->freeze_noirq))(emg_19_device); else 
                                                                    #line 1006 
                                                                    emg_19_ret = ldv_undef_int();
  #line 1012 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1015 
  if (ldv_undef_int() != 0) {
    #line 1017 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1021 
    goto emg_tnoirq_19;
  }
  else 
       #line 1026 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 1030 
  if (emg_repeat_cnt_fnoirq_19 > 0) {
    #line 1031 
    emg_repeat_cnt_fnoirq_19 --;
    #line 1033 
    goto emg_fnoirq_19;
  }
  else 
       #line 1035 
       __VERIFIER_assume(0);
  #line 1040 
  return (void *)0;
  #line 1043 
  emg_fr_19: 
             #line 1043 
  ;
  #line 1045 
  emg_19_ret = emg_wrapper_macb_suspend(emg_19_device);
  #line 1050 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1053 
  if (ldv_undef_int() != 0) {
    #line 1055 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1058 
    if (ldv_undef_int() != 0) 
                              #line 1060 
                              goto emg_fnoirq_19; else 
                                                       #line 1065 
                                                       goto emg_flate_19;
  }
  else {
    #line 1071 
    __VERIFIER_assume(emg_19_ret != 0);
    #line 1074 
    if (emg_repeat_cnt_fr_19 > 0) {
      #line 1075 
      emg_repeat_cnt_fr_19 --;
      #line 1077 
      goto emg_fr_19;
    }
    else 
         #line 1079 
         __VERIFIER_assume(0);
  }
  #line 1085 
  return (void *)0;
  #line 1088 
  emg_no_irq_19: 
                 #line 1088 
  ;
  #line 1090 
  if (emg_19_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 1091 
                                                                   emg_19_ret = (*(emg_19_pm_ops->suspend_noirq))(emg_19_device); else 
                                                                    #line 1093 
                                                                    emg_19_ret = ldv_undef_int();
  #line 1099 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1102 
  if (ldv_undef_int() != 0) {
    #line 1104 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1108 
    goto emg_resnoirq_19;
  }
  else 
       #line 1113 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 1117 
  if (emg_repeat_cnt_no_irq_19 > 0) {
    #line 1118 
    emg_repeat_cnt_no_irq_19 --;
    #line 1120 
    goto emg_no_irq_19;
  }
  else 
       #line 1122 
       __VERIFIER_assume(0);
  #line 1127 
  return (void *)0;
  #line 1130 
  emg_normal_19: 
                 #line 1130 
  ;
  #line 1132 
  if (emg_19_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 1133 
                                                             emg_19_ret = (*(emg_19_pm_ops->prepare))(emg_19_device); else 
                                                                    #line 1135 
                                                                    emg_19_ret = ldv_undef_int();
  #line 1141 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1144 
  if (ldv_undef_int() != 0) {
    #line 1146 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1149 
    switch (ldv_undef_int()) {
      #line 1150 
      case 0: 
              #line 1150 
      ;
      #line 1152 
      goto emg_sus_19;
      #line 1157 
      case 1: 
              #line 1157 
      ;
      #line 1159 
      goto emg_fr_19;
      #line 1164 
      case 2: 
              #line 1164 
      ;
      #line 1166 
      goto emg_poff_19;
      #line 1171 
      default: 
               #line 1171 
      ;
      #line 1171 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 1175 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 1183 
  return (void *)0;
  #line 1186 
  emg_plate_19: 
                #line 1186 
  ;
  #line 1188 
  if (emg_19_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 1189 
                                                                   emg_19_ret = (*(emg_19_pm_ops->poweroff_late))(emg_19_device); else 
                                                                    #line 1191 
                                                                    emg_19_ret = ldv_undef_int();
  #line 1197 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1200 
  if (ldv_undef_int() != 0) {
    #line 1202 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1206 
    goto emg_reste_19;
  }
  else 
       #line 1211 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 1215 
  if (emg_repeat_cnt_plate_19 > 0) {
    #line 1216 
    emg_repeat_cnt_plate_19 --;
    #line 1218 
    goto emg_plate_19;
  }
  else 
       #line 1220 
       __VERIFIER_assume(0);
  #line 1225 
  return (void *)0;
  #line 1228 
  emg_pno_irq_19: 
                  #line 1228 
  ;
  #line 1230 
  if (emg_19_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 1231 
                                                                    emg_19_ret = (*(emg_19_pm_ops->poweroff_noirq))(emg_19_device); else 
                                                                    #line 1233 
                                                                    emg_19_ret = ldv_undef_int();
  #line 1239 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1242 
  if (ldv_undef_int() != 0) {
    #line 1244 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1248 
    goto emg_restnoirq_19;
  }
  else 
       #line 1253 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 1257 
  if (emg_repeat_cnt_pno_irq_19 > 0) {
    #line 1258 
    emg_repeat_cnt_pno_irq_19 --;
    #line 1260 
    goto emg_pno_irq_19;
  }
  else 
       #line 1262 
       __VERIFIER_assume(0);
  #line 1267 
  return (void *)0;
  #line 1270 
  emg_poff_19: 
               #line 1270 
  ;
  #line 1272 
  emg_19_ret = emg_wrapper_macb_suspend(emg_19_device);
  #line 1277 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1280 
  if (ldv_undef_int() != 0) {
    #line 1282 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1285 
    if (ldv_undef_int() != 0) 
                              #line 1287 
                              goto emg_pno_irq_19; else 
                                                        #line 1292 
                                                        goto emg_plate_19;
  }
  else {
    #line 1298 
    __VERIFIER_assume(emg_19_ret != 0);
    #line 1301 
    if (emg_repeat_cnt_poff_19 > 0) {
      #line 1302 
      emg_repeat_cnt_poff_19 --;
      #line 1304 
      goto emg_poff_19;
    }
    else 
         #line 1306 
         __VERIFIER_assume(0);
  }
  #line 1312 
  return (void *)0;
  #line 1315 
  emg_res_19: 
              #line 1315 
  ;
  #line 1317 
  emg_19_ret = emg_wrapper_macb_resume(emg_19_device);
  #line 1322 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1325 
  if (ldv_undef_int() != 0) {
    #line 1327 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1331 
    goto emg_compl_19;
  }
  else {
    #line 1336 
    __VERIFIER_assume(emg_19_ret != 0);
    #line 1339 
    if (emg_repeat_cnt_res_19 > 0) {
      #line 1340 
      emg_repeat_cnt_res_19 --;
      #line 1342 
      goto emg_res_19;
    }
    else 
         #line 1344 
         __VERIFIER_assume(0);
  }
  #line 1350 
  return (void *)0;
  #line 1353 
  emg_reslate_19: 
                  #line 1353 
  ;
  #line 1355 
  if (emg_19_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 1356 
                                                                  emg_19_ret = (*(emg_19_pm_ops->resume_early))(emg_19_device); else 
                                                                    #line 1358 
                                                                    emg_19_ret = ldv_undef_int();
  #line 1364 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1367 
  if (ldv_undef_int() != 0) {
    #line 1369 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1373 
    goto emg_res_19;
  }
  else 
       #line 1378 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 1382 
  if (emg_repeat_cnt_reslate_19 > 0) {
    #line 1383 
    emg_repeat_cnt_reslate_19 --;
    #line 1385 
    goto emg_reslate_19;
  }
  else 
       #line 1387 
       __VERIFIER_assume(0);
  #line 1392 
  return (void *)0;
  #line 1395 
  emg_resnoirq_19: 
                   #line 1395 
  ;
  #line 1397 
  if (emg_19_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 1398 
                                                                  emg_19_ret = (*(emg_19_pm_ops->resume_noirq))(emg_19_device); else 
                                                                    #line 1400 
                                                                    emg_19_ret = ldv_undef_int();
  #line 1406 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1409 
  if (ldv_undef_int() != 0) {
    #line 1411 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1415 
    goto emg_res_19;
  }
  else 
       #line 1420 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 1424 
  if (emg_repeat_cnt_resnoirq_19 > 0) {
    #line 1425 
    emg_repeat_cnt_resnoirq_19 --;
    #line 1427 
    goto emg_resnoirq_19;
  }
  else 
       #line 1429 
       __VERIFIER_assume(0);
  #line 1434 
  return (void *)0;
  #line 1437 
  emg_rest_19: 
               #line 1437 
  ;
  #line 1439 
  emg_19_ret = emg_wrapper_macb_resume(emg_19_device);
  #line 1444 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1447 
  if (ldv_undef_int() != 0) {
    #line 1449 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1453 
    goto emg_compl_19;
  }
  else {
    #line 1458 
    __VERIFIER_assume(emg_19_ret != 0);
    #line 1461 
    if (emg_repeat_cnt_rest_19 > 0) {
      #line 1462 
      emg_repeat_cnt_rest_19 --;
      #line 1464 
      goto emg_rest_19;
    }
    else 
         #line 1466 
         __VERIFIER_assume(0);
  }
  #line 1472 
  return (void *)0;
  #line 1475 
  emg_reste_19: 
                #line 1475 
  ;
  #line 1477 
  if (emg_19_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 1478 
                                                                   emg_19_ret = (*(emg_19_pm_ops->restore_early))(emg_19_device); else 
                                                                    #line 1480 
                                                                    emg_19_ret = ldv_undef_int();
  #line 1486 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1489 
  if (ldv_undef_int() != 0) {
    #line 1491 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1495 
    goto emg_rest_19;
  }
  else 
       #line 1500 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 1504 
  if (emg_repeat_cnt_reste_19 > 0) {
    #line 1505 
    emg_repeat_cnt_reste_19 --;
    #line 1507 
    goto emg_reste_19;
  }
  else 
       #line 1509 
       __VERIFIER_assume(0);
  #line 1514 
  return (void *)0;
  #line 1517 
  emg_restnoirq_19: 
                    #line 1517 
  ;
  #line 1519 
  if (emg_19_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 1520 
                                                                   emg_19_ret = (*(emg_19_pm_ops->restore_noirq))(emg_19_device); else 
                                                                    #line 1522 
                                                                    emg_19_ret = ldv_undef_int();
  #line 1528 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1531 
  if (ldv_undef_int() != 0) {
    #line 1533 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1537 
    goto emg_rest_19;
  }
  else 
       #line 1542 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 1546 
  if (emg_repeat_cnt_restnoirq_19 > 0) {
    #line 1547 
    emg_repeat_cnt_restnoirq_19 --;
    #line 1549 
    goto emg_restnoirq_19;
  }
  else 
       #line 1551 
       __VERIFIER_assume(0);
  #line 1556 
  return (void *)0;
  #line 1559 
  emg_run_resume_19: 
                     #line 1559 
  ;
  #line 1561 
  emg_19_ret = emg_wrapper_macb_runtime_resume(emg_19_device);
  #line 1566 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1567 
  if (emg_19_ret != 0) 
                       #line 1568 
                       emg_runtime_lowpower = 0;
  #line 1571 
  if (ldv_undef_int() != 0) 
                            #line 1573 
                            __VERIFIER_assume(emg_19_ret == 0);
  else {
    #line 1577 
    __VERIFIER_assume(emg_19_ret != 0);
    #line 1580 
    if (emg_repeat_cnt_run_resume_19 > 0) {
      #line 1581 
      emg_repeat_cnt_run_resume_19 --;
      #line 1583 
      goto emg_run_resume_19;
    }
    else 
         #line 1585 
         __VERIFIER_assume(0);
  }
  #line 1595 
  return (void *)0;
  #line 1598 
  emg_runt_19: 
               #line 1598 
  ;
  #line 1599 
  if (ldv_undef_int() != 0) {
    #line 1601 
    if (emg_19_pm_ops->runtime_idle != (int (*)(struct device *))0) 
                                                                    #line 1602 
                                                                    emg_19_ret = (*(emg_19_pm_ops->runtime_idle))(emg_19_device); else 
                                                                    #line 1604 
                                                                    emg_19_ret = ldv_undef_int();
    #line 1610 
    emg_19_ret = ldv_post_probe(emg_19_ret);
  }
  else {
    #line 1614 
    emg_19_ret = emg_wrapper_macb_runtime_suspend(emg_19_device);
    #line 1619 
    emg_19_ret = ldv_post_probe(emg_19_ret);
    #line 1620 
    if (emg_19_ret != 0) 
                         #line 1621 
                         emg_runtime_lowpower = 1;
    #line 1624 
    if (ldv_undef_int() != 0) {
      #line 1626 
      __VERIFIER_assume(emg_19_ret == 0);
      #line 1630 
      goto emg_run_resume_19;
    }
    else 
         #line 1635 
         __VERIFIER_assume(emg_19_ret != 0);
  }
  #line 1644 
  return (void *)0;
  #line 1647 
  emg_slate_19: 
                #line 1647 
  ;
  #line 1649 
  if (emg_19_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 1650 
                                                                  emg_19_ret = (*(emg_19_pm_ops->suspend_late))(emg_19_device); else 
                                                                    #line 1652 
                                                                    emg_19_ret = ldv_undef_int();
  #line 1658 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1661 
  if (ldv_undef_int() != 0) {
    #line 1663 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1667 
    goto emg_reslate_19;
  }
  else 
       #line 1672 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 1676 
  if (emg_repeat_cnt_slate_19 > 0) {
    #line 1677 
    emg_repeat_cnt_slate_19 --;
    #line 1679 
    goto emg_slate_19;
  }
  else 
       #line 1681 
       __VERIFIER_assume(0);
  #line 1686 
  return (void *)0;
  #line 1689 
  emg_sus_19: 
              #line 1689 
  ;
  #line 1691 
  emg_19_ret = emg_wrapper_macb_suspend(emg_19_device);
  #line 1696 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1699 
  if (ldv_undef_int() != 0) {
    #line 1701 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1704 
    if (ldv_undef_int() != 0) 
                              #line 1706 
                              goto emg_no_irq_19; else 
                                                       #line 1711 
                                                       goto emg_slate_19;
  }
  else {
    #line 1717 
    __VERIFIER_assume(emg_19_ret != 0);
    #line 1720 
    if (emg_repeat_cnt_sus_19 > 0) {
      #line 1721 
      emg_repeat_cnt_sus_19 --;
      #line 1723 
      goto emg_sus_19;
    }
    else 
         #line 1725 
         __VERIFIER_assume(0);
  }
  #line 1731 
  return (void *)0;
  #line 1734 
  emg_th_19: 
             #line 1734 
  ;
  #line 1736 
  emg_19_ret = emg_wrapper_macb_resume(emg_19_device);
  #line 1741 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1744 
  if (ldv_undef_int() != 0) {
    #line 1746 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1750 
    goto emg_compl_19;
  }
  else {
    #line 1755 
    __VERIFIER_assume(emg_19_ret != 0);
    #line 1758 
    if (emg_repeat_cnt_th_19 > 0) {
      #line 1759 
      emg_repeat_cnt_th_19 --;
      #line 1761 
      goto emg_th_19;
    }
    else 
         #line 1763 
         __VERIFIER_assume(0);
  }
  #line 1769 
  return (void *)0;
  #line 1772 
  emg_thlate_19: 
                 #line 1772 
  ;
  #line 1774 
  if (emg_19_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 1775 
                                                                emg_19_ret = (*(emg_19_pm_ops->thaw_early))(emg_19_device); else 
                                                                    #line 1777 
                                                                    emg_19_ret = ldv_undef_int();
  #line 1783 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1786 
  if (ldv_undef_int() != 0) {
    #line 1788 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1792 
    goto emg_th_19;
  }
  else 
       #line 1797 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 1801 
  if (emg_repeat_cnt_thlate_19 > 0) {
    #line 1802 
    emg_repeat_cnt_thlate_19 --;
    #line 1804 
    goto emg_thlate_19;
  }
  else 
       #line 1806 
       __VERIFIER_assume(0);
  #line 1811 
  return (void *)0;
  #line 1814 
  emg_tnoirq_19: 
                 #line 1814 
  ;
  #line 1816 
  if (emg_19_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 1817 
                                                                emg_19_ret = (*(emg_19_pm_ops->thaw_noirq))(emg_19_device); else 
                                                                    #line 1819 
                                                                    emg_19_ret = ldv_undef_int();
  #line 1825 
  emg_19_ret = ldv_post_probe(emg_19_ret);
  #line 1828 
  if (ldv_undef_int() != 0) {
    #line 1830 
    __VERIFIER_assume(emg_19_ret == 0);
    #line 1834 
    goto emg_th_19;
  }
  else 
       #line 1839 
       __VERIFIER_assume(emg_19_ret != 0);
  #line 1843 
  if (emg_repeat_cnt_tnoirq_19 > 0) {
    #line 1844 
    emg_repeat_cnt_tnoirq_19 --;
    #line 1846 
    goto emg_tnoirq_19;
  }
  else 
       #line 1848 
       __VERIFIER_assume(0);
  #line 1853 
  return (void *)0;
}

#line 1858  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1)
{
  #line 1861 
  struct platform_driver *emg_2_platform_driver;
  #line 1863 
  emg_2_platform_driver = emg_alias_macb_driver;
  #line 1864 
  if (ldv_undef_int() != 0) {
    #line 1866 
    emg_2_platform_driver = arg0;
    #line 1870 
    emg_dispatch_register_2(emg_2_platform_driver);
    #line 1874 
    return 0;
  }
  else {
    #line 1878 
    return ldv_undef_int_negative();
  }
}

#line 1886  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1889 
  struct net_device *emg_3_netdev;
  #line 1891 
  if (ldv_undef_int() != 0) {
    #line 1893 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1897 
    return emg_3_netdev;
  }
  else 
       #line 1901 
       return (struct net_device *)0;
}

#line 1909  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1912 
  struct net_device *emg_4_netdev;
  #line 1915 
  emg_4_netdev = arg0;
  #line 1916 
  ldv_free((void *)emg_4_netdev);
  #line 1919 
  return;
}

#line 1924  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_platform_driver_unregister(struct platform_driver *arg0)
{
  #line 1927 
  struct platform_driver *emg_5_platform_driver;
  #line 1929 
  emg_5_platform_driver = emg_alias_macb_driver;
  #line 1931 
  emg_5_platform_driver = arg0;
  #line 1935 
  emg_dispatch_deregister_5(emg_5_platform_driver);
  #line 1938 
  return;
}

#line 1943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_pm_runtime_disable(struct device *arg0)
{
  #line 1946 
  struct device *emg_6_device;
  #line 1947 
  int emg_6_ret;
  #line 1950 
  emg_6_ret = ldv_undef_int();
  #line 1951 
  emg_6_ret = ldv_undef_int();
  #line 1953 
  emg_6_device = arg0;
  #line 1954 
  emg_runtime_enabled = 0;
  #line 1957 
  if (ldv_undef_int() != 0) {
    #line 1959 
    __VERIFIER_assume(emg_runtime_lowpower == 0);
    #line 1963 
    emg_6_ret = emg_wrapper_macb_runtime_suspend(emg_6_device);
    #line 1968 
    emg_6_ret = ldv_post_probe(emg_6_ret);
    #line 1972 
    if (emg_6_ret == 0) 
                        #line 1973 
                        emg_runtime_lowpower = 1;
  }
  else 
       #line 1978 
       __VERIFIER_assume(emg_runtime_lowpower == 1);
  #line 1982 
  return;
}

#line 1987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_pm_runtime_enable(struct device *arg0)
{
  #line 1990 
  struct device *emg_7_device;
  #line 1991 
  int emg_7_ret;
  #line 1994 
  emg_7_ret = ldv_undef_int();
  #line 1995 
  emg_7_ret = ldv_undef_int();
  #line 1997 
  emg_7_device = arg0;
  #line 2000 
  if (ldv_undef_int() != 0) {
    #line 2002 
    __VERIFIER_assume(emg_runtime_lowpower == 1);
    #line 2006 
    emg_7_ret = emg_wrapper_macb_runtime_resume(emg_7_device);
    #line 2011 
    emg_7_ret = ldv_post_probe(emg_7_ret);
    #line 2015 
    if (emg_7_ret == 0) 
                        #line 2016 
                        emg_runtime_lowpower = 0;
  }
  else 
       #line 2021 
       __VERIFIER_assume(emg_runtime_lowpower == 0);
  #line 2025 
  return;
}

#line 2030  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
int emg_pm_runtime_force_resume(struct device *arg0)
{
  #line 2033 
  struct device *emg_8_device;
  #line 2034 
  int emg_8_ret;
  #line 2037 
  emg_8_ret = ldv_undef_int();
  #line 2038 
  emg_8_ret = ldv_undef_int();
  #line 2040 
  emg_8_device = arg0;
  #line 2044 
  emg_8_ret = emg_wrapper_macb_runtime_resume(emg_8_device);
  #line 2049 
  emg_8_ret = ldv_post_probe(emg_8_ret);
  #line 2050 
  if (emg_8_ret != 0) 
                      #line 2051 
                      emg_runtime_lowpower = 0;
  #line 2055 
  return emg_8_ret;
}

#line 2062  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
int emg_pm_runtime_force_suspend(struct device *arg0)
{
  #line 2065 
  struct device *emg_9_device;
  #line 2066 
  int emg_9_ret;
  #line 2069 
  emg_9_ret = ldv_undef_int();
  #line 2070 
  emg_9_ret = ldv_undef_int();
  #line 2072 
  emg_9_device = arg0;
  #line 2076 
  emg_9_ret = emg_wrapper_macb_runtime_suspend(emg_9_device);
  #line 2081 
  emg_9_ret = ldv_post_probe(emg_9_ret);
  #line 2082 
  if (emg_9_ret != 0) 
                      #line 2083 
                      emg_runtime_lowpower = 1;
  #line 2087 
  return emg_9_ret;
}

#line 2094  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
int emg_pm_runtime_set_active(struct device *arg0)
{
  #line 2099 
  emg_runtime_lowpower = 0;
  #line 2100 
  ;
  #line 2100 
  return 0;
}

#line 2106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_pm_runtime_suspended(struct device *arg0)
{
  #line 2111 
  return (_Bool)(emg_runtime_lowpower != 0);
}

#line 2118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 2121 
  struct net_device *emg_12_netdev;
  #line 2122 
  int emg_12_ret;
  #line 2125 
  emg_12_ret = ldv_undef_int();
  #line 2126 
  emg_12_ret = ldv_undef_int();
  #line 2127 
  if (ldv_undef_int() != 0) {
    #line 2129 
    emg_12_netdev = arg0;
    #line 2133 
    emg_12_ret = emg_wrapper_at91ether_open(emg_12_netdev);
    #line 2136 
    if (ldv_undef_int() != 0) {
      #line 2138 
      __VERIFIER_assume(emg_12_ret == 0);
      #line 2142 
      emg_dispatch_register_12(emg_12_netdev);
      #line 2146 
      return 0;
    }
    else {
      #line 2150 
      __VERIFIER_assume(emg_12_ret != 0);
      #line 2151 
      ldv_failed_register_netdev();
      #line 2152 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 2157 
    ldv_failed_register_netdev();
    #line 2158 
    return ldv_undef_int_negative();
  }
}

#line 2166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 2169 
  struct work_struct *emg_13_work_struct;
  #line 2171 
  if (ldv_undef_int() != 0) {
    #line 2173 
    emg_13_work_struct = arg0;
    #line 2177 
    if (emg_13_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 2178 
      (*(emg_13_work_struct->func))(emg_13_work_struct);
    #line 2183 
    return (_Bool)1;
  }
  else 
       #line 2187 
       return (_Bool)0;
}

#line 2195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2)
{
  #line 2200 
  arg0->func = arg1;
  #line 2201 
  arg0->data = arg2;
  #line 2202 
  arg0->count.counter = 0;
  #line 2205 
  return;
}

#line 2210  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_schedule(struct tasklet_struct *arg0)
{
  #line 2213 
  unsigned long emg_15_emg_param_0_0;
  #line 2214 
  struct tasklet_struct *emg_15_tasklet_struct;
  #line 2217 
  emg_15_tasklet_struct = arg0;
  #line 2221 
  if (emg_15_tasklet_struct->count.counter == 0) 
    #line 2222 
    if (emg_15_tasklet_struct->func != (void (*)(unsigned long ))0) 
                                                                    #line 2223 
                                                                    (*(emg_15_tasklet_struct->func))(emg_15_emg_param_0_0);
  #line 2228 
  return;
}

#line 2233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 2236 
  struct net_device *emg_16_netdev;
  #line 2239 
  emg_16_netdev = arg0;
  #line 2243 
  emg_wrapper_at91ether_close(emg_16_netdev);
  #line 2247 
  emg_dispatch_deregister_16(emg_16_netdev);
  #line 2250 
  return;
}

#line 2255  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 2258 
  int emg_1_ret;
  #line 2261 
  emg_1_ret = emg_macb_driver_init();
  #line 2262 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 2265 
  if (ldv_undef_int() != 0) {
    #line 2267 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 2271 
    emg_macb_driver_exit();
  }
  else 
       #line 2275 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 2279 
  return (void *)0;
}

#line 2284  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cadence/macb.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 2286 
  ldv_initialize();
  #line 2288 
  emg_entry_point_insmod((void *)0);
  #line 2290 
  return 0;
}

