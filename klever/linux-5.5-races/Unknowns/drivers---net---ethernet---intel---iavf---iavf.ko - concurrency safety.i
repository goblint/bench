/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_13 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_15 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_113 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_113 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_114 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_114 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
struct wait_queue_entry;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_entry {
   unsigned int flags ;
   void *private ;
   int (*func)(struct wait_queue_entry *, unsigned int , int , void *) ;
   struct list_head entry ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_128 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_127 {
   struct __anonstruct_128 __anonCompField___anonunion_127_28 ;
   struct __anonstruct_129 __anonCompField___anonunion_127_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_127 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_130 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_130 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   struct list_head slab_list ;
   struct __anonstruct_136 __anonCompField___anonunion_135_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_138 __anonCompField___anonunion_137_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   union __anonunion_135 __anonCompField___anonstruct_134_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_137 __anonCompField___anonstruct_134_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_142 __anonCompField___anonstruct_141_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_131 {
   struct __anonstruct_132 __anonCompField___anonunion_131_31 ;
   struct __anonstruct_133 __anonCompField___anonunion_131_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_131_37 ;
   struct __anonstruct_139 __anonCompField___anonunion_131_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_131_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_131_41 ;
   struct __anonstruct_143 __anonCompField___anonunion_131_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_131 __anonCompField_page_43 ;
   union __anonunion_144 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_145 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_146 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_146 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_237 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_236 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 325 
struct poll_table_struct;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_256 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_256 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_259 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_259 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_267 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_267 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_307 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_307 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_308 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_309 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_310 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_311 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_314 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_315 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_313 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_314 _addr_bnd ;
   struct __anonstruct__addr_pkey_315 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_312 {
   void *_addr ;
   union __anonunion_313 __anonCompField___anonstruct__sigfault_312_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_316 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_317 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_308 _kill ;
   struct __anonstruct__timer_309 _timer ;
   struct __anonstruct__rt_310 _rt ;
   struct __anonstruct__sigchld_311 _sigchld ;
   struct __anonstruct__sigfault_312 _sigfault ;
   struct __anonstruct__sigpoll_316 _sigpoll ;
   struct __anonstruct__sigsys_317 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_322 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_322 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_327 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_327 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_329 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_329 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
typedef enum irqreturn irqreturn_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity_notify {
   unsigned int irq ;
   struct kref kref ;
   struct work_struct work ;
   void (*notify)(struct irq_affinity_notify *, cpumask_t *) ;
   void (*release)(struct kref *) ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_406 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_406 __anonCompField_pci_dev_59 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_420 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_419 {
   struct __anonstruct_420 __anonCompField___anonunion_419_60 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_419 __anonCompField_lockref_61 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_422 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_421 {
   struct __anonstruct_422 __anonCompField___anonunion_421_62 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_421 __anonCompField_qstr_63 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_423 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_424 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_423 __anonCompField_dentry_64 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_424 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_431 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_432 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_431 __anonCompField_io_cq_65 ;
   union __anonunion_432 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_433 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_433 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_434 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_434 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_436 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_435 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_436 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_435 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_439 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_440 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_439 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_440 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_441 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_442 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_443 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_443 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_445 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_444 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_445 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_444 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_463 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_465 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_464 {
   unsigned long nr_segs ;
   struct __anonstruct_465 __anonCompField___anonunion_464_73 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_463 __anonCompField_iov_iter_72 ;
   union __anonunion_464 __anonCompField_iov_iter_74 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_468 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_468 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_469 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_469 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_470 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_470 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_471 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_471 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_472 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_472 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_473 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_473 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_474 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_474 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_475 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_475 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_476 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_477 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_476 ifr_ifrn ;
   union __anonunion_ifr_ifru_477 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_11228 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_11228 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_512 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_512 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_513 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_513 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_control {
   u16 thoff ;
   u16 addr_type ;
   u32 flags ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_basic {
   __be16 n_proto ;
   u8 ip_proto ;
   u8 padding ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_516 {
   u16 vlan_id : 12 ;
   u16 vlan_dei : 1 ;
   u16 vlan_priority : 3 ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_515 {
   struct __anonstruct_516 __anonCompField___anonunion_515_78 ;
   __be16 vlan_tci ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_vlan {
   union __anonunion_515 __anonCompField_flow_dissector_key_vlan_79 ;
   __be16 vlan_tpid ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_keyid {
   __be32 keyid ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv4_addrs {
   __be32 src ;
   __be32 dst ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv6_addrs {
   struct in6_addr src ;
   struct in6_addr dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_519 {
   __be16 src ;
   __be16 dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_518 {
   __be32 ports ;
   struct __anonstruct_519 __anonCompField___anonunion_518_81 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ports {
   union __anonunion_518 __anonCompField_flow_dissector_key_ports_82 ;
};
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_eth_addrs {
   unsigned char dst[6U] ;
   unsigned char src[6U] ;
};
#line 231 
enum flow_dissector_key_id {
    FLOW_DISSECTOR_KEY_CONTROL = 0,
    FLOW_DISSECTOR_KEY_BASIC = 1,
    FLOW_DISSECTOR_KEY_IPV4_ADDRS = 2,
    FLOW_DISSECTOR_KEY_IPV6_ADDRS = 3,
    FLOW_DISSECTOR_KEY_PORTS = 4,
    FLOW_DISSECTOR_KEY_PORTS_RANGE = 5,
    FLOW_DISSECTOR_KEY_ICMP = 6,
    FLOW_DISSECTOR_KEY_ETH_ADDRS = 7,
    FLOW_DISSECTOR_KEY_TIPC = 8,
    FLOW_DISSECTOR_KEY_ARP = 9,
    FLOW_DISSECTOR_KEY_VLAN = 10,
    FLOW_DISSECTOR_KEY_FLOW_LABEL = 11,
    FLOW_DISSECTOR_KEY_GRE_KEYID = 12,
    FLOW_DISSECTOR_KEY_MPLS_ENTROPY = 13,
    FLOW_DISSECTOR_KEY_ENC_KEYID = 14,
    FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS = 15,
    FLOW_DISSECTOR_KEY_ENC_IPV6_ADDRS = 16,
    FLOW_DISSECTOR_KEY_ENC_CONTROL = 17,
    FLOW_DISSECTOR_KEY_ENC_PORTS = 18,
    FLOW_DISSECTOR_KEY_MPLS = 19,
    FLOW_DISSECTOR_KEY_TCP = 20,
    FLOW_DISSECTOR_KEY_IP = 21,
    FLOW_DISSECTOR_KEY_CVLAN = 22,
    FLOW_DISSECTOR_KEY_ENC_IP = 23,
    FLOW_DISSECTOR_KEY_ENC_OPTS = 24,
    FLOW_DISSECTOR_KEY_META = 25,
    FLOW_DISSECTOR_KEY_CT = 26,
    FLOW_DISSECTOR_KEY_MAX = 27
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector {
   unsigned int used_keys ;
   unsigned short offset[27U] ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_524 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_525 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_526 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_527 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_524 ports ;
   struct __anonstruct_icmpt_525 icmpt ;
   struct __anonstruct_dnports_526 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_527 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_528 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_528 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_534 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_535 __anonCompField___anonstruct_534_90 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   struct __anonstruct_534 __anonCompField___anonunion_533_91 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_536 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_537 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_539 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   struct __anonstruct_539 __anonCompField___anonunion_538_95 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_541 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   __wsum csum ;
   struct __anonstruct_541 __anonCompField___anonunion_540_97 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_543 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_544 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_533 __anonCompField_sk_buff_92 ;
   union __anonunion_536 __anonCompField_sk_buff_93 ;
   union __anonunion_537 __anonCompField_sk_buff_94 ;
   char cb[48U] ;
   union __anonunion_538 __anonCompField_sk_buff_96 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_540 __anonCompField_sk_buff_98 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_542 __anonCompField_sk_buff_99 ;
   __u32 secmark ;
   union __anonunion_543 __anonCompField_sk_buff_100 ;
   union __anonunion_544 __anonCompField_sk_buff_101 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_570 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_570 __anonCompField_ethtool_rxnfc_103 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_573 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_573 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 409 
struct flow_rule;
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_574 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_574 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_575 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_575 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_576 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_576 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_577 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_577 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_579 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_579 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_592 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct __anonstruct_592 __anonCompField___anonunion_591_104 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_591 __anonCompField_keyring_index_key_105 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_594 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   struct keyring_index_key index_key ;
   struct __anonstruct_596 __anonCompField___anonunion_595_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_598 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_597 {
   union key_payload payload ;
   struct __anonstruct_598 __anonCompField___anonunion_597_110 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_593 __anonCompField_key_106 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_594 __anonCompField_key_107 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_595 __anonCompField_key_109 ;
   union __anonunion_597 __anonCompField_key_111 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_601 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_601 __anonCompField_cred_112 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_602 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_602 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_604 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_603 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_604 __anonCompField___anonunion_603_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_603 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_608 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_608 __anonCompField___anonstruct_607_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_610 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_612 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_614 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_613 {
   union __anonunion_614 __anonCompField___anonstruct_613_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_615 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_616 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_617 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_618 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_619 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_606 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_610 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_611 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_612 test ;
   struct __anonstruct_613 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_615 info ;
   struct __anonstruct_query_616 query ;
   struct __anonstruct_raw_tracepoint_617 raw_tracepoint ;
   struct __anonstruct_618 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_619 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_646 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_646 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_648 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct __anonstruct_tail_call_648 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_647 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_649 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_649 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_651 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_651 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_653 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_652 {
   struct __anonstruct_653 __anonCompField___anonunion_652_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_652 __anonCompField_sock_cgroup_data_154 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 1865 
struct perf_event_attr;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_676 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_676 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_mqprio_qopt {
   __u8 num_tc ;
   __u8 prio_tc_map[16U] ;
   __u8 hw ;
   __u16 count[16U] ;
   __u16 offset[16U] ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_682 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_683 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_684 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   struct __anonstruct_681 __anonCompField___anonunion_680_157 ;
   struct __anonstruct_682 __anonCompField___anonunion_680_158 ;
   struct __anonstruct_683 __anonCompField___anonunion_680_159 ;
   struct __anonstruct_xsk_684 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_680 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15279 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15280 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_685 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_686 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_685 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15279 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15280 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_686 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_703 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_703 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_704 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_704 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_707 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_708 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_710 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_711 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_709 {
   struct __anonstruct_elv_710 elv ;
   struct __anonstruct_flush_711 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_712 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_707 __anonCompField_request_164 ;
   union __anonunion_708 __anonCompField_request_165 ;
   union __anonunion_709 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_712 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_729 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_728 {
   void *validation_data ;
   struct __anonstruct_729 __anonCompField___anonunion_728_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_728 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match {
   struct flow_dissector *dissector ;
   void *mask ;
   void *key ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_basic {
   struct flow_dissector_key_basic *key ;
   struct flow_dissector_key_basic *mask ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_control {
   struct flow_dissector_key_control *key ;
   struct flow_dissector_key_control *mask ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_eth_addrs {
   struct flow_dissector_key_eth_addrs *key ;
   struct flow_dissector_key_eth_addrs *mask ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_vlan {
   struct flow_dissector_key_vlan *key ;
   struct flow_dissector_key_vlan *mask ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_ipv4_addrs {
   struct flow_dissector_key_ipv4_addrs *key ;
   struct flow_dissector_key_ipv4_addrs *mask ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_ipv6_addrs {
   struct flow_dissector_key_ipv6_addrs *key ;
   struct flow_dissector_key_ipv6_addrs *mask ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_ports {
   struct flow_dissector_key_ports *key ;
   struct flow_dissector_key_ports *mask ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_enc_keyid {
   struct flow_dissector_key_keyid *key ;
   struct flow_dissector_key_keyid *mask ;
};
#line 112 
enum flow_action_id {
    FLOW_ACTION_ACCEPT = 0,
    FLOW_ACTION_DROP = 1,
    FLOW_ACTION_TRAP = 2,
    FLOW_ACTION_GOTO = 3,
    FLOW_ACTION_REDIRECT = 4,
    FLOW_ACTION_MIRRED = 5,
    FLOW_ACTION_REDIRECT_INGRESS = 6,
    FLOW_ACTION_MIRRED_INGRESS = 7,
    FLOW_ACTION_VLAN_PUSH = 8,
    FLOW_ACTION_VLAN_POP = 9,
    FLOW_ACTION_VLAN_MANGLE = 10,
    FLOW_ACTION_TUNNEL_ENCAP = 11,
    FLOW_ACTION_TUNNEL_DECAP = 12,
    FLOW_ACTION_MANGLE = 13,
    FLOW_ACTION_ADD = 14,
    FLOW_ACTION_CSUM = 15,
    FLOW_ACTION_MARK = 16,
    FLOW_ACTION_PTYPE = 17,
    FLOW_ACTION_WAKE = 18,
    FLOW_ACTION_QUEUE = 19,
    FLOW_ACTION_SAMPLE = 20,
    FLOW_ACTION_POLICE = 21,
    FLOW_ACTION_CT = 22,
    FLOW_ACTION_MPLS_PUSH = 23,
    FLOW_ACTION_MPLS_POP = 24,
    FLOW_ACTION_MPLS_MANGLE = 25,
    NUM_FLOW_ACTIONS = 26
};
#line 142 
enum flow_action_mangle_base {
    FLOW_ACT_MANGLE_UNSPEC = 0,
    FLOW_ACT_MANGLE_HDR_TYPE_ETH = 1,
    FLOW_ACT_MANGLE_HDR_TYPE_IP4 = 2,
    FLOW_ACT_MANGLE_HDR_TYPE_IP6 = 3,
    FLOW_ACT_MANGLE_HDR_TYPE_TCP = 4,
    FLOW_ACT_MANGLE_HDR_TYPE_UDP = 5
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_vlan_787 {
   u16 vid ;
   __be16 proto ;
   u8 prio ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mangle_788 {
   enum flow_action_mangle_base htype ;
   u32 offset ;
   u32 mask ;
   u32 val ;
};
#line 159 
struct ip_tunnel_info;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_queue_789 {
   u32 ctx ;
   u32 index ;
   u8 vf ;
};
#line 159 
struct psample_group;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_sample_790 {
   struct psample_group *psample_group ;
   u32 rate ;
   u32 trunc_size ;
   bool truncate ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_police_791 {
   s64 burst ;
   u64 rate_bytes_ps ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_ct_792 {
   int action ;
   u16 zone ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_push_793 {
   u32 label ;
   __be16 proto ;
   u8 tc ;
   u8 bos ;
   u8 ttl ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_pop_794 {
   __be16 proto ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_mangle_795 {
   u32 label ;
   u8 tc ;
   u8 bos ;
   u8 ttl ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
union __anonunion_786 {
   u32 chain_index ;
   struct net_device *dev ;
   struct __anonstruct_vlan_787 vlan ;
   struct __anonstruct_mangle_788 mangle ;
   struct ip_tunnel_info *tunnel ;
   u32 csum_flags ;
   u32 mark ;
   u16 ptype ;
   struct __anonstruct_queue_789 queue ;
   struct __anonstruct_sample_790 sample ;
   struct __anonstruct_police_791 police ;
   struct __anonstruct_ct_792 ct ;
   struct __anonstruct_mpls_push_793 mpls_push ;
   struct __anonstruct_mpls_pop_794 mpls_pop ;
   struct __anonstruct_mpls_mangle_795 mpls_mangle ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_action_entry {
   enum flow_action_id id ;
   void (*destructor)(void *) ;
   void *destructor_priv ;
   union __anonunion_786 __anonCompField_flow_action_entry_170 ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_action {
   unsigned int num_entries ;
   struct flow_action_entry entries[0U] ;
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_rule {
   struct flow_match match ;
   struct flow_action action ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_stats {
   u64 pkts ;
   u64 bytes ;
   u64 lastused ;
};
#line 270 
enum flow_block_command {
    FLOW_BLOCK_BIND = 0,
    FLOW_BLOCK_UNBIND = 1
};
#line 275 
enum flow_block_binder_type {
    FLOW_BLOCK_BINDER_TYPE_UNSPEC = 0,
    FLOW_BLOCK_BINDER_TYPE_CLSACT_INGRESS = 1,
    FLOW_BLOCK_BINDER_TYPE_CLSACT_EGRESS = 2
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block_offload {
   enum flow_block_command command ;
   enum flow_block_binder_type binder_type ;
   bool block_shared ;
   bool unlocked_driver_cb ;
   struct net *net ;
   struct flow_block *block ;
   struct list_head cb_list ;
   struct list_head *driver_block_list ;
   struct netlink_ext_ack *extack ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 341 
enum flow_cls_command {
    FLOW_CLS_REPLACE = 0,
    FLOW_CLS_DESTROY = 1,
    FLOW_CLS_STATS = 2,
    FLOW_CLS_TMPLT_CREATE = 3,
    FLOW_CLS_TMPLT_DESTROY = 4
};
#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_cls_common_offload {
   u32 chain_index ;
   __be16 protocol ;
   u32 prio ;
   struct netlink_ext_ack *extack ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_cls_offload {
   struct flow_cls_common_offload common ;
   enum flow_cls_command command ;
   unsigned long cookie ;
   struct flow_rule *rule ;
   struct flow_stats stats ;
   u32 classid ;
};
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_803 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_804 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_802 {
   struct __anonstruct_803 __anonCompField___anonunion_802_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_804 __anonCompField___anonunion_802_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_802 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_806 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_806 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_819 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_819 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_841 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_841 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_843 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   __addrpair skc_addrpair ;
   struct __anonstruct_843 __anonCompField___anonunion_842_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_844 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_846 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   __portpair skc_portpair ;
   struct __anonstruct_846 __anonCompField___anonunion_845_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_844 __anonCompField_sock_common_179 ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_847 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_848 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_849 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_850 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_851 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_852 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_852 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_853 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_854 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_889 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_889 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_991 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_991 __anonCompField_ip_ra_chain_197 ;
   struct callback_head rcu ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_999 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_998 {
   struct __anonstruct_s_999 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_998 __anonCompField_net_generic_198 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tcf_walker {
   int stop ;
   int skip ;
   int count ;
   bool nonempty ;
   unsigned long cookie ;
   int (*fn)(struct tcf_proto *, void *, struct tcf_walker *) ;
};
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tc_mqprio_qopt_offload {
   struct tc_mqprio_qopt qopt ;
   u16 mode ;
   u16 shaper ;
   u32 flags ;
   u64 min_rate[16U] ;
   u64 max_rate[16U] ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_hslot {
   struct hlist_head head ;
   int count ;
   spinlock_t lock ;
} __attribute__((__aligned__(16)));
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_table {
   struct udp_hslot *hash ;
   struct udp_hslot *hash2 ;
   unsigned int mask ;
   unsigned int log ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tc_act/tc_mirred.h"
enum iavf_status {
    IAVF_SUCCESS = 0,
    IAVF_ERR_NVM = -1,
    IAVF_ERR_NVM_CHECKSUM = -2,
    IAVF_ERR_PHY = -3,
    IAVF_ERR_CONFIG = -4,
    IAVF_ERR_PARAM = -5,
    IAVF_ERR_MAC_TYPE = -6,
    IAVF_ERR_UNKNOWN_PHY = -7,
    IAVF_ERR_LINK_SETUP = -8,
    IAVF_ERR_ADAPTER_STOPPED = -9,
    IAVF_ERR_INVALID_MAC_ADDR = -10,
    IAVF_ERR_DEVICE_NOT_SUPPORTED = -11,
    IAVF_ERR_MASTER_REQUESTS_PENDING = -12,
    IAVF_ERR_INVALID_LINK_SETTINGS = -13,
    IAVF_ERR_AUTONEG_NOT_COMPLETE = -14,
    IAVF_ERR_RESET_FAILED = -15,
    IAVF_ERR_SWFW_SYNC = -16,
    IAVF_ERR_NO_AVAILABLE_VSI = -17,
    IAVF_ERR_NO_MEMORY = -18,
    IAVF_ERR_BAD_PTR = -19,
    IAVF_ERR_RING_FULL = -20,
    IAVF_ERR_INVALID_PD_ID = -21,
    IAVF_ERR_INVALID_QP_ID = -22,
    IAVF_ERR_INVALID_CQ_ID = -23,
    IAVF_ERR_INVALID_CEQ_ID = -24,
    IAVF_ERR_INVALID_AEQ_ID = -25,
    IAVF_ERR_INVALID_SIZE = -26,
    IAVF_ERR_INVALID_ARP_INDEX = -27,
    IAVF_ERR_INVALID_FPM_FUNC_ID = -28,
    IAVF_ERR_QP_INVALID_MSG_SIZE = -29,
    IAVF_ERR_QP_TOOMANY_WRS_POSTED = -30,
    IAVF_ERR_INVALID_FRAG_COUNT = -31,
    IAVF_ERR_QUEUE_EMPTY = -32,
    IAVF_ERR_INVALID_ALIGNMENT = -33,
    IAVF_ERR_FLUSHED_QUEUE = -34,
    IAVF_ERR_INVALID_PUSH_PAGE_INDEX = -35,
    IAVF_ERR_INVALID_IMM_DATA_SIZE = -36,
    IAVF_ERR_TIMEOUT = -37,
    IAVF_ERR_OPCODE_MISMATCH = -38,
    IAVF_ERR_CQP_COMPL_ERROR = -39,
    IAVF_ERR_INVALID_VF_ID = -40,
    IAVF_ERR_INVALID_HMCFN_ID = -41,
    IAVF_ERR_BACKING_PAGE_ERROR = -42,
    IAVF_ERR_NO_PBLCHUNKS_AVAILABLE = -43,
    IAVF_ERR_INVALID_PBLE_INDEX = -44,
    IAVF_ERR_INVALID_SD_INDEX = -45,
    IAVF_ERR_INVALID_PAGE_DESC_INDEX = -46,
    IAVF_ERR_INVALID_SD_TYPE = -47,
    IAVF_ERR_MEMCPY_FAILED = -48,
    IAVF_ERR_INVALID_HMC_OBJ_INDEX = -49,
    IAVF_ERR_INVALID_HMC_OBJ_COUNT = -50,
    IAVF_ERR_INVALID_SRQ_ARM_LIMIT = -51,
    IAVF_ERR_SRQ_ENABLED = -52,
    IAVF_ERR_ADMIN_QUEUE_ERROR = -53,
    IAVF_ERR_ADMIN_QUEUE_TIMEOUT = -54,
    IAVF_ERR_BUF_TOO_SHORT = -55,
    IAVF_ERR_ADMIN_QUEUE_FULL = -56,
    IAVF_ERR_ADMIN_QUEUE_NO_WORK = -57,
    IAVF_ERR_BAD_IWARP_CQE = -58,
    IAVF_ERR_NVM_BLANK_MODE = -59,
    IAVF_ERR_NOT_IMPLEMENTED = -60,
    IAVF_ERR_PE_DOORBELL_NOT_ENABLED = -61,
    IAVF_ERR_DIAG_TEST_FAILED = -62,
    IAVF_ERR_NOT_READY = -63,
    IAVF_NOT_SUPPORTED = -64,
    IAVF_ERR_FIRMWARE_API_VERSION = -65,
    IAVF_ERR_ADMIN_QUEUE_CRITICAL_ERROR = -66
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_osdep.h"
struct iavf_dma_mem {
   void *va ;
   dma_addr_t pa ;
   u32 size ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_osdep.h"
struct iavf_virt_mem {
   void *va ;
   u32 size ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq_cmd.h"
struct __anonstruct_internal_1013 {
   __le32 param0 ;
   __le32 param1 ;
   __le32 param2 ;
   __le32 param3 ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq_cmd.h"
struct __anonstruct_external_1014 {
   __le32 param0 ;
   __le32 param1 ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq_cmd.h"
union __anonunion_params_1012 {
   struct __anonstruct_internal_1013 internal ;
   struct __anonstruct_external_1014 external ;
   u8 raw[16U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq_cmd.h"
struct iavf_aq_desc {
   __le16 flags ;
   __le16 opcode ;
   __le16 datalen ;
   __le16 retval ;
   __le32 cookie_high ;
   __le32 cookie_low ;
   union __anonunion_params_1012 params ;
};
#line 47 
enum iavf_admin_queue_err {
    IAVF_AQ_RC_OK = 0,
    IAVF_AQ_RC_EPERM = 1,
    IAVF_AQ_RC_ENOENT = 2,
    IAVF_AQ_RC_ESRCH = 3,
    IAVF_AQ_RC_EINTR = 4,
    IAVF_AQ_RC_EIO = 5,
    IAVF_AQ_RC_ENXIO = 6,
    IAVF_AQ_RC_E2BIG = 7,
    IAVF_AQ_RC_EAGAIN = 8,
    IAVF_AQ_RC_ENOMEM = 9,
    IAVF_AQ_RC_EACCES = 10,
    IAVF_AQ_RC_EFAULT = 11,
    IAVF_AQ_RC_EBUSY = 12,
    IAVF_AQ_RC_EEXIST = 13,
    IAVF_AQ_RC_EINVAL = 14,
    IAVF_AQ_RC_ENOTTY = 15,
    IAVF_AQ_RC_ENOSPC = 16,
    IAVF_AQ_RC_ENOSYS = 17,
    IAVF_AQ_RC_ERANGE = 18,
    IAVF_AQ_RC_EFLUSHED = 19,
    IAVF_AQ_RC_BAD_ADDR = 20,
    IAVF_AQ_RC_EMODE = 21,
    IAVF_AQ_RC_EFBIG = 22
};
#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq_cmd.h"
struct iavf_aqc_get_set_rss_key_data {
   u8 standard_rss_key[40U] ;
   u8 extended_hash_key[12U] ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.h"
union __anonunion_r_1015 {
   struct iavf_dma_mem *asq_bi ;
   struct iavf_dma_mem *arq_bi ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.h"
struct iavf_adminq_ring {
   struct iavf_virt_mem dma_head ;
   struct iavf_dma_mem desc_buf ;
   struct iavf_virt_mem cmd_buf ;
   union __anonunion_r_1015 r ;
   u16 count ;
   u16 rx_buf_len ;
   u16 next_to_use ;
   u16 next_to_clean ;
   u32 head ;
   u32 tail ;
   u32 len ;
   u32 bah ;
   u32 bal ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.h"
struct iavf_arq_event_info {
   struct iavf_aq_desc desc ;
   u16 msg_len ;
   u16 buf_len ;
   u8 *msg_buf ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.h"
struct iavf_adminq_info {
   struct iavf_adminq_ring arq ;
   struct iavf_adminq_ring asq ;
   u32 asq_cmd_timeout ;
   u16 num_arq_entries ;
   u16 num_asq_entries ;
   u16 arq_buf_size ;
   u16 asq_buf_size ;
   u16 fw_maj_ver ;
   u16 fw_min_ver ;
   u32 fw_build ;
   u16 api_maj_ver ;
   u16 api_min_ver ;
   struct mutex asq_mutex ;
   struct mutex arq_mutex ;
   enum iavf_admin_queue_err asq_last_status ;
   enum iavf_admin_queue_err arq_last_status ;
};
#line 134 
struct iavf_hw;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
enum iavf_mac_type {
    IAVF_MAC_UNKNOWN = 0,
    IAVF_MAC_XL710 = 1,
    IAVF_MAC_VF = 2,
    IAVF_MAC_X722 = 3,
    IAVF_MAC_X722_VF = 4,
    IAVF_MAC_GENERIC = 5
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct iavf_hw_capabilities {
   bool dcb ;
   bool fcoe ;
   u32 num_vsis ;
   u32 num_rx_qp ;
   u32 num_tx_qp ;
   u32 base_queue ;
   u32 num_msix_vectors_vf ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct iavf_mac_info {
   enum iavf_mac_type type ;
   u8 addr[6U] ;
   u8 perm_addr[6U] ;
   u8 san_addr[6U] ;
   u16 max_fcoeq ;
};
#line 119 
enum iavf_bus_type {
    iavf_bus_type_unknown = 0,
    iavf_bus_type_pci = 1,
    iavf_bus_type_pcix = 2,
    iavf_bus_type_pci_express = 3,
    iavf_bus_type_reserved = 4
};
#line 127 
enum iavf_bus_speed {
    iavf_bus_speed_unknown = 0,
    iavf_bus_speed_33 = 33,
    iavf_bus_speed_66 = 66,
    iavf_bus_speed_100 = 100,
    iavf_bus_speed_120 = 120,
    iavf_bus_speed_133 = 133,
    iavf_bus_speed_2500 = 2500,
    iavf_bus_speed_5000 = 5000,
    iavf_bus_speed_8000 = 8000,
    iavf_bus_speed_reserved = 8001
};
#line 140 
enum iavf_bus_width {
    iavf_bus_width_unknown = 0,
    iavf_bus_width_pcie_x1 = 1,
    iavf_bus_width_pcie_x2 = 2,
    iavf_bus_width_pcie_x4 = 4,
    iavf_bus_width_pcie_x8 = 8,
    iavf_bus_width_32 = 32,
    iavf_bus_width_64 = 64,
    iavf_bus_width_reserved = 65
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct iavf_bus_info {
   enum iavf_bus_speed speed ;
   enum iavf_bus_width width ;
   enum iavf_bus_type type ;
   u16 func ;
   u16 device ;
   u16 lan_id ;
   u16 bus_id ;
};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct iavf_hw {
   u8 *hw_addr ;
   void *back ;
   struct iavf_mac_info mac ;
   struct iavf_bus_info bus ;
   u16 device_id ;
   u16 vendor_id ;
   u16 subsystem_device_id ;
   u16 subsystem_vendor_id ;
   u8 revision_id ;
   struct iavf_hw_capabilities dev_caps ;
   struct iavf_adminq_info aq ;
   u32 debug_mask ;
   char err_str[16U] ;
};
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct iavf_tx_desc {
   __le64 buffer_addr ;
   __le64 cmd_type_offset_bsz ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct iavf_eth_stats {
   u64 rx_bytes ;
   u64 rx_unicast ;
   u64 rx_multicast ;
   u64 rx_broadcast ;
   u64 rx_discards ;
   u64 rx_unknown_protocol ;
   u64 tx_bytes ;
   u64 tx_unicast ;
   u64 tx_multicast ;
   u64 tx_broadcast ;
   u64 tx_discards ;
   u64 tx_errors ;
};
#line 699 
enum virtchnl_link_speed {
    VIRTCHNL_LINK_SPEED_UNKNOWN = 0,
    VIRTCHNL_LINK_SPEED_100MB = 2,
    VIRTCHNL_LINK_SPEED_1GB = 4,
    VIRTCHNL_LINK_SPEED_10GB = 8,
    VIRTCHNL_LINK_SPEED_40GB = 16,
    VIRTCHNL_LINK_SPEED_20GB = 32,
    VIRTCHNL_LINK_SPEED_25GB = 64,
    VIRTCHNL_LINK_SPEED_2_5GB = 1,
    VIRTCHNL_LINK_SPEED_5GB = 128
};
#line 719 
enum virtchnl_ops {
    VIRTCHNL_OP_UNKNOWN = 0,
    VIRTCHNL_OP_VERSION = 1,
    VIRTCHNL_OP_RESET_VF = 2,
    VIRTCHNL_OP_GET_VF_RESOURCES = 3,
    VIRTCHNL_OP_CONFIG_TX_QUEUE = 4,
    VIRTCHNL_OP_CONFIG_RX_QUEUE = 5,
    VIRTCHNL_OP_CONFIG_VSI_QUEUES = 6,
    VIRTCHNL_OP_CONFIG_IRQ_MAP = 7,
    VIRTCHNL_OP_ENABLE_QUEUES = 8,
    VIRTCHNL_OP_DISABLE_QUEUES = 9,
    VIRTCHNL_OP_ADD_ETH_ADDR = 10,
    VIRTCHNL_OP_DEL_ETH_ADDR = 11,
    VIRTCHNL_OP_ADD_VLAN = 12,
    VIRTCHNL_OP_DEL_VLAN = 13,
    VIRTCHNL_OP_CONFIG_PROMISCUOUS_MODE = 14,
    VIRTCHNL_OP_GET_STATS = 15,
    VIRTCHNL_OP_RSVD = 16,
    VIRTCHNL_OP_EVENT = 17,
    VIRTCHNL_OP_IWARP = 20,
    VIRTCHNL_OP_CONFIG_IWARP_IRQ_MAP = 21,
    VIRTCHNL_OP_RELEASE_IWARP_IRQ_MAP = 22,
    VIRTCHNL_OP_CONFIG_RSS_KEY = 23,
    VIRTCHNL_OP_CONFIG_RSS_LUT = 24,
    VIRTCHNL_OP_GET_RSS_HENA_CAPS = 25,
    VIRTCHNL_OP_SET_RSS_HENA = 26,
    VIRTCHNL_OP_ENABLE_VLAN_STRIPPING = 27,
    VIRTCHNL_OP_DISABLE_VLAN_STRIPPING = 28,
    VIRTCHNL_OP_REQUEST_QUEUES = 29,
    VIRTCHNL_OP_ENABLE_CHANNELS = 30,
    VIRTCHNL_OP_DISABLE_CHANNELS = 31,
    VIRTCHNL_OP_ADD_CLOUD_FILTER = 32,
    VIRTCHNL_OP_DEL_CLOUD_FILTER = 33
};
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_version_info {
   u32 major ;
   u32 minor ;
};
#line 190 
enum virtchnl_vsi_type {
    VIRTCHNL_VSI_TYPE_INVALID = 0,
    VIRTCHNL_VSI_SRIOV = 6
};
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_vsi_resource {
   u16 vsi_id ;
   u16 num_queue_pairs ;
   enum virtchnl_vsi_type vsi_type ;
   u16 qset_handle ;
   u8 default_mac_addr[6U] ;
};
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_vf_resource {
   u16 num_vsis ;
   u16 num_queue_pairs ;
   u16 max_vectors ;
   u16 max_mtu ;
   u32 vf_cap_flags ;
   u32 rss_key_size ;
   u32 rss_lut_size ;
   struct virtchnl_vsi_resource vsi_res[1U] ;
};
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_channel_info {
   u16 count ;
   u16 offset ;
   u32 pad ;
   u64 max_tx_rate ;
};
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_l4_spec {
   u8 src_mac[6U] ;
   u8 dst_mac[6U] ;
   __be16 vlan_id ;
   __be16 pad ;
   __be32 src_ip[4U] ;
   __be32 dst_ip[4U] ;
   __be16 src_port ;
   __be16 dst_port ;
};
#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
union virtchnl_flow_spec {
   struct virtchnl_l4_spec tcp_spec ;
   u8 buffer[128U] ;
};
#line 557 
enum virtchnl_action {
    VIRTCHNL_ACTION_DROP = 0,
    VIRTCHNL_ACTION_TC_REDIRECT = 1
};
#line 562 
enum virtchnl_flow_type {
    VIRTCHNL_TCP_V4_FLOW = 0,
    VIRTCHNL_TCP_V6_FLOW = 1
};
#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_filter {
   union virtchnl_flow_spec data ;
   union virtchnl_flow_spec mask ;
   enum virtchnl_flow_type flow_type ;
   enum virtchnl_action action ;
   u32 action_meta ;
   u8 field_flags ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
union __anonunion_1037 {
   struct sk_buff *skb ;
   void *raw_buf ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
struct iavf_tx_buffer {
   struct iavf_tx_desc *next_to_watch ;
   union __anonunion_1037 __anonCompField_iavf_tx_buffer_204 ;
   unsigned int bytecount ;
   unsigned short gso_segs ;
   dma_addr_t dma ;
   __u32 len ;
   u32 tx_flags ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
struct iavf_rx_buffer {
   dma_addr_t dma ;
   struct page *page ;
   __u32 page_offset ;
   __u16 pagecnt_bias ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
struct iavf_queue_stats {
   u64 packets ;
   u64 bytes ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
struct iavf_tx_queue_stats {
   u64 restart_queue ;
   u64 tx_busy ;
   u64 tx_done_old ;
   u64 tx_linearize ;
   u64 tx_force_wb ;
   int prev_pkt_ctr ;
   u64 tx_lost_interrupt ;
};
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
struct iavf_rx_queue_stats {
   u64 non_eop_descs ;
   u64 alloc_page_failed ;
   u64 alloc_buff_failed ;
   u64 page_reuse_count ;
   u64 realloc_count ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
union __anonunion_1038 {
   struct iavf_tx_buffer *tx_bi ;
   struct iavf_rx_buffer *rx_bi ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
union __anonunion_1039 {
   struct iavf_tx_queue_stats tx_stats ;
   struct iavf_rx_queue_stats rx_stats ;
};
#line 326 
struct iavf_vsi;
#line 326 
struct iavf_q_vector;
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
struct iavf_ring {
   struct iavf_ring *next ;
   void *desc ;
   struct device *dev ;
   struct net_device *netdev ;
   union __anonunion_1038 __anonCompField_iavf_ring_205 ;
   unsigned long state[1U] ;
   u16 queue_index ;
   u8 dcb_tc ;
   u8 *tail ;
   u16 itr_setting ;
   u16 count ;
   u16 reg_idx ;
   u16 rx_buf_len ;
   u16 next_to_use ;
   u16 next_to_clean ;
   u8 atr_sample_rate ;
   u8 atr_count ;
   bool ring_active ;
   bool arm_wb ;
   u8 packet_stride ;
   u16 flags ;
   struct iavf_queue_stats stats ;
   struct u64_stats_sync syncp ;
   union __anonunion_1039 __anonCompField_iavf_ring_206 ;
   unsigned int size ;
   dma_addr_t dma ;
   struct iavf_vsi *vsi ;
   struct iavf_q_vector *q_vector ;
   struct callback_head rcu ;
   u16 next_to_alloc ;
   struct sk_buff *skb ;
} __attribute__((__aligned__(4096)));
#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
struct iavf_ring_container {
   struct iavf_ring *ring ;
   unsigned long next_update ;
   unsigned int total_bytes ;
   unsigned int total_packets ;
   u16 count ;
   u16 target_itr ;
   u16 current_itr ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
struct iavf_adapter;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
struct iavf_vsi {
   struct iavf_adapter *back ;
   struct net_device *netdev ;
   unsigned long active_vlans[64U] ;
   u16 seid ;
   u16 id ;
   unsigned long state[1U] ;
   int base_vector ;
   u16 work_limit ;
   u16 qs_handle ;
   void *priv ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
struct iavf_q_vector {
   struct iavf_adapter *adapter ;
   struct iavf_vsi *vsi ;
   struct napi_struct napi ;
   struct iavf_ring_container rx ;
   struct iavf_ring_container tx ;
   u32 ring_mask ;
   u8 itr_countdown ;
   u8 num_ringpairs ;
   u16 v_idx ;
   u16 reg_idx ;
   char name[31U] ;
   bool arm_wb_state ;
   cpumask_t affinity_mask ;
   struct irq_affinity_notify affinity_notify ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
struct iavf_mac_filter {
   struct list_head list ;
   u8 macaddr[6U] ;
   bool remove ;
   bool add ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
struct iavf_vlan_filter {
   struct list_head list ;
   u16 vlan ;
   bool remove ;
   bool add ;
};
#line 143 
enum iavf_tc_state_t {
    __IAVF_TC_INVALID = 0,
    __IAVF_TC_RUNNING = 1
};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
struct iavf_channel_config {
   struct virtchnl_channel_info ch_info[4U] ;
   enum iavf_tc_state_t state ;
   u8 total_qps ;
};
#line 157 
enum iavf_cloud_filter_state_t {
    __IAVF_CF_INVALID = 0,
    __IAVF_CF_ADD_PENDING = 1,
    __IAVF_CF_DEL_PENDING = 2,
    __IAVF_CF_ACTIVE = 3
};
#line 164 
enum iavf_state_t {
    __IAVF_STARTUP = 0,
    __IAVF_REMOVE = 1,
    __IAVF_INIT_VERSION_CHECK = 2,
    __IAVF_INIT_GET_RESOURCES = 3,
    __IAVF_INIT_SW = 4,
    __IAVF_RESETTING = 5,
    __IAVF_COMM_FAILED = 6,
    __IAVF_DOWN = 7,
    __IAVF_DOWN_PENDING = 8,
    __IAVF_TESTING = 9,
    __IAVF_RUNNING = 10
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
struct iavf_cloud_filter {
   enum iavf_cloud_filter_state_t state ;
   struct list_head list ;
   struct virtchnl_filter f ;
   unsigned long cookie ;
   bool del ;
   bool add ;
};
#line 219 
struct iavf_client_instance;
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
struct iavf_adapter {
   struct work_struct reset_task ;
   struct work_struct adminq_task ;
   struct delayed_work client_task ;
   struct delayed_work init_task ;
   wait_queue_head_t down_waitqueue ;
   struct iavf_q_vector *q_vectors ;
   struct list_head vlan_filter_list ;
   struct list_head mac_filter_list ;
   spinlock_t mac_vlan_list_lock ;
   char misc_vector_name[25U] ;
   int num_active_queues ;
   int num_req_queues ;
   struct iavf_ring *tx_rings ;
   u32 tx_timeout_count ;
   u32 tx_desc_count ;
   struct iavf_ring *rx_rings ;
   u64 hw_csum_rx_error ;
   u32 rx_desc_count ;
   int num_msix_vectors ;
   int num_iwarp_msix ;
   int iwarp_base_vector ;
   u32 client_pending ;
   struct iavf_client_instance *cinst ;
   struct msix_entry *msix_entries ;
   u32 flags ;
   u32 aq_required ;
   struct net_device *netdev ;
   struct pci_dev *pdev ;
   struct iavf_hw hw ;
   enum iavf_state_t state ;
   unsigned long crit_section ;
   struct delayed_work watchdog_task ;
   bool netdev_registered ;
   bool link_up ;
   enum virtchnl_link_speed link_speed ;
   enum virtchnl_ops current_op ;
   struct virtchnl_vf_resource *vf_res ;
   struct virtchnl_vsi_resource *vsi_res ;
   struct virtchnl_version_info pf_version ;
   u16 msg_enable ;
   struct iavf_eth_stats current_stats ;
   struct iavf_vsi vsi ;
   u32 aq_wait_count ;
   u64 hena ;
   u16 rss_key_size ;
   u16 rss_lut_size ;
   u8 *rss_key ;
   u8 *rss_lut ;
   struct iavf_channel_config ch_config ;
   u8 num_tc ;
   struct list_head cloud_filter_list ;
   spinlock_t cloud_filter_list_lock ;
   u16 num_cloud_filters ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
struct iavf_client_version {
   u8 major ;
   u8 minor ;
   u8 build ;
   u8 rsvd ;
};
#line 36 
struct iavf_ops;
#line 37 
struct iavf_client;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
struct iavf_qv_info {
   u32 v_idx ;
   u16 ceq_idx ;
   u16 aeq_idx ;
   u8 itr_idx ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
struct iavf_qvlist_info {
   u32 num_vectors ;
   struct iavf_qv_info qv_info[1U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
struct iavf_prio_qos_params {
   u16 qs_handle ;
   u8 tc ;
   u8 reserved ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
struct iavf_qos_params {
   struct iavf_prio_qos_params prio_qos[8U] ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
struct iavf_params {
   struct iavf_qos_params qos ;
   u16 mtu ;
   u16 link_up ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
struct iavf_info {
   struct iavf_client_version version ;
   u8 lanmac[6U] ;
   struct net_device *netdev ;
   struct pci_dev *pcidev ;
   u8 *hw_addr ;
   u8 fid ;
   u8 ftype ;
   void *vf ;
   struct iavf_params params ;
   struct iavf_ops *ops ;
   u16 msix_count ;
   struct msix_entry *msix_entries ;
   u16 itr_index ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
struct iavf_ops {
   int (*setup_qvlist)(struct iavf_info *, struct iavf_client *, struct iavf_qvlist_info *) ;
   u32 (*virtchnl_send)(struct iavf_info *, struct iavf_client *, u8 *, u16 ) ;
   void (*request_reset)(struct iavf_info *, struct iavf_client *) ;
};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
struct iavf_client_ops {
   int (*open)(struct iavf_info *, struct iavf_client *) ;
   void (*close)(struct iavf_info *, struct iavf_client *, bool ) ;
   void (*l2_param_change)(struct iavf_info *, struct iavf_client *, struct iavf_params *) ;
   int (*virtchnl_receive)(struct iavf_info *, struct iavf_client *, u8 *, u16 ) ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
struct iavf_client_instance {
   struct list_head list ;
   struct iavf_info lan_info ;
   struct iavf_client *client ;
   unsigned long state ;
};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
struct iavf_client {
   struct list_head list ;
   char name[10U] ;
   struct iavf_client_version version ;
   unsigned long state ;
   atomic_t ref_cnt ;
   u32 flags ;
   u8 type ;
   struct iavf_client_ops *ops ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint.h"
struct trace_eval_map {
   char *system ;
   char *eval_string ;
   unsigned long eval_value ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
struct ring_buffer;
#line 191 
struct ring_buffer_iter;
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ring_buffer.h"
struct trace_seq;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_buf.h"
struct seq_buf {
   char *buffer ;
   size_t size ;
   size_t len ;
   loff_t readpos ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_seq.h"
struct trace_seq {
   unsigned char buffer[4096U] ;
   struct seq_buf seq ;
   int full ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
union __anonunion_1064 {
   __u64 sample_period ;
   __u64 sample_freq ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
union __anonunion_1065 {
   __u32 wakeup_events ;
   __u32 wakeup_watermark ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
union __anonunion_1066 {
   __u64 bp_addr ;
   __u64 kprobe_func ;
   __u64 uprobe_path ;
   __u64 config1 ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
union __anonunion_1067 {
   __u64 bp_len ;
   __u64 kprobe_addr ;
   __u64 probe_offset ;
   __u64 config2 ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
struct perf_event_attr {
   __u32 type ;
   __u32 size ;
   __u64 config ;
   union __anonunion_1064 __anonCompField_perf_event_attr_207 ;
   __u64 sample_type ;
   __u64 read_format ;
   __u64 disabled : 1 ;
   __u64 inherit : 1 ;
   __u64 pinned : 1 ;
   __u64 exclusive : 1 ;
   __u64 exclude_user : 1 ;
   __u64 exclude_kernel : 1 ;
   __u64 exclude_hv : 1 ;
   __u64 exclude_idle : 1 ;
   __u64 mmap : 1 ;
   __u64 comm : 1 ;
   __u64 freq : 1 ;
   __u64 inherit_stat : 1 ;
   __u64 enable_on_exec : 1 ;
   __u64 task : 1 ;
   __u64 watermark : 1 ;
   __u64 precise_ip : 2 ;
   __u64 mmap_data : 1 ;
   __u64 sample_id_all : 1 ;
   __u64 exclude_host : 1 ;
   __u64 exclude_guest : 1 ;
   __u64 exclude_callchain_kernel : 1 ;
   __u64 exclude_callchain_user : 1 ;
   __u64 mmap2 : 1 ;
   __u64 comm_exec : 1 ;
   __u64 use_clockid : 1 ;
   __u64 context_switch : 1 ;
   __u64 write_backward : 1 ;
   __u64 namespaces : 1 ;
   __u64 ksymbol : 1 ;
   __u64 bpf_event : 1 ;
   __u64 aux_output : 1 ;
   __u64 __reserved_1 : 32 ;
   union __anonunion_1065 __anonCompField_perf_event_attr_208 ;
   __u32 bp_type ;
   union __anonunion_1066 __anonCompField_perf_event_attr_209 ;
   union __anonunion_1067 __anonCompField_perf_event_attr_210 ;
   __u64 branch_sample_type ;
   __u64 sample_regs_user ;
   __u32 sample_stack_user ;
   __s32 clockid ;
   __u64 sample_regs_intr ;
   __u32 aux_watermark ;
   __u16 sample_max_stack ;
   __u16 __reserved_2 ;
   __u32 aux_sample_size ;
   __u32 __reserved_3 ;
};
#line 1056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
struct __anonstruct_1070 {
   __u64 mem_op : 5 ;
   __u64 mem_lvl : 14 ;
   __u64 mem_snoop : 5 ;
   __u64 mem_lock : 2 ;
   __u64 mem_dtlb : 7 ;
   __u64 mem_lvl_num : 4 ;
   __u64 mem_remote : 1 ;
   __u64 mem_snoopx : 2 ;
   __u64 mem_rsvd : 24 ;
};
#line 1056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
union perf_mem_data_src {
   __u64 val ;
   struct __anonstruct_1070 __anonCompField_perf_mem_data_src_213 ;
};
#line 1176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
struct perf_branch_entry {
   __u64 from ;
   __u64 to ;
   __u64 mispred : 1 ;
   __u64 predicted : 1 ;
   __u64 in_tx : 1 ;
   __u64 abort : 1 ;
   __u64 cycles : 16 ;
   __u64 type : 4 ;
   __u64 reserved : 40 ;
};
#line 1187 
struct fs_pin;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid_namespace.h"
struct pid_namespace {
   struct kref kref ;
   struct idr idr ;
   struct callback_head rcu ;
   unsigned int pid_allocated ;
   struct task_struct *child_reaper ;
   struct kmem_cache *pid_cachep ;
   unsigned int level ;
   struct pid_namespace *parent ;
   struct vfsmount *proc_mnt ;
   struct dentry *proc_self ;
   struct dentry *proc_thread_self ;
   struct fs_pin *bacct ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct work_struct proc_work ;
   kgid_t pid_gid ;
   int hide_pid ;
   int reboot ;
   struct ns_common ns ;
} __attribute__((__designated_init__));
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/hw_breakpoint.h"
struct arch_hw_breakpoint {
   unsigned long address ;
   unsigned long mask ;
   u8 len ;
   u8 type ;
};
#line 51 
struct pmu;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ftrace.h"
struct ftrace_hash;
#line 85 
struct ftrace_ops;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ftrace.h"
struct ftrace_ops_hash {
   struct ftrace_hash *notrace_hash ;
   struct ftrace_hash *filter_hash ;
   struct mutex regex_lock ;
};
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ftrace.h"
struct ftrace_ops {
   void (*func)(unsigned long , unsigned long , struct ftrace_ops *, struct pt_regs *) ;
   struct ftrace_ops *next ;
   unsigned long flags ;
   void *private ;
   void (*saved_func)(unsigned long , unsigned long , struct ftrace_ops *, struct pt_regs *) ;
   struct ftrace_ops_hash local_hash ;
   struct ftrace_ops_hash *func_hash ;
   struct ftrace_ops_hash old_hash ;
   unsigned long trampoline ;
   unsigned long trampoline_size ;
};
#line 869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ftrace.h"
struct ftrace_ret_stack {
   unsigned long ret ;
   unsigned long func ;
   unsigned long long calltime ;
   unsigned long long subtime ;
   unsigned long *retp ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq_work.h"
struct irq_work {
   atomic_t flags ;
   struct llist_node llnode ;
   void (*func)(struct irq_work *) ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_regs.h"
struct perf_regs {
   __u64 abi ;
   struct pt_regs *regs ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_callchain_entry {
   __u64 nr ;
   __u64 ip[0U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
union __anonunion_1090 {
   struct perf_raw_frag *next ;
   unsigned long pad ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_raw_frag {
   union __anonunion_1090 __anonCompField_perf_raw_frag_215 ;
   unsigned long (*copy)(void *, void *, unsigned long , unsigned long ) ;
   void *data ;
   u32 size ;
} __attribute__((__packed__));
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_raw_record {
   struct perf_raw_frag frag ;
   u32 size ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_branch_stack {
   __u64 nr ;
   struct perf_branch_entry entries[0U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct hw_perf_event_extra {
   u64 config ;
   unsigned int reg ;
   int alloc ;
   int idx ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_1092 {
   u64 config ;
   u64 last_tag ;
   unsigned long config_base ;
   unsigned long event_base ;
   int event_base_rdpmc ;
   int idx ;
   int last_cpu ;
   int flags ;
   struct hw_perf_event_extra extra_reg ;
   struct hw_perf_event_extra branch_reg ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_1093 {
   struct hrtimer hrtimer ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_1094 {
   struct list_head tp_list ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_1095 {
   u64 pwr_acc ;
   u64 ptsc ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_1096 {
   struct arch_hw_breakpoint info ;
   struct list_head bp_list ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_1097 {
   u8 iommu_bank ;
   u8 iommu_cntr ;
   u16 padding ;
   u64 conf ;
   u64 conf1 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
union __anonunion_1091 {
   struct __anonstruct_1092 __anonCompField___anonunion_1091_216 ;
   struct __anonstruct_1093 __anonCompField___anonunion_1091_217 ;
   struct __anonstruct_1094 __anonCompField___anonunion_1091_218 ;
   struct __anonstruct_1095 __anonCompField___anonunion_1091_219 ;
   struct __anonstruct_1096 __anonCompField___anonunion_1091_220 ;
   struct __anonstruct_1097 __anonCompField___anonunion_1091_221 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct hw_perf_event {
   union __anonunion_1091 __anonCompField_hw_perf_event_222 ;
   struct task_struct *target ;
   void *addr_filters ;
   unsigned long addr_filters_gen ;
   int state ;
   local64_t prev_count ;
   u64 sample_period ;
   u64 last_period ;
   local64_t period_left ;
   u64 interrupts_seq ;
   u64 interrupts ;
   u64 freq_time_stamp ;
   u64 freq_count_stamp ;
};
#line 229 
struct perf_output_handle;
#line 257 
struct perf_cpu_context;
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct pmu {
   struct list_head entry ;
   struct module *module ;
   struct device *dev ;
   struct attribute_group **attr_groups ;
   struct attribute_group **attr_update ;
   char *name ;
   int type ;
   int capabilities ;
   int *pmu_disable_count ;
   struct perf_cpu_context *pmu_cpu_context ;
   atomic_t exclusive_cnt ;
   int task_ctx_nr ;
   int hrtimer_interval_ms ;
   unsigned int nr_addr_filters ;
   void (*pmu_enable)(struct pmu *) ;
   void (*pmu_disable)(struct pmu *) ;
   int (*event_init)(struct perf_event *) ;
   void (*event_mapped)(struct perf_event *, struct mm_struct *) ;
   void (*event_unmapped)(struct perf_event *, struct mm_struct *) ;
   int (*add)(struct perf_event *, int ) ;
   void (*del)(struct perf_event *, int ) ;
   void (*start)(struct perf_event *, int ) ;
   void (*stop)(struct perf_event *, int ) ;
   void (*read)(struct perf_event *) ;
   void (*start_txn)(struct pmu *, unsigned int ) ;
   int (*commit_txn)(struct pmu *) ;
   void (*cancel_txn)(struct pmu *) ;
   int (*event_idx)(struct perf_event *) ;
   void (*sched_task)(struct perf_event_context *, bool ) ;
   size_t task_ctx_size ;
   void (*swap_task_ctx)(struct perf_event_context *, struct perf_event_context *) ;
   void *(*setup_aux)(struct perf_event *, void **, int , bool ) ;
   void (*free_aux)(void *) ;
   long (*snapshot_aux)(struct perf_event *, struct perf_output_handle *, unsigned long ) ;
   int (*addr_filters_validate)(struct list_head *) ;
   void (*addr_filters_sync)(struct perf_event *) ;
   int (*aux_output_match)(struct perf_event *) ;
   int (*filter_match)(struct perf_event *) ;
   int (*check_period)(struct perf_event *, u64 ) ;
};
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_addr_filters_head {
   struct list_head list ;
   raw_spinlock_t lock ;
   unsigned int nr_file_filters ;
};
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_addr_filter_range {
   unsigned long start ;
   unsigned long size ;
};
#line 540 
enum perf_event_state {
    PERF_EVENT_STATE_DEAD = -4,
    PERF_EVENT_STATE_EXIT = -3,
    PERF_EVENT_STATE_ERROR = -2,
    PERF_EVENT_STATE_OFF = -1,
    PERF_EVENT_STATE_INACTIVE = 0,
    PERF_EVENT_STATE_ACTIVE = 1
};
#line 549 
struct perf_sample_data;
#line 577 
struct perf_cgroup;
#line 599 
struct event_filter;
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_event {
   struct list_head event_entry ;
   struct list_head sibling_list ;
   struct list_head active_list ;
   struct rb_node group_node ;
   u64 group_index ;
   struct list_head migrate_entry ;
   struct hlist_node hlist_entry ;
   struct list_head active_entry ;
   int nr_siblings ;
   int event_caps ;
   int group_caps ;
   struct perf_event *group_leader ;
   struct pmu *pmu ;
   void *pmu_private ;
   enum perf_event_state state ;
   unsigned int attach_state ;
   local64_t count ;
   atomic64_t child_count ;
   u64 total_time_enabled ;
   u64 total_time_running ;
   u64 tstamp ;
   u64 shadow_ctx_time ;
   struct perf_event_attr attr ;
   u16 header_size ;
   u16 id_header_size ;
   u16 read_size ;
   struct hw_perf_event hw ;
   struct perf_event_context *ctx ;
   atomic_long_t refcount ;
   atomic64_t child_total_time_enabled ;
   atomic64_t child_total_time_running ;
   struct mutex child_mutex ;
   struct list_head child_list ;
   struct perf_event *parent ;
   int oncpu ;
   int cpu ;
   struct list_head owner_entry ;
   struct task_struct *owner ;
   struct mutex mmap_mutex ;
   atomic_t mmap_count ;
   struct ring_buffer *rb ;
   struct list_head rb_entry ;
   unsigned long rcu_batches ;
   int rcu_pending ;
   wait_queue_head_t waitq ;
   struct fasync_struct *fasync ;
   int pending_wakeup ;
   int pending_kill ;
   int pending_disable ;
   struct irq_work pending ;
   atomic_t event_limit ;
   struct perf_addr_filters_head addr_filters ;
   struct perf_addr_filter_range *addr_filter_ranges ;
   unsigned long addr_filters_gen ;
   struct perf_event *aux_event ;
   void (*destroy)(struct perf_event *) ;
   struct callback_head callback_head ;
   struct pid_namespace *ns ;
   u64 id ;
   u64 (*clock)(void) ;
   void (*overflow_handler)(struct perf_event *, struct perf_sample_data *, struct pt_regs *) ;
   void *overflow_handler_context ;
   void (*orig_overflow_handler)(struct perf_event *, struct perf_sample_data *, struct pt_regs *) ;
   struct bpf_prog *prog ;
   struct trace_event_call *tp_event ;
   struct event_filter *filter ;
   struct ftrace_ops ftrace_ops ;
   struct perf_cgroup *cgrp ;
   void *security ;
   struct list_head sb_list ;
};
#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_event_groups {
   struct rb_root tree ;
   u64 index ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_event_context {
   struct pmu *pmu ;
   raw_spinlock_t lock ;
   struct mutex mutex ;
   struct list_head active_ctx_list ;
   struct perf_event_groups pinned_groups ;
   struct perf_event_groups flexible_groups ;
   struct list_head event_list ;
   struct list_head pinned_active ;
   struct list_head flexible_active ;
   int nr_events ;
   int nr_active ;
   int is_active ;
   int nr_stat ;
   int nr_freq ;
   int rotate_disable ;
   int rotate_necessary ;
   refcount_t refcount ;
   struct task_struct *task ;
   u64 time ;
   u64 timestamp ;
   struct perf_event_context *parent_ctx ;
   u64 parent_gen ;
   u64 generation ;
   int pin_count ;
   int nr_cgroups ;
   void *task_ctx_data ;
   struct callback_head callback_head ;
};
#line 833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_cpu_context {
   struct perf_event_context ctx ;
   struct perf_event_context *task_ctx ;
   int active_oncpu ;
   int exclusive ;
   raw_spinlock_t hrtimer_lock ;
   struct hrtimer hrtimer ;
   ktime_t hrtimer_interval ;
   unsigned int hrtimer_active ;
   struct perf_cgroup *cgrp ;
   struct list_head cgrp_cpuctx_entry ;
   struct list_head sched_cb_entry ;
   int sched_cb_usage ;
   int online ;
};
#line 855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
union __anonunion_1098 {
   void *addr ;
   unsigned long head ;
};
#line 855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_output_handle {
   struct perf_event *event ;
   struct ring_buffer *rb ;
   unsigned long wakeup ;
   unsigned long size ;
   u64 aux_flags ;
   union __anonunion_1098 __anonCompField_perf_output_handle_223 ;
   int page ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_cgroup_info {
   u64 time ;
   u64 timestamp ;
};
#line 885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_cgroup {
   struct cgroup_subsys_state css ;
   struct perf_cgroup_info *info ;
};
#line 960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_tid_entry_1101 {
   u32 pid ;
   u32 tid ;
};
#line 960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_cpu_entry_1102 {
   u32 cpu ;
   u32 reserved ;
};
#line 960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_sample_data {
   u64 addr ;
   struct perf_raw_record *raw ;
   struct perf_branch_stack *br_stack ;
   u64 period ;
   u64 weight ;
   u64 txn ;
   union perf_mem_data_src data_src ;
   u64 type ;
   u64 ip ;
   struct __anonstruct_tid_entry_1101 tid_entry ;
   u64 time ;
   u64 id ;
   u64 stream_id ;
   struct __anonstruct_cpu_entry_1102 cpu_entry ;
   struct perf_callchain_entry *callchain ;
   u64 aux_size ;
   struct perf_regs regs_user ;
   struct pt_regs regs_user_copy ;
   struct perf_regs regs_intr ;
   u64 stack_user_size ;
   u64 phys_addr ;
} __attribute__((__aligned__(64)));
#line 1542 
struct trace_array;
#line 1543 
struct trace_buffer;
#line 1544 
struct tracer;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_iterator;
#line 51 
struct trace_event;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_entry {
   unsigned short type ;
   unsigned char flags ;
   unsigned char preempt_count ;
   int pid ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_iterator {
   struct trace_array *tr ;
   struct tracer *trace ;
   struct trace_buffer *trace_buffer ;
   void *private ;
   int cpu_file ;
   struct mutex mutex ;
   struct ring_buffer_iter **buffer_iter ;
   unsigned long iter_flags ;
   struct trace_seq tmp_seq ;
   cpumask_var_t started ;
   bool snapshot ;
   struct trace_seq seq ;
   struct trace_entry *ent ;
   unsigned long lost_events ;
   int leftover ;
   int ent_size ;
   int cpu ;
   u64 ts ;
   loff_t pos ;
   long idx ;
};
#line 115 
enum print_line_t;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_event_functions {
   enum print_line_t (*trace)(struct trace_iterator *, int , struct trace_event *) ;
   enum print_line_t (*raw)(struct trace_iterator *, int , struct trace_event *) ;
   enum print_line_t (*hex)(struct trace_iterator *, int , struct trace_event *) ;
   enum print_line_t (*binary)(struct trace_iterator *, int , struct trace_event *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_event {
   struct hlist_node node ;
   struct list_head list ;
   int type ;
   struct trace_event_functions *funcs ;
};
#line 138 
enum print_line_t {
    TRACE_TYPE_PARTIAL_LINE = 0,
    TRACE_TYPE_HANDLED = 1,
    TRACE_TYPE_UNHANDLED = 2,
    TRACE_TYPE_NO_CONSUME = 3
};
#line 172 
enum trace_reg {
    TRACE_REG_REGISTER = 0,
    TRACE_REG_UNREGISTER = 1,
    TRACE_REG_PERF_REGISTER = 2,
    TRACE_REG_PERF_UNREGISTER = 3,
    TRACE_REG_PERF_OPEN = 4,
    TRACE_REG_PERF_CLOSE = 5,
    TRACE_REG_PERF_ADD = 6,
    TRACE_REG_PERF_DEL = 7
};
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_event_class {
   char *system ;
   void *probe ;
   void *perf_probe ;
   int (*reg)(struct trace_event_call *, enum trace_reg , void *) ;
   int (*define_fields)(struct trace_event_call *) ;
   struct list_head *(*get_fields)(struct trace_event_call *) ;
   struct list_head fields ;
   int (*raw_init)(struct trace_event_call *) ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
union __anonunion_1103 {
   char *name ;
   struct tracepoint *tp ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_event_call {
   struct list_head list ;
   struct trace_event_class *class ;
   union __anonunion_1103 __anonCompField_trace_event_call_224 ;
   struct trace_event event ;
   char *print_fmt ;
   struct event_filter *filter ;
   void *mod ;
   void *data ;
   int flags ;
   int perf_refcount ;
   struct hlist_head *perf_events ;
   struct bpf_prog_array *prog_array ;
   int (*perf_perm)(struct trace_event_call *, struct perf_event *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
typedef __builtin_va_list __gnuc_va_list;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h"
typedef __gnuc_va_list va_list;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
struct iavf_stats {
   char stat_string[32U] ;
   int sizeof_stat ;
   int stat_offset ;
};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
struct iavf_priv_flags {
   char flag_string[32U] ;
   u32 flag ;
   bool read_only ;
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
union __anonunion___u_2157 {
   u32 __val ;
   char __c[1U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2171 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2173 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.h"
struct iavf_asq_cmd_details {
   void *callback ;
   u64 cookie ;
   u16 flags_ena ;
   u16 flags_dis ;
   bool async ;
   bool postpone ;
   struct iavf_aq_desc *wb_desc ;
};
#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_iwarp_qv_info {
   u32 v_idx ;
   u16 ceq_idx ;
   u16 aeq_idx ;
   u8 itr_idx ;
};
#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_iwarp_qvlist_info {
   u32 num_vectors ;
   struct virtchnl_iwarp_qv_info qv_info[1U] ;
};
#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
struct iavf_device {
   struct list_head list ;
   struct iavf_adapter *vf ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq_cmd.h"
struct iavf_aqc_queue_shutdown {
   __le32 driver_unloading ;
   u8 reserved[12U] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq_cmd.h"
struct iavf_aqc_get_set_rss_key {
   __le16 vsi_id ;
   u8 reserved[6U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq_cmd.h"
struct iavf_aqc_get_set_rss_lut {
   __le16 vsi_id ;
   __le16 flags ;
   u8 reserved[4U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
enum iavf_debug_mask {
    IAVF_DEBUG_INIT = 1,
    IAVF_DEBUG_RELEASE = 2,
    IAVF_DEBUG_LINK = 16,
    IAVF_DEBUG_PHY = 32,
    IAVF_DEBUG_HMC = 64,
    IAVF_DEBUG_NVM = 128,
    IAVF_DEBUG_LAN = 256,
    IAVF_DEBUG_FLOW = 512,
    IAVF_DEBUG_DCB = 1024,
    IAVF_DEBUG_DIAG = 2048,
    IAVF_DEBUG_FD = 4096,
    IAVF_DEBUG_PACKAGE = 8192,
    IAVF_DEBUG_AQ_MESSAGE = 16777216,
    IAVF_DEBUG_AQ_DESCRIPTOR = 33554432,
    IAVF_DEBUG_AQ_DESC_BUFFER = 67108864,
    IAVF_DEBUG_AQ_COMMAND = 100663296,
    IAVF_DEBUG_AQ = 251658240,
    IAVF_DEBUG_USER = 4026531840,
    IAVF_DEBUG_ALL = 4294967295
};
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct iavf_rx_ptype_decoded {
   u32 ptype : 8 ;
   u32 known : 1 ;
   u32 outer_ip : 1 ;
   u32 outer_ip_ver : 1 ;
   u32 outer_frag : 1 ;
   u32 tunnel_type : 3 ;
   u32 tunnel_end_prot : 2 ;
   u32 tunnel_end_frag : 1 ;
   u32 inner_prot : 4 ;
   u32 payload_layer : 3 ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_5231 {
   int __val ;
   char __c[1U] ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
enum node_states {
    N_POSSIBLE = 0,
    N_ONLINE = 1,
    N_NORMAL_MEMORY = 2,
    N_HIGH_MEMORY = 2,
    N_MEMORY = 3,
    N_CPU = 4,
    NR_NODE_STATES = 5
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_5313 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_5621 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_5623 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/udp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct __anonstruct_read_6187 {
   __le64 pkt_addr ;
   __le64 hdr_addr ;
   __le64 rsvd1 ;
   __le64 rsvd2 ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
union __anonunion_mirr_fcoe_6191 {
   __le16 mirroring_status ;
   __le16 fcoe_ctx_id ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct __anonstruct_lo_dword_6190 {
   union __anonunion_mirr_fcoe_6191 mirr_fcoe ;
   __le16 l2tag1 ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
union __anonunion_hi_dword_6192 {
   __le32 rss ;
   __le32 fcoe_param ;
   __le32 fd_id ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct __anonstruct_qword0_6189 {
   struct __anonstruct_lo_dword_6190 lo_dword ;
   union __anonunion_hi_dword_6192 hi_dword ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct __anonstruct_qword1_6193 {
   __le64 status_error_len ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct __anonstruct_qword2_6194 {
   __le16 ext_status ;
   __le16 rsvd ;
   __le16 l2tag2_1 ;
   __le16 l2tag2_2 ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
union __anonunion_lo_dword_6196 {
   __le32 flex_bytes_lo ;
   __le32 pe_status ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
union __anonunion_hi_dword_6197 {
   __le32 flex_bytes_hi ;
   __le32 fd_id ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct __anonstruct_qword3_6195 {
   union __anonunion_lo_dword_6196 lo_dword ;
   union __anonunion_hi_dword_6197 hi_dword ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct __anonstruct_wb_6188 {
   struct __anonstruct_qword0_6189 qword0 ;
   struct __anonstruct_qword1_6193 qword1 ;
   struct __anonstruct_qword2_6194 qword2 ;
   struct __anonstruct_qword3_6195 qword3 ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
union iavf_32byte_rx_desc {
   struct __anonstruct_read_6187 read ;
   struct __anonstruct_wb_6188 wb ;
};
#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
struct iavf_tx_context_desc {
   __le32 tunneling_params ;
   __le16 l2tag2 ;
   __le16 rsvd ;
   __le64 type_cmd_tso_mss ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
union __anonunion___u_6205 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
union __anonunion___u_6207 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
union __anonunion___u_6209 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
union __anonunion___u_6211 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
union __anonunion___u_6213 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
union __anonunion___u_6215 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
union __anonunion___u_6217 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
union __anonunion___u_6219 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
union __anonunion___u_6221 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
union __anonunion___u_6223 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
union __anonunion___u_6225 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
union __anonunion___u_6227 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 1857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
union __anonunion_ip_6230 {
   struct iphdr *v4 ;
   struct ipv6hdr *v6 ;
   unsigned char *hdr ;
};
#line 1862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
union __anonunion_l4_6231 {
   struct tcphdr *tcp ;
   struct udphdr *udp ;
   unsigned char *hdr ;
};
#line 1966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
union __anonunion_ip_6234 {
   struct iphdr *v4 ;
   struct ipv6hdr *v6 ;
   unsigned char *hdr ;
};
#line 1971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
union __anonunion_l4_6235 {
   struct tcphdr *tcp ;
   struct udphdr *udp ;
   unsigned char *hdr ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_6250 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_6302 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_type.h"
enum virtchnl_rx_hsplit {
    VIRTCHNL_RX_HSPLIT_NO_SPLIT = 0,
    VIRTCHNL_RX_HSPLIT_SPLIT_L2 = 1,
    VIRTCHNL_RX_HSPLIT_SPLIT_IP = 2,
    VIRTCHNL_RX_HSPLIT_SPLIT_TCP_UDP = 4,
    VIRTCHNL_RX_HSPLIT_SPLIT_SCTP = 8
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_txq_info {
   u16 vsi_id ;
   u16 queue_id ;
   u16 ring_len ;
   u16 headwb_enabled ;
   u64 dma_ring_addr ;
   u64 dma_headwb_addr ;
};
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_rxq_info {
   u16 vsi_id ;
   u16 queue_id ;
   u32 ring_len ;
   u16 hdr_size ;
   u16 splithdr_enabled ;
   u32 databuffer_size ;
   u32 max_pkt_size ;
   u32 pad1 ;
   u64 dma_ring_addr ;
   enum virtchnl_rx_hsplit rx_split_pos ;
   u32 pad2 ;
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_queue_pair_info {
   struct virtchnl_txq_info txq ;
   struct virtchnl_rxq_info rxq ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_vsi_queue_config_info {
   u16 vsi_id ;
   u16 num_queue_pairs ;
   u32 pad ;
   struct virtchnl_queue_pair_info qpair[1U] ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_vf_res_request {
   u16 num_queue_pairs ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_vector_map {
   u16 vsi_id ;
   u16 vector_id ;
   u16 rxq_map ;
   u16 txq_map ;
   u16 rxitr_idx ;
   u16 txitr_idx ;
};
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_irq_map_info {
   u16 num_vectors ;
   struct virtchnl_vector_map vecmap[1U] ;
};
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_queue_select {
   u16 vsi_id ;
   u16 pad ;
   u32 rx_queues ;
   u32 tx_queues ;
};
#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_ether_addr {
   u8 addr[6U] ;
   u8 pad[2U] ;
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_ether_addr_list {
   u16 vsi_id ;
   u16 num_elements ;
   struct virtchnl_ether_addr list[1U] ;
};
#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_vlan_filter_list {
   u16 vsi_id ;
   u16 num_elements ;
   u16 vlan_id[1U] ;
};
#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_promisc_info {
   u16 vsi_id ;
   u16 flags ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_rss_key {
   u16 vsi_id ;
   u16 key_len ;
   u8 key[1U] ;
};
#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_rss_lut {
   u16 vsi_id ;
   u16 lut_entries ;
   u8 lut[1U] ;
};
#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_rss_hena {
   u64 hena ;
};
#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_tc_info {
   u32 num_tc ;
   u32 pad ;
   struct virtchnl_channel_info list[1U] ;
};
#line 580 
enum virtchnl_event_codes {
    VIRTCHNL_EVENT_UNKNOWN = 0,
    VIRTCHNL_EVENT_LINK_CHANGE = 1,
    VIRTCHNL_EVENT_RESET_IMPENDING = 2,
    VIRTCHNL_EVENT_PF_DRIVER_CLOSE = 3
};
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct __anonstruct_link_event_7270 {
   enum virtchnl_link_speed link_speed ;
   bool link_status ;
};
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct __anonstruct_link_event_adv_7271 {
   u32 link_speed ;
   u8 link_status ;
};
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
union __anonunion_event_data_7269 {
   struct __anonstruct_link_event_7270 link_event ;
   struct __anonstruct_link_event_adv_7271 link_event_adv ;
};
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_pf_event {
   enum virtchnl_event_codes event ;
   union __anonunion_event_data_7269 event_data ;
   int severity ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_9060 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_9060 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_9061 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_9061 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_9077 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_9077 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_9081 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_9081 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_9082 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_9083 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_9082 __anonCompField_media_link_90 ;
   union __anonunion_9083 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_9085 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_9084 {
   struct __anonstruct_dev_9085 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_9084 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_9099 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_9100 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_9098 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_9099 i2c ;
   struct __anonstruct_custom_9100 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_9098 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_10001 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_10001 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_4 {
   int arg0 ;
   int signal_pending ;
};
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_iavf_msix_aq_12 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_iavf_driver_14 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_13 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_15 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
  #line 26 
  *remainder = (unsigned int)(dividend % (unsigned long long)divisor);
  #line 27 
  return dividend / (unsigned long long)divisor;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64(u64 dividend, u32 divisor)
{
  #line 125 
  u32 remainder;
  #line 126 
  return div_u64_rem(dividend,divisor,& remainder);
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 15 
#line 15 
void *__memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst, unsigned long *src, unsigned int nbits)
{
  #line 240 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 241 
  __memcpy((void *)dst,(void *)src,(unsigned long)len);
  #line 242 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 90 
#line 90 
extern struct cpumask __cpu_possible_mask;
#line 99 
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read(& __num_online_cpus);
}

#line 247 
#line 247 
unsigned int cpumask_local_spread(unsigned int, int);
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp, struct cpumask *srcp)
{
  #line 593 
  bitmap_copy((unsigned long *)(& dstp->bits),(unsigned long *)(& srcp->bits),nr_cpu_ids);
  #line 594 
  return;
}

#line 877 
#line 877 
extern unsigned long cpu_bit_bitmap[65U][128U];
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static struct cpumask *get_cpu_mask(unsigned int cpu)
{
  #line 881 
  unsigned long *p = (unsigned long *)(& cpu_bit_bitmap[(cpu & 63U) + 1U]);
  #line 882 
  p += - (cpu / 64U);
  #line 883 
  return (struct cpumask *)p;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 607  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 901  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 919  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_spin_lock_bh_cloud_filter_list_lock_of_iavf_adapter(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 647  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 910  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 928  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_spin_unlock_bh_cloud_filter_list_lock_of_iavf_adapter(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 200 
#line 200 
void __wake_up(struct wait_queue_head *, unsigned int, int, void *);
#line 248 
#line 248 
void init_wait_entry(struct wait_queue_entry *, int);
#line 1128 
#line 1128 
long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
#line 1129 
#line 1129 
void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 86 
void mutex_destroy(struct mutex *);
#line 128 
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 450 
#line 450 
bool mod_delayed_work_on(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 496 
#line 357  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 365  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
__inline static bool mod_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 524 
  return mod_delayed_work_on(8192,wq,dwork,delay);
}

#line 612 
#line 937  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 206 
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 209 
#line 209 
void iounmap(void *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 219 
long schedule_timeout(long);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 885  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 893  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 352 
int irq_set_affinity_hint(unsigned int, struct cpumask *);
#line 355 
#line 355 
int irq_set_affinity_notifier(unsigned int, struct irq_affinity_notify *);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 607 
#line 525  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 546  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1083 
int pci_read_config_byte(struct pci_dev *, int, u8 *);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1133 
#line 1133 
int pci_enable_device_mem(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 969  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 977  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/aer.h"
#line 45 
int pci_enable_pcie_error_reporting(struct pci_dev *);
#line 46 
#line 46 
int pci_disable_pcie_error_reporting(struct pci_dev *);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 61 
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
__inline static bool dissector_uses_key(struct flow_dissector *flow_dissector, enum flow_dissector_key_id key_id)
{
  #line 335 
  return (_Bool)((flow_dissector->used_keys & (unsigned int)(1 << (unsigned int)key_id)) != 0U);
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_transport_header(struct sk_buff *skb)
{
  #line 2400 
  return skb->head + (unsigned long)skb->inner_transport_header;
}

#line 2420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_network_header(struct sk_buff *skb)
{
  #line 2422 
  return skb->head + (unsigned long)skb->inner_network_header;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 424 
void __napi_schedule_irqoff(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule_irqoff(struct napi_struct *n)
{
  #line 454 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 455 
                                       __napi_schedule_irqoff(n);
  #line 456 
  return;
}

#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2110 
#line 2110 
void netdev_reset_tc(struct net_device *);
#line 2111 
#line 2111 
int netdev_set_tc_queue(struct net_device *, u8, u16, u16);
#line 2112 
#line 2112 
int netdev_set_num_tc(struct net_device *, u8);
#line 2115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int netdev_get_num_tc(struct net_device *dev)
{
  #line 2117 
  return (int)dev->num_tc;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2669 
#line 2669 
int register_netdevice(struct net_device *);
#line 2679 
#line 953  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4132 
#line 961  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4137 
int __hw_addr_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *), int (*)(struct net_device *, unsigned char *));
#line 4152 
#line 4152 
void __hw_addr_unsync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *));
#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_uc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4192 
  return __hw_addr_sync_dev(& dev->uc,dev,sync,unsync);
}

#line 4202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __dev_uc_unsync(struct net_device *dev, int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4206 
  __hw_addr_unsync_dev(& dev->uc,dev,unsync);
  #line 4207 
  return;
}

#line 4230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_mc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4236 
  return __hw_addr_sync_dev(& dev->mc,dev,sync,unsync);
}

#line 4246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __dev_mc_unsync(struct net_device *dev, int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4250 
  __hw_addr_unsync_dev(& dev->mc,dev,unsync);
  #line 4251 
  return;
}

#line 4371 
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 945  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_random(struct net_device *dev)
{
  #line 265 
  dev->addr_assign_type = (unsigned char)1U;
  #line 266 
  eth_random_addr(dev->dev_addr);
  #line 267 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
#line 75 
void flow_rule_match_basic(struct flow_rule *, struct flow_match_basic *);
#line 77 
#line 77 
void flow_rule_match_control(struct flow_rule *, struct flow_match_control *);
#line 79 
#line 79 
void flow_rule_match_eth_addrs(struct flow_rule *, struct flow_match_eth_addrs *);
#line 81 
#line 81 
void flow_rule_match_vlan(struct flow_rule *, struct flow_match_vlan *);
#line 85 
#line 85 
void flow_rule_match_ipv4_addrs(struct flow_rule *, struct flow_match_ipv4_addrs *);
#line 87 
#line 87 
void flow_rule_match_ipv6_addrs(struct flow_rule *, struct flow_match_ipv6_addrs *);
#line 91 
#line 91 
void flow_rule_match_ports(struct flow_rule *, struct flow_match_ports *);
#line 109 
#line 109 
void flow_rule_match_enc_keyid(struct flow_rule *, struct flow_match_enc_keyid *);
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
__inline static bool flow_rule_match_key(struct flow_rule *rule, enum flow_dissector_key_id key)
{
  #line 253 
  return dissector_uses_key(rule->match.dissector,key);
}

#line 340 
#line 340 
int flow_block_cb_setup_simple(struct flow_block_offload *, struct list_head *, flow_setup_cb_t *, void *, void *, bool);
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
__inline static struct flow_rule *flow_cls_offload_flow_rule(struct flow_cls_offload *flow_cmd)
{
  #line 372 
  return flow_cmd->rule;
}

#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
__inline static int tc_classid_to_hwtc(struct net_device *dev, u32 classid)
{
  #line 619 
  int tmp_0;
  #line 617 
  u32 hwtc = (classid & 65535U) + 4294901792U;
  #line 619 
  ;
  #line 619 
  if ((unsigned int)netdev_get_num_tc(dev) > hwtc) 
                                                   #line 619 
                                                   tmp_0 = (int)hwtc; else 
                                                                    #line 619 
                                                                    tmp_0 = -22;
  #line 619 
  return tmp_0;
}

#line 635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipv6.h"
__inline static bool ipv6_addr_any(struct in6_addr *a)
{
  #line 638 
  unsigned long *ul = (unsigned long *)a;
  #line 640 
  return (_Bool)((*ul | *(ul + 1U)) == 0UL);
}

#line 671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipv6.h"
__inline static bool ipv6_addr_loopback(struct in6_addr *a)
{
  #line 674 
  __be64 *be = (__be64 *)a;
  #line 676 
  return (_Bool)((*be | (*(be + 1U) ^ 72057594037927936ULL)) == 0ULL);
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
__inline static void set_ring_build_skb_enabled(struct iavf_ring *ring)
{
  #line 399 
  ring->flags = (unsigned short)((unsigned int)ring->flags | 2U);
  #line 400 
  return;
}

#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
__inline static void clear_ring_build_skb_enabled(struct iavf_ring *ring)
{
  #line 404 
  ring->flags = (unsigned short)((unsigned int)ring->flags & 65533U);
  #line 405 
  return;
}

#line 439 
#line 439 
bool iavf_alloc_rx_buffers(struct iavf_ring *rx_ring, u16 cleaned_count);
#line 440 
#line 440 
netdev_tx_t iavf_xmit_frame(struct sk_buff *skb, struct net_device *netdev);
#line 443 
#line 443 
int iavf_setup_tx_descriptors(struct iavf_ring *tx_ring);
#line 444 
#line 444 
int iavf_setup_rx_descriptors(struct iavf_ring *rx_ring);
#line 445 
#line 445 
void iavf_free_tx_resources(struct iavf_ring *tx_ring);
#line 446 
#line 446 
void iavf_free_rx_resources(struct iavf_ring *rx_ring);
#line 447 
#line 447 
int iavf_napi_poll(struct napi_struct *napi, int budget);
#line 450 
#line 450 
void iavf_detect_recover_hung(struct iavf_vsi *vsi);
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
char iavf_driver_name[5U];
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
char iavf_driver_version[8U];
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
struct workqueue_struct *iavf_wq;
#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_down(struct iavf_adapter *adapter);
#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 3431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
int iavf_process_config(struct iavf_adapter *adapter);
#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_schedule_reset(struct iavf_adapter *adapter);
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 368 
void iavf_set_ethtool_ops(struct net_device *netdev);
#line 370 
#line 1393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_reset_interrupt_capability(struct iavf_adapter *adapter);
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 1408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
int iavf_init_interrupt_scheme(struct iavf_adapter *adapter);
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_irq_enable_queues(struct iavf_adapter *adapter, u32 mask);
#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_free_all_tx_resources(struct iavf_adapter *adapter);
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 2468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_free_all_rx_resources(struct iavf_adapter *adapter);
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 379 
int iavf_send_api_ver(struct iavf_adapter *adapter);
#line 380 
#line 380 
int iavf_verify_api_ver(struct iavf_adapter *adapter);
#line 381 
#line 381 
int iavf_send_vf_config_msg(struct iavf_adapter *adapter);
#line 382 
#line 382 
int iavf_get_vf_config(struct iavf_adapter *adapter);
#line 383 
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_irq_enable(struct iavf_adapter *adapter, bool flush);
#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 384 
void iavf_configure_queues(struct iavf_adapter *adapter);
#line 386 
#line 386 
void iavf_enable_queues(struct iavf_adapter *adapter);
#line 387 
#line 387 
void iavf_disable_queues(struct iavf_adapter *adapter);
#line 388 
#line 388 
void iavf_map_queues(struct iavf_adapter *adapter);
#line 390 
#line 390 
void iavf_add_ether_addrs(struct iavf_adapter *adapter);
#line 391 
#line 391 
void iavf_del_ether_addrs(struct iavf_adapter *adapter);
#line 392 
#line 392 
void iavf_add_vlans(struct iavf_adapter *adapter);
#line 393 
#line 393 
void iavf_del_vlans(struct iavf_adapter *adapter);
#line 394 
#line 394 
void iavf_set_promiscuous(struct iavf_adapter *adapter, int flags);
#line 395 
#line 395 
void iavf_request_stats(struct iavf_adapter *adapter);
#line 396 
#line 396 
void iavf_request_reset(struct iavf_adapter *adapter);
#line 397 
#line 397 
void iavf_get_hena(struct iavf_adapter *adapter);
#line 398 
#line 398 
void iavf_set_hena(struct iavf_adapter *adapter);
#line 399 
#line 399 
void iavf_set_rss_key(struct iavf_adapter *adapter);
#line 400 
#line 400 
void iavf_set_rss_lut(struct iavf_adapter *adapter);
#line 401 
#line 401 
void iavf_enable_vlan_stripping(struct iavf_adapter *adapter);
#line 402 
#line 402 
void iavf_disable_vlan_stripping(struct iavf_adapter *adapter);
#line 403 
#line 403 
void iavf_virtchnl_completion(struct iavf_adapter *adapter, enum virtchnl_ops v_opcode, enum iavf_status v_retval, u8 *msg, u16 msglen);
#line 406 
#line 1271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
int iavf_config_rss(struct iavf_adapter *adapter);
#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 407 
int iavf_lan_add_device(struct iavf_adapter *adapter);
#line 408 
#line 408 
int iavf_lan_del_device(struct iavf_adapter *adapter);
#line 409 
#line 409 
void iavf_client_subtask(struct iavf_adapter *adapter);
#line 411 
#line 411 
void iavf_notify_client_l2_params(struct iavf_vsi *vsi);
#line 412 
#line 412 
void iavf_notify_client_open(struct iavf_vsi *vsi);
#line 413 
#line 413 
void iavf_notify_client_close(struct iavf_vsi *vsi, bool reset);
#line 414 
#line 414 
void iavf_enable_channels(struct iavf_adapter *adapter);
#line 415 
#line 415 
void iavf_disable_channels(struct iavf_adapter *adapter);
#line 416 
#line 416 
void iavf_add_cloud_filter(struct iavf_adapter *adapter);
#line 417 
#line 417 
void iavf_del_cloud_filter(struct iavf_adapter *adapter);
#line 418 
#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
struct iavf_mac_filter *iavf_add_filter(struct iavf_adapter *adapter, u8 *macaddr);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_alloc.h"
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
enum iavf_status iavf_allocate_dma_mem_d(struct iavf_hw *hw, struct iavf_dma_mem *mem, u64 size, u32 alignment);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_alloc.h"
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
enum iavf_status iavf_free_dma_mem_d(struct iavf_hw *hw, struct iavf_dma_mem *mem);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_alloc.h"
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
enum iavf_status iavf_allocate_virt_mem_d(struct iavf_hw *hw, struct iavf_virt_mem *mem, u32 size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_alloc.h"
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
enum iavf_status iavf_free_virt_mem_d(struct iavf_hw *hw, struct iavf_virt_mem *mem);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_prototype.h"
#line 19 
enum iavf_status iavf_init_adminq(struct iavf_hw *hw);
#line 20 
#line 20 
enum iavf_status iavf_shutdown_adminq(struct iavf_hw *hw);
#line 22 
#line 22 
enum iavf_status iavf_clean_arq_element(struct iavf_hw *hw, struct iavf_arq_event_info *e, u16 *pending);
#line 30 
#line 30 
bool iavf_asq_done(struct iavf_hw *hw);
#line 40 
#line 40 
char *iavf_aq_str(struct iavf_hw *hw, enum iavf_admin_queue_err aq_err);
#line 41 
#line 41 
char *iavf_stat_str(struct iavf_hw *hw, enum iavf_status stat_err);
#line 45 
#line 45 
enum iavf_status iavf_aq_set_rss_lut(struct iavf_hw *hw, u16 vsi_id, bool pf_lut, u8 *lut, u16 lut_size);
#line 49 
#line 49 
enum iavf_status iavf_aq_set_rss_key(struct iavf_hw *hw, u16 vsi_id, struct iavf_aqc_get_set_rss_key_data *key);
#line 52 
#line 52 
enum iavf_status iavf_set_mac_type(struct iavf_hw *hw);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
#line 95 
struct tracepoint __tracepoint_iavf_clean_tx_irq;
#line 103 
#line 103 
struct tracepoint __tracepoint_iavf_clean_tx_irq_unmap;
#line 140 
#line 140 
struct tracepoint __tracepoint_iavf_clean_rx_irq;
#line 148 
#line 148 
struct tracepoint __tracepoint_iavf_clean_rx_irq_rx;
#line 182 
#line 182 
struct tracepoint __tracepoint_iavf_xmit_frame_ring;
#line 189 
#line 189 
struct tracepoint __tracepoint_iavf_xmit_frame_ring_drop;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
static char __tpstrtab_iavf_clean_tx_irq[18U] = {(char)'i', (char)'a', (char)'v', (char)'f', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'n', (char)'_', (char)'t', (char)'x', (char)'_', (char)'i', (char)'r', (char)'q'};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
struct tracepoint __tracepoint_iavf_clean_tx_irq = {.name = (char *)(& __tpstrtab_iavf_clean_tx_irq)};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
static char __tpstrtab_iavf_clean_tx_irq_unmap[24U] = {(char)'i', (char)'a', (char)'v', (char)'f', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'n', (char)'_', (char)'t', (char)'x', (char)'_', (char)'i', (char)'r', (char)'q', (char)'_', (char)'u', (char)'n', (char)'m', (char)'a', (char)'p'};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
struct tracepoint __tracepoint_iavf_clean_tx_irq_unmap = {.name = (char *)(& __tpstrtab_iavf_clean_tx_irq_unmap)};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
static char __tpstrtab_iavf_clean_rx_irq[18U] = {(char)'i', (char)'a', (char)'v', (char)'f', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'n', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'r', (char)'q'};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
struct tracepoint __tracepoint_iavf_clean_rx_irq = {.name = (char *)(& __tpstrtab_iavf_clean_rx_irq)};
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
static char __tpstrtab_iavf_clean_rx_irq_rx[21U] = {(char)'i', (char)'a', (char)'v', (char)'f', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'n', (char)'_', (char)'r', (char)'x', (char)'_', (char)'i', (char)'r', (char)'q', (char)'_', (char)'r', (char)'x'};
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
struct tracepoint __tracepoint_iavf_clean_rx_irq_rx = {.name = (char *)(& __tpstrtab_iavf_clean_rx_irq_rx)};
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
static char __tpstrtab_iavf_xmit_frame_ring[21U] = {(char)'i', (char)'a', (char)'v', (char)'f', (char)'_', (char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'r', (char)'i', (char)'n', (char)'g'};
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
struct tracepoint __tracepoint_iavf_xmit_frame_ring = {.name = (char *)(& __tpstrtab_iavf_xmit_frame_ring)};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
static char __tpstrtab_iavf_xmit_frame_ring_drop[26U] = {(char)'i', (char)'a', (char)'v', (char)'f', (char)'_', (char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
struct tracepoint __tracepoint_iavf_xmit_frame_ring_drop = {.name = (char *)(& __tpstrtab_iavf_xmit_frame_ring_drop)};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
#line 2419 
static int iavf_setup_all_tx_resources(struct iavf_adapter *adapter);
#line 15 
#line 2446 
static int iavf_setup_all_rx_resources(struct iavf_adapter *adapter);
#line 16 
#line 3215 
static int iavf_close(struct net_device *netdev);
#line 17 
#line 1754 
static int iavf_init_get_resources(struct iavf_adapter *adapter);
#line 18 
#line 3408 
static int iavf_check_reset_complete(struct iavf_hw *hw);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
char iavf_driver_name[5U] = {(char)'i', (char)'a', (char)'v', (char)'f'};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static char iavf_driver_string[59U] = {(char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'(', (char)'R', (char)')', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'i', (char)'v', (char)'e', (char)' ', (char)'V', (char)'i', (char)'r', (char)'t', (char)'u', (char)'a', (char)'l', (char)' ', (char)'F', (char)'u', (char)'n', (char)'c', (char)'t', (char)'i', (char)'o', (char)'n', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r'};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
char iavf_driver_version[8U] = {(char)'3'};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static char iavf_copyright[45U] = {(char)'C', (char)'o', (char)'p', (char)'y', (char)'r', (char)'i', (char)'g', (char)'h', (char)'t', (char)' ', (char)'(', (char)'c', (char)')', (char)' ', (char)'2', (char)'0', (char)'1', (char)'3', (char)' ', (char)'-', (char)' ', (char)'2', (char)'0', (char)'1', (char)'8', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)' ', (char)'C', (char)'o', (char)'r', (char)'p', (char)'o', (char)'r', (char)'a', (char)'t', (char)'i', (char)'o', (char)'n', (char)'.'};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static struct pci_device_id iavf_pci_tbl[5U] = {{.vendor = 32902U, .device = 5452U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5489U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 14285U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 6281U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
struct pci_device_id __mod_pci__iavf_pci_tbl_device_table[5U];
#line 62 
#line 3385 
static struct net_device_ops iavf_netdev_ops;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
enum iavf_status iavf_allocate_dma_mem_d(struct iavf_hw *hw, struct iavf_dma_mem *mem, u64 size, u32 alignment)
{
  #line 76 
  struct iavf_adapter *adapter = (struct iavf_adapter *)hw->back;
  #line 78 
  if (mem == (struct iavf_dma_mem *)0) 
                                       #line 79 
                                       return IAVF_ERR_PARAM;
  #line 81 
  mem->size = (((unsigned int)size + alignment) + 4294967295U) & - alignment;
  #line 82 
  mem->va = dma_alloc_coherent(& (adapter->pdev)->dev,(unsigned long)mem->size,& mem->pa,3264U);
  #line 84 
  if (mem->va != (void *)0) 
                            #line 85 
                            return IAVF_SUCCESS; else 
                                                      #line 87 
                                                      return IAVF_ERR_NO_MEMORY;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
enum iavf_status iavf_free_dma_mem_d(struct iavf_hw *hw, struct iavf_dma_mem *mem)
{
  #line 98 
  struct iavf_adapter *adapter = (struct iavf_adapter *)hw->back;
  #line 100 
  if (mem == (struct iavf_dma_mem *)0 || mem->va == (void *)0) 
                                                               #line 101 
                                                               return IAVF_ERR_PARAM;
  #line 102 
  dma_free_coherent(& (adapter->pdev)->dev,(unsigned long)mem->size,mem->va,mem->pa);
  #line 104 
  return IAVF_SUCCESS;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
enum iavf_status iavf_allocate_virt_mem_d(struct iavf_hw *hw, struct iavf_virt_mem *mem, u32 size)
{
  #line 116 
  if (mem == (struct iavf_virt_mem *)0) 
                                        #line 117 
                                        return IAVF_ERR_PARAM;
  #line 119 
  mem->size = size;
  #line 120 
  mem->va = kzalloc((unsigned long)size,3264U);
  #line 122 
  if (mem->va != (void *)0) 
                            #line 123 
                            return IAVF_SUCCESS; else 
                                                      #line 125 
                                                      return IAVF_ERR_NO_MEMORY;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
enum iavf_status iavf_free_virt_mem_d(struct iavf_hw *hw, struct iavf_virt_mem *mem)
{
  #line 136 
  if (mem == (struct iavf_virt_mem *)0) 
                                        #line 137 
                                        return IAVF_ERR_PARAM;
  #line 140 
  kfree(mem->va);
  #line 142 
  return IAVF_SUCCESS;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_schedule_reset(struct iavf_adapter *adapter)
{
  #line 151 
  if (((unsigned long)adapter->flags & 48UL) == 0UL) {
    #line 153 
    adapter->flags |= 32U;
    #line 154 
    cif_queue_work(iavf_wq,& adapter->reset_task);
  }
  #line 156 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_tx_timeout(struct net_device *netdev)
{
  #line 164 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 166 
  (adapter->tx_timeout_count) ++;
  #line 167 
  iavf_schedule_reset(adapter);
  #line 168 
  return;
}

#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_misc_irq_disable(struct iavf_adapter *adapter)
{
  #line 176 
  struct iavf_hw *hw = & adapter->hw;
  #line 178 
  if (adapter->msix_entries == (struct msix_entry *)0) 
                                                       #line 179 
                                                       return;
  #line 181 
  writel(0U,(void *)(hw->hw_addr + 23552U));
  #line 183 
  readl((void *)(hw->hw_addr + 34816U));
  #line 185 
  synchronize_irq((adapter->msix_entries)->vector);
  #line 186 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_misc_irq_enable(struct iavf_adapter *adapter)
{
  #line 194 
  struct iavf_hw *hw = & adapter->hw;
  #line 196 
  writel(25U,(void *)(hw->hw_addr + 23552U));
  #line 198 
  writel(1073741824U,(void *)(hw->hw_addr + 20480U));
  #line 200 
  readl((void *)(hw->hw_addr + 34816U));
  #line 201 
  return;
}

#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_irq_disable(struct iavf_adapter *adapter)
{
  #line 209 
  int i;
  #line 210 
  struct iavf_hw *hw = & adapter->hw;
  #line 212 
  if (adapter->msix_entries == (struct msix_entry *)0) 
                                                       #line 213 
                                                       return;
  #line 215 
  i = 1;
  #line 215 
  while (adapter->num_msix_vectors > i) {
    #line 216 
    writel(0U,(void *)(hw->hw_addr + (unsigned long)((i + 3583) * 4)));
    #line 217 
    synchronize_irq((adapter->msix_entries + (unsigned long)i)->vector);
    #line 215 
    i ++;
  }
  #line 219 
  readl((void *)(hw->hw_addr + 34816U));
  #line 220 
  return;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_irq_enable_queues(struct iavf_adapter *adapter, u32 mask)
{
  #line 230 
  int i;
  #line 229 
  struct iavf_hw *hw = & adapter->hw;
  #line 232 
  i = 1;
  #line 232 
  while (adapter->num_msix_vectors > i) {
    #line 233 
    if ((((unsigned long)mask >> (i + -1)) & 1UL) != 0UL) 
                                                          #line 234 
                                                          writel(25U,(void *)(hw->hw_addr + (unsigned long)((i + 3583) * 4)));
    #line 232 
    i ++;
  }
  #line 235 
  return;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_irq_enable(struct iavf_adapter *adapter, bool flush)
{
  #line 248 
  struct iavf_hw *hw = & adapter->hw;
  #line 250 
  iavf_misc_irq_enable(adapter);
  #line 251 
  iavf_irq_enable_queues(adapter,4294967295U);
  #line 253 
  if ((int)flush != 0) 
                       #line 254 
                       readl((void *)(hw->hw_addr + 34816U));
  #line 255 
  return;
}

#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static irqreturn_t iavf_msix_aq(int irq, void *data)
{
  #line 264 
  struct net_device *netdev = (struct net_device *)data;
  #line 265 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 266 
  struct iavf_hw *hw = & adapter->hw;
  #line 269 
  readl((void *)(hw->hw_addr + 18432U));
  #line 270 
  readl((void *)(hw->hw_addr + 20480U));
  #line 273 
  cif_queue_work(iavf_wq,& adapter->adminq_task);
  #line 275 
  return IRQ_HANDLED;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static irqreturn_t iavf_msix_clean_rings(int irq, void *data)
{
  #line 285 
  struct iavf_q_vector *q_vector = (struct iavf_q_vector *)data;
  #line 287 
  if (q_vector->tx.ring == (struct iavf_ring *)0 && q_vector->rx.ring == (struct iavf_ring *)0) 
    #line 288 
    return IRQ_HANDLED;
  #line 290 
  napi_schedule_irqoff(& q_vector->napi);
  #line 292 
  return IRQ_HANDLED;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_map_vector_to_rxq(struct iavf_adapter *adapter, int v_idx, int r_idx)
{
  #line 304 
  struct iavf_q_vector *q_vector = adapter->q_vectors + (unsigned long)v_idx;
  #line 305 
  struct iavf_ring *rx_ring = adapter->rx_rings + (unsigned long)r_idx;
  #line 306 
  struct iavf_hw *hw = & adapter->hw;
  #line 308 
  rx_ring->q_vector = q_vector;
  #line 309 
  rx_ring->next = q_vector->rx.ring;
  #line 310 
  rx_ring->vsi = & adapter->vsi;
  #line 311 
  q_vector->rx.ring = rx_ring;
  #line 312 
  q_vector->rx.count = (u16)((int)q_vector->rx.count + 1);
  #line 313 
  q_vector->rx.next_update = jiffies + 1UL;
  #line 314 
  q_vector->rx.target_itr = (unsigned short)((unsigned int)rx_ring->itr_setting & 32767U);
  #line 315 
  q_vector->ring_mask |= (unsigned int)(1UL << r_idx);
  #line 316 
  writel((unsigned int)((int)q_vector->rx.current_itr >> 1),(void *)(hw->hw_addr + (unsigned long)(((int)q_vector->reg_idx + 2560) * 4)));
  #line 318 
  q_vector->rx.current_itr = q_vector->rx.target_itr;
  #line 319 
  return;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_map_vector_to_txq(struct iavf_adapter *adapter, int v_idx, int t_idx)
{
  #line 330 
  struct iavf_q_vector *q_vector = adapter->q_vectors + (unsigned long)v_idx;
  #line 331 
  struct iavf_ring *tx_ring = adapter->tx_rings + (unsigned long)t_idx;
  #line 332 
  struct iavf_hw *hw = & adapter->hw;
  #line 334 
  tx_ring->q_vector = q_vector;
  #line 335 
  tx_ring->next = q_vector->tx.ring;
  #line 336 
  tx_ring->vsi = & adapter->vsi;
  #line 337 
  q_vector->tx.ring = tx_ring;
  #line 338 
  q_vector->tx.count = (u16)((int)q_vector->tx.count + 1);
  #line 339 
  q_vector->tx.next_update = jiffies + 1UL;
  #line 340 
  q_vector->tx.target_itr = (unsigned short)((unsigned int)tx_ring->itr_setting & 32767U);
  #line 341 
  q_vector->num_ringpairs = (u8)((int)q_vector->num_ringpairs + 1);
  #line 342 
  writel((unsigned int)((int)q_vector->tx.target_itr >> 1),(void *)(hw->hw_addr + (unsigned long)(((int)q_vector->reg_idx + 2576) * 4)));
  #line 344 
  q_vector->tx.current_itr = q_vector->tx.target_itr;
  #line 345 
  return;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_map_rings_to_vectors(struct iavf_adapter *adapter)
{
  #line 361 
  int q_vectors;
  #line 359 
  int rings_remaining = adapter->num_active_queues;
  #line 360 
  int ridx = 0;
  #line 360 
  int vidx = 0;
  #line 363 
  q_vectors = adapter->num_msix_vectors + -1;
  #line 365 
  while (ridx < rings_remaining) {
    #line 366 
    iavf_map_vector_to_rxq(adapter,vidx,ridx);
    #line 367 
    iavf_map_vector_to_txq(adapter,vidx,ridx);
    #line 372 
    vidx ++;
    #line 372 
    ;
    #line 372 
    if (vidx >= q_vectors) 
                           #line 373 
                           vidx = 0;
    #line 365 
    ridx ++;
  }
  #line 376 
  adapter->aq_required |= 128U;
  #line 377 
  return;
}

#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_irq_affinity_notify(struct irq_affinity_notify *notify, cpumask_t *mask)
{
  #line 391 
  void *__mptr;
  #line 391 
  __mptr = (void *)notify;
  #line 390 
  struct iavf_q_vector *q_vector = ((struct iavf_q_vector *)(__mptr + 18446744073709550072U));
  #line 393 
  cpumask_copy(& q_vector->affinity_mask,mask);
  #line 394 
  return;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_irq_affinity_release(struct kref *ref)
{
  #line 406 
  return;
}

#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_request_traffic_irqs(struct iavf_adapter *adapter, char *basename)
{
  #line 417 
  unsigned int vector;
  #line 417 
  unsigned int q_vectors;
  #line 419 
  int irq_num;
  #line 419 
  int err;
  #line 420 
  int cpu;
  #line 418 
  unsigned int rx_int_idx = 0U;
  #line 418 
  unsigned int tx_int_idx = 0U;
  #line 422 
  iavf_irq_disable(adapter);
  #line 424 
  q_vectors = (unsigned int)(adapter->num_msix_vectors + -1);
  #line 426 
  vector = 0U;
  #line 426 
  while (vector < q_vectors) {
    {
      #line 427 
      struct iavf_q_vector *q_vector = adapter->q_vectors + (unsigned long)vector;
      #line 429 
      irq_num = (int)(adapter->msix_entries + (unsigned long)(vector + 1U))->vector;
      #line 431 
      if (q_vector->tx.ring != (struct iavf_ring *)0 && q_vector->rx.ring != (struct iavf_ring *)0) {
        #line 433 
        unsigned int tmp;
        #line 433 
        tmp = rx_int_idx;
        #line 433 
        rx_int_idx ++;
        #line 432 
        ;
        #line 432 
        ;
        #line 432 
        ;
        #line 432 
        snprintf((char *)(& q_vector->name),31UL,(char *)"iavf-%s-TxRx-%d",basename,tmp);
        #line 434 
        tx_int_idx ++;
      }
      else 
        #line 435 
        if (q_vector->rx.ring != (struct iavf_ring *)0) {
          #line 437 
          unsigned int tmp_0;
          #line 437 
          tmp_0 = rx_int_idx;
          #line 437 
          rx_int_idx ++;
          #line 436 
          ;
          #line 436 
          ;
          #line 436 
          ;
          #line 436 
          snprintf((char *)(& q_vector->name),31UL,(char *)"iavf-%s-rx-%d",basename,tmp_0);
        }
        else 
          #line 438 
          if (q_vector->tx.ring != (struct iavf_ring *)0) {
            #line 440 
            unsigned int tmp_1;
            #line 440 
            tmp_1 = tx_int_idx;
            #line 440 
            tx_int_idx ++;
            #line 439 
            ;
            #line 439 
            ;
            #line 439 
            ;
            #line 439 
            snprintf((char *)(& q_vector->name),31UL,(char *)"iavf-%s-tx-%d",basename,tmp_1);
          }
          else 
               #line 443 
               goto __Cont;
      #line 445 
      err = cif_request_irq((unsigned int)irq_num,& iavf_msix_clean_rings,0UL,(char *)(& q_vector->name),(void *)q_vector);
      #line 450 
      if (err != 0) {
        #line 451 
        _dev_info(& (adapter->pdev)->dev,(char *)"Request_irq failed, error: %d\n",err);
        #line 453 
        goto free_queue_irqs;
      }
      #line 456 
      q_vector->affinity_notify.notify = & iavf_irq_affinity_notify;
      #line 457 
      q_vector->affinity_notify.release = & iavf_irq_affinity_release;
      #line 459 
      irq_set_affinity_notifier((unsigned int)irq_num,& q_vector->affinity_notify);
      #line 464 
      cpu = (int)cpumask_local_spread((unsigned int)q_vector->v_idx,-1);
      #line 465 
      ;
      #line 465 
      irq_set_affinity_hint((unsigned int)irq_num,get_cpu_mask((unsigned int)cpu));
    }
    #line 426 
    __Cont: 
            #line 426 
    vector ++;
  }
  #line 468 
  return 0;
  #line 470 
  free_queue_irqs: 
                   #line 470 
  ;
  #line 471 
  while (vector != 0U) {
    #line 472 
    vector --;
    #line 473 
    irq_num = (int)(adapter->msix_entries + (unsigned long)(vector + 1U))->vector;
    #line 474 
    irq_set_affinity_notifier((unsigned int)irq_num,(struct irq_affinity_notify *)0);
    #line 475 
    irq_set_affinity_hint((unsigned int)irq_num,(struct cpumask *)0);
    #line 476 
    cif_free_irq((unsigned int)irq_num,(void *)(adapter->q_vectors + (unsigned long)vector));
  }
  #line 478 
  return err;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_request_misc_irq(struct iavf_adapter *adapter)
{
  #line 492 
  int err;
  #line 491 
  struct net_device *netdev = adapter->netdev;
  #line 494 
  ;
  #line 494 
  snprintf((char *)(& adapter->misc_vector_name),24UL,(char *)"iavf-%s:mbx",dev_name(& (adapter->pdev)->dev));
  #line 497 
  err = cif_request_irq((adapter->msix_entries)->vector,& iavf_msix_aq,0UL,(char *)(& adapter->misc_vector_name),(void *)netdev);
  #line 500 
  if (err != 0) {
    #line 501 
    _dev_err(& (adapter->pdev)->dev,(char *)"request_irq for %s failed: %d\n",(char *)(& adapter->misc_vector_name),err);
    #line 504 
    cif_free_irq((adapter->msix_entries)->vector,(void *)netdev);
  }
  #line 506 
  return err;
}

#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_free_traffic_irqs(struct iavf_adapter *adapter)
{
  #line 517 
  int vector;
  #line 517 
  int irq_num;
  #line 517 
  int q_vectors;
  #line 519 
  if (adapter->msix_entries == (struct msix_entry *)0) 
                                                       #line 520 
                                                       return;
  #line 522 
  q_vectors = adapter->num_msix_vectors + -1;
  #line 524 
  vector = 0;
  #line 524 
  while (vector < q_vectors) {
    #line 525 
    irq_num = (int)(adapter->msix_entries + ((unsigned long)vector + (unsigned long)1U))->vector;
    #line 526 
    irq_set_affinity_notifier((unsigned int)irq_num,(struct irq_affinity_notify *)0);
    #line 527 
    irq_set_affinity_hint((unsigned int)irq_num,(struct cpumask *)0);
    #line 528 
    cif_free_irq((unsigned int)irq_num,(void *)(adapter->q_vectors + (unsigned long)vector));
    #line 524 
    vector ++;
  }
  #line 530 
  return;
}

#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_free_misc_irq(struct iavf_adapter *adapter)
{
  #line 540 
  struct net_device *netdev = adapter->netdev;
  #line 542 
  if (adapter->msix_entries == (struct msix_entry *)0) 
                                                       #line 543 
                                                       return;
  #line 545 
  cif_free_irq((adapter->msix_entries)->vector,(void *)netdev);
  #line 546 
  return;
}

#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_configure_tx(struct iavf_adapter *adapter)
{
  #line 557 
  int i;
  #line 556 
  struct iavf_hw *hw = & adapter->hw;
  #line 559 
  i = 0;
  #line 559 
  while (adapter->num_active_queues > i) {
    #line 560 
    (adapter->tx_rings + (unsigned long)i)->tail = hw->hw_addr + (unsigned long)(i * 4);
    #line 559 
    i ++;
  }
  #line 561 
  return;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_configure_rx(struct iavf_adapter *adapter)
{
  #line 573 
  int i;
  #line 571 
  unsigned int rx_buf_len = 2048U;
  #line 572 
  struct iavf_hw *hw = & adapter->hw;
  #line 577 
  if (((unsigned long)adapter->flags & 32768UL) == 0UL) {
    #line 578 
    struct net_device *netdev = adapter->netdev;
    #line 584 
    rx_buf_len = 3072U;
    #line 590 
    if (netdev->mtu <= 1500U) 
                              #line 592 
                              rx_buf_len = 1536U;
  }
  #line 596 
  i = 0;
  #line 596 
  while (adapter->num_active_queues > i) {
    #line 597 
    (adapter->rx_rings + (unsigned long)i)->tail = hw->hw_addr + (unsigned long)((i + 2048) * 4);
    #line 598 
    (adapter->rx_rings + (unsigned long)i)->rx_buf_len = (unsigned short)rx_buf_len;
    #line 600 
    if (((unsigned long)adapter->flags & 32768UL) != 0UL) 
                                                          #line 601 
                                                          clear_ring_build_skb_enabled(adapter->rx_rings + (unsigned long)i); else 
                                                                    #line 603 
                                                                    set_ring_build_skb_enabled(adapter->rx_rings + (unsigned long)i);
    #line 596 
    i ++;
  }
  #line 605 
  return;
}

#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static struct iavf_vlan_filter *iavf_find_vlan(struct iavf_adapter *adapter, u16 vlan)
{
  #line 620 
  void *__mptr;
  #line 618 
  struct iavf_vlan_filter *f;
  #line 620 
  __mptr = (void *)adapter->vlan_filter_list.next;
  #line 620 
  f = ((struct iavf_vlan_filter *)__mptr);
  #line 620 
  while (& f->list != & adapter->vlan_filter_list) {
    #line 620 
    void *__mptr_0;
    #line 621 
    if ((int)f->vlan == (int)vlan) 
                                   #line 622 
                                   return f;
    #line 620 
    __mptr_0 = (void *)f->list.next;
    #line 620 
    f = ((struct iavf_vlan_filter *)__mptr_0);
  }
  #line 624 
  return (struct iavf_vlan_filter *)0;
}

#line 635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static struct iavf_vlan_filter *iavf_add_vlan(struct iavf_adapter *adapter, u16 vlan)
{
  #line 637 
  struct iavf_vlan_filter *f = (struct iavf_vlan_filter *)0;
  #line 639 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 641 
  f = iavf_find_vlan(adapter,(unsigned short)((int)vlan));
  #line 642 
  if (f == (struct iavf_vlan_filter *)0) {
    #line 643 
    f = (struct iavf_vlan_filter *)kzalloc(24UL,2592U);
    #line 644 
    if (f == (struct iavf_vlan_filter *)0) 
                                           #line 645 
                                           goto clearout;
    #line 647 
    f->vlan = vlan;
    #line 649 
    list_add_tail(& f->list,& adapter->vlan_filter_list);
    #line 650 
    f->add = (_Bool)1;
    #line 651 
    adapter->aq_required |= 8U;
  }
  #line 654 
  clearout: 
            #line 654 
  ;
  #line 655 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 656 
  return f;
}

#line 664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_del_vlan(struct iavf_adapter *adapter, u16 vlan)
{
  #line 666 
  struct iavf_vlan_filter *f;
  #line 668 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 670 
  f = iavf_find_vlan(adapter,(unsigned short)((int)vlan));
  #line 671 
  if (f != (struct iavf_vlan_filter *)0) {
    #line 672 
    f->remove = (_Bool)1;
    #line 673 
    adapter->aq_required |= 32U;
  }
  #line 676 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 677 
  return;
}

#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 688 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 690 
  if (((adapter->vf_res)->vf_cap_flags & 65536U) == 0U) 
                                                        #line 691 
                                                        return -5;
  #line 692 
  if (iavf_add_vlan(adapter,(unsigned short)((int)vid)) == (struct iavf_vlan_filter *)0) 
    #line 693 
    return -12;
  #line 694 
  return 0;
}

#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 706 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 708 
  if (((adapter->vf_res)->vf_cap_flags & 65536U) != 0U) {
    #line 709 
    iavf_del_vlan(adapter,(unsigned short)((int)vid));
    #line 710 
    return 0;
  }
  #line 712 
  return -5;
}

#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static struct iavf_mac_filter *iavf_find_filter(struct iavf_adapter *adapter, u8 *macaddr)
{
  #line 732 
  void *__mptr;
  #line 727 
  struct iavf_mac_filter *f;
  #line 729 
  if (macaddr == (u8 *)0U) 
                           #line 730 
                           return (struct iavf_mac_filter *)0;
  #line 732 
  __mptr = (void *)adapter->mac_filter_list.next;
  #line 732 
  f = ((struct iavf_mac_filter *)__mptr);
  #line 732 
  while (& f->list != & adapter->mac_filter_list) {
    #line 732 
    void *__mptr_0;
    #line 733 
    if ((int)ether_addr_equal(macaddr,(u8 *)(& f->macaddr)) != 0) 
                                                                  #line 734 
                                                                  return f;
    #line 732 
    __mptr_0 = (void *)f->list.next;
    #line 732 
    f = ((struct iavf_mac_filter *)__mptr_0);
  }
  #line 736 
  return (struct iavf_mac_filter *)0;
}

#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
struct iavf_mac_filter *iavf_add_filter(struct iavf_adapter *adapter, u8 *macaddr)
{
  #line 749 
  struct iavf_mac_filter *f;
  #line 751 
  if (macaddr == (u8 *)0U) 
                           #line 752 
                           return (struct iavf_mac_filter *)0;
  #line 754 
  f = iavf_find_filter(adapter,macaddr);
  #line 755 
  if (f == (struct iavf_mac_filter *)0) {
    #line 756 
    f = (struct iavf_mac_filter *)kzalloc(24UL,2592U);
    #line 757 
    if (f == (struct iavf_mac_filter *)0) 
                                          #line 758 
                                          return f;
    #line 760 
    ether_addr_copy((u8 *)(& f->macaddr),macaddr);
    #line 762 
    list_add_tail(& f->list,& adapter->mac_filter_list);
    #line 763 
    f->add = (_Bool)1;
    #line 764 
    adapter->aq_required |= 4U;
  }
  else 
       #line 766 
       f->remove = (_Bool)0;
  #line 769 
  return f;
}

#line 779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_set_mac(struct net_device *netdev, void *p)
{
  #line 783 
  struct iavf_mac_filter *f;
  #line 808 
  int tmp_2;
  #line 781 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 782 
  struct iavf_hw *hw = & adapter->hw;
  #line 784 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 786 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 787 
                                                      return -99;
  #line 789 
  if ((int)ether_addr_equal(netdev->dev_addr,(u8 *)(& addr->sa_data)) != 0) 
    #line 790 
    return 0;
  #line 792 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 794 
  f = iavf_find_filter(adapter,(u8 *)(& hw->mac.addr));
  #line 795 
  if (f != (struct iavf_mac_filter *)0) {
    #line 796 
    f->remove = (_Bool)1;
    #line 797 
    adapter->aq_required |= 16U;
  }
  #line 800 
  f = iavf_add_filter(adapter,(u8 *)(& addr->sa_data));
  #line 802 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 804 
  if (f != (struct iavf_mac_filter *)0) 
                                        #line 805 
                                        ether_addr_copy((u8 *)(& hw->mac.addr),(u8 *)(& addr->sa_data));
  #line 808 
  if (f == (struct iavf_mac_filter *)0) 
                                        #line 808 
                                        tmp_2 = -12; else 
                                                          #line 808 
                                                          tmp_2 = 0;
  #line 808 
  return tmp_2;
}

#line 819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_addr_sync(struct net_device *netdev, u8 *addr)
{
  #line 821 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 823 
  if (iavf_add_filter(adapter,addr) != (struct iavf_mac_filter *)0) 
                                                                    #line 824 
                                                                    return 0; else 
                                                                    #line 826 
                                                                    return -12;
}

#line 837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_addr_unsync(struct net_device *netdev, u8 *addr)
{
  #line 840 
  struct iavf_mac_filter *f;
  #line 839 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 847 
  if ((int)ether_addr_equal(addr,netdev->dev_addr) != 0) 
                                                         #line 848 
                                                         return 0;
  #line 850 
  f = iavf_find_filter(adapter,addr);
  #line 851 
  if (f != (struct iavf_mac_filter *)0) {
    #line 852 
    f->remove = (_Bool)1;
    #line 853 
    adapter->aq_required |= 16U;
  }
  #line 855 
  return 0;
}

#line 862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_set_rx_mode(struct net_device *netdev)
{
  #line 864 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 866 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 867 
  __dev_uc_sync(netdev,& iavf_addr_sync,& iavf_addr_unsync);
  #line 868 
  __dev_mc_sync(netdev,& iavf_addr_sync,& iavf_addr_unsync);
  #line 869 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 871 
  if ((netdev->flags & 256U) != 0U && ((unsigned long)adapter->flags & 8192UL) == 0UL) 
    #line 873 
    adapter->aq_required |= 32768U;
  else 
    #line 874 
    if ((netdev->flags & 256U) == 0U && ((unsigned long)adapter->flags & 8192UL) != 0UL) 
      #line 876 
      adapter->aq_required |= 65536U;
  #line 878 
  if ((netdev->flags & 512U) != 0U && ((unsigned long)adapter->flags & 16384UL) == 0UL) 
    #line 880 
    adapter->aq_required |= 131072U;
  else 
    #line 881 
    if ((netdev->flags & 512U) == 0U && ((unsigned long)adapter->flags & 16384UL) != 0UL) 
      #line 883 
      adapter->aq_required |= 262144U;
  #line 884 
  return;
}

#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_napi_enable_all(struct iavf_adapter *adapter)
{
  #line 892 
  int q_idx;
  #line 893 
  struct iavf_q_vector *q_vector;
  #line 894 
  int q_vectors = adapter->num_msix_vectors + -1;
  #line 896 
  q_idx = 0;
  #line 896 
  while (q_idx < q_vectors) {
    {
      #line 897 
      struct napi_struct *napi;
      #line 899 
      q_vector = adapter->q_vectors + (unsigned long)q_idx;
      #line 900 
      napi = & q_vector->napi;
      #line 901 
      napi_enable(napi);
    }
    #line 896 
    q_idx ++;
  }
  #line 903 
  return;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_napi_disable_all(struct iavf_adapter *adapter)
{
  #line 911 
  int q_idx;
  #line 912 
  struct iavf_q_vector *q_vector;
  #line 913 
  int q_vectors = adapter->num_msix_vectors + -1;
  #line 915 
  q_idx = 0;
  #line 915 
  while (q_idx < q_vectors) {
    #line 916 
    q_vector = adapter->q_vectors + (unsigned long)q_idx;
    #line 917 
    napi_disable(& q_vector->napi);
    #line 915 
    q_idx ++;
  }
  #line 919 
  return;
}

#line 925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_configure(struct iavf_adapter *adapter)
{
  #line 928 
  int i;
  #line 927 
  struct net_device *netdev = adapter->netdev;
  #line 930 
  iavf_set_rx_mode(netdev);
  #line 932 
  iavf_configure_tx(adapter);
  #line 933 
  iavf_configure_rx(adapter);
  #line 934 
  adapter->aq_required |= 64U;
  #line 936 
  i = 0;
  #line 936 
  while (adapter->num_active_queues > i) {
    {
      #line 939 
      unsigned int tmp;
      #line 937 
      struct iavf_ring *ring = adapter->rx_rings + (unsigned long)i;
      #line 939 
      if ((int)ring->next_to_clean <= (int)ring->next_to_use) 
                                                              #line 939 
                                                              tmp = (unsigned int)ring->count; else 
                                                                    #line 939 
                                                                    tmp = 0U;
      #line 939 
      ;
      #line 939 
      ;
      #line 939 
      iavf_alloc_rx_buffers(ring,(unsigned short)((int)(((tmp + (unsigned int)ring->next_to_clean) - (unsigned int)ring->next_to_use) + 65535U)));
    }
    #line 936 
    i ++;
  }
  #line 941 
  return;
}

#line 949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_up_complete(struct iavf_adapter *adapter)
{
  #line 951 
  adapter->state = __IAVF_RUNNING;
  #line 952 
  cif_clear_bit(0L,(unsigned long *)(& adapter->vsi.state));
  #line 954 
  iavf_napi_enable_all(adapter);
  #line 956 
  adapter->aq_required |= 1U;
  #line 957 
  if (adapter->cinst != (struct iavf_client_instance *)0) 
                                                          #line 958 
                                                          adapter->flags |= 1024U;
  #line 959 
  mod_delayed_work(iavf_wq,& adapter->watchdog_task,0UL);
  #line 960 
  return;
}

#line 968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_down(struct iavf_adapter *adapter)
{
  #line 991 
  void *__mptr;
  #line 1004 
  void *__mptr_3;
  #line 996 
  void *__mptr_1;
  #line 971 
  struct iavf_vlan_filter *vlf;
  #line 972 
  struct iavf_mac_filter *f;
  #line 973 
  struct iavf_cloud_filter *cf;
  #line 970 
  struct net_device *netdev = adapter->netdev;
  #line 975 
  if (adapter->state <= (unsigned int)__IAVF_DOWN_PENDING) 
                                                           #line 976 
                                                           return;
  #line 978 
  netif_carrier_off(netdev);
  #line 979 
  netif_tx_disable(netdev);
  #line 980 
  adapter->link_up = (_Bool)0;
  #line 981 
  iavf_napi_disable_all(adapter);
  #line 982 
  iavf_irq_disable(adapter);
  #line 984 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 987 
  __dev_uc_unsync(adapter->netdev,(int (*)(struct net_device *, unsigned char *))0);
  #line 988 
  __dev_mc_unsync(adapter->netdev,(int (*)(struct net_device *, unsigned char *))0);
  #line 991 
  __mptr = (void *)adapter->mac_filter_list.next;
  #line 991 
  f = ((struct iavf_mac_filter *)__mptr);
  #line 991 
  while (& f->list != & adapter->mac_filter_list) {
    #line 991 
    void *__mptr_0;
    #line 992 
    f->remove = (_Bool)1;
    #line 991 
    __mptr_0 = (void *)f->list.next;
    #line 991 
    f = ((struct iavf_mac_filter *)__mptr_0);
  }
  #line 996 
  __mptr_1 = (void *)adapter->vlan_filter_list.next;
  #line 996 
  vlf = ((struct iavf_vlan_filter *)__mptr_1);
  #line 996 
  while (& vlf->list != & adapter->vlan_filter_list) {
    #line 996 
    void *__mptr_2;
    #line 997 
    vlf->remove = (_Bool)1;
    #line 996 
    __mptr_2 = (void *)vlf->list.next;
    #line 996 
    vlf = ((struct iavf_vlan_filter *)__mptr_2);
  }
  #line 1000 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 1003 
  cif_spin_lock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 1004 
  __mptr_3 = (void *)adapter->cloud_filter_list.next;
  #line 1004 
  cf = ((struct iavf_cloud_filter *)(__mptr_3 + 18446744073709551608U));
  #line 1004 
  while (& cf->list != & adapter->cloud_filter_list) {
    #line 1004 
    void *__mptr_4;
    #line 1005 
    cf->del = (_Bool)1;
    #line 1004 
    __mptr_4 = (void *)cf->list.next;
    #line 1004 
    cf = ((struct iavf_cloud_filter *)(__mptr_4 + 18446744073709551608U));
  }
  #line 1007 
  cif_spin_unlock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 1009 
  if (((unsigned long)adapter->flags & 8UL) == 0UL && adapter->state != (unsigned int)__IAVF_RESETTING) {
    #line 1012 
    adapter->current_op = VIRTCHNL_OP_UNKNOWN;
    #line 1017 
    adapter->aq_required = 16U;
    #line 1018 
    adapter->aq_required |= 32U;
    #line 1019 
    adapter->aq_required |= 16777216U;
    #line 1020 
    adapter->aq_required |= 2U;
  }
  #line 1023 
  mod_delayed_work(iavf_wq,& adapter->watchdog_task,0UL);
  #line 1024 
  return;
}

#line 1036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_acquire_msix_vectors(struct iavf_adapter *adapter, int vectors)
{
  #line 1038 
  int err;
  #line 1038 
  int vector_threshold;
  #line 1045 
  vector_threshold = 2;
  #line 1052 
  err = pci_enable_msix_range(adapter->pdev,adapter->msix_entries,vector_threshold,vectors);
  #line 1054 
  if (err < 0) {
    #line 1055 
    _dev_err(& (adapter->pdev)->dev,(char *)"Unable to allocate MSI-X interrupts\n");
    #line 1056 
    kfree((void *)adapter->msix_entries);
    #line 1057 
    adapter->msix_entries = (struct msix_entry *)0;
    #line 1058 
    return err;
  }
  #line 1065 
  adapter->num_msix_vectors = err;
  #line 1066 
  return 0;
}

#line 1075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_free_queues(struct iavf_adapter *adapter)
{
  #line 1077 
  if (adapter->vsi_res == (struct virtchnl_vsi_resource *)0) 
                                                             #line 1078 
                                                             return;
  #line 1079 
  adapter->num_active_queues = 0;
  #line 1080 
  kfree((void *)adapter->tx_rings);
  #line 1081 
  adapter->tx_rings = (struct iavf_ring *)0;
  #line 1082 
  kfree((void *)adapter->rx_rings);
  #line 1083 
  adapter->rx_rings = (struct iavf_ring *)0;
  #line 1084 
  return;
}

#line 1094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_alloc_queues(struct iavf_adapter *adapter)
{
  #line 1096 
  int i;
  #line 1096 
  int num_active_queues;
  #line 1103 
  if (adapter->num_req_queues != 0) 
                                    #line 1104 
                                    num_active_queues = adapter->num_req_queues;
  else 
    #line 1105 
    if (((adapter->vf_res)->vf_cap_flags & 8388608U) != 0U && (unsigned int)adapter->num_tc != 0U) 
      #line 1107 
      num_active_queues = (int)adapter->ch_config.total_qps;
    else {
      #line 1109 
      int __UNIQUE_ID___x565;
      #line 1109 
      int tmp_0;
      {
        #line 1109 
        __UNIQUE_ID___x565 = (int)(adapter->vsi_res)->num_queue_pairs;
        #line 1109 
        int __UNIQUE_ID___y566 = (int)num_online_cpus();
        #line 1109 
        if (__UNIQUE_ID___x565 < __UNIQUE_ID___y566) 
                                                     #line 1109 
                                                     tmp_0 = __UNIQUE_ID___x565; else 
                                                                    #line 1109 
                                                                    tmp_0 = __UNIQUE_ID___y566;
        }
      #line 1109 
      num_active_queues = tmp_0;
    }
  #line 1114 
  adapter->tx_rings = (struct iavf_ring *)kcalloc((unsigned long)num_active_queues,4096UL,3264U);
  #line 1116 
  if (adapter->tx_rings == (struct iavf_ring *)0) 
                                                  #line 1117 
                                                  goto err_out;
  #line 1118 
  adapter->rx_rings = (struct iavf_ring *)kcalloc((unsigned long)num_active_queues,4096UL,3264U);
  #line 1120 
  if (adapter->rx_rings == (struct iavf_ring *)0) 
                                                  #line 1121 
                                                  goto err_out;
  #line 1123 
  i = 0;
  #line 1123 
  while (i < num_active_queues) {
    {
      #line 1124 
      struct iavf_ring *tx_ring;
      #line 1125 
      struct iavf_ring *rx_ring;
      #line 1127 
      tx_ring = adapter->tx_rings + (unsigned long)i;
      #line 1129 
      tx_ring->queue_index = (unsigned short)i;
      #line 1130 
      tx_ring->netdev = adapter->netdev;
      #line 1131 
      tx_ring->dev = & (adapter->pdev)->dev;
      #line 1132 
      tx_ring->count = (unsigned short)adapter->tx_desc_count;
      #line 1133 
      tx_ring->itr_setting = (unsigned short)32818U;
      #line 1134 
      if (((unsigned long)adapter->flags & 64UL) != 0UL) 
                                                         #line 1135 
                                                         tx_ring->flags = (unsigned short)((unsigned int)tx_ring->flags | 1U);
      #line 1137 
      rx_ring = adapter->rx_rings + (unsigned long)i;
      #line 1138 
      rx_ring->queue_index = (unsigned short)i;
      #line 1139 
      rx_ring->netdev = adapter->netdev;
      #line 1140 
      rx_ring->dev = & (adapter->pdev)->dev;
      #line 1141 
      rx_ring->count = (unsigned short)adapter->rx_desc_count;
      #line 1142 
      rx_ring->itr_setting = (unsigned short)32818U;
    }
    #line 1123 
    i ++;
  }
  #line 1145 
  adapter->num_active_queues = num_active_queues;
  #line 1147 
  return 0;
  #line 1149 
  err_out: 
           #line 1149 
  ;
  #line 1150 
  iavf_free_queues(adapter);
  #line 1151 
  return -12;
}

#line 1161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_set_interrupt_capability(struct iavf_adapter *adapter)
{
  #line 1178 
  int __UNIQUE_ID___x567;
  #line 1178 
  int tmp;
  #line 1163 
  int vector;
  #line 1163 
  int v_budget;
  #line 1164 
  int pairs = 0;
  #line 1165 
  int err = 0;
  #line 1167 
  if (adapter->vsi_res == (struct virtchnl_vsi_resource *)0) {
    #line 1168 
    err = -5;
    #line 1169 
    goto out;
  }
  #line 1171 
  pairs = adapter->num_active_queues;
  {
    #line 1178 
    __UNIQUE_ID___x567 = pairs + 1;
    #line 1178 
    int __UNIQUE_ID___y568 = (int)(adapter->vf_res)->max_vectors;
    #line 1178 
    if (__UNIQUE_ID___x567 < __UNIQUE_ID___y568) 
                                                 #line 1178 
                                                 tmp = __UNIQUE_ID___x567; else 
                                                                    #line 1178 
                                                                    tmp = __UNIQUE_ID___y568;
    }
  #line 1178 
  v_budget = tmp;
  #line 1181 
  adapter->msix_entries = (struct msix_entry *)kcalloc((unsigned long)v_budget,8UL,3264U);
  #line 1183 
  if (adapter->msix_entries == (struct msix_entry *)0) {
    #line 1184 
    err = -12;
    #line 1185 
    goto out;
  }
  #line 1188 
  vector = 0;
  #line 1188 
  while (vector < v_budget) {
    #line 1189 
    (adapter->msix_entries + (unsigned long)vector)->entry = (unsigned short)vector;
    #line 1188 
    vector ++;
  }
  #line 1191 
  err = iavf_acquire_msix_vectors(adapter,v_budget);
  #line 1193 
  out: 
       #line 1193 
  ;
  #line 1194 
  netif_set_real_num_rx_queues(adapter->netdev,(unsigned int)pairs);
  #line 1195 
  netif_set_real_num_tx_queues(adapter->netdev,(unsigned int)pairs);
  #line 1196 
  return err;
}

#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_config_rss_aq(struct iavf_adapter *adapter)
{
  #line 1207 
  struct iavf_aqc_get_set_rss_key_data *rss_key = (struct iavf_aqc_get_set_rss_key_data *)adapter->rss_key;
  #line 1209 
  struct iavf_hw *hw = & adapter->hw;
  #line 1210 
  int ret = 0;
  #line 1212 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 1214 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot configure RSS, command %d pending\n",(unsigned int)adapter->current_op);
    #line 1216 
    return -16;
  }
  #line 1219 
  ret = (int)iavf_aq_set_rss_key(hw,(unsigned short)((int)adapter->vsi.id),rss_key);
  #line 1220 
  if (ret != 0) {
    #line 1221 
    ;
    #line 1221 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot set RSS key, err %s aq_err %s\n",iavf_stat_str(hw,(enum iavf_status)ret),iavf_aq_str(hw,hw->aq.asq_last_status));
    #line 1224 
    return ret;
  }
  #line 1228 
  ret = (int)iavf_aq_set_rss_lut(hw,(unsigned short)((int)adapter->vsi.id),
                            (_Bool)0,adapter->rss_lut,
                            (unsigned short)((int)adapter->rss_lut_size));
  #line 1230 
  if (ret != 0) {
    #line 1231 
    ;
    #line 1231 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot set RSS lut, err %s aq_err %s\n",iavf_stat_str(hw,(enum iavf_status)ret),iavf_aq_str(hw,hw->aq.asq_last_status));
  }
  #line 1236 
  return ret;
}

#line 1246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_config_rss_reg(struct iavf_adapter *adapter)
{
  #line 1249 
  u32 *dw;
  #line 1250 
  u16 i;
  #line 1248 
  struct iavf_hw *hw = & adapter->hw;
  #line 1252 
  dw = (u32 *)adapter->rss_key;
  #line 1253 
  i = (unsigned short)0U;
  #line 1253 
  while ((unsigned int)adapter->rss_key_size / 4U >= (unsigned int)i) {
    #line 1254 
    writel(*(dw + (unsigned long)i),(void *)(hw->hw_addr + (unsigned long)(((int)i + 13056) * 4)));
    #line 1253 
    i = (u16)((int)i + 1);
  }
  #line 1256 
  dw = (u32 *)adapter->rss_lut;
  #line 1257 
  i = (unsigned short)0U;
  #line 1257 
  while ((unsigned int)adapter->rss_lut_size / 4U >= (unsigned int)i) {
    #line 1258 
    writel(*(dw + (unsigned long)i),(void *)(hw->hw_addr + (unsigned long)(((int)i + 13312) * 4)));
    #line 1257 
    i = (u16)((int)i + 1);
  }
  #line 1260 
  readl((void *)(hw->hw_addr + 34816U));
  #line 1262 
  return 0;
}

#line 1271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
int iavf_config_rss(struct iavf_adapter *adapter)
{
  #line 1274 
  if (((adapter->vf_res)->vf_cap_flags & 524288U) != 0U) {
    #line 1275 
    adapter->aq_required |= 24576U;
    #line 1277 
    return 0;
  }
  else 
    #line 1278 
    if (((adapter->vf_res)->vf_cap_flags & 8U) != 0U) {
      #line 1279 
      return iavf_config_rss_aq(adapter);
    }
    else {
      #line 1281 
      return iavf_config_rss_reg(adapter);
    }
}

#line 1289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_fill_rss_lut(struct iavf_adapter *adapter)
{
  #line 1291 
  u16 i;
  #line 1293 
  i = (unsigned short)0U;
  #line 1293 
  while ((int)adapter->rss_lut_size > (int)i) {
    #line 1294 
    *(adapter->rss_lut + (unsigned long)i) = (unsigned char)((int)i % adapter->num_active_queues);
    #line 1293 
    i = (u16)((int)i + 1);
  }
  #line 1295 
  return;
}

#line 1303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_init_rss(struct iavf_adapter *adapter)
{
  #line 1306 
  int ret;
  #line 1305 
  struct iavf_hw *hw = & adapter->hw;
  #line 1308 
  if (((adapter->vf_res)->vf_cap_flags & 524288U) == 0U) {
    #line 1310 
    if (((adapter->vf_res)->vf_cap_flags & 262144U) != 0U) 
                                                           #line 1312 
                                                           adapter->hena = 9223512361489399808ULL; else 
                                                                    #line 1314 
                                                                    adapter->hena = 9223506308269867008ULL;
    #line 1316 
    writel((unsigned int)adapter->hena,(void *)(hw->hw_addr + 50176U));
    #line 1317 
    writel((unsigned int)(adapter->hena >> 32),(void *)(hw->hw_addr + 50180U));
  }
  #line 1320 
  iavf_fill_rss_lut(adapter);
  #line 1321 
  netdev_rss_key_fill((void *)adapter->rss_key,(unsigned long)adapter->rss_key_size);
  #line 1322 
  ret = iavf_config_rss(adapter);
  #line 1324 
  return ret;
}

#line 1334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_alloc_q_vectors(struct iavf_adapter *adapter)
{
  #line 1336 
  int num_q_vectors;
  #line 1337 
  struct iavf_q_vector *q_vector;
  #line 1336 
  int q_idx = 0;
  #line 1339 
  num_q_vectors = adapter->num_msix_vectors + -1;
  #line 1340 
  adapter->q_vectors = (struct iavf_q_vector *)kcalloc((unsigned long)num_q_vectors,1648UL,3264U);
  #line 1342 
  if (adapter->q_vectors == (struct iavf_q_vector *)0) 
                                                       #line 1343 
                                                       return -12;
  #line 1345 
  q_idx = 0;
  #line 1345 
  while (q_idx < num_q_vectors) {
    #line 1346 
    q_vector = adapter->q_vectors + (unsigned long)q_idx;
    #line 1347 
    q_vector->adapter = adapter;
    #line 1348 
    q_vector->vsi = & adapter->vsi;
    #line 1349 
    q_vector->v_idx = (unsigned short)q_idx;
    #line 1350 
    q_vector->reg_idx = (unsigned short)q_idx;
    #line 1351 
    cpumask_copy(& q_vector->affinity_mask,& __cpu_possible_mask);
    #line 1352 
    netif_napi_add(adapter->netdev,& q_vector->napi,& iavf_napi_poll,64);
    #line 1345 
    q_idx ++;
  }
  #line 1356 
  return 0;
}

#line 1367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_free_q_vectors(struct iavf_adapter *adapter)
{
  #line 1369 
  int q_idx;
  #line 1369 
  int num_q_vectors;
  #line 1370 
  int napi_vectors;
  #line 1372 
  if (adapter->q_vectors == (struct iavf_q_vector *)0) 
                                                       #line 1373 
                                                       return;
  #line 1375 
  num_q_vectors = adapter->num_msix_vectors + -1;
  #line 1376 
  napi_vectors = adapter->num_active_queues;
  #line 1378 
  q_idx = 0;
  #line 1378 
  while (q_idx < num_q_vectors) {
    {
      #line 1379 
      struct iavf_q_vector *q_vector = adapter->q_vectors + (unsigned long)q_idx;
      #line 1381 
      if (q_idx < napi_vectors) 
                                #line 1382 
                                netif_napi_del(& q_vector->napi);
    }
    #line 1378 
    q_idx ++;
  }
  #line 1384 
  kfree((void *)adapter->q_vectors);
  #line 1385 
  adapter->q_vectors = (struct iavf_q_vector *)0;
  #line 1386 
  return;
}

#line 1393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_reset_interrupt_capability(struct iavf_adapter *adapter)
{
  #line 1395 
  if (adapter->msix_entries == (struct msix_entry *)0) 
                                                       #line 1396 
                                                       return;
  #line 1398 
  pci_disable_msix(adapter->pdev);
  #line 1399 
  kfree((void *)adapter->msix_entries);
  #line 1400 
  adapter->msix_entries = (struct msix_entry *)0;
  #line 1401 
  return;
}

#line 1408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
int iavf_init_interrupt_scheme(struct iavf_adapter *adapter)
{
  #line 1410 
  int err;
  #line 1445 
  char *tmp;
  #line 1412 
  err = iavf_alloc_queues(adapter);
  #line 1413 
  if (err != 0) {
    #line 1414 
    _dev_err(& (adapter->pdev)->dev,(char *)"Unable to allocate memory for queues\n");
    #line 1416 
    goto err_alloc_queues;
  }
  #line 1419 
  rtnl_lock();
  #line 1420 
  err = iavf_set_interrupt_capability(adapter);
  #line 1421 
  rtnl_unlock();
  #line 1422 
  if (err != 0) {
    #line 1423 
    _dev_err(& (adapter->pdev)->dev,(char *)"Unable to setup interrupt capabilities\n");
    #line 1425 
    goto err_set_interrupt;
  }
  #line 1428 
  err = iavf_alloc_q_vectors(adapter);
  #line 1429 
  if (err != 0) {
    #line 1430 
    _dev_err(& (adapter->pdev)->dev,(char *)"Unable to allocate memory for queue vectors\n");
    #line 1432 
    goto err_alloc_q_vectors;
  }
  #line 1440 
  if (((adapter->vf_res)->vf_cap_flags & 8388608U) != 0U && (unsigned int)adapter->num_tc != 0U) 
    #line 1442 
    _dev_info(& (adapter->pdev)->dev,(char *)"ADq Enabled, %u TCs created",(int)adapter->num_tc);
  #line 1445 
  ;
  #line 1445 
  if (adapter->num_active_queues > 1) 
                                      #line 1445 
                                      tmp = (char *)"Enabled"; else 
                                                                    #line 1445 
                                                                    tmp = (char *)"Disabled";
  #line 1445 
  ;
  #line 1445 
  _dev_info(& (adapter->pdev)->dev,(char *)"Multiqueue %s: Queue pair count = %u",tmp,adapter->num_active_queues);
  #line 1449 
  return 0;
  #line 1450 
  err_alloc_q_vectors: 
                       #line 1450 
  ;
  #line 1451 
  iavf_reset_interrupt_capability(adapter);
  #line 1452 
  err_set_interrupt: 
                     #line 1452 
  ;
  #line 1453 
  iavf_free_queues(adapter);
  #line 1454 
  err_alloc_queues: 
                    #line 1454 
  ;
  #line 1455 
  return err;
}

#line 1462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_free_rss(struct iavf_adapter *adapter)
{
  #line 1464 
  kfree((void *)adapter->rss_key);
  #line 1465 
  adapter->rss_key = (u8 *)0U;
  #line 1467 
  kfree((void *)adapter->rss_lut);
  #line 1468 
  adapter->rss_lut = (u8 *)0U;
  #line 1469 
  return;
}

#line 1477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_reinit_interrupt_scheme(struct iavf_adapter *adapter)
{
  #line 1480 
  int err;
  #line 1479 
  struct net_device *netdev = adapter->netdev;
  #line 1482 
  if ((int)netif_running(netdev) != 0) 
                                       #line 1483 
                                       iavf_free_traffic_irqs(adapter);
  #line 1484 
  iavf_free_misc_irq(adapter);
  #line 1485 
  iavf_reset_interrupt_capability(adapter);
  #line 1486 
  iavf_free_q_vectors(adapter);
  #line 1487 
  iavf_free_queues(adapter);
  #line 1489 
  err = iavf_init_interrupt_scheme(adapter);
  #line 1490 
  if (err != 0) 
                #line 1491 
                goto err;
  #line 1493 
  netif_tx_stop_all_queues(netdev);
  #line 1495 
  err = iavf_request_misc_irq(adapter);
  #line 1496 
  if (err != 0) 
                #line 1497 
                goto err;
  #line 1499 
  cif_set_bit(0L,(unsigned long *)(& adapter->vsi.state));
  #line 1501 
  iavf_map_rings_to_vectors(adapter);
  #line 1503 
  if (((adapter->vf_res)->vf_cap_flags & 8U) != 0U) 
                                                    #line 1504 
                                                    adapter->aq_required |= 512U; else 
                                                                    #line 1506 
                                                                    err = iavf_init_rss(adapter);
  #line 1507 
  err: 
       #line 1507 
  ;
  #line 1508 
  return err;
}

#line 1520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_process_aq_command(struct iavf_adapter *adapter)
{
  #line 1522 
  if (((unsigned long)adapter->aq_required & 1024UL) != 0UL) {
    #line 1523 
    return iavf_send_vf_config_msg(adapter);
  }
  #line 1524 
  if (((unsigned long)adapter->aq_required & 2UL) != 0UL) {
    #line 1525 
    iavf_disable_queues(adapter);
    #line 1526 
    return 0;
  }
  #line 1529 
  if (((unsigned long)adapter->aq_required & 128UL) != 0UL) {
    #line 1530 
    iavf_map_queues(adapter);
    #line 1531 
    return 0;
  }
  #line 1534 
  if (((unsigned long)adapter->aq_required & 4UL) != 0UL) {
    #line 1535 
    iavf_add_ether_addrs(adapter);
    #line 1536 
    return 0;
  }
  #line 1539 
  if (((unsigned long)adapter->aq_required & 8UL) != 0UL) {
    #line 1540 
    iavf_add_vlans(adapter);
    #line 1541 
    return 0;
  }
  #line 1544 
  if (((unsigned long)adapter->aq_required & 16UL) != 0UL) {
    #line 1545 
    iavf_del_ether_addrs(adapter);
    #line 1546 
    return 0;
  }
  #line 1549 
  if (((unsigned long)adapter->aq_required & 32UL) != 0UL) {
    #line 1550 
    iavf_del_vlans(adapter);
    #line 1551 
    return 0;
  }
  #line 1554 
  if (((unsigned long)adapter->aq_required & 524288UL) != 0UL) {
    #line 1555 
    iavf_enable_vlan_stripping(adapter);
    #line 1556 
    return 0;
  }
  #line 1559 
  if (((unsigned long)adapter->aq_required & 1048576UL) != 0UL) {
    #line 1560 
    iavf_disable_vlan_stripping(adapter);
    #line 1561 
    return 0;
  }
  #line 1564 
  if (((unsigned long)adapter->aq_required & 64UL) != 0UL) {
    #line 1565 
    iavf_configure_queues(adapter);
    #line 1566 
    return 0;
  }
  #line 1569 
  if (((unsigned long)adapter->aq_required & 1UL) != 0UL) {
    #line 1570 
    iavf_enable_queues(adapter);
    #line 1571 
    return 0;
  }
  #line 1574 
  if (((unsigned long)adapter->aq_required & 512UL) != 0UL) {
    #line 1579 
    adapter->aq_required &= 4294966783U;
    #line 1580 
    return 0;
  }
  #line 1582 
  if (((unsigned long)adapter->aq_required & 2048UL) != 0UL) {
    #line 1583 
    iavf_get_hena(adapter);
    #line 1584 
    return 0;
  }
  #line 1586 
  if (((unsigned long)adapter->aq_required & 4096UL) != 0UL) {
    #line 1587 
    iavf_set_hena(adapter);
    #line 1588 
    return 0;
  }
  #line 1590 
  if (((unsigned long)adapter->aq_required & 8192UL) != 0UL) {
    #line 1591 
    iavf_set_rss_key(adapter);
    #line 1592 
    return 0;
  }
  #line 1594 
  if (((unsigned long)adapter->aq_required & 16384UL) != 0UL) {
    #line 1595 
    iavf_set_rss_lut(adapter);
    #line 1596 
    return 0;
  }
  #line 1599 
  if (((unsigned long)adapter->aq_required & 32768UL) != 0UL) {
    #line 1600 
    iavf_set_promiscuous(adapter,3);
    #line 1602 
    return 0;
  }
  #line 1605 
  if (((unsigned long)adapter->aq_required & 131072UL) != 0UL) {
    #line 1606 
    iavf_set_promiscuous(adapter,2);
    #line 1607 
    return 0;
  }
  #line 1610 
  if (((unsigned long)adapter->aq_required & 65536UL) != 0UL && ((unsigned long)adapter->aq_required & 262144UL) != 0UL) {
    #line 1612 
    iavf_set_promiscuous(adapter,0);
    #line 1613 
    return 0;
  }
  #line 1616 
  if (((unsigned long)adapter->aq_required & 2097152UL) != 0UL) {
    #line 1617 
    iavf_enable_channels(adapter);
    #line 1618 
    return 0;
  }
  #line 1621 
  if (((unsigned long)adapter->aq_required & 4194304UL) != 0UL) {
    #line 1622 
    iavf_disable_channels(adapter);
    #line 1623 
    return 0;
  }
  #line 1625 
  if (((unsigned long)adapter->aq_required & 8388608UL) != 0UL) {
    #line 1626 
    iavf_add_cloud_filter(adapter);
    #line 1627 
    return 0;
  }
  #line 1630 
  if (((unsigned long)adapter->aq_required & 16777216UL) != 0UL) {
    #line 1631 
    iavf_del_cloud_filter(adapter);
    #line 1632 
    return 0;
  }
  #line 1634 
  if (((unsigned long)adapter->aq_required & 16777216UL) != 0UL) {
    #line 1635 
    iavf_del_cloud_filter(adapter);
    #line 1636 
    return 0;
  }
  #line 1638 
  if (((unsigned long)adapter->aq_required & 8388608UL) != 0UL) {
    #line 1639 
    iavf_add_cloud_filter(adapter);
    #line 1640 
    return 0;
  }
  #line 1642 
  return -11;
}

#line 1653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_startup(struct iavf_adapter *adapter)
{
  #line 1657 
  int err;
  #line 1655 
  struct pci_dev *pdev = adapter->pdev;
  #line 1656 
  struct iavf_hw *hw = & adapter->hw;
  {
    #line 1659 
    int __ret_warn_on = adapter->state != (unsigned int)__IAVF_STARTUP;
    #line 1659 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1660 
      ldv_inline_asm();
      #line 1661 
      ldv_inline_asm();
    }
    #line 1659 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 1662 
  adapter->flags &= 4294967287U;
  #line 1663 
  adapter->flags &= 4294967279U;
  #line 1664 
  err = (int)iavf_set_mac_type(hw);
  #line 1665 
  if (err != 0) {
    #line 1666 
    _dev_err(& pdev->dev,(char *)"Failed to set MAC type (%d)\n",err);
    #line 1667 
    goto err;
  }
  #line 1670 
  err = iavf_check_reset_complete(hw);
  #line 1671 
  if (err != 0) {
    #line 1672 
    _dev_info(& pdev->dev,(char *)"Device is still in reset (%d), retrying\n",err);
    #line 1674 
    goto err;
  }
  #line 1676 
  hw->aq.num_arq_entries = (unsigned short)32U;
  #line 1677 
  hw->aq.num_asq_entries = (unsigned short)32U;
  #line 1678 
  hw->aq.arq_buf_size = (unsigned short)4096U;
  #line 1679 
  hw->aq.asq_buf_size = (unsigned short)4096U;
  #line 1681 
  err = (int)iavf_init_adminq(hw);
  #line 1682 
  if (err != 0) {
    #line 1683 
    _dev_err(& pdev->dev,(char *)"Failed to init Admin Queue (%d)\n",err);
    #line 1684 
    goto err;
  }
  #line 1686 
  err = iavf_send_api_ver(adapter);
  #line 1687 
  if (err != 0) {
    #line 1688 
    _dev_err(& pdev->dev,(char *)"Unable to send to PF (%d)\n",err);
    #line 1689 
    iavf_shutdown_adminq(hw);
    #line 1690 
    goto err;
  }
  #line 1692 
  adapter->state = __IAVF_INIT_VERSION_CHECK;
  #line 1693 
  err: 
       #line 1693 
  ;
  #line 1694 
  return err;
}

#line 1705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_init_version_check(struct iavf_adapter *adapter)
{
  #line 1707 
  struct pci_dev *pdev = adapter->pdev;
  #line 1708 
  struct iavf_hw *hw = & adapter->hw;
  #line 1709 
  int err = -11;
  {
    #line 1711 
    int __ret_warn_on = adapter->state != (unsigned int)__IAVF_INIT_VERSION_CHECK;
    #line 1711 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1712 
      ldv_inline_asm();
      #line 1713 
      ldv_inline_asm();
    }
    #line 1711 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 1713 
  if (! iavf_asq_done(hw)) {
    #line 1714 
    _dev_err(& pdev->dev,(char *)"Admin queue command never completed\n");
    #line 1715 
    iavf_shutdown_adminq(hw);
    #line 1716 
    adapter->state = __IAVF_STARTUP;
    #line 1717 
    goto err;
  }
  #line 1721 
  err = iavf_verify_api_ver(adapter);
  #line 1722 
  if (err != 0) {
    #line 1723 
    if (err == -57) 
                    #line 1724 
                    err = iavf_send_api_ver(adapter); else 
                                                           #line 1726 
                                                           _dev_err(& pdev->dev,(char *)"Unsupported PF API version %d.%d, expected %d.%d\n",adapter->pf_version.major,adapter->pf_version.minor,1,1);
    #line 1731 
    goto err;
  }
  #line 1733 
  err = iavf_send_vf_config_msg(adapter);
  #line 1734 
  if (err != 0) {
    #line 1735 
    _dev_err(& pdev->dev,(char *)"Unable to send config request (%d)\n",err);
    #line 1737 
    goto err;
  }
  #line 1739 
  adapter->state = __IAVF_INIT_GET_RESOURCES;
  #line 1741 
  err: 
       #line 1741 
  ;
  #line 1742 
  return err;
}

#line 1754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_init_get_resources(struct iavf_adapter *adapter)
{
  #line 1759 
  int bufsz;
  #line 1756 
  struct net_device *netdev = adapter->netdev;
  #line 1757 
  struct pci_dev *pdev = adapter->pdev;
  #line 1758 
  struct iavf_hw *hw = & adapter->hw;
  #line 1759 
  int err = 0;
  {
    #line 1761 
    int __ret_warn_on = adapter->state != (unsigned int)__IAVF_INIT_GET_RESOURCES;
    #line 1761 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1762 
      ldv_inline_asm();
      #line 1763 
      ldv_inline_asm();
    }
    #line 1761 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 1763 
  if (adapter->vf_res == (struct virtchnl_vf_resource *)0) {
    #line 1764 
    bufsz = 84;
    #line 1767 
    adapter->vf_res = (struct virtchnl_vf_resource *)kzalloc((unsigned long)bufsz,3264U);
    #line 1768 
    if (adapter->vf_res == (struct virtchnl_vf_resource *)0) 
                                                             #line 1769 
                                                             goto err;
  }
  #line 1771 
  err = iavf_get_vf_config(adapter);
  #line 1772 
  if (err == -57) {
    #line 1773 
    err = iavf_send_vf_config_msg(adapter);
    #line 1774 
    goto err;
  }
  else 
    #line 1775 
    if (err == -5) {
      #line 1780 
      iavf_shutdown_adminq(hw);
      #line 1781 
      _dev_err(& pdev->dev,(char *)"Unable to get VF config due to PF error condition, not retrying\n");
      #line 1782 
      return 0;
    }
  #line 1784 
  if (err != 0) {
    #line 1785 
    _dev_err(& pdev->dev,(char *)"Unable to get VF config (%d)\n",err);
    #line 1786 
    goto err_alloc;
  }
  #line 1789 
  if (iavf_process_config(adapter) != 0) 
                                         #line 1790 
                                         goto err_alloc;
  #line 1791 
  adapter->current_op = VIRTCHNL_OP_UNKNOWN;
  #line 1793 
  adapter->flags |= 1U;
  #line 1795 
  netdev->netdev_ops = & iavf_netdev_ops;
  #line 1796 
  iavf_set_ethtool_ops(netdev);
  #line 1797 
  netdev->watchdog_timeo = 1250;
  #line 1800 
  netdev->min_mtu = 68U;
  #line 1801 
  netdev->max_mtu = 9702U;
  #line 1803 
  if (is_valid_ether_addr((u8 *)(& adapter->hw.mac.addr))) {
    #line 1809 
    ether_addr_copy(netdev->dev_addr,(u8 *)(& adapter->hw.mac.addr));
    #line 1810 
    ether_addr_copy((u8 *)(& netdev->perm_addr),(u8 *)(& adapter->hw.mac.addr));
  }
  else {
    #line 1804 
    _dev_info(& pdev->dev,(char *)"Invalid MAC address %pM, using random\n",(u8 *)(& adapter->hw.mac.addr));
    #line 1806 
    eth_hw_addr_random(netdev);
    #line 1807 
    ether_addr_copy((u8 *)(& adapter->hw.mac.addr),netdev->dev_addr);
  }
  #line 1813 
  adapter->tx_desc_count = 512U;
  #line 1814 
  adapter->rx_desc_count = 512U;
  #line 1815 
  err = iavf_init_interrupt_scheme(adapter);
  #line 1816 
  if (err != 0) 
                #line 1817 
                goto err_sw_init;
  #line 1818 
  iavf_map_rings_to_vectors(adapter);
  #line 1819 
  if (((adapter->vf_res)->vf_cap_flags & 32U) != 0U) 
                                                     #line 1821 
                                                     adapter->flags |= 64U;
  #line 1823 
  err = iavf_request_misc_irq(adapter);
  #line 1824 
  if (err != 0) 
                #line 1825 
                goto err_sw_init;
  #line 1827 
  netif_carrier_off(netdev);
  #line 1828 
  adapter->link_up = (_Bool)0;
  #line 1833 
  rtnl_lock();
  #line 1834 
  if (! adapter->netdev_registered) {
    #line 1835 
    err = register_netdevice(netdev);
    #line 1836 
    if (err != 0) {
      #line 1837 
      rtnl_unlock();
      #line 1838 
      goto err_register;
    }
  }
  #line 1842 
  adapter->netdev_registered = (_Bool)1;
  #line 1844 
  netif_tx_stop_all_queues(netdev);
  #line 1845 
  if (adapter->vf_res != (struct virtchnl_vf_resource *)0 && ((adapter->vf_res)->vf_cap_flags & 2U) != 0U) {
    #line 1846 
    err = iavf_lan_add_device(adapter);
    #line 1847 
    if (err != 0) {
      #line 1848 
      rtnl_unlock();
      #line 1849 
      _dev_info(& pdev->dev,(char *)"Failed to add VF to client API service list: %d\n",err);
    }
  }
  #line 1853 
  _dev_info(& pdev->dev,(char *)"MAC address: %pM\n",(u8 *)(& adapter->hw.mac.addr));
  #line 1854 
  if ((netdev->features & 16384ULL) != 0ULL) 
                                             #line 1855 
                                             _dev_info(& pdev->dev,(char *)"GRO is enabled\n");
  #line 1857 
  adapter->state = __IAVF_DOWN;
  #line 1858 
  cif_set_bit(0L,(unsigned long *)(& adapter->vsi.state));
  #line 1859 
  rtnl_unlock();
  #line 1861 
  iavf_misc_irq_enable(adapter);
  #line 1862 
  __wake_up(& adapter->down_waitqueue,3U,1,(void *)0);
  #line 1864 
  adapter->rss_key = (u8 *)kzalloc((unsigned long)adapter->rss_key_size,3264U);
  #line 1865 
  adapter->rss_lut = (u8 *)kzalloc((unsigned long)adapter->rss_lut_size,3264U);
  #line 1866 
  if (adapter->rss_key == (u8 *)0U || adapter->rss_lut == (u8 *)0U) 
                                                                    #line 1867 
                                                                    goto err_mem;
  #line 1868 
  if (((adapter->vf_res)->vf_cap_flags & 8U) != 0U) 
                                                    #line 1869 
                                                    adapter->aq_required |= 512U; else 
                                                                    #line 1871 
                                                                    iavf_init_rss(adapter);
  #line 1873 
  return err;
  #line 1874 
  err_mem: 
           #line 1874 
  ;
  #line 1875 
  iavf_free_rss(adapter);
  #line 1876 
  err_register: 
                #line 1876 
  ;
  #line 1877 
  iavf_free_misc_irq(adapter);
  #line 1878 
  err_sw_init: 
               #line 1878 
  ;
  #line 1879 
  iavf_reset_interrupt_capability(adapter);
  #line 1880 
  err_alloc: 
             #line 1880 
  ;
  #line 1881 
  kfree((void *)adapter->vf_res);
  #line 1882 
  adapter->vf_res = (struct virtchnl_vf_resource *)0;
  #line 1883 
  err: 
       #line 1883 
  ;
  #line 1884 
  return err;
}

#line 1891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_watchdog_task(struct work_struct *work)
{
  #line 1893 
  void *__mptr;
  #line 1897 
  u32 reg_val;
  #line 1893 
  __mptr = (void *)work;
  #line 1893 
  struct iavf_adapter *adapter = ((struct iavf_adapter *)(__mptr + 18446744073709550072U));
  #line 1896 
  struct iavf_hw *hw = & adapter->hw;
  #line 1899 
  if ((int)test_and_set_bit(0L,& adapter->crit_section) != 0) 
                                                              #line 1900 
                                                              goto restart_watchdog;
  #line 1902 
  if (((unsigned long)adapter->flags & 8UL) != 0UL) 
                                                    #line 1903 
                                                    adapter->state = __IAVF_COMM_FAILED;
  #line 1905 
  switch ((unsigned int)adapter->state) {
    #line 1906 
    case (unsigned int)6: 
                          #line 1906 
    ;
    #line 1907 
    reg_val = readl((void *)(hw->hw_addr + 34816U)) & 3U;
    #line 1909 
    if (reg_val + 4294967295U <= 1U) {
      #line 1912 
      _dev_err(& (adapter->pdev)->dev,(char *)"Hardware came out of reset. Attempting reinit.\n");
      #line 1914 
      adapter->state = __IAVF_STARTUP;
      #line 1915 
      adapter->flags &= 4294967287U;
      #line 1916 
      cif_queue_delayed_work(iavf_wq,& adapter->init_task,10UL);
      #line 1917 
      cif_clear_bit(0L,& adapter->crit_section);
      #line 1924 
      return;
    }
    #line 1926 
    adapter->aq_required = 0U;
    #line 1927 
    adapter->current_op = VIRTCHNL_OP_UNKNOWN;
    #line 1928 
    cif_clear_bit(0L,& adapter->crit_section);
    #line 1930 
    ;
    #line 1930 
    ;
    #line 1930 
    cif_queue_delayed_work(iavf_wq,& adapter->watchdog_task,msecs_to_jiffies(10U));
    #line 1933 
    goto watchdog_done;
    #line 1934 
    case (unsigned int)5: 
                          #line 1934 
    ;
    #line 1935 
    cif_clear_bit(0L,& adapter->crit_section);
    #line 1936 
    cif_queue_delayed_work(iavf_wq,& adapter->watchdog_task,500UL);
    #line 1937 
    return;
    #line 1938 
    case (unsigned int)7: 
                          #line 1938 
    ;
    #line 1939 
    case (unsigned int)8: 
                          #line 1939 
    ;
    #line 1940 
    case (unsigned int)9: 
                          #line 1940 
    ;
    #line 1941 
    case (unsigned int)10: 
                           #line 1941 
    ;
    #line 1942 
    if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
      #line 1943 
      if (! iavf_asq_done(hw)) {
        {
          #line 1944 
          bool branch;
          #line 1944 
          struct _ddebug __UNIQUE_ID_ddebug572 = {.modname = (char *)"iavf", .function = (char *)"iavf_watchdog_task", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c", .format = (char *)"Admin queue timeout\n", .lineno = (unsigned int)1944U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1944 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug572.key.dd_key_false.key,(_Bool)0);
          #line 1944 
          if ((long)((long)((int)branch != 0)) != 0L) 
                                                      #line 1944 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug572,& (adapter->pdev)->dev,(char *)"Admin queue timeout\n");
        }
        #line 1946 
        iavf_send_api_ver(adapter);
      }
    }
    else {
      #line 1949 
      if (iavf_process_aq_command(adapter) == 0) 
        #line 1949 
        if (adapter->state == (unsigned int)__IAVF_RUNNING) 
                                                            #line 1951 
                                                            iavf_request_stats(adapter);
    }
    #line 1953 
    break;
    #line 1954 
    case (unsigned int)1: 
                          #line 1954 
    ;
    #line 1955 
    cif_clear_bit(0L,& adapter->crit_section);
    #line 1956 
    return;
    #line 1957 
    default: 
             #line 1957 
    ;
    #line 1958 
    goto restart_watchdog;
  }
  #line 1962 
  reg_val = readl((void *)(hw->hw_addr + 32768U)) & 2147483648U;
  #line 1963 
  if (reg_val == 0U) {
    #line 1964 
    adapter->state = __IAVF_RESETTING;
    #line 1965 
    adapter->flags |= 16U;
    #line 1966 
    adapter->aq_required = 0U;
    #line 1967 
    adapter->current_op = VIRTCHNL_OP_UNKNOWN;
    #line 1968 
    _dev_err(& (adapter->pdev)->dev,(char *)"Hardware reset detected\n");
    #line 1969 
    cif_queue_work(iavf_wq,& adapter->reset_task);
    #line 1970 
    goto watchdog_done;
  }
  #line 1973 
  ;
  #line 1973 
  cif_schedule_delayed_work(& adapter->client_task,msecs_to_jiffies(5U));
  #line 1974 
  watchdog_done: 
                 #line 1974 
  ;
  #line 1975 
  if (adapter->state == (unsigned int)__IAVF_RUNNING || adapter->state == (unsigned int)__IAVF_COMM_FAILED) 
    #line 1977 
    iavf_detect_recover_hung(& adapter->vsi);
  #line 1978 
  cif_clear_bit(0L,& adapter->crit_section);
  #line 1979 
  restart_watchdog: 
                    #line 1979 
  ;
  #line 1980 
  if (adapter->aq_required != 0U) {
    #line 1981 
    ;
    #line 1981 
    ;
    #line 1981 
    cif_queue_delayed_work(iavf_wq,& adapter->watchdog_task,msecs_to_jiffies(20U));
  }
  else 
       #line 1984 
       cif_queue_delayed_work(iavf_wq,& adapter->watchdog_task,500UL);
  #line 1985 
  cif_queue_work(iavf_wq,& adapter->adminq_task);
  #line 1986 
  return;
}

#line 1988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_disable_vf(struct iavf_adapter *adapter)
{
  #line 2028 
  void *__mptr_5;
  #line 2020 
  void *__mptr_2;
  #line 2015 
  void *__mptr;
  #line 2028 
  void *__mptr_6;
  #line 2020 
  void *__mptr_3;
  #line 2015 
  void *__mptr_0;
  #line 1990 
  struct iavf_mac_filter *f;
  #line 1990 
  struct iavf_mac_filter *ftmp;
  #line 1991 
  struct iavf_vlan_filter *fv;
  #line 1991 
  struct iavf_vlan_filter *fvtmp;
  #line 1992 
  struct iavf_cloud_filter *cf;
  #line 1992 
  struct iavf_cloud_filter *cftmp;
  #line 1994 
  adapter->flags |= 8U;
  #line 2000 
  if (adapter->state == (unsigned int)__IAVF_RUNNING) {
    #line 2001 
    cif_set_bit(0L,(unsigned long *)(& adapter->vsi.state));
    #line 2002 
    netif_carrier_off(adapter->netdev);
    #line 2003 
    netif_tx_disable(adapter->netdev);
    #line 2004 
    adapter->link_up = (_Bool)0;
    #line 2005 
    iavf_napi_disable_all(adapter);
    #line 2006 
    iavf_irq_disable(adapter);
    #line 2007 
    iavf_free_traffic_irqs(adapter);
    #line 2008 
    iavf_free_all_tx_resources(adapter);
    #line 2009 
    iavf_free_all_rx_resources(adapter);
  }
  #line 2012 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 2015 
  __mptr = (void *)adapter->mac_filter_list.next;
  #line 2015 
  f = ((struct iavf_mac_filter *)__mptr);
  #line 2015 
  __mptr_0 = (void *)f->list.next;
  #line 2016 
  ftmp = ((struct iavf_mac_filter *)__mptr_0);
  #line 2015 
  while (& f->list != & adapter->mac_filter_list) {
    #line 2015 
    void *__mptr_1;
    #line 2016 
    list_del(& f->list);
    #line 2017 
    kfree((void *)f);
    #line 2015 
    f = ftmp;
    #line 2015 
    __mptr_1 = (void *)ftmp->list.next;
    #line 2015 
    ftmp = ((struct iavf_mac_filter *)__mptr_1);
  }
  #line 2020 
  __mptr_2 = (void *)adapter->vlan_filter_list.next;
  #line 2020 
  fv = ((struct iavf_vlan_filter *)__mptr_2);
  #line 2020 
  __mptr_3 = (void *)fv->list.next;
  #line 2021 
  fvtmp = ((struct iavf_vlan_filter *)__mptr_3);
  #line 2020 
  while (& fv->list != & adapter->vlan_filter_list) {
    #line 2020 
    void *__mptr_4;
    #line 2021 
    list_del(& fv->list);
    #line 2022 
    kfree((void *)fv);
    #line 2020 
    fv = fvtmp;
    #line 2020 
    __mptr_4 = (void *)fvtmp->list.next;
    #line 2020 
    fvtmp = ((struct iavf_vlan_filter *)__mptr_4);
  }
  #line 2025 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 2027 
  cif_spin_lock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 2028 
  __mptr_5 = (void *)adapter->cloud_filter_list.next;
  #line 2028 
  cf = ((struct iavf_cloud_filter *)(__mptr_5 + 18446744073709551608U));
  #line 2028 
  __mptr_6 = (void *)cf->list.next;
  #line 2029 
  cftmp = ((struct iavf_cloud_filter *)(__mptr_6 + 18446744073709551608U));
  #line 2028 
  while (& cf->list != & adapter->cloud_filter_list) {
    #line 2028 
    void *__mptr_7;
    #line 2029 
    list_del(& cf->list);
    #line 2030 
    kfree((void *)cf);
    #line 2031 
    adapter->num_cloud_filters = (u16)((int)adapter->num_cloud_filters - 1);
    #line 2028 
    cf = cftmp;
    #line 2028 
    __mptr_7 = (void *)cftmp->list.next;
    #line 2028 
    cftmp = ((struct iavf_cloud_filter *)(__mptr_7 + 18446744073709551608U));
  }
  #line 2033 
  cif_spin_unlock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 2035 
  iavf_free_misc_irq(adapter);
  #line 2036 
  iavf_reset_interrupt_capability(adapter);
  #line 2037 
  iavf_free_queues(adapter);
  #line 2038 
  iavf_free_q_vectors(adapter);
  #line 2039 
  kfree((void *)adapter->vf_res);
  #line 2040 
  iavf_shutdown_adminq(& adapter->hw);
  #line 2041 
  (adapter->netdev)->flags &= 4294967294U;
  #line 2042 
  cif_clear_bit(0L,& adapter->crit_section);
  #line 2043 
  adapter->flags &= 4294967279U;
  #line 2044 
  adapter->state = __IAVF_DOWN;
  #line 2045 
  __wake_up(& adapter->down_waitqueue,3U,1,(void *)0);
  #line 2046 
  _dev_info(& (adapter->pdev)->dev,(char *)"Reset task did not complete, VF disabled\n");
  #line 2047 
  return;
}

#line 2059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_reset_task(struct work_struct *work)
{
  #line 2198 
  void *__mptr_5;
  #line 2061 
  void *__mptr;
  #line 2194 
  void *__mptr_3;
  #line 2187 
  void *__mptr_0;
  #line 2187 
  void *__mptr_1;
  #line 2067 
  struct iavf_mac_filter *f;
  #line 2067 
  struct iavf_mac_filter *ftmp;
  #line 2068 
  struct iavf_vlan_filter *vlf;
  #line 2069 
  struct iavf_cloud_filter *cf;
  #line 2070 
  u32 reg_val;
  #line 2071 
  int err;
  #line 2072 
  bool running;
  #line 2061 
  __mptr = (void *)work;
  #line 2061 
  struct iavf_adapter *adapter = ((struct iavf_adapter *)__mptr);
  #line 2064 
  struct virtchnl_vf_resource *vfres = adapter->vf_res;
  #line 2065 
  struct net_device *netdev = adapter->netdev;
  #line 2066 
  struct iavf_hw *hw = & adapter->hw;
  #line 2071 
  int i = 0;
  #line 2077 
  if ((int)test_bit(2L,& adapter->crit_section) != 0) 
                                                      #line 2078 
                                                      return;
  #line 2080 
  while (1) {
    #line 2080 
    if (! ((int)test_and_set_bit(1L,& adapter->crit_section) != 0)) 
                                                                    #line 2080 
                                                                    break;
    #line 2082 
    usleep_range(500UL,1000UL);
  }
  #line 2083 
  if (adapter->cinst != (struct iavf_client_instance *)0) {
    #line 2084 
    adapter->flags &= 4294959615U;
    #line 2088 
    cancel_delayed_work_sync(& adapter->client_task);
    #line 2089 
    iavf_notify_client_close(& adapter->vsi,(_Bool)1);
  }
  #line 2091 
  iavf_misc_irq_disable(adapter);
  #line 2092 
  if (((unsigned long)adapter->flags & 32UL) != 0UL) {
    #line 2093 
    adapter->flags &= 4294967263U;
    #line 2097 
    iavf_shutdown_adminq(hw);
    #line 2098 
    iavf_init_adminq(hw);
    #line 2099 
    iavf_request_reset(adapter);
  }
  #line 2101 
  adapter->flags |= 16U;
  #line 2104 
  i = 0;
  #line 2104 
  while (i <= 499) {
    {
      #line 2105 
      reg_val = readl((void *)(hw->hw_addr + 32768U)) & 2147483648U;
      #line 2107 
      if (reg_val == 0U) 
                         #line 2108 
                         break;
      #line 2109 
      usleep_range(5000UL,10000UL);
    }
    #line 2104 
    i ++;
  }
  #line 2111 
  if (i == 500) {
    #line 2112 
    _dev_info(& (adapter->pdev)->dev,(char *)"Never saw reset\n");
    #line 2113 
    goto continue_reset;
  }
  #line 2117 
  i = 0;
  #line 2117 
  while (i <= 499) {
    {
      #line 2119 
      msleep(10U);
      #line 2121 
      reg_val = readl((void *)(hw->hw_addr + 34816U)) & 3U;
      #line 2123 
      if (reg_val == 2U) 
                         #line 2124 
                         break;
    }
    #line 2117 
    i ++;
  }
  #line 2127 
  pci_set_master(adapter->pdev);
  #line 2129 
  if (i == 500) {
    #line 2130 
    _dev_err(& (adapter->pdev)->dev,(char *)"Reset never finished (%x)\n",reg_val);
    #line 2132 
    iavf_disable_vf(adapter);
    #line 2133 
    cif_clear_bit(1L,& adapter->crit_section);
    #line 2134 
    return;
  }
  #line 2137 
  continue_reset: 
                  #line 2137 
  ;
  #line 2142 
  running = (_Bool)((adapter->state == (unsigned int)__IAVF_RUNNING || adapter->state == (unsigned int)__IAVF_RESETTING) != 0);
  #line 2145 
  if ((int)running != 0) {
    #line 2146 
    netif_carrier_off(netdev);
    #line 2147 
    netif_tx_stop_all_queues(netdev);
    #line 2148 
    adapter->link_up = (_Bool)0;
    #line 2149 
    iavf_napi_disable_all(adapter);
  }
  #line 2151 
  iavf_irq_disable(adapter);
  #line 2153 
  adapter->state = __IAVF_RESETTING;
  #line 2154 
  adapter->flags &= 4294967279U;
  #line 2159 
  iavf_free_all_rx_resources(adapter);
  #line 2160 
  iavf_free_all_tx_resources(adapter);
  #line 2162 
  adapter->flags |= 131072U;
  #line 2164 
  iavf_shutdown_adminq(hw);
  #line 2165 
  adapter->current_op = VIRTCHNL_OP_UNKNOWN;
  #line 2166 
  err = (int)iavf_init_adminq(hw);
  #line 2167 
  if (err != 0) 
                #line 2168 
                _dev_info(& (adapter->pdev)->dev,(char *)"Failed to init adminq: %d\n",err);
  #line 2170 
  adapter->aq_required = 0U;
  #line 2172 
  if (((unsigned long)adapter->flags & 65536UL) != 0UL) {
    #line 2173 
    err = iavf_reinit_interrupt_scheme(adapter);
    #line 2174 
    if (err != 0) 
                  #line 2175 
                  goto reset_err;
  }
  #line 2178 
  adapter->aq_required |= 1024U;
  #line 2179 
  adapter->aq_required |= 128U;
  #line 2181 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 2187 
  __mptr_0 = (void *)adapter->mac_filter_list.next;
  #line 2187 
  f = ((struct iavf_mac_filter *)__mptr_0);
  #line 2187 
  __mptr_1 = (void *)f->list.next;
  #line 2188 
  ftmp = ((struct iavf_mac_filter *)__mptr_1);
  #line 2187 
  while (& f->list != & adapter->mac_filter_list) {
    #line 2187 
    void *__mptr_2;
    #line 2188 
    if ((int)ether_addr_equal((u8 *)(& f->macaddr),(u8 *)(& adapter->hw.mac.addr)) != 0) {
      #line 2189 
      list_del(& f->list);
      #line 2190 
      kfree((void *)f);
    }
    #line 2187 
    f = ftmp;
    #line 2187 
    __mptr_2 = (void *)ftmp->list.next;
    #line 2187 
    ftmp = ((struct iavf_mac_filter *)__mptr_2);
  }
  #line 2194 
  __mptr_3 = (void *)adapter->mac_filter_list.next;
  #line 2194 
  f = ((struct iavf_mac_filter *)__mptr_3);
  #line 2194 
  while (& f->list != & adapter->mac_filter_list) {
    #line 2194 
    void *__mptr_4;
    #line 2195 
    f->add = (_Bool)1;
    #line 2194 
    __mptr_4 = (void *)f->list.next;
    #line 2194 
    f = ((struct iavf_mac_filter *)__mptr_4);
  }
  #line 2198 
  __mptr_5 = (void *)adapter->vlan_filter_list.next;
  #line 2198 
  vlf = ((struct iavf_vlan_filter *)__mptr_5);
  #line 2198 
  while (& vlf->list != & adapter->vlan_filter_list) {
    #line 2198 
    void *__mptr_6;
    #line 2199 
    vlf->add = (_Bool)1;
    #line 2198 
    __mptr_6 = (void *)vlf->list.next;
    #line 2198 
    vlf = ((struct iavf_vlan_filter *)__mptr_6);
  }
  #line 2202 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 2205 
  cif_spin_lock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 2206 
  if ((vfres->vf_cap_flags & 8388608U) != 0U && (unsigned int)adapter->num_tc != 0U) {
    #line 2208 
    void *__mptr_7;
    #line 2208 
    __mptr_7 = (void *)adapter->cloud_filter_list.next;
    #line 2208 
    cf = ((struct iavf_cloud_filter *)(__mptr_7 + 18446744073709551608U));
    #line 2208 
    while (& cf->list != & adapter->cloud_filter_list) {
      #line 2208 
      void *__mptr_8;
      #line 2209 
      cf->add = (_Bool)1;
      #line 2208 
      __mptr_8 = (void *)cf->list.next;
      #line 2208 
      cf = ((struct iavf_cloud_filter *)(__mptr_8 + 18446744073709551608U));
    }
  }
  #line 2212 
  cif_spin_unlock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 2214 
  adapter->aq_required |= 4U;
  #line 2215 
  adapter->aq_required |= 8U;
  #line 2216 
  adapter->aq_required |= 8388608U;
  #line 2217 
  iavf_misc_irq_enable(adapter);
  #line 2219 
  mod_delayed_work(iavf_wq,& adapter->watchdog_task,2UL);
  #line 2224 
  if ((int)running != 0) {
    #line 2226 
    err = iavf_setup_all_tx_resources(adapter);
    #line 2227 
    if (err != 0) 
                  #line 2228 
                  goto reset_err;
    #line 2231 
    err = iavf_setup_all_rx_resources(adapter);
    #line 2232 
    if (err != 0) 
                  #line 2233 
                  goto reset_err;
    #line 2235 
    if (((unsigned long)adapter->flags & 65536UL) != 0UL) {
      #line 2236 
      err = iavf_request_traffic_irqs(adapter,(char *)(& netdev->name));
      #line 2237 
      if (err != 0) 
                    #line 2238 
                    goto reset_err;
      #line 2240 
      adapter->flags &= 4294901759U;
    }
    #line 2243 
    iavf_configure(adapter);
    #line 2245 
    iavf_up_complete(adapter);
    #line 2247 
    iavf_irq_enable(adapter,(_Bool)1);
  }
  else {
    #line 2249 
    adapter->state = __IAVF_DOWN;
    #line 2250 
    __wake_up(& adapter->down_waitqueue,3U,1,(void *)0);
  }
  #line 2252 
  cif_clear_bit(1L,& adapter->crit_section);
  #line 2253 
  cif_clear_bit(0L,& adapter->crit_section);
  #line 2255 
  return;
  #line 2256 
  reset_err: 
             #line 2256 
  ;
  #line 2257 
  cif_clear_bit(1L,& adapter->crit_section);
  #line 2258 
  cif_clear_bit(0L,& adapter->crit_section);
  #line 2259 
  _dev_err(& (adapter->pdev)->dev,(char *)"failed to allocate resources during reinit\n");
  #line 2260 
  iavf_close(netdev);
  #line 2261 
  return;
}

#line 2267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_adminq_task(struct work_struct *work)
{
  #line 2270 
  void *__mptr;
  #line 2272 
  struct iavf_arq_event_info event;
  #line 2273 
  enum virtchnl_ops v_op;
  #line 2274 
  enum iavf_status ret;
  #line 2274 
  enum iavf_status v_ret;
  #line 2275 
  u32 val;
  #line 2275 
  u32 oldval;
  #line 2276 
  u16 pending;
  #line 2270 
  __mptr = (void *)work;
  #line 2269 
  struct iavf_adapter *adapter = ((struct iavf_adapter *)(__mptr + 18446744073709551536U));
  #line 2271 
  struct iavf_hw *hw = & adapter->hw;
  #line 2278 
  if (((unsigned long)adapter->flags & 8UL) != 0UL) 
                                                    #line 2279 
                                                    goto out;
  #line 2281 
  event.buf_len = (unsigned short)4096U;
  #line 2282 
  event.msg_buf = (u8 *)kzalloc((unsigned long)event.buf_len,3264U);
  #line 2283 
  if (event.msg_buf == (u8 *)0U) 
                                 #line 2284 
                                 goto out;
  #line 2286 
  while (1) {
    #line 2287 
    ret = iavf_clean_arq_element(hw,& event,& pending);
    #line 2288 
    v_op = (enum virtchnl_ops)event.desc.cookie_high;
    #line 2289 
    v_ret = (enum iavf_status)event.desc.cookie_low;
    #line 2291 
    if (ret != IAVF_SUCCESS || v_op == (unsigned int)VIRTCHNL_OP_UNKNOWN) 
      #line 2292 
      break;
    #line 2294 
    iavf_virtchnl_completion(adapter,v_op,v_ret,event.msg_buf,(unsigned short)((int)event.msg_len));
    #line 2296 
    if ((unsigned int)pending != 0U) 
                                     #line 2297 
                                     memset((void *)event.msg_buf,0,4096UL);
    #line 2298 
    if (! ((unsigned int)pending != 0U)) 
                                         #line 2286 
                                         break;
  }
  #line 2300 
  if (((unsigned long)adapter->flags & 48UL) != 0UL || adapter->state == (unsigned int)__IAVF_RESETTING) 
    #line 2303 
    goto freedom;
  #line 2306 
  val = readl((void *)(hw->hw_addr + (unsigned long)hw->aq.arq.len));
  #line 2307 
  if (val == 3735928559U) 
                          #line 2308 
                          goto freedom;
  #line 2309 
  oldval = val;
  #line 2310 
  if ((val & 268435456U) != 0U) {
    #line 2311 
    _dev_info(& (adapter->pdev)->dev,(char *)"ARQ VF Error detected\n");
    #line 2312 
    val &= 4026531839U;
  }
  #line 2314 
  if ((val & 536870912U) != 0U) {
    #line 2315 
    _dev_info(& (adapter->pdev)->dev,(char *)"ARQ Overflow Error detected\n");
    #line 2316 
    val &= 3758096383U;
  }
  #line 2318 
  if ((val & 1073741824U) != 0U) {
    #line 2319 
    _dev_info(& (adapter->pdev)->dev,(char *)"ARQ Critical Error detected\n");
    #line 2320 
    val &= 3221225471U;
  }
  #line 2322 
  if (oldval != val) 
                     #line 2323 
                     writel(val,(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.len));
  #line 2325 
  val = readl((void *)(hw->hw_addr + (unsigned long)hw->aq.asq.len));
  #line 2326 
  oldval = val;
  #line 2327 
  if ((val & 268435456U) != 0U) {
    #line 2328 
    _dev_info(& (adapter->pdev)->dev,(char *)"ASQ VF Error detected\n");
    #line 2329 
    val &= 4026531839U;
  }
  #line 2331 
  if ((val & 536870912U) != 0U) {
    #line 2332 
    _dev_info(& (adapter->pdev)->dev,(char *)"ASQ Overflow Error detected\n");
    #line 2333 
    val &= 3758096383U;
  }
  #line 2335 
  if ((val & 1073741824U) != 0U) {
    #line 2336 
    _dev_info(& (adapter->pdev)->dev,(char *)"ASQ Critical Error detected\n");
    #line 2337 
    val &= 3221225471U;
  }
  #line 2339 
  if (oldval != val) 
                     #line 2340 
                     writel(val,(void *)(hw->hw_addr + (unsigned long)hw->aq.asq.len));
  #line 2342 
  freedom: 
           #line 2342 
  ;
  #line 2343 
  kfree((void *)event.msg_buf);
  #line 2344 
  out: 
       #line 2344 
  ;
  #line 2346 
  iavf_misc_irq_enable(adapter);
  #line 2347 
  return;
}

#line 2356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_client_task(struct work_struct *work)
{
  #line 2359 
  void *__mptr;
  #line 2359 
  __mptr = (void *)work;
  #line 2358 
  struct iavf_adapter *adapter = ((struct iavf_adapter *)(__mptr + 18446744073709551456U));
  #line 2365 
  if ((int)test_and_set_bit(1L,& adapter->crit_section) != 0) 
                                                              #line 2366 
                                                              return;
  #line 2368 
  if (((unsigned long)adapter->flags & 512UL) != 0UL) {
    #line 2369 
    iavf_client_subtask(adapter);
    #line 2370 
    adapter->flags &= 4294966783U;
    #line 2371 
    goto out;
  }
  #line 2373 
  if (((unsigned long)adapter->flags & 4096UL) != 0UL) {
    #line 2374 
    iavf_notify_client_l2_params(& adapter->vsi);
    #line 2375 
    adapter->flags &= 4294963199U;
    #line 2376 
    goto out;
  }
  #line 2378 
  if (((unsigned long)adapter->flags & 2048UL) != 0UL) {
    #line 2379 
    iavf_notify_client_close(& adapter->vsi,(_Bool)0);
    #line 2380 
    adapter->flags &= 4294965247U;
    #line 2381 
    goto out;
  }
  #line 2383 
  if (((unsigned long)adapter->flags & 1024UL) != 0UL) {
    #line 2384 
    iavf_notify_client_open(& adapter->vsi);
    #line 2385 
    adapter->flags &= 4294966271U;
  }
  #line 2387 
  out: 
       #line 2387 
  ;
  #line 2388 
  cif_clear_bit(1L,& adapter->crit_section);
  #line 2389 
  return;
}

#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_free_all_tx_resources(struct iavf_adapter *adapter)
{
  #line 2399 
  int i;
  #line 2401 
  if (adapter->tx_rings == (struct iavf_ring *)0) 
                                                  #line 2402 
                                                  return;
  #line 2404 
  i = 0;
  #line 2404 
  while (adapter->num_active_queues > i) {
    #line 2405 
    if ((adapter->tx_rings + (unsigned long)i)->desc != (void *)0) 
                                                                   #line 2406 
                                                                   iavf_free_tx_resources(adapter->tx_rings + (unsigned long)i);
    #line 2404 
    i ++;
  }
  #line 2407 
  return;
}

#line 2419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_setup_all_tx_resources(struct iavf_adapter *adapter)
{
  #line 2421 
  int i;
  #line 2421 
  int err = 0;
  #line 2423 
  i = 0;
  #line 2423 
  while (adapter->num_active_queues > i) {
    #line 2424 
    (adapter->tx_rings + (unsigned long)i)->count = (unsigned short)adapter->tx_desc_count;
    #line 2425 
    err = iavf_setup_tx_descriptors(adapter->tx_rings + (unsigned long)i);
    #line 2426 
    if (err == 0) 
                  #line 2427 
                  goto __Cont;
    #line 2428 
    _dev_err(& (adapter->pdev)->dev,(char *)"Allocation for Tx Queue %u failed\n",i);
    #line 2430 
    break;
    #line 2423 
    __Cont: 
            #line 2423 
    i ++;
  }
  #line 2433 
  return err;
}

#line 2446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_setup_all_rx_resources(struct iavf_adapter *adapter)
{
  #line 2448 
  int i;
  #line 2448 
  int err = 0;
  #line 2450 
  i = 0;
  #line 2450 
  while (adapter->num_active_queues > i) {
    #line 2451 
    (adapter->rx_rings + (unsigned long)i)->count = (unsigned short)adapter->rx_desc_count;
    #line 2452 
    err = iavf_setup_rx_descriptors(adapter->rx_rings + (unsigned long)i);
    #line 2453 
    if (err == 0) 
                  #line 2454 
                  goto __Cont;
    #line 2455 
    _dev_err(& (adapter->pdev)->dev,(char *)"Allocation for Rx Queue %u failed\n",i);
    #line 2457 
    break;
    #line 2450 
    __Cont: 
            #line 2450 
    i ++;
  }
  #line 2459 
  return err;
}

#line 2468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
void iavf_free_all_rx_resources(struct iavf_adapter *adapter)
{
  #line 2470 
  int i;
  #line 2472 
  if (adapter->rx_rings == (struct iavf_ring *)0) 
                                                  #line 2473 
                                                  return;
  #line 2475 
  i = 0;
  #line 2475 
  while (adapter->num_active_queues > i) {
    #line 2476 
    if ((adapter->rx_rings + (unsigned long)i)->desc != (void *)0) 
                                                                   #line 2477 
                                                                   iavf_free_rx_resources(adapter->rx_rings + (unsigned long)i);
    #line 2475 
    i ++;
  }
  #line 2478 
  return;
}

#line 2485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_validate_tx_bandwidth(struct iavf_adapter *adapter, u64 max_tx_rate)
{
  #line 2488 
  int speed = 0;
  #line 2488 
  int ret = 0;
  #line 2490 
  switch ((unsigned int)adapter->link_speed) {
    #line 2491 
    case (unsigned int)16: 
                           #line 2491 
    ;
    #line 2492 
    speed = 40000;
    #line 2493 
    break;
    #line 2494 
    case (unsigned int)64: 
                           #line 2494 
    ;
    #line 2495 
    speed = 25000;
    #line 2496 
    break;
    #line 2497 
    case (unsigned int)32: 
                           #line 2497 
    ;
    #line 2498 
    speed = 20000;
    #line 2499 
    break;
    #line 2500 
    case (unsigned int)8: 
                          #line 2500 
    ;
    #line 2501 
    speed = 10000;
    #line 2502 
    break;
    #line 2503 
    case (unsigned int)4: 
                          #line 2503 
    ;
    #line 2504 
    speed = 1000;
    #line 2505 
    break;
    #line 2506 
    case (unsigned int)2: 
                          #line 2506 
    ;
    #line 2507 
    speed = 100;
    #line 2508 
    break;
    #line 2509 
    default: 
             #line 2509 
    ;
    #line 2510 
    break;
  }
  #line 2513 
  if ((unsigned long long)speed < max_tx_rate) {
    #line 2514 
    _dev_err(& (adapter->pdev)->dev,(char *)"Invalid tx rate specified\n");
    #line 2516 
    ret = -22;
  }
  #line 2519 
  return ret;
}

#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_validate_ch_config(struct iavf_adapter *adapter, struct tc_mqprio_qopt_offload *mqprio_qopt)
{
  #line 2535 
  int i;
  #line 2534 
  u64 total_max_rate = 0ULL;
  #line 2535 
  int num_qps = 0;
  #line 2536 
  u64 tx_rate = 0ULL;
  #line 2537 
  int ret = 0;
  #line 2539 
  if ((unsigned int)mqprio_qopt->qopt.num_tc + 255U > 3U) 
                                                          #line 2541 
                                                          return -22;
  #line 2543 
  i = 0;
  #line 2543 
  while ((int)mqprio_qopt->qopt.num_tc > i) {
    #line 2544 
    if ((unsigned int)mqprio_qopt->qopt.count[i] == 0U || (int)mqprio_qopt->qopt.offset[i] != num_qps) 
      #line 2546 
      return -22;
    #line 2547 
    if (mqprio_qopt->min_rate[i] != 0ULL) {
      #line 2548 
      _dev_err(& (adapter->pdev)->dev,(char *)"Invalid min tx rate (greater than 0) specified\n");
      #line 2550 
      return -22;
    }
    #line 2553 
    tx_rate = div_u64(mqprio_qopt->max_rate[i],125000U);
    #line 2555 
    total_max_rate += tx_rate;
    #line 2556 
    num_qps = (int)mqprio_qopt->qopt.count[i] + num_qps;
    #line 2543 
    i ++;
  }
  #line 2558 
  if (num_qps > 4) 
                   #line 2559 
                   return -22;
  #line 2561 
  ret = iavf_validate_tx_bandwidth(adapter,total_max_rate);
  #line 2562 
  return ret;
}

#line 2569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_del_all_cloud_filters(struct iavf_adapter *adapter)
{
  #line 2574 
  void *__mptr;
  #line 2574 
  void *__mptr_0;
  #line 2571 
  struct iavf_cloud_filter *cf;
  #line 2571 
  struct iavf_cloud_filter *cftmp;
  #line 2573 
  cif_spin_lock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 2574 
  __mptr = (void *)adapter->cloud_filter_list.next;
  #line 2574 
  cf = ((struct iavf_cloud_filter *)(__mptr + 18446744073709551608U));
  #line 2574 
  __mptr_0 = (void *)cf->list.next;
  #line 2575 
  cftmp = ((struct iavf_cloud_filter *)(__mptr_0 + 18446744073709551608U));
  #line 2574 
  while (& cf->list != & adapter->cloud_filter_list) {
    #line 2574 
    void *__mptr_1;
    #line 2576 
    list_del(& cf->list);
    #line 2577 
    kfree((void *)cf);
    #line 2578 
    adapter->num_cloud_filters = (u16)((int)adapter->num_cloud_filters - 1);
    #line 2574 
    cf = cftmp;
    #line 2574 
    __mptr_1 = (void *)cftmp->list.next;
    #line 2574 
    cftmp = ((struct iavf_cloud_filter *)(__mptr_1 + 18446744073709551608U));
  }
  #line 2580 
  cif_spin_unlock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 2581 
  return;
}

#line 2594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int __iavf_setup_tc(struct net_device *netdev, void *type_data)
{
  #line 2601 
  u64 max_tx_rate;
  #line 2602 
  u16 mode;
  #line 2603 
  int i;
  #line 2596 
  struct tc_mqprio_qopt_offload *mqprio_qopt = (struct tc_mqprio_qopt_offload *)type_data;
  #line 2597 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 2598 
  struct virtchnl_vf_resource *vfres = adapter->vf_res;
  #line 2599 
  u8 num_tc = (unsigned char)0U;
  #line 2599 
  u8 total_qps = (unsigned char)0U;
  #line 2600 
  int ret = 0;
  #line 2600 
  int netdev_tc = 0;
  #line 2605 
  num_tc = mqprio_qopt->qopt.num_tc;
  #line 2606 
  mode = mqprio_qopt->mode;
  #line 2609 
  if ((unsigned int)mqprio_qopt->qopt.hw == 0U) 
    #line 2610 
    if (adapter->ch_config.state == (unsigned int)__IAVF_TC_RUNNING) {
      #line 2612 
      netdev_reset_tc(netdev);
      #line 2613 
      adapter->num_tc = (unsigned char)0U;
      #line 2614 
      netif_tx_stop_all_queues(netdev);
      #line 2615 
      netif_tx_disable(netdev);
      #line 2616 
      iavf_del_all_cloud_filters(adapter);
      #line 2617 
      adapter->aq_required = 4194304U;
      #line 2618 
      goto exit;
    }
    else 
         #line 2620 
         return -22;
  #line 2625 
  if ((unsigned int)mode == 1U) {
    #line 2626 
    if ((vfres->vf_cap_flags & 8388608U) == 0U) {
      #line 2627 
      _dev_err(& (adapter->pdev)->dev,(char *)"ADq not supported\n");
      #line 2628 
      return -95;
    }
    #line 2630 
    if (adapter->ch_config.state != (unsigned int)__IAVF_TC_INVALID) {
      #line 2631 
      _dev_err(& (adapter->pdev)->dev,(char *)"TC configuration already exists\n");
      #line 2632 
      return -22;
    }
    #line 2635 
    ret = iavf_validate_ch_config(adapter,mqprio_qopt);
    #line 2636 
    if (ret != 0) 
                  #line 2637 
                  return ret;
    #line 2639 
    if ((int)adapter->num_tc == (int)num_tc) 
                                             #line 2640 
                                             return 0;
    #line 2641 
    adapter->num_tc = num_tc;
    #line 2643 
    i = 0;
    #line 2643 
    while (i <= 3) {
      #line 2644 
      if ((int)num_tc > i) {
        #line 2645 
        adapter->ch_config.ch_info[i].count = mqprio_qopt->qopt.count[i];
        #line 2647 
        adapter->ch_config.ch_info[i].offset = mqprio_qopt->qopt.offset[i];
        #line 2649 
        total_qps = (unsigned char)((int)((unsigned char)mqprio_qopt->qopt.count[i]) + (int)total_qps);
        #line 2650 
        max_tx_rate = mqprio_qopt->max_rate[i];
        #line 2652 
        max_tx_rate = div_u64(max_tx_rate,125000U);
        #line 2654 
        adapter->ch_config.ch_info[i].max_tx_rate = max_tx_rate;
      }
      else {
        #line 2657 
        adapter->ch_config.ch_info[i].count = (unsigned short)1U;
        #line 2658 
        adapter->ch_config.ch_info[i].offset = (unsigned short)0U;
      }
      #line 2643 
      i ++;
    }
    #line 2661 
    adapter->ch_config.total_qps = total_qps;
    #line 2662 
    netif_tx_stop_all_queues(netdev);
    #line 2663 
    netif_tx_disable(netdev);
    #line 2664 
    adapter->aq_required |= 2097152U;
    #line 2665 
    netdev_reset_tc(netdev);
    #line 2667 
    netdev_set_num_tc(adapter->netdev,(unsigned char)((int)num_tc));
    #line 2668 
    i = 0;
    #line 2668 
    while (i <= 3) {
      {
        #line 2669 
        u16 qcount = mqprio_qopt->qopt.count[i];
        #line 2670 
        u16 qoffset = mqprio_qopt->qopt.offset[i];
        #line 2672 
        if ((int)num_tc > i) {
          #line 2673 
          int tmp_0;
          #line 2673 
          ;
          #line 2673 
          ;
          #line 2673 
          tmp_0 = netdev_tc;
          #line 2673 
          netdev_tc ++;
          #line 2673 
          ;
          #line 2673 
          ;
          #line 2673 
          netdev_set_tc_queue(netdev,(unsigned char)((int)((unsigned char)tmp_0)),(unsigned short)((int)qcount),(unsigned short)((int)qoffset));
        }
      }
      #line 2668 
      i ++;
    }
  }
  #line 2677 
  exit: 
        #line 2677 
  ;
  #line 2678 
  return ret;
}

#line 2687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_parse_cls_flower(struct iavf_adapter *adapter, struct flow_cls_offload *f, struct iavf_cloud_filter *filter)
{
  #line 2691 
  struct flow_rule *rule = flow_cls_offload_flow_rule(f);
  #line 2692 
  struct flow_dissector *dissector = rule->match.dissector;
  #line 2693 
  u16 n_proto_mask = (unsigned short)0U;
  #line 2694 
  u16 n_proto_key = (unsigned short)0U;
  #line 2695 
  u8 field_flags = (unsigned char)0U;
  #line 2696 
  u16 addr_type = (unsigned short)0U;
  #line 2697 
  u16 n_proto = (unsigned short)0U;
  #line 2698 
  int i = 0;
  #line 2699 
  struct virtchnl_filter *vf = & filter->f;
  #line 2701 
  if (((unsigned long)dissector->used_keys & 18446744073709534048UL) != 0UL) {
    #line 2710 
    _dev_err(& (adapter->pdev)->dev,(char *)"Unsupported key used: 0x%x\n",dissector->used_keys);
    #line 2712 
    return -95;
  }
  #line 2715 
  if ((int)flow_rule_match_key(rule,
                            (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_ENC_KEYID) != 0) {
    #line 2716 
    struct flow_match_enc_keyid match;
    #line 2718 
    flow_rule_match_enc_keyid(rule,& match);
    #line 2719 
    if ((match.mask)->keyid != 0U) 
                                   #line 2720 
                                   field_flags = (unsigned char)((unsigned int)field_flags | 8U);
  }
  #line 2723 
  if ((int)flow_rule_match_key(rule,
                            (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_BASIC) != 0) {
    #line 2724 
    struct flow_match_basic match_0;
    #line 2726 
    flow_rule_match_basic(rule,& match_0);
    #line 2727 
    n_proto_key = __builtin_bswap16((unsigned short)((int)(match_0.key)->n_proto));
    #line 2728 
    n_proto_mask = __builtin_bswap16((unsigned short)((int)(match_0.mask)->n_proto));
    #line 2730 
    if ((unsigned int)n_proto_key == 3U) {
      #line 2731 
      n_proto_key = (unsigned short)0U;
      #line 2732 
      n_proto_mask = (unsigned short)0U;
    }
    #line 2734 
    n_proto = (unsigned short)((int)n_proto_key & (int)n_proto_mask);
    #line 2735 
    if ((unsigned int)n_proto != 2048U && (unsigned int)n_proto != 34525U) 
      #line 2736 
      return -22;
    #line 2737 
    if ((unsigned int)n_proto == 34525U) 
                                         #line 2739 
                                         vf->flow_type = VIRTCHNL_TCP_V6_FLOW;
    #line 2742 
    if ((unsigned int)(match_0.key)->ip_proto != 6U) {
      #line 2743 
      _dev_info(& (adapter->pdev)->dev,(char *)"Only TCP transport is supported\n");
      #line 2744 
      return -22;
    }
  }
  #line 2748 
  if ((int)flow_rule_match_key(rule,
                             (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_ETH_ADDRS) != 0) {
    #line 2749 
    struct flow_match_eth_addrs match_1;
    #line 2751 
    flow_rule_match_eth_addrs(rule,& match_1);
    #line 2754 
    if (! is_zero_ether_addr((u8 *)(& (match_1.mask)->dst))) {
      #line 2755 
      if ((int)is_broadcast_ether_addr((u8 *)(& (match_1.mask)->dst)) != 0) 
        #line 2756 
        field_flags = (unsigned char)((unsigned int)field_flags | 1U);
      else {
        #line 2758 
        _dev_err(& (adapter->pdev)->dev,(char *)"Bad ether dest mask %pM\n",(unsigned char *)(& (match_1.mask)->dst));
        #line 2760 
        return -4;
      }
    }
    #line 2764 
    if (! is_zero_ether_addr((u8 *)(& (match_1.mask)->src))) {
      #line 2765 
      if ((int)is_broadcast_ether_addr((u8 *)(& (match_1.mask)->src)) != 0) 
        #line 2766 
        field_flags = (unsigned char)((unsigned int)field_flags | 2U);
      else {
        #line 2768 
        _dev_err(& (adapter->pdev)->dev,(char *)"Bad ether src mask %pM\n",(unsigned char *)(& (match_1.mask)->src));
        #line 2770 
        return -4;
      }
    }
    #line 2774 
    if (! is_zero_ether_addr((u8 *)(& (match_1.key)->dst))) {
      #line 2775 
      if ((int)is_valid_ether_addr((u8 *)(& (match_1.key)->dst)) != 0) 
        #line 2775 
        goto _LOR;
      else {
        #line 2775 
        if ((int)is_multicast_ether_addr((u8 *)(& (match_1.key)->dst)) != 0) {
          #line 2775 
          _LOR: {
                  #line 2778 
                  i = 0;
                  #line 2778 
                  while (i <= 5) {
                    #line 2779 
                    vf->mask.tcp_spec.dst_mac[i] = (unsigned char)255U;
                    #line 2778 
                    i ++;
                  }
                  #line 2780 
                  ether_addr_copy((u8 *)(& vf->data.tcp_spec.dst_mac),(u8 *)(& (match_1.key)->dst));
                }
        }
      }
    }
    #line 2784 
    if (! is_zero_ether_addr((u8 *)(& (match_1.key)->src))) {
      #line 2785 
      if ((int)is_valid_ether_addr((u8 *)(& (match_1.key)->src)) != 0) 
        #line 2785 
        goto _LOR_0;
      else {
        #line 2785 
        if ((int)is_multicast_ether_addr((u8 *)(& (match_1.key)->src)) != 0) {
          #line 2785 
          _LOR_0: {
                    #line 2788 
                    i = 0;
                    #line 2788 
                    while (i <= 5) {
                      #line 2789 
                      vf->mask.tcp_spec.src_mac[i] = (unsigned char)255U;
                      #line 2788 
                      i ++;
                    }
                    #line 2790 
                    ether_addr_copy((u8 *)(& vf->data.tcp_spec.src_mac),(u8 *)(& (match_1.key)->src));
                  }
        }
      }
    }
  }
  #line 2795 
  if ((int)flow_rule_match_key(rule,
                             (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_VLAN) != 0) {
    #line 2796 
    struct flow_match_vlan match_2;
    #line 2798 
    flow_rule_match_vlan(rule,& match_2);
    #line 2799 
    if ((unsigned int)(match_2.mask)->__anonCompField_flow_dissector_key_vlan_79.__anonCompField___anonunion_515_78.vlan_id != 0U) 
      #line 2800 
      if ((unsigned int)(match_2.mask)->__anonCompField_flow_dissector_key_vlan_79.__anonCompField___anonunion_515_78.vlan_id == 4095U) 
        #line 2801 
        field_flags = (unsigned char)((unsigned int)field_flags | 4U);
      else {
        #line 2803 
        _dev_err(& (adapter->pdev)->dev,(char *)"Bad vlan mask %u\n",(int)(match_2.mask)->__anonCompField_flow_dissector_key_vlan_79.__anonCompField___anonunion_515_78.vlan_id);
        #line 2805 
        return -4;
      }
    #line 2808 
    vf->mask.tcp_spec.vlan_id = (unsigned short)65535U;
    #line 2809 
    vf->data.tcp_spec.vlan_id = __builtin_bswap16((unsigned short)((int)(match_2.key)->__anonCompField_flow_dissector_key_vlan_79.__anonCompField___anonunion_515_78.vlan_id));
  }
  #line 2812 
  if ((int)flow_rule_match_key(rule,
                             (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_CONTROL) != 0) {
    #line 2813 
    struct flow_match_control match_3;
    #line 2815 
    flow_rule_match_control(rule,& match_3);
    #line 2816 
    addr_type = (match_3.key)->addr_type;
  }
  #line 2819 
  if ((unsigned int)addr_type == 2U) {
    #line 2820 
    struct flow_match_ipv4_addrs match_4;
    #line 2822 
    flow_rule_match_ipv4_addrs(rule,& match_4);
    #line 2823 
    if ((match_4.mask)->dst != 0U) 
      #line 2824 
      if ((match_4.mask)->dst == 4294967295U) 
                                              #line 2825 
                                              field_flags = (unsigned char)((unsigned int)field_flags | 16U);
      else {
        #line 2827 
        ;
        #line 2827 
        _dev_err(& (adapter->pdev)->dev,(char *)"Bad ip dst mask 0x%08x\n",__builtin_bswap32((match_4.mask)->dst));
        #line 2829 
        return -4;
      }
    #line 2833 
    if ((match_4.mask)->src != 0U) 
      #line 2834 
      if ((match_4.mask)->src == 4294967295U) 
                                              #line 2835 
                                              field_flags = (unsigned char)((unsigned int)field_flags | 16U);
      else {
        #line 2837 
        ;
        #line 2837 
        _dev_err(& (adapter->pdev)->dev,(char *)"Bad ip src mask 0x%08x\n",__builtin_bswap32((match_4.mask)->dst));
        #line 2839 
        return -4;
      }
    #line 2843 
    if (((int)field_flags & 8) != 0) {
      #line 2844 
      _dev_info(& (adapter->pdev)->dev,(char *)"Tenant id not allowed for ip filter\n");
      #line 2845 
      return -4;
    }
    #line 2847 
    if ((match_4.key)->dst != 0U) {
      #line 2848 
      vf->mask.tcp_spec.dst_ip[0] = 4294967295U;
      #line 2849 
      vf->data.tcp_spec.dst_ip[0] = (match_4.key)->dst;
    }
    #line 2851 
    if ((match_4.key)->src != 0U) {
      #line 2852 
      vf->mask.tcp_spec.src_ip[0] = 4294967295U;
      #line 2853 
      vf->data.tcp_spec.src_ip[0] = (match_4.key)->src;
    }
  }
  #line 2857 
  if ((unsigned int)addr_type == 3U) {
    #line 2858 
    struct flow_match_ipv6_addrs match_5;
    #line 2860 
    flow_rule_match_ipv6_addrs(rule,& match_5);
    #line 2863 
    if ((int)ipv6_addr_any(& (match_5.mask)->dst) != 0) {
      #line 2864 
      _dev_err(& (adapter->pdev)->dev,(char *)"Bad ipv6 dst mask 0x%02x\n",0U);
      #line 2866 
      return -4;
    }
    #line 2872 
    if ((int)ipv6_addr_loopback(& (match_5.key)->dst) != 0) 
                                                            #line 2872 
                                                            goto _LOR_1;
    else {
      #line 2872 
      if ((int)ipv6_addr_loopback(& (match_5.key)->src) != 0) {
        #line 2872 
        _LOR_1: {
                  #line 2874 
                  _dev_err(& (adapter->pdev)->dev,(char *)"ipv6 addr should not be loopback\n");
                  #line 2876 
                  return -4;
                }
      }
    }
    #line 2878 
    if (ipv6_addr_any(& (match_5.mask)->dst)) {
      #line 2879 
      if (! ipv6_addr_any(& (match_5.mask)->src)) 
                                                  #line 2880 
                                                  field_flags = (unsigned char)((unsigned int)field_flags | 16U);
    }
    else 
         #line 2880 
         field_flags = (unsigned char)((unsigned int)field_flags | 16U);
    #line 2882 
    i = 0;
    #line 2882 
    while (i <= 3) {
      #line 2883 
      vf->mask.tcp_spec.dst_ip[i] = 4294967295U;
      #line 2882 
      i ++;
    }
    #line 2884 
    memcpy((void *)(& vf->data.tcp_spec.dst_ip),(void *)(& (match_5.key)->dst.in6_u.u6_addr32),16UL);
    #line 2886 
    i = 0;
    #line 2886 
    while (i <= 3) {
      #line 2887 
      vf->mask.tcp_spec.src_ip[i] = 4294967295U;
      #line 2886 
      i ++;
    }
    #line 2888 
    memcpy((void *)(& vf->data.tcp_spec.src_ip),(void *)(& (match_5.key)->src.in6_u.u6_addr32),16UL);
  }
  #line 2891 
  if ((int)flow_rule_match_key(rule,
                             (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_PORTS) != 0) {
    #line 2892 
    struct flow_match_ports match_6;
    #line 2894 
    flow_rule_match_ports(rule,& match_6);
    #line 2895 
    if ((unsigned int)(match_6.mask)->__anonCompField_flow_dissector_key_ports_82.__anonCompField___anonunion_518_81.src != 0U) 
      #line 2896 
      if ((unsigned int)(match_6.mask)->__anonCompField_flow_dissector_key_ports_82.__anonCompField___anonunion_518_81.src == 65535U) 
        #line 2897 
        field_flags = (unsigned char)((unsigned int)field_flags | 16U);
      else {
        #line 2899 
        ;
        #line 2899 
        _dev_err(& (adapter->pdev)->dev,(char *)"Bad src port mask %u\n",(int)__builtin_bswap16((unsigned short)((int)(match_6.mask)->__anonCompField_flow_dissector_key_ports_82.__anonCompField___anonunion_518_81.src)));
        #line 2901 
        return -4;
      }
    #line 2905 
    if ((unsigned int)(match_6.mask)->__anonCompField_flow_dissector_key_ports_82.__anonCompField___anonunion_518_81.dst != 0U) 
      #line 2906 
      if ((unsigned int)(match_6.mask)->__anonCompField_flow_dissector_key_ports_82.__anonCompField___anonunion_518_81.dst == 65535U) 
        #line 2907 
        field_flags = (unsigned char)((unsigned int)field_flags | 16U);
      else {
        #line 2909 
        ;
        #line 2909 
        _dev_err(& (adapter->pdev)->dev,(char *)"Bad dst port mask %u\n",(int)__builtin_bswap16((unsigned short)((int)(match_6.mask)->__anonCompField_flow_dissector_key_ports_82.__anonCompField___anonunion_518_81.dst)));
        #line 2911 
        return -4;
      }
    #line 2914 
    if ((unsigned int)(match_6.key)->__anonCompField_flow_dissector_key_ports_82.__anonCompField___anonunion_518_81.dst != 0U) {
      #line 2915 
      vf->mask.tcp_spec.dst_port = (unsigned short)65535U;
      #line 2916 
      vf->data.tcp_spec.dst_port = (match_6.key)->__anonCompField_flow_dissector_key_ports_82.__anonCompField___anonunion_518_81.dst;
    }
    #line 2919 
    if ((unsigned int)(match_6.key)->__anonCompField_flow_dissector_key_ports_82.__anonCompField___anonunion_518_81.src != 0U) {
      #line 2920 
      vf->mask.tcp_spec.src_port = (unsigned short)65535U;
      #line 2921 
      vf->data.tcp_spec.src_port = (match_6.key)->__anonCompField_flow_dissector_key_ports_82.__anonCompField___anonunion_518_81.src;
    }
  }
  #line 2924 
  vf->field_flags = field_flags;
  #line 2926 
  return 0;
}

#line 2935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_handle_tclass(struct iavf_adapter *adapter, u32 tc, struct iavf_cloud_filter *filter)
{
  #line 2938 
  if (tc == 0U) 
                #line 2939 
                return 0;
  #line 2940 
  if ((unsigned int)adapter->num_tc > tc) 
    #line 2941 
    if ((unsigned int)filter->f.data.tcp_spec.dst_port == 0U) {
      #line 2942 
      _dev_err(& (adapter->pdev)->dev,(char *)"Specify destination port to redirect to traffic class other than TC0\n");
      #line 2944 
      return -22;
    }
  #line 2948 
  filter->f.action = VIRTCHNL_ACTION_TC_REDIRECT;
  #line 2949 
  filter->f.action_meta = tc;
  #line 2950 
  return 0;
}

#line 2958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_configure_clsflower(struct iavf_adapter *adapter, struct flow_cls_offload *cls_flower)
{
  #line 2961 
  int tc = tc_classid_to_hwtc(adapter->netdev,cls_flower->classid);
  #line 2962 
  struct iavf_cloud_filter *filter = (struct iavf_cloud_filter *)0;
  #line 2963 
  int err = -22;
  #line 2963 
  int count = 50;
  #line 2965 
  if (tc < 0) {
    #line 2966 
    _dev_err(& (adapter->pdev)->dev,(char *)"Invalid traffic class\n");
    #line 2967 
    return -22;
  }
  #line 2970 
  filter = (struct iavf_cloud_filter *)kzalloc(312UL,3264U);
  #line 2971 
  if (filter == (struct iavf_cloud_filter *)0) 
                                               #line 2972 
                                               return -12;
  #line 2974 
  while (1) {
    #line 2974 
    if (! ((int)test_and_set_bit(0L,& adapter->crit_section) != 0)) 
                                                                    #line 2974 
                                                                    break;
    #line 2976 
    count --;
    #line 2976 
    if (count == 0) 
                    #line 2977 
                    goto err;
    #line 2978 
    __const_udelay(4295UL);
  }
  #line 2981 
  filter->cookie = cls_flower->cookie;
  #line 2984 
  memset((void *)(& filter->f.mask.tcp_spec),0,52UL);
  #line 2986 
  filter->f.flow_type = VIRTCHNL_TCP_V4_FLOW;
  #line 2987 
  err = iavf_parse_cls_flower(adapter,cls_flower,filter);
  #line 2988 
  if (err < 0) 
               #line 2989 
               goto err;
  #line 2991 
  err = iavf_handle_tclass(adapter,(unsigned int)tc,filter);
  #line 2992 
  if (err < 0) 
               #line 2993 
               goto err;
  #line 2996 
  cif_spin_lock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 2997 
  list_add_tail(& filter->list,& adapter->cloud_filter_list);
  #line 2998 
  adapter->num_cloud_filters = (u16)((int)adapter->num_cloud_filters + 1);
  #line 2999 
  filter->add = (_Bool)1;
  #line 3000 
  adapter->aq_required |= 8388608U;
  #line 3001 
  cif_spin_unlock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 3002 
  err: 
       #line 3002 
  ;
  #line 3003 
  if (err != 0) 
                #line 3004 
                kfree((void *)filter);
  #line 3006 
  cif_clear_bit(0L,& adapter->crit_section);
  #line 3007 
  return err;
}

#line 3017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static struct iavf_cloud_filter *iavf_find_cf(struct iavf_adapter *adapter, unsigned long *cookie)
{
  #line 3025 
  void *__mptr;
  #line 3020 
  struct iavf_cloud_filter *filter = (struct iavf_cloud_filter *)0;
  #line 3022 
  if (cookie == (unsigned long *)0UL) 
                                      #line 3023 
                                      return (struct iavf_cloud_filter *)0;
  #line 3025 
  __mptr = (void *)adapter->cloud_filter_list.next;
  #line 3025 
  filter = ((struct iavf_cloud_filter *)(__mptr + 18446744073709551608U));
  #line 3025 
  while (& filter->list != & adapter->cloud_filter_list) {
    #line 3025 
    void *__mptr_0;
    #line 3026 
    if (memcmp((void *)cookie,(void *)(& filter->cookie),8UL) == 0) 
                                                                    #line 3027 
                                                                    return filter;
    #line 3025 
    __mptr_0 = (void *)filter->list.next;
    #line 3025 
    filter = ((struct iavf_cloud_filter *)(__mptr_0 + 18446744073709551608U));
  }
  #line 3029 
  return (struct iavf_cloud_filter *)0;
}

#line 3037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_delete_clsflower(struct iavf_adapter *adapter, struct flow_cls_offload *cls_flower)
{
  #line 3040 
  struct iavf_cloud_filter *filter = (struct iavf_cloud_filter *)0;
  #line 3041 
  int err = 0;
  #line 3043 
  cif_spin_lock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 3044 
  filter = iavf_find_cf(adapter,& cls_flower->cookie);
  #line 3045 
  if (filter != (struct iavf_cloud_filter *)0) {
    #line 3046 
    filter->del = (_Bool)1;
    #line 3047 
    adapter->aq_required |= 16777216U;
  }
  else 
       #line 3049 
       err = -22;
  #line 3051 
  cif_spin_unlock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 3053 
  return err;
}

#line 3061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_setup_tc_cls_flower(struct iavf_adapter *adapter, struct flow_cls_offload *cls_flower)
{
  #line 3064 
  if (cls_flower->common.chain_index != 0U) 
                                            #line 3065 
                                            return -95;
  #line 3067 
  switch ((unsigned int)cls_flower->command) {
    #line 3068 
    case (unsigned int)0: 
                          #line 3068 
    ;
    #line 3069 
    return iavf_configure_clsflower(adapter,cls_flower);
    #line 3070 
    case (unsigned int)1: 
                          #line 3070 
    ;
    #line 3071 
    return iavf_delete_clsflower(adapter,cls_flower);
    #line 3072 
    case (unsigned int)2: 
                          #line 3072 
    ;
    #line 3073 
    return -95;
    #line 3074 
    default: 
             #line 3074 
    ;
    #line 3075 
    return -95;
  }
}

#line 3087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_setup_tc_block_cb(enum tc_setup_type type, void *type_data, void *cb_priv)
{
  #line 3090 
  switch ((unsigned int)type) {
    #line 3091 
    case (unsigned int)2: 
                          #line 3091 
    ;
    #line 3092 
    return iavf_setup_tc_cls_flower((struct iavf_adapter *)cb_priv,
                               (struct flow_cls_offload *)type_data);
    #line 3093 
    default: 
             #line 3093 
    ;
    #line 3094 
    return -95;
  }
}

#line 3098  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static struct list_head iavf_block_cb_list = {.next = & iavf_block_cb_list, .prev = & iavf_block_cb_list};
#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_setup_tc(struct net_device *netdev, enum tc_setup_type type, void *type_data)
{
  #line 3114 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 3116 
  switch ((unsigned int)type) {
    #line 3117 
    case (unsigned int)0: 
                          #line 3117 
    ;
    #line 3118 
    return __iavf_setup_tc(netdev,type_data);
    #line 3119 
    case (unsigned int)5: 
                          #line 3119 
    ;
    #line 3120 
    return flow_block_cb_setup_simple((struct flow_block_offload *)type_data,
                                   & iavf_block_cb_list,
                                   & iavf_setup_tc_block_cb,(void *)adapter,
                                   (void *)adapter,(_Bool)1);
    #line 3124 
    default: 
             #line 3124 
    ;
    #line 3125 
    return -95;
  }
}

#line 3141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_open(struct net_device *netdev)
{
  #line 3144 
  int err;
  #line 3143 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 3146 
  if (((unsigned long)adapter->flags & 8UL) != 0UL) {
    #line 3147 
    _dev_err(& (adapter->pdev)->dev,(char *)"Unable to open device due to PF driver failure.\n");
    #line 3148 
    return -5;
  }
  #line 3151 
  while (1) {
    #line 3151 
    if (! ((int)test_and_set_bit(0L,& adapter->crit_section) != 0)) 
                                                                    #line 3151 
                                                                    break;
    #line 3153 
    usleep_range(500UL,1000UL);
  }
  #line 3155 
  if (adapter->state != (unsigned int)__IAVF_DOWN) {
    #line 3156 
    err = -16;
    #line 3157 
    goto err_unlock;
  }
  #line 3161 
  err = iavf_setup_all_tx_resources(adapter);
  #line 3162 
  if (err != 0) 
                #line 3163 
                goto err_setup_tx;
  #line 3166 
  err = iavf_setup_all_rx_resources(adapter);
  #line 3167 
  if (err != 0) 
                #line 3168 
                goto err_setup_rx;
  #line 3171 
  err = iavf_request_traffic_irqs(adapter,(char *)(& netdev->name));
  #line 3172 
  if (err != 0) 
                #line 3173 
                goto err_req_irq;
  #line 3175 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 3177 
  iavf_add_filter(adapter,(u8 *)(& adapter->hw.mac.addr));
  #line 3179 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 3181 
  iavf_configure(adapter);
  #line 3183 
  iavf_up_complete(adapter);
  #line 3185 
  iavf_irq_enable(adapter,(_Bool)1);
  #line 3187 
  cif_clear_bit(0L,& adapter->crit_section);
  #line 3189 
  return 0;
  #line 3191 
  err_req_irq: 
               #line 3191 
  ;
  #line 3192 
  iavf_down(adapter);
  #line 3193 
  iavf_free_traffic_irqs(adapter);
  #line 3194 
  err_setup_rx: 
                #line 3194 
  ;
  #line 3195 
  iavf_free_all_rx_resources(adapter);
  #line 3196 
  err_setup_tx: 
                #line 3196 
  ;
  #line 3197 
  iavf_free_all_tx_resources(adapter);
  #line 3198 
  err_unlock: 
              #line 3198 
  ;
  #line 3199 
  cif_clear_bit(0L,& adapter->crit_section);
  #line 3201 
  return err;
}

#line 3215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_close(struct net_device *netdev)
{
  #line 3248 
  long __ret;
  #line 3218 
  int status;
  #line 3217 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 3220 
  if (adapter->state <= (unsigned int)__IAVF_DOWN_PENDING) 
                                                           #line 3221 
                                                           return 0;
  #line 3223 
  while (1) {
    #line 3223 
    if (! ((int)test_and_set_bit(0L,& adapter->crit_section) != 0)) 
                                                                    #line 3223 
                                                                    break;
    #line 3225 
    usleep_range(500UL,1000UL);
  }
  #line 3227 
  cif_set_bit(0L,(unsigned long *)(& adapter->vsi.state));
  #line 3228 
  if (adapter->cinst != (struct iavf_client_instance *)0) 
                                                          #line 3229 
                                                          adapter->flags |= 2048U;
  #line 3231 
  iavf_down(adapter);
  #line 3232 
  adapter->state = __IAVF_DOWN_PENDING;
  #line 3233 
  iavf_free_traffic_irqs(adapter);
  #line 3235 
  cif_clear_bit(0L,& adapter->crit_section);
  {
    #line 3248 
    __ret = (long)msecs_to_jiffies(500U);
    #line 3248 
    __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c",3248,0);
    {
      #line 3248 
      bool __cond_0;
      #line 3248 
      __cond_0 = (_Bool)(adapter->state == (unsigned int)__IAVF_DOWN);
      #line 3248 
      if ((int)__cond_0 != 0 && __ret == 0L) 
                                             #line 3248 
                                             __ret = 1L;
      #line 3248 
      if ((((int)__cond_0 != 0 || __ret == 0L) != 0) == 0) {
        #line 3248 
        long __ret_0;
        {
          #line 3248 
          struct wait_queue_entry __wq_entry;
          #line 3248 
          __ret_0 = (long)msecs_to_jiffies(500U);
          #line 3248 
          init_wait_entry(& __wq_entry,0);
          #line 3248 
          while (1) {
            #line 3248 
            bool __cond;
            #line 3248 
            long __int = prepare_to_wait_event(& adapter->down_waitqueue,& __wq_entry,2);
            #line 3248 
            __cond = (_Bool)(adapter->state == (unsigned int)__IAVF_DOWN);
            #line 3248 
            if ((int)__cond != 0 && __ret_0 == 0L) 
                                                   #line 3248 
                                                   __ret_0 = 1L;
            #line 3248 
            if ((((int)__cond != 0 || __ret_0 == 0L) != 0) != 0) 
                                                                 #line 3248 
                                                                 break;
            #line 3248 
            __ret_0 = schedule_timeout(__ret_0);
          }
          #line 3248 
          finish_wait(& adapter->down_waitqueue,& __wq_entry);
          #line 3248 
          __out_0: 
                   #line 3248 
          ;
          }
        #line 3248 
        __ret = __ret_0;
      }
    }
    }
  #line 3248 
  status = (int)__ret;
  #line 3251 
  if (status == 0) 
                   #line 3252 
                   netdev_warn(netdev,(char *)"Device resources not yet released\n");
  #line 3253 
  return 0;
}

#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_change_mtu(struct net_device *netdev, int new_mtu)
{
  #line 3265 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 3267 
  netdev->mtu = (unsigned int)new_mtu;
  #line 3268 
  if (adapter->cinst != (struct iavf_client_instance *)0) {
    #line 3269 
    iavf_notify_client_l2_params(& adapter->vsi);
    #line 3270 
    adapter->flags |= 512U;
  }
  #line 3272 
  adapter->flags |= 32U;
  #line 3273 
  cif_queue_work(iavf_wq,& adapter->reset_task);
  #line 3275 
  return 0;
}

#line 3284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 3287 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 3292 
  if (((adapter->vf_res)->vf_cap_flags & 65536U) == 0U) {
    #line 3293 
    if (((netdev->features ^ features) & 256ULL) != 0ULL) 
                                                          #line 3294 
                                                          return -22;
  }
  else 
    #line 3295 
    if (((netdev->features ^ features) & 256ULL) != 0ULL) 
      #line 3296 
      if ((features & 256ULL) != 0ULL) 
                                       #line 3297 
                                       adapter->aq_required |= 524288U; else 
                                                                    #line 3300 
                                                                    adapter->aq_required |= 1048576U;
  #line 3304 
  return 0;
}

#line 3313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static netdev_features_t iavf_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
{
  #line 3317 
  size_t len;
  #line 3323 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 3324 
                                          return features;
  #line 3329 
  if ((int)skb_is_gso(skb) != 0) {
    #line 3329 
    ;
    #line 3329 
    if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size <= 63U) 
      #line 3330 
      features &= 18446744056529747967ULL;
  }
  #line 3333 
  len = (unsigned long)(skb_network_header(skb) - skb->data);
  #line 3334 
  if ((len & 18446744073709551489UL) != 0UL) 
                                             #line 3335 
                                             goto out_err;
  #line 3338 
  len = (unsigned long)(skb_transport_header(skb) - skb_network_header(skb));
  #line 3339 
  if ((len & 18446744073709551107UL) != 0UL) 
                                             #line 3340 
                                             goto out_err;
  #line 3342 
  if ((unsigned int)skb->encapsulation != 0U) {
    #line 3344 
    len = (unsigned long)(skb_inner_network_header(skb) - skb_transport_header(skb));
    #line 3345 
    if ((len & 18446744073709551361UL) != 0UL) 
                                               #line 3346 
                                               goto out_err;
    #line 3349 
    len = (unsigned long)(skb_inner_transport_header(skb) - skb_inner_network_header(skb));
    #line 3351 
    if ((len & 18446744073709551107UL) != 0UL) 
                                               #line 3352 
                                               goto out_err;
  }
  #line 3360 
  return features;
  #line 3361 
  out_err: 
           #line 3361 
  ;
  #line 3362 
  return features & 18446744056529747941ULL;
}

#line 3372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static netdev_features_t iavf_fix_features(struct net_device *netdev, netdev_features_t features)
{
  #line 3375 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 3377 
  if (((adapter->vf_res)->vf_cap_flags & 65536U) == 0U) 
                                                        #line 3378 
                                                        features &= 18446744073709550719ULL;
  #line 3382 
  return features;
}

#line 3385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static struct net_device_ops iavf_netdev_ops = {.ndo_open = & iavf_open, .ndo_stop = & iavf_close, .ndo_start_xmit = & iavf_xmit_frame, .ndo_features_check = & iavf_features_check, .ndo_set_rx_mode = & iavf_set_rx_mode, .ndo_set_mac_address = & iavf_set_mac, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & iavf_change_mtu, .ndo_tx_timeout = & iavf_tx_timeout, .ndo_vlan_rx_add_vid = & iavf_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & iavf_vlan_rx_kill_vid, .ndo_setup_tc = & iavf_setup_tc, .ndo_fix_features = & iavf_fix_features, .ndo_set_features = & iavf_set_features};
#line 3408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_check_reset_complete(struct iavf_hw *hw)
{
  #line 3410 
  u32 rstat;
  #line 3411 
  int i;
  #line 3413 
  i = 0;
  #line 3413 
  while (i <= 99) {
    {
      #line 3414 
      rstat = readl((void *)(hw->hw_addr + 34816U)) & 3U;
      #line 3416 
      if (rstat + 4294967295U <= 1U) 
                                     #line 3418 
                                     return 0;
      #line 3419 
      usleep_range(10UL,20UL);
    }
    #line 3413 
    i ++;
  }
  #line 3421 
  return -16;
}

#line 3431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
int iavf_process_config(struct iavf_adapter *adapter)
{
  #line 3434 
  int i;
  #line 3437 
  netdev_features_t hw_enc_features;
  #line 3438 
  netdev_features_t hw_features;
  #line 3433 
  struct virtchnl_vf_resource *vfres = adapter->vf_res;
  #line 3434 
  int num_req_queues = adapter->num_req_queues;
  #line 3435 
  struct net_device *netdev = adapter->netdev;
  #line 3436 
  struct iavf_vsi *vsi = & adapter->vsi;
  #line 3441 
  i = 0;
  #line 3441 
  while ((int)vfres->num_vsis > i) {
    #line 3442 
    if (vfres->vsi_res[i].vsi_type == (unsigned int)VIRTCHNL_VSI_SRIOV) 
      #line 3443 
      adapter->vsi_res = & vfres->vsi_res[i];
    #line 3441 
    i ++;
  }
  #line 3445 
  if (adapter->vsi_res == (struct virtchnl_vsi_resource *)0) {
    #line 3446 
    _dev_err(& (adapter->pdev)->dev,(char *)"No LAN VSI found\n");
    #line 3447 
    return -19;
  }
  #line 3450 
  if (num_req_queues != 0 && (int)(adapter->vsi_res)->num_queue_pairs != num_req_queues) {
    #line 3456 
    _dev_err(& (adapter->pdev)->dev,(char *)"Requested %d queues, but PF only gave us %d.\n",num_req_queues,(int)(adapter->vsi_res)->num_queue_pairs);
    #line 3460 
    adapter->flags |= 65536U;
    #line 3461 
    adapter->num_req_queues = (int)(adapter->vsi_res)->num_queue_pairs;
    #line 3462 
    iavf_schedule_reset(adapter);
    #line 3463 
    return -19;
  }
  #line 3465 
  adapter->num_req_queues = 0;
  #line 3467 
  hw_enc_features = 858994853939ULL;
  #line 3483 
  if ((vfres->vf_cap_flags & 1048576U) != 0U) {
    #line 3484 
    hw_enc_features |= 532676608ULL;
    #line 3493 
    if ((vfres->vf_cap_flags & 2097152U) == 0U) 
                                                #line 3495 
                                                netdev->gso_partial_features |= 134217728ULL;
    #line 3498 
    netdev->gso_partial_features |= 8388608ULL;
    #line 3499 
    netdev->hw_enc_features |= 524288ULL;
    #line 3500 
    netdev->hw_enc_features |= hw_enc_features;
  }
  #line 3503 
  netdev->vlan_features = (netdev->vlan_features | hw_enc_features) | 524288ULL;
  #line 3508 
  hw_features = hw_enc_features;
  #line 3511 
  if ((vfres->vf_cap_flags & 65536U) != 0U) 
                                            #line 3512 
                                            hw_features |= 384ULL;
  #line 3515 
  if ((vfres->vf_cap_flags & 8388608U) != 0U) 
                                              #line 3516 
                                              hw_features |= 281474976710656ULL;
  #line 3518 
  netdev->hw_features |= hw_features;
  #line 3520 
  netdev->features |= hw_features;
  #line 3522 
  if ((vfres->vf_cap_flags & 65536U) != 0U) 
                                            #line 3523 
                                            netdev->features |= 512ULL;
  #line 3525 
  netdev->priv_flags |= 4096U;
  #line 3530 
  if (netdev->wanted_features != 0ULL) {
    #line 3531 
    if ((netdev->wanted_features & 65536ULL) == 0ULL || netdev->mtu <= 575U) 
      #line 3533 
      netdev->features &= 18446744073709486079ULL;
    #line 3534 
    if ((netdev->wanted_features & 1048576ULL) == 0ULL || netdev->mtu <= 575U) 
      #line 3536 
      netdev->features &= 18446744073708503039ULL;
    #line 3537 
    if ((netdev->wanted_features & 262144ULL) == 0ULL) 
                                                       #line 3538 
                                                       netdev->features &= 18446744073709289471ULL;
    #line 3539 
    if ((netdev->wanted_features & 16384ULL) == 0ULL) 
                                                      #line 3540 
                                                      netdev->features &= 18446744073709535231ULL;
    #line 3541 
    if ((netdev->wanted_features & 2048ULL) == 0ULL) 
                                                     #line 3542 
                                                     netdev->features &= 18446744073709549567ULL;
  }
  #line 3545 
  adapter->vsi.id = (adapter->vsi_res)->vsi_id;
  #line 3547 
  adapter->vsi.back = adapter;
  #line 3548 
  adapter->vsi.base_vector = 1;
  #line 3549 
  adapter->vsi.work_limit = (unsigned short)256U;
  #line 3550 
  vsi->netdev = adapter->netdev;
  #line 3551 
  vsi->qs_handle = (adapter->vsi_res)->qset_handle;
  #line 3552 
  if ((vfres->vf_cap_flags & 524288U) != 0U) {
    #line 3553 
    adapter->rss_key_size = (unsigned short)vfres->rss_key_size;
    #line 3554 
    adapter->rss_lut_size = (unsigned short)vfres->rss_lut_size;
  }
  else {
    #line 3556 
    adapter->rss_key_size = (unsigned short)52U;
    #line 3557 
    adapter->rss_lut_size = (unsigned short)64U;
  }
  #line 3560 
  return 0;
}

#line 3575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_init_task(struct work_struct *work)
{
  #line 3577 
  void *__mptr;
  #line 3577 
  __mptr = (void *)work;
  #line 3577 
  struct iavf_adapter *adapter = ((struct iavf_adapter *)(__mptr + 18446744073709551272U));
  #line 3580 
  struct iavf_hw *hw = & adapter->hw;
  #line 3582 
  switch ((unsigned int)adapter->state) {
    #line 3583 
    case (unsigned int)0: 
                          #line 3583 
    ;
    #line 3584 
    if (iavf_startup(adapter) < 0) 
                                   #line 3585 
                                   goto init_failed;
    #line 3586 
    break;
    #line 3587 
    case (unsigned int)2: 
                          #line 3587 
    ;
    #line 3588 
    if (iavf_init_version_check(adapter) < 0) 
                                              #line 3589 
                                              goto init_failed;
    #line 3590 
    break;
    #line 3591 
    case (unsigned int)3: 
                          #line 3591 
    ;
    #line 3592 
    if (iavf_init_get_resources(adapter) < 0) 
                                              #line 3593 
                                              goto init_failed;
    #line 3594 
    return;
    #line 3595 
    default: 
             #line 3595 
    ;
    #line 3596 
    goto init_failed;
  }
  #line 3599 
  ;
  #line 3599 
  ;
  #line 3599 
  cif_queue_delayed_work(iavf_wq,& adapter->init_task,msecs_to_jiffies(30U));
  #line 3601 
  return;
  #line 3602 
  init_failed: 
               #line 3602 
  ;
  #line 3603 
  (adapter->aq_wait_count) ++;
  #line 3603 
  if (adapter->aq_wait_count > 20U) {
    #line 3604 
    _dev_err(& (adapter->pdev)->dev,(char *)"Failed to communicate with PF; waiting before retry\n");
    #line 3606 
    adapter->flags |= 8U;
    #line 3607 
    iavf_shutdown_adminq(hw);
    #line 3608 
    adapter->state = __IAVF_STARTUP;
    #line 3609 
    cif_queue_delayed_work(iavf_wq,& adapter->init_task,1250UL);
    #line 3610 
    return;
  }
  #line 3612 
  cif_queue_delayed_work(iavf_wq,& adapter->init_task,250UL);
  #line 3613 
  return;
}

#line 3619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_shutdown(struct pci_dev *pdev)
{
  #line 3621 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 3622 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 3624 
  netif_device_detach(netdev);
  #line 3626 
  if ((int)netif_running(netdev) != 0) 
                                       #line 3627 
                                       iavf_close(netdev);
  #line 3630 
  adapter->state = __IAVF_REMOVE;
  #line 3631 
  adapter->aq_required = 0U;
  #line 3634 
  pci_save_state(pdev);
  #line 3637 
  pci_disable_device(pdev);
  #line 3638 
  return;
}

#line 3651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 3653 
  struct net_device *netdev;
  #line 3656 
  int err;
  #line 3707 
  unsigned long tmp_0;
  #line 3654 
  struct iavf_adapter *adapter = (struct iavf_adapter *)0;
  #line 3655 
  struct iavf_hw *hw = (struct iavf_hw *)0;
  #line 3658 
  err = pci_enable_device(pdev);
  #line 3659 
  if (err != 0) 
                #line 3660 
                return err;
  #line 3662 
  err = dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL);
  #line 3663 
  if (err != 0) {
    #line 3664 
    err = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
    #line 3665 
    if (err != 0) {
      #line 3666 
      _dev_err(& pdev->dev,(char *)"DMA configuration failed: 0x%x\n",err);
      #line 3668 
      goto err_dma;
    }
  }
  #line 3672 
  err = pci_request_regions(pdev,(char *)(& iavf_driver_name));
  #line 3673 
  if (err != 0) {
    #line 3674 
    _dev_err(& pdev->dev,(char *)"pci_request_regions failed 0x%x\n",err);
    #line 3676 
    goto err_pci_reg;
  }
  #line 3679 
  pci_enable_pcie_error_reporting(pdev);
  #line 3681 
  pci_set_master(pdev);
  #line 3683 
  netdev = cif_alloc_etherdev_mqs(2648,4U,4U);
  #line 3685 
  if (netdev == (struct net_device *)0) {
    #line 3686 
    err = -12;
    #line 3687 
    goto err_alloc_etherdev;
  }
  #line 3690 
  netdev->dev.parent = & pdev->dev;
  #line 3692 
  pci_set_drvdata(pdev,(void *)netdev);
  #line 3693 
  adapter = (struct iavf_adapter *)netdev_priv(netdev);
  #line 3695 
  adapter->netdev = netdev;
  #line 3696 
  adapter->pdev = pdev;
  #line 3698 
  hw = & adapter->hw;
  #line 3699 
  hw->back = (void *)adapter;
  #line 3701 
  adapter->msg_enable = (unsigned short)7U;
  #line 3702 
  adapter->state = __IAVF_STARTUP;
  #line 3705 
  pci_save_state(pdev);
  #line 3707 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    #line 3707 
    tmp_0 = (unsigned long)((pdev->resource[0].end - pdev->resource[0].start) + 1ULL); else 
                                                                    #line 3707 
                                                                    tmp_0 = 0UL;
  #line 3707 
  ;
  #line 3707 
  hw->hw_addr = (u8 *)ioremap(pdev->resource[0].start,tmp_0);
  #line 3709 
  if (hw->hw_addr == (u8 *)0U) {
    #line 3710 
    err = -5;
    #line 3711 
    goto err_ioremap;
  }
  #line 3713 
  hw->vendor_id = pdev->vendor;
  #line 3714 
  hw->device_id = pdev->device;
  #line 3715 
  pci_read_config_byte(pdev,8,& hw->revision_id);
  #line 3716 
  hw->subsystem_vendor_id = pdev->subsystem_vendor;
  #line 3717 
  hw->subsystem_device_id = pdev->subsystem_device;
  #line 3718 
  hw->bus.device = (unsigned short)((unsigned int)((unsigned short)(pdev->devfn >> 3)) & 31U);
  #line 3719 
  hw->bus.func = (unsigned short)((unsigned int)((unsigned short)pdev->devfn) & 7U);
  #line 3720 
  hw->bus.bus_id = (unsigned short)(pdev->bus)->number;
  {
    #line 3725 
    struct lock_class_key __key;
    #line 3725 
    __mutex_init(& hw->aq.asq_mutex,(char *)"&hw->aq.asq_mutex",& __key);
  }
  {
    #line 3726 
    struct lock_class_key __key_0;
    #line 3726 
    __mutex_init(& hw->aq.arq_mutex,(char *)"&hw->aq.arq_mutex",& __key_0);
  }
  #line 3728 
  spinlock_check(& adapter->mac_vlan_list_lock);
  {
    #line 3728 
    struct lock_class_key __key_1;
    #line 3728 
    __raw_spin_lock_init(& adapter->mac_vlan_list_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->mac_vlan_list_lock)->rlock",& __key_1);
  }
  #line 3729 
  spinlock_check(& adapter->cloud_filter_list_lock);
  {
    #line 3729 
    struct lock_class_key __key_2;
    #line 3729 
    __raw_spin_lock_init(& adapter->cloud_filter_list_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->cloud_filter_list_lock)->rlock",& __key_2);
  }
  #line 3731 
  INIT_LIST_HEAD(& adapter->mac_filter_list);
  #line 3732 
  INIT_LIST_HEAD(& adapter->vlan_filter_list);
  #line 3733 
  INIT_LIST_HEAD(& adapter->cloud_filter_list);
  {
    #line 3735 
    struct lock_class_key __key_3;
    #line 3735 
    __init_work(& adapter->reset_task,0);
    #line 3735 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 3735 
    adapter->reset_task.data = __constr_expr_44;
    #line 3735 
    lockdep_init_map(& adapter->reset_task.lockdep_map,(char *)"(work_completion)",& __key_3,0);
    #line 3735 
    INIT_LIST_HEAD(& adapter->reset_task.entry);
    #line 3735 
    adapter->reset_task.func = & iavf_reset_task;
  }
  {
    #line 3736 
    struct lock_class_key __key_4;
    #line 3736 
    __init_work(& adapter->adminq_task,0);
    #line 3736 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 3736 
    adapter->adminq_task.data = __constr_expr_45;
    #line 3736 
    lockdep_init_map(& adapter->adminq_task.lockdep_map,(char *)"(work_completion)",& __key_4,0);
    #line 3736 
    INIT_LIST_HEAD(& adapter->adminq_task.entry);
    #line 3736 
    adapter->adminq_task.func = & iavf_adminq_task;
  }
  {
    #line 3737 
    struct lock_class_key __key_5;
    #line 3737 
    __init_work(& adapter->watchdog_task.work,0);
    #line 3737 
    atomic_long_t __constr_expr_46 = {.counter = 137438953408LL};
    #line 3737 
    adapter->watchdog_task.work.data = __constr_expr_46;
    #line 3737 
    lockdep_init_map(& adapter->watchdog_task.work.lockdep_map,(char *)"(work_completion)",& __key_5,0);
    #line 3737 
    INIT_LIST_HEAD(& adapter->watchdog_task.work.entry);
    #line 3737 
    adapter->watchdog_task.work.func = & iavf_watchdog_task;
  }
  {
    #line 3737 
    struct lock_class_key __key_6;
    #line 3737 
    init_timer_key(& adapter->watchdog_task.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->watchdog_task)->timer",& __key_6);
  }
  {
    #line 3738 
    struct lock_class_key __key_7;
    #line 3738 
    __init_work(& adapter->client_task.work,0);
    #line 3738 
    atomic_long_t __constr_expr_47 = {.counter = 137438953408LL};
    #line 3738 
    adapter->client_task.work.data = __constr_expr_47;
    #line 3738 
    lockdep_init_map(& adapter->client_task.work.lockdep_map,(char *)"(work_completion)",& __key_7,0);
    #line 3738 
    INIT_LIST_HEAD(& adapter->client_task.work.entry);
    #line 3738 
    adapter->client_task.work.func = & iavf_client_task;
  }
  {
    #line 3738 
    struct lock_class_key __key_8;
    #line 3738 
    init_timer_key(& adapter->client_task.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->client_task)->timer",& __key_8);
  }
  {
    #line 3739 
    struct lock_class_key __key_9;
    #line 3739 
    __init_work(& adapter->init_task.work,0);
    #line 3739 
    atomic_long_t __constr_expr_48 = {.counter = 137438953408LL};
    #line 3739 
    adapter->init_task.work.data = __constr_expr_48;
    #line 3739 
    lockdep_init_map(& adapter->init_task.work.lockdep_map,(char *)"(work_completion)",& __key_9,0);
    #line 3739 
    INIT_LIST_HEAD(& adapter->init_task.work.entry);
    #line 3739 
    adapter->init_task.work.func = & iavf_init_task;
  }
  {
    #line 3739 
    struct lock_class_key __key_10;
    #line 3739 
    init_timer_key(& adapter->init_task.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->init_task)->timer",& __key_10);
  }
  #line 3740 
  ;
  #line 3740 
  ;
  #line 3740 
  cif_queue_delayed_work(iavf_wq,& adapter->init_task,msecs_to_jiffies((pdev->devfn & 7U) * 5U));
  {
    #line 3744 
    struct lock_class_key __key_11;
    #line 3744 
    __init_waitqueue_head(& adapter->down_waitqueue,(char *)"&adapter->down_waitqueue",& __key_11);
  }
  #line 3746 
  return 0;
  #line 3748 
  err_ioremap: 
               #line 3748 
  ;
  #line 3749 
  cif_free_netdev(netdev);
  #line 3750 
  err_alloc_etherdev: 
                      #line 3750 
  ;
  #line 3751 
  pci_release_regions(pdev);
  #line 3752 
  err_pci_reg: 
               #line 3752 
  ;
  #line 3753 
  err_dma: 
           #line 3753 
  ;
  #line 3754 
  pci_disable_device(pdev);
  #line 3755 
  return err;
}

#line 3766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_suspend(struct pci_dev *pdev, pm_message_t state)
{
  #line 3768 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 3769 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 3770 
  int retval = 0;
  #line 3772 
  netif_device_detach(netdev);
  #line 3774 
  while (1) {
    #line 3774 
    if (! ((int)test_and_set_bit(0L,& adapter->crit_section) != 0)) 
                                                                    #line 3774 
                                                                    break;
    #line 3776 
    usleep_range(500UL,1000UL);
  }
  #line 3778 
  if ((int)netif_running(netdev) != 0) {
    #line 3779 
    rtnl_lock();
    #line 3780 
    iavf_down(adapter);
    #line 3781 
    rtnl_unlock();
  }
  #line 3783 
  iavf_free_misc_irq(adapter);
  #line 3784 
  iavf_reset_interrupt_capability(adapter);
  #line 3786 
  cif_clear_bit(0L,& adapter->crit_section);
  #line 3788 
  retval = pci_save_state(pdev);
  #line 3789 
  if (retval != 0) 
                   #line 3790 
                   return retval;
  #line 3792 
  pci_disable_device(pdev);
  #line 3794 
  return 0;
}

#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_resume(struct pci_dev *pdev)
{
  #line 3807 
  u32 err;
  #line 3805 
  struct iavf_adapter *adapter = pci_get_drvdata(pdev);
  #line 3806 
  struct net_device *netdev = adapter->netdev;
  #line 3809 
  pci_set_power_state(pdev,0);
  #line 3810 
  pci_restore_state(pdev);
  #line 3814 
  pci_save_state(pdev);
  #line 3816 
  err = (unsigned int)pci_enable_device_mem(pdev);
  #line 3817 
  if (err != 0U) {
    #line 3818 
    _dev_err(& pdev->dev,(char *)"Cannot enable PCI device from suspend.\n");
    #line 3819 
    return (int)err;
  }
  #line 3821 
  pci_set_master(pdev);
  #line 3823 
  rtnl_lock();
  #line 3824 
  err = (unsigned int)iavf_set_interrupt_capability(adapter);
  #line 3825 
  if (err != 0U) {
    #line 3826 
    rtnl_unlock();
    #line 3827 
    _dev_err(& pdev->dev,(char *)"Cannot enable MSI-X interrupts.\n");
    #line 3828 
    return (int)err;
  }
  #line 3830 
  err = (unsigned int)iavf_request_misc_irq(adapter);
  #line 3831 
  rtnl_unlock();
  #line 3832 
  if (err != 0U) {
    #line 3833 
    _dev_err(& pdev->dev,(char *)"Cannot get interrupt vector.\n");
    #line 3834 
    return (int)err;
  }
  #line 3837 
  cif_queue_work(iavf_wq,& adapter->reset_task);
  #line 3839 
  netif_device_attach(netdev);
  #line 3841 
  return (int)err;
}

#line 3854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_remove(struct pci_dev *pdev)
{
  #line 3933 
  void *__mptr_5;
  #line 3924 
  void *__mptr_2;
  #line 3920 
  void *__mptr;
  #line 3933 
  void *__mptr_6;
  #line 3924 
  void *__mptr_3;
  #line 3920 
  void *__mptr_0;
  #line 3858 
  struct iavf_vlan_filter *vlf;
  #line 3858 
  struct iavf_vlan_filter *vlftmp;
  #line 3859 
  struct iavf_mac_filter *f;
  #line 3859 
  struct iavf_mac_filter *ftmp;
  #line 3860 
  struct iavf_cloud_filter *cf;
  #line 3860 
  struct iavf_cloud_filter *cftmp;
  #line 3862 
  int err;
  #line 3856 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 3857 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 3861 
  struct iavf_hw *hw = & adapter->hw;
  #line 3864 
  cif_set_bit(2L,& adapter->crit_section);
  #line 3865 
  cancel_delayed_work_sync(& adapter->init_task);
  #line 3866 
  cancel_work_sync(& adapter->reset_task);
  #line 3867 
  cancel_delayed_work_sync(& adapter->client_task);
  #line 3868 
  if ((int)adapter->netdev_registered != 0) {
    #line 3869 
    cif_unregister_netdev(netdev);
    #line 3870 
    adapter->netdev_registered = (_Bool)0;
  }
  #line 3872 
  if (adapter->vf_res != (struct virtchnl_vf_resource *)0 && ((adapter->vf_res)->vf_cap_flags & 2U) != 0U) {
    #line 3873 
    err = iavf_lan_del_device(adapter);
    #line 3874 
    if (err != 0) 
                  #line 3875 
                  _dev_warn(& pdev->dev,(char *)"Failed to delete client device: %d\n",err);
  }
  #line 3880 
  adapter->state = __IAVF_REMOVE;
  #line 3881 
  adapter->aq_required = 0U;
  #line 3882 
  adapter->flags &= 4294901759U;
  #line 3883 
  iavf_request_reset(adapter);
  #line 3884 
  msleep(50U);
  #line 3886 
  if (! iavf_asq_done(hw)) {
    #line 3887 
    iavf_request_reset(adapter);
    #line 3888 
    msleep(50U);
  }
  #line 3890 
  iavf_free_all_tx_resources(adapter);
  #line 3891 
  iavf_free_all_rx_resources(adapter);
  #line 3892 
  iavf_misc_irq_disable(adapter);
  #line 3893 
  iavf_free_misc_irq(adapter);
  #line 3894 
  iavf_reset_interrupt_capability(adapter);
  #line 3895 
  iavf_free_q_vectors(adapter);
  #line 3897 
  cancel_delayed_work_sync(& adapter->watchdog_task);
  #line 3899 
  cancel_work_sync(& adapter->adminq_task);
  #line 3901 
  iavf_free_rss(adapter);
  #line 3903 
  if ((unsigned int)hw->aq.asq.count != 0U) 
                                            #line 3904 
                                            iavf_shutdown_adminq(hw);
  #line 3907 
  mutex_destroy(& hw->aq.arq_mutex);
  #line 3908 
  mutex_destroy(& hw->aq.asq_mutex);
  #line 3910 
  iounmap((void *)hw->hw_addr);
  #line 3911 
  pci_release_regions(pdev);
  #line 3912 
  iavf_free_all_tx_resources(adapter);
  #line 3913 
  iavf_free_all_rx_resources(adapter);
  #line 3914 
  iavf_free_queues(adapter);
  #line 3915 
  kfree((void *)adapter->vf_res);
  #line 3916 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 3920 
  __mptr = (void *)adapter->mac_filter_list.next;
  #line 3920 
  f = ((struct iavf_mac_filter *)__mptr);
  #line 3920 
  __mptr_0 = (void *)f->list.next;
  #line 3921 
  ftmp = ((struct iavf_mac_filter *)__mptr_0);
  #line 3920 
  while (& f->list != & adapter->mac_filter_list) {
    #line 3920 
    void *__mptr_1;
    #line 3921 
    list_del(& f->list);
    #line 3922 
    kfree((void *)f);
    #line 3920 
    f = ftmp;
    #line 3920 
    __mptr_1 = (void *)ftmp->list.next;
    #line 3920 
    ftmp = ((struct iavf_mac_filter *)__mptr_1);
  }
  #line 3924 
  __mptr_2 = (void *)adapter->vlan_filter_list.next;
  #line 3924 
  vlf = ((struct iavf_vlan_filter *)__mptr_2);
  #line 3924 
  __mptr_3 = (void *)vlf->list.next;
  #line 3925 
  vlftmp = ((struct iavf_vlan_filter *)__mptr_3);
  #line 3924 
  while (& vlf->list != & adapter->vlan_filter_list) {
    #line 3924 
    void *__mptr_4;
    #line 3926 
    list_del(& vlf->list);
    #line 3927 
    kfree((void *)vlf);
    #line 3924 
    vlf = vlftmp;
    #line 3924 
    __mptr_4 = (void *)vlftmp->list.next;
    #line 3924 
    vlftmp = ((struct iavf_vlan_filter *)__mptr_4);
  }
  #line 3930 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter(& adapter->mac_vlan_list_lock);
  #line 3932 
  cif_spin_lock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 3933 
  __mptr_5 = (void *)adapter->cloud_filter_list.next;
  #line 3933 
  cf = ((struct iavf_cloud_filter *)(__mptr_5 + 18446744073709551608U));
  #line 3933 
  __mptr_6 = (void *)cf->list.next;
  #line 3934 
  cftmp = ((struct iavf_cloud_filter *)(__mptr_6 + 18446744073709551608U));
  #line 3933 
  while (& cf->list != & adapter->cloud_filter_list) {
    #line 3933 
    void *__mptr_7;
    #line 3934 
    list_del(& cf->list);
    #line 3935 
    kfree((void *)cf);
    #line 3933 
    cf = cftmp;
    #line 3933 
    __mptr_7 = (void *)cftmp->list.next;
    #line 3933 
    cftmp = ((struct iavf_cloud_filter *)(__mptr_7 + 18446744073709551608U));
  }
  #line 3937 
  cif_spin_unlock_bh_cloud_filter_list_lock_of_iavf_adapter(& adapter->cloud_filter_list_lock);
  #line 3939 
  cif_free_netdev(netdev);
  #line 3941 
  pci_disable_pcie_error_reporting(pdev);
  #line 3943 
  pci_disable_device(pdev);
  #line 3944 
  return;
}

#line 3946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static struct pci_driver iavf_driver = {.name = (char *)(& iavf_driver_name), .id_table = (struct pci_device_id *)(& iavf_pci_tbl), .probe = & iavf_probe, .remove = & iavf_remove, .suspend = & iavf_suspend, .resume = & iavf_resume, .shutdown = & iavf_shutdown};
#line 3964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static int iavf_init_module(void)
{
  #line 3966 
  int ret;
  #line 3968 
  printk((char *)"\001",(char *)(& iavf_driver_string),(char *)(& iavf_driver_version));
  #line 3971 
  printk((char *)"\001",(char *)(& iavf_copyright));
  #line 3973 
  iavf_wq = alloc_workqueue((char *)"%s",10U,1,(char *)(& iavf_driver_name));
  #line 3975 
  if (iavf_wq == (struct workqueue_struct *)0) {
    #line 3976 
    printk((char *)"\001",(char *)(& iavf_driver_name));
    #line 3977 
    return -12;
  }
  #line 3979 
  ret = cif___pci_register_driver(& iavf_driver,& __this_module,(char *)"iavf");
  #line 3980 
  return ret;
}

#line 3991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_main.c"
static void iavf_exit_module(void)
{
  #line 3993 
  cif_pci_unregister_driver(& iavf_driver);
  #line 3994 
  destroy_workqueue(iavf_wq);
  #line 3995 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
struct pci_driver *emg_alias_iavf_driver = & iavf_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
struct pci_device_id (*emg_alias_iavf_pci_tbl)[5U] = & iavf_pci_tbl;
#line 97 
#line 97 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 98 
#line 98 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 99 
#line 99 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 100 
#line 100 
void emg_free_netdev(struct net_device *arg0);
#line 101 
#line 101 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 102 
#line 102 
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);
#line 103 
#line 103 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 104 
#line 104 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 105 
#line 105 
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);
#line 106 
#line 106 
void emg_unregister_netdev(struct net_device *arg0);
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
int emg_wrapper_iavf_close(struct net_device *arg0)
{
  #line 111 
  return iavf_close(arg0);
}

#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
enum irqreturn emg_wrapper_iavf_msix_aq(int arg0, void *arg1)
{
  #line 116 
  return iavf_msix_aq(arg0,arg1);
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
enum irqreturn emg_wrapper_iavf_msix_clean_rings(int arg0, void *arg1)
{
  #line 121 
  return iavf_msix_clean_rings(arg0,arg1);
}

#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
int emg_wrapper_iavf_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 126 
  return iavf_probe(arg0,arg1);
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
void emg_wrapper_iavf_remove(struct pci_dev *arg0)
{
  #line 131 
  iavf_remove(arg0);
  #line 132 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
int emg_wrapper_iavf_resume(struct pci_dev *arg0)
{
  #line 136 
  return iavf_resume(arg0);
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
void emg_wrapper_iavf_shutdown(struct pci_dev *arg0)
{
  #line 141 
  iavf_shutdown(arg0);
  #line 142 
  return;
}

#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
int emg_wrapper_iavf_suspend(struct pci_dev *arg0, struct pm_message arg1)
{
  #line 146 
  return iavf_suspend(arg0,arg1);
}

#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
void emg_iavf_exit_module(void)
{
  #line 151 
  iavf_exit_module();
  #line 152 
  return;
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
int emg_iavf_init_module(void)
{
  #line 155 
  return iavf_init_module();
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 176 
  ldv_set_bit(nr,addr);
  #line 177 
  return;
}

#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 183 
  ldv_clear_bit(nr,addr);
  #line 184 
  return;
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 190 
  ldv_init_list_head(list);
  #line 191 
  return;
}

#line 357  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 361 
  return emg_queue_work(wq,work);
}

#line 365  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 369 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 525  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 528 
  return ldv_kcalloc(n,size,flags);
}

#line 546  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 549 
  return ldv_kzalloc(size,flags);
}

#line 607  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 610 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 612 
  spin_lock(lock);
  #line 613 
  return;
}

#line 647  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 650 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 652 
  spin_unlock(lock);
  #line 653 
  return;
}

#line 885  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 889 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 893  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 897 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 901  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter(spinlock_t *lock)
{
  #line 904 
  ldv_spin_model_lock((char *)"mac_vlan_list_lock_of_iavf_adapter");
  #line 906 
  spin_lock_bh(lock);
  #line 907 
  return;
}

#line 910  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter(spinlock_t *lock)
{
  #line 913 
  ldv_spin_model_unlock((char *)"mac_vlan_list_lock_of_iavf_adapter");
  #line 915 
  spin_unlock_bh(lock);
  #line 916 
  return;
}

#line 919  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_spin_lock_bh_cloud_filter_list_lock_of_iavf_adapter(spinlock_t *lock)
{
  #line 922 
  ldv_spin_model_lock((char *)"cloud_filter_list_lock_of_iavf_adapter");
  #line 924 
  spin_lock_bh(lock);
  #line 925 
  return;
}

#line 928  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_spin_unlock_bh_cloud_filter_list_lock_of_iavf_adapter(spinlock_t *lock)
{
  #line 931 
  ldv_spin_model_unlock((char *)"cloud_filter_list_lock_of_iavf_adapter");
  #line 933 
  spin_unlock_bh(lock);
  #line 934 
  return;
}

#line 937  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay)
{
  #line 941 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 945  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 949 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 953  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 957 
  emg_free_netdev(dev);
  #line 958 
  return;
}

#line 961  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 965 
  emg_unregister_netdev(dev);
  #line 966 
  return;
}

#line 969  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 973 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 977  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 981 
  emg_pci_unregister_driver(dev);
  #line 982 
  return;
}

/* compiler builtin: 
   void __builtin_va_end(__builtin_va_list);   */
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list);   */
#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 474 
int vsnprintf(char *, size_t, char *, __builtin_va_list);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 15 
void __cmpxchg_wrong_size(void);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 303  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_ethtool.i.aux"
static bool cif_queue_work_0(struct workqueue_struct *wq, struct work_struct *work);
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 4756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 389 
int iavf_request_queues(struct iavf_adapter *adapter, int num);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static struct iavf_stats iavf_gstrings_queue_stats[2U] = {{.stat_string = {(char)'%', (char)'s', (char)'-', (char)'%', (char)'u', (char)'.', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 8, .stat_offset = 88}, {.stat_string = {(char)'%', (char)'s', (char)'-', (char)'%', (char)'u', (char)'.', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 96}};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void iavf_add_one_ethtool_stat(u64 *data, void *pointer, struct iavf_stats *stat)
{
  #line 73 
  char *p;
  #line 75 
  if (pointer == (void *)0) {
    #line 79 
    *data = 0ULL;
    #line 80 
    return;
  }
  #line 83 
  p = (char *)pointer + (unsigned long)stat->stat_offset;
  #line 84 
  switch (stat->sizeof_stat) {
    #line 85 
    case 8: 
            #line 85 
    ;
    #line 86 
    *data = *((u64 *)p);
    #line 87 
    break;
    #line 88 
    case 4: 
            #line 88 
    ;
    #line 89 
    *data = (unsigned long long)*((u32 *)p);
    #line 90 
    break;
    #line 91 
    case 2: 
            #line 91 
    ;
    #line 92 
    *data = (unsigned long long)*((u16 *)p);
    #line 93 
    break;
    #line 94 
    case 1: 
            #line 94 
    ;
    #line 95 
    *data = (unsigned long long)*((u8 *)p);
    #line 96 
    break;
    #line 97 
    default: 
             #line 97 
    ;
    {
      #line 98 
      bool __warned;
      #line 98 
      int __ret_warn_once = 1;
      #line 98 
      if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
        #line 98 
        __warned = (_Bool)1;
        {
          #line 98 
          int __ret_warn_on = 1;
          #line 98 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 98 
            __warn_printk((char *)"unexpected stat size for %s",(char *)(& stat->stat_string));
            #line 99 
            ldv_inline_asm();
            #line 100 
            ldv_inline_asm();
          }
          #line 98 
          long tmp = (long)(__ret_warn_on != 0);
        }
      }
      #line 98 
      long tmp_3 = (long)(__ret_warn_once != 0);
    }
    #line 100 
    *data = 0ULL;
  }
  #line 102 
  return;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void __iavf_add_ethtool_stats(u64 **data, void *pointer, struct iavf_stats *stats, unsigned int size)
{
  #line 122 
  unsigned int i;
  #line 124 
  i = 0U;
  #line 124 
  while (i < size) {
    #line 125 
    u64 *tmp;
    #line 125 
    ;
    #line 125 
    ;
    #line 125 
    tmp = *data;
    #line 125 
    (*data) ++;
    #line 125 
    ;
    #line 125 
    iavf_add_one_ethtool_stat(tmp,pointer,stats + (unsigned long)i);
    #line 124 
    i ++;
  }
  #line 126 
  return;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void iavf_add_queue_stats(u64 **data, struct iavf_ring *ring)
{
  #line 163 
  unsigned int start;
  #line 164 
  unsigned int i;
  #line 161 
  unsigned int size = 2U;
  #line 162 
  struct iavf_stats *stats = (struct iavf_stats *)(& iavf_gstrings_queue_stats);
  #line 171 
  while (1) {
    #line 172 
    if (ring != (struct iavf_ring *)0) 
                                       #line 172 
                                       start = u64_stats_fetch_begin_irq(& ring->syncp); else 
                                                                    #line 172 
                                                                    start = 0U;
    #line 173 
    i = 0U;
    #line 173 
    while (i <= 1U) {
      #line 174 
      iavf_add_one_ethtool_stat(*data + (unsigned long)i,(void *)ring,stats + (unsigned long)i);
      #line 173 
      i ++;
    }
    #line 175 
    if (ring != (struct iavf_ring *)0) {
      #line 175 
      if (! ((int)u64_stats_fetch_retry_irq(& ring->syncp,start) != 0)) 
        #line 171 
        break;
    }
    else 
         #line 171 
         break;
  }
  #line 178 
  *data += 2U;
  #line 179 
  return;
}

#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void __iavf_add_stat_strings(u8 **p, struct iavf_stats *stats, unsigned int size , ...)
{
  #line 193 
  unsigned int i;
  #line 195 
  i = 0U;
  #line 195 
  while (i < size) {
    {
      #line 196 
      va_list args;
      #line 198 
      #line 198 
      __builtin_va_start(args,size);
      #line 199 
      vsnprintf((char *)*p,32UL,(char *)(& (stats + (unsigned long)i)->stat_string),args);
      #line 200 
      *p += 32U;
      #line 201 
      __builtin_va_end(args);
    }
    #line 195 
    i ++;
  }
  #line 203 
  return;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static struct iavf_stats iavf_gstrings_stats[12U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1776}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 1784}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 1792}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 1800}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1808}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'k', (char)'n', (char)'o', (char)'w', (char)'n', (char)'_', (char)'p', (char)'r', (char)'o', (char)'t', (char)'o', (char)'c', (char)'o', (char)'l'}, .sizeof_stat = 8, .stat_offset = 1816}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1824}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 1832}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 1840}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 1848}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1856}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1864}};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static struct iavf_priv_flags iavf_gstrings_priv_flags[1U] = {{.flag_string = {(char)'l', (char)'e', (char)'g', (char)'a', (char)'c', (char)'y', (char)'-', (char)'r', (char)'x'}, .flag = 32768U}};
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int iavf_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 276 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 278 
  cif_bitmap_zero((unsigned long *)(& cmd->link_modes.supported),74U);
  #line 279 
  cmd->base.autoneg = (unsigned char)0U;
  #line 280 
  cmd->base.port = (unsigned char)239U;
  #line 282 
  switch ((unsigned int)adapter->link_speed) {
    #line 283 
    case (unsigned int)16: 
                           #line 283 
    ;
    #line 284 
    cmd->base.speed = 40000U;
    #line 285 
    break;
    #line 286 
    case (unsigned int)64: 
                           #line 286 
    ;
    #line 288 
    cmd->base.speed = 25000U;
    #line 293 
    break;
    #line 294 
    case (unsigned int)32: 
                           #line 294 
    ;
    #line 295 
    cmd->base.speed = 20000U;
    #line 296 
    break;
    #line 297 
    case (unsigned int)8: 
                          #line 297 
    ;
    #line 298 
    cmd->base.speed = 10000U;
    #line 299 
    break;
    #line 300 
    case (unsigned int)4: 
                          #line 300 
    ;
    #line 301 
    cmd->base.speed = 1000U;
    #line 302 
    break;
    #line 303 
    case (unsigned int)2: 
                          #line 303 
    ;
    #line 304 
    cmd->base.speed = 100U;
    #line 305 
    break;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    break;
  }
  #line 309 
  cmd->base.duplex = (unsigned char)1U;
  #line 311 
  return 0;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int iavf_get_sset_count(struct net_device *netdev, int sset)
{
  #line 323 
  if (sset == 1) 
                 #line 324 
                 return 28;
  else 
    #line 326 
    if (sset == 2) 
                   #line 327 
                   return 1; else 
                                  #line 329 
                                  return -22;
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void iavf_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 344 
  unsigned int i;
  #line 343 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 346 
  __iavf_add_ethtool_stats(& data,(void *)adapter,(struct iavf_stats *)(& iavf_gstrings_stats),12U);
  #line 348 
  rcu_read_lock();
  #line 349 
  i = 0U;
  #line 349 
  while (i <= 3U) {
    {
      #line 350 
      struct iavf_ring *ring;
      #line 353 
      if ((unsigned int)adapter->num_active_queues > i) 
                                                        #line 353 
                                                        ring = adapter->tx_rings + (unsigned long)i; else 
                                                                    #line 353 
                                                                    ring = (struct iavf_ring *)0;
      #line 355 
      iavf_add_queue_stats(& data,ring);
      #line 358 
      if ((unsigned int)adapter->num_active_queues > i) 
                                                        #line 358 
                                                        ring = adapter->rx_rings + (unsigned long)i; else 
                                                                    #line 358 
                                                                    ring = (struct iavf_ring *)0;
      #line 360 
      iavf_add_queue_stats(& data,ring);
    }
    #line 349 
    i ++;
  }
  #line 362 
  rcu_read_unlock();
  #line 363 
  return;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void iavf_get_priv_flag_strings(struct net_device *netdev, u8 *data)
{
  #line 374 
  unsigned int i;
  #line 376 
  i = 0U;
  #line 376 
  while (i == 0U) {
    #line 377 
    snprintf((char *)data,32UL,(char *)"%s",(char *)(& iavf_gstrings_priv_flags[i].flag_string));
    #line 379 
    data += 32U;
    #line 376 
    i ++;
  }
  #line 381 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void iavf_get_stat_strings(struct net_device *netdev, u8 *data)
{
  #line 392 
  unsigned int i;
  #line 394 
  __iavf_add_stat_strings(& data,(struct iavf_stats *)(& iavf_gstrings_stats),12U);
  #line 399 
  i = 0U;
  #line 399 
  while (netdev->num_tx_queues > i) {
    #line 400 
    __iavf_add_stat_strings(& data,(struct iavf_stats *)(& iavf_gstrings_queue_stats),2U,(char *)"tx",i);
    #line 402 
    __iavf_add_stat_strings(& data,(struct iavf_stats *)(& iavf_gstrings_queue_stats),2U,(char *)"rx",i);
    #line 399 
    i ++;
  }
  #line 404 
  return;
}

#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void iavf_get_strings(struct net_device *netdev, u32 sset, u8 *data)
{
  #line 417 
  switch (sset) {
    #line 418 
    case (u32)1: 
                 #line 418 
    ;
    #line 419 
    iavf_get_stat_strings(netdev,data);
    #line 420 
    break;
    #line 421 
    case (u32)2: 
                 #line 421 
    ;
    #line 422 
    iavf_get_priv_flag_strings(netdev,data);
    #line 423 
    break;
    #line 424 
    default: 
             #line 424 
    ;
    #line 425 
    break;
  }
  #line 427 
  return;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static u32 iavf_get_priv_flags(struct net_device *netdev)
{
  #line 442 
  u32 i;
  #line 441 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 442 
  u32 ret_flags = 0U;
  #line 444 
  i = 0U;
  #line 444 
  while (i == 0U) {
    {
      #line 445 
      struct iavf_priv_flags *priv_flags;
      #line 447 
      priv_flags = & iavf_gstrings_priv_flags[i];
      #line 449 
      if ((priv_flags->flag & adapter->flags) != 0U) 
                                                     #line 450 
                                                     ret_flags = (unsigned int)(1UL << i) | ret_flags;
    }
    #line 444 
    i ++;
  }
  #line 453 
  return ret_flags;
}

#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int iavf_set_priv_flags(struct net_device *netdev, u32 flags)
{
  #line 496 
  u32 __ret;
  #line 468 
  union __anonunion___u_2157 __u;
  #line 464 
  u32 orig_flags;
  #line 464 
  u32 new_flags;
  #line 464 
  u32 changed_flags;
  #line 465 
  u32 i;
  #line 463 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 467 
  __read_once_size((void *)(& adapter->flags),(void *)(& __u.__c),4);
  #line 467 
  orig_flags = (__u.__val);
  #line 468 
  new_flags = orig_flags;
  #line 470 
  i = 0U;
  #line 470 
  while (i == 0U) {
    {
      #line 471 
      struct iavf_priv_flags *priv_flags;
      #line 473 
      priv_flags = & iavf_gstrings_priv_flags[i];
      #line 475 
      if ((((unsigned long)flags >> i) & 1UL) != 0UL) 
                                                      #line 476 
                                                      new_flags = priv_flags->flag | new_flags; else 
                                                                    #line 478 
                                                                    new_flags = ~ priv_flags->flag & new_flags;
      #line 480 
      if ((int)priv_flags->read_only != 0 && ((unsigned long)(orig_flags ^ new_flags) & ~ (1UL << i)) != 0UL) 
        #line 482 
        return -95;
    }
    #line 470 
    i ++;
  }
  {
    #line 496 
    u32 *__ai_ptr = & adapter->flags;
    #line 496 
    kasan_check_read((void *)__ai_ptr,4U);
    {
      #line 496 
      u32 __old = orig_flags;
      #line 496 
      u32 __new = new_flags;
      #line 496 
      switch (4UL) {
        #line 496 
        case (unsigned long)1: 
                               #line 496 
        ;
        {
          #line 496 
          u8 *__ptr = (u8 *)__ai_ptr;
          #line 497 
          ldv_inline_asm();
          #line 496 
          break;
        }
        #line 496 
        case (unsigned long)2: 
                               #line 496 
        ;
        {
          #line 496 
          u16 *__ptr_0 = (u16 *)__ai_ptr;
          #line 497 
          ldv_inline_asm();
          #line 496 
          break;
        }
        #line 496 
        case (unsigned long)4: 
                               #line 496 
        ;
        {
          #line 496 
          u32 *__ptr_1 = __ai_ptr;
          #line 497 
          ldv_inline_asm();
          #line 496 
          break;
        }
        #line 496 
        case (unsigned long)8: 
                               #line 496 
        ;
        {
          #line 496 
          u64 *__ptr_2 = (u64 *)__ai_ptr;
          #line 497 
          ldv_inline_asm();
          #line 496 
          break;
        }
        #line 496 
        default: 
                 #line 496 
        ;
        #line 496 
        __cmpxchg_wrong_size();
      }
      }
    }
  #line 496 
  ;
  #line 496 
  if (__ret != orig_flags) {
    #line 497 
    _dev_warn(& (adapter->pdev)->dev,(char *)"Unable to update adapter->flags as it was modified by another thread...\n");
    #line 499 
    return -11;
  }
  #line 502 
  changed_flags = orig_flags ^ new_flags;
  #line 510 
  if (((unsigned long)changed_flags & 32768UL) != 0UL) {
    #line 511 
    if ((int)netif_running(netdev) != 0) {
      #line 512 
      adapter->flags |= 32U;
      #line 513 
      cif_queue_work_0(iavf_wq,& adapter->reset_task);
    }
  }
  #line 517 
  return 0;
}

#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static u32 iavf_get_msglevel(struct net_device *netdev)
{
  #line 528 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 530 
  return (unsigned int)adapter->msg_enable;
}

#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void iavf_set_msglevel(struct net_device *netdev, u32 data)
{
  #line 543 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 545 
  if ((data & 4026531840U) != 0U) 
                                  #line 546 
                                  adapter->hw.debug_mask = data;
  #line 547 
  adapter->msg_enable = (unsigned short)data;
  #line 548 
  return;
}

#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void iavf_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 560 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 562 
  strlcpy((char *)(& drvinfo->driver),(char *)(& iavf_driver_name),32UL);
  #line 563 
  strlcpy((char *)(& drvinfo->version),(char *)(& iavf_driver_version),32UL);
  #line 564 
  strlcpy((char *)(& drvinfo->fw_version),(char *)"N/A",4UL);
  #line 565 
  ;
  #line 565 
  strlcpy((char *)(& drvinfo->bus_info),pci_name(adapter->pdev),32UL);
  #line 566 
  drvinfo->n_priv_flags = 1U;
  #line 567 
  return;
}

#line 577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void iavf_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 580 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 582 
  ring->rx_max_pending = 4096U;
  #line 583 
  ring->tx_max_pending = 4096U;
  #line 584 
  ring->rx_pending = adapter->rx_desc_count;
  #line 585 
  ring->tx_pending = adapter->tx_desc_count;
  #line 586 
  return;
}

#line 596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int iavf_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 610 
  unsigned int tmp_6;
  #line 605 
  unsigned int __UNIQUE_ID___x547;
  #line 605 
  unsigned int tmp_2;
  #line 610 
  unsigned int __UNIQUE_ID___x551;
  #line 600 
  u32 new_rx_count;
  #line 600 
  u32 new_tx_count;
  #line 599 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 602 
  if (ring->rx_mini_pending != 0U || ring->rx_jumbo_pending != 0U) 
                                                                   #line 603 
                                                                   return -22;
  {
    #line 605 
    unsigned int __UNIQUE_ID___x545;
    #line 605 
    unsigned int tmp_0;
    {
      #line 605 
      __UNIQUE_ID___x545 = ring->tx_pending;
      #line 605 
      unsigned int __UNIQUE_ID___y546 = 64U;
      #line 605 
      if (__UNIQUE_ID___x545 > __UNIQUE_ID___y546) 
                                                   #line 605 
                                                   tmp_0 = __UNIQUE_ID___x545; else 
                                                                    #line 605 
                                                                    tmp_0 = __UNIQUE_ID___y546;
      }
    #line 605 
    __UNIQUE_ID___x547 = tmp_0;
    #line 605 
    unsigned int __UNIQUE_ID___y548 = 4096U;
    #line 605 
    if (__UNIQUE_ID___x547 < __UNIQUE_ID___y548) 
                                                 #line 605 
                                                 tmp_2 = __UNIQUE_ID___x547; else 
                                                                    #line 605 
                                                                    tmp_2 = __UNIQUE_ID___y548;
    }
  #line 605 
  new_tx_count = tmp_2;
  #line 608 
  new_tx_count = (new_tx_count + 31U) & 4294967264U;
  {
    #line 610 
    unsigned int __UNIQUE_ID___x549;
    #line 610 
    unsigned int tmp_4;
    {
      #line 610 
      __UNIQUE_ID___x549 = ring->rx_pending;
      #line 610 
      unsigned int __UNIQUE_ID___y550 = 64U;
      #line 610 
      if (__UNIQUE_ID___x549 > __UNIQUE_ID___y550) 
                                                   #line 610 
                                                   tmp_4 = __UNIQUE_ID___x549; else 
                                                                    #line 610 
                                                                    tmp_4 = __UNIQUE_ID___y550;
      }
    #line 610 
    __UNIQUE_ID___x551 = tmp_4;
    #line 610 
    unsigned int __UNIQUE_ID___y552 = 4096U;
    #line 610 
    if (__UNIQUE_ID___x551 < __UNIQUE_ID___y552) 
                                                 #line 610 
                                                 tmp_6 = __UNIQUE_ID___x551; else 
                                                                    #line 610 
                                                                    tmp_6 = __UNIQUE_ID___y552;
    }
  #line 610 
  new_rx_count = tmp_6;
  #line 613 
  new_rx_count = (new_rx_count + 31U) & 4294967264U;
  #line 616 
  if (adapter->tx_desc_count == new_tx_count && adapter->rx_desc_count == new_rx_count) 
    #line 618 
    return 0;
  #line 620 
  adapter->tx_desc_count = new_tx_count;
  #line 621 
  adapter->rx_desc_count = new_rx_count;
  #line 623 
  if ((int)netif_running(netdev) != 0) {
    #line 624 
    adapter->flags |= 32U;
    #line 625 
    cif_queue_work_0(iavf_wq,& adapter->reset_task);
  }
  #line 628 
  return 0;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int __iavf_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec, int queue)
{
  #line 646 
  struct iavf_ring *rx_ring;
  #line 646 
  struct iavf_ring *tx_ring;
  #line 644 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 645 
  struct iavf_vsi *vsi = & adapter->vsi;
  #line 648 
  ec->tx_max_coalesced_frames = (unsigned int)vsi->work_limit;
  #line 649 
  ec->rx_max_coalesced_frames = (unsigned int)vsi->work_limit;
  #line 654 
  if (queue < 0) 
                 #line 655 
                 queue = 0;
  else 
    #line 656 
    if (adapter->num_active_queues <= queue) 
                                             #line 657 
                                             return -22;
  #line 659 
  rx_ring = adapter->rx_rings + (unsigned long)queue;
  #line 660 
  tx_ring = adapter->tx_rings + (unsigned long)queue;
  #line 662 
  if (((int)rx_ring->itr_setting & 32768) != 0) 
                                                #line 663 
                                                ec->use_adaptive_rx_coalesce = 1U;
  #line 665 
  if (((int)tx_ring->itr_setting & 32768) != 0) 
                                                #line 666 
                                                ec->use_adaptive_tx_coalesce = 1U;
  #line 668 
  ec->rx_coalesce_usecs = (unsigned int)rx_ring->itr_setting & 4294934527U;
  #line 669 
  ec->tx_coalesce_usecs = (unsigned int)tx_ring->itr_setting & 4294934527U;
  #line 671 
  return 0;
}

#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int iavf_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 687 
  return __iavf_get_coalesce(netdev,ec,-1);
}

#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int iavf_get_per_queue_coalesce(struct net_device *netdev, u32 queue, struct ethtool_coalesce *ec)
{
  #line 701 
  return __iavf_get_coalesce(netdev,ec,(int)queue);
}

#line 712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void iavf_set_itr_per_queue(struct iavf_adapter *adapter, struct ethtool_coalesce *ec, int queue)
{
  #line 717 
  struct iavf_q_vector *q_vector;
  #line 715 
  struct iavf_ring *rx_ring = adapter->rx_rings + (unsigned long)queue;
  #line 716 
  struct iavf_ring *tx_ring = adapter->tx_rings + (unsigned long)queue;
  #line 719 
  rx_ring->itr_setting = (unsigned short)(((unsigned int)((unsigned short)ec->rx_coalesce_usecs) + 57345U) & 8190U);
  #line 720 
  tx_ring->itr_setting = (unsigned short)(((unsigned int)((unsigned short)ec->tx_coalesce_usecs) + 57345U) & 8190U);
  #line 722 
  rx_ring->itr_setting = (unsigned short)((unsigned int)rx_ring->itr_setting | 32768U);
  #line 723 
  if (ec->use_adaptive_rx_coalesce == 0U) 
                                          #line 724 
                                          rx_ring->itr_setting = (unsigned short)((unsigned int)rx_ring->itr_setting ^ 32768U);
  #line 726 
  tx_ring->itr_setting = (unsigned short)((unsigned int)tx_ring->itr_setting | 32768U);
  #line 727 
  if (ec->use_adaptive_tx_coalesce == 0U) 
                                          #line 728 
                                          tx_ring->itr_setting = (unsigned short)((unsigned int)tx_ring->itr_setting ^ 32768U);
  #line 730 
  q_vector = rx_ring->q_vector;
  #line 731 
  q_vector->rx.target_itr = (unsigned short)((unsigned int)rx_ring->itr_setting & 32767U);
  #line 733 
  q_vector = tx_ring->q_vector;
  #line 734 
  q_vector->tx.target_itr = (unsigned short)((unsigned int)tx_ring->itr_setting & 32767U);
  #line 735 
  return;
}

#line 750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int __iavf_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec, int queue)
{
  #line 755 
  int i;
  #line 753 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 754 
  struct iavf_vsi *vsi = & adapter->vsi;
  #line 757 
  if (ec->tx_max_coalesced_frames_irq != 0U || ec->rx_max_coalesced_frames_irq != 0U) 
    #line 758 
    vsi->work_limit = (unsigned short)ec->tx_max_coalesced_frames_irq;
  #line 760 
  if (ec->rx_coalesce_usecs == 0U) {
    #line 761 
    if (ec->use_adaptive_rx_coalesce != 0U) 
      #line 762 
      if (((int)adapter->msg_enable & 1) != 0) 
                                               #line 762 
                                               netdev_info(netdev,(char *)"rx-usecs=0, need to disable adaptive-rx for a complete disable\n");
  }
  else 
    #line 763 
    if (ec->rx_coalesce_usecs + 4294967294U > 8158U) {
      #line 765 
      if (((int)adapter->msg_enable & 1) != 0) 
                                               #line 765 
                                               netdev_info(netdev,(char *)"Invalid value, rx-usecs range is 0-8160\n");
      #line 766 
      return -22;
    }
    else 
      #line 767 
      if (ec->tx_coalesce_usecs == 0U) {
        #line 768 
        if (ec->use_adaptive_tx_coalesce != 0U) 
          #line 769 
          if (((int)adapter->msg_enable & 1) != 0) 
                                                   #line 769 
                                                   netdev_info(netdev,(char *)"tx-usecs=0, need to disable adaptive-tx for a complete disable\n");
      }
      else 
        #line 770 
        if (ec->tx_coalesce_usecs + 4294967294U > 8158U) {
          #line 772 
          if (((int)adapter->msg_enable & 1) != 0) 
                                                   #line 772 
                                                   netdev_info(netdev,(char *)"Invalid value, tx-usecs range is 0-8160\n");
          #line 773 
          return -22;
        }
  #line 779 
  if (queue < 0) {
    #line 780 
    i = 0;
    #line 780 
    while (adapter->num_active_queues > i) {
      #line 781 
      iavf_set_itr_per_queue(adapter,ec,i);
      #line 780 
      i ++;
    }
  }
  else 
    #line 782 
    if (adapter->num_active_queues > queue) 
                                            #line 783 
                                            iavf_set_itr_per_queue(adapter,ec,queue);
    else {
      #line 785 
      if (((int)adapter->msg_enable & 1) != 0) 
                                               #line 785 
                                               netdev_info(netdev,(char *)"Invalid queue value, queue range is 0 - %d\n",adapter->num_active_queues + -1);
      #line 787 
      return -22;
    }
  #line 790 
  return 0;
}

#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int iavf_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 803 
  return __iavf_set_coalesce(netdev,ec,-1);
}

#line 814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int iavf_set_per_queue_coalesce(struct net_device *netdev, u32 queue, struct ethtool_coalesce *ec)
{
  #line 817 
  return __iavf_set_coalesce(netdev,ec,(int)queue);
}

#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int iavf_get_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 831 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 832 
  int ret = -95;
  #line 834 
  switch (cmd->cmd) {
    #line 835 
    case (__u32)45: 
                    #line 835 
    ;
    #line 836 
    cmd->data = (unsigned long long)adapter->num_active_queues;
    #line 837 
    ret = 0;
    #line 838 
    break;
    #line 839 
    case (__u32)41: 
                    #line 839 
    ;
    #line 840 
    netdev_info(netdev,(char *)"RSS hash info is not available to vf, use pf.\n");
    #line 842 
    break;
    #line 843 
    default: 
             #line 843 
    ;
    #line 844 
    break;
  }
  #line 847 
  return ret;
}

#line 857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static void iavf_get_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  #line 860 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 863 
  ch->max_combined = 4U;
  #line 865 
  ch->max_other = 1U;
  #line 866 
  ch->other_count = 1U;
  #line 868 
  ch->combined_count = (unsigned int)adapter->num_active_queues;
  #line 869 
  return;
}

#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int iavf_set_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  #line 883 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 884 
  int num_req = (int)ch->combined_count;
  #line 886 
  if (adapter->num_active_queues != num_req && ((adapter->vf_res)->vf_cap_flags & 64U) == 0U) {
    #line 889 
    _dev_info(& (adapter->pdev)->dev,(char *)"PF is not capable of queue negotiation.\n");
    #line 890 
    return -22;
  }
  #line 893 
  if (((adapter->vf_res)->vf_cap_flags & 8388608U) != 0U && (unsigned int)adapter->num_tc != 0U) {
    #line 895 
    _dev_info(& (adapter->pdev)->dev,(char *)"Cannot set channels since ADq is enabled.\n");
    #line 896 
    return -22;
  }
  #line 902 
  if ((unsigned int)num_req + 4294967295U > 3U) 
                                                #line 903 
                                                return -22;
  #line 905 
  if ((ch->rx_count != 0U || ch->tx_count != 0U) || ch->other_count != 1U) 
    #line 906 
    return -22;
  #line 908 
  adapter->num_req_queues = num_req;
  #line 909 
  return iavf_request_queues(adapter,num_req);
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static u32 iavf_get_rxfh_key_size(struct net_device *netdev)
{
  #line 920 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 922 
  return (unsigned int)adapter->rss_key_size;
}

#line 931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static u32 iavf_get_rxfh_indir_size(struct net_device *netdev)
{
  #line 933 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 935 
  return (unsigned int)adapter->rss_lut_size;
}

#line 947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int iavf_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 951 
  u16 i;
  #line 950 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 953 
  if (hfunc != (u8 *)0U) 
                         #line 954 
                         *hfunc = (unsigned char)1U;
  #line 955 
  if (indir == (u32 *)0U) 
                          #line 956 
                          return 0;
  #line 958 
  memcpy((void *)key,(void *)adapter->rss_key,(unsigned long)adapter->rss_key_size);
  #line 961 
  i = (unsigned short)0U;
  #line 961 
  while ((int)adapter->rss_lut_size > (int)i) {
    #line 962 
    *(indir + (unsigned long)i) = (unsigned int)*(adapter->rss_lut + (unsigned long)i);
    #line 961 
    i = (u16)((int)i + 1);
  }
  #line 964 
  return 0;
}

#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static int iavf_set_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 981 
  u16 i;
  #line 980 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 984 
  if (key != (u8 *)0U || (unsigned int)hfunc > 1U) 
                                                   #line 986 
                                                   return -95;
  #line 987 
  if (indir == (u32 *)0U) 
                          #line 988 
                          return 0;
  #line 990 
  if (key != (u8 *)0U) 
                       #line 991 
                       memcpy((void *)adapter->rss_key,(void *)key,(unsigned long)adapter->rss_key_size);
  #line 994 
  i = (unsigned short)0U;
  #line 994 
  while ((int)adapter->rss_lut_size > (int)i) {
    #line 995 
    *(adapter->rss_lut + (unsigned long)i) = (unsigned char)*(indir + (unsigned long)i);
    #line 994 
    i = (u16)((int)i + 1);
  }
  #line 997 
  return iavf_config_rss(adapter);
}

#line 1000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
static struct ethtool_ops iavf_ethtool_ops = {.get_drvinfo = & iavf_get_drvinfo, .get_msglevel = & iavf_get_msglevel, .set_msglevel = & iavf_set_msglevel, .get_link = & ethtool_op_get_link, .get_coalesce = & iavf_get_coalesce, .set_coalesce = & iavf_set_coalesce, .get_ringparam = & iavf_get_ringparam, .set_ringparam = & iavf_set_ringparam, .get_strings = & iavf_get_strings, .get_ethtool_stats = & iavf_get_ethtool_stats, .get_priv_flags = & iavf_get_priv_flags, .set_priv_flags = & iavf_set_priv_flags, .get_sset_count = & iavf_get_sset_count, .get_rxnfc = & iavf_get_rxnfc, .get_rxfh_key_size = & iavf_get_rxfh_key_size, .get_rxfh_indir_size = & iavf_get_rxfh_indir_size, .get_rxfh = & iavf_get_rxfh, .set_rxfh = & iavf_set_rxfh, .get_channels = & iavf_get_channels, .set_channels = & iavf_set_channels, .get_per_queue_coalesce = & iavf_get_per_queue_coalesce, .set_per_queue_coalesce = & iavf_set_per_queue_coalesce, .get_link_ksettings = & iavf_get_link_ksettings};
#line 1033  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_ethtool.c"
void iavf_set_ethtool_ops(struct net_device *netdev)
{
  #line 1035 
  netdev->ethtool_ops = & iavf_ethtool_ops;
  #line 1036 
  return;
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 199 
  ldv_bitmap_zero(dst,nbits);
  #line 200 
  return;
}

#line 303  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_ethtool.i.aux"
static bool cif_queue_work_0(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 307 
  return emg_queue_work(wq,work);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_2171 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add_0(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_2173 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static size_t cif_strlen(char *s);
#line 26 
#line 831 
static void cif_mutex_lock_iavf_device_mutex(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 838  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static void cif_mutex_unlock_iavf_device_mutex(struct mutex *lock);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 297 
#line 297 
extern int ( /* missing proto */ __builtin_add_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t __ab_c_size(size_t a, size_t b, size_t c)
{
  #line 295 
  size_t __a;
  #line 295 
  size_t __b;
  #line 295 
  size_t *__d;
  #line 297 
  size_t __a_0;
  #line 297 
  size_t __b_0;
  #line 297 
  size_t *__d_0;
  #line 293 
  size_t bytes;
  {
    #line 295 
    __a = a;
    #line 295 
    __b = b;
    #line 295 
    __d = & bytes;
    #line 295 
    int tmp = & __a == __d;
    }
  #line 295 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 296 
                                                return 18446744073709551615UL;
  {
    #line 297 
    __a_0 = bytes;
    #line 297 
    __b_0 = c;
    #line 297 
    __d_0 = & bytes;
    #line 297 
    int tmp_3 = & __a_0 == __d_0;
    }
  #line 297 
  if (__builtin_add_overflow(__a_0,__b_0,__d_0) != 0) 
                                                      #line 298 
                                                      return 18446744073709551615UL;
  #line 300 
  return bytes;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 492  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf.h"
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
void iavf_notify_client_message(struct iavf_vsi *vsi, u8 *msg, u16 len);
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_prototype.h"
#line 64 
enum iavf_status iavf_aq_send_msg_to_pf(struct iavf_hw *hw, enum virtchnl_ops v_opcode, enum iavf_status v_retval, u8 *msg, u16 msglen, struct iavf_asq_cmd_details *cmd_details);
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
int iavf_register_client(struct iavf_client *client);
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.h"
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
int iavf_unregister_client(struct iavf_client *client);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static char iavf_client_interface_version_str[8U] = {(char)'0'};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static struct iavf_client *vf_registered_client;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static struct list_head iavf_devices = {.next = & iavf_devices, .prev = & iavf_devices};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static struct mutex iavf_device_mutex = {.wait_lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"iavf_device_mutex.wait_lock"}}}}, .wait_list = {.next = & iavf_device_mutex.wait_list, .prev = & iavf_device_mutex.wait_list}, .magic = (void *)(& iavf_device_mutex), .dep_map = {.name = (char *)"iavf_device_mutex"}};
#line 17 
#line 418 
static u32 iavf_client_virtchnl_send(struct iavf_info *ldev, struct iavf_client *client, u8 *msg, u16 len);
#line 21 
#line 445 
static int iavf_client_setup_qvlist(struct iavf_info *ldev, struct iavf_client *client, struct iavf_qvlist_info *qvlist_info);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static struct iavf_ops iavf_lan_ops = {.setup_qvlist = & iavf_client_setup_qvlist, .virtchnl_send = & iavf_client_virtchnl_send};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static void iavf_client_get_params(struct iavf_vsi *vsi, struct iavf_params *params)
{
  #line 38 
  int i;
  #line 40 
  memset((void *)params,0,36UL);
  #line 41 
  params->mtu = (unsigned short)(vsi->netdev)->mtu;
  #line 42 
  params->link_up = (unsigned short)(vsi->back)->link_up;
  #line 44 
  i = 0;
  #line 44 
  while (i <= 7) {
    #line 45 
    params->qos.prio_qos[i].tc = (unsigned char)0U;
    #line 46 
    params->qos.prio_qos[i].qs_handle = vsi->qs_handle;
    #line 44 
    i ++;
  }
  #line 48 
  return;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
void iavf_notify_client_message(struct iavf_vsi *vsi, u8 *msg, u16 len)
{
  #line 60 
  struct iavf_client_instance *cinst;
  #line 62 
  if (vsi == (struct iavf_vsi *)0) 
                                   #line 63 
                                   return;
  #line 65 
  cinst = (vsi->back)->cinst;
  #line 66 
  if (((cinst == (struct iavf_client_instance *)0 || cinst->client == (struct iavf_client *)0) || (cinst->client)->ops == (struct iavf_client_ops *)0) || ((cinst->client)->ops)->virtchnl_receive == (int (*)(struct iavf_info *, struct iavf_client *, u8 *, u16 ))0) {
    {
      #line 68 
      bool branch;
      #line 68 
      struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"iavf", .function = (char *)"iavf_notify_client_message", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c", .format = (char *)"Cannot locate client instance virtchnl_receive function\n", .lineno = (unsigned int)68U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 68 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
      #line 68 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 68 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug544,& ((vsi->back)->pdev)->dev,(char *)"Cannot locate client instance virtchnl_receive function\n");
    }
    #line 70 
    return;
  }
  #line 72 
  (*(((cinst->client)->ops)->virtchnl_receive))(& cinst->lan_info,cinst->client,msg,(unsigned short)((int)len));
  #line 73 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
void iavf_notify_client_l2_params(struct iavf_vsi *vsi)
{
  #line 84 
  struct iavf_client_instance *cinst;
  #line 85 
  struct iavf_params params;
  #line 87 
  if (vsi == (struct iavf_vsi *)0) 
                                   #line 88 
                                   return;
  #line 90 
  cinst = (vsi->back)->cinst;
  #line 92 
  if (((cinst == (struct iavf_client_instance *)0 || cinst->client == (struct iavf_client *)0) || (cinst->client)->ops == (struct iavf_client_ops *)0) || ((cinst->client)->ops)->l2_param_change == (void (*)(struct iavf_info *, struct iavf_client *, struct iavf_params *))0) {
    {
      #line 94 
      bool branch;
      #line 94 
      struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"iavf", .function = (char *)"iavf_notify_client_l2_params", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c", .format = (char *)"Cannot locate client instance l2_param_change function\n", .lineno = (unsigned int)94U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 94 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
      #line 94 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 94 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug545,& ((vsi->back)->pdev)->dev,(char *)"Cannot locate client instance l2_param_change function\n");
    }
    #line 96 
    return;
  }
  #line 98 
  iavf_client_get_params(vsi,& params);
  #line 99 
  cinst->lan_info.params = params;
  #line 100 
  (*(((cinst->client)->ops)->l2_param_change))(& cinst->lan_info,cinst->client,& params);
  #line 102 
  return;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
void iavf_notify_client_open(struct iavf_vsi *vsi)
{
  #line 114 
  int ret;
  #line 112 
  struct iavf_adapter *adapter = vsi->back;
  #line 113 
  struct iavf_client_instance *cinst = adapter->cinst;
  #line 116 
  if (((cinst == (struct iavf_client_instance *)0 || cinst->client == (struct iavf_client *)0) || (cinst->client)->ops == (struct iavf_client_ops *)0) || ((cinst->client)->ops)->open == (int (*)(struct iavf_info *, struct iavf_client *))0) {
    {
      #line 118 
      bool branch;
      #line 118 
      struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"iavf", .function = (char *)"iavf_notify_client_open", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c", .format = (char *)"Cannot locate client instance open function\n", .lineno = (unsigned int)118U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 118 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
      #line 118 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 118 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug546,& ((vsi->back)->pdev)->dev,(char *)"Cannot locate client instance open function\n");
    }
    #line 120 
    return;
  }
  #line 122 
  if (! test_bit(1L,& cinst->state)) {
    #line 123 
    ret = (*(((cinst->client)->ops)->open))(& cinst->lan_info,cinst->client);
    #line 124 
    if (ret == 0) 
                  #line 125 
                  cif_set_bit_0(1L,& cinst->state);
  }
  #line 127 
  return;
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static int iavf_client_release_qvlist(struct iavf_info *ldev)
{
  #line 138 
  enum iavf_status err;
  #line 137 
  struct iavf_adapter *adapter = (struct iavf_adapter *)ldev->vf;
  #line 140 
  if (adapter->aq_required != 0U) 
                                  #line 141 
                                  return -11;
  #line 143 
  err = iavf_aq_send_msg_to_pf(& adapter->hw,(enum virtchnl_ops)VIRTCHNL_OP_RELEASE_IWARP_IRQ_MAP,(enum iavf_status)IAVF_SUCCESS,(u8 *)0U,(unsigned short)0,(struct iavf_asq_cmd_details *)0);
  #line 147 
  if (err != IAVF_SUCCESS) 
                           #line 148 
                           _dev_err(& (adapter->pdev)->dev,(char *)"Unable to send iWarp vector release message to PF, error %d, aq status %d\n",(int)err,(unsigned int)adapter->hw.aq.asq_last_status);
  #line 152 
  return (int)err;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
void iavf_notify_client_close(struct iavf_vsi *vsi, bool reset)
{
  #line 164 
  struct iavf_adapter *adapter = vsi->back;
  #line 165 
  struct iavf_client_instance *cinst = adapter->cinst;
  #line 167 
  if (((cinst == (struct iavf_client_instance *)0 || cinst->client == (struct iavf_client *)0) || (cinst->client)->ops == (struct iavf_client_ops *)0) || ((cinst->client)->ops)->close == (void (*)(struct iavf_info *, struct iavf_client *, bool ))0) {
    {
      #line 169 
      bool branch;
      #line 169 
      struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"iavf", .function = (char *)"iavf_notify_client_close", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c", .format = (char *)"Cannot locate client instance close function\n", .lineno = (unsigned int)169U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 169 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
      #line 169 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 169 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug547,& ((vsi->back)->pdev)->dev,(char *)"Cannot locate client instance close function\n");
    }
    #line 171 
    return;
  }
  #line 173 
  (*(((cinst->client)->ops)->close))(& cinst->lan_info,cinst->client,(_Bool)((bool)((int)reset) != 0));
  #line 174 
  iavf_client_release_qvlist(& cinst->lan_info);
  #line 175 
  cif_clear_bit_0(1L,& cinst->state);
  #line 176 
  return;
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static struct iavf_client_instance *iavf_client_add_instance(struct iavf_adapter *adapter)
{
  #line 222 
  void *__mptr;
  #line 190 
  struct iavf_params params;
  #line 187 
  struct iavf_client_instance *cinst = (struct iavf_client_instance *)0;
  #line 188 
  struct iavf_vsi *vsi = & adapter->vsi;
  #line 189 
  struct netdev_hw_addr *mac = (struct netdev_hw_addr *)0;
  #line 192 
  if (vf_registered_client == (struct iavf_client *)0) 
                                                       #line 193 
                                                       goto out;
  #line 195 
  if (adapter->cinst != (struct iavf_client_instance *)0) {
    #line 196 
    cinst = adapter->cinst;
    #line 197 
    goto out;
  }
  #line 200 
  cinst = (struct iavf_client_instance *)kzalloc_0(160UL,3264U);
  #line 201 
  if (cinst == (struct iavf_client_instance *)0) 
                                                 #line 202 
                                                 goto out;
  #line 204 
  cinst->lan_info.vf = (void *)adapter;
  #line 205 
  cinst->lan_info.netdev = vsi->netdev;
  #line 206 
  cinst->lan_info.pcidev = adapter->pdev;
  #line 207 
  cinst->lan_info.fid = (unsigned char)0U;
  #line 208 
  cinst->lan_info.ftype = (unsigned char)1U;
  #line 209 
  cinst->lan_info.hw_addr = adapter->hw.hw_addr;
  #line 210 
  cinst->lan_info.ops = & iavf_lan_ops;
  #line 211 
  cinst->lan_info.version.major = (unsigned char)0U;
  #line 212 
  cinst->lan_info.version.minor = (unsigned char)1U;
  #line 213 
  cinst->lan_info.version.build = (unsigned char)0U;
  #line 214 
  iavf_client_get_params(vsi,& params);
  #line 215 
  cinst->lan_info.params = params;
  #line 216 
  cif_set_bit_0(0L,& cinst->state);
  #line 218 
  cinst->lan_info.msix_count = (unsigned short)adapter->num_iwarp_msix;
  #line 219 
  cinst->lan_info.msix_entries = adapter->msix_entries + (unsigned long)adapter->iwarp_base_vector;
  #line 222 
  __mptr = (void *)(cinst->lan_info.netdev)->dev_addrs.list.next;
  #line 222 
  mac = ((struct netdev_hw_addr *)__mptr);
  #line 224 
  if (mac != (struct netdev_hw_addr *)0) 
                                         #line 225 
                                         ether_addr_copy((u8 *)(& cinst->lan_info.lanmac),(u8 *)(& mac->addr)); else 
                                                                    #line 227 
                                                                    _dev_err(& (adapter->pdev)->dev,(char *)"MAC address list is empty!\n");
  #line 229 
  cinst->client = vf_registered_client;
  #line 230 
  adapter->cinst = cinst;
  #line 231 
  out: 
       #line 231 
  ;
  #line 232 
  return cinst;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static void iavf_client_del_instance(struct iavf_adapter *adapter)
{
  #line 243 
  kfree((void *)adapter->cinst);
  #line 244 
  adapter->cinst = (struct iavf_client_instance *)0;
  #line 245 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
void iavf_client_subtask(struct iavf_adapter *adapter)
{
  #line 254 
  struct iavf_client_instance *cinst;
  #line 253 
  struct iavf_client *client = vf_registered_client;
  #line 255 
  int ret = 0;
  #line 257 
  if (adapter->state <= (unsigned int)__IAVF_COMM_FAILED) 
                                                          #line 258 
                                                          return;
  #line 261 
  if (client == (struct iavf_client *)0) 
                                         #line 262 
                                         return;
  #line 265 
  cinst = iavf_client_add_instance(adapter);
  #line 266 
  if (cinst == (struct iavf_client_instance *)0) 
                                                 #line 267 
                                                 return;
  #line 269 
  _dev_info(& (adapter->pdev)->dev,(char *)"Added instance of Client %s\n",(char *)(& client->name));
  #line 272 
  if (! test_bit(1L,& cinst->state)) {
    #line 275 
    if (client->ops != (struct iavf_client_ops *)0 && (client->ops)->open != (int (*)(struct iavf_info *, struct iavf_client *))0) 
      #line 276 
      ret = (*((client->ops)->open))(& cinst->lan_info,client);
    #line 277 
    if (ret == 0) 
                  #line 278 
                  cif_set_bit_0(1L,& cinst->state); else 
                                                         #line 282 
                                                         iavf_client_del_instance(adapter);
  }
  #line 284 
  return;
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
int iavf_lan_add_device(struct iavf_adapter *adapter)
{
  #line 298 
  void *__mptr;
  #line 294 
  struct iavf_device *ldev;
  #line 295 
  int ret = 0;
  #line 297 
  cif_mutex_lock_iavf_device_mutex(& iavf_device_mutex);
  #line 298 
  __mptr = (void *)iavf_devices.next;
  #line 298 
  ldev = ((struct iavf_device *)__mptr);
  #line 298 
  while (& ldev->list != & iavf_devices) {
    #line 298 
    void *__mptr_0;
    #line 299 
    if (ldev->vf == adapter) {
      #line 300 
      ret = -17;
      #line 301 
      goto out;
    }
    #line 298 
    __mptr_0 = (void *)ldev->list.next;
    #line 298 
    ldev = ((struct iavf_device *)__mptr_0);
  }
  #line 304 
  ldev = (struct iavf_device *)kzalloc_0(24UL,3264U);
  #line 305 
  if (ldev == (struct iavf_device *)0) {
    #line 306 
    ret = -12;
    #line 307 
    goto out;
  }
  #line 309 
  ldev->vf = adapter;
  #line 310 
  INIT_LIST_HEAD_0(& ldev->list);
  #line 311 
  list_add(& ldev->list,& iavf_devices);
  #line 312 
  _dev_info(& (adapter->pdev)->dev,(char *)"Added LAN device bus=0x%02x dev=0x%02x func=0x%02x\n",(int)adapter->hw.bus.bus_id,(int)adapter->hw.bus.device,(int)adapter->hw.bus.func);
  #line 319 
  adapter->flags |= 512U;
  #line 321 
  out: 
       #line 321 
  ;
  #line 322 
  cif_mutex_unlock_iavf_device_mutex(& iavf_device_mutex);
  #line 323 
  return ret;
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
int iavf_lan_del_device(struct iavf_adapter *adapter)
{
  #line 338 
  void *__mptr;
  #line 338 
  void *__mptr_0;
  #line 334 
  struct iavf_device *ldev;
  #line 334 
  struct iavf_device *tmp;
  #line 335 
  int ret = -19;
  #line 337 
  cif_mutex_lock_iavf_device_mutex(& iavf_device_mutex);
  #line 338 
  __mptr = (void *)iavf_devices.next;
  #line 338 
  ldev = ((struct iavf_device *)__mptr);
  #line 338 
  __mptr_0 = (void *)ldev->list.next;
  #line 339 
  tmp = ((struct iavf_device *)__mptr_0);
  #line 338 
  while (& ldev->list != & iavf_devices) {
    #line 338 
    void *__mptr_1;
    #line 339 
    if (ldev->vf == adapter) {
      #line 340 
      _dev_info(& (adapter->pdev)->dev,(char *)"Deleted LAN device bus=0x%02x dev=0x%02x func=0x%02x\n",(int)adapter->hw.bus.bus_id,(int)adapter->hw.bus.device,(int)adapter->hw.bus.func);
      #line 344 
      list_del_0(& ldev->list);
      #line 345 
      kfree((void *)ldev);
      #line 346 
      ret = 0;
      #line 347 
      break;
    }
    #line 338 
    ldev = tmp;
    #line 338 
    __mptr_1 = (void *)tmp->list.next;
    #line 338 
    tmp = ((struct iavf_device *)__mptr_1);
  }
  #line 351 
  cif_mutex_unlock_iavf_device_mutex(& iavf_device_mutex);
  #line 352 
  return ret;
}

#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static void iavf_client_release(struct iavf_client *client)
{
  #line 367 
  void *__mptr;
  #line 362 
  struct iavf_client_instance *cinst;
  #line 363 
  struct iavf_device *ldev;
  #line 364 
  struct iavf_adapter *adapter;
  #line 366 
  cif_mutex_lock_iavf_device_mutex(& iavf_device_mutex);
  #line 367 
  __mptr = (void *)iavf_devices.next;
  #line 367 
  ldev = ((struct iavf_device *)__mptr);
  #line 367 
  while (& ldev->list != & iavf_devices) {
    #line 367 
    void *__mptr_0;
    {
      #line 368 
      adapter = ldev->vf;
      #line 369 
      cinst = adapter->cinst;
      #line 370 
      if (cinst == (struct iavf_client_instance *)0) 
                                                     #line 371 
                                                     goto __Cont;
      #line 372 
      if ((int)test_bit(1L,& cinst->state) != 0) {
        #line 373 
        if (client->ops != (struct iavf_client_ops *)0 && (client->ops)->close != (void (*)(struct iavf_info *, struct iavf_client *, bool ))0) 
          #line 374 
          (*((client->ops)->close))(& cinst->lan_info,client,(_Bool)0);
        #line 376 
        iavf_client_release_qvlist(& cinst->lan_info);
        #line 377 
        cif_clear_bit_0(1L,& cinst->state);
        #line 379 
        _dev_warn(& (adapter->pdev)->dev,(char *)"Client %s instance closed\n",(char *)(& client->name));
      }
      #line 383 
      iavf_client_del_instance(adapter);
      #line 384 
      _dev_info(& (adapter->pdev)->dev,(char *)"Deleted client instance of Client %s\n",(char *)(& client->name));
    }
    #line 367 
    __Cont: { /* sequence */
              #line 367 
              __mptr_0 = (void *)ldev->list.next;
              #line 367 
              ldev = ((struct iavf_device *)__mptr_0);
            }
  }
  #line 387 
  cif_mutex_unlock_iavf_device_mutex(& iavf_device_mutex);
  #line 388 
  return;
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static void iavf_client_prepare(struct iavf_client *client)
{
  #line 401 
  void *__mptr;
  #line 397 
  struct iavf_device *ldev;
  #line 398 
  struct iavf_adapter *adapter;
  #line 400 
  cif_mutex_lock_iavf_device_mutex(& iavf_device_mutex);
  #line 401 
  __mptr = (void *)iavf_devices.next;
  #line 401 
  ldev = ((struct iavf_device *)__mptr);
  #line 401 
  while (& ldev->list != & iavf_devices) {
    #line 401 
    void *__mptr_0;
    #line 402 
    adapter = ldev->vf;
    #line 404 
    adapter->flags |= 512U;
    #line 401 
    __mptr_0 = (void *)ldev->list.next;
    #line 401 
    ldev = ((struct iavf_device *)__mptr_0);
  }
  #line 406 
  cif_mutex_unlock_iavf_device_mutex(& iavf_device_mutex);
  #line 407 
  return;
}

#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static u32 iavf_client_virtchnl_send(struct iavf_info *ldev, struct iavf_client *client, u8 *msg, u16 len)
{
  #line 423 
  enum iavf_status err;
  #line 422 
  struct iavf_adapter *adapter = (struct iavf_adapter *)ldev->vf;
  #line 425 
  if (adapter->aq_required != 0U) 
                                  #line 426 
                                  return 4294967285U;
  #line 428 
  err = iavf_aq_send_msg_to_pf(& adapter->hw,(enum virtchnl_ops)VIRTCHNL_OP_IWARP,(enum iavf_status)IAVF_SUCCESS,msg,(unsigned short)((int)len),(struct iavf_asq_cmd_details *)0);
  #line 430 
  if (err != IAVF_SUCCESS) 
                           #line 431 
                           _dev_err(& (adapter->pdev)->dev,(char *)"Unable to send iWarp message to PF, error %d, aq status %d\n",(int)err,(unsigned int)adapter->hw.aq.asq_last_status);
  #line 434 
  return (unsigned int)err;
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
static int iavf_client_setup_qvlist(struct iavf_info *ldev, struct iavf_client *client, struct iavf_qvlist_info *qvlist_info)
{
  #line 449 
  struct virtchnl_iwarp_qvlist_info *v_qvlist_info;
  #line 451 
  struct iavf_qv_info *qv_info;
  #line 452 
  enum iavf_status err;
  #line 453 
  u32 v_idx;
  #line 453 
  u32 i;
  #line 454 
  size_t msg_size;
  #line 450 
  struct iavf_adapter *adapter = (struct iavf_adapter *)ldev->vf;
  #line 456 
  if (adapter->aq_required != 0U) 
                                  #line 457 
                                  return -11;
  #line 460 
  i = 0U;
  #line 460 
  while (qvlist_info->num_vectors > i) {
    #line 461 
    qv_info = & qvlist_info->qv_info[i];
    #line 462 
    if (qv_info == (struct iavf_qv_info *)0) 
                                             #line 463 
                                             goto __Cont;
    #line 464 
    v_idx = qv_info->v_idx;
    #line 466 
    if ((unsigned int)(adapter->iwarp_base_vector + adapter->num_iwarp_msix) <= v_idx || (unsigned int)adapter->iwarp_base_vector > v_idx) 
      #line 468 
      return -22;
    #line 460 
    __Cont: 
            #line 460 
    i ++;
  }
  #line 471 
  v_qvlist_info = (struct virtchnl_iwarp_qvlist_info *)qvlist_info;
  #line 472 
  msg_size = __ab_c_size((unsigned long)(v_qvlist_info->num_vectors + 4294967295U),12UL,16UL);
  #line 475 
  adapter->client_pending |= 2097152U;
  #line 476 
  err = iavf_aq_send_msg_to_pf(& adapter->hw,(enum virtchnl_ops)VIRTCHNL_OP_CONFIG_IWARP_IRQ_MAP,(enum iavf_status)IAVF_SUCCESS,(u8 *)v_qvlist_info,(unsigned short)((int)((unsigned short)msg_size)),(struct iavf_asq_cmd_details *)0);
  #line 480 
  if (err != IAVF_SUCCESS) {
    #line 481 
    _dev_err(& (adapter->pdev)->dev,(char *)"Unable to send iWarp vector config message to PF, error %d, aq status %d\n",(int)err,(unsigned int)adapter->hw.aq.asq_last_status);
    #line 484 
    goto out;
  }
  #line 487 
  err = IAVF_ERR_SWFW_SYNC;
  #line 488 
  i = 0U;
  #line 488 
  while (i <= 4U) {
    #line 489 
    msleep(100U);
    #line 490 
    if (((unsigned long)adapter->client_pending & 2097152UL) == 0UL) {
      #line 492 
      err = IAVF_SUCCESS;
      #line 493 
      break;
    }
    #line 488 
    i ++;
  }
  #line 496 
  out: 
       #line 496 
  ;
  #line 497 
  return (int)err;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
int iavf_register_client(struct iavf_client *client)
{
  #line 508 
  int ret = 0;
  #line 510 
  if (client == (struct iavf_client *)0) {
    #line 511 
    ret = -5;
    #line 512 
    goto out;
  }
  #line 515 
  if (cif_strlen((char *)(& client->name)) == 0UL) {
    #line 516 
    printk((char *)"\001");
    #line 517 
    ret = -5;
    #line 518 
    goto out;
  }
  #line 521 
  if (vf_registered_client != (struct iavf_client *)0) {
    #line 522 
    printk((char *)"\001",(char *)(& client->name));
    #line 524 
    ret = -17;
    #line 525 
    goto out;
  }
  #line 528 
  if ((unsigned int)client->version.major != 0U || (unsigned int)client->version.minor != 1U) {
    #line 530 
    printk((char *)"\001",(char *)(& client->name));
    #line 532 
    printk((char *)"\001",(int)client->version.major,(int)client->version.minor,(int)client->version.build,(char *)(& iavf_client_interface_version_str));
    #line 536 
    ret = -5;
    #line 537 
    goto out;
  }
  #line 540 
  vf_registered_client = client;
  #line 542 
  iavf_client_prepare(client);
  #line 544 
  printk((char *)"\001",(char *)(& client->name),ret);
  #line 546 
  out: 
       #line 546 
  ;
  #line 547 
  return ret;
}

#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_client.c"
int iavf_unregister_client(struct iavf_client *client)
{
  #line 559 
  int ret = 0;
  #line 565 
  iavf_client_release(client);
  #line 567 
  if (vf_registered_client != client) {
    #line 568 
    printk((char *)"\001",(char *)(& client->name));
    #line 570 
    ret = -19;
    #line 571 
    goto out;
  }
  #line 573 
  vf_registered_client = (struct iavf_client *)0;
  #line 574 
  printk((char *)"\001",(char *)(& client->name));
  #line 575 
  out: 
       #line 575 
  ;
  #line 576 
  return ret;
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 122 
  ldv_set_bit(nr,addr);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 129 
  ldv_clear_bit(nr,addr);
  #line 130 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 136 
  ldv_init_list_head(list);
  #line 137 
  return;
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static size_t cif_strlen(char *s)
{
  #line 150 
  return ldv_strlen(s);
}

#line 492  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 495 
  return ldv_kzalloc(size,flags);
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static void cif_mutex_lock_iavf_device_mutex(struct mutex *lock)
{
  #line 834 
  ldv_mutex_model_lock(lock,(char *)"iavf_device_mutex");
  #line 835 
  return;
}

#line 838  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_client.i.aux"
static void cif_mutex_unlock_iavf_device_mutex(struct mutex *lock)
{
  #line 841 
  ldv_mutex_model_unlock(lock,(char *)"iavf_device_mutex");
  #line 842 
  return;
}

#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 487 
void print_hex_dump(char *, char *, int, int, int, void *, size_t, bool);
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.h"
#line 133 
void iavf_fill_default_direct_cmd_desc(struct iavf_aq_desc *desc, u16 opcode);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_prototype.h"
#line 25 
enum iavf_status iavf_asq_send_command(struct iavf_hw *hw, struct iavf_aq_desc *desc, void *buff, u16 buff_size, struct iavf_asq_cmd_details *cmd_details);
#line 33 
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
void iavf_debug_aq(struct iavf_hw *hw, enum iavf_debug_mask mask, void *desc, void *buffer, u16 buf_len);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_prototype.h"
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
bool iavf_check_asq_alive(struct iavf_hw *hw);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_prototype.h"
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
enum iavf_status iavf_aq_queue_shutdown(struct iavf_hw *hw, bool unloading);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_prototype.h"
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
enum iavf_status iavf_aq_get_rss_lut(struct iavf_hw *hw, u16 vsi_id, bool pf_lut, u8 *lut, u16 lut_size);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_prototype.h"
#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
enum iavf_status iavf_aq_get_rss_key(struct iavf_hw *hw, u16 vsi_id, struct iavf_aqc_get_set_rss_key_data *key);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_prototype.h"
#line 547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
struct iavf_rx_ptype_decoded iavf_ptype_lookup[256U];
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_prototype.h"
#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
void iavf_vf_parse_hw_config(struct iavf_hw *hw, struct virtchnl_vf_resource *msg);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_prototype.h"
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
enum iavf_status iavf_vf_reset(struct iavf_hw *hw);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
enum iavf_status iavf_set_mac_type(struct iavf_hw *hw)
{
  #line 18 
  enum iavf_status status = 0;
  #line 20 
  if ((unsigned int)hw->vendor_id == 32902U) 
    #line 21 
    switch ((int)hw->device_id) {
      #line 22 
      case 14285: 
                  #line 22 
      ;
      #line 23 
      hw->mac.type = IAVF_MAC_X722_VF;
      #line 24 
      break;
      #line 25 
      case 5452: 
                 #line 25 
      ;
      #line 26 
      case 5489: 
                 #line 26 
      ;
      #line 27 
      case 6281: 
                 #line 27 
      ;
      #line 28 
      hw->mac.type = IAVF_MAC_VF;
      #line 29 
      break;
      #line 30 
      default: 
               #line 30 
      ;
      #line 31 
      hw->mac.type = IAVF_MAC_GENERIC;
      #line 32 
      break;
    }
  else 
       #line 35 
       status = IAVF_ERR_DEVICE_NOT_SUPPORTED;
  #line 39 
  return status;
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
char *iavf_aq_str(struct iavf_hw *hw, enum iavf_admin_queue_err aq_err)
{
  #line 49 
  switch ((unsigned int)aq_err) {
    #line 50 
    case (unsigned int)0: 
                          #line 50 
    ;
    #line 51 
    return (char *)"OK";
    #line 52 
    case (unsigned int)1: 
                          #line 52 
    ;
    #line 53 
    return (char *)"IAVF_AQ_RC_EPERM";
    #line 54 
    case (unsigned int)2: 
                          #line 54 
    ;
    #line 55 
    return (char *)"IAVF_AQ_RC_ENOENT";
    #line 56 
    case (unsigned int)3: 
                          #line 56 
    ;
    #line 57 
    return (char *)"IAVF_AQ_RC_ESRCH";
    #line 58 
    case (unsigned int)4: 
                          #line 58 
    ;
    #line 59 
    return (char *)"IAVF_AQ_RC_EINTR";
    #line 60 
    case (unsigned int)5: 
                          #line 60 
    ;
    #line 61 
    return (char *)"IAVF_AQ_RC_EIO";
    #line 62 
    case (unsigned int)6: 
                          #line 62 
    ;
    #line 63 
    return (char *)"IAVF_AQ_RC_ENXIO";
    #line 64 
    case (unsigned int)7: 
                          #line 64 
    ;
    #line 65 
    return (char *)"IAVF_AQ_RC_E2BIG";
    #line 66 
    case (unsigned int)8: 
                          #line 66 
    ;
    #line 67 
    return (char *)"IAVF_AQ_RC_EAGAIN";
    #line 68 
    case (unsigned int)9: 
                          #line 68 
    ;
    #line 69 
    return (char *)"IAVF_AQ_RC_ENOMEM";
    #line 70 
    case (unsigned int)10: 
                           #line 70 
    ;
    #line 71 
    return (char *)"IAVF_AQ_RC_EACCES";
    #line 72 
    case (unsigned int)11: 
                           #line 72 
    ;
    #line 73 
    return (char *)"IAVF_AQ_RC_EFAULT";
    #line 74 
    case (unsigned int)12: 
                           #line 74 
    ;
    #line 75 
    return (char *)"IAVF_AQ_RC_EBUSY";
    #line 76 
    case (unsigned int)13: 
                           #line 76 
    ;
    #line 77 
    return (char *)"IAVF_AQ_RC_EEXIST";
    #line 78 
    case (unsigned int)14: 
                           #line 78 
    ;
    #line 79 
    return (char *)"IAVF_AQ_RC_EINVAL";
    #line 80 
    case (unsigned int)15: 
                           #line 80 
    ;
    #line 81 
    return (char *)"IAVF_AQ_RC_ENOTTY";
    #line 82 
    case (unsigned int)16: 
                           #line 82 
    ;
    #line 83 
    return (char *)"IAVF_AQ_RC_ENOSPC";
    #line 84 
    case (unsigned int)17: 
                           #line 84 
    ;
    #line 85 
    return (char *)"IAVF_AQ_RC_ENOSYS";
    #line 86 
    case (unsigned int)18: 
                           #line 86 
    ;
    #line 87 
    return (char *)"IAVF_AQ_RC_ERANGE";
    #line 88 
    case (unsigned int)19: 
                           #line 88 
    ;
    #line 89 
    return (char *)"IAVF_AQ_RC_EFLUSHED";
    #line 90 
    case (unsigned int)20: 
                           #line 90 
    ;
    #line 91 
    return (char *)"IAVF_AQ_RC_BAD_ADDR";
    #line 92 
    case (unsigned int)21: 
                           #line 92 
    ;
    #line 93 
    return (char *)"IAVF_AQ_RC_EMODE";
    #line 94 
    case (unsigned int)22: 
                           #line 94 
    ;
    #line 95 
    return (char *)"IAVF_AQ_RC_EFBIG";
  }
  #line 98 
  snprintf((char *)(& hw->err_str),16UL,(char *)"%d",(unsigned int)aq_err);
  #line 99 
  return (char *)(& hw->err_str);
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
char *iavf_stat_str(struct iavf_hw *hw, enum iavf_status stat_err)
{
  #line 109 
  switch ((int)stat_err) {
    #line 110 
    case 0: 
            #line 110 
    ;
    #line 111 
    return (char *)"OK";
    #line 112 
    case -1: 
             #line 112 
    ;
    #line 113 
    return (char *)"IAVF_ERR_NVM";
    #line 114 
    case -2: 
             #line 114 
    ;
    #line 115 
    return (char *)"IAVF_ERR_NVM_CHECKSUM";
    #line 116 
    case -3: 
             #line 116 
    ;
    #line 117 
    return (char *)"IAVF_ERR_PHY";
    #line 118 
    case -4: 
             #line 118 
    ;
    #line 119 
    return (char *)"IAVF_ERR_CONFIG";
    #line 120 
    case -5: 
             #line 120 
    ;
    #line 121 
    return (char *)"IAVF_ERR_PARAM";
    #line 122 
    case -6: 
             #line 122 
    ;
    #line 123 
    return (char *)"IAVF_ERR_MAC_TYPE";
    #line 124 
    case -7: 
             #line 124 
    ;
    #line 125 
    return (char *)"IAVF_ERR_UNKNOWN_PHY";
    #line 126 
    case -8: 
             #line 126 
    ;
    #line 127 
    return (char *)"IAVF_ERR_LINK_SETUP";
    #line 128 
    case -9: 
             #line 128 
    ;
    #line 129 
    return (char *)"IAVF_ERR_ADAPTER_STOPPED";
    #line 130 
    case -10: 
              #line 130 
    ;
    #line 131 
    return (char *)"IAVF_ERR_INVALID_MAC_ADDR";
    #line 132 
    case -11: 
              #line 132 
    ;
    #line 133 
    return (char *)"IAVF_ERR_DEVICE_NOT_SUPPORTED";
    #line 134 
    case -12: 
              #line 134 
    ;
    #line 135 
    return (char *)"IAVF_ERR_MASTER_REQUESTS_PENDING";
    #line 136 
    case -13: 
              #line 136 
    ;
    #line 137 
    return (char *)"IAVF_ERR_INVALID_LINK_SETTINGS";
    #line 138 
    case -14: 
              #line 138 
    ;
    #line 139 
    return (char *)"IAVF_ERR_AUTONEG_NOT_COMPLETE";
    #line 140 
    case -15: 
              #line 140 
    ;
    #line 141 
    return (char *)"IAVF_ERR_RESET_FAILED";
    #line 142 
    case -16: 
              #line 142 
    ;
    #line 143 
    return (char *)"IAVF_ERR_SWFW_SYNC";
    #line 144 
    case -17: 
              #line 144 
    ;
    #line 145 
    return (char *)"IAVF_ERR_NO_AVAILABLE_VSI";
    #line 146 
    case -18: 
              #line 146 
    ;
    #line 147 
    return (char *)"IAVF_ERR_NO_MEMORY";
    #line 148 
    case -19: 
              #line 148 
    ;
    #line 149 
    return (char *)"IAVF_ERR_BAD_PTR";
    #line 150 
    case -20: 
              #line 150 
    ;
    #line 151 
    return (char *)"IAVF_ERR_RING_FULL";
    #line 152 
    case -21: 
              #line 152 
    ;
    #line 153 
    return (char *)"IAVF_ERR_INVALID_PD_ID";
    #line 154 
    case -22: 
              #line 154 
    ;
    #line 155 
    return (char *)"IAVF_ERR_INVALID_QP_ID";
    #line 156 
    case -23: 
              #line 156 
    ;
    #line 157 
    return (char *)"IAVF_ERR_INVALID_CQ_ID";
    #line 158 
    case -24: 
              #line 158 
    ;
    #line 159 
    return (char *)"IAVF_ERR_INVALID_CEQ_ID";
    #line 160 
    case -25: 
              #line 160 
    ;
    #line 161 
    return (char *)"IAVF_ERR_INVALID_AEQ_ID";
    #line 162 
    case -26: 
              #line 162 
    ;
    #line 163 
    return (char *)"IAVF_ERR_INVALID_SIZE";
    #line 164 
    case -27: 
              #line 164 
    ;
    #line 165 
    return (char *)"IAVF_ERR_INVALID_ARP_INDEX";
    #line 166 
    case -28: 
              #line 166 
    ;
    #line 167 
    return (char *)"IAVF_ERR_INVALID_FPM_FUNC_ID";
    #line 168 
    case -29: 
              #line 168 
    ;
    #line 169 
    return (char *)"IAVF_ERR_QP_INVALID_MSG_SIZE";
    #line 170 
    case -30: 
              #line 170 
    ;
    #line 171 
    return (char *)"IAVF_ERR_QP_TOOMANY_WRS_POSTED";
    #line 172 
    case -31: 
              #line 172 
    ;
    #line 173 
    return (char *)"IAVF_ERR_INVALID_FRAG_COUNT";
    #line 174 
    case -32: 
              #line 174 
    ;
    #line 175 
    return (char *)"IAVF_ERR_QUEUE_EMPTY";
    #line 176 
    case -33: 
              #line 176 
    ;
    #line 177 
    return (char *)"IAVF_ERR_INVALID_ALIGNMENT";
    #line 178 
    case -34: 
              #line 178 
    ;
    #line 179 
    return (char *)"IAVF_ERR_FLUSHED_QUEUE";
    #line 180 
    case -35: 
              #line 180 
    ;
    #line 181 
    return (char *)"IAVF_ERR_INVALID_PUSH_PAGE_INDEX";
    #line 182 
    case -36: 
              #line 182 
    ;
    #line 183 
    return (char *)"IAVF_ERR_INVALID_IMM_DATA_SIZE";
    #line 184 
    case -37: 
              #line 184 
    ;
    #line 185 
    return (char *)"IAVF_ERR_TIMEOUT";
    #line 186 
    case -38: 
              #line 186 
    ;
    #line 187 
    return (char *)"IAVF_ERR_OPCODE_MISMATCH";
    #line 188 
    case -39: 
              #line 188 
    ;
    #line 189 
    return (char *)"IAVF_ERR_CQP_COMPL_ERROR";
    #line 190 
    case -40: 
              #line 190 
    ;
    #line 191 
    return (char *)"IAVF_ERR_INVALID_VF_ID";
    #line 192 
    case -41: 
              #line 192 
    ;
    #line 193 
    return (char *)"IAVF_ERR_INVALID_HMCFN_ID";
    #line 194 
    case -42: 
              #line 194 
    ;
    #line 195 
    return (char *)"IAVF_ERR_BACKING_PAGE_ERROR";
    #line 196 
    case -43: 
              #line 196 
    ;
    #line 197 
    return (char *)"IAVF_ERR_NO_PBLCHUNKS_AVAILABLE";
    #line 198 
    case -44: 
              #line 198 
    ;
    #line 199 
    return (char *)"IAVF_ERR_INVALID_PBLE_INDEX";
    #line 200 
    case -45: 
              #line 200 
    ;
    #line 201 
    return (char *)"IAVF_ERR_INVALID_SD_INDEX";
    #line 202 
    case -46: 
              #line 202 
    ;
    #line 203 
    return (char *)"IAVF_ERR_INVALID_PAGE_DESC_INDEX";
    #line 204 
    case -47: 
              #line 204 
    ;
    #line 205 
    return (char *)"IAVF_ERR_INVALID_SD_TYPE";
    #line 206 
    case -48: 
              #line 206 
    ;
    #line 207 
    return (char *)"IAVF_ERR_MEMCPY_FAILED";
    #line 208 
    case -49: 
              #line 208 
    ;
    #line 209 
    return (char *)"IAVF_ERR_INVALID_HMC_OBJ_INDEX";
    #line 210 
    case -50: 
              #line 210 
    ;
    #line 211 
    return (char *)"IAVF_ERR_INVALID_HMC_OBJ_COUNT";
    #line 212 
    case -51: 
              #line 212 
    ;
    #line 213 
    return (char *)"IAVF_ERR_INVALID_SRQ_ARM_LIMIT";
    #line 214 
    case -52: 
              #line 214 
    ;
    #line 215 
    return (char *)"IAVF_ERR_SRQ_ENABLED";
    #line 216 
    case -53: 
              #line 216 
    ;
    #line 217 
    return (char *)"IAVF_ERR_ADMIN_QUEUE_ERROR";
    #line 218 
    case -54: 
              #line 218 
    ;
    #line 219 
    return (char *)"IAVF_ERR_ADMIN_QUEUE_TIMEOUT";
    #line 220 
    case -55: 
              #line 220 
    ;
    #line 221 
    return (char *)"IAVF_ERR_BUF_TOO_SHORT";
    #line 222 
    case -56: 
              #line 222 
    ;
    #line 223 
    return (char *)"IAVF_ERR_ADMIN_QUEUE_FULL";
    #line 224 
    case -57: 
              #line 224 
    ;
    #line 225 
    return (char *)"IAVF_ERR_ADMIN_QUEUE_NO_WORK";
    #line 226 
    case -58: 
              #line 226 
    ;
    #line 227 
    return (char *)"IAVF_ERR_BAD_IWARP_CQE";
    #line 228 
    case -59: 
              #line 228 
    ;
    #line 229 
    return (char *)"IAVF_ERR_NVM_BLANK_MODE";
    #line 230 
    case -60: 
              #line 230 
    ;
    #line 231 
    return (char *)"IAVF_ERR_NOT_IMPLEMENTED";
    #line 232 
    case -61: 
              #line 232 
    ;
    #line 233 
    return (char *)"IAVF_ERR_PE_DOORBELL_NOT_ENABLED";
    #line 234 
    case -62: 
              #line 234 
    ;
    #line 235 
    return (char *)"IAVF_ERR_DIAG_TEST_FAILED";
    #line 236 
    case -63: 
              #line 236 
    ;
    #line 237 
    return (char *)"IAVF_ERR_NOT_READY";
    #line 238 
    case -64: 
              #line 238 
    ;
    #line 239 
    return (char *)"IAVF_NOT_SUPPORTED";
    #line 240 
    case -65: 
              #line 240 
    ;
    #line 241 
    return (char *)"IAVF_ERR_FIRMWARE_API_VERSION";
    #line 242 
    case -66: 
              #line 242 
    ;
    #line 243 
    return (char *)"IAVF_ERR_ADMIN_QUEUE_CRITICAL_ERROR";
  }
  #line 246 
  snprintf((char *)(& hw->err_str),16UL,(char *)"%d",(int)stat_err);
  #line 247 
  return (char *)(& hw->err_str);
}

#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
void iavf_debug_aq(struct iavf_hw *hw, enum iavf_debug_mask mask, void *desc, void *buffer, u16 buf_len)
{
  #line 263 
  struct iavf_aq_desc *aq_desc = (struct iavf_aq_desc *)desc;
  #line 264 
  u8 *buf = (u8 *)buffer;
  #line 266 
  if ((hw->debug_mask & (unsigned int)mask) == 0U || desc == (void *)0) 
    #line 267 
    return;
  #line 269 
  if ((hw->debug_mask & (unsigned int)mask) != 0U) 
                                                   #line 269 
                                                   printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func,(int)aq_desc->opcode,(int)aq_desc->flags,(int)aq_desc->datalen,(int)aq_desc->retval);
  #line 275 
  if ((hw->debug_mask & (unsigned int)mask) != 0U) 
                                                   #line 275 
                                                   printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func,aq_desc->cookie_high,aq_desc->cookie_low);
  #line 278 
  if ((hw->debug_mask & (unsigned int)mask) != 0U) 
                                                   #line 278 
                                                   printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func,aq_desc->params.internal.param0,aq_desc->params.internal.param1);
  #line 281 
  if ((hw->debug_mask & (unsigned int)mask) != 0U) 
                                                   #line 281 
                                                   printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func,aq_desc->params.external.addr_high,aq_desc->params.external.addr_low);
  #line 285 
  if (buffer != (void *)0 && (unsigned int)aq_desc->datalen != 0U) {
    #line 286 
    u16 len = aq_desc->datalen;
    #line 288 
    if ((hw->debug_mask & (unsigned int)mask) != 0U) 
                                                     #line 288 
                                                     printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func);
    #line 289 
    if ((int)buf_len < (int)len) 
                                 #line 290 
                                 len = buf_len;
    #line 292 
    if ((hw->debug_mask & (unsigned int)mask) != 0U) {
      #line 293 
      char prefix[27U];
      #line 295 
      snprintf((char *)(& prefix),27UL,(char *)"iavf %02x:%02x.%x: \t0x",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func);
      #line 301 
      print_hex_dump((char *)"\001",(char *)(& prefix),2,16,1,(void *)buf,(unsigned long)len,(_Bool)0);
    }
  }
  #line 304 
  return;
}

#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
bool iavf_check_asq_alive(struct iavf_hw *hw)
{
  #line 315 
  if (hw->aq.asq.len != 0U) {
    #line 316 
    return (_Bool)((readl((void *)(hw->hw_addr + (unsigned long)hw->aq.asq.len)) & 2147483648U) != 0U);
  }
  else 
       #line 319 
       return (_Bool)0;
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
enum iavf_status iavf_aq_queue_shutdown(struct iavf_hw *hw, bool unloading)
{
  #line 332 
  struct iavf_aq_desc desc;
  #line 335 
  enum iavf_status status;
  #line 333 
  struct iavf_aqc_queue_shutdown *cmd = (struct iavf_aqc_queue_shutdown *)(& desc.params.raw);
  #line 337 
  iavf_fill_default_direct_cmd_desc(& desc,(unsigned short)3);
  #line 339 
  if ((int)unloading != 0) 
                           #line 340 
                           cmd->driver_unloading = 1U;
  #line 341 
  status = iavf_asq_send_command(hw,& desc,(void *)0,(unsigned short)0,(struct iavf_asq_cmd_details *)0);
  #line 343 
  return status;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
static enum iavf_status iavf_aq_get_set_rss_lut(struct iavf_hw *hw, u16 vsi_id, bool pf_lut, u8 *lut, u16 lut_size, bool set)
{
  #line 362 
  enum iavf_status status;
  #line 363 
  struct iavf_aq_desc desc;
  #line 364 
  struct iavf_aqc_get_set_rss_lut *cmd_resp = (struct iavf_aqc_get_set_rss_lut *)(& desc.params.raw);
  #line 367 
  if ((int)set != 0) 
                     #line 368 
                     iavf_fill_default_direct_cmd_desc(& desc,(unsigned short)2819); else 
                                                                    #line 371 
                                                                    iavf_fill_default_direct_cmd_desc(& desc,(unsigned short)2821);
  #line 375 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 4096U);
  #line 376 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 378 
  cmd_resp->vsi_id = (unsigned short)((unsigned int)vsi_id & 1023U);
  #line 382 
  cmd_resp->vsi_id = (unsigned short)((unsigned int)cmd_resp->vsi_id | 32768U);
  #line 384 
  if ((int)pf_lut != 0) 
                        #line 385 
                        cmd_resp->flags = (unsigned short)((unsigned int)cmd_resp->flags | 1U); else 
                                                                    #line 390 
                                                                    cmd_resp->flags = cmd_resp->flags;
  #line 395 
  status = iavf_asq_send_command(hw,& desc,(void *)lut,(unsigned short)((int)lut_size),(struct iavf_asq_cmd_details *)0);
  #line 397 
  return status;
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
enum iavf_status iavf_aq_get_rss_lut(struct iavf_hw *hw, u16 vsi_id, bool pf_lut, u8 *lut, u16 lut_size)
{
  #line 413 
  return iavf_aq_get_set_rss_lut(hw,(unsigned short)((int)vsi_id),
                              (_Bool)((bool)((int)pf_lut) != 0),lut,
                              (unsigned short)((int)lut_size),(_Bool)0);
}

#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
enum iavf_status iavf_aq_set_rss_lut(struct iavf_hw *hw, u16 vsi_id, bool pf_lut, u8 *lut, u16 lut_size)
{
  #line 430 
  return iavf_aq_get_set_rss_lut(hw,(unsigned short)((int)vsi_id),
                              (_Bool)((bool)((int)pf_lut) != 0),lut,
                              (unsigned short)((int)lut_size),(_Bool)1);
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
static enum iavf_status iavf_aq_get_set_rss_key(struct iavf_hw *hw, u16 vsi_id, struct iavf_aqc_get_set_rss_key_data *key, bool set)
{
  #line 447 
  enum iavf_status status;
  #line 448 
  struct iavf_aq_desc desc;
  #line 449 
  struct iavf_aqc_get_set_rss_key *cmd_resp = (struct iavf_aqc_get_set_rss_key *)(& desc.params.raw);
  #line 451 
  u16 key_size = (unsigned short)52U;
  #line 453 
  if ((int)set != 0) 
                     #line 454 
                     iavf_fill_default_direct_cmd_desc(& desc,(unsigned short)2818); else 
                                                                    #line 457 
                                                                    iavf_fill_default_direct_cmd_desc(& desc,(unsigned short)2820);
  #line 461 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 4096U);
  #line 462 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 464 
  cmd_resp->vsi_id = (unsigned short)((unsigned int)vsi_id & 1023U);
  #line 468 
  cmd_resp->vsi_id = (unsigned short)((unsigned int)cmd_resp->vsi_id | 32768U);
  #line 470 
  status = iavf_asq_send_command(hw,& desc,(void *)key,(unsigned short)((int)key_size),(struct iavf_asq_cmd_details *)0);
  #line 472 
  return status;
}

#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
enum iavf_status iavf_aq_get_rss_key(struct iavf_hw *hw, u16 vsi_id, struct iavf_aqc_get_set_rss_key_data *key)
{
  #line 485 
  return iavf_aq_get_set_rss_key(hw,(unsigned short)((int)vsi_id),key,(_Bool)0);
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
enum iavf_status iavf_aq_set_rss_key(struct iavf_hw *hw, u16 vsi_id, struct iavf_aqc_get_set_rss_key_data *key)
{
  #line 499 
  return iavf_aq_get_set_rss_key(hw,(unsigned short)((int)vsi_id),key,(_Bool)1);
}

#line 547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
struct iavf_rx_ptype_decoded iavf_ptype_lookup[256U] = {[1] = {.ptype = (unsigned int)1U, .known = (unsigned int)1U, .payload_layer = (unsigned int)1U}, {.ptype = (unsigned int)2U, .known = (unsigned int)1U, .inner_prot = (unsigned int)5U, .payload_layer = (unsigned int)1U}, {.ptype = (unsigned int)3U, .known = (unsigned int)1U, .payload_layer = (unsigned int)1U}, {.ptype = (unsigned int)4U}, {.ptype = (unsigned int)5U}, {.ptype = (unsigned int)6U, .known = (unsigned int)1U, .payload_layer = (unsigned int)1U}, {.ptype = (unsigned int)7U, .known = (unsigned int)1U, .payload_layer = (unsigned int)1U}, {.ptype = (unsigned int)8U}, {.ptype = (unsigned int)9U}, {.ptype = (unsigned int)10U, .known = (unsigned int)1U, .payload_layer = (unsigned int)1U}, {.ptype = (unsigned int)11U, .known = (unsigned int)1U}, {.ptype = (unsigned int)12U, .known = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)13U, .known = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)14U, .known = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)15U, .known = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)16U, .known = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)17U, .known = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)18U, .known = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)19U, .known = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)20U, .known = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)21U, .known = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)22U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)23U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)24U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)25U}, {.ptype = (unsigned int)26U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)27U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)28U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)29U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)1U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)30U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)31U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)32U}, {.ptype = (unsigned int)33U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)34U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)35U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)36U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)2U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)37U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)2U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)38U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)39U}, {.ptype = (unsigned int)40U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)41U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)42U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)43U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)44U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)1U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)45U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)46U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)47U}, {.ptype = (unsigned int)48U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)49U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)50U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)51U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)2U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)52U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)2U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)53U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)54U}, {.ptype = (unsigned int)55U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)56U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)57U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)58U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)59U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)1U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)60U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)61U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)62U}, {.ptype = (unsigned int)63U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)64U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)65U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)66U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)2U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)67U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)2U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)68U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)69U}, {.ptype = (unsigned int)70U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)71U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)72U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)73U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)74U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)1U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)75U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)76U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)77U}, {.ptype = (unsigned int)78U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)79U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)80U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)81U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)2U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)82U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)2U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)83U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)84U}, {.ptype = (unsigned int)85U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)86U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)87U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)88U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .outer_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)89U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)90U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)91U}, {.ptype = (unsigned int)92U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)93U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)94U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)95U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)1U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)96U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)97U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)98U}, {.ptype = (unsigned int)99U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)100U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)101U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)102U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)2U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)103U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)2U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)104U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)105U}, {.ptype = (unsigned int)106U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)107U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)108U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)1U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)109U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)110U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)1U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)111U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)112U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)113U}, {.ptype = (unsigned int)114U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)115U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)116U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)117U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)2U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)118U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)2U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)119U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)120U}, {.ptype = (unsigned int)121U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)122U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)123U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)2U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)124U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)125U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)1U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)126U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)127U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)128U}, {.ptype = (unsigned int)129U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)130U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)131U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)132U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)2U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)133U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)2U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)134U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)135U}, {.ptype = (unsigned int)136U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)137U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)138U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)3U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)139U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)140U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)1U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)141U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)142U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)143U}, {.ptype = (unsigned int)144U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)145U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)146U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)1U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)147U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)2U, .tunnel_end_frag = (unsigned int)1U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)148U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)2U, .payload_layer = (unsigned int)2U}, {.ptype = (unsigned int)149U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)1U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)150U}, {.ptype = (unsigned int)151U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)2U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)152U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)3U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)153U, .known = (unsigned int)1U, .outer_ip = (unsigned int)1U, .outer_ip_ver = (unsigned int)1U, .tunnel_type = (unsigned int)4U, .tunnel_end_prot = (unsigned int)2U, .inner_prot = (unsigned int)4U, .payload_layer = (unsigned int)3U}, {.ptype = (unsigned int)154U}, {.ptype = (unsigned int)155U}, {.ptype = (unsigned int)156U}, {.ptype = (unsigned int)157U}, {.ptype = (unsigned int)158U}, {.ptype = (unsigned int)159U}, {.ptype = (unsigned int)160U}, {.ptype = (unsigned int)161U}, {.ptype = (unsigned int)162U}, {.ptype = (unsigned int)163U}, {.ptype = (unsigned int)164U}, {.ptype = (unsigned int)165U}, {.ptype = (unsigned int)166U}, {.ptype = (unsigned int)167U}, {.ptype = (unsigned int)168U}, {.ptype = (unsigned int)169U}, {.ptype = (unsigned int)170U}, {.ptype = (unsigned int)171U}, {.ptype = (unsigned int)172U}, {.ptype = (unsigned int)173U}, {.ptype = (unsigned int)174U}, {.ptype = (unsigned int)175U}, {.ptype = (unsigned int)176U}, {.ptype = (unsigned int)177U}, {.ptype = (unsigned int)178U}, {.ptype = (unsigned int)179U}, {.ptype = (unsigned int)180U}, {.ptype = (unsigned int)181U}, {.ptype = (unsigned int)182U}, {.ptype = (unsigned int)183U}, {.ptype = (unsigned int)184U}, {.ptype = (unsigned int)185U}, {.ptype = (unsigned int)186U}, {.ptype = (unsigned int)187U}, {.ptype = (unsigned int)188U}, {.ptype = (unsigned int)189U}, {.ptype = (unsigned int)190U}, {.ptype = (unsigned int)191U}, {.ptype = (unsigned int)192U}, {.ptype = (unsigned int)193U}, {.ptype = (unsigned int)194U}, {.ptype = (unsigned int)195U}, {.ptype = (unsigned int)196U}, {.ptype = (unsigned int)197U}, {.ptype = (unsigned int)198U}, {.ptype = (unsigned int)199U}, {.ptype = (unsigned int)200U}, {.ptype = (unsigned int)201U}, {.ptype = (unsigned int)202U}, {.ptype = (unsigned int)203U}, {.ptype = (unsigned int)204U}, {.ptype = (unsigned int)205U}, {.ptype = (unsigned int)206U}, {.ptype = (unsigned int)207U}, {.ptype = (unsigned int)208U}, {.ptype = (unsigned int)209U}, {.ptype = (unsigned int)210U}, {.ptype = (unsigned int)211U}, {.ptype = (unsigned int)212U}, {.ptype = (unsigned int)213U}, {.ptype = (unsigned int)214U}, {.ptype = (unsigned int)215U}, {.ptype = (unsigned int)216U}, {.ptype = (unsigned int)217U}, {.ptype = (unsigned int)218U}, {.ptype = (unsigned int)219U}, {.ptype = (unsigned int)220U}, {.ptype = (unsigned int)221U}, {.ptype = (unsigned int)222U}, {.ptype = (unsigned int)223U}, {.ptype = (unsigned int)224U}, {.ptype = (unsigned int)225U}, {.ptype = (unsigned int)226U}, {.ptype = (unsigned int)227U}, {.ptype = (unsigned int)228U}, {.ptype = (unsigned int)229U}, {.ptype = (unsigned int)230U}, {.ptype = (unsigned int)231U}, {.ptype = (unsigned int)232U}, {.ptype = (unsigned int)233U}, {.ptype = (unsigned int)234U}, {.ptype = (unsigned int)235U}, {.ptype = (unsigned int)236U}, {.ptype = (unsigned int)237U}, {.ptype = (unsigned int)238U}, {.ptype = (unsigned int)239U}, {.ptype = (unsigned int)240U}, {.ptype = (unsigned int)241U}, {.ptype = (unsigned int)242U}, {.ptype = (unsigned int)243U}, {.ptype = (unsigned int)244U}, {.ptype = (unsigned int)245U}, {.ptype = (unsigned int)246U}, {.ptype = (unsigned int)247U}, {.ptype = (unsigned int)248U}, {.ptype = (unsigned int)249U}, {.ptype = (unsigned int)250U}, {.ptype = (unsigned int)251U}, {.ptype = (unsigned int)252U}, {.ptype = (unsigned int)253U}, {.ptype = (unsigned int)254U}, {.ptype = (unsigned int)255U}};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
enum iavf_status iavf_aq_send_msg_to_pf(struct iavf_hw *hw, enum virtchnl_ops v_opcode, enum iavf_status v_retval, u8 *msg, u16 msglen, struct iavf_asq_cmd_details *cmd_details)
{
  #line 886 
  struct iavf_asq_cmd_details details;
  #line 887 
  struct iavf_aq_desc desc;
  #line 888 
  enum iavf_status status;
  #line 890 
  iavf_fill_default_direct_cmd_desc(& desc,(unsigned short)2049);
  #line 891 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 8192U);
  #line 892 
  desc.cookie_high = (unsigned int)v_opcode;
  #line 893 
  desc.cookie_low = (unsigned int)v_retval;
  #line 894 
  if ((unsigned int)msglen != 0U) {
    #line 895 
    desc.flags = (unsigned short)((unsigned int)desc.flags | 5120U);
    #line 897 
    if ((unsigned int)msglen > 512U) 
                                     #line 898 
                                     desc.flags = (unsigned short)((unsigned int)desc.flags | 512U);
    #line 899 
    desc.datalen = msglen;
  }
  #line 901 
  if (cmd_details == (struct iavf_asq_cmd_details *)0) {
    #line 902 
    memset((void *)(& details),0,32UL);
    #line 903 
    details.async = (_Bool)1;
    #line 904 
    cmd_details = & details;
  }
  #line 906 
  status = iavf_asq_send_command(hw,& desc,(void *)msg,(unsigned short)((int)msglen),cmd_details);
  #line 907 
  return status;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
void iavf_vf_parse_hw_config(struct iavf_hw *hw, struct virtchnl_vf_resource *msg)
{
  #line 921 
  struct virtchnl_vsi_resource *vsi_res;
  #line 922 
  int i;
  #line 924 
  vsi_res = & msg->vsi_res[0];
  #line 926 
  hw->dev_caps.num_vsis = (unsigned int)msg->num_vsis;
  #line 927 
  hw->dev_caps.num_rx_qp = (unsigned int)msg->num_queue_pairs;
  #line 928 
  hw->dev_caps.num_tx_qp = (unsigned int)msg->num_queue_pairs;
  #line 929 
  hw->dev_caps.num_msix_vectors_vf = (unsigned int)msg->max_vectors;
  #line 930 
  hw->dev_caps.dcb = (_Bool)((msg->vf_cap_flags & 1U) != 0U);
  #line 932 
  hw->dev_caps.fcoe = (_Bool)0;
  #line 933 
  i = 0;
  #line 933 
  while ((int)msg->num_vsis > i) {
    #line 934 
    if (vsi_res->vsi_type == (unsigned int)VIRTCHNL_VSI_SRIOV) {
      #line 935 
      ether_addr_copy((u8 *)(& hw->mac.perm_addr),(u8 *)(& vsi_res->default_mac_addr));
      #line 937 
      ether_addr_copy((u8 *)(& hw->mac.addr),(u8 *)(& vsi_res->default_mac_addr));
    }
    #line 940 
    vsi_res ++;
    #line 933 
    i ++;
  }
  #line 942 
  return;
}

#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_common.c"
enum iavf_status iavf_vf_reset(struct iavf_hw *hw)
{
  #line 954 
  return iavf_aq_send_msg_to_pf(hw,(enum virtchnl_ops)VIRTCHNL_OP_RESET_VF,
                             (enum iavf_status)IAVF_SUCCESS,(u8 *)0U,
                             (unsigned short)0,
                             (struct iavf_asq_cmd_details *)0);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_adminq.i.aux"
#line 806 
static void cif_mutex_lock_asq_mutex_of_iavf_adminq_info(struct mutex *lock);
#line 26 
#line 820 
static void cif_mutex_lock_arq_mutex_of_iavf_adminq_info(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 813  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_adminq.i.aux"
static void cif_mutex_unlock_asq_mutex_of_iavf_adminq_info(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_adminq.i.aux"
static void cif_mutex_unlock_arq_mutex_of_iavf_adminq_info(struct mutex *lock);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static void iavf_adminq_init_regs(struct iavf_hw *hw)
{
  #line 19 
  hw->aq.asq.tail = 33792U;
  #line 20 
  hw->aq.asq.head = 25600U;
  #line 21 
  hw->aq.asq.len = 26624U;
  #line 22 
  hw->aq.asq.bal = 31744U;
  #line 23 
  hw->aq.asq.bah = 30720U;
  #line 24 
  hw->aq.arq.tail = 28672U;
  #line 25 
  hw->aq.arq.head = 29696U;
  #line 26 
  hw->aq.arq.len = 32768U;
  #line 27 
  hw->aq.arq.bal = 27648U;
  #line 28 
  hw->aq.arq.bah = 24576U;
  #line 29 
  return;
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static enum iavf_status iavf_alloc_adminq_asq_ring(struct iavf_hw *hw)
{
  #line 37 
  enum iavf_status ret_code;
  #line 39 
  ret_code = iavf_allocate_dma_mem_d(hw,& hw->aq.asq.desc_buf,(unsigned long long)((unsigned long)hw->aq.num_asq_entries * 32UL),4096U);
  #line 44 
  if (ret_code != IAVF_SUCCESS) 
                                #line 45 
                                return ret_code;
  #line 47 
  ret_code = iavf_allocate_virt_mem_d(hw,& hw->aq.asq.cmd_buf,(unsigned int)hw->aq.num_asq_entries * 32U);
  #line 50 
  if (ret_code != IAVF_SUCCESS) {
    #line 51 
    iavf_free_dma_mem_d(hw,& hw->aq.asq.desc_buf);
    #line 52 
    return ret_code;
  }
  #line 55 
  return ret_code;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static enum iavf_status iavf_alloc_adminq_arq_ring(struct iavf_hw *hw)
{
  #line 64 
  enum iavf_status ret_code;
  #line 66 
  ret_code = iavf_allocate_dma_mem_d(hw,& hw->aq.arq.desc_buf,(unsigned long long)((unsigned long)hw->aq.num_arq_entries * 32UL),4096U);
  #line 72 
  return ret_code;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static void iavf_free_adminq_asq(struct iavf_hw *hw)
{
  #line 84 
  iavf_free_dma_mem_d(hw,& hw->aq.asq.desc_buf);
  #line 85 
  return;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static void iavf_free_adminq_arq(struct iavf_hw *hw)
{
  #line 96 
  iavf_free_dma_mem_d(hw,& hw->aq.arq.desc_buf);
  #line 97 
  return;
}

#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static enum iavf_status iavf_alloc_arq_bufs(struct iavf_hw *hw)
{
  #line 105 
  struct iavf_aq_desc *desc;
  #line 106 
  struct iavf_dma_mem *bi;
  #line 107 
  enum iavf_status ret_code;
  #line 108 
  int i;
  #line 115 
  ret_code = iavf_allocate_virt_mem_d(hw,& hw->aq.arq.dma_head,(unsigned int)hw->aq.num_arq_entries * 24U);
  #line 118 
  if (ret_code != IAVF_SUCCESS) 
                                #line 119 
                                goto alloc_arq_bufs;
  #line 120 
  hw->aq.arq.r.arq_bi = (struct iavf_dma_mem *)hw->aq.arq.dma_head.va;
  #line 123 
  i = 0;
  #line 123 
  while ((int)hw->aq.num_arq_entries > i) {
    #line 124 
    bi = hw->aq.arq.r.arq_bi + (unsigned long)i;
    #line 125 
    ret_code = iavf_allocate_dma_mem_d(hw,bi,(unsigned long long)hw->aq.arq_buf_size,4096U);
    #line 129 
    if (ret_code != IAVF_SUCCESS) 
                                  #line 130 
                                  goto unwind_alloc_arq_bufs;
    #line 133 
    desc = (struct iavf_aq_desc *)hw->aq.arq.desc_buf.va + (unsigned long)i;
    #line 135 
    desc->flags = (unsigned short)4096U;
    #line 136 
    if ((unsigned int)hw->aq.arq_buf_size > 512U) 
                                                  #line 137 
                                                  desc->flags = (unsigned short)((unsigned int)desc->flags | 512U);
    #line 138 
    desc->opcode = (unsigned short)0U;
    #line 142 
    desc->datalen = (unsigned short)bi->size;
    #line 143 
    desc->retval = (unsigned short)0U;
    #line 144 
    desc->cookie_high = 0U;
    #line 145 
    desc->cookie_low = 0U;
    #line 146 
    desc->params.external.addr_high = (unsigned int)(bi->pa >> 32);
    #line 148 
    desc->params.external.addr_low = (unsigned int)bi->pa;
    #line 150 
    desc->params.external.param0 = 0U;
    #line 151 
    desc->params.external.param1 = 0U;
    #line 123 
    i ++;
  }
  #line 154 
  alloc_arq_bufs: 
                  #line 154 
  ;
  #line 155 
  return ret_code;
  #line 157 
  unwind_alloc_arq_bufs: 
                         #line 157 
  ;
  #line 159 
  i --;
  #line 160 
  while (i >= 0) {
    #line 161 
    iavf_free_dma_mem_d(hw,hw->aq.arq.r.arq_bi + (unsigned long)i);
    #line 160 
    i --;
  }
  #line 162 
  iavf_free_virt_mem_d(hw,& hw->aq.arq.dma_head);
  #line 164 
  return ret_code;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static enum iavf_status iavf_alloc_asq_bufs(struct iavf_hw *hw)
{
  #line 173 
  struct iavf_dma_mem *bi;
  #line 174 
  enum iavf_status ret_code;
  #line 175 
  int i;
  #line 178 
  ret_code = iavf_allocate_virt_mem_d(hw,& hw->aq.asq.dma_head,(unsigned int)hw->aq.num_asq_entries * 24U);
  #line 181 
  if (ret_code != IAVF_SUCCESS) 
                                #line 182 
                                goto alloc_asq_bufs;
  #line 183 
  hw->aq.asq.r.asq_bi = (struct iavf_dma_mem *)hw->aq.asq.dma_head.va;
  #line 186 
  i = 0;
  #line 186 
  while ((int)hw->aq.num_asq_entries > i) {
    #line 187 
    bi = hw->aq.asq.r.asq_bi + (unsigned long)i;
    #line 188 
    ret_code = iavf_allocate_dma_mem_d(hw,bi,(unsigned long long)hw->aq.asq_buf_size,4096U);
    #line 192 
    if (ret_code != IAVF_SUCCESS) 
                                  #line 193 
                                  goto unwind_alloc_asq_bufs;
    #line 186 
    i ++;
  }
  #line 195 
  alloc_asq_bufs: 
                  #line 195 
  ;
  #line 196 
  return ret_code;
  #line 198 
  unwind_alloc_asq_bufs: 
                         #line 198 
  ;
  #line 200 
  i --;
  #line 201 
  while (i >= 0) {
    #line 202 
    iavf_free_dma_mem_d(hw,hw->aq.asq.r.asq_bi + (unsigned long)i);
    #line 201 
    i --;
  }
  #line 203 
  iavf_free_virt_mem_d(hw,& hw->aq.asq.dma_head);
  #line 205 
  return ret_code;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static void iavf_free_arq_bufs(struct iavf_hw *hw)
{
  #line 214 
  int i;
  #line 217 
  i = 0;
  #line 217 
  while ((int)hw->aq.num_arq_entries > i) {
    #line 218 
    iavf_free_dma_mem_d(hw,hw->aq.arq.r.arq_bi + (unsigned long)i);
    #line 217 
    i ++;
  }
  #line 221 
  iavf_free_dma_mem_d(hw,& hw->aq.arq.desc_buf);
  #line 224 
  iavf_free_virt_mem_d(hw,& hw->aq.arq.dma_head);
  #line 225 
  return;
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static void iavf_free_asq_bufs(struct iavf_hw *hw)
{
  #line 233 
  int i;
  #line 236 
  i = 0;
  #line 236 
  while ((int)hw->aq.num_asq_entries > i) {
    #line 237 
    if ((hw->aq.asq.r.asq_bi + (unsigned long)i)->pa != 0ULL) 
                                                              #line 238 
                                                              iavf_free_dma_mem_d(hw,hw->aq.asq.r.asq_bi + (unsigned long)i);
    #line 236 
    i ++;
  }
  #line 241 
  iavf_free_virt_mem_d(hw,& hw->aq.asq.cmd_buf);
  #line 244 
  iavf_free_dma_mem_d(hw,& hw->aq.asq.desc_buf);
  #line 247 
  iavf_free_virt_mem_d(hw,& hw->aq.asq.dma_head);
  #line 248 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static enum iavf_status iavf_config_asq_regs(struct iavf_hw *hw)
{
  #line 258 
  enum iavf_status ret_code = 0;
  #line 259 
  u32 reg = 0U;
  #line 262 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.asq.head));
  #line 263 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.asq.tail));
  #line 266 
  writel((unsigned int)hw->aq.num_asq_entries | 2147483648U,(void *)(hw->hw_addr + (unsigned long)hw->aq.asq.len));
  #line 268 
  writel((unsigned int)hw->aq.asq.desc_buf.pa,(void *)(hw->hw_addr + (unsigned long)hw->aq.asq.bal));
  #line 269 
  writel((unsigned int)(hw->aq.asq.desc_buf.pa >> 32),(void *)(hw->hw_addr + (unsigned long)hw->aq.asq.bah));
  #line 272 
  reg = readl((void *)(hw->hw_addr + (unsigned long)hw->aq.asq.bal));
  #line 273 
  if ((unsigned int)hw->aq.asq.desc_buf.pa != reg) 
                                                   #line 274 
                                                   ret_code = IAVF_ERR_ADMIN_QUEUE_ERROR;
  #line 276 
  return ret_code;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static enum iavf_status iavf_config_arq_regs(struct iavf_hw *hw)
{
  #line 287 
  enum iavf_status ret_code = 0;
  #line 288 
  u32 reg = 0U;
  #line 291 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.head));
  #line 292 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.tail));
  #line 295 
  writel((unsigned int)hw->aq.num_arq_entries | 2147483648U,(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.len));
  #line 297 
  writel((unsigned int)hw->aq.arq.desc_buf.pa,(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.bal));
  #line 298 
  writel((unsigned int)(hw->aq.arq.desc_buf.pa >> 32),(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.bah));
  #line 301 
  writel((unsigned int)((int)hw->aq.num_arq_entries + -1),(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.tail));
  #line 304 
  reg = readl((void *)(hw->hw_addr + (unsigned long)hw->aq.arq.bal));
  #line 305 
  if ((unsigned int)hw->aq.arq.desc_buf.pa != reg) 
                                                   #line 306 
                                                   ret_code = IAVF_ERR_ADMIN_QUEUE_ERROR;
  #line 308 
  return ret_code;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static enum iavf_status iavf_init_asq(struct iavf_hw *hw)
{
  #line 326 
  enum iavf_status ret_code = 0;
  #line 328 
  if ((unsigned int)hw->aq.asq.count != 0U) {
    #line 330 
    ret_code = IAVF_ERR_NOT_READY;
    #line 331 
    goto init_adminq_exit;
  }
  #line 335 
  if ((unsigned int)hw->aq.num_asq_entries == 0U || (unsigned int)hw->aq.asq_buf_size == 0U) {
    #line 337 
    ret_code = IAVF_ERR_CONFIG;
    #line 338 
    goto init_adminq_exit;
  }
  #line 341 
  hw->aq.asq.next_to_use = (unsigned short)0U;
  #line 342 
  hw->aq.asq.next_to_clean = (unsigned short)0U;
  #line 345 
  ret_code = iavf_alloc_adminq_asq_ring(hw);
  #line 346 
  if (ret_code != IAVF_SUCCESS) 
                                #line 347 
                                goto init_adminq_exit;
  #line 350 
  ret_code = iavf_alloc_asq_bufs(hw);
  #line 351 
  if (ret_code != IAVF_SUCCESS) 
                                #line 352 
                                goto init_adminq_free_rings;
  #line 355 
  ret_code = iavf_config_asq_regs(hw);
  #line 356 
  if (ret_code != IAVF_SUCCESS) 
                                #line 357 
                                goto init_adminq_free_rings;
  #line 360 
  hw->aq.asq.count = hw->aq.num_asq_entries;
  #line 361 
  goto init_adminq_exit;
  #line 363 
  init_adminq_free_rings: 
                          #line 363 
  ;
  #line 364 
  iavf_free_adminq_asq(hw);
  #line 366 
  init_adminq_exit: 
                    #line 366 
  ;
  #line 367 
  return ret_code;
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static enum iavf_status iavf_init_arq(struct iavf_hw *hw)
{
  #line 385 
  enum iavf_status ret_code = 0;
  #line 387 
  if ((unsigned int)hw->aq.arq.count != 0U) {
    #line 389 
    ret_code = IAVF_ERR_NOT_READY;
    #line 390 
    goto init_adminq_exit;
  }
  #line 394 
  if ((unsigned int)hw->aq.num_arq_entries == 0U || (unsigned int)hw->aq.arq_buf_size == 0U) {
    #line 396 
    ret_code = IAVF_ERR_CONFIG;
    #line 397 
    goto init_adminq_exit;
  }
  #line 400 
  hw->aq.arq.next_to_use = (unsigned short)0U;
  #line 401 
  hw->aq.arq.next_to_clean = (unsigned short)0U;
  #line 404 
  ret_code = iavf_alloc_adminq_arq_ring(hw);
  #line 405 
  if (ret_code != IAVF_SUCCESS) 
                                #line 406 
                                goto init_adminq_exit;
  #line 409 
  ret_code = iavf_alloc_arq_bufs(hw);
  #line 410 
  if (ret_code != IAVF_SUCCESS) 
                                #line 411 
                                goto init_adminq_free_rings;
  #line 414 
  ret_code = iavf_config_arq_regs(hw);
  #line 415 
  if (ret_code != IAVF_SUCCESS) 
                                #line 416 
                                goto init_adminq_free_rings;
  #line 419 
  hw->aq.arq.count = hw->aq.num_arq_entries;
  #line 420 
  goto init_adminq_exit;
  #line 422 
  init_adminq_free_rings: 
                          #line 422 
  ;
  #line 423 
  iavf_free_adminq_arq(hw);
  #line 425 
  init_adminq_exit: 
                    #line 425 
  ;
  #line 426 
  return ret_code;
}

#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static enum iavf_status iavf_shutdown_asq(struct iavf_hw *hw)
{
  #line 437 
  enum iavf_status ret_code = 0;
  #line 439 
  cif_mutex_lock_asq_mutex_of_iavf_adminq_info(& hw->aq.asq_mutex);
  #line 441 
  if ((unsigned int)hw->aq.asq.count == 0U) {
    #line 442 
    ret_code = IAVF_ERR_NOT_READY;
    #line 443 
    goto shutdown_asq_out;
  }
  #line 447 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.asq.head));
  #line 448 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.asq.tail));
  #line 449 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.asq.len));
  #line 450 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.asq.bal));
  #line 451 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.asq.bah));
  #line 453 
  hw->aq.asq.count = (unsigned short)0U;
  #line 456 
  iavf_free_asq_bufs(hw);
  #line 458 
  shutdown_asq_out: 
                    #line 458 
  ;
  #line 459 
  cif_mutex_unlock_asq_mutex_of_iavf_adminq_info(& hw->aq.asq_mutex);
  #line 460 
  return ret_code;
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static enum iavf_status iavf_shutdown_arq(struct iavf_hw *hw)
{
  #line 471 
  enum iavf_status ret_code = 0;
  #line 473 
  cif_mutex_lock_arq_mutex_of_iavf_adminq_info(& hw->aq.arq_mutex);
  #line 475 
  if ((unsigned int)hw->aq.arq.count == 0U) {
    #line 476 
    ret_code = IAVF_ERR_NOT_READY;
    #line 477 
    goto shutdown_arq_out;
  }
  #line 481 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.head));
  #line 482 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.tail));
  #line 483 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.len));
  #line 484 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.bal));
  #line 485 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.bah));
  #line 487 
  hw->aq.arq.count = (unsigned short)0U;
  #line 490 
  iavf_free_arq_bufs(hw);
  #line 492 
  shutdown_arq_out: 
                    #line 492 
  ;
  #line 493 
  cif_mutex_unlock_arq_mutex_of_iavf_adminq_info(& hw->aq.arq_mutex);
  #line 494 
  return ret_code;
}

#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
enum iavf_status iavf_init_adminq(struct iavf_hw *hw)
{
  #line 510 
  enum iavf_status ret_code;
  #line 513 
  if ((((unsigned int)hw->aq.num_arq_entries == 0U || (unsigned int)hw->aq.num_asq_entries == 0U) || (unsigned int)hw->aq.arq_buf_size == 0U) || (unsigned int)hw->aq.asq_buf_size == 0U) {
    #line 517 
    ret_code = IAVF_ERR_CONFIG;
    #line 518 
    goto init_adminq_exit;
  }
  #line 522 
  iavf_adminq_init_regs(hw);
  #line 525 
  hw->aq.asq_cmd_timeout = 250000U;
  #line 528 
  ret_code = iavf_init_asq(hw);
  #line 529 
  if (ret_code != IAVF_SUCCESS) 
                                #line 530 
                                goto init_adminq_destroy_locks;
  #line 533 
  ret_code = iavf_init_arq(hw);
  #line 534 
  if (ret_code != IAVF_SUCCESS) 
                                #line 535 
                                goto init_adminq_free_asq;
  #line 538 
  goto init_adminq_exit;
  #line 540 
  init_adminq_free_asq: 
                        #line 540 
  ;
  #line 541 
  iavf_shutdown_asq(hw);
  #line 542 
  init_adminq_destroy_locks: 
                             #line 542 
  ;
  #line 544 
  init_adminq_exit: 
                    #line 544 
  ;
  #line 545 
  return ret_code;
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
enum iavf_status iavf_shutdown_adminq(struct iavf_hw *hw)
{
  #line 554 
  enum iavf_status ret_code = 0;
  #line 556 
  if ((int)iavf_check_asq_alive(hw) != 0) 
                                          #line 557 
                                          iavf_aq_queue_shutdown(hw,(_Bool)1);
  #line 559 
  iavf_shutdown_asq(hw);
  #line 560 
  iavf_shutdown_arq(hw);
  #line 562 
  return ret_code;
}

#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
static u16 iavf_clean_asq(struct iavf_hw *hw)
{
  #line 574 
  struct iavf_asq_cmd_details *details;
  #line 576 
  struct iavf_aq_desc desc_cb;
  #line 577 
  struct iavf_aq_desc *desc;
  #line 603 
  unsigned int tmp_1;
  #line 573 
  struct iavf_adminq_ring *asq = & hw->aq.asq;
  #line 575 
  u16 ntc = asq->next_to_clean;
  #line 579 
  desc = (struct iavf_aq_desc *)asq->desc_buf.va + (unsigned long)ntc;
  #line 580 
  details = (struct iavf_asq_cmd_details *)asq->cmd_buf.va + (unsigned long)ntc;
  #line 581 
  while (1) {
    #line 581 
    ;
    #line 581 
    if (! (readl((void *)(hw->hw_addr + (unsigned long)hw->aq.asq.head)) != (unsigned int)ntc)) 
      #line 581 
      break;
    #line 582 
    if ((hw->debug_mask & 16777216U) != 0U) {
      #line 582 
      ;
      #line 582 
      ;
      #line 582 
      ;
      #line 582 
      ;
      #line 582 
      printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func,(int)ntc,readl((void *)(hw->hw_addr + (unsigned long)hw->aq.asq.head)));
    }
    #line 585 
    if (details->callback != (void *)0) {
      #line 586 
      void (*cb_func)(struct iavf_hw *, struct iavf_aq_desc *) = (void (*)(struct iavf_hw *, struct iavf_aq_desc *))details->callback;
      #line 588 
      desc_cb = *desc;
      #line 589 
      (*cb_func)(hw,& desc_cb);
    }
    #line 591 
    memset((void *)desc,0,32UL);
    #line 592 
    memset((void *)details,0,32UL);
    #line 594 
    ntc = (u16)((int)ntc + 1);
    #line 595 
    if ((int)asq->count == (int)ntc) 
                                     #line 596 
                                     ntc = (unsigned short)0U;
    #line 597 
    desc = (struct iavf_aq_desc *)asq->desc_buf.va + (unsigned long)ntc;
    #line 598 
    details = (struct iavf_asq_cmd_details *)asq->cmd_buf.va + (unsigned long)ntc;
  }
  #line 601 
  asq->next_to_clean = ntc;
  #line 603 
  if ((int)asq->next_to_clean <= (int)asq->next_to_use) 
                                                        #line 603 
                                                        tmp_1 = (unsigned int)asq->count; else 
                                                                    #line 603 
                                                                    tmp_1 = 0U;
  #line 603 
  ;
  #line 603 
  return (unsigned short)(((tmp_1 + (unsigned int)asq->next_to_clean) - (unsigned int)asq->next_to_use) + 65535U);
}

#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
bool iavf_asq_done(struct iavf_hw *hw)
{
  #line 618 
  ;
  #line 618 
  return (_Bool)(readl((void *)(hw->hw_addr + (unsigned long)hw->aq.asq.head)) == (unsigned int)hw->aq.asq.next_to_use);
}

#line 632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
enum iavf_status iavf_asq_send_command(struct iavf_hw *hw, struct iavf_aq_desc *desc, void *buff, u16 buff_size, struct iavf_asq_cmd_details *cmd_details)
{
  #line 639 
  struct iavf_asq_cmd_details *details;
  #line 640 
  struct iavf_aq_desc *desc_on_ring;
  #line 638 
  struct iavf_dma_mem *dma_buff = (struct iavf_dma_mem *)0;
  #line 641 
  bool cmd_completed = (_Bool)0;
  #line 642 
  enum iavf_status status = 0;
  #line 643 
  u16 retval = (unsigned short)0U;
  #line 644 
  u32 val = 0U;
  #line 646 
  cif_mutex_lock_asq_mutex_of_iavf_adminq_info(& hw->aq.asq_mutex);
  #line 648 
  if ((unsigned int)hw->aq.asq.count == 0U) {
    #line 649 
    if ((hw->debug_mask & 16777216U) != 0U) 
                                            #line 649 
                                            printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func);
    #line 651 
    status = IAVF_ERR_QUEUE_EMPTY;
    #line 652 
    goto asq_send_command_error;
  }
  #line 655 
  hw->aq.asq_last_status = IAVF_AQ_RC_OK;
  #line 657 
  val = readl((void *)(hw->hw_addr + (unsigned long)hw->aq.asq.head));
  #line 658 
  if ((unsigned int)hw->aq.num_asq_entries <= val) {
    #line 659 
    if ((hw->debug_mask & 16777216U) != 0U) 
                                            #line 659 
                                            printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func,val);
    #line 661 
    status = IAVF_ERR_QUEUE_EMPTY;
    #line 662 
    goto asq_send_command_error;
  }
  #line 665 
  details = (struct iavf_asq_cmd_details *)hw->aq.asq.cmd_buf.va + (unsigned long)hw->aq.asq.next_to_use;
  #line 666 
  if (cmd_details != (struct iavf_asq_cmd_details *)0) {
    #line 667 
    *details = *cmd_details;
    #line 673 
    if (details->cookie != 0ULL) {
      #line 674 
      desc->cookie_high = (unsigned int)(details->cookie >> 32);
      #line 676 
      desc->cookie_low = (unsigned int)details->cookie;
    }
  }
  else 
       #line 680 
       memset((void *)details,0,32UL);
  #line 684 
  desc->flags = (unsigned short)((int)desc->flags & ~ ((int)details->flags_dis));
  #line 685 
  desc->flags = (unsigned short)((int)desc->flags | (int)details->flags_ena);
  #line 687 
  if ((int)hw->aq.asq_buf_size < (int)buff_size) {
    #line 688 
    if ((hw->debug_mask & 16777216U) != 0U) 
                                            #line 688 
                                            printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func,(int)buff_size);
    #line 692 
    status = IAVF_ERR_INVALID_SIZE;
    #line 693 
    goto asq_send_command_error;
  }
  #line 696 
  if ((int)details->postpone != 0 && ! details->async) {
    #line 697 
    if ((hw->debug_mask & 16777216U) != 0U) 
                                            #line 697 
                                            printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func);
    #line 700 
    status = IAVF_ERR_PARAM;
    #line 701 
    goto asq_send_command_error;
  }
  #line 711 
  if ((unsigned int)iavf_clean_asq(hw) == 0U) {
    #line 712 
    if ((hw->debug_mask & 16777216U) != 0U) 
                                            #line 712 
                                            printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func);
    #line 715 
    status = IAVF_ERR_ADMIN_QUEUE_FULL;
    #line 716 
    goto asq_send_command_error;
  }
  #line 720 
  desc_on_ring = (struct iavf_aq_desc *)hw->aq.asq.desc_buf.va + (unsigned long)hw->aq.asq.next_to_use;
  #line 723 
  *desc_on_ring = *desc;
  #line 726 
  if (buff != (void *)0) {
    #line 727 
    dma_buff = hw->aq.asq.r.asq_bi + (unsigned long)hw->aq.asq.next_to_use;
    #line 729 
    memcpy(dma_buff->va,buff,(unsigned long)buff_size);
    #line 730 
    desc_on_ring->datalen = buff_size;
    #line 735 
    desc_on_ring->params.external.addr_high = (unsigned int)(dma_buff->pa >> 32);
    #line 737 
    desc_on_ring->params.external.addr_low = (unsigned int)dma_buff->pa;
  }
  #line 742 
  if ((hw->debug_mask & 16777216U) != 0U) 
                                          #line 742 
                                          printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func);
  #line 743 
  iavf_debug_aq(hw,(enum iavf_debug_mask)IAVF_DEBUG_AQ_COMMAND,(void *)desc_on_ring,buff,(unsigned short)((int)buff_size));
  #line 745 
  hw->aq.asq.next_to_use = (u16)((int)hw->aq.asq.next_to_use + 1);
  #line 746 
  if ((int)hw->aq.asq.next_to_use == (int)hw->aq.asq.count) 
                                                            #line 747 
                                                            hw->aq.asq.next_to_use = (unsigned short)0U;
  #line 748 
  if (! details->postpone) 
                           #line 749 
                           writel((unsigned int)hw->aq.asq.next_to_use,(void *)(hw->hw_addr + (unsigned long)hw->aq.asq.tail));
  #line 754 
  if (! details->async && ! details->postpone) {
    #line 755 
    u32 total_delay = 0U;
    #line 757 
    while (1) {
      {
        #line 761 
        if ((int)iavf_asq_done(hw) != 0) 
                                         #line 762 
                                         break;
        #line 763 
        __const_udelay(214750UL);
        #line 764 
        total_delay += 50U;
      }
      #line 765 
      if (! (hw->aq.asq_cmd_timeout > total_delay)) 
                                                    #line 757 
                                                    break;
    }
  }
  #line 769 
  if ((int)iavf_asq_done(hw) != 0) {
    #line 770 
    *desc = *desc_on_ring;
    #line 771 
    if (buff != (void *)0) 
                           #line 772 
                           memcpy(buff,dma_buff->va,(unsigned long)buff_size);
    #line 773 
    retval = desc->retval;
    #line 774 
    if ((unsigned int)retval != 0U) {
      #line 775 
      if ((hw->debug_mask & 16777216U) != 0U) 
                                              #line 775 
                                              printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func,(int)retval);
      #line 781 
      retval = (unsigned short)((unsigned int)retval & 255U);
    }
    #line 783 
    cmd_completed = (_Bool)1;
    #line 784 
    if ((unsigned int)retval == 0U) 
                                    #line 785 
                                    status = IAVF_SUCCESS;
    else 
      #line 786 
      if ((unsigned int)retval == 12U) 
                                       #line 787 
                                       status = IAVF_ERR_NOT_READY; else 
                                                                    #line 789 
                                                                    status = IAVF_ERR_ADMIN_QUEUE_ERROR;
    #line 790 
    hw->aq.asq_last_status = (enum iavf_admin_queue_err)retval;
  }
  #line 793 
  if ((hw->debug_mask & 16777216U) != 0U) 
                                          #line 793 
                                          printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func);
  #line 795 
  iavf_debug_aq(hw,(enum iavf_debug_mask)IAVF_DEBUG_AQ_COMMAND,(void *)desc,buff,(unsigned short)((int)buff_size));
  #line 798 
  if (details->wb_desc != (struct iavf_aq_desc *)0) 
                                                    #line 799 
                                                    *(details->wb_desc) = *desc_on_ring;
  #line 803 
  if ((! details->async && ! details->postpone) && ! cmd_completed) {
    #line 804 
    if ((readl((void *)(hw->hw_addr + (unsigned long)hw->aq.asq.len)) & 1073741824U) != 0U) {
      #line 805 
      if ((hw->debug_mask & 16777216U) != 0U) 
                                              #line 805 
                                              printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func);
      #line 807 
      status = IAVF_ERR_ADMIN_QUEUE_CRITICAL_ERROR;
    }
    else {
      #line 809 
      if ((hw->debug_mask & 16777216U) != 0U) 
                                              #line 809 
                                              printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func);
      #line 811 
      status = IAVF_ERR_ADMIN_QUEUE_TIMEOUT;
    }
  }
  #line 815 
  asq_send_command_error: 
                          #line 815 
  ;
  #line 816 
  cif_mutex_unlock_asq_mutex_of_iavf_adminq_info(& hw->aq.asq_mutex);
  #line 817 
  return status;
}

#line 827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
void iavf_fill_default_direct_cmd_desc(struct iavf_aq_desc *desc, u16 opcode)
{
  #line 830 
  memset((void *)desc,0,32UL);
  #line 831 
  desc->opcode = opcode;
  #line 832 
  desc->flags = (unsigned short)8192U;
  #line 833 
  return;
}

#line 845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_adminq.c"
enum iavf_status iavf_clean_arq_element(struct iavf_hw *hw, struct iavf_arq_event_info *e, u16 *pending)
{
  #line 896 
  u16 __UNIQUE_ID___x534;
  #line 896 
  int tmp_0;
  #line 850 
  struct iavf_aq_desc *desc;
  #line 852 
  struct iavf_dma_mem *bi;
  #line 853 
  u16 desc_idx;
  #line 854 
  u16 datalen;
  #line 855 
  u16 flags;
  #line 856 
  u16 ntu;
  #line 849 
  u16 ntc = hw->aq.arq.next_to_clean;
  #line 851 
  enum iavf_status ret_code = 0;
  #line 859 
  memset((void *)(& e->desc),0,32UL);
  #line 862 
  cif_mutex_lock_arq_mutex_of_iavf_adminq_info(& hw->aq.arq_mutex);
  #line 864 
  if ((unsigned int)hw->aq.arq.count == 0U) {
    #line 865 
    if ((hw->debug_mask & 16777216U) != 0U) 
                                            #line 865 
                                            printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func);
    #line 867 
    ret_code = IAVF_ERR_QUEUE_EMPTY;
    #line 868 
    goto clean_arq_element_err;
  }
  #line 872 
  ntu = (unsigned short)((unsigned int)((unsigned short)readl((void *)(hw->hw_addr + (unsigned long)hw->aq.arq.head))) & 1023U);
  #line 873 
  if ((int)ntu == (int)ntc) {
    #line 875 
    ret_code = IAVF_ERR_ADMIN_QUEUE_NO_WORK;
    #line 876 
    goto clean_arq_element_out;
  }
  #line 880 
  desc = (struct iavf_aq_desc *)hw->aq.arq.desc_buf.va + (unsigned long)ntc;
  #line 881 
  desc_idx = ntc;
  #line 883 
  hw->aq.arq_last_status = (enum iavf_admin_queue_err)desc->retval;
  #line 885 
  flags = desc->flags;
  #line 886 
  if (((unsigned long)flags & 4UL) != 0UL) {
    #line 887 
    ret_code = IAVF_ERR_ADMIN_QUEUE_ERROR;
    #line 888 
    if ((hw->debug_mask & 16777216U) != 0U) 
                                            #line 888 
                                            printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func,(unsigned int)hw->aq.arq_last_status);
  }
  #line 894 
  e->desc = *desc;
  #line 895 
  datalen = desc->datalen;
  {
    #line 896 
    __UNIQUE_ID___x534 = datalen;
    #line 896 
    u16 __UNIQUE_ID___y535 = e->buf_len;
    #line 896 
    if ((int)__UNIQUE_ID___x534 < (int)__UNIQUE_ID___y535) 
                                                           #line 896 
                                                           tmp_0 = (int)__UNIQUE_ID___x534; else 
                                                                    #line 896 
                                                                    tmp_0 = (int)__UNIQUE_ID___y535;
    }
  #line 896 
  e->msg_len = (unsigned short)tmp_0;
  #line 897 
  if (e->msg_buf != (u8 *)0U && (unsigned int)e->msg_len != 0U) 
                                                                #line 898 
                                                                memcpy((void *)e->msg_buf,(hw->aq.arq.r.arq_bi + (unsigned long)desc_idx)->va,(unsigned long)e->msg_len);
  #line 901 
  if ((hw->debug_mask & 16777216U) != 0U) 
                                          #line 901 
                                          printk((char *)"\001",(int)hw->bus.bus_id,(int)hw->bus.device,(int)hw->bus.func);
  #line 902 
  iavf_debug_aq(hw,(enum iavf_debug_mask)IAVF_DEBUG_AQ_COMMAND,(void *)desc,(void *)e->msg_buf,(unsigned short)((int)hw->aq.arq_buf_size));
  #line 909 
  bi = hw->aq.arq.r.arq_bi + (unsigned long)ntc;
  #line 910 
  memset((void *)desc,0,32UL);
  #line 912 
  desc->flags = (unsigned short)4096U;
  #line 913 
  if ((unsigned int)hw->aq.arq_buf_size > 512U) 
                                                #line 914 
                                                desc->flags = (unsigned short)((unsigned int)desc->flags | 512U);
  #line 915 
  desc->datalen = (unsigned short)bi->size;
  #line 916 
  desc->params.external.addr_high = (unsigned int)(bi->pa >> 32);
  #line 917 
  desc->params.external.addr_low = (unsigned int)bi->pa;
  #line 920 
  writel((unsigned int)ntc,(void *)(hw->hw_addr + (unsigned long)hw->aq.arq.tail));
  #line 922 
  ntc = (u16)((int)ntc + 1);
  #line 923 
  if ((int)hw->aq.num_arq_entries == (int)ntc) 
                                               #line 924 
                                               ntc = (unsigned short)0U;
  #line 925 
  hw->aq.arq.next_to_clean = ntc;
  #line 926 
  hw->aq.arq.next_to_use = ntu;
  #line 928 
  clean_arq_element_out: 
                         #line 928 
  ;
  #line 930 
  if (pending != (u16 *)0U) {
    #line 931 
    unsigned int tmp_2;
    #line 931 
    if ((int)ntc > (int)ntu) 
                             #line 931 
                             tmp_2 = (unsigned int)hw->aq.arq.count; else 
                                                                    #line 931 
                                                                    tmp_2 = 0U;
    #line 931 
    *pending = (unsigned short)(tmp_2 + (unsigned int)((int)ntu - (int)ntc));
  }
  #line 933 
  clean_arq_element_err: 
                         #line 933 
  ;
  #line 934 
  cif_mutex_unlock_arq_mutex_of_iavf_adminq_info(& hw->aq.arq_mutex);
  #line 936 
  return ret_code;
}

#line 806  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_adminq.i.aux"
static void cif_mutex_lock_asq_mutex_of_iavf_adminq_info(struct mutex *lock)
{
  #line 809 
  ldv_mutex_model_lock(lock,(char *)"asq_mutex_of_iavf_adminq_info");
  #line 810 
  return;
}

#line 813  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_adminq.i.aux"
static void cif_mutex_unlock_asq_mutex_of_iavf_adminq_info(struct mutex *lock)
{
  #line 816 
  ldv_mutex_model_unlock(lock,(char *)"asq_mutex_of_iavf_adminq_info");
  #line 817 
  return;
}

#line 820  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_adminq.i.aux"
static void cif_mutex_lock_arq_mutex_of_iavf_adminq_info(struct mutex *lock)
{
  #line 823 
  ldv_mutex_model_lock(lock,(char *)"arq_mutex_of_iavf_adminq_info");
  #line 824 
  return;
}

#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_adminq.i.aux"
static void cif_mutex_unlock_arq_mutex_of_iavf_adminq_info(struct mutex *lock)
{
  #line 830 
  ldv_mutex_model_unlock(lock,(char *)"arq_mutex_of_iavf_adminq_info");
  #line 831 
  return;
}

/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
#line 4  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_txrx.i.aux"
#line 4 
void ldv_atomic_add(int i, atomic_t *v);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_txrx.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_txrx.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr);
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_5231 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 60 
#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_txrx.i.aux"
static void atomic_add(int i, atomic_t *v);
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 91 
extern struct cpumask __cpu_online_mask;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static int cpumask_test_cpu(int cpu, struct cpumask *cpumask)
{
  #line 360 
  ;
  #line 360 
  return (int)test_bit((long)cpumask_check((unsigned int)cpu),
                 (unsigned long *)(& cpumask->bits));
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
__inline static void prefetchw(void *x)
{
  #line 836 
  ldv_inline_asm();
  #line 837 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
#line 410 
extern nodemask_t node_states[5U];
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
__inline static int node_state(int node, enum node_states state)
{
  #line 415 
  return (int)test_bit((long)node,
               (unsigned long *)(& node_states[(unsigned int)state].bits));
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
#line 223 
int rcu_read_lock_sched_held(void);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_5313 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_131_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static int PagePoisoned(struct page *page)
{
  #line 194 
  return page->flags == 18446744073709551615UL;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  #line 88 
  int pscr_ret__;
  {
    #line 88 
    void *__vpp_verify = (void *)0;
    #line 88 
    void *tmp = __vpp_verify;
  }
  #line 88 
  switch (4UL) {
    #line 88 
    int pfo_ret___0;
    #line 88 
    int pfo_ret___1;
    #line 88 
    int pfo_ret___2;
    #line 88 
    int pfo_ret__;
    #line 88 
    case (unsigned long)1: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret__;
    #line 88 
    break;
    #line 88 
    case (unsigned long)2: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___0;
    #line 88 
    break;
    #line 88 
    case (unsigned long)4: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___1;
    #line 88 
    break;
    #line 88 
    case (unsigned long)8: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___2;
    #line 88 
    break;
    #line 88 
    default: 
             #line 88 
    ;
    #line 88 
    __bad_size_call_parameter();
    #line 88 
    break;
  }
  #line 88 
  return pscr_ret__;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_mem_id(void)
{
  #line 179 
  return numa_node_id();
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 490 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, int, nodemask_t *);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
  #line 496 
  return __alloc_pages_nodemask(gfp_mask,order,preferred_nid,(nodemask_t *)0);
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 506 
  if ((long)((unsigned int)nid > 1023U) != 0L) {
    #line 507 
    ldv_inline_asm();
    #line 508 
    ldv_inline_asm();
    #line 509 
    ldv_inline_asm();
    #line 506 
    ;
  }
  {
    #line 507 
    int tmp_0;
    #line 507 
    if ((gfp_mask & 2097152U) != 0U) {
      #line 507 
      if (node_state(nid,(enum node_states)N_ONLINE) == 0) 
                                                           #line 507 
                                                           tmp_0 = 1; else 
                                                                    #line 507 
                                                                    tmp_0 = 0;
    }
    else 
         #line 507 
         tmp_0 = 0;
    #line 507 
    int __ret_warn_on = tmp_0;
    #line 507 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 508 
      ldv_inline_asm();
      #line 509 
      ldv_inline_asm();
    }
    #line 507 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 509 
  return __alloc_pages(gfp_mask,order,nid);
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 520 
  if (nid == -1) 
                 #line 521 
                 nid = numa_mem_id();
  #line 523 
  return __alloc_pages_node(nid,gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 572 
#line 572 
void __page_frag_cache_drain(struct page *, unsigned int);
#line 1680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1680 
char *dev_driver_string(struct device *);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 492  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_txrx.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_count(struct page *page)
{
  #line 72 
  return atomic_read_0(& compound_head(page)->_refcount);
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_add(struct page *page, int nr)
{
  #line 93 
  atomic_add(nr,& page->_refcount);
  #line 94 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 95 
                                                                   __page_ref_mod(page,nr);
  #line 96 
  return;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int page_to_nid(struct page *page)
{
  #line 1085 
  struct page *p = page;
  {
    #line 1087 
    if ((long)(PagePoisoned(p) != 0) != 0L) {
      #line 1087 
      dump_page(p,(char *)"VM_BUG_ON_PAGE(");
      #line 1088 
      ldv_inline_asm();
      #line 1089 
      ldv_inline_asm();
      #line 1090 
      ldv_inline_asm();
      #line 1087 
      ;
    }
  }
  #line 1087 
  ;
  #line 1087 
  return (int)(p->flags >> 54UL) & 1023;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index == 18446744073709551615UL);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_range_for_cpu(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  #line 602 
  dma_sync_single_for_cpu(dev,addr + (unsigned long long)offset,size,dir);
  #line 603 
  return;
}

#line 605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_range_for_device(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  #line 609 
  dma_sync_single_for_device(dev,addr + (unsigned long long)offset,size,dir);
  #line 610 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_5621 __u;
  #line 93 
  union __anonunion___u_5623 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  #line 25 
  ldv_inline_asm();
  #line 30 
  return (unsigned short)(~ sum >> 16);
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static unsigned int add32_with_carry(unsigned int a, unsigned int b)
{
  #line 185 
  ldv_inline_asm();
  #line 189 
  return a;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_add(__wsum csum, __wsum addend)
{
  #line 195 
  return add32_with_carry(csum,addend);
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static __wsum csum_unfold(__sum16 n)
{
  #line 109 
  return (unsigned int)n;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static void csum_replace_by_diff(__sum16 *sum, __wsum diff)
{
  #line 121 
  ;
  #line 121 
  *sum = csum_fold(csum_add(diff,~ csum_unfold((unsigned short)((int)*sum))));
  #line 122 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1035 
#line 1035 
struct sk_buff *build_skb(void *, unsigned int);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_pad(struct sk_buff *skb, int pad)
{
  #line 1141 
  return __skb_pad(skb,pad,(_Bool)1);
}

#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read_0(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2142 
#line 2142 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_tail_pointer(struct sk_buff *skb)
{
  #line 2158 
  skb->tail = (unsigned int)(skb->data - skb->head);
  #line 2159 
  return;
}

#line 2161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_tail_pointer(struct sk_buff *skb, int offset)
{
  #line 2163 
  skb_reset_tail_pointer(skb);
  #line 2164 
  skb->tail += (unsigned int)offset;
  #line 2165 
  return;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2820 
#line 2820 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
#line 2827 
#line 2827 
void napi_consume_skb(struct sk_buff *, int);
#line 2841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *__dev_alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 2852 
  gfp_mask |= 393216U;
  #line 2854 
  return alloc_pages_node(-1,gfp_mask,order);
}

#line 2857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *dev_alloc_pages(unsigned int order)
{
  #line 2859 
  return __dev_alloc_pages(10784U,order);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_put_padto(struct sk_buff *skb, unsigned int len, bool free_on_error)
{
  #line 3189 
  unsigned int size = skb->len;
  #line 3191 
  if ((long)(size < len) != 0L) {
    #line 3192 
    len -= size;
    #line 3193 
    if (__skb_pad(skb,(int)len,(_Bool)((bool)((int)free_on_error) != 0)) != 0) 
      #line 3194 
      return -12;
    #line 3195 
    __skb_put(skb,len);
  }
  #line 3197 
  return 0;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3212 
  return __skb_put_padto(skb,len,(_Bool)1);
}

#line 3248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_linearize(struct sk_buff *skb)
{
  #line 3250 
  int tmp_0;
  #line 3250 
  if (__pskb_pull_tail(skb,(int)skb->data_len) != (void *)0) 
                                                             #line 3250 
                                                             tmp_0 = 0; else 
                                                                    #line 3250 
                                                                    tmp_0 = -12;
  #line 3250 
  return tmp_0;
}

#line 3507 
#line 3507 
int skb_copy_bits(struct sk_buff *, int, void *, int);
#line 3563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_header_pointer(struct sk_buff *skb, int offset, int len, void *data, int hlen, void *buffer)
{
  #line 3566 
  if (hlen - offset >= len) 
                            #line 3567 
                            return data + (unsigned long)offset;
  #line 3569 
  if (skb == (struct sk_buff *)0) 
                                  #line 3571 
                                  return (void *)0;
  else {
    #line 3569 
    if (skb_copy_bits(skb,offset,buffer,len) < 0) 
                                                  #line 3571 
                                                  return (void *)0;
  }
  #line 3573 
  return buffer;
}

#line 3577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_header_pointer(struct sk_buff *skb, int offset, int len, void *buffer)
{
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  return __skb_header_pointer(skb,offset,len,(void *)skb->data,
                             (int)skb_headlen(skb),buffer);
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  #line 117 
  return;
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool napi_complete(struct napi_struct *n)
{
  #line 479 
  return napi_complete_done(n,0);
}

#line 3094 
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_1(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_0(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_1(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit_1(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit_1(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_set_bit(1L,& dev_queue->state) != 0) 
                                                         #line 3321 
                                                         netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit_1(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3408 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3410 
  netif_tx_start_queue(txq);
  #line 3411 
  return;
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3422 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3423 
  netif_tx_stop_queue_0(txq);
  #line 3424 
  return;
}

#line 3433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device *dev, u16 queue_index)
{
  #line 3436 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3438 
  return netif_tx_queue_stopped(txq);
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3456 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3458 
  netif_tx_wake_queue(txq);
  #line 3459 
  return;
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 4373 
#line 4373 
int skb_checksum_help(struct sk_buff *);
#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 31 
u32 eth_get_headlen(struct net_device *, void *, unsigned int);
#line 32 
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static int eth_skb_pad(struct sk_buff *skb)
{
  #line 532 
  return skb_put_padto(skb,60U);
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipv6.h"
#line 1057 
int ipv6_skip_exthdr(struct sk_buff *, int, u8 *, __be16 *);
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
__inline static int iavf_compute_pad(int rx_buf_len)
{
  #line 121 
  int page_size;
  #line 121 
  int pad_size;
  #line 123 
  page_size = (rx_buf_len + 2047) & -2048;
  #line 124 
  pad_size = (int)((unsigned int)(page_size - rx_buf_len) + 4294966976U);
  #line 126 
  return pad_size;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
__inline static int iavf_skb_pad(void)
{
  #line 131 
  int rx_buf_len;
  #line 143 
  rx_buf_len = 1536;
  #line 146 
  rx_buf_len = rx_buf_len;
  #line 148 
  return iavf_compute_pad(rx_buf_len);
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
__inline static bool iavf_test_staterr(union iavf_32byte_rx_desc *rx_desc, u64 stat_err_bits)
{
  #line 170 
  return (_Bool)((rx_desc->wb.qword1.status_error_len & stat_err_bits) != 0ULL);
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
__inline static unsigned int iavf_txd_use_count(unsigned int size)
{
  #line 239 
  return (size * 85U >> 20) + 1U;
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
__inline static bool ring_uses_build_skb(struct iavf_ring *ring)
{
  #line 394 
  return (_Bool)(((unsigned long)ring->flags & 2UL) != 0UL);
}

#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
__inline static unsigned int iavf_rx_pg_order(struct iavf_ring *ring)
{
  #line 431 
  if ((unsigned int)ring->rx_buf_len > 2048U) 
                                              #line 432 
                                              return 1U;
  #line 434 
  return 0U;
}

#line 441 
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
void iavf_clean_tx_ring(struct iavf_ring *tx_ring);
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
void iavf_clean_rx_ring(struct iavf_ring *rx_ring);
#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
void iavf_force_wb(struct iavf_vsi *vsi, struct iavf_q_vector *q_vector);
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
u32 iavf_get_tx_pending(struct iavf_ring *ring, bool in_sw);
#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
#line 2240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
int __iavf_maybe_stop_tx(struct iavf_ring *tx_ring, int size);
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
#line 2162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
bool __iavf_chk_linearize(struct sk_buff *skb);
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
__inline static int iavf_xmit_descriptor_count(struct sk_buff *skb)
{
  #line 465 
  skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 466 
  unsigned int nr_frags = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 467 
  int count = 0;
  #line 467 
  int size = (int)skb_headlen(skb);
  #line 469 
  while (1) {
    #line 472 
    unsigned int tmp_3;
    #line 475 
    skb_frag_t *tmp_4;
    #line 470 
    count = (int)(iavf_txd_use_count((unsigned int)size) + (unsigned int)count);
    #line 472 
    tmp_3 = nr_frags;
    #line 472 
    nr_frags --;
    #line 472 
    ;
    #line 472 
    if (tmp_3 == 0U) 
                     #line 473 
                     break;
    #line 475 
    tmp_4 = frag;
    #line 475 
    frag ++;
    #line 475 
    ;
    #line 475 
    size = (int)skb_frag_size(tmp_4);
  }
  #line 478 
  return count;
}

#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
__inline static int iavf_maybe_stop_tx(struct iavf_ring *tx_ring, int size)
{
  #line 490 
  int tmp;
  #line 490 
  if ((int)tx_ring->next_to_clean <= (int)tx_ring->next_to_use) 
                                                                #line 490 
                                                                tmp = (int)tx_ring->count; else 
                                                                    #line 490 
                                                                    tmp = 0;
  #line 490 
  ;
  #line 490 
  if ((long)((tmp + (int)tx_ring->next_to_clean) - (int)tx_ring->next_to_use > size) != 0L) 
    #line 491 
    return 0;
  #line 492 
  return __iavf_maybe_stop_tx(tx_ring,size);
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
__inline static bool iavf_chk_linearize(struct sk_buff *skb, int count)
{
  #line 507 
  if ((long)(count <= 7) != 0L) 
                                #line 508 
                                return (_Bool)0;
  #line 510 
  if ((int)skb_is_gso(skb) != 0) {
    #line 511 
    return __iavf_chk_linearize(skb);
  }
  #line 514 
  return (_Bool)(count != 8);
}

#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.h"
__inline static struct netdev_queue *txring_txq(struct iavf_ring *ring)
{
  #line 521 
  return netdev_get_tx_queue(ring->netdev,(unsigned int)ring->queue_index);
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
__inline static void trace_iavf_clean_tx_irq(struct iavf_ring *ring, struct iavf_tx_desc *desc, struct iavf_tx_buffer *buf)
{
  #line 95 
  int pscr_ret___0;
  #line 95 
  if ((int)static_key_false(& __tracepoint_iavf_clean_tx_irq.key) != 0) {
    #line 95 
    struct tracepoint_func *________p1;
    #line 95 
    int pscr_ret__;
    #line 95 
    struct tracepoint_func *it_func_ptr;
    #line 95 
    void *it_func;
    #line 95 
    void *__data;
    #line 95 
    int __idx = 0;
    {
      #line 95 
      void *__vpp_verify = (void *)0;
      #line 95 
      void *tmp = __vpp_verify;
    }
    #line 95 
    switch (4UL) {
      #line 95 
      int pfo_ret__;
      #line 95 
      int pfo_ret___0;
      #line 95 
      int pfo_ret___1;
      #line 95 
      int pfo_ret___2;
      #line 95 
      case (unsigned long)1: 
                             #line 95 
      ;
      #line 95 
      switch (4UL) {
        #line 95 
        case (unsigned long)1: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        case (unsigned long)2: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        case (unsigned long)4: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        case (unsigned long)8: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        default: 
                 #line 95 
        ;
        #line 95 
        __bad_percpu_size();
      }
      #line 95 
      pscr_ret__ = pfo_ret__;
      #line 95 
      break;
      #line 95 
      case (unsigned long)2: 
                             #line 95 
      ;
      #line 95 
      switch (4UL) {
        #line 95 
        case (unsigned long)1: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        case (unsigned long)2: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        case (unsigned long)4: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        case (unsigned long)8: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        default: 
                 #line 95 
        ;
        #line 95 
        __bad_percpu_size();
      }
      #line 95 
      pscr_ret__ = pfo_ret___0;
      #line 95 
      break;
      #line 95 
      case (unsigned long)4: 
                             #line 95 
      ;
      #line 95 
      switch (4UL) {
        #line 95 
        case (unsigned long)1: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        case (unsigned long)2: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        case (unsigned long)4: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        case (unsigned long)8: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        default: 
                 #line 95 
        ;
        #line 95 
        __bad_percpu_size();
      }
      #line 95 
      pscr_ret__ = pfo_ret___1;
      #line 95 
      break;
      #line 95 
      case (unsigned long)8: 
                             #line 95 
      ;
      #line 95 
      switch (4UL) {
        #line 95 
        case (unsigned long)1: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        case (unsigned long)2: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        case (unsigned long)4: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        case (unsigned long)8: 
                               #line 95 
        ;
        #line 96 
        ldv_inline_asm();
        #line 95 
        break;
        #line 95 
        default: 
                 #line 95 
        ;
        #line 95 
        __bad_percpu_size();
      }
      #line 95 
      pscr_ret__ = pfo_ret___2;
      #line 95 
      break;
      #line 95 
      default: 
               #line 95 
      ;
      #line 95 
      __bad_size_call_parameter();
      #line 95 
      break;
    }
    #line 95 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 95 
                                                               return;
    {
      #line 95 
      int __ret_warn_on = 0;
      #line 95 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 96 
        ldv_inline_asm();
        #line 97 
        ldv_inline_asm();
      }
      #line 95 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 95 
    __preempt_count_add(1);
    #line 96 
    ldv_inline_asm();
    {
      #line 96 
      union __anonunion___u_6205 __u;
      #line 95 
      __read_once_size((void *)(& __tracepoint_iavf_clean_tx_irq.funcs),(void *)(& __u.__c),8);
      #line 95 
      ________p1 = (__u.__val);
      }
    #line 95 
    it_func_ptr = ________p1;
    #line 95 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 95 
      while (1) {
        #line 95 
        it_func = it_func_ptr->func;
        #line 95 
        __data = it_func_ptr->data;
        #line 95 
        (*((void (*)(void *, struct iavf_ring *, struct iavf_tx_desc *, struct iavf_tx_buffer *))it_func))(__data,ring,desc,buf);
        #line 95 
        it_func_ptr ++;
        #line 96 
        ;
        #line 96 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 95 
                                                break;
      }
    #line 97 
    ldv_inline_asm();
    #line 95 
    __preempt_count_sub(1);
  }
  {
    #line 95 
    void *__vpp_verify_0 = (void *)0;
    #line 95 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 95 
  switch (4UL) {
    #line 95 
    int pfo_ret___5;
    #line 95 
    int pfo_ret___6;
    #line 95 
    int pfo_ret___3;
    #line 95 
    int pfo_ret___4;
    #line 95 
    case (unsigned long)1: 
                           #line 95 
    ;
    #line 95 
    switch (4UL) {
      #line 95 
      case (unsigned long)1: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      case (unsigned long)2: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      case (unsigned long)4: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      case (unsigned long)8: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      default: 
               #line 95 
      ;
      #line 95 
      __bad_percpu_size();
    }
    #line 95 
    pscr_ret___0 = pfo_ret___3;
    #line 95 
    break;
    #line 95 
    case (unsigned long)2: 
                           #line 95 
    ;
    #line 95 
    switch (4UL) {
      #line 95 
      case (unsigned long)1: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      case (unsigned long)2: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      case (unsigned long)4: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      case (unsigned long)8: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      default: 
               #line 95 
      ;
      #line 95 
      __bad_percpu_size();
    }
    #line 95 
    pscr_ret___0 = pfo_ret___4;
    #line 95 
    break;
    #line 95 
    case (unsigned long)4: 
                           #line 95 
    ;
    #line 95 
    switch (4UL) {
      #line 95 
      case (unsigned long)1: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      case (unsigned long)2: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      case (unsigned long)4: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      case (unsigned long)8: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      default: 
               #line 95 
      ;
      #line 95 
      __bad_percpu_size();
    }
    #line 95 
    pscr_ret___0 = pfo_ret___5;
    #line 95 
    break;
    #line 95 
    case (unsigned long)8: 
                           #line 95 
    ;
    #line 95 
    switch (4UL) {
      #line 95 
      case (unsigned long)1: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      case (unsigned long)2: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      case (unsigned long)4: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      case (unsigned long)8: 
                             #line 95 
      ;
      #line 96 
      ldv_inline_asm();
      #line 95 
      break;
      #line 95 
      default: 
               #line 95 
      ;
      #line 95 
      __bad_percpu_size();
    }
    #line 95 
    pscr_ret___0 = pfo_ret___6;
    #line 95 
    break;
    #line 95 
    default: 
             #line 95 
    ;
    #line 95 
    __bad_size_call_parameter();
    #line 95 
    break;
  }
  #line 95 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 95 
    __rcu_read_lock();
    {
      #line 96 
      union __anonunion___u_6207 __u_0;
      #line 95 
      __read_once_size((void *)(& __tracepoint_iavf_clean_tx_irq.funcs),(void *)(& __u_0.__c),8);
      #line 95 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 95 
        bool __warned;
        #line 95 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 95 
          if (! __warned) {
            #line 95 
            if (rcu_read_lock_sched_held() == 0) {
              #line 95 
              __warned = (_Bool)1;
              #line 95 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h",95,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 95 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 95 
    __rcu_read_unlock();
  }
  #line 97 
  return;
}

#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
__inline static void trace_iavf_clean_tx_irq_unmap(struct iavf_ring *ring, struct iavf_tx_desc *desc, struct iavf_tx_buffer *buf)
{
  #line 103 
  int pscr_ret___0;
  #line 103 
  if ((int)static_key_false(& __tracepoint_iavf_clean_tx_irq_unmap.key) != 0) {
    #line 103 
    struct tracepoint_func *________p1;
    #line 103 
    int pscr_ret__;
    #line 103 
    struct tracepoint_func *it_func_ptr;
    #line 103 
    void *it_func;
    #line 103 
    void *__data;
    #line 103 
    int __idx = 0;
    {
      #line 103 
      void *__vpp_verify = (void *)0;
      #line 103 
      void *tmp = __vpp_verify;
    }
    #line 103 
    switch (4UL) {
      #line 103 
      int pfo_ret__;
      #line 103 
      int pfo_ret___0;
      #line 103 
      int pfo_ret___1;
      #line 103 
      int pfo_ret___2;
      #line 103 
      case (unsigned long)1: 
                             #line 103 
      ;
      #line 103 
      switch (4UL) {
        #line 103 
        case (unsigned long)1: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        case (unsigned long)2: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        case (unsigned long)4: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        case (unsigned long)8: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        default: 
                 #line 103 
        ;
        #line 103 
        __bad_percpu_size();
      }
      #line 103 
      pscr_ret__ = pfo_ret__;
      #line 103 
      break;
      #line 103 
      case (unsigned long)2: 
                             #line 103 
      ;
      #line 103 
      switch (4UL) {
        #line 103 
        case (unsigned long)1: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        case (unsigned long)2: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        case (unsigned long)4: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        case (unsigned long)8: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        default: 
                 #line 103 
        ;
        #line 103 
        __bad_percpu_size();
      }
      #line 103 
      pscr_ret__ = pfo_ret___0;
      #line 103 
      break;
      #line 103 
      case (unsigned long)4: 
                             #line 103 
      ;
      #line 103 
      switch (4UL) {
        #line 103 
        case (unsigned long)1: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        case (unsigned long)2: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        case (unsigned long)4: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        case (unsigned long)8: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        default: 
                 #line 103 
        ;
        #line 103 
        __bad_percpu_size();
      }
      #line 103 
      pscr_ret__ = pfo_ret___1;
      #line 103 
      break;
      #line 103 
      case (unsigned long)8: 
                             #line 103 
      ;
      #line 103 
      switch (4UL) {
        #line 103 
        case (unsigned long)1: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        case (unsigned long)2: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        case (unsigned long)4: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        case (unsigned long)8: 
                               #line 103 
        ;
        #line 104 
        ldv_inline_asm();
        #line 103 
        break;
        #line 103 
        default: 
                 #line 103 
        ;
        #line 103 
        __bad_percpu_size();
      }
      #line 103 
      pscr_ret__ = pfo_ret___2;
      #line 103 
      break;
      #line 103 
      default: 
               #line 103 
      ;
      #line 103 
      __bad_size_call_parameter();
      #line 103 
      break;
    }
    #line 103 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 103 
                                                               return;
    {
      #line 103 
      int __ret_warn_on = 0;
      #line 103 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 104 
        ldv_inline_asm();
        #line 105 
        ldv_inline_asm();
      }
      #line 103 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 103 
    __preempt_count_add(1);
    #line 104 
    ldv_inline_asm();
    {
      #line 104 
      union __anonunion___u_6209 __u;
      #line 103 
      __read_once_size((void *)(& __tracepoint_iavf_clean_tx_irq_unmap.funcs),(void *)(& __u.__c),8);
      #line 103 
      ________p1 = (__u.__val);
      }
    #line 103 
    it_func_ptr = ________p1;
    #line 103 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 103 
      while (1) {
        #line 103 
        it_func = it_func_ptr->func;
        #line 103 
        __data = it_func_ptr->data;
        #line 103 
        (*((void (*)(void *, struct iavf_ring *, struct iavf_tx_desc *, struct iavf_tx_buffer *))it_func))(__data,ring,desc,buf);
        #line 103 
        it_func_ptr ++;
        #line 104 
        ;
        #line 104 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 103 
                                                break;
      }
    #line 105 
    ldv_inline_asm();
    #line 103 
    __preempt_count_sub(1);
  }
  {
    #line 103 
    void *__vpp_verify_0 = (void *)0;
    #line 103 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 103 
  switch (4UL) {
    #line 103 
    int pfo_ret___4;
    #line 103 
    int pfo_ret___5;
    #line 103 
    int pfo_ret___6;
    #line 103 
    int pfo_ret___3;
    #line 103 
    case (unsigned long)1: 
                           #line 103 
    ;
    #line 103 
    switch (4UL) {
      #line 103 
      case (unsigned long)1: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      case (unsigned long)2: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      case (unsigned long)4: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      case (unsigned long)8: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      default: 
               #line 103 
      ;
      #line 103 
      __bad_percpu_size();
    }
    #line 103 
    pscr_ret___0 = pfo_ret___3;
    #line 103 
    break;
    #line 103 
    case (unsigned long)2: 
                           #line 103 
    ;
    #line 103 
    switch (4UL) {
      #line 103 
      case (unsigned long)1: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      case (unsigned long)2: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      case (unsigned long)4: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      case (unsigned long)8: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      default: 
               #line 103 
      ;
      #line 103 
      __bad_percpu_size();
    }
    #line 103 
    pscr_ret___0 = pfo_ret___4;
    #line 103 
    break;
    #line 103 
    case (unsigned long)4: 
                           #line 103 
    ;
    #line 103 
    switch (4UL) {
      #line 103 
      case (unsigned long)1: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      case (unsigned long)2: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      case (unsigned long)4: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      case (unsigned long)8: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      default: 
               #line 103 
      ;
      #line 103 
      __bad_percpu_size();
    }
    #line 103 
    pscr_ret___0 = pfo_ret___5;
    #line 103 
    break;
    #line 103 
    case (unsigned long)8: 
                           #line 103 
    ;
    #line 103 
    switch (4UL) {
      #line 103 
      case (unsigned long)1: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      case (unsigned long)2: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      case (unsigned long)4: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      case (unsigned long)8: 
                             #line 103 
      ;
      #line 104 
      ldv_inline_asm();
      #line 103 
      break;
      #line 103 
      default: 
               #line 103 
      ;
      #line 103 
      __bad_percpu_size();
    }
    #line 103 
    pscr_ret___0 = pfo_ret___6;
    #line 103 
    break;
    #line 103 
    default: 
             #line 103 
    ;
    #line 103 
    __bad_size_call_parameter();
    #line 103 
    break;
  }
  #line 103 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 103 
    __rcu_read_lock();
    {
      #line 104 
      union __anonunion___u_6211 __u_0;
      #line 103 
      __read_once_size((void *)(& __tracepoint_iavf_clean_tx_irq_unmap.funcs),(void *)(& __u_0.__c),8);
      #line 103 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 103 
        bool __warned;
        #line 103 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 103 
          if (! __warned) {
            #line 103 
            if (rcu_read_lock_sched_held() == 0) {
              #line 103 
              __warned = (_Bool)1;
              #line 103 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h",103,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 103 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 103 
    __rcu_read_unlock();
  }
  #line 105 
  return;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
__inline static void trace_iavf_clean_rx_irq(struct iavf_ring *ring, union iavf_32byte_rx_desc *desc, struct sk_buff *skb)
{
  #line 140 
  int pscr_ret___0;
  #line 140 
  if ((int)static_key_false(& __tracepoint_iavf_clean_rx_irq.key) != 0) {
    #line 140 
    int pscr_ret__;
    #line 140 
    struct tracepoint_func *________p1;
    #line 140 
    struct tracepoint_func *it_func_ptr;
    #line 140 
    void *it_func;
    #line 140 
    void *__data;
    #line 140 
    int __idx = 0;
    {
      #line 140 
      void *__vpp_verify = (void *)0;
      #line 140 
      void *tmp = __vpp_verify;
    }
    #line 140 
    switch (4UL) {
      #line 140 
      int pfo_ret__;
      #line 140 
      int pfo_ret___0;
      #line 140 
      int pfo_ret___1;
      #line 140 
      int pfo_ret___2;
      #line 140 
      case (unsigned long)1: 
                             #line 140 
      ;
      #line 140 
      switch (4UL) {
        #line 140 
        case (unsigned long)1: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        case (unsigned long)2: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        case (unsigned long)4: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        case (unsigned long)8: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        default: 
                 #line 140 
        ;
        #line 140 
        __bad_percpu_size();
      }
      #line 140 
      pscr_ret__ = pfo_ret__;
      #line 140 
      break;
      #line 140 
      case (unsigned long)2: 
                             #line 140 
      ;
      #line 140 
      switch (4UL) {
        #line 140 
        case (unsigned long)1: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        case (unsigned long)2: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        case (unsigned long)4: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        case (unsigned long)8: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        default: 
                 #line 140 
        ;
        #line 140 
        __bad_percpu_size();
      }
      #line 140 
      pscr_ret__ = pfo_ret___0;
      #line 140 
      break;
      #line 140 
      case (unsigned long)4: 
                             #line 140 
      ;
      #line 140 
      switch (4UL) {
        #line 140 
        case (unsigned long)1: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        case (unsigned long)2: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        case (unsigned long)4: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        case (unsigned long)8: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        default: 
                 #line 140 
        ;
        #line 140 
        __bad_percpu_size();
      }
      #line 140 
      pscr_ret__ = pfo_ret___1;
      #line 140 
      break;
      #line 140 
      case (unsigned long)8: 
                             #line 140 
      ;
      #line 140 
      switch (4UL) {
        #line 140 
        case (unsigned long)1: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        case (unsigned long)2: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        case (unsigned long)4: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        case (unsigned long)8: 
                               #line 140 
        ;
        #line 141 
        ldv_inline_asm();
        #line 140 
        break;
        #line 140 
        default: 
                 #line 140 
        ;
        #line 140 
        __bad_percpu_size();
      }
      #line 140 
      pscr_ret__ = pfo_ret___2;
      #line 140 
      break;
      #line 140 
      default: 
               #line 140 
      ;
      #line 140 
      __bad_size_call_parameter();
      #line 140 
      break;
    }
    #line 140 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 140 
                                                               return;
    {
      #line 140 
      int __ret_warn_on = 0;
      #line 140 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 141 
        ldv_inline_asm();
        #line 142 
        ldv_inline_asm();
      }
      #line 140 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 140 
    __preempt_count_add(1);
    #line 141 
    ldv_inline_asm();
    {
      #line 141 
      union __anonunion___u_6213 __u;
      #line 140 
      __read_once_size((void *)(& __tracepoint_iavf_clean_rx_irq.funcs),(void *)(& __u.__c),8);
      #line 140 
      ________p1 = (__u.__val);
      }
    #line 140 
    it_func_ptr = ________p1;
    #line 140 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 140 
      while (1) {
        #line 140 
        it_func = it_func_ptr->func;
        #line 140 
        __data = it_func_ptr->data;
        #line 140 
        (*((void (*)(void *, struct iavf_ring *, union iavf_32byte_rx_desc *, struct sk_buff *))it_func))(__data,ring,desc,skb);
        #line 140 
        it_func_ptr ++;
        #line 141 
        ;
        #line 141 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 140 
                                                break;
      }
    #line 142 
    ldv_inline_asm();
    #line 140 
    __preempt_count_sub(1);
  }
  {
    #line 140 
    void *__vpp_verify_0 = (void *)0;
    #line 140 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 140 
  switch (4UL) {
    #line 140 
    int pfo_ret___4;
    #line 140 
    int pfo_ret___5;
    #line 140 
    int pfo_ret___6;
    #line 140 
    int pfo_ret___3;
    #line 140 
    case (unsigned long)1: 
                           #line 140 
    ;
    #line 140 
    switch (4UL) {
      #line 140 
      case (unsigned long)1: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      case (unsigned long)2: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      case (unsigned long)4: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      case (unsigned long)8: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      default: 
               #line 140 
      ;
      #line 140 
      __bad_percpu_size();
    }
    #line 140 
    pscr_ret___0 = pfo_ret___3;
    #line 140 
    break;
    #line 140 
    case (unsigned long)2: 
                           #line 140 
    ;
    #line 140 
    switch (4UL) {
      #line 140 
      case (unsigned long)1: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      case (unsigned long)2: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      case (unsigned long)4: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      case (unsigned long)8: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      default: 
               #line 140 
      ;
      #line 140 
      __bad_percpu_size();
    }
    #line 140 
    pscr_ret___0 = pfo_ret___4;
    #line 140 
    break;
    #line 140 
    case (unsigned long)4: 
                           #line 140 
    ;
    #line 140 
    switch (4UL) {
      #line 140 
      case (unsigned long)1: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      case (unsigned long)2: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      case (unsigned long)4: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      case (unsigned long)8: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      default: 
               #line 140 
      ;
      #line 140 
      __bad_percpu_size();
    }
    #line 140 
    pscr_ret___0 = pfo_ret___5;
    #line 140 
    break;
    #line 140 
    case (unsigned long)8: 
                           #line 140 
    ;
    #line 140 
    switch (4UL) {
      #line 140 
      case (unsigned long)1: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      case (unsigned long)2: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      case (unsigned long)4: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      case (unsigned long)8: 
                             #line 140 
      ;
      #line 141 
      ldv_inline_asm();
      #line 140 
      break;
      #line 140 
      default: 
               #line 140 
      ;
      #line 140 
      __bad_percpu_size();
    }
    #line 140 
    pscr_ret___0 = pfo_ret___6;
    #line 140 
    break;
    #line 140 
    default: 
             #line 140 
    ;
    #line 140 
    __bad_size_call_parameter();
    #line 140 
    break;
  }
  #line 140 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 140 
    __rcu_read_lock();
    {
      #line 141 
      union __anonunion___u_6215 __u_0;
      #line 140 
      __read_once_size((void *)(& __tracepoint_iavf_clean_rx_irq.funcs),(void *)(& __u_0.__c),8);
      #line 140 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 140 
        bool __warned;
        #line 140 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 140 
          if (! __warned) {
            #line 140 
            if (rcu_read_lock_sched_held() == 0) {
              #line 140 
              __warned = (_Bool)1;
              #line 140 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h",140,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 140 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 140 
    __rcu_read_unlock();
  }
  #line 142 
  return;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
__inline static void trace_iavf_clean_rx_irq_rx(struct iavf_ring *ring, union iavf_32byte_rx_desc *desc, struct sk_buff *skb)
{
  #line 148 
  int pscr_ret___0;
  #line 148 
  if ((int)static_key_false(& __tracepoint_iavf_clean_rx_irq_rx.key) != 0) {
    #line 148 
    int pscr_ret__;
    #line 148 
    struct tracepoint_func *________p1;
    #line 148 
    struct tracepoint_func *it_func_ptr;
    #line 148 
    void *it_func;
    #line 148 
    void *__data;
    #line 148 
    int __idx = 0;
    {
      #line 148 
      void *__vpp_verify = (void *)0;
      #line 148 
      void *tmp = __vpp_verify;
    }
    #line 148 
    switch (4UL) {
      #line 148 
      int pfo_ret__;
      #line 148 
      int pfo_ret___0;
      #line 148 
      int pfo_ret___1;
      #line 148 
      int pfo_ret___2;
      #line 148 
      case (unsigned long)1: 
                             #line 148 
      ;
      #line 148 
      switch (4UL) {
        #line 148 
        case (unsigned long)1: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        case (unsigned long)2: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        case (unsigned long)4: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        case (unsigned long)8: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        default: 
                 #line 148 
        ;
        #line 148 
        __bad_percpu_size();
      }
      #line 148 
      pscr_ret__ = pfo_ret__;
      #line 148 
      break;
      #line 148 
      case (unsigned long)2: 
                             #line 148 
      ;
      #line 148 
      switch (4UL) {
        #line 148 
        case (unsigned long)1: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        case (unsigned long)2: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        case (unsigned long)4: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        case (unsigned long)8: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        default: 
                 #line 148 
        ;
        #line 148 
        __bad_percpu_size();
      }
      #line 148 
      pscr_ret__ = pfo_ret___0;
      #line 148 
      break;
      #line 148 
      case (unsigned long)4: 
                             #line 148 
      ;
      #line 148 
      switch (4UL) {
        #line 148 
        case (unsigned long)1: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        case (unsigned long)2: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        case (unsigned long)4: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        case (unsigned long)8: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        default: 
                 #line 148 
        ;
        #line 148 
        __bad_percpu_size();
      }
      #line 148 
      pscr_ret__ = pfo_ret___1;
      #line 148 
      break;
      #line 148 
      case (unsigned long)8: 
                             #line 148 
      ;
      #line 148 
      switch (4UL) {
        #line 148 
        case (unsigned long)1: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        case (unsigned long)2: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        case (unsigned long)4: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        case (unsigned long)8: 
                               #line 148 
        ;
        #line 149 
        ldv_inline_asm();
        #line 148 
        break;
        #line 148 
        default: 
                 #line 148 
        ;
        #line 148 
        __bad_percpu_size();
      }
      #line 148 
      pscr_ret__ = pfo_ret___2;
      #line 148 
      break;
      #line 148 
      default: 
               #line 148 
      ;
      #line 148 
      __bad_size_call_parameter();
      #line 148 
      break;
    }
    #line 148 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 148 
                                                               return;
    {
      #line 148 
      int __ret_warn_on = 0;
      #line 148 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 149 
        ldv_inline_asm();
        #line 150 
        ldv_inline_asm();
      }
      #line 148 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 148 
    __preempt_count_add(1);
    #line 149 
    ldv_inline_asm();
    {
      #line 149 
      union __anonunion___u_6217 __u;
      #line 148 
      __read_once_size((void *)(& __tracepoint_iavf_clean_rx_irq_rx.funcs),(void *)(& __u.__c),8);
      #line 148 
      ________p1 = (__u.__val);
      }
    #line 148 
    it_func_ptr = ________p1;
    #line 148 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 148 
      while (1) {
        #line 148 
        it_func = it_func_ptr->func;
        #line 148 
        __data = it_func_ptr->data;
        #line 148 
        (*((void (*)(void *, struct iavf_ring *, union iavf_32byte_rx_desc *, struct sk_buff *))it_func))(__data,ring,desc,skb);
        #line 148 
        it_func_ptr ++;
        #line 149 
        ;
        #line 149 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 148 
                                                break;
      }
    #line 150 
    ldv_inline_asm();
    #line 148 
    __preempt_count_sub(1);
  }
  {
    #line 148 
    void *__vpp_verify_0 = (void *)0;
    #line 148 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 148 
  switch (4UL) {
    #line 148 
    int pfo_ret___4;
    #line 148 
    int pfo_ret___5;
    #line 148 
    int pfo_ret___6;
    #line 148 
    int pfo_ret___3;
    #line 148 
    case (unsigned long)1: 
                           #line 148 
    ;
    #line 148 
    switch (4UL) {
      #line 148 
      case (unsigned long)1: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      case (unsigned long)2: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      case (unsigned long)4: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      case (unsigned long)8: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      default: 
               #line 148 
      ;
      #line 148 
      __bad_percpu_size();
    }
    #line 148 
    pscr_ret___0 = pfo_ret___3;
    #line 148 
    break;
    #line 148 
    case (unsigned long)2: 
                           #line 148 
    ;
    #line 148 
    switch (4UL) {
      #line 148 
      case (unsigned long)1: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      case (unsigned long)2: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      case (unsigned long)4: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      case (unsigned long)8: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      default: 
               #line 148 
      ;
      #line 148 
      __bad_percpu_size();
    }
    #line 148 
    pscr_ret___0 = pfo_ret___4;
    #line 148 
    break;
    #line 148 
    case (unsigned long)4: 
                           #line 148 
    ;
    #line 148 
    switch (4UL) {
      #line 148 
      case (unsigned long)1: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      case (unsigned long)2: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      case (unsigned long)4: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      case (unsigned long)8: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      default: 
               #line 148 
      ;
      #line 148 
      __bad_percpu_size();
    }
    #line 148 
    pscr_ret___0 = pfo_ret___5;
    #line 148 
    break;
    #line 148 
    case (unsigned long)8: 
                           #line 148 
    ;
    #line 148 
    switch (4UL) {
      #line 148 
      case (unsigned long)1: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      case (unsigned long)2: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      case (unsigned long)4: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      case (unsigned long)8: 
                             #line 148 
      ;
      #line 149 
      ldv_inline_asm();
      #line 148 
      break;
      #line 148 
      default: 
               #line 148 
      ;
      #line 148 
      __bad_percpu_size();
    }
    #line 148 
    pscr_ret___0 = pfo_ret___6;
    #line 148 
    break;
    #line 148 
    default: 
             #line 148 
    ;
    #line 148 
    __bad_size_call_parameter();
    #line 148 
    break;
  }
  #line 148 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 148 
    __rcu_read_lock();
    {
      #line 149 
      union __anonunion___u_6219 __u_0;
      #line 148 
      __read_once_size((void *)(& __tracepoint_iavf_clean_rx_irq_rx.funcs),(void *)(& __u_0.__c),8);
      #line 148 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 148 
        bool __warned;
        #line 148 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 148 
          if (! __warned) {
            #line 148 
            if (rcu_read_lock_sched_held() == 0) {
              #line 148 
              __warned = (_Bool)1;
              #line 148 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h",148,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 148 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 148 
    __rcu_read_unlock();
  }
  #line 150 
  return;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
__inline static void trace_iavf_xmit_frame_ring(struct sk_buff *skb, struct iavf_ring *ring)
{
  #line 182 
  int pscr_ret___0;
  #line 182 
  if ((int)static_key_false(& __tracepoint_iavf_xmit_frame_ring.key) != 0) {
    #line 182 
    int pscr_ret__;
    #line 182 
    struct tracepoint_func *________p1;
    #line 182 
    struct tracepoint_func *it_func_ptr;
    #line 182 
    void *it_func;
    #line 182 
    void *__data;
    #line 182 
    int __idx = 0;
    {
      #line 182 
      void *__vpp_verify = (void *)0;
      #line 182 
      void *tmp = __vpp_verify;
    }
    #line 182 
    switch (4UL) {
      #line 182 
      int pfo_ret__;
      #line 182 
      int pfo_ret___0;
      #line 182 
      int pfo_ret___1;
      #line 182 
      int pfo_ret___2;
      #line 182 
      case (unsigned long)1: 
                             #line 182 
      ;
      #line 182 
      switch (4UL) {
        #line 182 
        case (unsigned long)1: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        case (unsigned long)2: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        case (unsigned long)4: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        case (unsigned long)8: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        default: 
                 #line 182 
        ;
        #line 182 
        __bad_percpu_size();
      }
      #line 182 
      pscr_ret__ = pfo_ret__;
      #line 182 
      break;
      #line 182 
      case (unsigned long)2: 
                             #line 182 
      ;
      #line 182 
      switch (4UL) {
        #line 182 
        case (unsigned long)1: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        case (unsigned long)2: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        case (unsigned long)4: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        case (unsigned long)8: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        default: 
                 #line 182 
        ;
        #line 182 
        __bad_percpu_size();
      }
      #line 182 
      pscr_ret__ = pfo_ret___0;
      #line 182 
      break;
      #line 182 
      case (unsigned long)4: 
                             #line 182 
      ;
      #line 182 
      switch (4UL) {
        #line 182 
        case (unsigned long)1: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        case (unsigned long)2: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        case (unsigned long)4: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        case (unsigned long)8: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        default: 
                 #line 182 
        ;
        #line 182 
        __bad_percpu_size();
      }
      #line 182 
      pscr_ret__ = pfo_ret___1;
      #line 182 
      break;
      #line 182 
      case (unsigned long)8: 
                             #line 182 
      ;
      #line 182 
      switch (4UL) {
        #line 182 
        case (unsigned long)1: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        case (unsigned long)2: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        case (unsigned long)4: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        case (unsigned long)8: 
                               #line 182 
        ;
        #line 183 
        ldv_inline_asm();
        #line 182 
        break;
        #line 182 
        default: 
                 #line 182 
        ;
        #line 182 
        __bad_percpu_size();
      }
      #line 182 
      pscr_ret__ = pfo_ret___2;
      #line 182 
      break;
      #line 182 
      default: 
               #line 182 
      ;
      #line 182 
      __bad_size_call_parameter();
      #line 182 
      break;
    }
    #line 182 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 182 
                                                               return;
    {
      #line 182 
      int __ret_warn_on = 0;
      #line 182 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 183 
        ldv_inline_asm();
        #line 184 
        ldv_inline_asm();
      }
      #line 182 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 182 
    __preempt_count_add(1);
    #line 183 
    ldv_inline_asm();
    {
      #line 183 
      union __anonunion___u_6221 __u;
      #line 182 
      __read_once_size((void *)(& __tracepoint_iavf_xmit_frame_ring.funcs),(void *)(& __u.__c),8);
      #line 182 
      ________p1 = (__u.__val);
      }
    #line 182 
    it_func_ptr = ________p1;
    #line 182 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 182 
      while (1) {
        #line 182 
        it_func = it_func_ptr->func;
        #line 182 
        __data = it_func_ptr->data;
        #line 182 
        (*((void (*)(void *, struct sk_buff *, struct iavf_ring *))it_func))(__data,skb,ring);
        #line 182 
        it_func_ptr ++;
        #line 183 
        ;
        #line 183 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 182 
                                                break;
      }
    #line 184 
    ldv_inline_asm();
    #line 182 
    __preempt_count_sub(1);
  }
  {
    #line 182 
    void *__vpp_verify_0 = (void *)0;
    #line 182 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 182 
  switch (4UL) {
    #line 182 
    int pfo_ret___5;
    #line 182 
    int pfo_ret___6;
    #line 182 
    int pfo_ret___3;
    #line 182 
    int pfo_ret___4;
    #line 182 
    case (unsigned long)1: 
                           #line 182 
    ;
    #line 182 
    switch (4UL) {
      #line 182 
      case (unsigned long)1: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      case (unsigned long)2: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      case (unsigned long)4: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      case (unsigned long)8: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      default: 
               #line 182 
      ;
      #line 182 
      __bad_percpu_size();
    }
    #line 182 
    pscr_ret___0 = pfo_ret___3;
    #line 182 
    break;
    #line 182 
    case (unsigned long)2: 
                           #line 182 
    ;
    #line 182 
    switch (4UL) {
      #line 182 
      case (unsigned long)1: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      case (unsigned long)2: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      case (unsigned long)4: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      case (unsigned long)8: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      default: 
               #line 182 
      ;
      #line 182 
      __bad_percpu_size();
    }
    #line 182 
    pscr_ret___0 = pfo_ret___4;
    #line 182 
    break;
    #line 182 
    case (unsigned long)4: 
                           #line 182 
    ;
    #line 182 
    switch (4UL) {
      #line 182 
      case (unsigned long)1: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      case (unsigned long)2: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      case (unsigned long)4: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      case (unsigned long)8: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      default: 
               #line 182 
      ;
      #line 182 
      __bad_percpu_size();
    }
    #line 182 
    pscr_ret___0 = pfo_ret___5;
    #line 182 
    break;
    #line 182 
    case (unsigned long)8: 
                           #line 182 
    ;
    #line 182 
    switch (4UL) {
      #line 182 
      case (unsigned long)1: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      case (unsigned long)2: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      case (unsigned long)4: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      case (unsigned long)8: 
                             #line 182 
      ;
      #line 183 
      ldv_inline_asm();
      #line 182 
      break;
      #line 182 
      default: 
               #line 182 
      ;
      #line 182 
      __bad_percpu_size();
    }
    #line 182 
    pscr_ret___0 = pfo_ret___6;
    #line 182 
    break;
    #line 182 
    default: 
             #line 182 
    ;
    #line 182 
    __bad_size_call_parameter();
    #line 182 
    break;
  }
  #line 182 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 182 
    __rcu_read_lock();
    {
      #line 183 
      union __anonunion___u_6223 __u_0;
      #line 182 
      __read_once_size((void *)(& __tracepoint_iavf_xmit_frame_ring.funcs),(void *)(& __u_0.__c),8);
      #line 182 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 182 
        bool __warned;
        #line 182 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 182 
          if (! __warned) {
            #line 182 
            if (rcu_read_lock_sched_held() == 0) {
              #line 182 
              __warned = (_Bool)1;
              #line 182 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h",182,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 182 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 182 
    __rcu_read_unlock();
  }
  #line 184 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h"
__inline static void trace_iavf_xmit_frame_ring_drop(struct sk_buff *skb, struct iavf_ring *ring)
{
  #line 189 
  int pscr_ret___0;
  #line 189 
  if ((int)static_key_false(& __tracepoint_iavf_xmit_frame_ring_drop.key) != 0) {
    #line 189 
    int pscr_ret__;
    #line 189 
    struct tracepoint_func *________p1;
    #line 189 
    struct tracepoint_func *it_func_ptr;
    #line 189 
    void *it_func;
    #line 189 
    void *__data;
    #line 189 
    int __idx = 0;
    {
      #line 189 
      void *__vpp_verify = (void *)0;
      #line 189 
      void *tmp = __vpp_verify;
    }
    #line 189 
    switch (4UL) {
      #line 189 
      int pfo_ret___1;
      #line 189 
      int pfo_ret___2;
      #line 189 
      int pfo_ret__;
      #line 189 
      int pfo_ret___0;
      #line 189 
      case (unsigned long)1: 
                             #line 189 
      ;
      #line 189 
      switch (4UL) {
        #line 189 
        case (unsigned long)1: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)2: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)4: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)8: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        default: 
                 #line 189 
        ;
        #line 189 
        __bad_percpu_size();
      }
      #line 189 
      pscr_ret__ = pfo_ret__;
      #line 189 
      break;
      #line 189 
      case (unsigned long)2: 
                             #line 189 
      ;
      #line 189 
      switch (4UL) {
        #line 189 
        case (unsigned long)1: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)2: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)4: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)8: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        default: 
                 #line 189 
        ;
        #line 189 
        __bad_percpu_size();
      }
      #line 189 
      pscr_ret__ = pfo_ret___0;
      #line 189 
      break;
      #line 189 
      case (unsigned long)4: 
                             #line 189 
      ;
      #line 189 
      switch (4UL) {
        #line 189 
        case (unsigned long)1: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)2: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)4: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)8: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        default: 
                 #line 189 
        ;
        #line 189 
        __bad_percpu_size();
      }
      #line 189 
      pscr_ret__ = pfo_ret___1;
      #line 189 
      break;
      #line 189 
      case (unsigned long)8: 
                             #line 189 
      ;
      #line 189 
      switch (4UL) {
        #line 189 
        case (unsigned long)1: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)2: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)4: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)8: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        default: 
                 #line 189 
        ;
        #line 189 
        __bad_percpu_size();
      }
      #line 189 
      pscr_ret__ = pfo_ret___2;
      #line 189 
      break;
      #line 189 
      default: 
               #line 189 
      ;
      #line 189 
      __bad_size_call_parameter();
      #line 189 
      break;
    }
    #line 189 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 189 
                                                               return;
    {
      #line 189 
      int __ret_warn_on = 0;
      #line 189 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 190 
        ldv_inline_asm();
        #line 191 
        ldv_inline_asm();
      }
      #line 189 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 189 
    __preempt_count_add(1);
    #line 190 
    ldv_inline_asm();
    {
      #line 190 
      union __anonunion___u_6225 __u;
      #line 189 
      __read_once_size((void *)(& __tracepoint_iavf_xmit_frame_ring_drop.funcs),(void *)(& __u.__c),8);
      #line 189 
      ________p1 = (__u.__val);
      }
    #line 189 
    it_func_ptr = ________p1;
    #line 189 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 189 
      while (1) {
        #line 189 
        it_func = it_func_ptr->func;
        #line 189 
        __data = it_func_ptr->data;
        #line 189 
        (*((void (*)(void *, struct sk_buff *, struct iavf_ring *))it_func))(__data,skb,ring);
        #line 189 
        it_func_ptr ++;
        #line 190 
        ;
        #line 190 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 189 
                                                break;
      }
    #line 191 
    ldv_inline_asm();
    #line 189 
    __preempt_count_sub(1);
  }
  {
    #line 189 
    void *__vpp_verify_0 = (void *)0;
    #line 189 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 189 
  switch (4UL) {
    #line 189 
    int pfo_ret___3;
    #line 189 
    int pfo_ret___4;
    #line 189 
    int pfo_ret___5;
    #line 189 
    int pfo_ret___6;
    #line 189 
    case (unsigned long)1: 
                           #line 189 
    ;
    #line 189 
    switch (4UL) {
      #line 189 
      case (unsigned long)1: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)2: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)4: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)8: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      default: 
               #line 189 
      ;
      #line 189 
      __bad_percpu_size();
    }
    #line 189 
    pscr_ret___0 = pfo_ret___3;
    #line 189 
    break;
    #line 189 
    case (unsigned long)2: 
                           #line 189 
    ;
    #line 189 
    switch (4UL) {
      #line 189 
      case (unsigned long)1: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)2: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)4: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)8: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      default: 
               #line 189 
      ;
      #line 189 
      __bad_percpu_size();
    }
    #line 189 
    pscr_ret___0 = pfo_ret___4;
    #line 189 
    break;
    #line 189 
    case (unsigned long)4: 
                           #line 189 
    ;
    #line 189 
    switch (4UL) {
      #line 189 
      case (unsigned long)1: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)2: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)4: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)8: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      default: 
               #line 189 
      ;
      #line 189 
      __bad_percpu_size();
    }
    #line 189 
    pscr_ret___0 = pfo_ret___5;
    #line 189 
    break;
    #line 189 
    case (unsigned long)8: 
                           #line 189 
    ;
    #line 189 
    switch (4UL) {
      #line 189 
      case (unsigned long)1: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)2: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)4: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)8: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      default: 
               #line 189 
      ;
      #line 189 
      __bad_percpu_size();
    }
    #line 189 
    pscr_ret___0 = pfo_ret___6;
    #line 189 
    break;
    #line 189 
    default: 
             #line 189 
    ;
    #line 189 
    __bad_size_call_parameter();
    #line 189 
    break;
  }
  #line 189 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 189 
    __rcu_read_lock();
    {
      #line 190 
      union __anonunion___u_6227 __u_0;
      #line 189 
      __read_once_size((void *)(& __tracepoint_iavf_xmit_frame_ring_drop.funcs),(void *)(& __u_0.__c),8);
      #line 189 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 189 
        bool __warned;
        #line 189 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 189 
          if (! __warned) {
            #line 189 
            if (rcu_read_lock_sched_held() == 0) {
              #line 189 
              __warned = (_Bool)1;
              #line 189 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_trace.h",189,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 189 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 189 
    __rcu_read_unlock();
  }
  #line 191 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_prototype.h"
__inline static struct iavf_rx_ptype_decoded decode_rx_desc_ptype(u8 ptype)
{
  #line 58 
  return iavf_ptype_lookup[(int)ptype];
}

#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static __le64 build_ctob(u32 td_cmd, u32 td_offset, unsigned int size, u32 td_tag)
{
  #line 13 
  return ((((unsigned long long)td_cmd << 4) | ((unsigned long long)td_offset << 16)) | ((unsigned long long)size << 34)) | ((unsigned long long)td_tag << 48);
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static void iavf_unmap_and_free_tx_resource(struct iavf_ring *ring, struct iavf_tx_buffer *tx_buffer)
{
  #line 30 
  if (tx_buffer->__anonCompField_iavf_tx_buffer_204.skb != (struct sk_buff *)0) {
    #line 31 
    if (((unsigned long)tx_buffer->tx_flags & 512UL) != 0UL) 
                                                             #line 32 
                                                             kfree(tx_buffer->__anonCompField_iavf_tx_buffer_204.raw_buf); else 
                                                                    #line 34 
                                                                    dev_kfree_skb_any(tx_buffer->__anonCompField_iavf_tx_buffer_204.skb);
    #line 35 
    if (tx_buffer->len != 0U) 
                              #line 36 
                              dma_unmap_single_attrs(ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  }
  else 
    #line 40 
    if (tx_buffer->len != 0U) 
                              #line 41 
                              dma_unmap_page_attrs(ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 47 
  tx_buffer->next_to_watch = (struct iavf_tx_desc *)0;
  #line 48 
  tx_buffer->__anonCompField_iavf_tx_buffer_204.skb = (struct sk_buff *)0;
  #line 49 
  tx_buffer->len = 0U;
  #line 50 
  return;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
void iavf_clean_tx_ring(struct iavf_ring *tx_ring)
{
  #line 59 
  unsigned long bi_size;
  #line 60 
  u16 i;
  #line 63 
  if (tx_ring->__anonCompField_iavf_ring_205.tx_bi == (struct iavf_tx_buffer *)0) 
    #line 64 
    return;
  #line 67 
  i = (unsigned short)0U;
  #line 67 
  while ((int)tx_ring->count > (int)i) {
    #line 68 
    iavf_unmap_and_free_tx_resource(tx_ring,tx_ring->__anonCompField_iavf_ring_205.tx_bi + (unsigned long)i);
    #line 67 
    i = (u16)((int)i + 1);
  }
  #line 70 
  bi_size = (unsigned long)tx_ring->count * 40UL;
  #line 71 
  memset((void *)tx_ring->__anonCompField_iavf_ring_205.tx_bi,0,bi_size);
  #line 74 
  memset(tx_ring->desc,0,(unsigned long)tx_ring->size);
  #line 76 
  tx_ring->next_to_use = (unsigned short)0U;
  #line 77 
  tx_ring->next_to_clean = (unsigned short)0U;
  #line 79 
  if (tx_ring->netdev == (struct net_device *)0) 
                                                 #line 80 
                                                 return;
  #line 83 
  netdev_tx_reset_queue(txring_txq(tx_ring));
  #line 84 
  return;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
void iavf_free_tx_resources(struct iavf_ring *tx_ring)
{
  #line 94 
  iavf_clean_tx_ring(tx_ring);
  #line 95 
  kfree((void *)tx_ring->__anonCompField_iavf_ring_205.tx_bi);
  #line 96 
  tx_ring->__anonCompField_iavf_ring_205.tx_bi = (struct iavf_tx_buffer *)0;
  #line 98 
  if (tx_ring->desc != (void *)0) {
    #line 99 
    dma_free_coherent(tx_ring->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma);
    #line 101 
    tx_ring->desc = (void *)0;
  }
  #line 103 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
u32 iavf_get_tx_pending(struct iavf_ring *ring, bool in_sw)
{
  #line 115 
  u32 head;
  #line 115 
  u32 tail;
  #line 117 
  head = (unsigned int)ring->next_to_clean;
  #line 118 
  tail = readl((void *)ring->tail);
  #line 120 
  if (head != tail) {
    #line 122 
    u32 tmp;
    #line 122 
    if (head < tail) 
                     #line 122 
                     tmp = tail - head; else 
                                             #line 122 
                                             tmp = ((unsigned int)ring->count + tail) - head;
    #line 122 
    return tmp;
  }
  #line 124 
  return 0U;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
void iavf_detect_recover_hung(struct iavf_vsi *vsi)
{
  #line 137 
  struct net_device *netdev;
  #line 138 
  unsigned int i;
  #line 139 
  int packets;
  #line 136 
  struct iavf_ring *tx_ring = (struct iavf_ring *)0;
  #line 141 
  if (vsi == (struct iavf_vsi *)0) 
                                   #line 142 
                                   return;
  #line 144 
  if ((int)test_bit(0L,(unsigned long *)(& vsi->state)) != 0) 
                                                              #line 145 
                                                              return;
  #line 147 
  netdev = vsi->netdev;
  #line 148 
  if (netdev == (struct net_device *)0) 
                                        #line 149 
                                        return;
  #line 151 
  if (! netif_carrier_ok(netdev)) 
                                  #line 152 
                                  return;
  #line 154 
  i = 0U;
  #line 154 
  while ((unsigned int)(vsi->back)->num_active_queues > i) {
    #line 155 
    tx_ring = (vsi->back)->tx_rings + (unsigned long)i;
    #line 156 
    if (tx_ring != (struct iavf_ring *)0 && tx_ring->desc != (void *)0) {
      #line 164 
      packets = (int)tx_ring->stats.packets & 2147483647;
      #line 165 
      if (tx_ring->__anonCompField_iavf_ring_206.tx_stats.prev_pkt_ctr == packets) {
        #line 166 
        iavf_force_wb(vsi,tx_ring->q_vector);
        #line 167 
        goto __Cont;
      }
      #line 169 
      ldv_inline_asm();
      #line 174 
      if (iavf_get_tx_pending(tx_ring,(_Bool)1) != 0U) 
                                                       #line 174 
                                                       tx_ring->__anonCompField_iavf_ring_206.tx_stats.prev_pkt_ctr = packets; else 
                                                                    #line 174 
                                                                    tx_ring->__anonCompField_iavf_ring_206.tx_stats.prev_pkt_ctr = -1;
    }
    #line 154 
    __Cont: 
            #line 154 
    i ++;
  }
  #line 178 
  return;
}

#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static bool iavf_clean_tx_irq(struct iavf_vsi *vsi, struct iavf_ring *tx_ring, int napi_budget)
{
  #line 194 
  struct iavf_tx_buffer *tx_buf;
  #line 195 
  struct iavf_tx_desc *tx_desc;
  #line 308 
  int tmp_6;
  #line 193 
  int i = (int)tx_ring->next_to_clean;
  #line 196 
  unsigned int total_bytes = 0U;
  #line 196 
  unsigned int total_packets = 0U;
  #line 197 
  unsigned int budget = (unsigned int)vsi->work_limit;
  #line 199 
  tx_buf = tx_ring->__anonCompField_iavf_ring_205.tx_bi + (unsigned long)i;
  #line 200 
  tx_desc = (struct iavf_tx_desc *)tx_ring->desc + (unsigned long)i;
  #line 201 
  i -= (int)tx_ring->count;
  #line 203 
  while (1) {
    {
      #line 204 
      struct iavf_tx_desc *eop_desc = tx_buf->next_to_watch;
      #line 207 
      if (eop_desc == (struct iavf_tx_desc *)0) 
                                                #line 208 
                                                break;
      #line 209 
      ldv_inline_asm();
      #line 213 
      trace_iavf_clean_tx_irq(tx_ring,tx_desc,tx_buf);
      #line 215 
      if ((eop_desc->cmd_type_offset_bsz & 15ULL) == 0ULL) 
                                                           #line 217 
                                                           break;
      #line 220 
      tx_buf->next_to_watch = (struct iavf_tx_desc *)0;
      #line 223 
      total_bytes = tx_buf->bytecount + total_bytes;
      #line 224 
      total_packets = (unsigned int)tx_buf->gso_segs + total_packets;
      #line 227 
      napi_consume_skb(tx_buf->__anonCompField_iavf_tx_buffer_204.skb,napi_budget);
      #line 230 
      dma_unmap_single_attrs(tx_ring->dev,tx_buf->dma,(unsigned long)tx_buf->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 236 
      tx_buf->__anonCompField_iavf_tx_buffer_204.skb = (struct sk_buff *)0;
      #line 237 
      tx_buf->len = 0U;
      #line 240 
      while (tx_desc != eop_desc) {
        #line 241 
        trace_iavf_clean_tx_irq_unmap(tx_ring,tx_desc,tx_buf);
        #line 244 
        tx_buf ++;
        #line 245 
        tx_desc ++;
        #line 246 
        i ++;
        #line 247 
        if ((long)(i == 0) != 0L) {
          #line 248 
          i -= (int)tx_ring->count;
          #line 249 
          tx_buf = tx_ring->__anonCompField_iavf_ring_205.tx_bi;
          #line 250 
          tx_desc = (struct iavf_tx_desc *)tx_ring->desc;
        }
        #line 254 
        if (tx_buf->len != 0U) {
          #line 255 
          dma_unmap_page_attrs(tx_ring->dev,tx_buf->dma,(unsigned long)tx_buf->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
          #line 259 
          tx_buf->len = 0U;
        }
      }
      #line 264 
      tx_buf ++;
      #line 265 
      tx_desc ++;
      #line 266 
      i ++;
      #line 267 
      if ((long)(i == 0) != 0L) {
        #line 268 
        i -= (int)tx_ring->count;
        #line 269 
        tx_buf = tx_ring->__anonCompField_iavf_ring_205.tx_bi;
        #line 270 
        tx_desc = (struct iavf_tx_desc *)tx_ring->desc;
      }
      #line 273 
      __builtin_prefetch((void const *)((void *)tx_desc));
      #line 276 
      budget --;
    }
    #line 277 
    if (! ((long)(budget != 0U) != 0L)) 
                                        #line 203 
                                        break;
  }
  #line 279 
  i = (int)tx_ring->count + i;
  #line 280 
  tx_ring->next_to_clean = (unsigned short)i;
  #line 281 
  u64_stats_init(& tx_ring->syncp);
  #line 282 
  tx_ring->stats.bytes += (unsigned long long)total_bytes;
  #line 283 
  tx_ring->stats.packets += (unsigned long long)total_packets;
  #line 284 
  u64_stats_init(& tx_ring->syncp);
  #line 285 
  (tx_ring->q_vector)->tx.total_bytes += total_bytes;
  #line 286 
  (tx_ring->q_vector)->tx.total_packets += total_packets;
  #line 288 
  if (((unsigned long)tx_ring->flags & 1UL) != 0UL) {
    #line 294 
    unsigned int j = iavf_get_tx_pending(tx_ring,(_Bool)0);
    #line 296 
    if ((budget != 0U && j <= 3U) && j != 0U) {
      #line 298 
      if (! test_bit(0L,(unsigned long *)(& vsi->state))) {
        #line 298 
        int tmp_1;
        #line 298 
        if ((int)tx_ring->next_to_clean <= (int)tx_ring->next_to_use) 
          #line 298 
          tmp_1 = (int)tx_ring->count; else 
                                            #line 298 
                                            tmp_1 = 0;
        #line 298 
        ;
        #line 298 
        if (((tmp_1 + (int)tx_ring->next_to_clean) - (int)tx_ring->next_to_use) + -1 != (int)tx_ring->count) 
          #line 300 
          tx_ring->arm_wb = (_Bool)1;
      }
    }
  }
  #line 304 
  ;
  #line 304 
  ;
  #line 304 
  netdev_tx_completed_queue(txring_txq(tx_ring),total_packets,total_bytes);
  #line 308 
  if ((long)(total_packets != 0U) != 0L) {
    #line 308 
    if ((long)((int)netif_carrier_ok(tx_ring->netdev) != 0) != 0L) 
                                                                   #line 308 
                                                                   tmp_6 = 1; else 
                                                                    #line 308 
                                                                    tmp_6 = 0;
  }
  else 
       #line 308 
       tmp_6 = 0;
  #line 308 
  if (tmp_6 != 0) {
    #line 308 
    int tmp_7;
    #line 308 
    if ((int)tx_ring->next_to_clean <= (int)tx_ring->next_to_use) 
                                                                  #line 308 
                                                                  tmp_7 = (int)tx_ring->count; else 
                                                                    #line 308 
                                                                    tmp_7 = 0;
    #line 308 
    ;
    #line 308 
    if ((long)((tmp_7 + (int)tx_ring->next_to_clean) - (int)tx_ring->next_to_use > 46) != 0L) {
      #line 310 
      ldv_inline_asm();
      #line 314 
      if ((int)__netif_subqueue_stopped(tx_ring->netdev,
                                 (unsigned short)((int)tx_ring->queue_index)) != 0) {
        #line 316 
        if (! test_bit(0L,(unsigned long *)(& vsi->state))) {
          #line 317 
          netif_wake_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
          #line 319 
          (tx_ring->__anonCompField_iavf_ring_206.tx_stats.restart_queue) ++;
        }
      }
    }
  }
  #line 323 
  return (_Bool)(budget != 0U);
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static void iavf_enable_wb_on_itr(struct iavf_vsi *vsi, struct iavf_q_vector *q_vector)
{
  #line 336 
  u32 val;
  #line 335 
  u16 flags = (q_vector->tx.ring)->flags;
  #line 338 
  if (((unsigned long)flags & 1UL) == 0UL) 
                                           #line 339 
                                           return;
  #line 341 
  if ((int)q_vector->arm_wb_state != 0) 
                                        #line 342 
                                        return;
  #line 344 
  val = 1073741848U;
  #line 347 
  writel(val,(void *)((vsi->back)->hw.hw_addr + (unsigned long)(((int)q_vector->reg_idx + 3584) * 4)));
  #line 349 
  q_vector->arm_wb_state = (_Bool)1;
  #line 350 
  return;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
void iavf_force_wb(struct iavf_vsi *vsi, struct iavf_q_vector *q_vector)
{
  #line 360 
  u32 val = 16777245U;
  #line 366 
  writel(val,(void *)((vsi->back)->hw.hw_addr + (unsigned long)(((int)q_vector->reg_idx + 3584) * 4)));
  #line 367 
  return;
}

#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static bool iavf_container_is_rx(struct iavf_q_vector *q_vector, struct iavf_ring_container *rc)
{
  #line 374 
  return (_Bool)(& q_vector->rx == rc);
}

#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static unsigned int iavf_itr_divisor(struct iavf_q_vector *q_vector)
{
  #line 379 
  unsigned int divisor;
  #line 381 
  switch ((unsigned int)(q_vector->adapter)->link_speed) {
    #line 382 
    case (unsigned int)16: 
                           #line 382 
    ;
    #line 383 
    divisor = 2048U;
    #line 384 
    break;
    #line 385 
    case (unsigned int)64: 
                           #line 385 
    ;
    #line 386 
    case (unsigned int)32: 
                           #line 386 
    ;
    #line 387 
    divisor = 1024U;
    #line 388 
    break;
    #line 389 
    default: 
             #line 389 
    ;
    #line 390 
    case (unsigned int)8: 
                          #line 390 
    ;
    #line 391 
    divisor = 512U;
    #line 392 
    break;
    #line 393 
    case (unsigned int)4: 
                          #line 393 
    ;
    #line 394 
    case (unsigned int)2: 
                          #line 394 
    ;
    #line 395 
    divisor = 64U;
    #line 396 
    break;
  }
  #line 399 
  return divisor;
}

#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static void iavf_update_itr(struct iavf_q_vector *q_vector, struct iavf_ring_container *rc)
{
  #line 418 
  unsigned int avg_wire_size;
  #line 418 
  unsigned int packets;
  #line 418 
  unsigned int bytes;
  #line 418 
  unsigned int itr;
  #line 419 
  unsigned long next_update = jiffies;
  #line 424 
  if (rc->ring == (struct iavf_ring *)0 || ((int)(rc->ring)->itr_setting & 32768) == 0) 
    #line 425 
    return;
  #line 430 
  if ((int)iavf_container_is_rx(q_vector,rc) != 0) 
                                                   #line 430 
                                                   itr = 32770U; else 
                                                                   #line 430 
                                                                   itr = 32894U;
  {
    #line 439 
    unsigned long __dummy;
    #line 439 
    unsigned long __dummy2;
    }
  #line 439 
  if (1 != 0) {
    {
      #line 439 
      unsigned long __dummy_0;
      #line 439 
      unsigned long __dummy2_0;
      }
    #line 439 
    if (1 != 0) 
      #line 439 
      if ((long)(rc->next_update - next_update) < 0L) 
                                                      #line 440 
                                                      goto clear_counts;
  }
  #line 448 
  if ((unsigned int)q_vector->itr_countdown != 0U) {
    #line 449 
    itr = (unsigned int)rc->target_itr;
    #line 450 
    goto clear_counts;
  }
  #line 453 
  packets = rc->total_packets;
  #line 454 
  bytes = rc->total_bytes;
  #line 456 
  if ((int)iavf_container_is_rx(q_vector,rc) != 0) {
    #line 462 
    if ((packets + 4294967295U <= 2U && bytes <= 8999U) && ((int)q_vector->tx.target_itr & 32768) != 0) {
      #line 464 
      itr = 32768U;
      #line 465 
      goto adjust_by_size;
    }
  }
  else 
    #line 467 
    if (packets <= 3U) {
      #line 473 
      if ((unsigned int)rc->target_itr == 126U && ((int)q_vector->rx.target_itr & 8190) == 126) 
        #line 476 
        goto clear_counts;
    }
    else 
      #line 477 
      if (packets > 32U) 
                         #line 481 
                         rc->target_itr = (unsigned short)((unsigned int)rc->target_itr & 32767U);
  #line 492 
  if (packets <= 55U) {
    #line 493 
    itr = (unsigned int)((int)rc->target_itr + 2);
    #line 494 
    if ((itr & 8190U) > 126U) {
      #line 495 
      itr &= 32768U;
      #line 496 
      itr += 126U;
    }
    #line 498 
    goto clear_counts;
  }
  #line 501 
  if (packets <= 256U) {
    #line 502 
    u16 __UNIQUE_ID___x550;
    #line 502 
    int tmp_3;
    {
      #line 502 
      __UNIQUE_ID___x550 = q_vector->tx.current_itr;
      #line 502 
      u16 __UNIQUE_ID___y551 = q_vector->rx.current_itr;
      #line 502 
      if ((int)__UNIQUE_ID___x550 < (int)__UNIQUE_ID___y551) 
                                                             #line 502 
                                                             tmp_3 = (int)__UNIQUE_ID___x550; else 
                                                                    #line 502 
                                                                    tmp_3 = (int)__UNIQUE_ID___y551;
      }
    #line 502 
    itr = (unsigned int)tmp_3;
    #line 503 
    itr &= 8190U;
    #line 509 
    if (packets <= 112U) 
                         #line 510 
                         goto clear_counts;
    #line 517 
    itr /= 2U;
    #line 518 
    itr &= 8190U;
    #line 519 
    if (itr <= 1U) 
                   #line 520 
                   itr = 2U;
    #line 522 
    goto clear_counts;
  }
  #line 531 
  itr = 0U;
  #line 533 
  adjust_by_size: 
                  #line 533 
  ;
  #line 539 
  avg_wire_size = bytes / packets;
  #line 556 
  if (avg_wire_size <= 60U) 
                            #line 558 
                            avg_wire_size = 4096U;
  else 
    #line 559 
    if (avg_wire_size <= 380U) {
      #line 561 
      avg_wire_size *= 40U;
      #line 562 
      avg_wire_size += 1696U;
    }
    else 
      #line 563 
      if (avg_wire_size <= 1084U) {
        #line 565 
        avg_wire_size *= 15U;
        #line 566 
        avg_wire_size += 11452U;
      }
      else 
        #line 567 
        if (avg_wire_size <= 1980U) {
          #line 569 
          avg_wire_size *= 5U;
          #line 570 
          avg_wire_size += 22420U;
        }
        else 
             #line 573 
             avg_wire_size = 32256U;
  #line 579 
  if ((itr & 32768U) != 0U) 
                            #line 580 
                            avg_wire_size /= 2U;
  #line 590 
  itr = (((iavf_itr_divisor(q_vector) + avg_wire_size) + 4294967295U) / iavf_itr_divisor(q_vector)) * 2U + itr;
  #line 592 
  if ((itr & 8190U) > 126U) {
    #line 593 
    itr &= 32768U;
    #line 594 
    itr += 126U;
  }
  #line 597 
  clear_counts: 
                #line 597 
  ;
  #line 599 
  rc->target_itr = (unsigned short)itr;
  #line 602 
  rc->next_update = next_update + 1UL;
  #line 604 
  rc->total_bytes = 0U;
  #line 605 
  rc->total_packets = 0U;
  #line 606 
  return;
}

#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
int iavf_setup_tx_descriptors(struct iavf_ring *tx_ring)
{
  #line 617 
  int bi_size;
  #line 616 
  struct device *dev = tx_ring->dev;
  #line 619 
  if (dev == (struct device *)0) 
                                 #line 620 
                                 return -12;
  {
    #line 623 
    int __ret_warn_on = tx_ring->__anonCompField_iavf_ring_205.tx_bi != (struct iavf_tx_buffer *)0;
    #line 623 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 624 
      ldv_inline_asm();
      #line 625 
      ldv_inline_asm();
    }
    #line 623 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 624 
  bi_size = (int)((unsigned int)tx_ring->count * 40U);
  #line 625 
  tx_ring->__anonCompField_iavf_ring_205.tx_bi = (struct iavf_tx_buffer *)kzalloc_1((unsigned long)bi_size,3264U);
  #line 626 
  if (tx_ring->__anonCompField_iavf_ring_205.tx_bi == (struct iavf_tx_buffer *)0) 
    #line 627 
    goto err;
  #line 630 
  tx_ring->size = (unsigned int)tx_ring->count * 16U;
  #line 631 
  tx_ring->size = (tx_ring->size + 4095U) & 4294963200U;
  #line 632 
  tx_ring->desc = dma_alloc_coherent(dev,(unsigned long)tx_ring->size,& tx_ring->dma,3264U);
  #line 634 
  if (tx_ring->desc == (void *)0) {
    #line 635 
    _dev_info(dev,(char *)"Unable to allocate memory for the Tx descriptor ring, size=%d\n",tx_ring->size);
    #line 637 
    goto err;
  }
  #line 640 
  tx_ring->next_to_use = (unsigned short)0U;
  #line 641 
  tx_ring->next_to_clean = (unsigned short)0U;
  #line 642 
  tx_ring->__anonCompField_iavf_ring_206.tx_stats.prev_pkt_ctr = -1;
  #line 643 
  return 0;
  #line 645 
  err: 
       #line 645 
  ;
  #line 646 
  kfree((void *)tx_ring->__anonCompField_iavf_ring_205.tx_bi);
  #line 647 
  tx_ring->__anonCompField_iavf_ring_205.tx_bi = (struct iavf_tx_buffer *)0;
  #line 648 
  return -12;
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
void iavf_clean_rx_ring(struct iavf_ring *rx_ring)
{
  #line 657 
  unsigned long bi_size;
  #line 658 
  u16 i;
  #line 661 
  if (rx_ring->__anonCompField_iavf_ring_205.rx_bi == (struct iavf_rx_buffer *)0) 
    #line 662 
    return;
  #line 664 
  if (rx_ring->skb != (struct sk_buff *)0) {
    #line 665 
    consume_skb(rx_ring->skb);
    #line 666 
    rx_ring->skb = (struct sk_buff *)0;
  }
  #line 670 
  i = (unsigned short)0U;
  #line 670 
  while ((int)rx_ring->count > (int)i) {
    {
      #line 671 
      struct iavf_rx_buffer *rx_bi = rx_ring->__anonCompField_iavf_ring_205.rx_bi + (unsigned long)i;
      #line 673 
      if (rx_bi->page == (struct page *)0) 
                                           #line 674 
                                           goto __Cont;
      #line 679 
      dma_sync_single_range_for_cpu(rx_ring->dev,rx_bi->dma,(unsigned long)rx_bi->page_offset,(unsigned long)rx_ring->rx_buf_len,(enum dma_data_direction)DMA_FROM_DEVICE);
      #line 686 
      ;
      #line 686 
      ;
      #line 686 
      dma_unmap_page_attrs(rx_ring->dev,rx_bi->dma,4096UL << iavf_rx_pg_order(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE,34UL);
      #line 691 
      __page_frag_cache_drain(rx_bi->page,(unsigned int)rx_bi->pagecnt_bias);
      #line 693 
      rx_bi->page = (struct page *)0;
      #line 694 
      rx_bi->page_offset = 0U;
    }
    #line 670 
    __Cont: 
            #line 670 
    i = (u16)((int)i + 1);
  }
  #line 697 
  bi_size = (unsigned long)rx_ring->count * 24UL;
  #line 698 
  memset((void *)rx_ring->__anonCompField_iavf_ring_205.rx_bi,0,bi_size);
  #line 701 
  memset(rx_ring->desc,0,(unsigned long)rx_ring->size);
  #line 703 
  rx_ring->next_to_alloc = (unsigned short)0U;
  #line 704 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 705 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 706 
  return;
}

#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
void iavf_free_rx_resources(struct iavf_ring *rx_ring)
{
  #line 716 
  iavf_clean_rx_ring(rx_ring);
  #line 717 
  kfree((void *)rx_ring->__anonCompField_iavf_ring_205.rx_bi);
  #line 718 
  rx_ring->__anonCompField_iavf_ring_205.rx_bi = (struct iavf_rx_buffer *)0;
  #line 720 
  if (rx_ring->desc != (void *)0) {
    #line 721 
    dma_free_coherent(rx_ring->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma);
    #line 723 
    rx_ring->desc = (void *)0;
  }
  #line 725 
  return;
}

#line 733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
int iavf_setup_rx_descriptors(struct iavf_ring *rx_ring)
{
  #line 736 
  int bi_size;
  #line 735 
  struct device *dev = rx_ring->dev;
  {
    #line 739 
    int __ret_warn_on = rx_ring->__anonCompField_iavf_ring_205.rx_bi != (struct iavf_rx_buffer *)0;
    #line 739 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 740 
      ldv_inline_asm();
      #line 741 
      ldv_inline_asm();
    }
    #line 739 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 740 
  bi_size = (int)((unsigned int)rx_ring->count * 24U);
  #line 741 
  rx_ring->__anonCompField_iavf_ring_205.rx_bi = (struct iavf_rx_buffer *)kzalloc_1((unsigned long)bi_size,3264U);
  #line 742 
  if (rx_ring->__anonCompField_iavf_ring_205.rx_bi == (struct iavf_rx_buffer *)0) 
    #line 743 
    goto err;
  #line 745 
  u64_stats_init(& rx_ring->syncp);
  #line 748 
  rx_ring->size = (unsigned int)rx_ring->count * 32U;
  #line 749 
  rx_ring->size = (rx_ring->size + 4095U) & 4294963200U;
  #line 750 
  rx_ring->desc = dma_alloc_coherent(dev,(unsigned long)rx_ring->size,& rx_ring->dma,3264U);
  #line 753 
  if (rx_ring->desc == (void *)0) {
    #line 754 
    _dev_info(dev,(char *)"Unable to allocate memory for the Rx descriptor ring, size=%d\n",rx_ring->size);
    #line 756 
    goto err;
  }
  #line 759 
  rx_ring->next_to_alloc = (unsigned short)0U;
  #line 760 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 761 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 763 
  return 0;
  #line 764 
  err: 
       #line 764 
  ;
  #line 765 
  kfree((void *)rx_ring->__anonCompField_iavf_ring_205.rx_bi);
  #line 766 
  rx_ring->__anonCompField_iavf_ring_205.rx_bi = (struct iavf_rx_buffer *)0;
  #line 767 
  return -12;
}

#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static void iavf_release_rx_desc(struct iavf_ring *rx_ring, u32 val)
{
  #line 777 
  rx_ring->next_to_use = (unsigned short)val;
  #line 780 
  rx_ring->next_to_alloc = (unsigned short)val;
  #line 781 
  ldv_inline_asm();
  #line 788 
  writel(val,(void *)rx_ring->tail);
  #line 789 
  return;
}

#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static unsigned int iavf_rx_offset(struct iavf_ring *rx_ring)
{
  #line 799 
  unsigned int tmp_1;
  #line 799 
  if ((int)ring_uses_build_skb(rx_ring) != 0) {
    #line 799 
    tmp_1 = (unsigned int)iavf_skb_pad();
  }
  else 
       #line 799 
       tmp_1 = 0U;
  #line 799 
  return tmp_1;
}

#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static bool iavf_alloc_mapped_page(struct iavf_ring *rx_ring, struct iavf_rx_buffer *bi)
{
  #line 814 
  dma_addr_t dma;
  #line 813 
  struct page *page = bi->page;
  #line 817 
  if ((long)(page != (struct page *)0) != 0L) {
    #line 818 
    (rx_ring->__anonCompField_iavf_ring_206.rx_stats.page_reuse_count) ++;
    #line 819 
    return (_Bool)1;
  }
  #line 823 
  page = dev_alloc_pages(iavf_rx_pg_order(rx_ring));
  #line 824 
  if ((long)(page == (struct page *)0) != 0L) {
    #line 825 
    (rx_ring->__anonCompField_iavf_ring_206.rx_stats.alloc_page_failed) ++;
    #line 826 
    return (_Bool)0;
  }
  #line 830 
  ;
  #line 830 
  ;
  #line 830 
  dma = dma_map_page_attrs(rx_ring->dev,page,0UL,4096UL << iavf_rx_pg_order(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE,34UL);
  #line 838 
  if (dma_mapping_error(rx_ring->dev,dma) != 0) {
    #line 839 
    ;
    #line 839 
    __free_pages(page,iavf_rx_pg_order(rx_ring));
    #line 840 
    (rx_ring->__anonCompField_iavf_ring_206.rx_stats.alloc_page_failed) ++;
    #line 841 
    return (_Bool)0;
  }
  #line 844 
  bi->dma = dma;
  #line 845 
  bi->page = page;
  #line 846 
  bi->page_offset = iavf_rx_offset(rx_ring);
  #line 849 
  bi->pagecnt_bias = (unsigned short)1U;
  #line 851 
  return (_Bool)1;
}

#line 860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static void iavf_receive_skb(struct iavf_ring *rx_ring, struct sk_buff *skb, u16 vlan_tag)
{
  #line 863 
  struct iavf_q_vector *q_vector = rx_ring->q_vector;
  #line 865 
  if (((rx_ring->netdev)->features & 256ULL) != 0ULL && ((int)vlan_tag & 4095) != 0) 
    #line 867 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vlan_tag));
  #line 869 
  napi_gro_receive(& q_vector->napi,skb);
  #line 870 
  return;
}

#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
bool iavf_alloc_rx_buffers(struct iavf_ring *rx_ring, u16 cleaned_count)
{
  #line 882 
  union iavf_32byte_rx_desc *rx_desc;
  #line 883 
  struct iavf_rx_buffer *bi;
  #line 881 
  u16 ntu = rx_ring->next_to_use;
  #line 886 
  if (rx_ring->netdev == (struct net_device *)0 || (unsigned int)cleaned_count == 0U) 
    #line 887 
    return (_Bool)0;
  #line 889 
  rx_desc = (union iavf_32byte_rx_desc *)rx_ring->desc + (unsigned long)ntu;
  #line 890 
  bi = rx_ring->__anonCompField_iavf_ring_205.rx_bi + (unsigned long)ntu;
  #line 892 
  while (1) {
    {
      #line 893 
      if (! iavf_alloc_mapped_page(rx_ring,bi)) 
                                                #line 894 
                                                goto no_buffers;
      #line 897 
      dma_sync_single_range_for_device(rx_ring->dev,bi->dma,(unsigned long)bi->page_offset,(unsigned long)rx_ring->rx_buf_len,(enum dma_data_direction)DMA_FROM_DEVICE);
      #line 905 
      rx_desc->read.pkt_addr = bi->dma + (unsigned long long)bi->page_offset;
      #line 907 
      rx_desc ++;
      #line 908 
      bi ++;
      #line 909 
      ntu = (u16)((int)ntu + 1);
      #line 910 
      if ((long)((int)rx_ring->count == (int)ntu) != 0L) {
        #line 911 
        rx_desc = (union iavf_32byte_rx_desc *)rx_ring->desc;
        #line 912 
        bi = rx_ring->__anonCompField_iavf_ring_205.rx_bi;
        #line 913 
        ntu = (unsigned short)0U;
      }
      #line 917 
      rx_desc->wb.qword1.status_error_len = 0ULL;
      #line 919 
      cleaned_count = (u16)((int)cleaned_count - 1);
    }
    #line 920 
    if (! ((unsigned int)cleaned_count != 0U)) 
                                               #line 892 
                                               break;
  }
  #line 922 
  if ((int)rx_ring->next_to_use != (int)ntu) 
                                             #line 923 
                                             iavf_release_rx_desc(rx_ring,(unsigned int)ntu);
  #line 925 
  return (_Bool)0;
  #line 927 
  no_buffers: 
              #line 927 
  ;
  #line 928 
  if ((int)rx_ring->next_to_use != (int)ntu) 
                                             #line 929 
                                             iavf_release_rx_desc(rx_ring,(unsigned int)ntu);
  #line 934 
  return (_Bool)1;
}

#line 943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static void iavf_rx_checksum(struct iavf_vsi *vsi, struct sk_buff *skb, union iavf_32byte_rx_desc *rx_desc)
{
  #line 947 
  struct iavf_rx_ptype_decoded decoded;
  #line 948 
  u32 rx_error;
  #line 948 
  u32 rx_status;
  #line 949 
  bool ipv4;
  #line 949 
  bool ipv6;
  #line 950 
  u8 ptype;
  #line 951 
  u64 qword;
  #line 953 
  qword = rx_desc->wb.qword1.status_error_len;
  #line 954 
  ptype = (unsigned char)(qword >> 30);
  #line 955 
  rx_error = (unsigned int)(qword >> 19) & 255U;
  #line 957 
  rx_status = (unsigned int)qword & 524287U;
  #line 959 
  decoded = decode_rx_desc_ptype((unsigned char)((int)ptype));
  #line 961 
  skb->ip_summed = (unsigned char)0U;
  #line 963 
  skb_checksum_none_assert(skb);
  #line 966 
  if (((vsi->netdev)->features & 549755813888ULL) == 0ULL) 
                                                           #line 967 
                                                           return;
  #line 970 
  if (((unsigned long)rx_status & 8UL) == 0UL) 
                                               #line 971 
                                               return;
  #line 974 
  if ((unsigned int)decoded.known == 0U || (unsigned int)decoded.outer_ip == 0U) 
    #line 975 
    return;
  #line 977 
  ipv4 = (_Bool)(((unsigned int)decoded.outer_ip == 1U && (unsigned int)decoded.outer_ip_ver == 0U) != 0);
  #line 979 
  ipv6 = (_Bool)(((unsigned int)decoded.outer_ip == 1U && (unsigned int)decoded.outer_ip_ver == 1U) != 0);
  #line 982 
  if ((int)ipv4 != 0 && ((unsigned long)rx_error & 40UL) != 0UL) 
                                                                 #line 985 
                                                                 goto checksum_fail;
  #line 988 
  if ((int)ipv6 != 0 && ((unsigned long)rx_status & 32768UL) != 0UL) 
    #line 991 
    return;
  #line 994 
  if (((unsigned long)rx_error & 16UL) != 0UL) 
                                               #line 995 
                                               goto checksum_fail;
  #line 1001 
  if (((unsigned long)rx_error & 128UL) != 0UL) 
                                                #line 1002 
                                                return;
  #line 1005 
  switch ((int)decoded.inner_prot) {
    #line 1006 
    case 2: 
            #line 1006 
    ;
    #line 1007 
    case 1: 
            #line 1007 
    ;
    #line 1008 
    case 3: 
            #line 1008 
    ;
    #line 1009 
    skb->ip_summed = (unsigned char)1U;
    #line 1011 
    default: 
             #line 1011 
    ;
    #line 1012 
    break;
  }
  #line 1015 
  return;
  #line 1017 
  checksum_fail: 
                 #line 1017 
  ;
  #line 1018 
  ((vsi->back)->hw_csum_rx_error) ++;
  #line 1019 
  return;
}

#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static int iavf_ptype_to_htype(u8 ptype)
{
  #line 1029 
  struct iavf_rx_ptype_decoded decoded = decode_rx_desc_ptype((unsigned char)((int)ptype));
  #line 1031 
  if ((unsigned int)decoded.known == 0U) 
                                         #line 1032 
                                         return 0;
  #line 1034 
  if ((unsigned int)decoded.outer_ip == 1U && (unsigned int)decoded.payload_layer == 3U) 
    #line 1036 
    return 3;
  else 
    #line 1037 
    if ((unsigned int)decoded.outer_ip == 1U && (unsigned int)decoded.payload_layer == 2U) 
      #line 1039 
      return 2; else 
                     #line 1041 
                     return 1;
}

#line 1051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static void iavf_rx_hash(struct iavf_ring *ring, union iavf_32byte_rx_desc *rx_desc, struct sk_buff *skb, u8 rx_ptype)
{
  #line 1056 
  u32 hash;
  #line 1057 
  __le64 rss_mask = 12288ULL;
  #line 1061 
  if (((ring->netdev)->features & 274877906944ULL) != 0ULL) 
                                                            #line 1062 
                                                            return;
  #line 1064 
  if ((rx_desc->wb.qword1.status_error_len & 12288ULL) == 12288ULL) {
    #line 1065 
    hash = rx_desc->wb.qword0.hi_dword.rss;
    #line 1066 
    ;
    #line 1066 
    ;
    #line 1066 
    skb_set_hash(skb,hash,(enum pkt_hash_types)iavf_ptype_to_htype((unsigned char)((int)rx_ptype)));
  }
  #line 1068 
  return;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static void iavf_process_skb_fields(struct iavf_ring *rx_ring, union iavf_32byte_rx_desc *rx_desc, struct sk_buff *skb, u8 rx_ptype)
{
  #line 1086 
  iavf_rx_hash(rx_ring,rx_desc,skb,(unsigned char)((int)rx_ptype));
  #line 1088 
  iavf_rx_checksum(rx_ring->vsi,skb,rx_desc);
  #line 1090 
  skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->queue_index));
  #line 1093 
  skb->protocol = eth_type_trans(skb,rx_ring->netdev);
  #line 1094 
  return;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static bool iavf_cleanup_headers(struct iavf_ring *rx_ring, struct sk_buff *skb)
{
  #line 1112 
  if (eth_skb_pad(skb) != 0) 
                             #line 1113 
                             return (_Bool)1;
  #line 1115 
  return (_Bool)0;
}

#line 1125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static void iavf_reuse_rx_page(struct iavf_ring *rx_ring, struct iavf_rx_buffer *old_buff)
{
  #line 1128 
  struct iavf_rx_buffer *new_buff;
  #line 1129 
  u16 nta = rx_ring->next_to_alloc;
  #line 1131 
  new_buff = rx_ring->__anonCompField_iavf_ring_205.rx_bi + (unsigned long)nta;
  #line 1134 
  nta = (u16)((int)nta + 1);
  #line 1135 
  if ((int)rx_ring->count > (int)nta) 
                                      #line 1135 
                                      rx_ring->next_to_alloc = nta; else 
                                                                    #line 1135 
                                                                    rx_ring->next_to_alloc = (unsigned short)0U;
  #line 1138 
  new_buff->dma = old_buff->dma;
  #line 1139 
  new_buff->page = old_buff->page;
  #line 1140 
  new_buff->page_offset = old_buff->page_offset;
  #line 1141 
  new_buff->pagecnt_bias = old_buff->pagecnt_bias;
  #line 1142 
  return;
}

#line 1151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static bool iavf_page_is_reusable(struct page *page)
{
  #line 1153 
  int tmp_2;
  #line 1153 
  if (page_to_nid(page) == numa_mem_id()) {
    #line 1154 
    if (page_is_pfmemalloc(page)) 
                                  #line 1153 
                                  tmp_2 = 0; else 
                                                  #line 1153 
                                                  tmp_2 = 1;
  }
  else 
       #line 1153 
       tmp_2 = 0;
  #line 1153 
  return (_Bool)(tmp_2 != 0);
}

#line 1184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static bool iavf_can_reuse_rx_page(struct iavf_rx_buffer *rx_buffer)
{
  #line 1190 
  int tmp_0;
  #line 1186 
  unsigned int pagecnt_bias = (unsigned int)rx_buffer->pagecnt_bias;
  #line 1187 
  struct page *page = rx_buffer->page;
  #line 1190 
  if (iavf_page_is_reusable(page)) 
                                   #line 1190 
                                   tmp_0 = 0; else 
                                                   #line 1190 
                                                   tmp_0 = 1;
  #line 1190 
  if ((long)tmp_0 != 0L) 
                         #line 1191 
                         return (_Bool)0;
  #line 1195 
  ;
  #line 1195 
  if ((long)((unsigned int)page_count(page) - pagecnt_bias > 1U) != 0L) 
    #line 1196 
    return (_Bool)0;
  #line 1208 
  if ((long)(pagecnt_bias == 0U) != 0L) {
    #line 1209 
    page_ref_add(page,65535);
    #line 1210 
    rx_buffer->pagecnt_bias = (unsigned short)65535U;
  }
  #line 1213 
  return (_Bool)1;
}

#line 1228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static void iavf_add_rx_frag(struct iavf_ring *rx_ring, struct iavf_rx_buffer *rx_buffer, struct sk_buff *skb, unsigned int size)
{
  #line 1234 
  unsigned int truesize = (unsigned int)((4096UL << iavf_rx_pg_order(rx_ring)) / 2UL);
  #line 1239 
  if (size == 0U) 
                  #line 1240 
                  return;
  #line 1242 
  ;
  #line 1242 
  ;
  #line 1242 
  ;
  #line 1242 
  ;
  #line 1242 
  ;
  #line 1242 
  skb_add_rx_frag(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,rx_buffer->page,(int)rx_buffer->page_offset,(int)size,truesize);
  #line 1247 
  rx_buffer->page_offset ^= truesize;
  #line 1248 
  return;
}

#line 1261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static struct iavf_rx_buffer *iavf_get_rx_buffer(struct iavf_ring *rx_ring, unsigned int size)
{
  #line 1264 
  struct iavf_rx_buffer *rx_buffer;
  #line 1266 
  if (size == 0U) 
                  #line 1267 
                  return (struct iavf_rx_buffer *)0;
  #line 1269 
  rx_buffer = rx_ring->__anonCompField_iavf_ring_205.rx_bi + (unsigned long)rx_ring->next_to_clean;
  #line 1270 
  prefetchw((void *)rx_buffer->page);
  #line 1273 
  dma_sync_single_range_for_cpu(rx_ring->dev,rx_buffer->dma,(unsigned long)rx_buffer->page_offset,(unsigned long)size,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 1280 
  rx_buffer->pagecnt_bias = (__u16)((int)rx_buffer->pagecnt_bias - 1);
  #line 1282 
  return rx_buffer;
}

#line 1295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static struct sk_buff *iavf_construct_skb(struct iavf_ring *rx_ring, struct iavf_rx_buffer *rx_buffer, unsigned int size)
{
  #line 1299 
  void *va;
  #line 1305 
  unsigned int headlen;
  #line 1306 
  struct sk_buff *skb;
  #line 1301 
  unsigned int truesize = (unsigned int)((4096UL << iavf_rx_pg_order(rx_ring)) / 2UL);
  #line 1308 
  if (rx_buffer == (struct iavf_rx_buffer *)0) 
                                               #line 1309 
                                               return (struct sk_buff *)0;
  #line 1311 
  va = lowmem_page_address(rx_buffer->page) + (unsigned long)rx_buffer->page_offset;
  #line 1312 
  __builtin_prefetch((void const *)va);
  #line 1314 
  __builtin_prefetch((void const *)(va + 64U));
  #line 1318 
  skb = __napi_alloc_skb(& (rx_ring->q_vector)->napi,256U,10784U);
  #line 1321 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 1322 
                                                return (struct sk_buff *)0;
  #line 1325 
  headlen = size;
  #line 1326 
  if (headlen > 256U) 
                      #line 1327 
                      headlen = eth_get_headlen(skb->__anonCompField_sk_buff_92.__anonCompField___anonunion_533_91.__anonCompField___anonstruct_534_90.dev,va,256U);
  #line 1330 
  ;
  #line 1330 
  ;
  #line 1330 
  memcpy(__skb_put(skb,headlen),va,(unsigned long)(headlen + 7U) & 4294967288UL);
  #line 1333 
  size -= headlen;
  #line 1334 
  if (size != 0U) {
    #line 1335 
    skb_add_rx_frag(skb,0,rx_buffer->page,(int)(rx_buffer->page_offset + headlen),(int)size,truesize);
    #line 1341 
    rx_buffer->page_offset ^= truesize;
  }
  else 
       #line 1347 
       rx_buffer->pagecnt_bias = (__u16)((int)rx_buffer->pagecnt_bias + 1);
  #line 1350 
  return skb;
}

#line 1362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static struct sk_buff *iavf_build_skb(struct iavf_ring *rx_ring, struct iavf_rx_buffer *rx_buffer, unsigned int size)
{
  #line 1366 
  void *va;
  #line 1373 
  struct sk_buff *skb;
  #line 1368 
  unsigned int truesize = (unsigned int)((4096UL << iavf_rx_pg_order(rx_ring)) / 2UL);
  #line 1375 
  if (rx_buffer == (struct iavf_rx_buffer *)0) 
                                               #line 1376 
                                               return (struct sk_buff *)0;
  #line 1378 
  va = lowmem_page_address(rx_buffer->page) + (unsigned long)rx_buffer->page_offset;
  #line 1379 
  __builtin_prefetch((void const *)va);
  #line 1381 
  __builtin_prefetch((void const *)(va + 64U));
  #line 1384 
  ;
  #line 1384 
  ;
  #line 1384 
  skb = build_skb(va + - iavf_skb_pad(),truesize);
  #line 1385 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 1386 
                                                return (struct sk_buff *)0;
  #line 1389 
  ;
  #line 1389 
  skb_reserve(skb,iavf_skb_pad());
  #line 1390 
  __skb_put(skb,size);
  #line 1394 
  rx_buffer->page_offset ^= truesize;
  #line 1399 
  return skb;
}

#line 1410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static void iavf_put_rx_buffer(struct iavf_ring *rx_ring, struct iavf_rx_buffer *rx_buffer)
{
  #line 1413 
  if (rx_buffer == (struct iavf_rx_buffer *)0) 
                                               #line 1414 
                                               return;
  #line 1416 
  if ((int)iavf_can_reuse_rx_page(rx_buffer) != 0) {
    #line 1418 
    iavf_reuse_rx_page(rx_ring,rx_buffer);
    #line 1419 
    (rx_ring->__anonCompField_iavf_ring_206.rx_stats.page_reuse_count) ++;
  }
  else {
    #line 1422 
    ;
    #line 1422 
    ;
    #line 1422 
    dma_unmap_page_attrs(rx_ring->dev,rx_buffer->dma,4096UL << iavf_rx_pg_order(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE,34UL);
    #line 1425 
    __page_frag_cache_drain(rx_buffer->page,(unsigned int)rx_buffer->pagecnt_bias);
  }
  #line 1430 
  rx_buffer->page = (struct page *)0;
  #line 1431 
  return;
}

#line 1444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static bool iavf_is_non_eop(struct iavf_ring *rx_ring, union iavf_32byte_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 1448 
  u32 ntc = (unsigned int)((int)rx_ring->next_to_clean + 1);
  #line 1451 
  if ((unsigned int)rx_ring->count > ntc) 
                                          #line 1451 
                                          ntc = ntc; else 
                                                          #line 1451 
                                                          ntc = 0U;
  #line 1452 
  rx_ring->next_to_clean = (unsigned short)ntc;
  #line 1454 
  __builtin_prefetch((void const *)((void *)((union iavf_32byte_rx_desc *)rx_ring->desc + (unsigned long)ntc)));
  #line 1458 
  if ((long)((int)iavf_test_staterr(rx_desc,2ULL) != 0) != 0L) 
                                                               #line 1459 
                                                               return (_Bool)0;
  #line 1461 
  (rx_ring->__anonCompField_iavf_ring_206.rx_stats.non_eop_descs) ++;
  #line 1463 
  return (_Bool)1;
}

#line 1478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static int iavf_clean_rx_irq(struct iavf_ring *rx_ring, int budget)
{
  #line 1482 
  unsigned int tmp;
  #line 1594 
  int tmp_7;
  #line 1480 
  unsigned int total_rx_bytes = 0U;
  #line 1480 
  unsigned int total_rx_packets = 0U;
  #line 1481 
  struct sk_buff *skb = rx_ring->skb;
  #line 1482 
  if ((int)rx_ring->next_to_clean <= (int)rx_ring->next_to_use) 
                                                                #line 1482 
                                                                tmp = (unsigned int)rx_ring->count; else 
                                                                    #line 1482 
                                                                    tmp = 0U;
  #line 1482 
  u16 cleaned_count = (unsigned short)(((tmp + (unsigned int)rx_ring->next_to_clean) - (unsigned int)rx_ring->next_to_use) + 65535U);
  #line 1483 
  bool failure = (_Bool)0;
  #line 1485 
  while ((long)(total_rx_packets < (unsigned int)budget) != 0L) {
    #line 1486 
    struct iavf_rx_buffer *rx_buffer;
    #line 1487 
    union iavf_32byte_rx_desc *rx_desc;
    #line 1488 
    unsigned int size;
    #line 1489 
    u16 vlan_tag;
    #line 1490 
    u8 rx_ptype;
    #line 1491 
    u64 qword;
    #line 1494 
    if ((unsigned int)cleaned_count > 15U) {
      #line 1495 
      int tmp_1;
      #line 1495 
      if ((int)failure != 0) 
                             #line 1495 
                             tmp_1 = 1;
      else {
        #line 1495 
        if ((int)iavf_alloc_rx_buffers(rx_ring,(unsigned short)((int)cleaned_count)) != 0) 
          #line 1495 
          tmp_1 = 1; else 
                          #line 1495 
                          tmp_1 = 0;
      }
      #line 1495 
      failure = (_Bool)(tmp_1 != 0);
      #line 1497 
      cleaned_count = (unsigned short)0U;
    }
    #line 1500 
    rx_desc = (union iavf_32byte_rx_desc *)rx_ring->desc + (unsigned long)rx_ring->next_to_clean;
    #line 1507 
    qword = rx_desc->wb.qword1.status_error_len;
    #line 1508 
    ldv_inline_asm();
    #line 1515 
    if (! iavf_test_staterr(rx_desc,1ULL)) 
                                           #line 1516 
                                           break;
    #line 1518 
    size = (unsigned int)(qword >> 38) & 16383U;
    #line 1521 
    trace_iavf_clean_rx_irq(rx_ring,rx_desc,skb);
    #line 1522 
    rx_buffer = iavf_get_rx_buffer(rx_ring,size);
    #line 1525 
    if (skb != (struct sk_buff *)0) 
                                    #line 1526 
                                    iavf_add_rx_frag(rx_ring,rx_buffer,skb,size);
    else {
      #line 1527 
      if ((int)ring_uses_build_skb(rx_ring) != 0) 
                                                  #line 1528 
                                                  skb = iavf_build_skb(rx_ring,rx_buffer,size); else 
                                                                    #line 1530 
                                                                    skb = iavf_construct_skb(rx_ring,rx_buffer,size);
    }
    #line 1533 
    if (skb == (struct sk_buff *)0) {
      #line 1534 
      (rx_ring->__anonCompField_iavf_ring_206.rx_stats.alloc_buff_failed) ++;
      #line 1535 
      if (rx_buffer != (struct iavf_rx_buffer *)0) 
                                                   #line 1536 
                                                   rx_buffer->pagecnt_bias = (__u16)((int)rx_buffer->pagecnt_bias + 1);
      #line 1537 
      break;
    }
    #line 1540 
    iavf_put_rx_buffer(rx_ring,rx_buffer);
    #line 1541 
    cleaned_count = (u16)((int)cleaned_count + 1);
    #line 1543 
    if ((int)iavf_is_non_eop(rx_ring,rx_desc,skb) != 0) 
                                                        #line 1544 
                                                        continue;
    #line 1551 
    if ((long)((int)iavf_test_staterr(rx_desc,524288ULL) != 0) != 0L) {
      #line 1552 
      dev_kfree_skb_any(skb);
      #line 1553 
      skb = (struct sk_buff *)0;
      #line 1554 
      continue;
    }
    #line 1557 
    if ((int)iavf_cleanup_headers(rx_ring,skb) != 0) {
      #line 1558 
      skb = (struct sk_buff *)0;
      #line 1559 
      continue;
    }
    #line 1563 
    total_rx_bytes = skb->len + total_rx_bytes;
    #line 1565 
    qword = rx_desc->wb.qword1.status_error_len;
    #line 1566 
    rx_ptype = (unsigned char)(qword >> 30);
    #line 1570 
    iavf_process_skb_fields(rx_ring,rx_desc,skb,(unsigned char)((int)rx_ptype));
    #line 1573 
    if ((qword & 4ULL) != 0ULL) 
                                #line 1573 
                                vlan_tag = rx_desc->wb.qword0.lo_dword.l2tag1; else 
                                                                    #line 1573 
                                                                    vlan_tag = (unsigned short)0U;
    #line 1576 
    trace_iavf_clean_rx_irq_rx(rx_ring,rx_desc,skb);
    #line 1577 
    iavf_receive_skb(rx_ring,skb,(unsigned short)((int)vlan_tag));
    #line 1578 
    skb = (struct sk_buff *)0;
    #line 1581 
    total_rx_packets ++;
  }
  #line 1584 
  rx_ring->skb = skb;
  #line 1586 
  u64_stats_init(& rx_ring->syncp);
  #line 1587 
  rx_ring->stats.packets += (unsigned long long)total_rx_packets;
  #line 1588 
  rx_ring->stats.bytes += (unsigned long long)total_rx_bytes;
  #line 1589 
  u64_stats_init(& rx_ring->syncp);
  #line 1590 
  (rx_ring->q_vector)->rx.total_packets += total_rx_packets;
  #line 1591 
  (rx_ring->q_vector)->rx.total_bytes += total_rx_bytes;
  #line 1594 
  if ((int)failure != 0) 
                         #line 1594 
                         tmp_7 = budget; else 
                                              #line 1594 
                                              tmp_7 = (int)total_rx_packets;
  #line 1594 
  return tmp_7;
}

#line 1597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static u32 iavf_buildreg_itr(int type, u16 itr)
{
  #line 1599 
  u32 val;
  #line 1616 
  itr = (unsigned short)((unsigned int)itr & 8190U);
  #line 1618 
  val = ((unsigned int)(type << 3) | (unsigned int)((int)itr << 4)) | 1U;
  #line 1622 
  return val;
}

#line 1643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static void iavf_update_enable_itr(struct iavf_vsi *vsi, struct iavf_q_vector *q_vector)
{
  #line 1647 
  u32 intval;
  #line 1646 
  struct iavf_hw *hw = & (vsi->back)->hw;
  #line 1650 
  iavf_update_itr(q_vector,& q_vector->tx);
  #line 1651 
  iavf_update_itr(q_vector,& q_vector->rx);
  #line 1661 
  if ((int)q_vector->rx.target_itr < (int)q_vector->rx.current_itr) {
    #line 1663 
    intval = iavf_buildreg_itr(0,(unsigned short)((int)q_vector->rx.target_itr));
    #line 1665 
    q_vector->rx.current_itr = q_vector->rx.target_itr;
    #line 1666 
    q_vector->itr_countdown = (unsigned char)3U;
  }
  else 
    #line 1667 
    if ((int)q_vector->tx.target_itr < (int)q_vector->tx.current_itr || (int)q_vector->rx.target_itr - (int)q_vector->rx.current_itr < (int)q_vector->tx.target_itr - (int)q_vector->tx.current_itr) {
      #line 1673 
      intval = iavf_buildreg_itr(1,(unsigned short)((int)q_vector->tx.target_itr));
      #line 1675 
      q_vector->tx.current_itr = q_vector->tx.target_itr;
      #line 1676 
      q_vector->itr_countdown = (unsigned char)3U;
    }
    else 
      #line 1677 
      if ((int)q_vector->rx.current_itr != (int)q_vector->rx.target_itr) {
        #line 1679 
        intval = iavf_buildreg_itr(0,(unsigned short)((int)q_vector->rx.target_itr));
        #line 1681 
        q_vector->rx.current_itr = q_vector->rx.target_itr;
        #line 1682 
        q_vector->itr_countdown = (unsigned char)3U;
      }
      else {
        #line 1685 
        intval = iavf_buildreg_itr(3,(unsigned short)0);
        #line 1686 
        if ((unsigned int)q_vector->itr_countdown != 0U) 
                                                         #line 1687 
                                                         q_vector->itr_countdown = (u8)((int)q_vector->itr_countdown - 1);
      }
  #line 1690 
  if (! test_bit(0L,(unsigned long *)(& vsi->state))) 
                                                      #line 1691 
                                                      writel(intval,(void *)(hw->hw_addr + (unsigned long)(((int)q_vector->reg_idx + 3584) * 4)));
  #line 1692 
  return;
}

#line 1703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
int iavf_napi_poll(struct napi_struct *napi, int budget)
{
  #line 1738 
  int __UNIQUE_ID___x554;
  #line 1738 
  int tmp_2;
  #line 1706 
  void *__mptr;
  #line 1787 
  int __UNIQUE_ID___x556;
  #line 1787 
  int tmp_13;
  #line 1708 
  struct iavf_ring *ring;
  #line 1711 
  int budget_per_ring;
  #line 1706 
  __mptr = (void *)napi;
  #line 1705 
  struct iavf_q_vector *q_vector = ((struct iavf_q_vector *)(__mptr + 18446744073709551600U));
  #line 1707 
  struct iavf_vsi *vsi = q_vector->vsi;
  #line 1709 
  bool clean_complete = (_Bool)1;
  #line 1710 
  bool arm_wb = (_Bool)0;
  #line 1712 
  int work_done = 0;
  #line 1714 
  if ((int)test_bit(0L,(unsigned long *)(& vsi->state)) != 0) {
    #line 1715 
    napi_complete(napi);
    #line 1716 
    return 0;
  }
  #line 1722 
  ring = q_vector->tx.ring;
  #line 1722 
  while (ring != (struct iavf_ring *)0) {
    {
      #line 1723 
      if (! iavf_clean_tx_irq(vsi,ring,budget)) {
        #line 1724 
        clean_complete = (_Bool)0;
        #line 1725 
        goto __Cont;
      }
      #line 1727 
      arm_wb = (_Bool)(((int)ring->arm_wb | (int)arm_wb) != 0);
      #line 1728 
      ring->arm_wb = (_Bool)0;
    }
    #line 1722 
    __Cont: 
            #line 1722 
    ring = ring->next;
  }
  #line 1732 
  if (budget <= 0) 
                   #line 1733 
                   goto tx_only;
  {
    #line 1738 
    __UNIQUE_ID___x554 = budget / (int)q_vector->num_ringpairs;
    #line 1738 
    int __UNIQUE_ID___y555 = 1;
    #line 1738 
    if (__UNIQUE_ID___x554 > __UNIQUE_ID___y555) 
                                                 #line 1738 
                                                 tmp_2 = __UNIQUE_ID___x554; else 
                                                                    #line 1738 
                                                                    tmp_2 = __UNIQUE_ID___y555;
    }
  #line 1738 
  budget_per_ring = tmp_2;
  #line 1740 
  ring = q_vector->rx.ring;
  #line 1740 
  while (ring != (struct iavf_ring *)0) {
    {
      #line 1741 
      int cleaned = iavf_clean_rx_irq(ring,budget_per_ring);
      #line 1743 
      work_done += cleaned;
      #line 1745 
      if (cleaned >= budget_per_ring) 
                                      #line 1746 
                                      clean_complete = (_Bool)0;
    }
    #line 1740 
    ring = ring->next;
  }
  #line 1750 
  if (! clean_complete) {
    #line 1751 
    int pscr_ret__;
    #line 1751 
    __this_cpu_preempt_check((char *)"read");
    {
      #line 1751 
      void *__vpp_verify = (void *)0;
      #line 1751 
      void *tmp_5 = __vpp_verify;
    }
    #line 1751 
    switch (4UL) {
      #line 1751 
      int pfo_ret___1;
      #line 1751 
      int pfo_ret___2;
      #line 1751 
      int pfo_ret__;
      #line 1751 
      int pfo_ret___0;
      #line 1751 
      case (unsigned long)1: 
                             #line 1751 
      ;
      #line 1751 
      switch (4UL) {
        #line 1751 
        case (unsigned long)1: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        case (unsigned long)2: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        case (unsigned long)4: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        case (unsigned long)8: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        default: 
                 #line 1751 
        ;
        #line 1751 
        __bad_percpu_size();
      }
      #line 1751 
      pscr_ret__ = pfo_ret__;
      #line 1751 
      break;
      #line 1751 
      case (unsigned long)2: 
                             #line 1751 
      ;
      #line 1751 
      switch (4UL) {
        #line 1751 
        case (unsigned long)1: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        case (unsigned long)2: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        case (unsigned long)4: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        case (unsigned long)8: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        default: 
                 #line 1751 
        ;
        #line 1751 
        __bad_percpu_size();
      }
      #line 1751 
      pscr_ret__ = pfo_ret___0;
      #line 1751 
      break;
      #line 1751 
      case (unsigned long)4: 
                             #line 1751 
      ;
      #line 1751 
      switch (4UL) {
        #line 1751 
        case (unsigned long)1: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        case (unsigned long)2: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        case (unsigned long)4: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        case (unsigned long)8: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        default: 
                 #line 1751 
        ;
        #line 1751 
        __bad_percpu_size();
      }
      #line 1751 
      pscr_ret__ = pfo_ret___1;
      #line 1751 
      break;
      #line 1751 
      case (unsigned long)8: 
                             #line 1751 
      ;
      #line 1751 
      switch (4UL) {
        #line 1751 
        case (unsigned long)1: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        case (unsigned long)2: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        case (unsigned long)4: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        case (unsigned long)8: 
                               #line 1751 
        ;
        #line 1752 
        ldv_inline_asm();
        #line 1751 
        break;
        #line 1751 
        default: 
                 #line 1751 
        ;
        #line 1751 
        __bad_percpu_size();
      }
      #line 1751 
      pscr_ret__ = pfo_ret___2;
      #line 1751 
      break;
      #line 1751 
      default: 
               #line 1751 
      ;
      #line 1751 
      __bad_size_call_parameter();
      #line 1751 
      break;
    }
    #line 1751 
    int cpu_id = pscr_ret__;
    #line 1760 
    if (cpumask_test_cpu(cpu_id,& q_vector->affinity_mask) == 0) {
      #line 1762 
      napi_complete_done(napi,work_done);
      #line 1765 
      iavf_force_wb(vsi,q_vector);
      #line 1768 
      return budget + -1;
    }
    #line 1770 
    tx_only: 
             #line 1770 
    ;
    #line 1771 
    if ((int)arm_wb != 0) {
      #line 1772 
      ((q_vector->tx.ring)->__anonCompField_iavf_ring_206.tx_stats.tx_force_wb) ++;
      #line 1773 
      iavf_enable_wb_on_itr(vsi,q_vector);
    }
    #line 1775 
    return budget;
  }
  #line 1778 
  if (((unsigned long)(vsi->back)->flags & 1UL) != 0UL) 
                                                        #line 1779 
                                                        q_vector->arm_wb_state = (_Bool)0;
  #line 1784 
  if ((long)((int)napi_complete_done(napi,work_done) != 0) != 0L) 
                                                                  #line 1785 
                                                                  iavf_update_enable_itr(vsi,q_vector);
  {
    #line 1787 
    __UNIQUE_ID___x556 = work_done;
    #line 1787 
    int __UNIQUE_ID___y557 = budget + -1;
    #line 1787 
    if (__UNIQUE_ID___x556 < __UNIQUE_ID___y557) 
                                                 #line 1787 
                                                 tmp_13 = __UNIQUE_ID___x556; else 
                                                                    #line 1787 
                                                                    tmp_13 = __UNIQUE_ID___y557;
    }
  #line 1787 
  return tmp_13;
}

#line 1802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static int iavf_tx_prepare_vlan_flags(struct sk_buff *skb, struct iavf_ring *tx_ring, u32 *flags)
{
  #line 1806 
  __be16 protocol = skb->protocol;
  #line 1807 
  u32 tx_flags = 0U;
  #line 1809 
  if ((unsigned int)protocol == 129U && ((tx_ring->netdev)->features & 128ULL) == 0ULL) {
    #line 1818 
    skb->protocol = vlan_get_protocol(skb);
    #line 1819 
    goto out;
  }
  #line 1823 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 1824 
    tx_flags = (unsigned int)((int)skb->vlan_tci << 16) | tx_flags;
    #line 1825 
    tx_flags |= 2U;
  }
  else 
    #line 1827 
    if ((unsigned int)protocol == 129U) {
      #line 1828 
      struct vlan_hdr *vhdr;
      #line 1828 
      struct vlan_hdr _vhdr;
      #line 1830 
      vhdr = (struct vlan_hdr *)skb_header_pointer(skb,14,4,(void *)(& _vhdr));
      #line 1831 
      if (vhdr == (struct vlan_hdr *)0) 
                                        #line 1832 
                                        return -22;
      #line 1834 
      protocol = vhdr->h_vlan_encapsulated_proto;
      #line 1835 
      tx_flags = (unsigned int)((int)__builtin_bswap16((unsigned short)((int)vhdr->h_vlan_TCI)) << 16) | tx_flags;
      #line 1836 
      tx_flags |= 4U;
    }
  #line 1839 
  out: 
       #line 1839 
  ;
  #line 1840 
  *flags = tx_flags;
  #line 1841 
  return 0;
}

#line 1852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static int iavf_tso(struct iavf_tx_buffer *first, u8 *hdr_len, u64 *cd_type_cmd_tso_mss)
{
  #line 1856 
  u64 cd_cmd;
  #line 1856 
  u64 cd_tso_len;
  #line 1856 
  u64 cd_mss;
  #line 1861 
  union __anonunion_ip_6230 ip;
  #line 1866 
  union __anonunion_l4_6231 l4;
  #line 1867 
  u32 paylen;
  #line 1867 
  u32 l4_offset;
  #line 1868 
  u16 gso_segs;
  #line 1868 
  u16 gso_size;
  #line 1869 
  int err;
  #line 1855 
  struct sk_buff *skb = first->__anonCompField_iavf_tx_buffer_204.skb;
  #line 1871 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 1872 
                                          return 0;
  #line 1874 
  if (! skb_is_gso(skb)) 
                         #line 1875 
                         return 0;
  #line 1877 
  err = skb_cow_head(skb,0U);
  #line 1878 
  if (err < 0) 
               #line 1879 
               return err;
  #line 1881 
  ip.hdr = skb_network_header(skb);
  #line 1882 
  l4.hdr = skb_transport_header(skb);
  #line 1885 
  if ((unsigned int)(ip.v4)->version == 4U) {
    #line 1886 
    (ip.v4)->tot_len = (unsigned short)0U;
    #line 1887 
    (ip.v4)->check = (unsigned short)0U;
  }
  else 
       #line 1889 
       (ip.v6)->payload_len = (unsigned short)0U;
  #line 1892 
  ;
  #line 1892 
  if ((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 4032U) != 0U) {
    #line 1898 
    ;
    #line 1898 
    if ((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 4096U) == 0U) {
      #line 1898 
      ;
      #line 1898 
      if ((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 2048U) != 0U) {
        #line 1900 
        (l4.udp)->len = (unsigned short)0U;
        #line 1903 
        l4_offset = (unsigned int)(l4.hdr - skb->data);
        #line 1906 
        paylen = skb->len - l4_offset;
        #line 1907 
        ;
        #line 1907 
        csum_replace_by_diff(& (l4.udp)->check,__builtin_bswap32(paylen));
      }
    }
    #line 1912 
    ip.hdr = skb_inner_network_header(skb);
    #line 1913 
    l4.hdr = skb_inner_transport_header(skb);
    #line 1916 
    if ((unsigned int)(ip.v4)->version == 4U) {
      #line 1917 
      (ip.v4)->tot_len = (unsigned short)0U;
      #line 1918 
      (ip.v4)->check = (unsigned short)0U;
    }
    else 
         #line 1920 
         (ip.v6)->payload_len = (unsigned short)0U;
  }
  #line 1925 
  l4_offset = (unsigned int)(l4.hdr - skb->data);
  #line 1928 
  paylen = skb->len - l4_offset;
  #line 1929 
  ;
  #line 1929 
  csum_replace_by_diff(& (l4.tcp)->check,__builtin_bswap32(paylen));
  #line 1932 
  *hdr_len = (unsigned char)((unsigned int)((unsigned char)(l4.tcp)->doff) * 4U + (unsigned int)((unsigned char)l4_offset));
  #line 1935 
  gso_size = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 1936 
  gso_segs = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs;
  #line 1939 
  first->gso_segs = gso_segs;
  #line 1940 
  first->bytecount += (unsigned int)(((int)first->gso_segs + -1) * (int)*hdr_len);
  #line 1943 
  cd_cmd = 1ULL;
  #line 1944 
  cd_tso_len = (unsigned long long)(skb->len - (unsigned int)*hdr_len);
  #line 1945 
  cd_mss = (unsigned long long)gso_size;
  #line 1946 
  *cd_type_cmd_tso_mss |= ((cd_cmd << 4) | (cd_tso_len << 30)) | (cd_mss << 50);
  #line 1949 
  return 1;
}

#line 1961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static int iavf_tx_enable_csum(struct sk_buff *skb, u32 *tx_flags, u32 *td_cmd, u32 *td_offset, struct iavf_ring *tx_ring, u32 *cd_tunneling)
{
  #line 1970 
  union __anonunion_ip_6234 ip;
  #line 1975 
  union __anonunion_l4_6235 l4;
  #line 1976 
  unsigned char *exthdr;
  #line 1977 
  u32 offset;
  #line 1978 
  __be16 frag_off;
  #line 1977 
  u32 cmd = 0U;
  #line 1979 
  u8 l4_proto = (unsigned char)0U;
  #line 1981 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 1982 
                                          return 0;
  #line 1984 
  ip.hdr = skb_network_header(skb);
  #line 1985 
  l4.hdr = skb_transport_header(skb);
  #line 1988 
  offset = (unsigned int)((ip.hdr - skb->data) / 2L);
  #line 1990 
  if ((unsigned int)skb->encapsulation != 0U) {
    #line 1991 
    u32 tunnel = 0U;
    #line 1993 
    if (((unsigned long)*tx_flags & 16UL) != 0UL) {
      #line 1994 
      unsigned int tmp;
      #line 1994 
      if (((unsigned long)*tx_flags & 8UL) != 0UL) 
                                                   #line 1994 
                                                   tmp = 3U; else 
                                                                  #line 1994 
                                                                  tmp = 2U;
      #line 1994 
      tunnel = tmp | tunnel;
      #line 1998 
      l4_proto = (ip.v4)->protocol;
    }
    else 
      #line 1999 
      if (((unsigned long)*tx_flags & 32UL) != 0UL) {
        #line 2000 
        tunnel |= 1U;
        #line 2002 
        exthdr = ip.hdr + 40UL;
        #line 2003 
        l4_proto = (ip.v6)->nexthdr;
        #line 2004 
        if (l4.hdr != exthdr) 
                              #line 2005 
                              ipv6_skip_exthdr(skb,(int)(exthdr - skb->data),& l4_proto,& frag_off);
      }
    #line 2010 
    switch ((int)l4_proto) {
      #line 2011 
      case 17: 
               #line 2011 
      ;
      #line 2012 
      tunnel |= 512U;
      #line 2013 
      *tx_flags |= 1024U;
      #line 2014 
      break;
      #line 2015 
      case 47: 
               #line 2015 
      ;
      #line 2016 
      tunnel |= 1024U;
      #line 2017 
      *tx_flags |= 1024U;
      #line 2018 
      break;
      #line 2019 
      case 4: 
              #line 2019 
      ;
      #line 2020 
      case 41: 
               #line 2020 
      ;
      #line 2021 
      *tx_flags |= 1024U;
      #line 2022 
      l4.hdr = skb_inner_network_header(skb);
      #line 2023 
      break;
      #line 2024 
      default: 
               #line 2024 
      ;
      #line 2025 
      if (((unsigned long)*tx_flags & 8UL) != 0UL) 
                                                   #line 2026 
                                                   return -1;
      #line 2028 
      skb_checksum_help(skb);
      #line 2029 
      return 0;
    }
    #line 2033 
    tunnel = (unsigned int)(((l4.hdr - ip.hdr) / 4L << 2) | (long)tunnel);
    #line 2037 
    ip.hdr = skb_inner_network_header(skb);
    #line 2040 
    tunnel = (unsigned int)(((ip.hdr - l4.hdr) / 2L << 12) | (long)tunnel);
    #line 2044 
    if (((unsigned long)*tx_flags & 8UL) != 0UL) {
      #line 2044 
      ;
      #line 2044 
      if ((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 4096U) == 0U) {
        #line 2045 
        ;
        #line 2045 
        if ((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 2048U) != 0U) 
          #line 2047 
          tunnel |= 8388608U;
      }
    }
    #line 2050 
    *cd_tunneling |= tunnel;
    #line 2053 
    l4.hdr = skb_inner_transport_header(skb);
    #line 2054 
    l4_proto = (unsigned char)0U;
    #line 2057 
    *tx_flags &= 4294967247U;
    #line 2058 
    if ((unsigned int)(ip.v4)->version == 4U) 
                                              #line 2059 
                                              *tx_flags |= 16U;
    #line 2060 
    if ((unsigned int)(ip.v6)->version == 6U) 
                                              #line 2061 
                                              *tx_flags |= 32U;
  }
  #line 2065 
  if (((unsigned long)*tx_flags & 16UL) != 0UL) {
    #line 2070 
    unsigned int tmp_2;
    #line 2066 
    l4_proto = (ip.v4)->protocol;
    #line 2070 
    if (((unsigned long)*tx_flags & 8UL) != 0UL) 
                                                 #line 2070 
                                                 tmp_2 = 96U; else 
                                                                   #line 2070 
                                                                   tmp_2 = 64U;
    #line 2070 
    cmd = tmp_2 | cmd;
  }
  else 
    #line 2073 
    if (((unsigned long)*tx_flags & 32UL) != 0UL) {
      #line 2074 
      cmd |= 32U;
      #line 2076 
      exthdr = ip.hdr + 40UL;
      #line 2077 
      l4_proto = (ip.v6)->nexthdr;
      #line 2078 
      if (l4.hdr != exthdr) 
                            #line 2079 
                            ipv6_skip_exthdr(skb,(int)(exthdr - skb->data),& l4_proto,& frag_off);
    }
  #line 2084 
  offset = (unsigned int)(((l4.hdr - ip.hdr) / 4L << 7) | (long)offset);
  #line 2087 
  switch ((int)l4_proto) {
    #line 2088 
    case 6: 
            #line 2088 
    ;
    #line 2090 
    cmd |= 256U;
    #line 2091 
    offset = (unsigned int)((int)(l4.tcp)->doff << 14) | offset;
    #line 2092 
    break;
    #line 2093 
    case 132: 
              #line 2093 
    ;
    #line 2095 
    cmd |= 512U;
    #line 2096 
    offset |= 49152U;
    #line 2098 
    break;
    #line 2099 
    case 17: 
             #line 2099 
    ;
    #line 2101 
    cmd |= 768U;
    #line 2102 
    offset |= 32768U;
    #line 2104 
    break;
    #line 2105 
    default: 
             #line 2105 
    ;
    #line 2106 
    if (((unsigned long)*tx_flags & 8UL) != 0UL) 
                                                 #line 2107 
                                                 return -1;
    #line 2108 
    skb_checksum_help(skb);
    #line 2109 
    return 0;
  }
  #line 2112 
  *td_cmd |= cmd;
  #line 2113 
  *td_offset |= offset;
  #line 2115 
  return 1;
}

#line 2125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static void iavf_create_tx_ctx(struct iavf_ring *tx_ring, u64 cd_type_cmd_tso_mss, u32 cd_tunneling, u32 cd_l2tag2)
{
  #line 2129 
  struct iavf_tx_context_desc *context_desc;
  #line 2130 
  int i = (int)tx_ring->next_to_use;
  #line 2132 
  if ((cd_type_cmd_tso_mss == 1ULL && cd_tunneling == 0U) && cd_l2tag2 == 0U) 
    #line 2134 
    return;
  #line 2137 
  context_desc = (struct iavf_tx_context_desc *)tx_ring->desc + (unsigned long)i;
  #line 2139 
  i ++;
  #line 2140 
  if ((int)tx_ring->count > i) 
                               #line 2140 
                               tx_ring->next_to_use = (unsigned short)i; else 
                                                                    #line 2140 
                                                                    tx_ring->next_to_use = (unsigned short)0U;
  #line 2143 
  context_desc->tunneling_params = cd_tunneling;
  #line 2144 
  context_desc->l2tag2 = (unsigned short)cd_l2tag2;
  #line 2145 
  context_desc->rsvd = (unsigned short)0U;
  #line 2146 
  context_desc->type_cmd_tso_mss = cd_type_cmd_tso_mss;
  #line 2147 
  return;
}

#line 2162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
bool __iavf_chk_linearize(struct sk_buff *skb)
{
  #line 2164 
  skb_frag_t *frag;
  #line 2164 
  skb_frag_t *stale;
  #line 2165 
  int nr_frags;
  #line 2165 
  int sum;
  #line 2187 
  skb_frag_t *tmp_2;
  #line 2188 
  skb_frag_t *tmp_4;
  #line 2189 
  skb_frag_t *tmp_6;
  #line 2190 
  skb_frag_t *tmp_8;
  #line 2191 
  skb_frag_t *tmp_10;
  #line 2168 
  nr_frags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 2169 
  if (nr_frags <= 6) 
                     #line 2170 
                     return (_Bool)0;
  #line 2175 
  nr_frags += -6;
  #line 2176 
  frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 2184 
  sum = 1 - (int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 2187 
  tmp_2 = frag;
  #line 2187 
  frag ++;
  #line 2187 
  ;
  #line 2187 
  sum = (int)(skb_frag_size(tmp_2) + (unsigned int)sum);
  #line 2188 
  tmp_4 = frag;
  #line 2188 
  frag ++;
  #line 2188 
  ;
  #line 2188 
  sum = (int)(skb_frag_size(tmp_4) + (unsigned int)sum);
  #line 2189 
  tmp_6 = frag;
  #line 2189 
  frag ++;
  #line 2189 
  ;
  #line 2189 
  sum = (int)(skb_frag_size(tmp_6) + (unsigned int)sum);
  #line 2190 
  tmp_8 = frag;
  #line 2190 
  frag ++;
  #line 2190 
  ;
  #line 2190 
  sum = (int)(skb_frag_size(tmp_8) + (unsigned int)sum);
  #line 2191 
  tmp_10 = frag;
  #line 2191 
  frag ++;
  #line 2191 
  ;
  #line 2191 
  sum = (int)(skb_frag_size(tmp_10) + (unsigned int)sum);
  #line 2196 
  stale = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 2196 
  while (1) {
    {
      #line 2199 
      skb_frag_t *tmp_14;
      #line 2224 
      int tmp_17;
      #line 2197 
      int stale_size = (int)skb_frag_size(stale);
      #line 2199 
      tmp_14 = frag;
      #line 2199 
      frag ++;
      #line 2199 
      ;
      #line 2199 
      sum = (int)(skb_frag_size(tmp_14) + (unsigned int)sum);
      #line 2207 
      if (stale_size > 16383) {
        #line 2208 
        int align_pad = (int)(- skb_frag_off(stale)) & 4095;
        #line 2211 
        sum -= align_pad;
        #line 2212 
        stale_size -= align_pad;
        #line 2214 
        while (1) {
          #line 2215 
          sum += -12288;
          #line 2216 
          stale_size += -12288;
          #line 2217 
          if (! (stale_size > 16383)) 
                                      #line 2214 
                                      break;
        }
      }
      #line 2221 
      if (sum < 0) 
                   #line 2222 
                   return (_Bool)1;
      #line 2224 
      tmp_17 = nr_frags;
      #line 2224 
      nr_frags --;
      #line 2224 
      ;
      #line 2224 
      if (tmp_17 == 0) 
                       #line 2225 
                       break;
      #line 2227 
      sum -= stale_size;
    }
    #line 2196 
    stale ++;
  }
  #line 2230 
  return (_Bool)0;
}

#line 2240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
int __iavf_maybe_stop_tx(struct iavf_ring *tx_ring, int size)
{
  #line 2247 
  int tmp;
  #line 2242 
  netif_stop_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
  #line 2243 
  ldv_inline_asm();
  #line 2247 
  if ((int)tx_ring->next_to_clean <= (int)tx_ring->next_to_use) 
                                                                #line 2247 
                                                                tmp = (int)tx_ring->count; else 
                                                                    #line 2247 
                                                                    tmp = 0;
  #line 2247 
  ;
  #line 2247 
  if ((long)((tmp + (int)tx_ring->next_to_clean) - (int)tx_ring->next_to_use <= size) != 0L) 
    #line 2248 
    return -16;
  #line 2251 
  netif_start_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
  #line 2252 
  (tx_ring->__anonCompField_iavf_ring_206.tx_stats.restart_queue) ++;
  #line 2253 
  return 0;
}

#line 2266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
__inline static void iavf_tx_map(struct iavf_ring *tx_ring, struct sk_buff *skb, struct iavf_tx_buffer *first, u32 tx_flags, u8 hdr_len, u32 td_cmd, u32 td_offset)
{
  #line 2272 
  skb_frag_t *frag;
  #line 2273 
  struct iavf_tx_buffer *tx_bi;
  #line 2274 
  struct iavf_tx_desc *tx_desc;
  #line 2277 
  dma_addr_t dma;
  #line 2270 
  unsigned int data_len = skb->data_len;
  #line 2271 
  unsigned int size = skb_headlen(skb);
  #line 2275 
  u16 i = tx_ring->next_to_use;
  #line 2276 
  u32 td_tag = 0U;
  #line 2279 
  if (((unsigned long)tx_flags & 2UL) != 0UL) {
    #line 2280 
    td_cmd |= 8U;
    #line 2281 
    td_tag = tx_flags >> 16;
  }
  #line 2285 
  first->tx_flags = tx_flags;
  #line 2287 
  dma = dma_map_single_attrs(tx_ring->dev,(void *)skb->data,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 2289 
  tx_desc = (struct iavf_tx_desc *)tx_ring->desc + (unsigned long)i;
  #line 2290 
  tx_bi = first;
  #line 2292 
  frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 2292 
  while (1) {
    {
      #line 2293 
      unsigned int max_data = 12288U;
      #line 2295 
      if (dma_mapping_error(tx_ring->dev,dma) != 0) 
                                                    #line 2296 
                                                    goto dma_error;
      #line 2299 
      tx_bi->len = size;
      #line 2300 
      tx_bi->dma = dma;
      #line 2303 
      max_data = (- ((unsigned int)dma) & 4095U) + max_data;
      #line 2304 
      tx_desc->buffer_addr = dma;
      #line 2306 
      while ((long)(size > 16383U) != 0L) {
        #line 2307 
        tx_desc->cmd_type_offset_bsz = build_ctob(td_cmd,td_offset,max_data,td_tag);
        #line 2311 
        tx_desc ++;
        #line 2312 
        i = (u16)((int)i + 1);
        #line 2314 
        if ((int)tx_ring->count == (int)i) {
          #line 2315 
          tx_desc = (struct iavf_tx_desc *)tx_ring->desc;
          #line 2316 
          i = (unsigned short)0U;
        }
        #line 2319 
        dma = (unsigned long long)max_data + dma;
        #line 2320 
        size -= max_data;
        #line 2322 
        max_data = 12288U;
        #line 2323 
        tx_desc->buffer_addr = dma;
      }
      #line 2326 
      if ((long)(data_len == 0U) != 0L) 
                                        #line 2327 
                                        break;
      #line 2329 
      tx_desc->cmd_type_offset_bsz = build_ctob(td_cmd,td_offset,size,td_tag);
      #line 2332 
      tx_desc ++;
      #line 2333 
      i = (u16)((int)i + 1);
      #line 2335 
      if ((int)tx_ring->count == (int)i) {
        #line 2336 
        tx_desc = (struct iavf_tx_desc *)tx_ring->desc;
        #line 2337 
        i = (unsigned short)0U;
      }
      #line 2340 
      size = skb_frag_size(frag);
      #line 2341 
      data_len -= size;
      #line 2343 
      dma = skb_frag_dma_map(tx_ring->dev,frag,0UL,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
      #line 2346 
      tx_bi = tx_ring->__anonCompField_iavf_ring_205.tx_bi + (unsigned long)i;
    }
    #line 2292 
    frag ++;
  }
  #line 2349 
  ;
  #line 2349 
  netdev_tx_sent_queue(txring_txq(tx_ring),first->bytecount);
  #line 2351 
  i = (u16)((int)i + 1);
  #line 2352 
  if ((int)tx_ring->count == (int)i) 
                                     #line 2353 
                                     i = (unsigned short)0U;
  #line 2355 
  tx_ring->next_to_use = i;
  #line 2357 
  iavf_maybe_stop_tx(tx_ring,23);
  #line 2360 
  td_cmd |= 3U;
  #line 2361 
  tx_desc->cmd_type_offset_bsz = build_ctob(td_cmd,td_offset,size,td_tag);
  #line 2364 
  skb_tx_timestamp(skb);
  #line 2365 
  ldv_inline_asm();
  #line 2375 
  first->next_to_watch = tx_desc;
  #line 2378 
  if ((int)netif_xmit_stopped(txring_txq(tx_ring)) != 0) 
                                                         #line 2379 
                                                         writel((unsigned int)i,(void *)tx_ring->tail);
  else {
    #line 2378 
    if (! netdev_xmit_more()) 
                              #line 2379 
                              writel((unsigned int)i,(void *)tx_ring->tail);
  }
  #line 2382 
  return;
  #line 2384 
  dma_error: 
             #line 2384 
  ;
  #line 2385 
  _dev_info(tx_ring->dev,(char *)"TX DMA map failed\n");
  #line 2388 
  while (1) {
    #line 2389 
    tx_bi = tx_ring->__anonCompField_iavf_ring_205.tx_bi + (unsigned long)i;
    #line 2390 
    iavf_unmap_and_free_tx_resource(tx_ring,tx_bi);
    #line 2391 
    if (tx_bi == first) 
                        #line 2392 
                        break;
    #line 2393 
    if ((unsigned int)i == 0U) 
                               #line 2394 
                               i = tx_ring->count;
    #line 2395 
    i = (u16)((int)i - 1);
  }
  #line 2398 
  tx_ring->next_to_use = i;
  #line 2399 
  return;
}

#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
static netdev_tx_t iavf_xmit_frame_ring(struct sk_buff *skb, struct iavf_ring *tx_ring)
{
  #line 2413 
  struct iavf_tx_buffer *first;
  #line 2416 
  __be16 protocol;
  #line 2419 
  int tso;
  #line 2419 
  int count;
  #line 2411 
  u64 cd_type_cmd_tso_mss = 1ULL;
  #line 2412 
  u32 cd_tunneling = 0U;
  #line 2412 
  u32 cd_l2tag2 = 0U;
  #line 2414 
  u32 td_offset = 0U;
  #line 2415 
  u32 tx_flags = 0U;
  #line 2417 
  u32 td_cmd = 0U;
  #line 2418 
  u8 hdr_len = (unsigned char)0U;
  #line 2422 
  __builtin_prefetch((void const *)((void *)skb->data));
  #line 2424 
  trace_iavf_xmit_frame_ring(skb,tx_ring);
  #line 2426 
  count = iavf_xmit_descriptor_count(skb);
  #line 2427 
  if ((int)iavf_chk_linearize(skb,count) != 0) {
    #line 2428 
    if (__skb_linearize(skb) != 0) {
      #line 2429 
      dev_kfree_skb_any(skb);
      #line 2430 
      return NETDEV_TX_OK;
    }
    #line 2432 
    count = (int)iavf_txd_use_count(skb->len);
    #line 2433 
    (tx_ring->__anonCompField_iavf_ring_206.tx_stats.tx_linearize) ++;
  }
  #line 2442 
  if (iavf_maybe_stop_tx(tx_ring,count + 5) != 0) {
    #line 2443 
    (tx_ring->__anonCompField_iavf_ring_206.tx_stats.tx_busy) ++;
    #line 2444 
    return NETDEV_TX_BUSY;
  }
  #line 2448 
  first = tx_ring->__anonCompField_iavf_ring_205.tx_bi + (unsigned long)tx_ring->next_to_use;
  #line 2449 
  first->__anonCompField_iavf_tx_buffer_204.skb = skb;
  #line 2450 
  first->bytecount = skb->len;
  #line 2451 
  first->gso_segs = (unsigned short)1U;
  #line 2454 
  if (iavf_tx_prepare_vlan_flags(skb,tx_ring,& tx_flags) != 0) 
                                                               #line 2455 
                                                               goto out_drop;
  #line 2458 
  protocol = vlan_get_protocol(skb);
  #line 2461 
  if ((unsigned int)protocol == 8U) 
                                    #line 2462 
                                    tx_flags |= 16U;
  else 
    #line 2463 
    if ((unsigned int)protocol == 56710U) 
                                          #line 2464 
                                          tx_flags |= 32U;
  #line 2466 
  tso = iavf_tso(first,& hdr_len,& cd_type_cmd_tso_mss);
  #line 2468 
  if (tso < 0) 
               #line 2469 
               goto out_drop;
  else 
    #line 2470 
    if (tso != 0) 
                  #line 2471 
                  tx_flags |= 8U;
  #line 2474 
  tso = iavf_tx_enable_csum(skb,& tx_flags,& td_cmd,& td_offset,tx_ring,& cd_tunneling);
  #line 2476 
  if (tso < 0) 
               #line 2477 
               goto out_drop;
  #line 2480 
  td_cmd |= 4U;
  #line 2482 
  iavf_create_tx_ctx(tx_ring,cd_type_cmd_tso_mss,cd_tunneling,cd_l2tag2);
  #line 2485 
  iavf_tx_map(tx_ring,skb,first,tx_flags,(unsigned char)((int)hdr_len),td_cmd,td_offset);
  #line 2488 
  return NETDEV_TX_OK;
  #line 2490 
  out_drop: 
            #line 2490 
  ;
  #line 2491 
  trace_iavf_xmit_frame_ring_drop(first->__anonCompField_iavf_tx_buffer_204.skb,tx_ring);
  #line 2492 
  dev_kfree_skb_any(first->__anonCompField_iavf_tx_buffer_204.skb);
  #line 2493 
  first->__anonCompField_iavf_tx_buffer_204.skb = (struct sk_buff *)0;
  #line 2494 
  return NETDEV_TX_OK;
}

#line 2504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_txrx.c"
netdev_tx_t iavf_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  #line 2506 
  struct iavf_adapter *adapter = netdev_priv(netdev);
  #line 2507 
  struct iavf_ring *tx_ring = adapter->tx_rings + (unsigned long)skb->queue_mapping;
  #line 2512 
  if ((long)(skb->len <= 16U) != 0L) {
    #line 2513 
    if (skb_pad(skb,(int)(17U - skb->len)) != 0) 
                                                 #line 2514 
                                                 return NETDEV_TX_OK;
    #line 2515 
    skb->len = 17U;
    #line 2516 
    skb_set_tail_pointer(skb,17);
  }
  #line 2519 
  return iavf_xmit_frame_ring(skb,tx_ring);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_txrx.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 122 
  ldv_set_bit(nr,addr);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_txrx.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr)
{
  #line 129 
  ldv_clear_bit(nr,addr);
  #line 130 
  return;
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_txrx.i.aux"
static void atomic_add(int i, atomic_t *v)
{
  #line 164 
  ldv_atomic_add(i,v);
  #line 165 
  return;
}

#line 492  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_txrx.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 495 
  return ldv_kzalloc(size,flags);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_virtchnl.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_1(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_6250 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_1(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_1(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_1(struct list_head *entry)
{
  #line 139 
  __list_del_entry_1(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_1(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_6302 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_1(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_1(v);
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus_0(void)
{
  #line 112 
  return (unsigned int)atomic_read_1(& __num_online_cpus);
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_virtchnl.i.aux"
static void cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_virtchnl.i.aux"
static void cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(spinlock_t *lock);
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 303  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_virtchnl.i.aux"
static bool cif_queue_work_1(struct workqueue_struct *wq, struct work_struct *work);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t __ab_c_size_0(size_t a, size_t b, size_t c)
{
  #line 297 
  size_t __b_0;
  #line 297 
  size_t *__d_0;
  #line 295 
  size_t __a;
  #line 295 
  size_t __b;
  #line 295 
  size_t *__d;
  #line 297 
  size_t __a_0;
  #line 293 
  size_t bytes;
  {
    #line 295 
    __a = a;
    #line 295 
    __b = b;
    #line 295 
    __d = & bytes;
    #line 295 
    int tmp = & __a == __d;
    }
  #line 295 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 296 
                                                return 18446744073709551615UL;
  {
    #line 297 
    __a_0 = bytes;
    #line 297 
    __b_0 = c;
    #line 297 
    __d_0 = & bytes;
    #line 297 
    int tmp_3 = & __a_0 == __d_0;
    }
  #line 297 
  if (__builtin_add_overflow(__a_0,__b_0,__d_0) != 0) 
                                                      #line 298 
                                                      return 18446744073709551615UL;
  #line 300 
  return bytes;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 492  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_virtchnl.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue_0(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_2(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue_0(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
static int iavf_send_pf_msg(struct iavf_adapter *adapter, enum virtchnl_ops op, u8 *msg, u16 len)
{
  #line 25 
  enum iavf_status err;
  #line 24 
  struct iavf_hw *hw = & adapter->hw;
  #line 27 
  if (((unsigned long)adapter->flags & 8UL) != 0UL) 
                                                    #line 28 
                                                    return 0;
  #line 30 
  err = iavf_aq_send_msg_to_pf(hw,op,(enum iavf_status)IAVF_SUCCESS,msg,(unsigned short)((int)len),(struct iavf_asq_cmd_details *)0);
  #line 31 
  if (err != IAVF_SUCCESS) {
    #line 32 
    bool branch;
    #line 32 
    struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"iavf", .function = (char *)"iavf_send_pf_msg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c", .format = (char *)"Unable to send opcode %d to PF, err %s, aq_err %s\n", .lineno = (unsigned int)32U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 32 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
    #line 32 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 32 
      ;
      #line 32 
      ;
      #line 32 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug544,& (adapter->pdev)->dev,(char *)"Unable to send opcode %d to PF, err %s, aq_err %s\n",(unsigned int)op,iavf_stat_str(hw,err),iavf_aq_str(hw,hw->aq.asq_last_status));
    }
  }
  #line 35 
  return (int)err;
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
int iavf_send_api_ver(struct iavf_adapter *adapter)
{
  #line 48 
  struct virtchnl_version_info vvi;
  #line 50 
  vvi.major = 1U;
  #line 51 
  vvi.minor = 1U;
  #line 53 
  return iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_VERSION,
                       (u8 *)(& vvi),(unsigned short)8);
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
int iavf_verify_api_ver(struct iavf_adapter *adapter)
{
  #line 68 
  struct virtchnl_version_info *pf_vvi;
  #line 70 
  struct iavf_arq_event_info event;
  #line 71 
  enum virtchnl_ops op;
  #line 72 
  enum iavf_status err;
  #line 69 
  struct iavf_hw *hw = & adapter->hw;
  #line 74 
  event.buf_len = (unsigned short)4096U;
  #line 75 
  event.msg_buf = (u8 *)kzalloc_2((unsigned long)event.buf_len,3264U);
  #line 76 
  if (event.msg_buf == (u8 *)0U) {
    #line 77 
    err = IAVF_ERR_MASTER_REQUESTS_PENDING;
    #line 78 
    goto out;
  }
  #line 81 
  while (1) {
    #line 82 
    err = iavf_clean_arq_element(hw,& event,(u16 *)0U);
    #line 86 
    if (err != IAVF_SUCCESS) 
                             #line 87 
                             goto out_alloc;
    #line 88 
    op = (enum virtchnl_ops)event.desc.cookie_high;
    #line 90 
    if (op == (unsigned int)VIRTCHNL_OP_VERSION) 
                                                 #line 91 
                                                 break;
  }
  #line 95 
  err = (enum iavf_status)event.desc.cookie_low;
  #line 96 
  if (err != IAVF_SUCCESS) 
                           #line 97 
                           goto out_alloc;
  #line 99 
  if (op != (unsigned int)VIRTCHNL_OP_VERSION) {
    #line 100 
    _dev_info(& (adapter->pdev)->dev,(char *)"Invalid reply type %d from PF\n",(unsigned int)op);
    #line 102 
    err = IAVF_ERR_PARAM;
    #line 103 
    goto out_alloc;
  }
  #line 106 
  pf_vvi = (struct virtchnl_version_info *)event.msg_buf;
  #line 107 
  adapter->pf_version = *pf_vvi;
  #line 109 
  if (pf_vvi->major > 1U || pf_vvi->major == 1U && pf_vvi->minor > 1U) 
    #line 112 
    err = IAVF_ERR_PARAM;
  #line 114 
  out_alloc: 
             #line 114 
  ;
  #line 115 
  kfree((void *)event.msg_buf);
  #line 116 
  out: 
       #line 116 
  ;
  #line 117 
  return (int)err;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
int iavf_send_vf_config_msg(struct iavf_adapter *adapter)
{
  #line 130 
  u32 caps;
  #line 132 
  caps = 12386425U;
  #line 144 
  adapter->current_op = VIRTCHNL_OP_GET_VF_RESOURCES;
  #line 145 
  adapter->aq_required &= 4294966271U;
  #line 146 
  if (adapter->pf_version.major == 1U && adapter->pf_version.minor == 1U) {
    #line 147 
    return iavf_send_pf_msg(adapter,
                       (enum virtchnl_ops)VIRTCHNL_OP_GET_VF_RESOURCES,
                       (u8 *)(& caps),(unsigned short)4);
  }
  else {
    #line 150 
    return iavf_send_pf_msg(adapter,
                         (enum virtchnl_ops)VIRTCHNL_OP_GET_VF_RESOURCES,
                         (u8 *)0U,(unsigned short)0);
  }
}

#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
static void iavf_validate_num_queues(struct iavf_adapter *adapter)
{
  #line 163 
  if ((unsigned int)(adapter->vf_res)->num_queue_pairs > 4U) {
    #line 164 
    struct virtchnl_vsi_resource *vsi_res;
    #line 165 
    int i;
    #line 167 
    _dev_info(& (adapter->pdev)->dev,(char *)"Received %d queues, but can only have a max of %d\n",(int)(adapter->vf_res)->num_queue_pairs,4);
    #line 170 
    _dev_info(& (adapter->pdev)->dev,(char *)"Fixing by reducing queues to %d\n",4);
    #line 172 
    (adapter->vf_res)->num_queue_pairs = (unsigned short)4U;
    #line 173 
    i = 0;
    #line 173 
    while ((int)(adapter->vf_res)->num_vsis > i) {
      #line 174 
      vsi_res = & (adapter->vf_res)->vsi_res[i];
      #line 175 
      vsi_res->num_queue_pairs = (unsigned short)4U;
      #line 173 
      i ++;
    }
  }
  #line 178 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
int iavf_get_vf_config(struct iavf_adapter *adapter)
{
  #line 220 
  u16 __UNIQUE_ID___x545;
  #line 220 
  int tmp_0;
  #line 192 
  struct iavf_arq_event_info event;
  #line 193 
  enum virtchnl_ops op;
  #line 194 
  enum iavf_status err;
  #line 195 
  u16 len;
  #line 191 
  struct iavf_hw *hw = & adapter->hw;
  #line 197 
  len = (unsigned short)84U;
  #line 199 
  event.buf_len = len;
  #line 200 
  event.msg_buf = (u8 *)kzalloc_2((unsigned long)event.buf_len,3264U);
  #line 201 
  if (event.msg_buf == (u8 *)0U) {
    #line 202 
    err = IAVF_ERR_MASTER_REQUESTS_PENDING;
    #line 203 
    goto out;
  }
  #line 206 
  while (1) {
    #line 210 
    err = iavf_clean_arq_element(hw,& event,(u16 *)0U);
    #line 211 
    if (err != IAVF_SUCCESS) 
                             #line 212 
                             goto out_alloc;
    #line 213 
    op = (enum virtchnl_ops)event.desc.cookie_high;
    #line 215 
    if (op == (unsigned int)VIRTCHNL_OP_GET_VF_RESOURCES) 
                                                          #line 216 
                                                          break;
  }
  #line 219 
  err = (enum iavf_status)event.desc.cookie_low;
  {
    #line 220 
    __UNIQUE_ID___x545 = event.msg_len;
    #line 220 
    u16 __UNIQUE_ID___y546 = len;
    #line 220 
    if ((int)__UNIQUE_ID___x545 < (int)__UNIQUE_ID___y546) 
                                                           #line 220 
                                                           tmp_0 = (int)__UNIQUE_ID___x545; else 
                                                                    #line 220 
                                                                    tmp_0 = (int)__UNIQUE_ID___y546;
    }
  #line 220 
  ;
  #line 220 
  ;
  #line 220 
  memcpy((void *)adapter->vf_res,(void *)event.msg_buf,(unsigned long)tmp_0);
  #line 225 
  if (err == IAVF_SUCCESS) 
                           #line 226 
                           iavf_validate_num_queues(adapter);
  #line 227 
  iavf_vf_parse_hw_config(hw,adapter->vf_res);
  #line 228 
  out_alloc: 
             #line 228 
  ;
  #line 229 
  kfree((void *)event.msg_buf);
  #line 230 
  out: 
       #line 230 
  ;
  #line 231 
  return (int)err;
}

#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_configure_queues(struct iavf_adapter *adapter)
{
  #line 242 
  struct virtchnl_vsi_queue_config_info *vqci;
  #line 243 
  struct virtchnl_queue_pair_info *vqpi;
  #line 245 
  int i;
  #line 246 
  size_t len;
  #line 244 
  int pairs = adapter->num_active_queues;
  #line 245 
  int max_frame = 9728;
  #line 248 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 250 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot configure queues, command %d pending\n",(unsigned int)adapter->current_op);
    #line 252 
    return;
  }
  #line 254 
  adapter->current_op = VIRTCHNL_OP_CONFIG_VSI_QUEUES;
  #line 255 
  len = __ab_c_size_0((unsigned long)pairs,64UL,72UL);
  #line 256 
  vqci = (struct virtchnl_vsi_queue_config_info *)kzalloc_2(len,3264U);
  #line 257 
  if (vqci == (struct virtchnl_vsi_queue_config_info *)0) 
                                                          #line 258 
                                                          return;
  #line 261 
  if (((unsigned long)adapter->flags & 32768UL) == 0UL && (adapter->netdev)->mtu <= 1500U) 
    #line 263 
    max_frame = 1536;
  #line 265 
  vqci->vsi_id = (adapter->vsi_res)->vsi_id;
  #line 266 
  vqci->num_queue_pairs = (unsigned short)pairs;
  #line 267 
  vqpi = (struct virtchnl_queue_pair_info *)(& vqci->qpair);
  #line 271 
  i = 0;
  #line 271 
  while (i < pairs) {
    #line 272 
    vqpi->txq.vsi_id = vqci->vsi_id;
    #line 273 
    vqpi->txq.queue_id = (unsigned short)i;
    #line 274 
    vqpi->txq.ring_len = (adapter->tx_rings + (unsigned long)i)->count;
    #line 275 
    vqpi->txq.dma_ring_addr = (adapter->tx_rings + (unsigned long)i)->dma;
    #line 276 
    vqpi->rxq.vsi_id = vqci->vsi_id;
    #line 277 
    vqpi->rxq.queue_id = (unsigned short)i;
    #line 278 
    vqpi->rxq.ring_len = (unsigned int)(adapter->rx_rings + (unsigned long)i)->count;
    #line 279 
    vqpi->rxq.dma_ring_addr = (adapter->rx_rings + (unsigned long)i)->dma;
    #line 280 
    vqpi->rxq.max_pkt_size = (unsigned int)max_frame;
    #line 281 
    vqpi->rxq.databuffer_size = (unsigned int)((int)(adapter->rx_rings + (unsigned long)i)->rx_buf_len + 127) & 4294967168U;
    #line 284 
    vqpi ++;
    #line 271 
    i ++;
  }
  #line 287 
  adapter->aq_required &= 4294967231U;
  #line 288 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_CONFIG_VSI_QUEUES,(u8 *)vqci,(unsigned short)((int)((unsigned short)len)));
  #line 290 
  kfree((void *)vqci);
  #line 291 
  return;
}

#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_enable_queues(struct iavf_adapter *adapter)
{
  #line 301 
  struct virtchnl_queue_select vqs;
  #line 303 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 305 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot enable queues, command %d pending\n",(unsigned int)adapter->current_op);
    #line 307 
    return;
  }
  #line 309 
  adapter->current_op = VIRTCHNL_OP_ENABLE_QUEUES;
  #line 310 
  vqs.vsi_id = (adapter->vsi_res)->vsi_id;
  #line 311 
  vqs.tx_queues = (unsigned int)(1UL << adapter->num_active_queues) + 4294967295U;
  #line 312 
  vqs.rx_queues = vqs.tx_queues;
  #line 313 
  adapter->aq_required &= 4294967294U;
  #line 314 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_ENABLE_QUEUES,(u8 *)(& vqs),(unsigned short)12);
  #line 316 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_disable_queues(struct iavf_adapter *adapter)
{
  #line 326 
  struct virtchnl_queue_select vqs;
  #line 328 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 330 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot disable queues, command %d pending\n",(unsigned int)adapter->current_op);
    #line 332 
    return;
  }
  #line 334 
  adapter->current_op = VIRTCHNL_OP_DISABLE_QUEUES;
  #line 335 
  vqs.vsi_id = (adapter->vsi_res)->vsi_id;
  #line 336 
  vqs.tx_queues = (unsigned int)(1UL << adapter->num_active_queues) + 4294967295U;
  #line 337 
  vqs.rx_queues = vqs.tx_queues;
  #line 338 
  adapter->aq_required &= 4294967293U;
  #line 339 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_DISABLE_QUEUES,(u8 *)(& vqs),(unsigned short)12);
  #line 341 
  return;
}

#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_map_queues(struct iavf_adapter *adapter)
{
  #line 352 
  struct virtchnl_irq_map_info *vimi;
  #line 353 
  struct virtchnl_vector_map *vecmap;
  #line 354 
  struct iavf_q_vector *q_vector;
  #line 355 
  int v_idx;
  #line 355 
  int q_vectors;
  #line 356 
  size_t len;
  #line 358 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 360 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot map queues to vectors, command %d pending\n",(unsigned int)adapter->current_op);
    #line 362 
    return;
  }
  #line 364 
  adapter->current_op = VIRTCHNL_OP_CONFIG_IRQ_MAP;
  #line 366 
  q_vectors = adapter->num_msix_vectors + -1;
  #line 368 
  len = __ab_c_size_0((unsigned long)adapter->num_msix_vectors,12UL,14UL);
  #line 369 
  vimi = (struct virtchnl_irq_map_info *)kzalloc_2(len,3264U);
  #line 370 
  if (vimi == (struct virtchnl_irq_map_info *)0) 
                                                 #line 371 
                                                 return;
  #line 373 
  vimi->num_vectors = (unsigned short)adapter->num_msix_vectors;
  #line 375 
  v_idx = 0;
  #line 375 
  while (v_idx < q_vectors) {
    #line 376 
    q_vector = adapter->q_vectors + (unsigned long)v_idx;
    #line 377 
    vecmap = & vimi->vecmap[v_idx];
    #line 379 
    vecmap->vsi_id = (adapter->vsi_res)->vsi_id;
    #line 380 
    vecmap->vector_id = (unsigned short)((unsigned int)((unsigned short)v_idx) + 1U);
    #line 381 
    vecmap->txq_map = (unsigned short)q_vector->ring_mask;
    #line 382 
    vecmap->rxq_map = (unsigned short)q_vector->ring_mask;
    #line 383 
    vecmap->rxitr_idx = (unsigned short)0U;
    #line 384 
    vecmap->txitr_idx = (unsigned short)1U;
    #line 375 
    v_idx ++;
  }
  #line 387 
  vecmap = & vimi->vecmap[v_idx];
  #line 388 
  vecmap->vsi_id = (adapter->vsi_res)->vsi_id;
  #line 389 
  vecmap->vector_id = (unsigned short)0U;
  #line 390 
  vecmap->txq_map = (unsigned short)0U;
  #line 391 
  vecmap->rxq_map = (unsigned short)0U;
  #line 393 
  adapter->aq_required &= 4294967167U;
  #line 394 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_CONFIG_IRQ_MAP,(u8 *)vimi,(unsigned short)((int)((unsigned short)len)));
  #line 396 
  kfree((void *)vimi);
  #line 397 
  return;
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
int iavf_request_queues(struct iavf_adapter *adapter, int num)
{
  #line 418 
  int tmp_0;
  #line 418 
  int __UNIQUE_ID___x547;
  #line 409 
  struct virtchnl_vf_res_request vfres;
  #line 411 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 413 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot request queues, command %d pending\n",(unsigned int)adapter->current_op);
    #line 415 
    return -16;
  }
  {
    #line 418 
    __UNIQUE_ID___x547 = num;
    #line 418 
    int __UNIQUE_ID___y548 = (int)num_online_cpus_0();
    #line 418 
    if (__UNIQUE_ID___x547 < __UNIQUE_ID___y548) 
                                                 #line 418 
                                                 tmp_0 = __UNIQUE_ID___x547; else 
                                                                    #line 418 
                                                                    tmp_0 = __UNIQUE_ID___y548;
    }
  #line 418 
  vfres.num_queue_pairs = (unsigned short)tmp_0;
  #line 420 
  adapter->current_op = VIRTCHNL_OP_REQUEST_QUEUES;
  #line 421 
  adapter->flags |= 65536U;
  #line 422 
  return iavf_send_pf_msg(adapter,
                         (enum virtchnl_ops)VIRTCHNL_OP_REQUEST_QUEUES,
                         (u8 *)(& vfres),(unsigned short)2);
}

#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_add_ether_addrs(struct iavf_adapter *adapter)
{
  #line 478 
  void *__mptr_1;
  #line 449 
  void *__mptr;
  #line 434 
  struct virtchnl_ether_addr_list *veal;
  #line 435 
  struct iavf_mac_filter *f;
  #line 438 
  size_t len;
  #line 436 
  int i = 0;
  #line 436 
  int count = 0;
  #line 437 
  bool more = (_Bool)0;
  #line 440 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 442 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot add filters, command %d pending\n",(unsigned int)adapter->current_op);
    #line 444 
    return;
  }
  #line 447 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
  #line 449 
  __mptr = (void *)adapter->mac_filter_list.next;
  #line 449 
  f = ((struct iavf_mac_filter *)__mptr);
  #line 449 
  while (& f->list != & adapter->mac_filter_list) {
    #line 449 
    void *__mptr_0;
    #line 450 
    if ((int)f->add != 0) 
                          #line 451 
                          count ++;
    #line 449 
    __mptr_0 = (void *)f->list.next;
    #line 449 
    f = ((struct iavf_mac_filter *)__mptr_0);
  }
  #line 453 
  if (count == 0) {
    #line 454 
    adapter->aq_required &= 4294967291U;
    #line 455 
    cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
    #line 456 
    return;
  }
  #line 458 
  adapter->current_op = VIRTCHNL_OP_ADD_ETH_ADDR;
  #line 460 
  len = __ab_c_size_0((unsigned long)count,8UL,12UL);
  #line 461 
  if (len > 4096UL) {
    #line 462 
    _dev_warn(& (adapter->pdev)->dev,(char *)"Too many add MAC changes in one request\n");
    #line 463 
    count = 510;
    #line 466 
    len = __ab_c_size_0((unsigned long)count,8UL,12UL);
    #line 467 
    more = (_Bool)1;
  }
  #line 470 
  veal = (struct virtchnl_ether_addr_list *)kzalloc_2(len,2592U);
  #line 471 
  if (veal == (struct virtchnl_ether_addr_list *)0) {
    #line 472 
    cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
    #line 473 
    return;
  }
  #line 476 
  veal->vsi_id = (adapter->vsi_res)->vsi_id;
  #line 477 
  veal->num_elements = (unsigned short)count;
  #line 478 
  __mptr_1 = (void *)adapter->mac_filter_list.next;
  #line 478 
  f = ((struct iavf_mac_filter *)__mptr_1);
  #line 478 
  while (& f->list != & adapter->mac_filter_list) {
    #line 478 
    void *__mptr_2;
    #line 479 
    if ((int)f->add != 0) {
      #line 480 
      ether_addr_copy((u8 *)(& veal->list[i].addr),(u8 *)(& f->macaddr));
      #line 481 
      i ++;
      #line 482 
      f->add = (_Bool)0;
      #line 483 
      if (i == count) 
                      #line 484 
                      break;
    }
    #line 478 
    __mptr_2 = (void *)f->list.next;
    #line 478 
    f = ((struct iavf_mac_filter *)__mptr_2);
  }
  #line 487 
  if (! more) 
              #line 488 
              adapter->aq_required &= 4294967291U;
  #line 490 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
  #line 492 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_ADD_ETH_ADDR,(u8 *)veal,(unsigned short)((int)((unsigned short)len)));
  #line 493 
  kfree((void *)veal);
  #line 494 
  return;
}

#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_del_ether_addrs(struct iavf_adapter *adapter)
{
  #line 547 
  void *__mptr_1;
  #line 547 
  void *__mptr_2;
  #line 519 
  void *__mptr;
  #line 504 
  struct virtchnl_ether_addr_list *veal;
  #line 505 
  struct iavf_mac_filter *f;
  #line 505 
  struct iavf_mac_filter *ftmp;
  #line 508 
  size_t len;
  #line 506 
  int i = 0;
  #line 506 
  int count = 0;
  #line 507 
  bool more = (_Bool)0;
  #line 510 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 512 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot remove filters, command %d pending\n",(unsigned int)adapter->current_op);
    #line 514 
    return;
  }
  #line 517 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
  #line 519 
  __mptr = (void *)adapter->mac_filter_list.next;
  #line 519 
  f = ((struct iavf_mac_filter *)__mptr);
  #line 519 
  while (& f->list != & adapter->mac_filter_list) {
    #line 519 
    void *__mptr_0;
    #line 520 
    if ((int)f->remove != 0) 
                             #line 521 
                             count ++;
    #line 519 
    __mptr_0 = (void *)f->list.next;
    #line 519 
    f = ((struct iavf_mac_filter *)__mptr_0);
  }
  #line 523 
  if (count == 0) {
    #line 524 
    adapter->aq_required &= 4294967279U;
    #line 525 
    cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
    #line 526 
    return;
  }
  #line 528 
  adapter->current_op = VIRTCHNL_OP_DEL_ETH_ADDR;
  #line 530 
  len = __ab_c_size_0((unsigned long)count,8UL,12UL);
  #line 531 
  if (len > 4096UL) {
    #line 532 
    _dev_warn(& (adapter->pdev)->dev,(char *)"Too many delete MAC changes in one request\n");
    #line 533 
    count = 510;
    #line 536 
    len = __ab_c_size_0((unsigned long)count,8UL,12UL);
    #line 537 
    more = (_Bool)1;
  }
  #line 539 
  veal = (struct virtchnl_ether_addr_list *)kzalloc_2(len,2592U);
  #line 540 
  if (veal == (struct virtchnl_ether_addr_list *)0) {
    #line 541 
    cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
    #line 542 
    return;
  }
  #line 545 
  veal->vsi_id = (adapter->vsi_res)->vsi_id;
  #line 546 
  veal->num_elements = (unsigned short)count;
  #line 547 
  __mptr_1 = (void *)adapter->mac_filter_list.next;
  #line 547 
  f = ((struct iavf_mac_filter *)__mptr_1);
  #line 547 
  __mptr_2 = (void *)f->list.next;
  #line 548 
  ftmp = ((struct iavf_mac_filter *)__mptr_2);
  #line 547 
  while (& f->list != & adapter->mac_filter_list) {
    #line 547 
    void *__mptr_3;
    #line 548 
    if ((int)f->remove != 0) {
      #line 549 
      ether_addr_copy((u8 *)(& veal->list[i].addr),(u8 *)(& f->macaddr));
      #line 550 
      i ++;
      #line 551 
      list_del_1(& f->list);
      #line 552 
      kfree((void *)f);
      #line 553 
      if (i == count) 
                      #line 554 
                      break;
    }
    #line 547 
    f = ftmp;
    #line 547 
    __mptr_3 = (void *)ftmp->list.next;
    #line 547 
    ftmp = ((struct iavf_mac_filter *)__mptr_3);
  }
  #line 557 
  if (! more) 
              #line 558 
              adapter->aq_required &= 4294967279U;
  #line 560 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
  #line 562 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_DEL_ETH_ADDR,(u8 *)veal,(unsigned short)((int)((unsigned short)len)));
  #line 563 
  kfree((void *)veal);
  #line 564 
  return;
}

#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_add_vlans(struct iavf_adapter *adapter)
{
  #line 588 
  void *__mptr;
  #line 618 
  void *__mptr_1;
  #line 574 
  struct virtchnl_vlan_filter_list *vvfl;
  #line 575 
  int len;
  #line 576 
  struct iavf_vlan_filter *f;
  #line 575 
  int i = 0;
  #line 575 
  int count = 0;
  #line 577 
  bool more = (_Bool)0;
  #line 579 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 581 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot add VLANs, command %d pending\n",(unsigned int)adapter->current_op);
    #line 583 
    return;
  }
  #line 586 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
  #line 588 
  __mptr = (void *)adapter->vlan_filter_list.next;
  #line 588 
  f = ((struct iavf_vlan_filter *)__mptr);
  #line 588 
  while (& f->list != & adapter->vlan_filter_list) {
    #line 588 
    void *__mptr_0;
    #line 589 
    if ((int)f->add != 0) 
                          #line 590 
                          count ++;
    #line 588 
    __mptr_0 = (void *)f->list.next;
    #line 588 
    f = ((struct iavf_vlan_filter *)__mptr_0);
  }
  #line 592 
  if (count == 0) {
    #line 593 
    adapter->aq_required &= 4294967287U;
    #line 594 
    cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
    #line 595 
    return;
  }
  #line 597 
  adapter->current_op = VIRTCHNL_OP_ADD_VLAN;
  #line 599 
  len = (int)(((unsigned long)count + 3UL) * (unsigned long)2U);
  #line 601 
  if (len > 4096) {
    #line 602 
    _dev_warn(& (adapter->pdev)->dev,(char *)"Too many add VLAN changes in one request\n");
    #line 603 
    count = 2045;
    #line 606 
    len = (int)(((unsigned long)count + 3UL) * (unsigned long)2U);
    #line 608 
    more = (_Bool)1;
  }
  #line 610 
  vvfl = (struct virtchnl_vlan_filter_list *)kzalloc_2((unsigned long)len,2592U);
  #line 611 
  if (vvfl == (struct virtchnl_vlan_filter_list *)0) {
    #line 612 
    cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
    #line 613 
    return;
  }
  #line 616 
  vvfl->vsi_id = (adapter->vsi_res)->vsi_id;
  #line 617 
  vvfl->num_elements = (unsigned short)count;
  #line 618 
  __mptr_1 = (void *)adapter->vlan_filter_list.next;
  #line 618 
  f = ((struct iavf_vlan_filter *)__mptr_1);
  #line 618 
  while (& f->list != & adapter->vlan_filter_list) {
    #line 618 
    void *__mptr_2;
    #line 619 
    if ((int)f->add != 0) {
      #line 620 
      vvfl->vlan_id[i] = f->vlan;
      #line 621 
      i ++;
      #line 622 
      f->add = (_Bool)0;
      #line 623 
      if (i == count) 
                      #line 624 
                      break;
    }
    #line 618 
    __mptr_2 = (void *)f->list.next;
    #line 618 
    f = ((struct iavf_vlan_filter *)__mptr_2);
  }
  #line 627 
  if (! more) 
              #line 628 
              adapter->aq_required &= 4294967287U;
  #line 630 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
  #line 632 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_ADD_VLAN,(u8 *)vvfl,(unsigned short)((int)((unsigned short)len)));
  #line 633 
  kfree((void *)vvfl);
  #line 634 
  return;
}

#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_del_vlans(struct iavf_adapter *adapter)
{
  #line 688 
  void *__mptr_2;
  #line 658 
  void *__mptr;
  #line 688 
  void *__mptr_1;
  #line 644 
  struct virtchnl_vlan_filter_list *vvfl;
  #line 645 
  struct iavf_vlan_filter *f;
  #line 645 
  struct iavf_vlan_filter *ftmp;
  #line 646 
  int len;
  #line 646 
  int i = 0;
  #line 646 
  int count = 0;
  #line 647 
  bool more = (_Bool)0;
  #line 649 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 651 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot remove VLANs, command %d pending\n",(unsigned int)adapter->current_op);
    #line 653 
    return;
  }
  #line 656 
  cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
  #line 658 
  __mptr = (void *)adapter->vlan_filter_list.next;
  #line 658 
  f = ((struct iavf_vlan_filter *)__mptr);
  #line 658 
  while (& f->list != & adapter->vlan_filter_list) {
    #line 658 
    void *__mptr_0;
    #line 659 
    if ((int)f->remove != 0) 
                             #line 660 
                             count ++;
    #line 658 
    __mptr_0 = (void *)f->list.next;
    #line 658 
    f = ((struct iavf_vlan_filter *)__mptr_0);
  }
  #line 662 
  if (count == 0) {
    #line 663 
    adapter->aq_required &= 4294967263U;
    #line 664 
    cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
    #line 665 
    return;
  }
  #line 667 
  adapter->current_op = VIRTCHNL_OP_DEL_VLAN;
  #line 669 
  len = (int)(((unsigned long)count + 3UL) * (unsigned long)2U);
  #line 671 
  if (len > 4096) {
    #line 672 
    _dev_warn(& (adapter->pdev)->dev,(char *)"Too many delete VLAN changes in one request\n");
    #line 673 
    count = 2045;
    #line 676 
    len = (int)(((unsigned long)count + 3UL) * (unsigned long)2U);
    #line 678 
    more = (_Bool)1;
  }
  #line 680 
  vvfl = (struct virtchnl_vlan_filter_list *)kzalloc_2((unsigned long)len,2592U);
  #line 681 
  if (vvfl == (struct virtchnl_vlan_filter_list *)0) {
    #line 682 
    cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
    #line 683 
    return;
  }
  #line 686 
  vvfl->vsi_id = (adapter->vsi_res)->vsi_id;
  #line 687 
  vvfl->num_elements = (unsigned short)count;
  #line 688 
  __mptr_1 = (void *)adapter->vlan_filter_list.next;
  #line 688 
  f = ((struct iavf_vlan_filter *)__mptr_1);
  #line 688 
  __mptr_2 = (void *)f->list.next;
  #line 689 
  ftmp = ((struct iavf_vlan_filter *)__mptr_2);
  #line 688 
  while (& f->list != & adapter->vlan_filter_list) {
    #line 688 
    void *__mptr_3;
    #line 689 
    if ((int)f->remove != 0) {
      #line 690 
      vvfl->vlan_id[i] = f->vlan;
      #line 691 
      i ++;
      #line 692 
      list_del_1(& f->list);
      #line 693 
      kfree((void *)f);
      #line 694 
      if (i == count) 
                      #line 695 
                      break;
    }
    #line 688 
    f = ftmp;
    #line 688 
    __mptr_3 = (void *)ftmp->list.next;
    #line 688 
    ftmp = ((struct iavf_vlan_filter *)__mptr_3);
  }
  #line 698 
  if (! more) 
              #line 699 
              adapter->aq_required &= 4294967263U;
  #line 701 
  cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
  #line 703 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_DEL_VLAN,(u8 *)vvfl,(unsigned short)((int)((unsigned short)len)));
  #line 704 
  kfree((void *)vvfl);
  #line 705 
  return;
}

#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_set_promiscuous(struct iavf_adapter *adapter, int flags)
{
  #line 716 
  struct virtchnl_promisc_info vpi;
  #line 717 
  int promisc_all;
  #line 719 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 721 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot set promiscuous mode, command %d pending\n",(unsigned int)adapter->current_op);
    #line 723 
    return;
  }
  #line 726 
  promisc_all = 3;
  #line 728 
  if ((flags & promisc_all) == promisc_all) {
    #line 729 
    adapter->flags |= 8192U;
    #line 730 
    adapter->aq_required &= 4294934527U;
    #line 731 
    _dev_info(& (adapter->pdev)->dev,(char *)"Entering promiscuous mode\n");
  }
  #line 734 
  if ((flags & 2) != 0) {
    #line 735 
    adapter->flags |= 16384U;
    #line 736 
    adapter->aq_required &= 4294836223U;
    #line 737 
    _dev_info(& (adapter->pdev)->dev,(char *)"Entering multicast promiscuous mode\n");
  }
  #line 740 
  if (flags == 0) {
    #line 741 
    adapter->flags &= 4294942719U;
    #line 743 
    adapter->aq_required &= 4294639615U;
    #line 745 
    _dev_info(& (adapter->pdev)->dev,(char *)"Leaving promiscuous mode\n");
  }
  #line 748 
  adapter->current_op = VIRTCHNL_OP_CONFIG_PROMISCUOUS_MODE;
  #line 749 
  vpi.vsi_id = (adapter->vsi_res)->vsi_id;
  #line 750 
  vpi.flags = (unsigned short)flags;
  #line 751 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_CONFIG_PROMISCUOUS_MODE,(u8 *)(& vpi),(unsigned short)4);
  #line 753 
  return;
}

#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_request_stats(struct iavf_adapter *adapter)
{
  #line 763 
  struct virtchnl_queue_select vqs;
  #line 765 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) 
                                                                #line 767 
                                                                return;
  #line 769 
  adapter->current_op = VIRTCHNL_OP_GET_STATS;
  #line 770 
  vqs.vsi_id = (adapter->vsi_res)->vsi_id;
  #line 772 
  if (iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_GET_STATS,
                       (u8 *)(& vqs),(unsigned short)12) != 0) 
    #line 775 
    adapter->current_op = VIRTCHNL_OP_UNKNOWN;
  #line 776 
  return;
}

#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_get_hena(struct iavf_adapter *adapter)
{
  #line 786 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 788 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot get RSS hash capabilities, command %d pending\n",(unsigned int)adapter->current_op);
    #line 790 
    return;
  }
  #line 792 
  adapter->current_op = VIRTCHNL_OP_GET_RSS_HENA_CAPS;
  #line 793 
  adapter->aq_required &= 4294965247U;
  #line 794 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_GET_RSS_HENA_CAPS,(u8 *)0U,(unsigned short)0);
  #line 795 
  return;
}

#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_set_hena(struct iavf_adapter *adapter)
{
  #line 805 
  struct virtchnl_rss_hena vrh;
  #line 807 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 809 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot set RSS hash enable, command %d pending\n",(unsigned int)adapter->current_op);
    #line 811 
    return;
  }
  #line 813 
  vrh.hena = adapter->hena;
  #line 814 
  adapter->current_op = VIRTCHNL_OP_SET_RSS_HENA;
  #line 815 
  adapter->aq_required &= 4294963199U;
  #line 816 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_SET_RSS_HENA,(u8 *)(& vrh),(unsigned short)8);
  #line 817 
  return;
}

#line 826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_set_rss_key(struct iavf_adapter *adapter)
{
  #line 828 
  struct virtchnl_rss_key *vrk;
  #line 829 
  int len;
  #line 831 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 833 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot set RSS key, command %d pending\n",(unsigned int)adapter->current_op);
    #line 835 
    return;
  }
  #line 837 
  len = (int)((unsigned int)adapter->rss_key_size + 5U);
  #line 839 
  vrk = (struct virtchnl_rss_key *)kzalloc_2((unsigned long)len,3264U);
  #line 840 
  if (vrk == (struct virtchnl_rss_key *)0) 
                                           #line 841 
                                           return;
  #line 842 
  vrk->vsi_id = adapter->vsi.id;
  #line 843 
  vrk->key_len = adapter->rss_key_size;
  #line 844 
  memcpy((void *)(& vrk->key),(void *)adapter->rss_key,(unsigned long)adapter->rss_key_size);
  #line 846 
  adapter->current_op = VIRTCHNL_OP_CONFIG_RSS_KEY;
  #line 847 
  adapter->aq_required &= 4294959103U;
  #line 848 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_CONFIG_RSS_KEY,(u8 *)vrk,(unsigned short)((int)((unsigned short)len)));
  #line 849 
  kfree((void *)vrk);
  #line 850 
  return;
}

#line 858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_set_rss_lut(struct iavf_adapter *adapter)
{
  #line 860 
  struct virtchnl_rss_lut *vrl;
  #line 861 
  int len;
  #line 863 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 865 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot set RSS LUT, command %d pending\n",(unsigned int)adapter->current_op);
    #line 867 
    return;
  }
  #line 869 
  len = (int)((unsigned int)adapter->rss_lut_size + 5U);
  #line 871 
  vrl = (struct virtchnl_rss_lut *)kzalloc_2((unsigned long)len,3264U);
  #line 872 
  if (vrl == (struct virtchnl_rss_lut *)0) 
                                           #line 873 
                                           return;
  #line 874 
  vrl->vsi_id = adapter->vsi.id;
  #line 875 
  vrl->lut_entries = adapter->rss_lut_size;
  #line 876 
  memcpy((void *)(& vrl->lut),(void *)adapter->rss_lut,(unsigned long)adapter->rss_lut_size);
  #line 877 
  adapter->current_op = VIRTCHNL_OP_CONFIG_RSS_LUT;
  #line 878 
  adapter->aq_required &= 4294950911U;
  #line 879 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_CONFIG_RSS_LUT,(u8 *)vrl,(unsigned short)((int)((unsigned short)len)));
  #line 880 
  kfree((void *)vrl);
  #line 881 
  return;
}

#line 889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_enable_vlan_stripping(struct iavf_adapter *adapter)
{
  #line 891 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 893 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot enable stripping, command %d pending\n",(unsigned int)adapter->current_op);
    #line 895 
    return;
  }
  #line 897 
  adapter->current_op = VIRTCHNL_OP_ENABLE_VLAN_STRIPPING;
  #line 898 
  adapter->aq_required &= 4294443007U;
  #line 899 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_ENABLE_VLAN_STRIPPING,(u8 *)0U,(unsigned short)0);
  #line 900 
  return;
}

#line 908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_disable_vlan_stripping(struct iavf_adapter *adapter)
{
  #line 910 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 912 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot disable stripping, command %d pending\n",(unsigned int)adapter->current_op);
    #line 914 
    return;
  }
  #line 916 
  adapter->current_op = VIRTCHNL_OP_DISABLE_VLAN_STRIPPING;
  #line 917 
  adapter->aq_required &= 4293918719U;
  #line 918 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_DISABLE_VLAN_STRIPPING,(u8 *)0U,(unsigned short)0);
  #line 919 
  return;
}

#line 927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
static void iavf_print_link_message(struct iavf_adapter *adapter)
{
  #line 929 
  struct net_device *netdev = adapter->netdev;
  #line 930 
  char *speed = (char *)"Unknown ";
  #line 932 
  if (! adapter->link_up) {
    #line 933 
    netdev_info(netdev,(char *)"NIC Link is Down\n");
    #line 934 
    return;
  }
  #line 937 
  switch ((unsigned int)adapter->link_speed) {
    #line 938 
    case (unsigned int)16: 
                           #line 938 
    ;
    #line 939 
    speed = (char *)"40 G";
    #line 940 
    break;
    #line 941 
    case (unsigned int)64: 
                           #line 941 
    ;
    #line 942 
    speed = (char *)"25 G";
    #line 943 
    break;
    #line 944 
    case (unsigned int)32: 
                           #line 944 
    ;
    #line 945 
    speed = (char *)"20 G";
    #line 946 
    break;
    #line 947 
    case (unsigned int)8: 
                          #line 947 
    ;
    #line 948 
    speed = (char *)"10 G";
    #line 949 
    break;
    #line 950 
    case (unsigned int)4: 
                          #line 950 
    ;
    #line 951 
    speed = (char *)"1000 M";
    #line 952 
    break;
    #line 953 
    case (unsigned int)2: 
                          #line 953 
    ;
    #line 954 
    speed = (char *)"100 M";
    #line 955 
    break;
    #line 956 
    default: 
             #line 956 
    ;
    #line 957 
    break;
  }
  #line 960 
  netdev_info(netdev,(char *)"NIC Link is Up %sbps Full Duplex\n",speed);
  #line 961 
  return;
}

#line 970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_enable_channels(struct iavf_adapter *adapter)
{
  #line 973 
  size_t len;
  #line 974 
  int i;
  #line 972 
  struct virtchnl_tc_info *vti = (struct virtchnl_tc_info *)0;
  #line 976 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 978 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot configure mqprio, command %d pending\n",(unsigned int)adapter->current_op);
    #line 980 
    return;
  }
  #line 983 
  len = __ab_c_size_0((unsigned long)((int)adapter->num_tc + -1),16UL,24UL);
  #line 984 
  vti = (struct virtchnl_tc_info *)kzalloc_2(len,3264U);
  #line 985 
  if (vti == (struct virtchnl_tc_info *)0) 
                                           #line 986 
                                           return;
  #line 987 
  vti->num_tc = (unsigned int)adapter->num_tc;
  #line 988 
  i = 0;
  #line 988 
  while (vti->num_tc > (unsigned int)i) {
    #line 989 
    vti->list[i].count = adapter->ch_config.ch_info[i].count;
    #line 990 
    vti->list[i].offset = adapter->ch_config.ch_info[i].offset;
    #line 991 
    vti->list[i].pad = 0U;
    #line 992 
    vti->list[i].max_tx_rate = adapter->ch_config.ch_info[i].max_tx_rate;
    #line 988 
    i ++;
  }
  #line 996 
  adapter->ch_config.state = __IAVF_TC_RUNNING;
  #line 997 
  adapter->flags |= 65536U;
  #line 998 
  adapter->current_op = VIRTCHNL_OP_ENABLE_CHANNELS;
  #line 999 
  adapter->aq_required &= 4292870143U;
  #line 1000 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_ENABLE_CHANNELS,(u8 *)vti,(unsigned short)((int)((unsigned short)len)));
  #line 1001 
  kfree((void *)vti);
  #line 1002 
  return;
}

#line 1010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_disable_channels(struct iavf_adapter *adapter)
{
  #line 1012 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 1014 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot configure mqprio, command %d pending\n",(unsigned int)adapter->current_op);
    #line 1016 
    return;
  }
  #line 1019 
  adapter->ch_config.state = __IAVF_TC_INVALID;
  #line 1020 
  adapter->flags |= 65536U;
  #line 1021 
  adapter->current_op = VIRTCHNL_OP_DISABLE_CHANNELS;
  #line 1022 
  adapter->aq_required &= 4290772991U;
  #line 1023 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_DISABLE_CHANNELS,(u8 *)0U,(unsigned short)0);
  #line 1024 
  return;
}

#line 1033  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
static void iavf_print_cloud_filter(struct iavf_adapter *adapter, struct virtchnl_filter *f)
{
  #line 1036 
  switch ((unsigned int)f->flow_type) {
    #line 1037 
    case (unsigned int)0: 
                          #line 1037 
    ;
    #line 1038 
    ;
    #line 1038 
    ;
    #line 1038 
    ;
    #line 1038 
    ;
    #line 1038 
    ;
    #line 1038 
    _dev_info(& (adapter->pdev)->dev,(char *)"dst_mac: %pM src_mac: %pM vlan_id: %hu dst_ip: %pI4 src_ip %pI4 dst_port %hu src_port %hu\n",& f->data.tcp_spec.dst_mac,& f->data.tcp_spec.src_mac,(int)__builtin_bswap16((unsigned short)((int)f->data.tcp_spec.vlan_id)),& f->data.tcp_spec.dst_ip[0],& f->data.tcp_spec.src_ip[0],(int)__builtin_bswap16((unsigned short)((int)f->data.tcp_spec.dst_port)),(int)__builtin_bswap16((unsigned short)((int)f->data.tcp_spec.src_port)));
    #line 1046 
    break;
    #line 1047 
    case (unsigned int)1: 
                          #line 1047 
    ;
    #line 1048 
    ;
    #line 1048 
    ;
    #line 1048 
    ;
    #line 1048 
    ;
    #line 1048 
    ;
    #line 1048 
    _dev_info(& (adapter->pdev)->dev,(char *)"dst_mac: %pM src_mac: %pM vlan_id: %hu dst_ip: %pI6 src_ip %pI6 dst_port %hu src_port %hu\n",& f->data.tcp_spec.dst_mac,& f->data.tcp_spec.src_mac,(int)__builtin_bswap16((unsigned short)((int)f->data.tcp_spec.vlan_id)),& f->data.tcp_spec.dst_ip,& f->data.tcp_spec.src_ip,(int)__builtin_bswap16((unsigned short)((int)f->data.tcp_spec.dst_port)),(int)__builtin_bswap16((unsigned short)((int)f->data.tcp_spec.src_port)));
    #line 1056 
    break;
  }
  #line 1058 
  return;
}

#line 1067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_add_cloud_filter(struct iavf_adapter *adapter)
{
  #line 1096 
  void *__mptr_1;
  #line 1079 
  void *__mptr;
  #line 1069 
  struct iavf_cloud_filter *cf;
  #line 1070 
  struct virtchnl_filter *f;
  #line 1071 
  int len = 0;
  #line 1071 
  int count = 0;
  #line 1073 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 1075 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot add cloud filter, command %d pending\n",(unsigned int)adapter->current_op);
    #line 1077 
    return;
  }
  #line 1079 
  __mptr = (void *)adapter->cloud_filter_list.next;
  #line 1079 
  cf = ((struct iavf_cloud_filter *)(__mptr + 18446744073709551608U));
  #line 1079 
  while (& cf->list != & adapter->cloud_filter_list) {
    #line 1079 
    void *__mptr_0;
    #line 1080 
    if ((int)cf->add != 0) {
      #line 1081 
      count ++;
      #line 1082 
      break;
    }
    #line 1079 
    __mptr_0 = (void *)cf->list.next;
    #line 1079 
    cf = ((struct iavf_cloud_filter *)(__mptr_0 + 18446744073709551608U));
  }
  #line 1085 
  if (count == 0) {
    #line 1086 
    adapter->aq_required &= 4286578687U;
    #line 1087 
    return;
  }
  #line 1089 
  adapter->current_op = VIRTCHNL_OP_ADD_CLOUD_FILTER;
  #line 1091 
  len = 272;
  #line 1092 
  f = (struct virtchnl_filter *)kzalloc_2((unsigned long)len,3264U);
  #line 1093 
  if (f == (struct virtchnl_filter *)0) 
                                        #line 1094 
                                        return;
  #line 1096 
  __mptr_1 = (void *)adapter->cloud_filter_list.next;
  #line 1096 
  cf = ((struct iavf_cloud_filter *)(__mptr_1 + 18446744073709551608U));
  #line 1096 
  while (& cf->list != & adapter->cloud_filter_list) {
    #line 1096 
    void *__mptr_2;
    #line 1097 
    if ((int)cf->add != 0) {
      #line 1098 
      memcpy((void *)f,(void *)(& cf->f),272UL);
      #line 1099 
      cf->add = (_Bool)0;
      #line 1100 
      cf->state = __IAVF_CF_ADD_PENDING;
      #line 1101 
      iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_ADD_CLOUD_FILTER,(u8 *)f,(unsigned short)((int)((unsigned short)len)));
    }
    #line 1096 
    __mptr_2 = (void *)cf->list.next;
    #line 1096 
    cf = ((struct iavf_cloud_filter *)(__mptr_2 + 18446744073709551608U));
  }
  #line 1105 
  kfree((void *)f);
  #line 1106 
  return;
}

#line 1115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_del_cloud_filter(struct iavf_adapter *adapter)
{
  #line 1144 
  void *__mptr_1;
  #line 1144 
  void *__mptr_2;
  #line 1127 
  void *__mptr;
  #line 1117 
  struct iavf_cloud_filter *cf;
  #line 1117 
  struct iavf_cloud_filter *cftmp;
  #line 1118 
  struct virtchnl_filter *f;
  #line 1119 
  int len = 0;
  #line 1119 
  int count = 0;
  #line 1121 
  if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN) {
    #line 1123 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot remove cloud filter, command %d pending\n",(unsigned int)adapter->current_op);
    #line 1125 
    return;
  }
  #line 1127 
  __mptr = (void *)adapter->cloud_filter_list.next;
  #line 1127 
  cf = ((struct iavf_cloud_filter *)(__mptr + 18446744073709551608U));
  #line 1127 
  while (& cf->list != & adapter->cloud_filter_list) {
    #line 1127 
    void *__mptr_0;
    #line 1128 
    if ((int)cf->del != 0) {
      #line 1129 
      count ++;
      #line 1130 
      break;
    }
    #line 1127 
    __mptr_0 = (void *)cf->list.next;
    #line 1127 
    cf = ((struct iavf_cloud_filter *)(__mptr_0 + 18446744073709551608U));
  }
  #line 1133 
  if (count == 0) {
    #line 1134 
    adapter->aq_required &= 4278190079U;
    #line 1135 
    return;
  }
  #line 1137 
  adapter->current_op = VIRTCHNL_OP_DEL_CLOUD_FILTER;
  #line 1139 
  len = 272;
  #line 1140 
  f = (struct virtchnl_filter *)kzalloc_2((unsigned long)len,3264U);
  #line 1141 
  if (f == (struct virtchnl_filter *)0) 
                                        #line 1142 
                                        return;
  #line 1144 
  __mptr_1 = (void *)adapter->cloud_filter_list.next;
  #line 1144 
  cf = ((struct iavf_cloud_filter *)(__mptr_1 + 18446744073709551608U));
  #line 1144 
  __mptr_2 = (void *)cf->list.next;
  #line 1145 
  cftmp = ((struct iavf_cloud_filter *)(__mptr_2 + 18446744073709551608U));
  #line 1144 
  while (& cf->list != & adapter->cloud_filter_list) {
    #line 1144 
    void *__mptr_3;
    #line 1145 
    if ((int)cf->del != 0) {
      #line 1146 
      memcpy((void *)f,(void *)(& cf->f),272UL);
      #line 1147 
      cf->del = (_Bool)0;
      #line 1148 
      cf->state = __IAVF_CF_DEL_PENDING;
      #line 1149 
      iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_DEL_CLOUD_FILTER,(u8 *)f,(unsigned short)((int)((unsigned short)len)));
    }
    #line 1144 
    cf = cftmp;
    #line 1144 
    __mptr_3 = (void *)cftmp->list.next;
    #line 1144 
    cftmp = ((struct iavf_cloud_filter *)(__mptr_3 + 18446744073709551608U));
  }
  #line 1153 
  kfree((void *)f);
  #line 1154 
  return;
}

#line 1162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_request_reset(struct iavf_adapter *adapter)
{
  #line 1165 
  iavf_send_pf_msg(adapter,(enum virtchnl_ops)VIRTCHNL_OP_RESET_VF,(u8 *)0U,(unsigned short)0);
  #line 1166 
  adapter->current_op = VIRTCHNL_OP_UNKNOWN;
  #line 1167 
  return;
}

#line 1181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/iavf/iavf_virtchnl.c"
void iavf_virtchnl_completion(struct iavf_adapter *adapter, enum virtchnl_ops v_opcode, enum iavf_status v_retval, u8 *msg, u16 msglen)
{
  #line 1185 
  struct net_device *netdev = adapter->netdev;
  #line 1187 
  if (v_opcode == (unsigned int)VIRTCHNL_OP_EVENT) {
    #line 1188 
    struct virtchnl_pf_event *vpe = (struct virtchnl_pf_event *)msg;
    #line 1190 
    bool link_up = vpe->event_data.link_event.link_status;
    #line 1192 
    switch ((unsigned int)vpe->event) {
      #line 1193 
      case (unsigned int)1: 
                            #line 1193 
      ;
      #line 1194 
      adapter->link_speed = vpe->event_data.link_event.link_speed;
      #line 1198 
      if ((int)adapter->link_up == (int)link_up) 
                                                 #line 1199 
                                                 break;
      #line 1201 
      if ((int)link_up != 0) {
        #line 1209 
        if (adapter->state != (unsigned int)__IAVF_RUNNING) 
                                                            #line 1210 
                                                            break;
        #line 1216 
        if (((unsigned long)adapter->flags & 131072UL) != 0UL) 
                                                               #line 1218 
                                                               break;
      }
      #line 1221 
      adapter->link_up = link_up;
      #line 1222 
      if ((int)link_up != 0) {
        #line 1223 
        netif_tx_start_all_queues(netdev);
        #line 1224 
        netif_carrier_on(netdev);
      }
      else {
        #line 1226 
        netif_tx_stop_all_queues(netdev);
        #line 1227 
        netif_carrier_off(netdev);
      }
      #line 1229 
      iavf_print_link_message(adapter);
      #line 1230 
      break;
      #line 1231 
      case (unsigned int)2: 
                            #line 1231 
      ;
      #line 1232 
      _dev_info(& (adapter->pdev)->dev,(char *)"Reset warning received from the PF\n");
      #line 1233 
      if (((unsigned long)adapter->flags & 16UL) == 0UL) {
        #line 1234 
        adapter->flags |= 16U;
        #line 1235 
        _dev_info(& (adapter->pdev)->dev,(char *)"Scheduling reset task\n");
        #line 1236 
        cif_queue_work_1(iavf_wq,& adapter->reset_task);
      }
      #line 1238 
      break;
      #line 1239 
      default: 
               #line 1239 
      ;
      #line 1240 
      _dev_err(& (adapter->pdev)->dev,(char *)"Unknown event %d from PF\n",(unsigned int)vpe->event);
      #line 1242 
      break;
    }
    #line 1244 
    return;
  }
  #line 1246 
  if (v_retval != IAVF_SUCCESS) 
    #line 1247 
    switch ((unsigned int)v_opcode) {
      #line 1248 
      case (unsigned int)12: 
                             #line 1248 
      ;
      #line 1249 
      ;
      #line 1249 
      _dev_err(& (adapter->pdev)->dev,(char *)"Failed to add VLAN filter, error %s\n",iavf_stat_str(& adapter->hw,v_retval));
      #line 1251 
      break;
      #line 1252 
      case (unsigned int)10: 
                             #line 1252 
      ;
      #line 1253 
      ;
      #line 1253 
      _dev_err(& (adapter->pdev)->dev,(char *)"Failed to add MAC filter, error %s\n",iavf_stat_str(& adapter->hw,v_retval));
      #line 1256 
      ether_addr_copy((u8 *)(& adapter->hw.mac.addr),netdev->dev_addr);
      #line 1257 
      break;
      #line 1258 
      case (unsigned int)13: 
                             #line 1258 
      ;
      #line 1259 
      ;
      #line 1259 
      _dev_err(& (adapter->pdev)->dev,(char *)"Failed to delete VLAN filter, error %s\n",iavf_stat_str(& adapter->hw,v_retval));
      #line 1261 
      break;
      #line 1262 
      case (unsigned int)11: 
                             #line 1262 
      ;
      #line 1263 
      ;
      #line 1263 
      _dev_err(& (adapter->pdev)->dev,(char *)"Failed to delete MAC filter, error %s\n",iavf_stat_str(& adapter->hw,v_retval));
      #line 1265 
      break;
      #line 1266 
      case (unsigned int)30: 
                             #line 1266 
      ;
      #line 1267 
      ;
      #line 1267 
      _dev_err(& (adapter->pdev)->dev,(char *)"Failed to configure queue channels, error %s\n",iavf_stat_str(& adapter->hw,v_retval));
      #line 1269 
      adapter->flags &= 4294901759U;
      #line 1270 
      adapter->ch_config.state = __IAVF_TC_INVALID;
      #line 1271 
      netdev_reset_tc(netdev);
      #line 1272 
      netif_tx_start_all_queues(netdev);
      #line 1273 
      break;
      #line 1274 
      case (unsigned int)31: 
                             #line 1274 
      ;
      #line 1275 
      ;
      #line 1275 
      _dev_err(& (adapter->pdev)->dev,(char *)"Failed to disable queue channels, error %s\n",iavf_stat_str(& adapter->hw,v_retval));
      #line 1277 
      adapter->flags &= 4294901759U;
      #line 1278 
      adapter->ch_config.state = __IAVF_TC_RUNNING;
      #line 1279 
      netif_tx_start_all_queues(netdev);
      #line 1280 
      break;
      #line 1281 
      case (unsigned int)32: 
                             #line 1281 
      ;
      {
        #line 1284 
        void *__mptr;
        #line 1284 
        void *__mptr_0;
        #line 1282 
        struct iavf_cloud_filter *cf;
        #line 1282 
        struct iavf_cloud_filter *cftmp;
        #line 1284 
        __mptr = (void *)adapter->cloud_filter_list.next;
        #line 1284 
        cf = ((struct iavf_cloud_filter *)(__mptr + 18446744073709551608U));
        #line 1284 
        __mptr_0 = (void *)cf->list.next;
        #line 1285 
        cftmp = ((struct iavf_cloud_filter *)(__mptr_0 + 18446744073709551608U));
        #line 1284 
        while (& cf->list != & adapter->cloud_filter_list) {
          #line 1284 
          void *__mptr_1;
          #line 1287 
          if (cf->state == (unsigned int)__IAVF_CF_ADD_PENDING) {
            #line 1288 
            cf->state = __IAVF_CF_INVALID;
            #line 1289 
            ;
            #line 1289 
            _dev_info(& (adapter->pdev)->dev,(char *)"Failed to add cloud filter, error %s\n",iavf_stat_str(& adapter->hw,v_retval));
            #line 1292 
            iavf_print_cloud_filter(adapter,& cf->f);
            #line 1294 
            list_del_1(& cf->list);
            #line 1295 
            kfree((void *)cf);
            #line 1296 
            adapter->num_cloud_filters = (u16)((int)adapter->num_cloud_filters - 1);
          }
          #line 1284 
          cf = cftmp;
          #line 1284 
          __mptr_1 = (void *)cftmp->list.next;
          #line 1284 
          cftmp = ((struct iavf_cloud_filter *)(__mptr_1 + 18446744073709551608U));
        }
      }
      #line 1300 
      break;
      #line 1301 
      case (unsigned int)33: 
                             #line 1301 
      ;
      {
        #line 1304 
        void *__mptr_2;
        #line 1302 
        struct iavf_cloud_filter *cf_0;
        #line 1304 
        __mptr_2 = (void *)adapter->cloud_filter_list.next;
        #line 1304 
        cf_0 = ((struct iavf_cloud_filter *)(__mptr_2 + 18446744073709551608U));
        #line 1304 
        while (& cf_0->list != & adapter->cloud_filter_list) {
          #line 1304 
          void *__mptr_3;
          #line 1306 
          if (cf_0->state == (unsigned int)__IAVF_CF_DEL_PENDING) {
            #line 1307 
            cf_0->state = __IAVF_CF_ACTIVE;
            #line 1308 
            ;
            #line 1308 
            _dev_info(& (adapter->pdev)->dev,(char *)"Failed to del cloud filter, error %s\n",iavf_stat_str(& adapter->hw,v_retval));
            #line 1311 
            iavf_print_cloud_filter(adapter,& cf_0->f);
          }
          #line 1304 
          __mptr_3 = (void *)cf_0->list.next;
          #line 1304 
          cf_0 = ((struct iavf_cloud_filter *)(__mptr_3 + 18446744073709551608U));
        }
      }
      #line 1316 
      break;
      #line 1317 
      default: 
               #line 1317 
      ;
      #line 1318 
      ;
      #line 1318 
      ;
      #line 1318 
      ;
      #line 1318 
      _dev_err(& (adapter->pdev)->dev,(char *)"PF returned error %d (%s) to our request %d\n",(int)v_retval,iavf_stat_str(& adapter->hw,v_retval),(unsigned int)v_opcode);
    }
  #line 1323 
  switch ((unsigned int)v_opcode) {
    #line 1324 
    case (unsigned int)10: 
                           #line 1324 
    ;
    #line 1325 
    if (! ether_addr_equal(netdev->dev_addr,(u8 *)(& adapter->hw.mac.addr))) 
      #line 1326 
      ether_addr_copy(netdev->dev_addr,(u8 *)(& adapter->hw.mac.addr));
    #line 1328 
    break;
    #line 1329 
    case (unsigned int)15: 
                           #line 1329 
    ;
    {
      #line 1330 
      struct iavf_eth_stats *stats = (struct iavf_eth_stats *)msg;
      #line 1332 
      netdev->stats.rx_packets = (unsigned long)((stats->rx_unicast + stats->rx_multicast) + stats->rx_broadcast);
      #line 1335 
      netdev->stats.tx_packets = (unsigned long)((stats->tx_unicast + stats->tx_multicast) + stats->tx_broadcast);
      #line 1338 
      netdev->stats.rx_bytes = (unsigned long)stats->rx_bytes;
      #line 1339 
      netdev->stats.tx_bytes = (unsigned long)stats->tx_bytes;
      #line 1340 
      netdev->stats.tx_errors = (unsigned long)stats->tx_errors;
      #line 1341 
      netdev->stats.rx_dropped = (unsigned long)stats->rx_discards;
      #line 1342 
      netdev->stats.tx_dropped = (unsigned long)stats->tx_discards;
      #line 1343 
      adapter->current_stats = *stats;
    }
    #line 1345 
    break;
    #line 1346 
    case (unsigned int)3: 
                          #line 1346 
    ;
    {
      #line 1350 
      u16 __UNIQUE_ID___x549;
      #line 1350 
      int tmp_14;
      #line 1347 
      u16 len = (unsigned short)84U;
      {
        #line 1350 
        __UNIQUE_ID___x549 = msglen;
        #line 1350 
        u16 __UNIQUE_ID___y550 = len;
        #line 1350 
        if ((int)__UNIQUE_ID___x549 < (int)__UNIQUE_ID___y550) 
                                                               #line 1350 
                                                               tmp_14 = (int)__UNIQUE_ID___x549; else 
                                                                    #line 1350 
                                                                    tmp_14 = (int)__UNIQUE_ID___y550;
        }
      #line 1350 
      ;
      #line 1350 
      ;
      #line 1350 
      memcpy((void *)adapter->vf_res,(void *)msg,(unsigned long)tmp_14);
      #line 1351 
      iavf_validate_num_queues(adapter);
      #line 1352 
      iavf_vf_parse_hw_config(& adapter->hw,adapter->vf_res);
      #line 1353 
      if ((int)is_zero_ether_addr((u8 *)(& adapter->hw.mac.addr)) != 0) 
        #line 1355 
        ether_addr_copy((u8 *)(& adapter->hw.mac.addr),netdev->dev_addr);
      else {
        #line 1358 
        ether_addr_copy(netdev->dev_addr,(u8 *)(& adapter->hw.mac.addr));
        #line 1359 
        ether_addr_copy((u8 *)(& netdev->perm_addr),(u8 *)(& adapter->hw.mac.addr));
      }
      #line 1362 
      cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
      #line 1363 
      iavf_add_filter(adapter,(u8 *)(& adapter->hw.mac.addr));
      #line 1364 
      cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(& adapter->mac_vlan_list_lock);
      #line 1365 
      iavf_process_config(adapter);
    }
    #line 1367 
    break;
    #line 1368 
    case (unsigned int)8: 
                          #line 1368 
    ;
    #line 1370 
    iavf_irq_enable(adapter,(_Bool)1);
    #line 1371 
    adapter->flags &= 4294836223U;
    #line 1372 
    break;
    #line 1373 
    case (unsigned int)9: 
                          #line 1373 
    ;
    #line 1374 
    iavf_free_all_tx_resources(adapter);
    #line 1375 
    iavf_free_all_rx_resources(adapter);
    #line 1376 
    if (adapter->state == (unsigned int)__IAVF_DOWN_PENDING) {
      #line 1377 
      adapter->state = __IAVF_DOWN;
      #line 1378 
      __wake_up(& adapter->down_waitqueue,3U,1,(void *)0);
    }
    #line 1380 
    break;
    #line 1381 
    case (unsigned int)1: 
                          #line 1381 
    ;
    #line 1382 
    case (unsigned int)7: 
                          #line 1382 
    ;
    #line 1387 
    if (adapter->current_op != v_opcode) 
                                         #line 1388 
                                         return;
    #line 1389 
    break;
    #line 1390 
    case (unsigned int)20: 
                           #line 1390 
    ;
    #line 1395 
    if ((unsigned int)msglen != 0U && adapter->cinst != (struct iavf_client_instance *)0) 
      #line 1396 
      iavf_notify_client_message(& adapter->vsi,msg,(unsigned short)((int)msglen));
    #line 1397 
    break;
    #line 1399 
    case (unsigned int)21: 
                           #line 1399 
    ;
    #line 1400 
    adapter->client_pending &= 4292870143U;
    #line 1402 
    break;
    #line 1403 
    case (unsigned int)25: 
                           #line 1403 
    ;
    {
      #line 1404 
      struct virtchnl_rss_hena *vrh = (struct virtchnl_rss_hena *)msg;
      #line 1406 
      if ((unsigned int)msglen == 8U) 
                                      #line 1407 
                                      adapter->hena = vrh->hena; else 
                                                                   #line 1409 
                                                                   _dev_warn(& (adapter->pdev)->dev,(char *)"Invalid message %d from PF\n",(unsigned int)v_opcode);
    }
    #line 1412 
    break;
    #line 1413 
    case (unsigned int)29: 
                           #line 1413 
    ;
    {
      #line 1414 
      struct virtchnl_vf_res_request *vfres = (struct virtchnl_vf_res_request *)msg;
      #line 1417 
      if ((int)vfres->num_queue_pairs != adapter->num_req_queues) {
        #line 1418 
        _dev_info(& (adapter->pdev)->dev,(char *)"Requested %d queues, PF can support %d\n",adapter->num_req_queues,(int)vfres->num_queue_pairs);
        #line 1422 
        adapter->num_req_queues = 0;
        #line 1423 
        adapter->flags &= 4294901759U;
      }
    }
    #line 1426 
    break;
    #line 1427 
    case (unsigned int)32: 
                           #line 1427 
    ;
    {
      #line 1430 
      void *__mptr_4;
      #line 1428 
      struct iavf_cloud_filter *cf_1;
      #line 1430 
      __mptr_4 = (void *)adapter->cloud_filter_list.next;
      #line 1430 
      cf_1 = ((struct iavf_cloud_filter *)(__mptr_4 + 18446744073709551608U));
      #line 1430 
      while (& cf_1->list != & adapter->cloud_filter_list) {
        #line 1430 
        void *__mptr_5;
        #line 1431 
        if (cf_1->state == (unsigned int)__IAVF_CF_ADD_PENDING) 
                                                                #line 1432 
                                                                cf_1->state = __IAVF_CF_ACTIVE;
        #line 1430 
        __mptr_5 = (void *)cf_1->list.next;
        #line 1430 
        cf_1 = ((struct iavf_cloud_filter *)(__mptr_5 + 18446744073709551608U));
      }
    }
    #line 1435 
    break;
    #line 1436 
    case (unsigned int)33: 
                           #line 1436 
    ;
    {
      #line 1439 
      void *__mptr_7;
      #line 1439 
      void *__mptr_6;
      #line 1437 
      struct iavf_cloud_filter *cf_2;
      #line 1437 
      struct iavf_cloud_filter *cftmp_0;
      #line 1439 
      __mptr_6 = (void *)adapter->cloud_filter_list.next;
      #line 1439 
      cf_2 = ((struct iavf_cloud_filter *)(__mptr_6 + 18446744073709551608U));
      #line 1439 
      __mptr_7 = (void *)cf_2->list.next;
      #line 1440 
      cftmp_0 = ((struct iavf_cloud_filter *)(__mptr_7 + 18446744073709551608U));
      #line 1439 
      while (& cf_2->list != & adapter->cloud_filter_list) {
        #line 1439 
        void *__mptr_8;
        #line 1441 
        if (cf_2->state == (unsigned int)__IAVF_CF_DEL_PENDING) {
          #line 1442 
          cf_2->state = __IAVF_CF_INVALID;
          #line 1443 
          list_del_1(& cf_2->list);
          #line 1444 
          kfree((void *)cf_2);
          #line 1445 
          adapter->num_cloud_filters = (u16)((int)adapter->num_cloud_filters - 1);
        }
        #line 1439 
        cf_2 = cftmp_0;
        #line 1439 
        __mptr_8 = (void *)cftmp_0->list.next;
        #line 1439 
        cftmp_0 = ((struct iavf_cloud_filter *)(__mptr_8 + 18446744073709551608U));
      }
    }
    #line 1449 
    break;
    #line 1450 
    default: 
             #line 1450 
    ;
    #line 1451 
    if (adapter->current_op != (unsigned int)VIRTCHNL_OP_UNKNOWN && adapter->current_op != v_opcode) 
      #line 1452 
      _dev_warn(& (adapter->pdev)->dev,(char *)"Expected response %d from PF, received %d\n",(unsigned int)adapter->current_op,(unsigned int)v_opcode);
    #line 1454 
    break;
  }
  #line 1456 
  adapter->current_op = VIRTCHNL_OP_UNKNOWN;
  #line 1457 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_virtchnl.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr)
{
  #line 129 
  ldv_clear_bit(nr,addr);
  #line 130 
  return;
}

#line 303  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_virtchnl.i.aux"
static bool cif_queue_work_1(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 307 
  return emg_queue_work(wq,work);
}

#line 492  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_virtchnl.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags)
{
  #line 495 
  return ldv_kzalloc(size,flags);
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_virtchnl.i.aux"
static void cif_spin_lock_bh_mac_vlan_list_lock_of_iavf_adapter_0(spinlock_t *lock)
{
  #line 834 
  ldv_spin_model_lock((char *)"mac_vlan_list_lock_of_iavf_adapter");
  #line 836 
  spin_lock_bh_0(lock);
  #line 837 
  return;
}

#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/0/concurrency safety/weaver/iavf_virtchnl.i.aux"
static void cif_spin_unlock_bh_mac_vlan_list_lock_of_iavf_adapter_0(spinlock_t *lock)
{
  #line 843 
  ldv_spin_model_unlock((char *)"mac_vlan_list_lock_of_iavf_adapter");
  #line 845 
  spin_unlock_bh_0(lock);
  #line 846 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
#line 102 
void emg_dispatch_deregister_6(struct pci_driver *arg0);
#line 51 
#line 86 
void emg_dispatch_irq_deregister_4(int arg0);
#line 52 
#line 111 
void emg_dispatch_irq_register_9(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 53 
#line 75 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 54 
#line 696 
void *emg_entry_point_insmod(void *arg0);
#line 57 
#line 137 
void *emg_interrupt_interrupt_scenario_iavf_msix_aq(void *arg0);
#line 58 
#line 200 
void *emg_interrupt_interrupt_scenario_iavf_msix_clean_rings(void *arg0);
#line 59 
#line 263 
void *emg_pci_pci_scenario_iavf_driver(void *arg0);
#line 66 
#line 725 
int main(void);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 76 
  int ret;
  #line 77 
  struct emg_struct_pci_scenario_iavf_driver_14 *cf_arg_14;
  #line 78 
  cf_arg_14 = (struct emg_struct_pci_scenario_iavf_driver_14 *)ldv_xmalloc(16UL);
  #line 79 
  cf_arg_14->arg0 = arg0;
  #line 80 
  ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_pci_pci_scenario_iavf_driver,(void *)cf_arg_14);
  #line 81 
  __VERIFIER_assume(ret == 0);
  #line 82 
  return;
}

#line 86  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_4(int arg0)
{
  #line 87 
  int ret;
  #line 88 
  struct emg_struct_free_irq_4 *cf_arg_12;
  #line 89 
  struct emg_struct_free_irq_4 *cf_arg_13;
  #line 90 
  if (ldv_undef_int() != 0) {
    #line 91 
    ret = pthread_join(emg_thread_12,(void **)0);
    #line 92 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 95 
    ret = pthread_join(emg_thread_13,(void **)0);
    #line 96 
    __VERIFIER_assume(ret == 0);
  }
  #line 98 
  return;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_6(struct pci_driver *arg0)
{
  #line 103 
  int ret;
  #line 104 
  struct emg_struct_pci_scenario_iavf_driver_14 *cf_arg_14;
  #line 105 
  ret = pthread_join(emg_thread_14,(void **)0);
  #line 106 
  __VERIFIER_assume(ret == 0);
  #line 107 
  return;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_9(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 112 
  int ret;
  #line 113 
  struct emg_struct_interrupt_scenario_iavf_msix_aq_12 *cf_arg_12;
  #line 114 
  struct emg_struct_interrupt_scenario_iavf_msix_aq_12 *cf_arg_13;
  #line 115 
  if (ldv_undef_int() != 0) {
    #line 116 
    cf_arg_12 = (struct emg_struct_interrupt_scenario_iavf_msix_aq_12 *)ldv_xmalloc(40UL);
    #line 117 
    cf_arg_12->arg0 = arg0;
    #line 118 
    cf_arg_12->arg1 = arg1;
    #line 119 
    cf_arg_12->arg2 = arg2;
    #line 120 
    cf_arg_12->arg3 = arg3;
    #line 121 
    ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_iavf_msix_aq,(void *)cf_arg_12);
    #line 122 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 125 
    cf_arg_13 = (struct emg_struct_interrupt_scenario_iavf_msix_aq_12 *)ldv_xmalloc(40UL);
    #line 126 
    cf_arg_13->arg0 = arg0;
    #line 127 
    cf_arg_13->arg1 = arg1;
    #line 128 
    cf_arg_13->arg2 = arg2;
    #line 129 
    cf_arg_13->arg3 = arg3;
    #line 130 
    ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_iavf_msix_clean_rings,(void *)cf_arg_13);
    #line 131 
    __VERIFIER_assume(ret == 0);
  }
  #line 133 
  return;
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_iavf_msix_aq(void *arg0)
{
  #line 140 
  enum irqreturn (*emg_12_callback)(int , void *);
  #line 141 
  void *emg_12_data;
  #line 142 
  int emg_12_line;
  #line 143 
  enum irqreturn emg_12_ret_val;
  #line 144 
  enum irqreturn (*emg_12_thread)(int , void *);
  #line 146 
  struct emg_struct_interrupt_scenario_iavf_msix_aq_12 *data = (struct emg_struct_interrupt_scenario_iavf_msix_aq_12 *)arg0;
  #line 149 
  emg_12_callback = & emg_wrapper_iavf_msix_aq;
  #line 152 
  if (data != (struct emg_struct_interrupt_scenario_iavf_msix_aq_12 *)0) {
    #line 153 
    emg_12_line = data->arg0;
    #line 154 
    emg_12_callback = data->arg1;
    #line 155 
    emg_12_thread = data->arg2;
    #line 156 
    emg_12_data = data->arg3;
    #line 157 
    ldv_free((void *)data);
  }
  #line 163 
  ldv_switch_to_interrupt_context();
  #line 167 
  emg_12_ret_val = emg_wrapper_iavf_msix_aq(emg_12_line,emg_12_data);
  #line 172 
  ldv_switch_to_process_context();
  #line 175 
  if (ldv_undef_int() != 0) {
    #line 177 
    __VERIFIER_assume(emg_12_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 181 
    if (emg_12_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 182 
                                                              (*emg_12_thread)(emg_12_line,emg_12_data);
  }
  else 
       #line 187 
       __VERIFIER_assume(emg_12_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 195 
  return (void *)0;
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_iavf_msix_clean_rings(void *arg0)
{
  #line 203 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 204 
  void *emg_13_data;
  #line 205 
  int emg_13_line;
  #line 206 
  enum irqreturn emg_13_ret_val;
  #line 207 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 209 
  struct emg_struct_interrupt_scenario_iavf_msix_aq_12 *data = (struct emg_struct_interrupt_scenario_iavf_msix_aq_12 *)arg0;
  #line 212 
  emg_13_callback = & emg_wrapper_iavf_msix_clean_rings;
  #line 215 
  if (data != (struct emg_struct_interrupt_scenario_iavf_msix_aq_12 *)0) {
    #line 216 
    emg_13_line = data->arg0;
    #line 217 
    emg_13_callback = data->arg1;
    #line 218 
    emg_13_thread = data->arg2;
    #line 219 
    emg_13_data = data->arg3;
    #line 220 
    ldv_free((void *)data);
  }
  #line 226 
  ldv_switch_to_interrupt_context();
  #line 230 
  emg_13_ret_val = emg_wrapper_iavf_msix_clean_rings(emg_13_line,emg_13_data);
  #line 235 
  ldv_switch_to_process_context();
  #line 238 
  if (ldv_undef_int() != 0) {
    #line 240 
    __VERIFIER_assume(emg_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 244 
    if (emg_13_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 245 
                                                              (*emg_13_thread)(emg_13_line,emg_13_data);
  }
  else 
       #line 250 
       __VERIFIER_assume(emg_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 258 
  return (void *)0;
}

#line 263  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_iavf_driver(void *arg0)
{
  #line 266 
  int emg_14_choice;
  #line 267 
  struct pci_driver *emg_14_container;
  #line 268 
  struct pci_device_id *emg_14_device_id;
  #line 269 
  struct pci_dev *emg_14_resource_0;
  #line 270 
  struct pm_message emg_14_resource_1;
  #line 271 
  int emg_14_ret;
  #line 272 
  int emg_repeat_cnt_call_14_0 = 1;
  #line 273 
  int emg_repeat_cnt_call_14_1 = 1;
  #line 274 
  int emg_repeat_cnt_main_14_0 = 1;
  #line 275 
  int emg_repeat_cnt_main_14_1 = 1;
  #line 277 
  struct emg_struct_pci_scenario_iavf_driver_14 *data = (struct emg_struct_pci_scenario_iavf_driver_14 *)arg0;
  #line 281 
  emg_14_choice = 0;
  #line 282 
  emg_14_ret = ldv_undef_int();
  #line 283 
  emg_14_choice = 0;
  #line 284 
  emg_14_container = emg_alias_iavf_driver;
  #line 285 
  emg_14_ret = ldv_undef_int();
  #line 287 
  __VERIFIER_assume(data->arg0 == emg_alias_iavf_driver);
  #line 289 
  if (data != (struct emg_struct_pci_scenario_iavf_driver_14 *)0) {
    #line 290 
    emg_14_container = data->arg0;
    #line 291 
    ldv_free((void *)data);
  }
  #line 296 
  emg_14_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 297 
  emg_14_choice = __ldv_undef_int_range(0,4);
  #line 298 
  emg_14_device_id = emg_14_container->id_table + (unsigned long)emg_14_choice;
  #line 302 
  goto emg_main_14;
  #line 306 
  return (void *)0;
  #line 309 
  emg_call_14: 
               #line 309 
  ;
  #line 310 
  switch (ldv_undef_int()) {
    #line 311 
    case 0: 
            #line 311 
    ;
    #line 316 
    if (emg_repeat_cnt_call_14_1 > 0) {
      #line 317 
      emg_repeat_cnt_call_14_1 --;
      #line 319 
      goto emg_call_14;
    }
    else 
         #line 321 
         __VERIFIER_assume(0);
    #line 325 
    break;
    #line 327 
    case 1: 
            #line 327 
    ;
    #line 329 
    emg_14_ret = emg_wrapper_iavf_suspend(emg_14_resource_0,emg_14_resource_1);
    #line 334 
    emg_14_ret = ldv_filter_err_code(emg_14_ret);
    #line 338 
    emg_wrapper_iavf_resume(emg_14_resource_0);
    #line 341 
    if (emg_repeat_cnt_call_14_0 > 0) {
      #line 342 
      emg_repeat_cnt_call_14_0 --;
      #line 344 
      goto emg_call_14;
    }
    else 
         #line 346 
         __VERIFIER_assume(0);
    #line 350 
    break;
    #line 352 
    case 2: 
            #line 352 
    ;
    #line 354 
    emg_wrapper_iavf_shutdown(emg_14_resource_0);
    #line 358 
    emg_wrapper_iavf_remove(emg_14_resource_0);
    #line 361 
    if (emg_repeat_cnt_main_14_1 > 0) {
      #line 362 
      emg_repeat_cnt_main_14_1 --;
      #line 364 
      goto emg_main_14;
    }
    else 
         #line 366 
         __VERIFIER_assume(0);
    #line 370 
    break;
    #line 372 
    default: 
             #line 372 
    ;
    #line 372 
    __VERIFIER_assume(0);
  }
  #line 375 
  return (void *)0;
  #line 378 
  emg_main_14: 
               #line 378 
  ;
  #line 379 
  if (ldv_undef_int() != 0) {
    #line 382 
    ldv_pre_probe();
    #line 386 
    emg_14_ret = emg_wrapper_iavf_probe(emg_14_resource_0,emg_14_device_id);
    #line 391 
    emg_14_ret = ldv_post_probe(emg_14_ret);
    #line 394 
    if (ldv_undef_int() != 0) {
      #line 396 
      __VERIFIER_assume(emg_14_ret == 0);
      #line 400 
      goto emg_call_14;
    }
    else 
         #line 405 
         __VERIFIER_assume(emg_14_ret != 0);
    #line 409 
    if (emg_repeat_cnt_main_14_0 > 0) {
      #line 410 
      emg_repeat_cnt_main_14_0 --;
      #line 412 
      goto emg_main_14;
    }
    else 
         #line 414 
         __VERIFIER_assume(0);
  }
  else 
       #line 420 
       ldv_free((void *)emg_14_resource_0);
  #line 428 
  return (void *)0;
}

#line 433  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 436 
  struct pci_driver *emg_2_pci_driver;
  #line 438 
  emg_2_pci_driver = emg_alias_iavf_driver;
  #line 439 
  if (ldv_undef_int() != 0) {
    #line 441 
    emg_2_pci_driver = arg0;
    #line 445 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 449 
    return 0;
  }
  else {
    #line 453 
    return ldv_undef_int_negative();
  }
}

#line 461  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 464 
  struct net_device *emg_3_netdev;
  #line 466 
  if (ldv_undef_int() != 0) {
    #line 468 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 472 
    return emg_3_netdev;
  }
  else 
       #line 476 
       return (struct net_device *)0;
}

#line 484  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 487 
  int emg_4_line;
  #line 490 
  emg_4_line = (int)arg0;
  #line 494 
  emg_dispatch_irq_deregister_4(emg_4_line);
  #line 495 
  ;
  #line 495 
  return (void *)0;
}

#line 501  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 504 
  struct net_device *emg_5_netdev;
  #line 507 
  emg_5_netdev = arg0;
  #line 508 
  ldv_free((void *)emg_5_netdev);
  #line 511 
  return;
}

#line 516  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 519 
  struct pci_driver *emg_6_pci_driver;
  #line 521 
  emg_6_pci_driver = emg_alias_iavf_driver;
  #line 523 
  emg_6_pci_driver = arg0;
  #line 527 
  emg_dispatch_deregister_6(emg_6_pci_driver);
  #line 530 
  return;
}

#line 535  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  #line 538 
  struct delayed_work *emg_7_delayed_work;
  #line 539 
  struct work_struct *emg_7_emg_param_0_0;
  #line 541 
  if (ldv_undef_int() != 0) {
    #line 543 
    emg_7_delayed_work = arg1;
    #line 547 
    emg_7_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 547 
    emg_7_emg_param_0_0 = emg_7_emg_param_0_0;
    #line 551 
    if (emg_7_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 552 
      (*(emg_7_delayed_work->work.func))(emg_7_emg_param_0_0);
    #line 557 
    ldv_free((void *)emg_7_emg_param_0_0);
    #line 561 
    return (_Bool)1;
  }
  else 
       #line 565 
       return (_Bool)0;
}

#line 573  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 576 
  struct work_struct *emg_8_work_struct;
  #line 578 
  if (ldv_undef_int() != 0) {
    #line 580 
    emg_8_work_struct = arg1;
    #line 584 
    if (emg_8_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 585 
      (*(emg_8_work_struct->func))(emg_8_work_struct);
    #line 590 
    return (_Bool)1;
  }
  else 
       #line 594 
       return (_Bool)0;
}

#line 602  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 605 
  enum irqreturn (*emg_9_callback)(int , void *);
  #line 606 
  void *emg_9_data;
  #line 607 
  int emg_9_line;
  #line 608 
  enum irqreturn (*emg_9_thread)(int , void *);
  #line 610 
  emg_9_callback = & emg_wrapper_iavf_msix_aq;
  #line 611 
  if (ldv_undef_int() != 0) {
    #line 613 
    emg_9_line = (int)arg0;
    #line 614 
    emg_9_callback = arg1;
    #line 615 
    emg_9_thread = (enum irqreturn (*)(int , void *))0;
    #line 616 
    emg_9_data = arg4;
    #line 620 
    emg_dispatch_irq_register_9(emg_9_line,emg_9_callback,emg_9_thread,emg_9_data);
    #line 624 
    return 0;
  }
  else {
    #line 628 
    return ldv_undef_int_negative();
  }
}

#line 636  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  #line 639 
  struct delayed_work *emg_10_delayed_work;
  #line 640 
  struct work_struct *emg_10_emg_param_0_0;
  #line 642 
  if (ldv_undef_int() != 0) {
    #line 644 
    emg_10_delayed_work = arg0;
    #line 648 
    emg_10_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 648 
    emg_10_emg_param_0_0 = emg_10_emg_param_0_0;
    #line 652 
    if (emg_10_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 653 
      (*(emg_10_delayed_work->work.func))(emg_10_emg_param_0_0);
    #line 658 
    ldv_free((void *)emg_10_emg_param_0_0);
    #line 662 
    return (_Bool)1;
  }
  else 
       #line 666 
       return (_Bool)0;
}

#line 674  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 677 
  struct net_device *emg_11_netdev;
  #line 680 
  emg_11_netdev = arg0;
  #line 684 
  emg_wrapper_iavf_close(emg_11_netdev);
  #line 691 
  return;
}

#line 696  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 699 
  int emg_1_ret;
  #line 702 
  emg_1_ret = emg_iavf_init_module();
  #line 703 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 706 
  if (ldv_undef_int() != 0) {
    #line 708 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 712 
    emg_iavf_exit_module();
  }
  else 
       #line 716 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 720 
  return (void *)0;
}

#line 725  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/iavf/iavf.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 727 
  ldv_initialize();
  #line 729 
  emg_entry_point_insmod((void *)0);
  #line 731 
  return 0;
}

