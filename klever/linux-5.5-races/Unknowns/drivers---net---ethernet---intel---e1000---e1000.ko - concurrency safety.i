/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_113 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_113 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_114 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_114 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_128 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_127 {
   struct __anonstruct_128 __anonCompField___anonunion_127_28 ;
   struct __anonstruct_129 __anonCompField___anonunion_127_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_127 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_130 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_130 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   struct list_head slab_list ;
   struct __anonstruct_136 __anonCompField___anonunion_135_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_138 __anonCompField___anonunion_137_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   union __anonunion_135 __anonCompField___anonstruct_134_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_137 __anonCompField___anonstruct_134_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_142 __anonCompField___anonstruct_141_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_131 {
   struct __anonstruct_132 __anonCompField___anonunion_131_31 ;
   struct __anonstruct_133 __anonCompField___anonunion_131_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_131_37 ;
   struct __anonstruct_139 __anonCompField___anonunion_131_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_131_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_131_41 ;
   struct __anonstruct_143 __anonCompField___anonunion_131_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_131 __anonCompField_page_43 ;
   union __anonunion_144 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_145 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_146 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_146 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_237 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_236 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 325 
struct poll_table_struct;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_256 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_256 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_259 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_259 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 892 
struct percpu_ref;
#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct user_struct;
#line 178 
struct writeback_control;
#line 179 
struct bdi_writeback;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_306 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_306 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_307 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_308 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_309 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_310 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_313 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_314 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_312 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_313 _addr_bnd ;
   struct __anonstruct__addr_pkey_314 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_311 {
   void *_addr ;
   union __anonunion_312 __anonCompField___anonstruct__sigfault_311_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_315 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_316 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_307 _kill ;
   struct __anonstruct__timer_308 _timer ;
   struct __anonstruct__rt_309 _rt ;
   struct __anonstruct__sigchld_310 _sigchld ;
   struct __anonstruct__sigfault_311 _sigfault ;
   struct __anonstruct__sigpoll_315 _sigpoll ;
   struct __anonstruct__sigsys_316 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_321 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_321 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_326 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_326 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_328 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_328 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_416 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_415 {
   struct __anonstruct_416 __anonCompField___anonunion_415_59 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_415 __anonCompField_lockref_60 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_418 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_417 {
   struct __anonstruct_418 __anonCompField___anonunion_417_61 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_417 __anonCompField_qstr_62 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_419 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_420 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_419 __anonCompField_dentry_63 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_420 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_428 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_428 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_429 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_430 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_429 __anonCompField_io_cq_64 ;
   union __anonunion_430 __anonCompField_io_cq_65 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_431 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_431 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_432 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_432 __anonCompField_kqid_66 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_434 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_433 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_434 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_433 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_437 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_438 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_439 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_440 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_437 __anonCompField_inode_67 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_438 __anonCompField_inode_68 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_439 __anonCompField_inode_69 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_440 __anonCompField_inode_70 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_441 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_441 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_443 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_442 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_443 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_442 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 2889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
typedef enum irqreturn irqreturn_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_455 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_455 __anonCompField_pci_dev_71 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_463 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_465 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_464 {
   unsigned long nr_segs ;
   struct __anonstruct_465 __anonCompField___anonunion_464_73 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_463 __anonCompField_iov_iter_72 ;
   union __anonunion_464 __anonCompField_iov_iter_74 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_468 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_468 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_469 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_469 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_470 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_470 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_471 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_471 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_472 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_472 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_473 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_473 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_474 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_474 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_475 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_475 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_476 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_477 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_476 ifr_ifrn ;
   union __anonunion_ifr_ifru_477 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_11223 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_11223 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_512 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_512 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_513 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_513 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_524 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_525 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_526 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_527 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_524 ports ;
   struct __anonstruct_icmpt_525 icmpt ;
   struct __anonstruct_dnports_526 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_527 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_528 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_528 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_534 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_535 __anonCompField___anonstruct_534_90 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   struct __anonstruct_534 __anonCompField___anonunion_533_91 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_536 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_537 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_539 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   struct __anonstruct_539 __anonCompField___anonunion_538_95 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_541 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   __wsum csum ;
   struct __anonstruct_541 __anonCompField___anonunion_540_97 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_543 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_544 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_533 __anonCompField_sk_buff_92 ;
   union __anonunion_536 __anonCompField_sk_buff_93 ;
   union __anonunion_537 __anonCompField_sk_buff_94 ;
   char cb[48U] ;
   union __anonunion_538 __anonCompField_sk_buff_96 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_540 __anonCompField_sk_buff_98 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_542 __anonCompField_sk_buff_99 ;
   __u32 secmark ;
   union __anonunion_543 __anonCompField_sk_buff_100 ;
   union __anonunion_544 __anonCompField_sk_buff_101 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_570 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_570 __anonCompField_ethtool_rxnfc_103 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_573 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_573 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_574 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_574 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_575 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_575 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_576 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_576 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_577 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_577 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_579 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_579 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_592 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct __anonstruct_592 __anonCompField___anonunion_591_104 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_591 __anonCompField_keyring_index_key_105 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_594 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   struct keyring_index_key index_key ;
   struct __anonstruct_596 __anonCompField___anonunion_595_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_598 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_597 {
   union key_payload payload ;
   struct __anonstruct_598 __anonCompField___anonunion_597_110 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_593 __anonCompField_key_106 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_594 __anonCompField_key_107 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_595 __anonCompField_key_109 ;
   union __anonunion_597 __anonCompField_key_111 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_601 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_601 __anonCompField_cred_112 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_602 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_602 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_604 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_603 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_604 __anonCompField___anonunion_603_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_603 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_608 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_608 __anonCompField___anonstruct_607_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_610 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_612 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_614 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_613 {
   union __anonunion_614 __anonCompField___anonstruct_613_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_615 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_616 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_617 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_618 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_619 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_606 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_610 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_611 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_612 test ;
   struct __anonstruct_613 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_615 info ;
   struct __anonstruct_query_616 query ;
   struct __anonstruct_raw_tracepoint_617 raw_tracepoint ;
   struct __anonstruct_618 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_619 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_646 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_646 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_648 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct __anonstruct_tail_call_648 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_647 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_649 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_649 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_651 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_651 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_653 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_652 {
   struct __anonstruct_653 __anonCompField___anonunion_652_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_652 __anonCompField_sock_cgroup_data_154 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_676 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_676 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_682 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_683 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_684 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   struct __anonstruct_681 __anonCompField___anonunion_680_157 ;
   struct __anonstruct_682 __anonCompField___anonunion_680_158 ;
   struct __anonstruct_683 __anonCompField___anonunion_680_159 ;
   struct __anonstruct_xsk_684 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_680 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15274 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15275 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_685 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_686 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_685 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15274 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15275 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_686 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_697 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_697 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_698 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_698 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_701 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_702 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_704 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_705 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_703 {
   struct __anonstruct_elv_704 elv ;
   struct __anonstruct_flush_705 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_706 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_701 __anonCompField_request_164 ;
   union __anonunion_702 __anonCompField_request_165 ;
   union __anonunion_703 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_706 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_729 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_728 {
   void *validation_data ;
   struct __anonstruct_729 __anonCompField___anonunion_728_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_728 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_803 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_804 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_802 {
   struct __anonstruct_803 __anonCompField___anonunion_802_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_804 __anonCompField___anonunion_802_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_802 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_806 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_806 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_819 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_819 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_841 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_841 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_843 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   __addrpair skc_addrpair ;
   struct __anonstruct_843 __anonCompField___anonunion_842_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_844 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_846 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   __portpair skc_portpair ;
   struct __anonstruct_846 __anonCompField___anonunion_845_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_844 __anonCompField_sock_common_179 ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_847 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_848 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_849 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_850 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_851 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_852 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_852 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_853 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_854 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_889 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_889 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
struct e1000_adapter;
#line 527 
struct e1000_hw;
#line 528 
struct e1000_hw_stats;
#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
typedef int e1000_mac_type;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_eeprom_type;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_media_type;
#line 62 
enum ldv_19219 {
    E1000_FC_NONE = 0,
    E1000_FC_RX_PAUSE = 1,
    E1000_FC_TX_PAUSE = 2,
    E1000_FC_FULL = 3,
    E1000_FC_DEFAULT = 255
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef enum ldv_19219 e1000_fc_type;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct e1000_shadow_ram {
   u16 eeprom_word ;
   bool modified ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_bus_type;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_bus_speed;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_bus_width;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_cable_length;
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_10bt_ext_dist_enable;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_rev_polarity;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_downshift;
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_smart_speed;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_polarity_reversal;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_auto_x_mode;
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_1000t_rx_status;
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_phy_type;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_ms_type;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_ffe_config;
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
typedef int e1000_dsp_config;
#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct e1000_phy_info {
   e1000_cable_length cable_length ;
   e1000_10bt_ext_dist_enable extended_10bt_distance ;
   e1000_rev_polarity cable_polarity ;
   e1000_downshift downshift ;
   e1000_polarity_reversal polarity_correction ;
   e1000_auto_x_mode mdix_mode ;
   e1000_1000t_rx_status local_rx ;
   e1000_1000t_rx_status remote_rx ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct e1000_phy_stats {
   u32 idle_errors ;
   u32 receive_errors ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct e1000_eeprom_info {
   e1000_eeprom_type type ;
   u16 word_size ;
   u16 opcode_bits ;
   u16 address_bits ;
   u16 delay_usec ;
   u16 page_size ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct e1000_host_mng_dhcp_cookie {
   u32 signature ;
   u8 status ;
   u8 reserved0 ;
   u16 vlan_id ;
   u32 reserved1 ;
   u16 reserved2 ;
   u8 reserved3 ;
   u8 checksum ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct e1000_rx_desc {
   __le64 buffer_addr ;
   __le16 length ;
   __le16 csum ;
   u8 status ;
   u8 errors ;
   __le16 special ;
};
#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct __anonstruct_flags_975 {
   __le16 length ;
   u8 cso ;
   u8 cmd ;
};
#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
union __anonunion_lower_974 {
   __le32 data ;
   struct __anonstruct_flags_975 flags ;
};
#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct __anonstruct_fields_977 {
   u8 status ;
   u8 css ;
   __le16 special ;
};
#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
union __anonunion_upper_976 {
   __le32 data ;
   struct __anonstruct_fields_977 fields ;
};
#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct e1000_tx_desc {
   __le64 buffer_addr ;
   union __anonunion_lower_974 lower ;
   union __anonunion_upper_976 upper ;
};
#line 1252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct e1000_hw_stats {
   u64 crcerrs ;
   u64 algnerrc ;
   u64 symerrs ;
   u64 rxerrc ;
   u64 txerrc ;
   u64 mpc ;
   u64 scc ;
   u64 ecol ;
   u64 mcc ;
   u64 latecol ;
   u64 colc ;
   u64 dc ;
   u64 tncrs ;
   u64 sec ;
   u64 cexterr ;
   u64 rlec ;
   u64 xonrxc ;
   u64 xontxc ;
   u64 xoffrxc ;
   u64 xofftxc ;
   u64 fcruc ;
   u64 prc64 ;
   u64 prc127 ;
   u64 prc255 ;
   u64 prc511 ;
   u64 prc1023 ;
   u64 prc1522 ;
   u64 gprc ;
   u64 bprc ;
   u64 mprc ;
   u64 gptc ;
   u64 gorcl ;
   u64 gorch ;
   u64 gotcl ;
   u64 gotch ;
   u64 rnbc ;
   u64 ruc ;
   u64 rfc ;
   u64 roc ;
   u64 rlerrc ;
   u64 rjc ;
   u64 mgprc ;
   u64 mgpdc ;
   u64 mgptc ;
   u64 torl ;
   u64 torh ;
   u64 totl ;
   u64 toth ;
   u64 tpr ;
   u64 tpt ;
   u64 ptc64 ;
   u64 ptc127 ;
   u64 ptc255 ;
   u64 ptc511 ;
   u64 ptc1023 ;
   u64 ptc1522 ;
   u64 mptc ;
   u64 bptc ;
   u64 tsctc ;
   u64 tsctfc ;
   u64 iac ;
   u64 icrxptc ;
   u64 icrxatc ;
   u64 ictxptc ;
   u64 ictxatc ;
   u64 ictxqec ;
   u64 ictxqmtc ;
   u64 icrxdmtc ;
   u64 icrxoc ;
};
#line 1325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct e1000_hw {
   u8 *hw_addr ;
   u8 *flash_address ;
   void *ce4100_gbe_mdio_base_virt ;
   e1000_mac_type mac_type ;
   e1000_phy_type phy_type ;
   u32 phy_init_script ;
   e1000_media_type media_type ;
   void *back ;
   struct e1000_shadow_ram *eeprom_shadow_ram ;
   u32 flash_bank_size ;
   u32 flash_base_addr ;
   e1000_fc_type fc ;
   e1000_bus_speed bus_speed ;
   e1000_bus_width bus_width ;
   e1000_bus_type bus_type ;
   struct e1000_eeprom_info eeprom ;
   e1000_ms_type master_slave ;
   e1000_ms_type original_master_slave ;
   e1000_ffe_config ffe_config_state ;
   u32 asf_firmware_present ;
   u32 eeprom_semaphore_present ;
   unsigned long io_base ;
   u32 phy_id ;
   u32 phy_revision ;
   u32 phy_addr ;
   u32 original_fc ;
   u32 txcw ;
   u32 autoneg_failed ;
   u32 max_frame_size ;
   u32 min_frame_size ;
   u32 mc_filter_type ;
   u32 num_mc_addrs ;
   u32 collision_delta ;
   u32 tx_packet_delta ;
   u32 ledctl_default ;
   u32 ledctl_mode1 ;
   u32 ledctl_mode2 ;
   bool tx_pkt_filtering ;
   struct e1000_host_mng_dhcp_cookie mng_cookie ;
   u16 phy_spd_default ;
   u16 autoneg_advertised ;
   u16 pci_cmd_word ;
   u16 fc_high_water ;
   u16 fc_low_water ;
   u16 fc_pause_time ;
   u16 current_ifs_val ;
   u16 ifs_min_val ;
   u16 ifs_max_val ;
   u16 ifs_step_size ;
   u16 ifs_ratio ;
   u16 device_id ;
   u16 vendor_id ;
   u16 subsystem_id ;
   u16 subsystem_vendor_id ;
   u8 revision_id ;
   u8 autoneg ;
   u8 mdix ;
   u8 forced_speed_duplex ;
   u8 wait_autoneg_complete ;
   u8 dma_fairness ;
   u8 mac_addr[6U] ;
   u8 perm_mac_addr[6U] ;
   bool disable_polarity_correction ;
   bool speed_downgraded ;
   e1000_smart_speed smart_speed ;
   e1000_dsp_config dsp_config_state ;
   bool get_link_status ;
   bool serdes_has_link ;
   bool tbi_compatibility_en ;
   bool tbi_compatibility_on ;
   bool laa_is_present ;
   bool phy_reset_disable ;
   bool initialize_hw_bits_disable ;
   bool fc_send_xon ;
   bool fc_strict_ieee ;
   bool report_tx_early ;
   bool adaptive_ifs ;
   bool ifs_params_forced ;
   bool in_ifs_mode ;
   bool mng_reg_access_disabled ;
   bool leave_av_bit_off ;
   bool bad_tx_carr_stats_fd ;
   bool has_smbus ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000.h"
struct e1000_tx_buffer {
   struct sk_buff *skb ;
   dma_addr_t dma ;
   unsigned long time_stamp ;
   u16 length ;
   u16 next_to_watch ;
   bool mapped_as_page ;
   unsigned short segs ;
   unsigned int bytecount ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000.h"
union __anonunion_rxbuf_988 {
   struct page *page ;
   u8 *data ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000.h"
struct e1000_rx_buffer {
   union __anonunion_rxbuf_988 rxbuf ;
   dma_addr_t dma ;
};
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000.h"
struct e1000_tx_ring {
   void *desc ;
   dma_addr_t dma ;
   unsigned int size ;
   unsigned int count ;
   unsigned int next_to_use ;
   unsigned int next_to_clean ;
   struct e1000_tx_buffer *buffer_info ;
   u16 tdh ;
   u16 tdt ;
   bool last_tx_tso ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000.h"
struct e1000_rx_ring {
   void *desc ;
   dma_addr_t dma ;
   unsigned int size ;
   unsigned int count ;
   unsigned int next_to_use ;
   unsigned int next_to_clean ;
   struct e1000_rx_buffer *buffer_info ;
   struct sk_buff *rx_skb_top ;
   int cpu ;
   u16 rdh ;
   u16 rdt ;
};
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000.h"
struct e1000_adapter {
   unsigned long active_vlans[64U] ;
   u16 mng_vlan_id ;
   u32 bd_number ;
   u32 rx_buffer_len ;
   u32 wol ;
   u32 smartspeed ;
   u32 en_mng_pt ;
   u16 link_speed ;
   u16 link_duplex ;
   spinlock_t stats_lock ;
   unsigned int total_tx_bytes ;
   unsigned int total_tx_packets ;
   unsigned int total_rx_bytes ;
   unsigned int total_rx_packets ;
   u32 itr ;
   u32 itr_setting ;
   u16 tx_itr ;
   u16 rx_itr ;
   u8 fc_autoneg ;
   struct e1000_tx_ring *tx_ring ;
   unsigned int restart_queue ;
   u32 txd_cmd ;
   u32 tx_int_delay ;
   u32 tx_abs_int_delay ;
   u32 gotcl ;
   u64 gotcl_old ;
   u64 tpt_old ;
   u64 colc_old ;
   u32 tx_timeout_count ;
   u32 tx_fifo_head ;
   u32 tx_head_addr ;
   u32 tx_fifo_size ;
   u8 tx_timeout_factor ;
   atomic_t tx_fifo_stall ;
   bool pcix_82544 ;
   bool detect_tx_hung ;
   bool dump_buffers ;
   bool (*clean_rx)(struct e1000_adapter *, struct e1000_rx_ring *, int *, int ) ;
   void (*alloc_rx_buf)(struct e1000_adapter *, struct e1000_rx_ring *, int ) ;
   struct e1000_rx_ring *rx_ring ;
   struct napi_struct napi ;
   int num_tx_queues ;
   int num_rx_queues ;
   u64 hw_csum_err ;
   u64 hw_csum_good ;
   u32 alloc_rx_buff_failed ;
   u32 rx_int_delay ;
   u32 rx_abs_int_delay ;
   bool rx_csum ;
   u32 gorcl ;
   u64 gorcl_old ;
   struct net_device *netdev ;
   struct pci_dev *pdev ;
   struct e1000_hw hw ;
   struct e1000_hw_stats stats ;
   struct e1000_phy_info phy_info ;
   struct e1000_phy_stats phy_stats ;
   u32 test_icr ;
   struct e1000_tx_ring test_tx_ring ;
   struct e1000_rx_ring test_rx_ring ;
   int msg_enable ;
   bool tso_force ;
   bool smart_power_down ;
   bool quad_port_a ;
   unsigned long flags ;
   u32 eeprom_wol ;
   int bars ;
   int need_ioport ;
   bool discarding ;
   struct work_struct reset_task ;
   struct delayed_work watchdog_task ;
   struct delayed_work fifo_stall_task ;
   struct delayed_work phy_info_task ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
struct e1000_stats {
   char stat_string[32U] ;
   int type ;
   int sizeof_stat ;
   int stat_offset ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_1002 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_1002 key ;
} __attribute__((__aligned__(8)));
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
enum system_states {
    SYSTEM_BOOTING = 0,
    SYSTEM_SCHEDULING = 1,
    SYSTEM_RUNNING = 2,
    SYSTEM_HALT = 3,
    SYSTEM_POWER_OFF = 4,
    SYSTEM_RESTART = 5,
    SYSTEM_SUSPEND = 6
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_1060 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_1062 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_1142 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_1450 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_1452 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mii.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct __anonstruct_ip_fields_1972 {
   u8 ipcss ;
   u8 ipcso ;
   __le16 ipcse ;
};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
union __anonunion_lower_setup_1971 {
   __le32 ip_config ;
   struct __anonstruct_ip_fields_1972 ip_fields ;
};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct __anonstruct_tcp_fields_1974 {
   u8 tucss ;
   u8 tucso ;
   __le16 tucse ;
};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
union __anonunion_upper_setup_1973 {
   __le32 tcp_config ;
   struct __anonstruct_tcp_fields_1974 tcp_fields ;
};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct __anonstruct_fields_1976 {
   u8 status ;
   u8 hdr_len ;
   __le16 mss ;
};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
union __anonunion_tcp_seg_setup_1975 {
   __le32 data ;
   struct __anonstruct_fields_1976 fields ;
};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
struct e1000_context_desc {
   union __anonunion_lower_setup_1971 lower_setup ;
   union __anonunion_upper_setup_1973 upper_setup ;
   __le32 cmd_and_length ;
   union __anonunion_tcp_seg_setup_1975 tcp_seg_setup ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_2007 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_2007 __anonCompField_ip_ra_chain_196 ;
   struct callback_head rcu ;
};
#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2015 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2017 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 2181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2019 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 2181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2021 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 2507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2023 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 2507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2025 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 3078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2027 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 3078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2029 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 3090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2031 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 3090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2033 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 3404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
struct my_u {
   __le64 a ;
   __le64 b ;
};
#line 3446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
struct my_u_0 {
   __le64 a ;
   __le64 b ;
};
#line 3868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2035 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 3873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2037 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 3873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2039 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 4297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2041 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 4297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2043 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 4470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2045 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 4470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
union __anonunion___u_2047 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
enum ldv_19499 {
    enable_option = 0,
    range_option = 1,
    list_option = 2
};
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
struct e1000_opt_list {
   int i ;
   char *str ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
struct __anonstruct_r_3037 {
   int min ;
   int max ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
struct __anonstruct_l_3038 {
   int nr ;
   struct e1000_opt_list *p ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
union __anonunion_arg_3036 {
   struct __anonstruct_r_3037 r ;
   struct __anonstruct_l_3038 l ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
struct e1000_option {
   enum ldv_19499 type ;
   char *name ;
   char *err ;
   int def ;
   union __anonunion_arg_3036 arg ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_5809 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_5809 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_5810 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_5810 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_5826 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_5826 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_5830 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_5830 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_5831 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_5832 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_5831 __anonCompField_media_link_90 ;
   union __anonunion_5832 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_5834 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_5833 {
   struct __anonstruct_dev_5834 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_5833 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_5848 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_5849 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_5847 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_5848 i2c ;
   struct __anonstruct_custom_5849 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_5847 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_6750 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_6750 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_4 {
   int arg0 ;
   int signal_pending ;
};
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_e1000_test_intr_12 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_13 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_e1000_driver_14 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 251  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 258  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 59 
#line 59 
char *strchr(char *, int);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26 
#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
__inline static bool device_can_wakeup(struct device *dev)
{
  #line 79 
  return (_Bool)((int)dev->power.can_wakeup != 0);
}

#line 108 
#line 108 
int device_set_wakeup_enable(struct device *, bool);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 930  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 938  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 582  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 589  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 596  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 617  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 60 
#line 60 
unsigned long msleep_interruptible(unsigned int);
#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1023 
void consume_skb(struct sk_buff *);
#line 1032 
#line 1032 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  #line 1049 
  return __alloc_skb(size,priority,0,-1);
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 87 
int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);
#line 173 
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 177 
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 4713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static char *netdev_name(struct net_device *dev)
{
  #line 4715 
  if ((int)dev->name[0] == 0) 
                              #line 4716 
                              return (char *)"(unnamed net_device)";
  else {
    #line 4715 
    if (strchr((char *)(& dev->name),37) != (char *)0) 
                                                       #line 4716 
                                                       return (char *)"(unnamed net_device)";
  }
  #line 4717 
  return (char *)(& dev->name);
}

#line 4725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static char *netdev_reg_state(struct net_device *dev)
{
  #line 4727 
  switch ((int)dev->reg_state) {
    #line 4728 
    case 0: 
            #line 4728 
    ;
    #line 4728 
    return (char *)" (uninitialized)";
    #line 4729 
    case 1: 
            #line 4729 
    ;
    #line 4729 
    return (char *)"";
    #line 4730 
    case 2: 
            #line 4730 
    ;
    #line 4730 
    return (char *)" (unregistering)";
    #line 4731 
    case 3: 
            #line 4731 
    ;
    #line 4731 
    return (char *)" (unregistered)";
    #line 4732 
    case 4: 
            #line 4732 
    ;
    #line 4732 
    return (char *)" (released)";
    #line 4733 
    case 5: 
            #line 4733 
    ;
    #line 4733 
    return (char *)" (dummy)";
  }
  {
    #line 4736 
    bool __warned;
    #line 4736 
    int __ret_warn_once = 1;
    #line 4736 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 4736 
      __warned = (_Bool)1;
      {
        #line 4736 
        int __ret_warn_on = 1;
        #line 4736 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 4736 
          __warn_printk((char *)"%s: unknown reg_state %d\n",(char *)(& dev->name),(int)dev->reg_state);
          #line 4737 
          ldv_inline_asm();
          #line 4738 
          ldv_inline_asm();
        }
        #line 4736 
        long tmp = (long)(__ret_warn_on != 0);
      }
    }
    #line 4736 
    long tmp_3 = (long)(__ret_warn_once != 0);
  }
  #line 4737 
  return (char *)" (unknown)";
}

#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
#line 273 
s32 e1000_setup_link(struct e1000_hw *hw);
#line 276 
#line 276 
s32 e1000_check_for_link(struct e1000_hw *hw);
#line 277 
#line 277 
s32 e1000_get_speed_and_duplex(struct e1000_hw *hw, u16 *speed, u16 *duplex);
#line 278 
#line 278 
s32 e1000_force_mac_fc(struct e1000_hw *hw);
#line 281 
#line 281 
s32 e1000_read_phy_reg(struct e1000_hw *hw, u32 reg_addr, u16 *phy_data);
#line 282 
#line 282 
s32 e1000_write_phy_reg(struct e1000_hw *hw, u32 reg_addr, u16 phy_data);
#line 284 
#line 284 
s32 e1000_phy_reset(struct e1000_hw *hw);
#line 347 
#line 347 
s32 e1000_read_eeprom(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);
#line 349 
#line 349 
s32 e1000_update_eeprom_checksum(struct e1000_hw *hw);
#line 350 
#line 350 
s32 e1000_write_eeprom(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);
#line 360 
#line 360 
s32 e1000_setup_led(struct e1000_hw *hw);
#line 361 
#line 361 
s32 e1000_cleanup_led(struct e1000_hw *hw);
#line 362 
#line 362 
s32 e1000_led_on(struct e1000_hw *hw);
#line 363 
#line 363 
s32 e1000_led_off(struct e1000_hw *hw);
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000.h"
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
char e1000_driver_name[6U];
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000.h"
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
char e1000_driver_version[15U];
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000.h"
#line 335 
int e1000_open(struct net_device *netdev);
#line 336 
#line 336 
int e1000_close(struct net_device *netdev);
#line 337 
#line 337 
int e1000_up(struct e1000_adapter *adapter);
#line 338 
#line 338 
void e1000_down(struct e1000_adapter *adapter);
#line 339 
#line 339 
void e1000_reinit_locked(struct e1000_adapter *adapter);
#line 340 
#line 340 
void e1000_reset(struct e1000_adapter *adapter);
#line 341 
#line 341 
int e1000_set_spd_dplx(struct e1000_adapter *adapter, u32 spd, u8 dplx);
#line 342 
#line 342 
int e1000_setup_all_rx_resources(struct e1000_adapter *adapter);
#line 343 
#line 343 
int e1000_setup_all_tx_resources(struct e1000_adapter *adapter);
#line 344 
#line 344 
void e1000_free_all_rx_resources(struct e1000_adapter *adapter);
#line 345 
#line 345 
void e1000_free_all_tx_resources(struct e1000_adapter *adapter);
#line 346 
#line 346 
void e1000_update_stats(struct e1000_adapter *adapter);
#line 347 
#line 347 
bool e1000_has_link(struct e1000_adapter *adapter);
#line 348 
#line 348 
void e1000_power_up_phy(struct e1000_adapter *adapter);
#line 349 
#line 1883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
void e1000_set_ethtool_ops(struct net_device *netdev);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static struct e1000_stats e1000_gstrings_stats[46U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1728}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1752}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1760}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1776}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1736}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1968}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1744}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1960}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1536}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1544}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 320}, {.stat_string = {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1744}, {.stat_string = {(char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1592}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1824}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 352}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1512}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 368}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'n', (char)'o', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1792}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'i', (char)'s', (char)'s', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1552}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1568}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1608}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 408}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'e', (char)'a', (char)'r', (char)'t', (char)'b', (char)'e', (char)'a', (char)'t', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 416}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'w', (char)'i', (char)'n', (char)'d', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1584}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1584}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'e', (char)'d', (char)'_', (char)'o', (char)'k'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1600}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'_', (char)'o', (char)'k'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1560}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'_', (char)'o', (char)'k'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1576}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .type = 1, .sizeof_stat = 4, .stat_offset = 704}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'r', (char)'e', (char)'s', (char)'t', (char)'a', (char)'r', (char)'t', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}, .type = 1, .sizeof_stat = 4, .stat_offset = 656}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1816}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'h', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1800}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1520}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'e', (char)'g', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1976}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'e', (char)'g', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1984}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1640}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1656}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1648}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1664}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1760}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1168}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1160}, {.stat_string = {(char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1176}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1856}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1840}, {.stat_string = {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1848}};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static char e1000_gstrings_test[5U][32U] = {{(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'E', (char)'e', (char)'p', (char)'r', (char)'o', (char)'m', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'n', (char)'/', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 91 
  u32 supported;
  #line 91 
  u32 advertising;
  #line 89 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 90 
  struct e1000_hw *hw = & adapter->hw;
  #line 93 
  if (hw->media_type == (unsigned int)0) {
    #line 94 
    supported = 239U;
    #line 101 
    advertising = 128U;
    #line 103 
    if ((unsigned int)hw->autoneg == 1U) {
      #line 104 
      advertising |= 64U;
      #line 106 
      advertising = (unsigned int)hw->autoneg_advertised | advertising;
    }
    #line 109 
    cmd->base.port = (unsigned char)0U;
    #line 110 
    cmd->base.phy_address = (unsigned char)hw->phy_addr;
  }
  else {
    #line 112 
    supported = 1120U;
    #line 116 
    advertising = 1120U;
    #line 120 
    cmd->base.port = (unsigned char)3U;
  }
  #line 123 
  if ((readl((void *)(hw->hw_addr + 8U)) & 2U) != 0U) {
    #line 124 
    e1000_get_speed_and_duplex(hw,& adapter->link_speed,& adapter->link_duplex);
    #line 126 
    cmd->base.speed = (unsigned int)adapter->link_speed;
    #line 131 
    if ((unsigned int)adapter->link_duplex == 2U) 
                                                  #line 132 
                                                  cmd->base.duplex = (unsigned char)1U; else 
                                                                    #line 134 
                                                                    cmd->base.duplex = (unsigned char)0U;
  }
  else {
    #line 136 
    cmd->base.speed = 4294967295U;
    #line 137 
    cmd->base.duplex = (unsigned char)255U;
  }
  #line 140 
  cmd->base.autoneg = (unsigned char)((hw->media_type == (unsigned int)1 || (unsigned int)hw->autoneg != 0U) != 0);
  #line 144 
  if (hw->media_type == (unsigned int)0) {
    #line 144 
    if ((int)netif_carrier_ok(netdev) != 0) 
      #line 146 
      if (adapter->phy_info.mdix_mode != (unsigned int)0) 
                                                          #line 146 
                                                          cmd->base.eth_tp_mdix = (unsigned char)2U; else 
                                                                    #line 146 
                                                                    cmd->base.eth_tp_mdix = (unsigned char)1U;
    else 
         #line 149 
         cmd->base.eth_tp_mdix = (unsigned char)0U;
  }
  else 
       #line 149 
       cmd->base.eth_tp_mdix = (unsigned char)0U;
  #line 151 
  if ((unsigned int)hw->mdix == 0U) 
                                    #line 152 
                                    cmd->base.eth_tp_mdix_ctrl = (unsigned char)3U; else 
                                                                    #line 154 
                                                                    cmd->base.eth_tp_mdix_ctrl = hw->mdix;
  #line 156 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),supported);
  #line 158 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),advertising);
  #line 161 
  return 0;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_set_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 169 
  u32 advertising;
  #line 167 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 168 
  struct e1000_hw *hw = & adapter->hw;
  #line 171 
  ethtool_convert_link_mode_to_legacy_u32(& advertising,(unsigned long *)(& cmd->link_modes.advertising));
  #line 178 
  if ((unsigned int)cmd->base.eth_tp_mdix_ctrl != 0U) {
    #line 179 
    if (hw->media_type != (unsigned int)0) 
                                           #line 180 
                                           return -95;
    #line 182 
    if ((unsigned int)cmd->base.eth_tp_mdix_ctrl != 3U && (unsigned int)cmd->base.autoneg != 1U) {
      #line 184 
      if ((adapter->msg_enable & 1) != 0) 
                                          #line 184 
                                          netdev_err(adapter->netdev,(char *)"forcing MDI/MDI-X state is not supported when link speed and/or duplex are forced\n");
      #line 185 
      return -22;
    }
  }
  #line 189 
  while (1) {
    #line 189 
    if (! ((int)test_and_set_bit(1L,& adapter->flags) != 0)) 
                                                             #line 189 
                                                             break;
    #line 190 
    msleep(1U);
  }
  #line 192 
  if ((unsigned int)cmd->base.autoneg == 1U) {
    #line 193 
    hw->autoneg = (unsigned char)1U;
    #line 194 
    if (hw->media_type == (unsigned int)1) 
                                           #line 195 
                                           hw->autoneg_advertised = (unsigned short)1120U; else 
                                                                    #line 199 
                                                                    hw->autoneg_advertised = (unsigned short)((unsigned int)((unsigned short)advertising) | 192U);
  }
  else {
    #line 203 
    u32 speed = cmd->base.speed;
    #line 205 
    if (e1000_set_spd_dplx(adapter,speed,
                           (unsigned char)((int)cmd->base.duplex)) != 0) {
      #line 206 
      cif_clear_bit(1L,& adapter->flags);
      #line 207 
      return -22;
    }
  }
  #line 212 
  if ((unsigned int)cmd->base.eth_tp_mdix_ctrl != 0U) 
    #line 213 
    if ((unsigned int)cmd->base.eth_tp_mdix_ctrl == 3U) 
                                                        #line 214 
                                                        hw->mdix = (unsigned char)0U; else 
                                                                    #line 216 
                                                                    hw->mdix = cmd->base.eth_tp_mdix_ctrl;
  #line 221 
  if ((int)netif_running(adapter->netdev) != 0) {
    #line 222 
    e1000_down(adapter);
    #line 223 
    e1000_up(adapter);
  }
  else 
       #line 225 
       e1000_reset(adapter);
  #line 227 
  cif_clear_bit(1L,& adapter->flags);
  #line 228 
  return 0;
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static u32 e1000_get_link(struct net_device *netdev)
{
  #line 233 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 241 
  if (! netif_carrier_ok(netdev)) 
                                  #line 242 
                                  adapter->hw.get_link_status = (_Bool)1;
  #line 244 
  return (unsigned int)e1000_has_link(adapter);
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 250 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 251 
  struct e1000_hw *hw = & adapter->hw;
  #line 253 
  pause->autoneg = (unsigned int)((unsigned int)adapter->fc_autoneg != 0U);
  #line 256 
  if (hw->fc == (unsigned int)E1000_FC_RX_PAUSE) 
                                                 #line 257 
                                                 pause->rx_pause = 1U;
  else 
    #line 258 
    if (hw->fc == (unsigned int)E1000_FC_TX_PAUSE) 
                                                   #line 259 
                                                   pause->tx_pause = 1U;
    else 
      #line 260 
      if (hw->fc == (unsigned int)E1000_FC_FULL) {
        #line 261 
        pause->rx_pause = 1U;
        #line 262 
        pause->tx_pause = 1U;
      }
  #line 264 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 269 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 270 
  struct e1000_hw *hw = & adapter->hw;
  #line 271 
  int retval = 0;
  #line 273 
  adapter->fc_autoneg = (unsigned char)pause->autoneg;
  #line 275 
  while (1) {
    #line 275 
    if (! ((int)test_and_set_bit(1L,& adapter->flags) != 0)) 
                                                             #line 275 
                                                             break;
    #line 276 
    msleep(1U);
  }
  #line 278 
  if (pause->rx_pause != 0U && pause->tx_pause != 0U) 
                                                      #line 279 
                                                      hw->fc = E1000_FC_FULL;
  else 
    #line 280 
    if (pause->rx_pause != 0U && pause->tx_pause == 0U) 
                                                        #line 281 
                                                        hw->fc = E1000_FC_RX_PAUSE;
    else 
      #line 282 
      if (pause->rx_pause == 0U && pause->tx_pause != 0U) 
                                                          #line 283 
                                                          hw->fc = E1000_FC_TX_PAUSE;
      else 
        #line 284 
        if (pause->rx_pause == 0U && pause->tx_pause == 0U) 
                                                            #line 285 
                                                            hw->fc = E1000_FC_NONE;
  #line 287 
  hw->original_fc = (unsigned int)hw->fc;
  #line 289 
  if ((unsigned int)adapter->fc_autoneg == 1U) {
    #line 290 
    if ((int)netif_running(adapter->netdev) != 0) {
      #line 291 
      e1000_down(adapter);
      #line 292 
      e1000_up(adapter);
    }
    else 
         #line 294 
         e1000_reset(adapter);
  }
  else 
    #line 297 
    if (hw->media_type == (unsigned int)1) 
                                           #line 297 
                                           retval = e1000_setup_link(hw); else 
                                                                    #line 298 
                                                                    retval = e1000_force_mac_fc(hw);
  #line 300 
  cif_clear_bit(1L,& adapter->flags);
  #line 301 
  return retval;
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static u32 e1000_get_msglevel(struct net_device *netdev)
{
  #line 306 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 308 
  return (unsigned int)adapter->msg_enable;
}

#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_set_msglevel(struct net_device *netdev, u32 data)
{
  #line 313 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 315 
  adapter->msg_enable = (int)data;
  #line 316 
  return;
}

#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_get_regs_len(struct net_device *netdev)
{
  #line 321 
  return 128;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_get_regs(struct net_device *netdev, struct ethtool_regs *regs, void *p)
{
  #line 330 
  u16 phy_data;
  #line 340 
  unsigned int tmp_0;
  #line 341 
  unsigned int tmp_1;
  #line 342 
  unsigned int tmp_2;
  #line 343 
  unsigned int tmp_3;
  #line 346 
  unsigned int tmp_4;
  #line 347 
  unsigned int tmp_5;
  #line 348 
  unsigned int tmp_6;
  #line 349 
  unsigned int tmp_7;
  #line 327 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 328 
  struct e1000_hw *hw = & adapter->hw;
  #line 329 
  u32 *regs_buff = (u32 *)p;
  #line 332 
  memset(p,0,128UL);
  #line 334 
  regs->version = (unsigned int)((((int)hw->revision_id << 16) | 16777216) | (int)hw->device_id);
  #line 336 
  *regs_buff = readl((void *)hw->hw_addr);
  #line 337 
  *(regs_buff + 1U) = readl((void *)(hw->hw_addr + 8U));
  #line 339 
  *(regs_buff + 2U) = readl((void *)(hw->hw_addr + 256U));
  #line 340 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 340 
                                      tmp_0 = 10248U; else 
                                                           #line 340 
                                                           tmp_0 = 280U;
  #line 340 
  ;
  #line 340 
  *(regs_buff + 3U) = readl((void *)(hw->hw_addr + tmp_0));
  #line 341 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 341 
                                      tmp_1 = 10256U; else 
                                                           #line 341 
                                                           tmp_1 = 288U;
  #line 341 
  ;
  #line 341 
  *(regs_buff + 4U) = readl((void *)(hw->hw_addr + tmp_1));
  #line 342 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 342 
                                      tmp_2 = 10264U; else 
                                                           #line 342 
                                                           tmp_2 = 296U;
  #line 342 
  ;
  #line 342 
  *(regs_buff + 5U) = readl((void *)(hw->hw_addr + tmp_2));
  #line 343 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 343 
                                      tmp_3 = 10272U; else 
                                                           #line 343 
                                                           tmp_3 = 264U;
  #line 343 
  ;
  #line 343 
  *(regs_buff + 6U) = readl((void *)(hw->hw_addr + tmp_3));
  #line 345 
  *(regs_buff + 7U) = readl((void *)(hw->hw_addr + 1024U));
  #line 346 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 346 
                                      tmp_4 = 14344U; else 
                                                           #line 346 
                                                           tmp_4 = 1064U;
  #line 346 
  ;
  #line 346 
  *(regs_buff + 8U) = readl((void *)(hw->hw_addr + tmp_4));
  #line 347 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 347 
                                      tmp_5 = 14352U; else 
                                                           #line 347 
                                                           tmp_5 = 1072U;
  #line 347 
  ;
  #line 347 
  *(regs_buff + 9U) = readl((void *)(hw->hw_addr + tmp_5));
  #line 348 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 348 
                                      tmp_6 = 14360U; else 
                                                           #line 348 
                                                           tmp_6 = 1080U;
  #line 348 
  ;
  #line 348 
  *(regs_buff + 10U) = readl((void *)(hw->hw_addr + tmp_6));
  #line 349 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 349 
                                      tmp_7 = 14368U; else 
                                                           #line 349 
                                                           tmp_7 = 1088U;
  #line 349 
  ;
  #line 349 
  *(regs_buff + 11U) = readl((void *)(hw->hw_addr + tmp_7));
  #line 351 
  *(regs_buff + 12U) = (unsigned int)hw->phy_type;
  #line 352 
  if (hw->phy_type == (unsigned int)1) {
    #line 353 
    e1000_write_phy_reg(hw,31U,(unsigned short)4466);
    #line 355 
    e1000_read_phy_reg(hw,18U,& phy_data);
    #line 357 
    *(regs_buff + 13U) = (unsigned int)phy_data;
    #line 358 
    e1000_write_phy_reg(hw,31U,(unsigned short)4722);
    #line 360 
    e1000_read_phy_reg(hw,18U,& phy_data);
    #line 362 
    *(regs_buff + 14U) = (unsigned int)phy_data;
    #line 363 
    e1000_write_phy_reg(hw,31U,(unsigned short)5234);
    #line 365 
    e1000_read_phy_reg(hw,18U,& phy_data);
    #line 367 
    *(regs_buff + 15U) = (unsigned int)phy_data;
    #line 368 
    e1000_write_phy_reg(hw,31U,(unsigned short)6258);
    #line 370 
    e1000_read_phy_reg(hw,18U,& phy_data);
    #line 372 
    *(regs_buff + 16U) = (unsigned int)phy_data;
    #line 373 
    *(regs_buff + 17U) = 0U;
    #line 374 
    e1000_write_phy_reg(hw,31U,(unsigned short)0);
    #line 375 
    e1000_read_phy_reg(hw,17U,& phy_data);
    #line 377 
    *(regs_buff + 18U) = (unsigned int)phy_data;
    #line 378 
    e1000_write_phy_reg(hw,31U,(unsigned short)180);
    #line 380 
    e1000_read_phy_reg(hw,20U,& phy_data);
    #line 382 
    *(regs_buff + 19U) = (unsigned int)phy_data;
    #line 383 
    *(regs_buff + 20U) = 0U;
    #line 384 
    *(regs_buff + 22U) = 0U;
    #line 385 
    *(regs_buff + 23U) = *(regs_buff + 18U);
    #line 386 
    e1000_write_phy_reg(hw,31U,(unsigned short)0);
  }
  else {
    #line 388 
    e1000_read_phy_reg(hw,17U,& phy_data);
    #line 389 
    *(regs_buff + 13U) = (unsigned int)phy_data;
    #line 390 
    *(regs_buff + 14U) = 0U;
    #line 391 
    *(regs_buff + 15U) = 0U;
    #line 392 
    *(regs_buff + 16U) = 0U;
    #line 393 
    e1000_read_phy_reg(hw,16U,& phy_data);
    #line 394 
    *(regs_buff + 17U) = (unsigned int)phy_data;
    #line 395 
    *(regs_buff + 18U) = *(regs_buff + 13U);
    #line 396 
    *(regs_buff + 19U) = 0U;
    #line 397 
    *(regs_buff + 20U) = *(regs_buff + 17U);
    #line 399 
    *(regs_buff + 22U) = adapter->phy_stats.receive_errors;
    #line 400 
    *(regs_buff + 23U) = *(regs_buff + 13U);
  }
  #line 402 
  *(regs_buff + 21U) = adapter->phy_stats.idle_errors;
  #line 403 
  e1000_read_phy_reg(hw,10U,& phy_data);
  #line 404 
  *(regs_buff + 24U) = (unsigned int)phy_data;
  #line 405 
  *(regs_buff + 25U) = *(regs_buff + 24U);
  #line 406 
  if (hw->mac_type > (unsigned int)4 && hw->media_type == (unsigned int)0) 
    #line 408 
    *(regs_buff + 26U) = readl((void *)(hw->hw_addr + 22560U));
  #line 409 
  return;
}

#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_get_eeprom_len(struct net_device *netdev)
{
  #line 414 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 415 
  struct e1000_hw *hw = & adapter->hw;
  #line 417 
  return (int)hw->eeprom.word_size * 2;
}

#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_get_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 425 
  u16 *eeprom_buff;
  #line 426 
  int first_word;
  #line 426 
  int last_word;
  #line 428 
  u16 i;
  #line 423 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 424 
  struct e1000_hw *hw = & adapter->hw;
  #line 427 
  int ret_val = 0;
  #line 430 
  if (eeprom->len == 0U) 
                         #line 431 
                         return -22;
  #line 433 
  eeprom->magic = (unsigned int)((int)hw->vendor_id | ((int)hw->device_id << 16));
  #line 435 
  first_word = (int)(eeprom->offset >> 1);
  #line 436 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  #line 438 
  eeprom_buff = (u16 *)kmalloc_array((unsigned long)((last_word - first_word) + 1),2UL,3264U);
  #line 440 
  if (eeprom_buff == (u16 *)0U) 
                                #line 441 
                                return -12;
  #line 443 
  if (hw->eeprom.type == (unsigned int)1) 
                                          #line 444 
                                          ret_val = e1000_read_eeprom(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  else {
    #line 448 
    i = (unsigned short)0U;
    #line 448 
    while (last_word - first_word >= (int)i) {
      #line 449 
      ret_val = e1000_read_eeprom(hw,(unsigned short)((int)((unsigned short)first_word) + (int)i),(unsigned short)1,eeprom_buff + (unsigned long)i);
      #line 451 
      if (ret_val != 0) 
                        #line 452 
                        break;
      #line 448 
      i = (u16)((int)i + 1);
    }
  }
  #line 457 
  i = (unsigned short)0U;
  #line 457 
  while (last_word - first_word >= (int)i) {
    #line 458 
    u16 *tmp_2 = eeprom_buff + (unsigned long)i;
    #line 457 
    i = (u16)((int)i + 1);
  }
  #line 460 
  memcpy((void *)bytes,(void *)((u8 *)eeprom_buff + ((unsigned long)eeprom->offset & (unsigned long)1U)),(unsigned long)eeprom->len);
  #line 462 
  kfree((void *)eeprom_buff);
  #line 464 
  return ret_val;
}

#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_set_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 472 
  u16 *eeprom_buff;
  #line 473 
  void *ptr;
  #line 474 
  int max_len;
  #line 474 
  int first_word;
  #line 474 
  int last_word;
  #line 475 
  u16 i;
  #line 470 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 471 
  struct e1000_hw *hw = & adapter->hw;
  #line 474 
  int ret_val = 0;
  #line 477 
  if (eeprom->len == 0U) 
                         #line 478 
                         return -95;
  #line 480 
  if (eeprom->magic != (unsigned int)((int)hw->vendor_id | ((int)hw->device_id << 16))) 
    #line 481 
    return -14;
  #line 483 
  max_len = (int)hw->eeprom.word_size * 2;
  #line 485 
  first_word = (int)(eeprom->offset >> 1);
  #line 486 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  #line 487 
  eeprom_buff = (u16 *)kmalloc((unsigned long)max_len,3264U);
  #line 488 
  if (eeprom_buff == (u16 *)0U) 
                                #line 489 
                                return -12;
  #line 491 
  ptr = (void *)eeprom_buff;
  #line 493 
  if ((eeprom->offset & 1U) != 0U) {
    #line 497 
    ret_val = e1000_read_eeprom(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)1,eeprom_buff);
    #line 499 
    ptr ++;
  }
  #line 501 
  if (((eeprom->offset + eeprom->len) & 1U) != 0U && ret_val == 0) 
                                                                   #line 505 
                                                                   ret_val = e1000_read_eeprom(hw,(unsigned short)((int)((unsigned short)last_word)),(unsigned short)1,eeprom_buff + (unsigned long)(last_word - first_word));
  #line 510 
  i = (unsigned short)0U;
  #line 510 
  while (last_word - first_word >= (int)i) {
    #line 511 
    u16 *tmp_2 = eeprom_buff + (unsigned long)i;
    #line 510 
    i = (u16)((int)i + 1);
  }
  #line 513 
  memcpy(ptr,(void *)bytes,(unsigned long)eeprom->len);
  #line 515 
  i = (unsigned short)0U;
  #line 515 
  while (last_word - first_word >= (int)i) {
    #line 516 
    *(eeprom_buff + (unsigned long)i) = *(eeprom_buff + (unsigned long)i);
    #line 515 
    i = (u16)((int)i + 1);
  }
  #line 518 
  ret_val = e1000_write_eeprom(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  #line 522 
  if (ret_val == 0 && first_word <= 63) 
                                        #line 523 
                                        e1000_update_eeprom_checksum(hw);
  #line 525 
  kfree((void *)eeprom_buff);
  #line 526 
  return ret_val;
}

#line 529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 532 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 534 
  strlcpy((char *)(& drvinfo->driver),(char *)(& e1000_driver_name),32UL);
  #line 536 
  strlcpy((char *)(& drvinfo->version),(char *)(& e1000_driver_version),32UL);
  #line 539 
  ;
  #line 539 
  strlcpy((char *)(& drvinfo->bus_info),pci_name(adapter->pdev),32UL);
  #line 540 
  return;
}

#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 546 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 547 
  struct e1000_hw *hw = & adapter->hw;
  #line 548 
  e1000_mac_type mac_type = hw->mac_type;
  #line 549 
  struct e1000_tx_ring *txdr = adapter->tx_ring;
  #line 550 
  struct e1000_rx_ring *rxdr = adapter->rx_ring;
  #line 552 
  if (mac_type <= (unsigned int)3) 
                                   #line 552 
                                   ring->rx_max_pending = 256U; else 
                                                                  #line 552 
                                                                  ring->rx_max_pending = 4096U;
  #line 554 
  if (mac_type <= (unsigned int)3) 
                                   #line 554 
                                   ring->tx_max_pending = 256U; else 
                                                                  #line 554 
                                                                  ring->tx_max_pending = 4096U;
  #line 556 
  ring->rx_pending = rxdr->count;
  #line 557 
  ring->tx_pending = txdr->count;
  #line 558 
  return;
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 600 
  __u32 __UNIQUE_ID___x540;
  #line 600 
  __u32 tmp_9;
  #line 601 
  unsigned int __UNIQUE_ID___x542;
  #line 601 
  unsigned int tmp_12;
  #line 596 
  __u32 __UNIQUE_ID___x536;
  #line 596 
  __u32 tmp_4;
  #line 597 
  unsigned int __UNIQUE_ID___x538;
  #line 597 
  unsigned int tmp_7;
  #line 566 
  struct e1000_tx_ring *txdr;
  #line 566 
  struct e1000_tx_ring *tx_old;
  #line 567 
  struct e1000_rx_ring *rxdr;
  #line 567 
  struct e1000_rx_ring *rx_old;
  #line 568 
  int i;
  #line 568 
  int err;
  #line 563 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 564 
  struct e1000_hw *hw = & adapter->hw;
  #line 565 
  e1000_mac_type mac_type = hw->mac_type;
  #line 570 
  if (ring->rx_mini_pending != 0U || ring->rx_jumbo_pending != 0U) 
                                                                   #line 571 
                                                                   return -22;
  #line 573 
  while (1) {
    #line 573 
    if (! ((int)test_and_set_bit(1L,& adapter->flags) != 0)) 
                                                             #line 573 
                                                             break;
    #line 574 
    msleep(1U);
  }
  #line 576 
  if ((int)netif_running(adapter->netdev) != 0) 
                                                #line 577 
                                                e1000_down(adapter);
  #line 579 
  tx_old = adapter->tx_ring;
  #line 580 
  rx_old = adapter->rx_ring;
  #line 582 
  err = -12;
  #line 583 
  txdr = (struct e1000_tx_ring *)kcalloc((unsigned long)adapter->num_tx_queues,48UL,3264U);
  #line 585 
  if (txdr == (struct e1000_tx_ring *)0) 
                                         #line 586 
                                         goto err_alloc_tx;
  #line 588 
  rxdr = (struct e1000_rx_ring *)kcalloc((unsigned long)adapter->num_rx_queues,56UL,3264U);
  #line 590 
  if (rxdr == (struct e1000_rx_ring *)0) 
                                         #line 591 
                                         goto err_alloc_rx;
  #line 593 
  adapter->tx_ring = txdr;
  #line 594 
  adapter->rx_ring = rxdr;
  {
    #line 596 
    __UNIQUE_ID___x536 = ring->rx_pending;
    #line 596 
    unsigned int __UNIQUE_ID___y537 = 48U;
    #line 596 
    if (__UNIQUE_ID___x536 > __UNIQUE_ID___y537) 
                                                 #line 596 
                                                 tmp_4 = __UNIQUE_ID___x536; else 
                                                                    #line 596 
                                                                    tmp_4 = __UNIQUE_ID___y537;
    }
  #line 596 
  rxdr->count = tmp_4;
  {
    #line 597 
    unsigned int tmp_6;
    #line 597 
    __UNIQUE_ID___x538 = rxdr->count;
    #line 597 
    if (mac_type <= (unsigned int)3) 
                                     #line 597 
                                     tmp_6 = 256U; else 
                                                        #line 597 
                                                        tmp_6 = 4096U;
    #line 597 
    unsigned int __UNIQUE_ID___y539 = tmp_6;
    #line 597 
    if (__UNIQUE_ID___x538 < __UNIQUE_ID___y539) 
                                                 #line 597 
                                                 tmp_7 = __UNIQUE_ID___x538; else 
                                                                    #line 597 
                                                                    tmp_7 = __UNIQUE_ID___y539;
    }
  #line 597 
  rxdr->count = tmp_7;
  #line 599 
  rxdr->count = (rxdr->count + 7U) & 4294967288U;
  {
    #line 600 
    __UNIQUE_ID___x540 = ring->tx_pending;
    #line 600 
    unsigned int __UNIQUE_ID___y541 = 48U;
    #line 600 
    if (__UNIQUE_ID___x540 > __UNIQUE_ID___y541) 
                                                 #line 600 
                                                 tmp_9 = __UNIQUE_ID___x540; else 
                                                                    #line 600 
                                                                    tmp_9 = __UNIQUE_ID___y541;
    }
  #line 600 
  txdr->count = tmp_9;
  {
    #line 601 
    unsigned int tmp_11;
    #line 601 
    __UNIQUE_ID___x542 = txdr->count;
    #line 601 
    if (mac_type <= (unsigned int)3) 
                                     #line 601 
                                     tmp_11 = 256U; else 
                                                         #line 601 
                                                         tmp_11 = 4096U;
    #line 601 
    unsigned int __UNIQUE_ID___y543 = tmp_11;
    #line 601 
    if (__UNIQUE_ID___x542 < __UNIQUE_ID___y543) 
                                                 #line 601 
                                                 tmp_12 = __UNIQUE_ID___x542; else 
                                                                    #line 601 
                                                                    tmp_12 = __UNIQUE_ID___y543;
    }
  #line 601 
  txdr->count = tmp_12;
  #line 603 
  txdr->count = (txdr->count + 7U) & 4294967288U;
  #line 605 
  i = 0;
  #line 605 
  while (adapter->num_tx_queues > i) {
    #line 606 
    (txdr + (unsigned long)i)->count = txdr->count;
    #line 605 
    i ++;
  }
  #line 607 
  i = 0;
  #line 607 
  while (adapter->num_rx_queues > i) {
    #line 608 
    (rxdr + (unsigned long)i)->count = rxdr->count;
    #line 607 
    i ++;
  }
  #line 610 
  err = 0;
  #line 611 
  if ((int)netif_running(adapter->netdev) != 0) {
    #line 613 
    err = e1000_setup_all_rx_resources(adapter);
    #line 614 
    if (err != 0) 
                  #line 615 
                  goto err_setup_rx;
    #line 616 
    err = e1000_setup_all_tx_resources(adapter);
    #line 617 
    if (err != 0) 
                  #line 618 
                  goto err_setup_tx;
    #line 624 
    adapter->rx_ring = rx_old;
    #line 625 
    adapter->tx_ring = tx_old;
    #line 626 
    e1000_free_all_rx_resources(adapter);
    #line 627 
    e1000_free_all_tx_resources(adapter);
    #line 628 
    adapter->rx_ring = rxdr;
    #line 629 
    adapter->tx_ring = txdr;
    #line 630 
    err = e1000_up(adapter);
  }
  #line 632 
  kfree((void *)tx_old);
  #line 633 
  kfree((void *)rx_old);
  #line 635 
  cif_clear_bit(1L,& adapter->flags);
  #line 636 
  return err;
  #line 638 
  err_setup_tx: 
                #line 638 
  ;
  #line 639 
  e1000_free_all_rx_resources(adapter);
  #line 640 
  err_setup_rx: 
                #line 640 
  ;
  #line 641 
  adapter->rx_ring = rx_old;
  #line 642 
  adapter->tx_ring = tx_old;
  #line 643 
  kfree((void *)rxdr);
  #line 644 
  err_alloc_rx: 
                #line 644 
  ;
  #line 645 
  kfree((void *)txdr);
  #line 646 
  err_alloc_tx: 
                #line 646 
  ;
  #line 647 
  if ((int)netif_running(adapter->netdev) != 0) 
                                                #line 648 
                                                e1000_up(adapter);
  #line 649 
  cif_clear_bit(1L,& adapter->flags);
  #line 650 
  return err;
}

#line 653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static bool reg_pattern_test(struct e1000_adapter *adapter, u64 *data, int reg, u32 mask, u32 write)
{
  #line 661 
  u32 read;
  #line 662 
  int i;
  #line 656 
  struct e1000_hw *hw = & adapter->hw;
  #line 657 
  u32 test[4U] = {1515870810U, 2779096485U, 0U, 4294967295U};
  #line 660 
  u8 *address = hw->hw_addr + (unsigned long)reg;
  #line 664 
  i = 0;
  #line 664 
  while ((unsigned int)i <= 3U) {
    #line 665 
    writel(test[i] & write,(void *)address);
    #line 666 
    read = readl((void *)address);
    #line 667 
    if (((test[i] & write) & mask) != read) {
      #line 668 
      if ((adapter->msg_enable & 1) != 0) 
                                          #line 668 
                                          netdev_err(adapter->netdev,(char *)"pattern test reg %04X failed: ",reg,read,(test[i] & write) & mask);
      #line 671 
      *data = (unsigned long long)reg;
      #line 672 
      return (_Bool)1;
    }
    #line 664 
    i ++;
  }
  #line 675 
  return (_Bool)0;
}

#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static bool reg_set_and_check(struct e1000_adapter *adapter, u64 *data, int reg, u32 mask, u32 write)
{
  #line 683 
  u32 read;
  #line 681 
  struct e1000_hw *hw = & adapter->hw;
  #line 682 
  u8 *address = hw->hw_addr + (unsigned long)reg;
  #line 685 
  writel(write & mask,(void *)address);
  #line 686 
  read = readl((void *)address);
  #line 687 
  if (((read ^ write) & mask) != 0U) {
    #line 688 
    if ((adapter->msg_enable & 1) != 0) 
                                        #line 688 
                                        netdev_err(adapter->netdev,(char *)"set/check reg %04X test failed: ",reg,read & mask,write & mask);
    #line 691 
    *data = (unsigned long long)reg;
    #line 692 
    return (_Bool)1;
  }
  #line 694 
  return (_Bool)0;
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_reg_test(struct e1000_adapter *adapter, u64 *data)
{
  #line 717 
  u32 value;
  #line 717 
  u32 before;
  #line 717 
  u32 after;
  #line 718 
  u32 i;
  #line 718 
  u32 toggle;
  #line 746 
  int tmp_5;
  #line 747 
  int tmp_7;
  #line 748 
  int tmp_9;
  #line 749 
  int tmp_11;
  #line 750 
  int tmp_13;
  #line 751 
  int tmp_15;
  #line 754 
  int tmp_19;
  #line 755 
  int tmp_21;
  #line 719 
  struct e1000_hw *hw = & adapter->hw;
  #line 726 
  toggle = 4294965299U;
  #line 728 
  before = readl((void *)(hw->hw_addr + 8U));
  #line 729 
  value = readl((void *)(hw->hw_addr + 8U)) & toggle;
  #line 730 
  writel(toggle,(void *)(hw->hw_addr + 8U));
  #line 731 
  after = readl((void *)(hw->hw_addr + 8U)) & toggle;
  #line 732 
  if (value != after) {
    #line 733 
    if ((adapter->msg_enable & 1) != 0) 
                                        #line 733 
                                        netdev_err(adapter->netdev,(char *)"failed STATUS register test got: ",after,value);
    #line 735 
    *data = 1ULL;
    #line 736 
    return 1;
  }
  #line 739 
  writel(before,(void *)(hw->hw_addr + 8U));
  #line 741 
  if ((int)reg_pattern_test(adapter,data,40,4294967295U,4294967295U) != 0) 
    #line 741 
    return 1;
  #line 742 
  if ((int)reg_pattern_test(adapter,data,44,65535U,4294967295U) != 0) 
    #line 742 
    return 1;
  #line 743 
  if ((int)reg_pattern_test(adapter,data,48,65535U,4294967295U) != 0) 
    #line 743 
    return 1;
  #line 744 
  if ((int)reg_pattern_test(adapter,data,56,65535U,4294967295U) != 0) 
    #line 744 
    return 1;
  #line 746 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 746 
                                      tmp_5 = 10272; else 
                                                          #line 746 
                                                          tmp_5 = 264;
  #line 746 
  ;
  #line 746 
  ;
  #line 746 
  if ((int)reg_pattern_test(adapter,data,tmp_5,65535U,4294967295U) != 0) 
    #line 746 
    return 1;
  #line 747 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 747 
                                      tmp_7 = 10244; else 
                                                          #line 747 
                                                          tmp_7 = 276;
  #line 747 
  ;
  #line 747 
  ;
  #line 747 
  if ((int)reg_pattern_test(adapter,data,tmp_7,4294967295U,4294967295U) != 0) 
    #line 747 
    return 1;
  #line 748 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 748 
                                      tmp_9 = 10248; else 
                                                          #line 748 
                                                          tmp_9 = 280;
  #line 748 
  ;
  #line 748 
  ;
  #line 748 
  if ((int)reg_pattern_test(adapter,data,tmp_9,1048448U,1048575U) != 0) 
    #line 748 
    return 1;
  #line 749 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 749 
                                      tmp_11 = 10256; else 
                                                           #line 749 
                                                           tmp_11 = 288;
  #line 749 
  ;
  #line 749 
  ;
  #line 749 
  if ((int)reg_pattern_test(adapter,data,tmp_11,65535U,65535U) != 0) 
    #line 749 
    return 1;
  #line 750 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 750 
                                      tmp_13 = 10264; else 
                                                           #line 750 
                                                           tmp_13 = 296;
  #line 750 
  ;
  #line 750 
  ;
  #line 750 
  if ((int)reg_pattern_test(adapter,data,tmp_13,65535U,65535U) != 0) 
    #line 750 
    return 1;
  #line 751 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 751 
                                      tmp_15 = 8552; else 
                                                          #line 751 
                                                          tmp_15 = 352;
  #line 751 
  ;
  #line 751 
  ;
  #line 751 
  if ((int)reg_pattern_test(adapter,data,tmp_15,65528U,65528U) != 0) 
    #line 751 
    return 1;
  #line 752 
  if ((int)reg_pattern_test(adapter,data,368,65535U,65535U) != 0) 
                                                                  #line 752 
                                                                  return 1;
  #line 753 
  if ((int)reg_pattern_test(adapter,data,1040,1073741823U,1073741823U) != 0) 
    #line 753 
    return 1;
  #line 754 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 754 
                                      tmp_19 = 14340; else 
                                                           #line 754 
                                                           tmp_19 = 1060;
  #line 754 
  ;
  #line 754 
  ;
  #line 754 
  if ((int)reg_pattern_test(adapter,data,tmp_19,4294967295U,4294967295U) != 0) 
    #line 754 
    return 1;
  #line 755 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 755 
                                      tmp_21 = 14344; else 
                                                           #line 755 
                                                           tmp_21 = 1064;
  #line 755 
  ;
  #line 755 
  ;
  #line 755 
  if ((int)reg_pattern_test(adapter,data,tmp_21,1048448U,1048575U) != 0) 
    #line 755 
    return 1;
  #line 757 
  if ((int)reg_set_and_check(adapter,data,256,4294967295U,0U) != 0) 
                                                                    #line 757 
                                                                    return 1;
  #line 759 
  before = 115323902U;
  #line 760 
  if ((int)reg_set_and_check(adapter,data,256,before,4194299U) != 0) 
    #line 760 
    return 1;
  #line 761 
  if ((int)reg_set_and_check(adapter,data,1024,4294967295U,0U) != 0) 
    #line 761 
    return 1;
  #line 763 
  if (hw->mac_type > (unsigned int)2) {
    #line 765 
    int tmp_27;
    #line 767 
    int tmp_30;
    #line 768 
    int tmp_32;
    #line 764 
    if ((int)reg_set_and_check(adapter,data,256,before,4294967295U) != 0) 
      #line 764 
      return 1;
    #line 765 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 765 
                                        tmp_27 = 10240; else 
                                                             #line 765 
                                                             tmp_27 = 272;
    #line 765 
    ;
    #line 765 
    ;
    #line 765 
    if ((int)reg_pattern_test(adapter,data,tmp_27,4294967280U,4294967295U) != 0) 
      #line 765 
      return 1;
    #line 766 
    if ((int)reg_pattern_test(adapter,data,376,3221291007U,65535U) != 0) 
      #line 766 
      return 1;
    #line 767 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 767 
                                        tmp_30 = 14336; else 
                                                             #line 767 
                                                             tmp_30 = 1056;
    #line 767 
    ;
    #line 767 
    ;
    #line 767 
    if ((int)reg_pattern_test(adapter,data,tmp_30,4294967280U,4294967295U) != 0) 
      #line 767 
      return 1;
    #line 768 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 768 
                                        tmp_32 = 14368; else 
                                                             #line 768 
                                                             tmp_32 = 1088;
    #line 768 
    ;
    #line 768 
    ;
    #line 768 
    if ((int)reg_pattern_test(adapter,data,tmp_32,65535U,65535U) != 0) 
      #line 768 
      return 1;
    #line 769 
    value = 15U;
    #line 770 
    i = 0U;
    #line 770 
    while (i < value) {
      #line 771 
      u32 tmp_34;
      #line 771 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 771 
                                          tmp_34 = (((i << 1) + 1U) << 2) + 21504U; else 
                                                                    #line 771 
                                                                    tmp_34 = (((i << 1) + 1U) << 2) + 64U;
      #line 771 
      ;
      #line 771 
      ;
      #line 771 
      if ((int)reg_pattern_test(adapter,data,(int)tmp_34,2147745791U,4294967295U) != 0) 
        #line 771 
        return 1;
      #line 770 
      i ++;
    }
  }
  else {
    #line 776 
    int tmp_37;
    #line 778 
    int tmp_40;
    #line 775 
    if ((int)reg_set_and_check(adapter,data,256,4294967295U,33554431U) != 0) 
      #line 775 
      return 1;
    #line 776 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 776 
                                        tmp_37 = 10240; else 
                                                             #line 776 
                                                             tmp_37 = 272;
    #line 776 
    ;
    #line 776 
    ;
    #line 776 
    if ((int)reg_pattern_test(adapter,data,tmp_37,4294963200U,4294967295U) != 0) 
      #line 776 
      return 1;
    #line 777 
    if ((int)reg_pattern_test(adapter,data,376,65535U,65535U) != 0) 
                                                                    #line 777 
                                                                    return 1;
    #line 778 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 778 
                                        tmp_40 = 14336; else 
                                                             #line 778 
                                                             tmp_40 = 1056;
    #line 778 
    ;
    #line 778 
    ;
    #line 778 
    if ((int)reg_pattern_test(adapter,data,tmp_40,4294963200U,4294967295U) != 0) 
      #line 778 
      return 1;
  }
  #line 781 
  value = 128U;
  #line 782 
  i = 0U;
  #line 782 
  while (i < value) {
    #line 783 
    u32 tmp_42;
    #line 783 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 783 
                                        tmp_42 = (i << 2) + 20992U; else 
                                                                    #line 783 
                                                                    tmp_42 = (i << 2) + 512U;
    #line 783 
    ;
    #line 783 
    ;
    #line 783 
    if ((int)reg_pattern_test(adapter,data,(int)tmp_42,4294967295U,4294967295U) != 0) 
      #line 783 
      return 1;
    #line 782 
    i ++;
  }
  #line 785 
  *data = 0ULL;
  #line 786 
  return 0;
}

#line 789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_eeprom_test(struct e1000_adapter *adapter, u64 *data)
{
  #line 792 
  u16 temp;
  #line 794 
  u16 i;
  #line 791 
  struct e1000_hw *hw = & adapter->hw;
  #line 793 
  u16 checksum = (unsigned short)0U;
  #line 796 
  *data = 0ULL;
  #line 798 
  i = (unsigned short)0U;
  #line 798 
  while ((unsigned int)i <= 63U) {
    {
      #line 799 
      if (e1000_read_eeprom(hw,(unsigned short)((int)i),(unsigned short)1,& temp) < 0) {
        #line 800 
        *data = 1ULL;
        #line 801 
        break;
      }
      #line 803 
      checksum = (unsigned short)((int)checksum + (int)temp);
    }
    #line 798 
    i = (u16)((int)i + 1);
  }
  #line 807 
  if ((unsigned int)checksum != 47802U && *data == 0ULL) 
                                                         #line 808 
                                                         *data = 2ULL;
  #line 810 
  return (int)*data;
}

#line 813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static irqreturn_t e1000_test_intr(int irq, void *data)
{
  #line 815 
  struct net_device *netdev = (struct net_device *)data;
  #line 816 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 817 
  struct e1000_hw *hw = & adapter->hw;
  #line 819 
  adapter->test_icr |= readl((void *)(hw->hw_addr + 192U));
  #line 821 
  return IRQ_HANDLED;
}

#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_intr_test(struct e1000_adapter *adapter, u64 *data)
{
  #line 827 
  u32 mask;
  #line 826 
  struct net_device *netdev = adapter->netdev;
  #line 827 
  u32 i = 0U;
  #line 828 
  bool shared_int = (_Bool)1;
  #line 829 
  u32 irq = (adapter->pdev)->irq;
  #line 830 
  struct e1000_hw *hw = & adapter->hw;
  #line 832 
  *data = 0ULL;
  #line 837 
  if (cif_request_irq(irq,& e1000_test_intr,256UL,(char *)(& netdev->name),
                        (void *)netdev) == 0) 
    #line 839 
    shared_int = (_Bool)0;
  else {
    #line 840 
    if (cif_request_irq(irq,& e1000_test_intr,128UL,(char *)(& netdev->name),
                      (void *)netdev) != 0) {
      #line 842 
      *data = 1ULL;
      #line 843 
      return -1;
    }
  }
  #line 845 
  if ((adapter->msg_enable & 8192) != 0) {
    #line 845 
    char *tmp_1;
    #line 845 
    if ((int)shared_int != 0) 
                              #line 845 
                              tmp_1 = (char *)"shared"; else 
                                                             #line 845 
                                                             tmp_1 = (char *)"unshared";
    #line 845 
    ;
    #line 845 
    netdev_info(adapter->netdev,(char *)"testing %s interrupt\n",tmp_1);
  }
  #line 849 
  writel(4294967295U,(void *)(hw->hw_addr + 216U));
  #line 850 
  readl((void *)(hw->hw_addr + 8U));
  #line 851 
  msleep(10U);
  #line 854 
  while (i <= 9U) {
    #line 856 
    mask = (unsigned int)(1 << i);
    #line 858 
    if (! shared_int) {
      #line 865 
      adapter->test_icr = 0U;
      #line 866 
      writel(mask,(void *)(hw->hw_addr + 216U));
      #line 867 
      writel(mask,(void *)(hw->hw_addr + 200U));
      #line 868 
      readl((void *)(hw->hw_addr + 8U));
      #line 869 
      msleep(10U);
      #line 871 
      if ((adapter->test_icr & mask) != 0U) {
        #line 872 
        *data = 3ULL;
        #line 873 
        break;
      }
    }
    #line 883 
    adapter->test_icr = 0U;
    #line 884 
    writel(mask,(void *)(hw->hw_addr + 208U));
    #line 885 
    writel(mask,(void *)(hw->hw_addr + 200U));
    #line 886 
    readl((void *)(hw->hw_addr + 8U));
    #line 887 
    msleep(10U);
    #line 889 
    if ((adapter->test_icr & mask) == 0U) {
      #line 890 
      *data = 4ULL;
      #line 891 
      break;
    }
    #line 894 
    if (! shared_int) {
      #line 901 
      adapter->test_icr = 0U;
      #line 902 
      writel(~ mask & 32767U,(void *)(hw->hw_addr + 216U));
      #line 903 
      writel(~ mask & 32767U,(void *)(hw->hw_addr + 200U));
      #line 904 
      readl((void *)(hw->hw_addr + 8U));
      #line 905 
      msleep(10U);
      #line 907 
      if (adapter->test_icr != 0U) {
        #line 908 
        *data = 5ULL;
        #line 909 
        break;
      }
    }
    #line 854 
    i ++;
  }
  #line 915 
  writel(4294967295U,(void *)(hw->hw_addr + 216U));
  #line 916 
  readl((void *)(hw->hw_addr + 8U));
  #line 917 
  msleep(10U);
  #line 920 
  cif_free_irq(irq,(void *)netdev);
  #line 922 
  return (int)*data;
}

#line 925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_free_desc_rings(struct e1000_adapter *adapter)
{
  #line 930 
  int i;
  #line 927 
  struct e1000_tx_ring *txdr = & adapter->test_tx_ring;
  #line 928 
  struct e1000_rx_ring *rxdr = & adapter->test_rx_ring;
  #line 929 
  struct pci_dev *pdev = adapter->pdev;
  #line 932 
  if (txdr->desc != (void *)0 && txdr->buffer_info != (struct e1000_tx_buffer *)0) {
    #line 933 
    i = 0;
    #line 933 
    while (txdr->count > (unsigned int)i) {
      #line 934 
      if ((txdr->buffer_info + (unsigned long)i)->dma != 0ULL) 
                                                               #line 935 
                                                               dma_unmap_single_attrs(& pdev->dev,(txdr->buffer_info + (unsigned long)i)->dma,(unsigned long)(txdr->buffer_info + (unsigned long)i)->length,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 939 
      consume_skb((txdr->buffer_info + (unsigned long)i)->skb);
      #line 933 
      i ++;
    }
  }
  #line 943 
  if (rxdr->desc != (void *)0 && rxdr->buffer_info != (struct e1000_rx_buffer *)0) {
    #line 944 
    i = 0;
    #line 944 
    while (rxdr->count > (unsigned int)i) {
      #line 945 
      if ((rxdr->buffer_info + (unsigned long)i)->dma != 0ULL) 
                                                               #line 946 
                                                               dma_unmap_single_attrs(& pdev->dev,(rxdr->buffer_info + (unsigned long)i)->dma,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 950 
      kfree((void *)(rxdr->buffer_info + (unsigned long)i)->rxbuf.data);
      #line 944 
      i ++;
    }
  }
  #line 954 
  if (txdr->desc != (void *)0) {
    #line 955 
    dma_free_coherent(& pdev->dev,(unsigned long)txdr->size,txdr->desc,txdr->dma);
    #line 957 
    txdr->desc = (void *)0;
  }
  #line 959 
  if (rxdr->desc != (void *)0) {
    #line 960 
    dma_free_coherent(& pdev->dev,(unsigned long)rxdr->size,rxdr->desc,rxdr->dma);
    #line 962 
    rxdr->desc = (void *)0;
  }
  #line 965 
  kfree((void *)txdr->buffer_info);
  #line 966 
  txdr->buffer_info = (struct e1000_tx_buffer *)0;
  #line 967 
  kfree((void *)rxdr->buffer_info);
  #line 968 
  rxdr->buffer_info = (struct e1000_rx_buffer *)0;
  #line 969 
  return;
}

#line 971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_setup_desc_rings(struct e1000_adapter *adapter)
{
  #line 977 
  u32 rctl;
  #line 978 
  int i;
  #line 978 
  int ret_val;
  #line 1002 
  unsigned int tmp_1;
  #line 1003 
  unsigned int tmp_2;
  #line 1004 
  unsigned int tmp_3;
  #line 1005 
  unsigned int tmp_4;
  #line 1006 
  unsigned int tmp_5;
  #line 1062 
  unsigned int tmp_9;
  #line 1063 
  unsigned int tmp_10;
  #line 1064 
  unsigned int tmp_11;
  #line 1065 
  unsigned int tmp_12;
  #line 1066 
  unsigned int tmp_13;
  #line 973 
  struct e1000_hw *hw = & adapter->hw;
  #line 974 
  struct e1000_tx_ring *txdr = & adapter->test_tx_ring;
  #line 975 
  struct e1000_rx_ring *rxdr = & adapter->test_rx_ring;
  #line 976 
  struct pci_dev *pdev = adapter->pdev;
  #line 982 
  if (txdr->count == 0U) 
                         #line 983 
                         txdr->count = 256U;
  #line 985 
  txdr->buffer_info = (struct e1000_tx_buffer *)kcalloc((unsigned long)txdr->count,40UL,3264U);
  #line 987 
  if (txdr->buffer_info == (struct e1000_tx_buffer *)0) {
    #line 988 
    ret_val = 1;
    #line 989 
    goto err_nomem;
  }
  #line 992 
  txdr->size = txdr->count * 16U;
  #line 993 
  txdr->size = (txdr->size + 4095U) & 4294963200U;
  #line 994 
  txdr->desc = dma_alloc_coherent(& pdev->dev,(unsigned long)txdr->size,& txdr->dma,3264U);
  #line 996 
  if (txdr->desc == (void *)0) {
    #line 997 
    ret_val = 2;
    #line 998 
    goto err_nomem;
  }
  #line 1000 
  txdr->next_to_clean = 0U;
  #line 1000 
  txdr->next_to_use = 0U;
  #line 1002 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1002 
                                      tmp_1 = 14336U; else 
                                                           #line 1002 
                                                           tmp_1 = 1056U;
  #line 1002 
  ;
  #line 1002 
  ;
  #line 1002 
  writel((unsigned int)txdr->dma,(void *)(hw->hw_addr + tmp_1));
  #line 1003 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1003 
                                      tmp_2 = 14340U; else 
                                                           #line 1003 
                                                           tmp_2 = 1060U;
  #line 1003 
  ;
  #line 1003 
  ;
  #line 1003 
  writel((unsigned int)(txdr->dma >> 32),(void *)(hw->hw_addr + tmp_2));
  #line 1004 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1004 
                                      tmp_3 = 14344U; else 
                                                           #line 1004 
                                                           tmp_3 = 1064U;
  #line 1004 
  ;
  #line 1004 
  ;
  #line 1004 
  writel(txdr->count * 16U,(void *)(hw->hw_addr + tmp_3));
  #line 1005 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1005 
                                      tmp_4 = 14352U; else 
                                                           #line 1005 
                                                           tmp_4 = 1072U;
  #line 1005 
  ;
  #line 1005 
  writel(0U,(void *)(hw->hw_addr + tmp_4));
  #line 1006 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1006 
                                      tmp_5 = 14360U; else 
                                                           #line 1006 
                                                           tmp_5 = 1080U;
  #line 1006 
  ;
  #line 1006 
  writel(0U,(void *)(hw->hw_addr + tmp_5));
  #line 1007 
  writel(258298U,(void *)(hw->hw_addr + 1024U));
  #line 1011 
  i = 0;
  #line 1011 
  while (txdr->count > (unsigned int)i) {
    {
      #line 1013 
      struct sk_buff *skb;
      #line 1012 
      struct e1000_tx_desc *tx_desc = (struct e1000_tx_desc *)txdr->desc + (unsigned long)i;
      #line 1014 
      unsigned int size = 1024U;
      #line 1016 
      skb = alloc_skb(size,3264U);
      #line 1017 
      if (skb == (struct sk_buff *)0) {
        #line 1018 
        ret_val = 3;
        #line 1019 
        goto err_nomem;
      }
      #line 1021 
      skb_put(skb,size);
      #line 1022 
      (txdr->buffer_info + (unsigned long)i)->skb = skb;
      #line 1023 
      (txdr->buffer_info + (unsigned long)i)->length = (unsigned short)skb->len;
      #line 1024 
      (txdr->buffer_info + (unsigned long)i)->dma = dma_map_single_attrs(& pdev->dev,(void *)skb->data,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 1027 
      if (dma_mapping_error(& pdev->dev,
                          (txdr->buffer_info + (unsigned long)i)->dma) != 0) {
        #line 1028 
        ret_val = 4;
        #line 1029 
        goto err_nomem;
      }
      #line 1031 
      tx_desc->buffer_addr = (txdr->buffer_info + (unsigned long)i)->dma;
      #line 1032 
      tx_desc->lower.data = skb->len;
      #line 1033 
      tx_desc->lower.data |= 318767104U;
      #line 1036 
      tx_desc->upper.data = 0U;
    }
    #line 1011 
    i ++;
  }
  #line 1041 
  if (rxdr->count == 0U) 
                         #line 1042 
                         rxdr->count = 256U;
  #line 1044 
  rxdr->buffer_info = (struct e1000_rx_buffer *)kcalloc((unsigned long)rxdr->count,16UL,3264U);
  #line 1046 
  if (rxdr->buffer_info == (struct e1000_rx_buffer *)0) {
    #line 1047 
    ret_val = 5;
    #line 1048 
    goto err_nomem;
  }
  #line 1051 
  rxdr->size = rxdr->count * 16U;
  #line 1052 
  rxdr->desc = dma_alloc_coherent(& pdev->dev,(unsigned long)rxdr->size,& rxdr->dma,3264U);
  #line 1054 
  if (rxdr->desc == (void *)0) {
    #line 1055 
    ret_val = 6;
    #line 1056 
    goto err_nomem;
  }
  #line 1058 
  rxdr->next_to_clean = 0U;
  #line 1058 
  rxdr->next_to_use = 0U;
  #line 1060 
  rctl = readl((void *)(hw->hw_addr + 256U));
  #line 1061 
  writel(rctl & 4294967293U,(void *)(hw->hw_addr + 256U));
  #line 1062 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1062 
                                      tmp_9 = 10240U; else 
                                                           #line 1062 
                                                           tmp_9 = 272U;
  #line 1062 
  ;
  #line 1062 
  ;
  #line 1062 
  writel((unsigned int)rxdr->dma,(void *)(hw->hw_addr + tmp_9));
  #line 1063 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1063 
                                      tmp_10 = 10244U; else 
                                                            #line 1063 
                                                            tmp_10 = 276U;
  #line 1063 
  ;
  #line 1063 
  ;
  #line 1063 
  writel((unsigned int)(rxdr->dma >> 32),(void *)(hw->hw_addr + tmp_10));
  #line 1064 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1064 
                                      tmp_11 = 10248U; else 
                                                            #line 1064 
                                                            tmp_11 = 280U;
  #line 1064 
  ;
  #line 1064 
  ;
  #line 1064 
  writel(rxdr->size,(void *)(hw->hw_addr + tmp_11));
  #line 1065 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1065 
                                      tmp_12 = 10256U; else 
                                                            #line 1065 
                                                            tmp_12 = 288U;
  #line 1065 
  ;
  #line 1065 
  writel(0U,(void *)(hw->hw_addr + tmp_12));
  #line 1066 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1066 
                                      tmp_13 = 10264U; else 
                                                            #line 1066 
                                                            tmp_13 = 296U;
  #line 1066 
  ;
  #line 1066 
  writel(0U,(void *)(hw->hw_addr + tmp_13));
  #line 1067 
  rctl = (hw->mc_filter_type << 12) | 32770U;
  #line 1070 
  writel(rctl,(void *)(hw->hw_addr + 256U));
  #line 1072 
  i = 0;
  #line 1072 
  while (rxdr->count > (unsigned int)i) {
    {
      #line 1074 
      u8 *buf;
      #line 1073 
      struct e1000_rx_desc *rx_desc = (struct e1000_rx_desc *)rxdr->desc + (unsigned long)i;
      #line 1076 
      buf = (u8 *)kzalloc(2112UL,3264U);
      #line 1078 
      if (buf == (u8 *)0U) {
        #line 1079 
        ret_val = 7;
        #line 1080 
        goto err_nomem;
      }
      #line 1082 
      (rxdr->buffer_info + (unsigned long)i)->rxbuf.data = buf;
      #line 1084 
      (rxdr->buffer_info + (unsigned long)i)->dma = dma_map_single_attrs(& pdev->dev,(void *)(buf + 64U),2048UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 1088 
      if (dma_mapping_error(& pdev->dev,
                           (rxdr->buffer_info + (unsigned long)i)->dma) != 0) {
        #line 1089 
        ret_val = 8;
        #line 1090 
        goto err_nomem;
      }
      #line 1092 
      rx_desc->buffer_addr = (rxdr->buffer_info + (unsigned long)i)->dma;
    }
    #line 1072 
    i ++;
  }
  #line 1095 
  return 0;
  #line 1097 
  err_nomem: 
             #line 1097 
  ;
  #line 1098 
  e1000_free_desc_rings(adapter);
  #line 1099 
  return ret_val;
}

#line 1102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_phy_disable_receiver(struct e1000_adapter *adapter)
{
  #line 1104 
  struct e1000_hw *hw = & adapter->hw;
  #line 1107 
  e1000_write_phy_reg(hw,29U,(unsigned short)31);
  #line 1108 
  e1000_write_phy_reg(hw,30U,(unsigned short)36860);
  #line 1109 
  e1000_write_phy_reg(hw,29U,(unsigned short)26);
  #line 1110 
  e1000_write_phy_reg(hw,30U,(unsigned short)36848);
  #line 1111 
  return;
}

#line 1113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_phy_reset_clk_and_crs(struct e1000_adapter *adapter)
{
  #line 1116 
  u16 phy_reg;
  #line 1115 
  struct e1000_hw *hw = & adapter->hw;
  #line 1122 
  e1000_read_phy_reg(hw,20U,& phy_reg);
  #line 1123 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 112U);
  #line 1124 
  e1000_write_phy_reg(hw,20U,(unsigned short)((int)phy_reg));
  #line 1130 
  e1000_read_phy_reg(hw,16U,& phy_reg);
  #line 1131 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 2048U);
  #line 1132 
  e1000_write_phy_reg(hw,16U,(unsigned short)((int)phy_reg));
  #line 1133 
  return;
}

#line 1135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_nonintegrated_phy_loopback(struct e1000_adapter *adapter)
{
  #line 1138 
  u32 ctrl_reg;
  #line 1139 
  u16 phy_reg;
  #line 1137 
  struct e1000_hw *hw = & adapter->hw;
  #line 1143 
  ctrl_reg = readl((void *)hw->hw_addr);
  #line 1144 
  ctrl_reg |= 6785U;
  #line 1150 
  writel(ctrl_reg,(void *)hw->hw_addr);
  #line 1153 
  e1000_read_phy_reg(hw,16U,& phy_reg);
  #line 1158 
  phy_reg = (unsigned short)((unsigned int)phy_reg & 65439U);
  #line 1159 
  e1000_write_phy_reg(hw,16U,(unsigned short)((int)phy_reg));
  #line 1162 
  e1000_phy_reset(hw);
  #line 1165 
  e1000_phy_reset_clk_and_crs(adapter);
  #line 1167 
  e1000_write_phy_reg(hw,0U,(unsigned short)33024);
  #line 1170 
  __const_udelay(2147500UL);
  #line 1173 
  e1000_phy_reset_clk_and_crs(adapter);
  #line 1176 
  e1000_phy_disable_receiver(adapter);
  #line 1179 
  e1000_read_phy_reg(hw,0U,& phy_reg);
  #line 1180 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 16384U);
  #line 1181 
  e1000_write_phy_reg(hw,0U,(unsigned short)((int)phy_reg));
  #line 1184 
  e1000_phy_reset_clk_and_crs(adapter);
  #line 1187 
  e1000_read_phy_reg(hw,0U,& phy_reg);
  #line 1188 
  if ((unsigned int)phy_reg != 16640U) 
                                       #line 1189 
                                       return 9;
  #line 1191 
  e1000_read_phy_reg(hw,20U,& phy_reg);
  #line 1192 
  if ((unsigned int)phy_reg != 112U) 
                                     #line 1193 
                                     return 10;
  #line 1195 
  e1000_read_phy_reg(hw,29U,& phy_reg);
  #line 1196 
  if ((unsigned int)phy_reg != 26U) 
                                    #line 1197 
                                    return 11;
  #line 1199 
  return 0;
}

#line 1202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_integrated_phy_loopback(struct e1000_adapter *adapter)
{
  #line 1204 
  struct e1000_hw *hw = & adapter->hw;
  #line 1205 
  u32 ctrl_reg = 0U;
  #line 1206 
  u32 stat_reg = 0U;
  #line 1208 
  hw->autoneg = (unsigned char)0U;
  #line 1210 
  if (hw->phy_type == (unsigned int)0) {
    #line 1212 
    e1000_write_phy_reg(hw,16U,(unsigned short)2056);
    #line 1215 
    e1000_write_phy_reg(hw,0U,(unsigned short)37184);
    #line 1217 
    e1000_write_phy_reg(hw,0U,(unsigned short)33088);
  }
  #line 1220 
  ctrl_reg = readl((void *)hw->hw_addr);
  #line 1223 
  e1000_write_phy_reg(hw,0U,(unsigned short)16704);
  #line 1226 
  ctrl_reg = readl((void *)hw->hw_addr);
  #line 1227 
  ctrl_reg &= 4294966527U;
  #line 1228 
  ctrl_reg |= 6657U;
  #line 1233 
  if (hw->media_type == (unsigned int)0 && hw->phy_type == (unsigned int)0) 
    #line 1235 
    ctrl_reg |= 128U;
  else {
    #line 1240 
    stat_reg = readl((void *)(hw->hw_addr + 8U));
    #line 1241 
    if ((stat_reg & 1U) == 0U) 
                               #line 1242 
                               ctrl_reg |= 192U;
  }
  #line 1245 
  writel(ctrl_reg,(void *)hw->hw_addr);
  #line 1250 
  if (hw->phy_type == (unsigned int)0) 
                                       #line 1251 
                                       e1000_phy_disable_receiver(adapter);
  #line 1253 
  __const_udelay(2147500UL);
  #line 1255 
  return 0;
}

#line 1258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_set_phy_loopback(struct e1000_adapter *adapter)
{
  #line 1260 
  struct e1000_hw *hw = & adapter->hw;
  #line 1261 
  u16 phy_reg = (unsigned short)0U;
  #line 1262 
  u16 count = (unsigned short)0U;
  #line 1264 
  switch ((unsigned int)hw->mac_type) {
    #line 1265 
    case (unsigned int)3: 
                          #line 1265 
    ;
    #line 1266 
    if (hw->media_type == (unsigned int)0) {
      #line 1271 
      while (1) {
        #line 1271 
        if (e1000_nonintegrated_phy_loopback(adapter) != 0) {
          #line 1271 
          u16 tmp_0;
          #line 1271 
          tmp_0 = count;
          #line 1271 
          count = (u16)((int)count + 1);
          #line 1271 
          ;
          #line 1271 
          if (! ((unsigned int)tmp_0 <= 9U)) 
                                             #line 1271 
                                             break;
        }
        else 
             #line 1271 
             break;
      }
      #line 1273 
      if ((unsigned int)count <= 10U) 
                                      #line 1274 
                                      return 0;
    }
    #line 1276 
    break;
    #line 1278 
    case (unsigned int)4: 
                          #line 1278 
    ;
    #line 1279 
    case (unsigned int)5: 
                          #line 1279 
    ;
    #line 1280 
    case (unsigned int)6: 
                          #line 1280 
    ;
    #line 1281 
    case (unsigned int)7: 
                          #line 1281 
    ;
    #line 1282 
    case (unsigned int)8: 
                          #line 1282 
    ;
    #line 1283 
    case (unsigned int)10: 
                           #line 1283 
    ;
    #line 1284 
    case (unsigned int)11: 
                           #line 1284 
    ;
    #line 1285 
    case (unsigned int)12: 
                           #line 1285 
    ;
    #line 1286 
    case (unsigned int)13: 
                           #line 1286 
    ;
    #line 1287 
    case (unsigned int)14: 
                           #line 1287 
    ;
    #line 1288 
    return e1000_integrated_phy_loopback(adapter);
    #line 1289 
    default: 
             #line 1289 
    ;
    #line 1293 
    e1000_read_phy_reg(hw,0U,& phy_reg);
    #line 1294 
    phy_reg = (unsigned short)((unsigned int)phy_reg | 16384U);
    #line 1295 
    e1000_write_phy_reg(hw,0U,(unsigned short)((int)phy_reg));
    #line 1296 
    return 0;
  }
  #line 1299 
  return 8;
}

#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_setup_loopback_test(struct e1000_adapter *adapter)
{
  #line 1305 
  u32 rctl;
  #line 1304 
  struct e1000_hw *hw = & adapter->hw;
  #line 1307 
  if ((unsigned int)hw->media_type + 4294967295U <= 1U) 
    #line 1309 
    switch ((unsigned int)hw->mac_type) {
      #line 1310 
      case (unsigned int)6: 
                            #line 1310 
      ;
      #line 1311 
      case (unsigned int)8: 
                            #line 1311 
      ;
      #line 1312 
      case (unsigned int)7: 
                            #line 1312 
      ;
      #line 1313 
      case (unsigned int)10: 
                             #line 1313 
      ;
      #line 1314 
      return e1000_set_phy_loopback(adapter);
      #line 1315 
      default: 
               #line 1315 
      ;
      #line 1316 
      rctl = readl((void *)(hw->hw_addr + 256U));
      #line 1317 
      rctl |= 192U;
      #line 1318 
      writel(rctl,(void *)(hw->hw_addr + 256U));
      #line 1319 
      return 0;
    }
  else 
    #line 1321 
    if (hw->media_type == (unsigned int)0) {
      #line 1322 
      return e1000_set_phy_loopback(adapter);
    }
  #line 1325 
  return 7;
}

#line 1328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_loopback_cleanup(struct e1000_adapter *adapter)
{
  #line 1331 
  u32 rctl;
  #line 1332 
  u16 phy_reg;
  #line 1330 
  struct e1000_hw *hw = & adapter->hw;
  #line 1334 
  rctl = readl((void *)(hw->hw_addr + 256U));
  #line 1335 
  rctl &= 4294967103U;
  #line 1336 
  writel(rctl,(void *)(hw->hw_addr + 256U));
  #line 1338 
  switch ((unsigned int)hw->mac_type) {
    #line 1339 
    case (unsigned int)6: 
                          #line 1339 
    ;
    #line 1340 
    case (unsigned int)8: 
                          #line 1340 
    ;
    #line 1341 
    case (unsigned int)7: 
                          #line 1341 
    ;
    #line 1342 
    case (unsigned int)10: 
                           #line 1342 
    ;
    #line 1343 
    default: 
             #line 1343 
    ;
    #line 1344 
    hw->autoneg = (unsigned char)1U;
    #line 1345 
    e1000_read_phy_reg(hw,0U,& phy_reg);
    #line 1346 
    if (((int)phy_reg & 16384) != 0) {
      #line 1347 
      phy_reg = (unsigned short)((unsigned int)phy_reg & 49151U);
      #line 1348 
      e1000_write_phy_reg(hw,0U,(unsigned short)((int)phy_reg));
      #line 1349 
      e1000_phy_reset(hw);
    }
    #line 1351 
    break;
  }
  #line 1353 
  return;
}

#line 1355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_create_lbtest_frame(struct sk_buff *skb, unsigned int frame_size)
{
  #line 1358 
  memset((void *)skb->data,255,(unsigned long)frame_size);
  #line 1359 
  frame_size &= 4294967294U;
  #line 1360 
  memset((void *)(skb->data + (unsigned long)(frame_size / 2U)),170,(unsigned long)(frame_size / 2U + 4294967295U));
  #line 1361 
  memset((void *)(skb->data + (unsigned long)(frame_size / 2U + 10U)),190,1UL);
  #line 1362 
  memset((void *)(skb->data + (unsigned long)(frame_size / 2U + 12U)),175,1UL);
  #line 1363 
  return;
}

#line 1365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_check_lbtest_frame(unsigned char *data, unsigned int frame_size)
{
  #line 1368 
  frame_size &= 4294967294U;
  #line 1369 
  if ((unsigned int)*(data + 3U) == 255U) 
    #line 1370 
    if ((unsigned int)*(data + ((unsigned long)(frame_size / 2U) + (unsigned long)10U)) == 190U && (unsigned int)*(data + ((unsigned long)(frame_size / 2U) + (unsigned long)12U)) == 175U) 
      #line 1372 
      return 0;
  #line 1375 
  return 13;
}

#line 1378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_run_loopback_test(struct e1000_adapter *adapter)
{
  #line 1384 
  int i;
  #line 1384 
  int j;
  #line 1384 
  int k;
  #line 1384 
  int l;
  #line 1384 
  int lc;
  #line 1384 
  int good_cnt;
  #line 1385 
  unsigned long time;
  #line 1387 
  unsigned int tmp;
  #line 1380 
  struct e1000_hw *hw = & adapter->hw;
  #line 1381 
  struct e1000_tx_ring *txdr = & adapter->test_tx_ring;
  #line 1382 
  struct e1000_rx_ring *rxdr = & adapter->test_rx_ring;
  #line 1383 
  struct pci_dev *pdev = adapter->pdev;
  #line 1384 
  int ret_val = 0;
  #line 1387 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1387 
                                      tmp = 10264U; else 
                                                         #line 1387 
                                                         tmp = 296U;
  #line 1387 
  ;
  #line 1387 
  ;
  #line 1387 
  writel(rxdr->count + 4294967295U,(void *)(hw->hw_addr + tmp));
  #line 1394 
  if (rxdr->count <= txdr->count) 
                                  #line 1395 
                                  lc = (int)((txdr->count / 64U) * 2U + 1U); else 
                                                                    #line 1397 
                                                                    lc = (int)((rxdr->count / 64U) * 2U + 1U);
  #line 1399 
  l = 0;
  #line 1399 
  k = l;
  #line 1400 
  j = 0;
  #line 1400 
  while (j <= lc) {
    {
      #line 1411 
      unsigned int tmp_0;
      #line 1401 
      i = 0;
      #line 1401 
      while (i <= 63) {
        #line 1402 
        e1000_create_lbtest_frame((txdr->buffer_info + (unsigned long)i)->skb,1024U);
        #line 1404 
        dma_sync_single_for_device(& pdev->dev,(txdr->buffer_info + (unsigned long)k)->dma,(unsigned long)(txdr->buffer_info + (unsigned long)k)->length,(enum dma_data_direction)DMA_TO_DEVICE);
        #line 1408 
        k ++;
        #line 1408 
        ;
        #line 1408 
        if ((long)((unsigned int)k == txdr->count) != 0L) 
                                                          #line 1409 
                                                          k = 0;
        #line 1401 
        i ++;
      }
      #line 1411 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 1411 
                                          tmp_0 = 14360U; else 
                                                               #line 1411 
                                                               tmp_0 = 1080U;
      #line 1411 
      ;
      #line 1411 
      ;
      #line 1411 
      writel((unsigned int)k,(void *)(hw->hw_addr + tmp_0));
      #line 1412 
      readl((void *)(hw->hw_addr + 8U));
      #line 1413 
      msleep(200U);
      #line 1414 
      time = jiffies;
      #line 1415 
      good_cnt = 0;
      #line 1416 
      while (1) {
        #line 1417 
        dma_sync_single_for_cpu(& pdev->dev,(rxdr->buffer_info + (unsigned long)l)->dma,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE);
        #line 1422 
        ret_val = e1000_check_lbtest_frame((rxdr->buffer_info + (unsigned long)l)->rxbuf.data + 64U,1024U);
        #line 1426 
        if (ret_val == 0) 
                          #line 1427 
                          good_cnt ++;
        #line 1428 
        l ++;
        #line 1428 
        ;
        #line 1428 
        if ((long)((unsigned int)l == rxdr->count) != 0L) 
                                                          #line 1429 
                                                          l = 0;
        {
          #line 1434 
          unsigned long __dummy;
          #line 1434 
          unsigned long __dummy2;
          }
        #line 1430 
        if (1 != 0) {
          {
            #line 1434 
            unsigned long __dummy_0;
            #line 1434 
            unsigned long __dummy2_0;
            }
          #line 1434 
          if (1 != 0) 
            #line 1434 
            if ((long)((jiffies - time) + 18446744073709551596UL) < 0L) {
              #line 1434 
              if (! (good_cnt <= 63)) 
                                      #line 1416 
                                      break;
            }
            else 
                 #line 1416 
                 break;
          else 
               #line 1416 
               break;
        }
        else 
             #line 1416 
             break;
      }
      #line 1436 
      if (good_cnt != 64) {
        #line 1437 
        ret_val = 13;
        #line 1438 
        break;
      }
      {
        #line 1440 
        unsigned long __dummy_1;
        #line 1440 
        unsigned long __dummy2_1;
        }
      #line 1440 
      if (1 != 0) {
        {
          #line 1440 
          unsigned long __dummy_2;
          #line 1440 
          unsigned long __dummy2_2;
          }
        #line 1440 
        if (1 != 0) 
          #line 1440 
          if ((long)((jiffies - time) + 18446744073709551614UL) >= 0L) {
            #line 1441 
            ret_val = 14;
            #line 1442 
            break;
          }
      }
    }
    #line 1400 
    j ++;
  }
  #line 1445 
  return ret_val;
}

#line 1448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_loopback_test(struct e1000_adapter *adapter, u64 *data)
{
  #line 1450 
  *data = (unsigned long long)e1000_setup_desc_rings(adapter);
  #line 1451 
  if (*data != 0ULL) 
                     #line 1452 
                     goto out;
  #line 1453 
  *data = (unsigned long long)e1000_setup_loopback_test(adapter);
  #line 1454 
  if (*data != 0ULL) 
                     #line 1455 
                     goto err_loopback;
  #line 1456 
  *data = (unsigned long long)e1000_run_loopback_test(adapter);
  #line 1457 
  e1000_loopback_cleanup(adapter);
  #line 1459 
  err_loopback: 
                #line 1459 
  ;
  #line 1460 
  e1000_free_desc_rings(adapter);
  #line 1461 
  out: 
       #line 1461 
  ;
  #line 1462 
  return (int)*data;
}

#line 1465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_link_test(struct e1000_adapter *adapter, u64 *data)
{
  #line 1467 
  struct e1000_hw *hw = & adapter->hw;
  #line 1468 
  *data = 0ULL;
  #line 1469 
  if (hw->media_type == (unsigned int)2) {
    #line 1470 
    int i = 0;
    #line 1472 
    hw->serdes_has_link = (_Bool)0;
    #line 1477 
    while (1) {
      #line 1482 
      int tmp;
      #line 1478 
      e1000_check_for_link(hw);
      #line 1479 
      if ((int)hw->serdes_has_link != 0) 
                                         #line 1480 
                                         return (int)*data;
      #line 1481 
      msleep(20U);
      #line 1482 
      tmp = i;
      #line 1482 
      i ++;
      #line 1482 
      ;
      #line 1482 
      if (! (tmp <= 3749)) 
                           #line 1477 
                           break;
    }
    #line 1484 
    *data = 1ULL;
  }
  else {
    #line 1486 
    e1000_check_for_link(hw);
    #line 1487 
    if ((unsigned int)hw->autoneg != 0U) 
                                         #line 1488 
                                         msleep(4000U);
    #line 1490 
    if ((readl((void *)(hw->hw_addr + 8U)) & 2U) == 0U) 
                                                        #line 1491 
                                                        *data = 1ULL;
  }
  #line 1493 
  return (int)*data;
}

#line 1496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_get_sset_count(struct net_device *netdev, int sset)
{
  #line 1498 
  switch (sset) {
    #line 1499 
    case 0: 
            #line 1499 
    ;
    #line 1500 
    return 5;
    #line 1501 
    case 1: 
            #line 1501 
    ;
    #line 1502 
    return 46;
    #line 1503 
    default: 
             #line 1503 
    ;
    #line 1504 
    return -95;
  }
}

#line 1508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_diag_test(struct net_device *netdev, struct ethtool_test *eth_test, u64 *data)
{
  #line 1511 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1512 
  struct e1000_hw *hw = & adapter->hw;
  #line 1513 
  bool if_running = netif_running(netdev);
  #line 1515 
  cif_set_bit(0L,& adapter->flags);
  #line 1516 
  if (eth_test->flags == 1U) {
    #line 1520 
    u16 autoneg_advertised = hw->autoneg_advertised;
    #line 1521 
    u8 forced_speed_duplex = hw->forced_speed_duplex;
    #line 1522 
    u8 autoneg = hw->autoneg;
    #line 1524 
    if ((adapter->msg_enable & 8192) != 0) 
                                           #line 1524 
                                           netdev_info(adapter->netdev,(char *)"offline testing starting\n");
    #line 1529 
    if (e1000_link_test(adapter,data + 4U) != 0) 
                                                 #line 1530 
                                                 eth_test->flags |= 2U;
    #line 1532 
    if ((int)if_running != 0) 
                              #line 1534 
                              e1000_close(netdev); else 
                                                        #line 1536 
                                                        e1000_reset(adapter);
    #line 1538 
    if (e1000_reg_test(adapter,data) != 0) 
                                           #line 1539 
                                           eth_test->flags |= 2U;
    #line 1541 
    e1000_reset(adapter);
    #line 1542 
    if (e1000_eeprom_test(adapter,data + 1U) != 0) 
                                                   #line 1543 
                                                   eth_test->flags |= 2U;
    #line 1545 
    e1000_reset(adapter);
    #line 1546 
    if (e1000_intr_test(adapter,data + 2U) != 0) 
                                                 #line 1547 
                                                 eth_test->flags |= 2U;
    #line 1549 
    e1000_reset(adapter);
    #line 1551 
    e1000_power_up_phy(adapter);
    #line 1552 
    if (e1000_loopback_test(adapter,data + 3U) != 0) 
                                                     #line 1553 
                                                     eth_test->flags |= 2U;
    #line 1556 
    hw->autoneg_advertised = autoneg_advertised;
    #line 1557 
    hw->forced_speed_duplex = forced_speed_duplex;
    #line 1558 
    hw->autoneg = autoneg;
    #line 1560 
    e1000_reset(adapter);
    #line 1561 
    cif_clear_bit(0L,& adapter->flags);
    #line 1562 
    if ((int)if_running != 0) 
                              #line 1563 
                              e1000_open(netdev);
  }
  else {
    #line 1565 
    if ((adapter->msg_enable & 8192) != 0) 
                                           #line 1565 
                                           netdev_info(adapter->netdev,(char *)"online testing starting\n");
    #line 1567 
    if (e1000_link_test(adapter,data + 4U) != 0) 
                                                 #line 1568 
                                                 eth_test->flags |= 2U;
    #line 1571 
    *data = 0ULL;
    #line 1572 
    *(data + 1U) = 0ULL;
    #line 1573 
    *(data + 2U) = 0ULL;
    #line 1574 
    *(data + 3U) = 0ULL;
    #line 1576 
    cif_clear_bit(0L,& adapter->flags);
  }
  #line 1578 
  msleep_interruptible(4000U);
  #line 1579 
  return;
}

#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_wol_exclusion(struct e1000_adapter *adapter, struct ethtool_wolinfo *wol)
{
  #line 1584 
  struct e1000_hw *hw = & adapter->hw;
  #line 1585 
  int retval = 1;
  #line 1587 
  switch ((int)hw->device_id) {
    #line 1588 
    case 4096: 
               #line 1588 
    ;
    #line 1589 
    case 4097: 
               #line 1589 
    ;
    #line 1590 
    case 4100: 
               #line 1590 
    ;
    #line 1591 
    case 4105: 
               #line 1591 
    ;
    #line 1592 
    case 4125: 
               #line 1592 
    ;
    #line 1593 
    case 4113: 
               #line 1593 
    ;
    #line 1594 
    case 4111: 
               #line 1594 
    ;
    #line 1595 
    case 4249: 
               #line 1595 
    ;
    #line 1596 
    case 4234: 
               #line 1596 
    ;
    #line 1598 
    wol->supported = 0U;
    #line 1599 
    break;
    #line 1600 
    case 4114: 
               #line 1600 
    ;
    #line 1601 
    case 4218: 
               #line 1601 
    ;
    #line 1603 
    if ((readl((void *)(hw->hw_addr + 8U)) & 4U) != 0U) {
      #line 1604 
      wol->supported = 0U;
      #line 1605 
      break;
    }
    #line 1608 
    retval = 0;
    #line 1609 
    break;
    #line 1610 
    case 4277: 
               #line 1610 
    ;
    #line 1612 
    if (! adapter->quad_port_a) {
      #line 1613 
      wol->supported = 0U;
      #line 1614 
      break;
    }
    #line 1617 
    retval = 0;
    #line 1618 
    break;
    #line 1619 
    default: 
             #line 1619 
    ;
    #line 1624 
    if ((readl((void *)(hw->hw_addr + 8U)) & 4U) != 0U) 
      #line 1624 
      if (adapter->eeprom_wol == 0U) {
        #line 1626 
        wol->supported = 0U;
        #line 1627 
        break;
      }
    #line 1630 
    retval = 0;
  }
  #line 1633 
  return retval;
}

#line 1636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_get_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  #line 1639 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1640 
  struct e1000_hw *hw = & adapter->hw;
  #line 1642 
  wol->supported = 46U;
  #line 1643 
  wol->wolopts = 0U;
  #line 1648 
  if (e1000_wol_exclusion(adapter,wol) != 0) 
                                             #line 1650 
                                             return;
  else {
    #line 1649 
    if (! device_can_wakeup(& (adapter->pdev)->dev)) 
                                                     #line 1650 
                                                     return;
  }
  #line 1653 
  switch ((int)hw->device_id) {
    #line 1654 
    case 4277: 
               #line 1654 
    ;
    #line 1656 
    wol->supported &= 4294967293U;
    #line 1658 
    if ((adapter->wol & 4U) != 0U) 
      #line 1659 
      if ((adapter->msg_enable & 1) != 0) 
                                          #line 1659 
                                          netdev_err(adapter->netdev,(char *)"Interface does not support directed ");
    #line 1661 
    break;
    #line 1662 
    default: 
             #line 1662 
    ;
    #line 1663 
    break;
  }
  #line 1666 
  if ((adapter->wol & 4U) != 0U) 
                                 #line 1667 
                                 wol->wolopts |= 2U;
  #line 1668 
  if ((adapter->wol & 8U) != 0U) 
                                 #line 1669 
                                 wol->wolopts |= 4U;
  #line 1670 
  if ((adapter->wol & 16U) != 0U) 
                                  #line 1671 
                                  wol->wolopts |= 8U;
  #line 1672 
  if ((adapter->wol & 2U) != 0U) 
                                 #line 1673 
                                 wol->wolopts |= 32U;
  #line 1674 
  return;
}

#line 1676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_set_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  #line 1678 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1679 
  struct e1000_hw *hw = & adapter->hw;
  #line 1681 
  if ((wol->wolopts & 81U) != 0U) 
                                  #line 1682 
                                  return -95;
  #line 1684 
  if (e1000_wol_exclusion(adapter,wol) != 0) 
                                             #line 1684 
                                             goto _LOR;
  else {
    #line 1685 
    if (! device_can_wakeup(& (adapter->pdev)->dev)) {
      #line 1686 
      int tmp_0;
      #line 1684 
      _LOR: 
            #line 1686 
      ;
      #line 1686 
      if (wol->wolopts != 0U) 
                              #line 1686 
                              tmp_0 = -95; else 
                                                #line 1686 
                                                tmp_0 = 0;
      #line 1686 
      return tmp_0;
    }
  }
  #line 1688 
  switch ((int)hw->device_id) {
    #line 1689 
    case 4277: 
               #line 1689 
    ;
    #line 1690 
    if ((wol->wolopts & 2U) != 0U) {
      #line 1691 
      if ((adapter->msg_enable & 1) != 0) 
                                          #line 1691 
                                          netdev_err(adapter->netdev,(char *)"Interface does not support directed ");
      #line 1693 
      return -95;
    }
    #line 1695 
    break;
    #line 1696 
    default: 
             #line 1696 
    ;
    #line 1697 
    break;
  }
  #line 1701 
  adapter->wol = 0U;
  #line 1703 
  if ((wol->wolopts & 2U) != 0U) 
                                 #line 1704 
                                 adapter->wol |= 4U;
  #line 1705 
  if ((wol->wolopts & 4U) != 0U) 
                                 #line 1706 
                                 adapter->wol |= 8U;
  #line 1707 
  if ((wol->wolopts & 8U) != 0U) 
                                 #line 1708 
                                 adapter->wol |= 16U;
  #line 1709 
  if ((wol->wolopts & 32U) != 0U) 
                                  #line 1710 
                                  adapter->wol |= 2U;
  #line 1712 
  device_set_wakeup_enable(& (adapter->pdev)->dev,(_Bool)(adapter->wol != 0U));
  #line 1714 
  return 0;
}

#line 1717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_set_phys_id(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  #line 1720 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1721 
  struct e1000_hw *hw = & adapter->hw;
  #line 1723 
  switch ((unsigned int)state) {
    #line 1724 
    case (unsigned int)1: 
                          #line 1724 
    ;
    #line 1725 
    e1000_setup_led(hw);
    #line 1726 
    return 2;
    #line 1728 
    case (unsigned int)2: 
                          #line 1728 
    ;
    #line 1729 
    e1000_led_on(hw);
    #line 1730 
    break;
    #line 1732 
    case (unsigned int)3: 
                          #line 1732 
    ;
    #line 1733 
    e1000_led_off(hw);
    #line 1734 
    break;
    #line 1736 
    case (unsigned int)0: 
                          #line 1736 
    ;
    #line 1737 
    e1000_cleanup_led(hw);
  }
  #line 1740 
  return 0;
}

#line 1743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 1746 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1748 
  if (adapter->hw.mac_type <= (unsigned int)5) 
                                               #line 1749 
                                               return -95;
  #line 1751 
  if (adapter->itr_setting <= 4U) 
                                  #line 1752 
                                  ec->rx_coalesce_usecs = adapter->itr_setting; else 
                                                                    #line 1754 
                                                                    ec->rx_coalesce_usecs = 1000000U / adapter->itr_setting;
  #line 1756 
  return 0;
}

#line 1759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 1762 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1763 
  struct e1000_hw *hw = & adapter->hw;
  #line 1765 
  if (hw->mac_type <= (unsigned int)5) 
                                       #line 1766 
                                       return -95;
  #line 1768 
  if ((ec->rx_coalesce_usecs > 10000U || ec->rx_coalesce_usecs + 4294967291U <= 4U) || ec->rx_coalesce_usecs == 2U) 
    #line 1772 
    return -22;
  #line 1774 
  if (ec->rx_coalesce_usecs == 4U) {
    #line 1775 
    adapter->itr_setting = 4U;
    #line 1775 
    adapter->itr = 4U;
  }
  else 
    #line 1776 
    if (ec->rx_coalesce_usecs <= 3U) {
      #line 1777 
      adapter->itr = 20000U;
      #line 1778 
      adapter->itr_setting = ec->rx_coalesce_usecs;
    }
    else {
      #line 1780 
      adapter->itr = 1000000U / ec->rx_coalesce_usecs;
      #line 1781 
      adapter->itr_setting = adapter->itr & 4294967292U;
    }
  #line 1784 
  if (adapter->itr_setting != 0U) 
                                  #line 1785 
                                  writel(1000000000U / (adapter->itr * 256U),(void *)(hw->hw_addr + 196U)); else 
                                                                    #line 1787 
                                                                    writel(0U,(void *)(hw->hw_addr + 196U));
  #line 1789 
  return 0;
}

#line 1792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static int e1000_nway_reset(struct net_device *netdev)
{
  #line 1794 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1796 
  if ((int)netif_running(netdev) != 0) 
                                       #line 1797 
                                       e1000_reinit_locked(adapter);
  #line 1798 
  return 0;
}

#line 1801  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 1805 
  int i;
  #line 1804 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1806 
  struct e1000_stats *stat = (struct e1000_stats *)(& e1000_gstrings_stats);
  #line 1808 
  e1000_update_stats(adapter);
  #line 1809 
  i = 0;
  #line 1809 
  while ((unsigned int)i <= 45U) {
    {
      #line 1810 
      char *p;
      #line 1812 
      switch (stat->type) {
        #line 1813 
        case 0: 
                #line 1813 
        ;
        #line 1814 
        p = (char *)netdev + (unsigned long)stat->stat_offset;
        #line 1815 
        break;
        #line 1816 
        case 1: 
                #line 1816 
        ;
        #line 1817 
        p = (char *)adapter + (unsigned long)stat->stat_offset;
        #line 1818 
        break;
        #line 1819 
        default: 
                 #line 1819 
        ;
        {
          #line 1820 
          bool __warned;
          #line 1820 
          int __ret_warn_once = 1;
          #line 1820 
          if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
            #line 1820 
            __warned = (_Bool)1;
            {
              #line 1820 
              int __ret_warn_on = 1;
              #line 1820 
              if ((long)(__ret_warn_on != 0) != 0L) {
                #line 1820 
                ;
                #line 1820 
                ;
                #line 1820 
                __warn_printk((char *)"netdevice: %s%s: ",netdev_name(netdev),netdev_reg_state(netdev),stat->type,i);
                #line 1821 
                ldv_inline_asm();
                #line 1822 
                ldv_inline_asm();
              }
              #line 1820 
              long tmp_2 = (long)(__ret_warn_on != 0);
            }
          }
          #line 1820 
          long tmp_4 = (long)(__ret_warn_once != 0);
        }
        #line 1822 
        goto __Cont;
      }
      #line 1825 
      if (stat->sizeof_stat == 8) 
                                  #line 1826 
                                  *(data + (unsigned long)i) = *((u64 *)p); else 
                                                                    #line 1828 
                                                                    *(data + (unsigned long)i) = (unsigned long long)*((u32 *)p);
    }
    #line 1809 
    __Cont: 
            #line 1809 
    i ++;
    #line 1809 
    stat ++;
  }
  #line 1830 
  return;
}

#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static void e1000_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  #line 1837 
  int i;
  #line 1836 
  u8 *p = data;
  #line 1839 
  switch (stringset) {
    #line 1840 
    case (u32)0: 
                 #line 1840 
    ;
    #line 1841 
    memcpy((void *)data,(void *)(& e1000_gstrings_test),160UL);
    #line 1842 
    break;
    #line 1843 
    case (u32)1: 
                 #line 1843 
    ;
    #line 1844 
    i = 0;
    #line 1844 
    while ((unsigned int)i <= 45U) {
      #line 1845 
      memcpy((void *)p,(void *)(& e1000_gstrings_stats[i].stat_string),32UL);
      #line 1847 
      p += 32U;
      #line 1844 
      i ++;
    }
    #line 1850 
    break;
  }
  #line 1852 
  return;
}

#line 1854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
static struct ethtool_ops e1000_ethtool_ops = {.get_drvinfo = & e1000_get_drvinfo, .get_regs_len = & e1000_get_regs_len, .get_regs = & e1000_get_regs, .get_wol = & e1000_get_wol, .set_wol = & e1000_set_wol, .get_msglevel = & e1000_get_msglevel, .set_msglevel = & e1000_set_msglevel, .nway_reset = & e1000_nway_reset, .get_link = & e1000_get_link, .get_eeprom_len = & e1000_get_eeprom_len, .get_eeprom = & e1000_get_eeprom, .set_eeprom = & e1000_set_eeprom, .get_coalesce = & e1000_get_coalesce, .set_coalesce = & e1000_set_coalesce, .get_ringparam = & e1000_get_ringparam, .set_ringparam = & e1000_set_ringparam, .get_pauseparam = & e1000_get_pauseparam, .set_pauseparam = & e1000_set_pauseparam, .self_test = & e1000_diag_test, .get_strings = & e1000_get_strings, .set_phys_id = & e1000_set_phys_id, .get_ethtool_stats = & e1000_get_ethtool_stats, .get_sset_count = & e1000_get_sset_count, .get_ts_info = & ethtool_op_get_ts_info, .get_link_ksettings = & e1000_get_link_ksettings, .set_link_ksettings = & e1000_set_link_ksettings};
#line 1883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_ethtool.c"
void e1000_set_ethtool_ops(struct net_device *netdev)
{
  #line 1885 
  netdev->ethtool_ops = & e1000_ethtool_ops;
  #line 1886 
  return;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
#line 95 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 99 
#line 99 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
void emg_wrapper_e1000_diag_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 107 
  e1000_diag_test(arg0,arg1,arg2);
  #line 108 
  return;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 112 
  return e1000_get_coalesce(arg0,arg1);
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
void emg_wrapper_e1000_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 117 
  e1000_get_drvinfo(arg0,arg1);
  #line 118 
  return;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 122 
  return e1000_get_eeprom(arg0,arg1,arg2);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_get_eeprom_len(struct net_device *arg0)
{
  #line 127 
  return e1000_get_eeprom_len(arg0);
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
void emg_wrapper_e1000_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 132 
  e1000_get_ethtool_stats(arg0,arg1,arg2);
  #line 133 
  return;
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
unsigned int emg_wrapper_e1000_get_link(struct net_device *arg0)
{
  #line 137 
  return e1000_get_link(arg0);
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 142 
  return e1000_get_link_ksettings(arg0,arg1);
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
unsigned int emg_wrapper_e1000_get_msglevel(struct net_device *arg0)
{
  #line 147 
  return e1000_get_msglevel(arg0);
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
void emg_wrapper_e1000_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 152 
  e1000_get_pauseparam(arg0,arg1);
  #line 153 
  return;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
void emg_wrapper_e1000_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 157 
  e1000_get_regs(arg0,arg1,arg2);
  #line 158 
  return;
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_get_regs_len(struct net_device *arg0)
{
  #line 162 
  return e1000_get_regs_len(arg0);
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
void emg_wrapper_e1000_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 167 
  e1000_get_ringparam(arg0,arg1);
  #line 168 
  return;
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 172 
  return e1000_get_sset_count(arg0,arg1);
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
void emg_wrapper_e1000_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 177 
  e1000_get_strings(arg0,arg1,arg2);
  #line 178 
  return;
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
void emg_wrapper_e1000_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 182 
  e1000_get_wol(arg0,arg1);
  #line 183 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_nway_reset(struct net_device *arg0)
{
  #line 187 
  return e1000_nway_reset(arg0);
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 192 
  return e1000_set_coalesce(arg0,arg1);
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_set_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 197 
  return e1000_set_eeprom(arg0,arg1,arg2);
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 202 
  return e1000_set_link_ksettings(arg0,arg1);
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
void emg_wrapper_e1000_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 207 
  e1000_set_msglevel(arg0,arg1);
  #line 208 
  return;
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 212 
  return e1000_set_pauseparam(arg0,arg1);
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 217 
  return e1000_set_phys_id(arg0,arg1);
}

#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 222 
  return e1000_set_ringparam(arg0,arg1);
}

#line 226  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
int emg_wrapper_e1000_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 227 
  return e1000_set_wol(arg0,arg1);
}

#line 231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
enum irqreturn emg_wrapper_e1000_test_intr(int arg0, void *arg1)
{
  #line 232 
  return e1000_test_intr(arg0,arg1);
}

#line 251  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 254 
  ldv_set_bit(nr,addr);
  #line 255 
  return;
}

#line 258  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 261 
  ldv_clear_bit(nr,addr);
  #line 262 
  return;
}

#line 582  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 585 
  return ldv_kmalloc(size,flags);
}

#line 589  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 592 
  return ldv_kmalloc_array(n,size,flags);
}

#line 596  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 599 
  return ldv_kcalloc(n,size,flags);
}

#line 617  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 620 
  return ldv_kzalloc(size,flags);
}

#line 930  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 934 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 938  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_ethtool.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 942 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
#line 16 
struct task_struct *ldv_get_current(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 248  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 220  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 487 
void print_hex_dump(char *, char *, int, int, int, void *, size_t, bool);
#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 570 
extern enum system_states system_state;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 63 
char *strcpy(char *, char *);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_1060 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_1062 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_read((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 631  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 994  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_spin_unlock_irqrestore_stats_lock_of_e1000_adapter(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 985 
static void cif___ldv_spin_lock_stats_lock_of_e1000_adapter(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 22 
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 554 
#line 777  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 977  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_1142 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_131_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 209 
#line 209 
void iounmap(void *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void outl(unsigned int value, int port)
{
  #line 338 
  ldv_inline_asm();
  #line 339 
  return;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 963  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 970  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_vfree(void *addr);
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 527 
struct page *alloc_pages_current(gfp_t, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 532 
  return alloc_pages_current(gfp_mask,order);
}

#line 575 
#line 575 
void page_frag_free(void *);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 12 
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
#line 31 
#line 31 
void __page_ref_mod_and_test(struct page *, int, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read(& page->_refcount);
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_dec_and_test(struct page *page)
{
  #line 139 
  int ret = (int)atomic_dec_and_test(& page->_refcount);
  #line 141 
  if ((int)static_key_false(& __tracepoint_page_ref_mod_and_test.key) != 0) 
    #line 142 
    __page_ref_mod_and_test(page,-1,ret);
  #line 143 
  return ret;
}

#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static void pagefault_disabled_inc(void)
{
  #line 168 
  (ldv_get_current()->pagefault_disabled) ++;
  #line 169 
  return;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static void pagefault_disabled_dec(void)
{
  #line 173 
  (ldv_get_current()->pagefault_disabled) --;
  #line 174 
  return;
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static void pagefault_disable(void)
{
  #line 185 
  pagefault_disabled_inc();
  #line 186 
  ldv_inline_asm();
  #line 187 
  return;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static void pagefault_enable(void)
{
  #line 195 
  ldv_inline_asm();
  #line 200 
  pagefault_disabled_dec();
  #line 201 
  return;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 736 
#line 736 
void __put_page(struct page *);
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static enum zone_type page_zonenum(struct page *page)
{
  #line 937 
  return (enum zone_type)((unsigned int)(page->flags >> 51UL) & 7U);
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_zone_device_page(struct page *page)
{
  #line 943 
  return (_Bool)(page_zonenum(page) == (unsigned int)ZONE_DEVICE);
}

#line 955 
#line 955 
void __put_devmap_managed_page(struct page *);
#line 956 
#line 956 
extern struct static_key_false devmap_managed_key;
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool put_devmap_managed_page(struct page *page)
{
  #line 959 
  bool branch;
  #line 959 
  branch = arch_static_branch(& devmap_managed_key.key,(_Bool)0);
  #line 959 
  if ((long)((long)((int)branch != 0)) == 0L) 
                                              #line 960 
                                              return (_Bool)0;
  #line 961 
  if (! is_zone_device_page(page)) 
                                   #line 962 
                                   return (_Bool)0;
  #line 963 
  switch ((unsigned int)(page->__anonCompField_page_43.__anonCompField___anonunion_131_42.pgmap)->type) {
    #line 964 
    case (unsigned int)1: 
                          #line 964 
    ;
    #line 965 
    case (unsigned int)2: 
                          #line 965 
    ;
    #line 966 
    __put_devmap_managed_page(page);
    #line 967 
    return (_Bool)1;
    #line 968 
    default: 
             #line 968 
    ;
    #line 969 
    break;
  }
  #line 971 
  return (_Bool)0;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page(struct page *page)
{
  #line 1023 
  page = compound_head(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero(page) != 0) 
                                    #line 1035 
                                    __put_page(page);
  #line 1036 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index == 18446744073709551615UL);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 915  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 923  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 236 
bool disable_hardirq(unsigned int);
#line 239 
#line 239 
void enable_irq(unsigned int);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 544  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 558  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_channel_offline(struct pci_dev *pdev)
{
  #line 490 
  return pdev->error_state != 1U;
}

#line 1084 
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1133 
#line 1133 
int pci_enable_device_mem(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1166 
#line 1166 
int pci_set_mwi(struct pci_dev *);
#line 1169 
#line 1169 
void pci_clear_mwi(struct pci_dev *);
#line 1176 
#line 1176 
int pcix_get_mmrbc(struct pci_dev *);
#line 1177 
#line 1177 
int pcix_set_mmrbc(struct pci_dev *, int);
#line 1202 
#line 1202 
int pci_select_bars(struct pci_dev *, unsigned long);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1237 
#line 1237 
int pci_enable_wake(struct pci_dev *, pci_power_t, bool);
#line 1238 
#line 1238 
int pci_wake_from_d3(struct pci_dev *, bool);
#line 1239 
#line 1239 
int pci_prepare_to_sleep(struct pci_dev *);
#line 1286 
#line 1286 
int pci_request_selected_regions(struct pci_dev *, int, char *);
#line 1288 
#line 1288 
void pci_release_selected_regions(struct pci_dev *, int);
#line 1346 
#line 899  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 907  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 2022 
#line 2022 
void *pci_ioremap_bar(struct pci_dev *, int);
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_1450 __u;
  #line 93 
  union __anonunion___u_1452 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  #line 25 
  ldv_inline_asm();
  #line 30 
  return (unsigned short)(~ sum >> 16);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 90 
  ldv_inline_asm();
  #line 98 
  return sum;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 117 
  return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,(unsigned char)((int)proto),sum));
}

#line 180 
#line 180 
__sum16 csum_ipv6_magic(struct in6_addr *, struct in6_addr *, __u32, __u8, __wsum);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  #line 337 
  frag->bv_len = size;
  #line 338 
  return;
}

#line 1019 
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1035 
#line 1035 
struct sk_buff *build_skb(void *, unsigned int);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2105 
  skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
  #line 2112 
  frag->bv_page = page;
  #line 2113 
  frag->bv_offset = (unsigned int)off;
  #line 2114 
  skb_frag_size_set(frag,(unsigned int)size);
  #line 2116 
  page = compound_head(page);
  #line 2117 
  if ((int)page_is_pfmemalloc(page) != 0) 
                                          #line 2118 
                                          skb->pfmemalloc = (unsigned char)1U;
  #line 2119 
  return;
}

#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2138 
  __skb_fill_page_desc(skb,i,page,off,size);
  #line 2139 
  ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  #line 2140 
  return;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_tail_pointer(struct sk_buff *skb)
{
  #line 2158 
  skb->tail = (unsigned int)(skb->data - skb->head);
  #line 2159 
  return;
}

#line 2161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_tail_pointer(struct sk_buff *skb, int offset)
{
  #line 2163 
  skb_reset_tail_pointer(skb);
  #line 2164 
  skb->tail += (unsigned int)offset;
  #line 2165 
  return;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_data(struct sk_buff *skb, void *data, unsigned int len)
{
  #line 2233 
  void *tmp = skb_put(skb,len);
  #line 2235 
  memcpy(tmp,data,(unsigned long)len);
  #line 2237 
  return tmp;
}

#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_checksum_start_offset(struct sk_buff *skb)
{
  #line 2551 
  ;
  #line 2551 
  return (int)((unsigned int)skb->__anonCompField_sk_buff_98.__anonCompField___anonunion_540_97.csum_start - skb_headroom(skb));
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 2637 
#line 2637 
int ___pskb_trim(struct sk_buff *, unsigned int);
#line 2639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_length(struct sk_buff *skb, unsigned int len)
{
  #line 2641 
  int __ret_warn_on;
  {
    #line 2641 
    __ret_warn_on = (int)skb_is_nonlinear(skb) != 0;
    #line 2641 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 2642 
      ldv_inline_asm();
      #line 2643 
      ldv_inline_asm();
    }
    }
  #line 2641 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 2642 
                                                return;
  #line 2643 
  skb->len = len;
  #line 2644 
  skb_set_tail_pointer(skb,(int)len);
  #line 2645 
  return;
}

#line 2647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_trim(struct sk_buff *skb, unsigned int len)
{
  #line 2649 
  __skb_set_length(skb,len);
  #line 2650 
  return;
}

#line 2652 
#line 2652 
void skb_trim(struct sk_buff *, unsigned int);
#line 2654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __pskb_trim(struct sk_buff *skb, unsigned int len)
{
  #line 2656 
  if (skb->data_len != 0U) {
    #line 2657 
    return ___pskb_trim(skb,len);
  }
  #line 2658 
  __skb_trim(skb,len);
  #line 2659 
  return 0;
}

#line 2662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int pskb_trim(struct sk_buff *skb, unsigned int len)
{
  #line 2664 
  int tmp_0;
  #line 2664 
  if (skb->len > len) 
                      #line 2664 
                      tmp_0 = __pskb_trim(skb,len); else 
                                                         #line 2664 
                                                         tmp_0 = 0;
  #line 2664 
  return tmp_0;
}

#line 2760 
#line 2760 
void *netdev_alloc_frag(unsigned int);
#line 2814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_free_frag(void *addr)
{
  #line 2816 
  page_frag_free(addr);
  #line 2817 
  return;
}

#line 2820 
#line 2820 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
#line 2822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *napi_alloc_skb(struct napi_struct *napi, unsigned int length)
{
  #line 2825 
  return __napi_alloc_skb(napi,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_put_padto(struct sk_buff *skb, unsigned int len, bool free_on_error)
{
  #line 3189 
  unsigned int size = skb->len;
  #line 3191 
  if ((long)(size < len) != 0L) {
    #line 3192 
    len -= size;
    #line 3193 
    if (__skb_pad(skb,(int)len,(_Bool)((bool)((int)free_on_error) != 0)) != 0) 
      #line 3194 
      return -12;
    #line 3195 
    __skb_put(skb,len);
  }
  #line 3197 
  return 0;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3212 
  return __skb_put_padto(skb,len,(_Bool)1);
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso_v6(struct sk_buff *skb)
{
  #line 4398 
  ;
  #line 4398 
  return (_Bool)((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 16U) != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_0(0L,& n->state);
  #line 517 
  cif_clear_bit_0(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2679 
#line 947  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_0(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  #line 3117 
  netif_tx_start_queue(netdev_get_tx_queue(dev,0U));
  #line 3118 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  #line 3141 
  netif_tx_wake_queue(netdev_get_tx_queue(dev,0U));
  #line 3142 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_0(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_queue_stopped(struct net_device *dev)
{
  #line 3187 
  return netif_tx_queue_stopped(netdev_get_tx_queue(dev,0U));
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit_0(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit_0(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_sent_queue(struct net_device *dev, unsigned int bytes)
{
  #line 3290 
  ;
  #line 3290 
  netdev_tx_sent_queue(netdev_get_tx_queue(dev,0U),bytes);
  #line 3291 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_set_bit(1L,& dev_queue->state) != 0) 
                                                         #line 3321 
                                                         netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_completed_queue(struct net_device *dev, unsigned int pkts, unsigned int bytes)
{
  #line 3338 
  ;
  #line 3338 
  ;
  #line 3338 
  netdev_tx_completed_queue(netdev_get_tx_queue(dev,0U),pkts,bytes);
  #line 3339 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit_0(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_reset_queue(struct net_device *dev_queue)
{
  #line 3358 
  netdev_tx_reset_queue(netdev_get_tx_queue(dev_queue,0U));
  #line 3359 
  return;
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3667 
#line 3667 
struct sk_buff *napi_get_frags(struct napi_struct *);
#line 3668 
#line 3668 
gro_result_t napi_gro_frags(struct napi_struct *);
#line 3672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_free_frags(struct napi_struct *napi)
{
  #line 3674 
  kfree_skb(napi->skb);
  #line 3675 
  napi->skb = (struct sk_buff *)0;
  #line 3676 
  return;
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    int pfo_ret__;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4131 
#line 939  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 931  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static int eth_skb_pad(struct sk_buff *skb)
{
  #line 532 
  return skb_put_padto(skb,60U);
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page)
{
  #line 93 
  __preempt_count_add(1);
  #line 94 
  ldv_inline_asm();
  #line 94 
  pagefault_disable();
  #line 95 
  return lowmem_page_address(page);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr)
{
  #line 101 
  pagefault_enable();
  #line 104 
  ldv_inline_asm();
  #line 102 
  __preempt_count_sub(1);
  #line 104 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  #line 53 
  return (struct mii_ioctl_data *)(& rq->ifr_ifru);
}

#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
#line 267 
s32 e1000_reset_hw(struct e1000_hw *hw);
#line 268 
#line 268 
s32 e1000_init_hw(struct e1000_hw *hw);
#line 269 
#line 269 
s32 e1000_set_mac_type(struct e1000_hw *hw);
#line 270 
#line 270 
void e1000_set_media_type(struct e1000_hw *hw);
#line 274 
#line 274 
s32 e1000_phy_setup_autoneg(struct e1000_hw *hw);
#line 275 
#line 275 
void e1000_config_collision_dist(struct e1000_hw *hw);
#line 283 
#line 283 
s32 e1000_phy_hw_reset(struct e1000_hw *hw);
#line 285 
#line 285 
s32 e1000_phy_get_info(struct e1000_hw *hw, struct e1000_phy_info *phy_info);
#line 289 
#line 289 
s32 e1000_init_eeprom_params(struct e1000_hw *hw);
#line 292 
#line 292 
u32 e1000_enable_mng_pass_thru(struct e1000_hw *hw);
#line 348 
#line 348 
s32 e1000_validate_eeprom_checksum(struct e1000_hw *hw);
#line 351 
#line 351 
s32 e1000_read_mac_addr(struct e1000_hw *hw);
#line 354 
#line 354 
u32 e1000_hash_mc_addr(struct e1000_hw *hw, u8 *mc_addr);
#line 356 
#line 356 
void e1000_rar_set(struct e1000_hw *hw, u8 *addr, u32 index);
#line 357 
#line 357 
void e1000_write_vfta(struct e1000_hw *hw, u32 offset, u32 value);
#line 369 
#line 369 
void e1000_reset_adaptive(struct e1000_hw *hw);
#line 370 
#line 370 
void e1000_update_adaptive(struct e1000_hw *hw);
#line 371 
#line 371 
void e1000_get_bus_info(struct e1000_hw *hw);
#line 372 
#line 4833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_pci_set_mwi(struct e1000_hw *hw);
#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
#line 4842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_pci_clear_mwi(struct e1000_hw *hw);
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
#line 4855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_pcix_set_mmrbc(struct e1000_hw *hw, int mmrbc);
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
#line 4849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
int e1000_pcix_get_mmrbc(struct e1000_hw *hw);
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
#line 4861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_io_write(struct e1000_hw *hw, unsigned long port, u32 value);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000.h"
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
struct net_device *e1000_get_hw_dev(struct e1000_hw *hw);
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000.h"
#line 350 
void e1000_check_options(struct e1000_adapter *adapter);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
char e1000_driver_name[6U] = {(char)'e', (char)'1', (char)'0', (char)'0', (char)'0'};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static char e1000_driver_string[33U] = {(char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'(', (char)'R', (char)')', (char)' ', (char)'P', (char)'R', (char)'O', (char)'/', (char)'1', (char)'0', (char)'0', (char)'0', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r'};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
char e1000_driver_version[15U] = {(char)'7', (char)'.', (char)'3', (char)'.', (char)'2', (char)'1', (char)'-', (char)'k', (char)'8', (char)'-', (char)'N', (char)'A', (char)'P', (char)'I'};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static char e1000_copyright[43U] = {(char)'C', (char)'o', (char)'p', (char)'y', (char)'r', (char)'i', (char)'g', (char)'h', (char)'t', (char)' ', (char)'(', (char)'c', (char)')', (char)' ', (char)'1', (char)'9', (char)'9', (char)'9', (char)'-', (char)'2', (char)'0', (char)'0', (char)'6', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)' ', (char)'C', (char)'o', (char)'r', (char)'p', (char)'o', (char)'r', (char)'a', (char)'t', (char)'i', (char)'o', (char)'n', (char)'.'};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static struct pci_device_id e1000_pci_tbl[38U] = {{.vendor = 32902U, .device = 4096U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4097U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4100U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4104U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4105U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4108U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4109U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4110U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4111U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4112U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4113U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4114U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4115U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4116U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4117U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4118U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4119U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4120U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4121U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4122U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4125U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4126U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4134U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4135U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4136U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4213U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4214U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4215U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4216U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4217U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4218U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4219U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4220U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4234U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4249U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4277U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 11886U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
struct pci_device_id __mod_pci__e1000_pci_tbl_device_table[38U];
#line 76 
#line 1492 
static int e1000_setup_tx_resources(struct e1000_adapter *adapter, struct e1000_tx_ring *txdr);
#line 78 
#line 1682 
static int e1000_setup_rx_resources(struct e1000_adapter *adapter, struct e1000_rx_ring *rxdr);
#line 80 
#line 1918 
static void e1000_free_tx_resources(struct e1000_adapter *adapter, struct e1000_tx_ring *tx_ring);
#line 82 
#line 2025 
static void e1000_free_rx_resources(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring);
#line 86 
#line 223 
static int e1000_init_module(void);
#line 87 
#line 249 
static void e1000_exit_module(void);
#line 88 
#line 920 
static int e1000_probe(struct pci_dev *pdev, struct pci_device_id *ent);
#line 89 
#line 1257 
static void e1000_remove(struct pci_dev *pdev);
#line 90 
#line 1324 
static int e1000_alloc_queues(struct e1000_adapter *adapter);
#line 91 
#line 1295 
static int e1000_sw_init(struct e1000_adapter *adapter);
#line 94 
#line 1587 
static void e1000_configure_tx(struct e1000_adapter *adapter);
#line 95 
#line 1846 
static void e1000_configure_rx(struct e1000_adapter *adapter);
#line 96 
#line 1777 
static void e1000_setup_rctl(struct e1000_adapter *adapter);
#line 97 
#line 2010 
static void e1000_clean_all_tx_rings(struct e1000_adapter *adapter);
#line 98 
#line 2133 
static void e1000_clean_all_rx_rings(struct e1000_adapter *adapter);
#line 99 
#line 1975 
static void e1000_clean_tx_ring(struct e1000_adapter *adapter, struct e1000_tx_ring *tx_ring);
#line 101 
#line 2077 
static void e1000_clean_rx_ring(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring);
#line 103 
#line 2226 
static void e1000_set_rx_mode(struct net_device *netdev);
#line 104 
#line 2334 
static void e1000_update_phy_info_task(struct work_struct *work);
#line 105 
#line 2419 
static void e1000_watchdog(struct work_struct *work);
#line 106 
#line 2347 
static void e1000_82547_tx_fifo_stall_task(struct work_struct *work);
#line 107 
#line 3096 
static netdev_tx_t e1000_xmit_frame(struct sk_buff *skb, struct net_device *netdev);
#line 109 
#line 3516 
static int e1000_change_mtu(struct net_device *netdev, int new_mtu);
#line 110 
#line 2192 
static int e1000_set_mac(struct net_device *netdev, void *p);
#line 111 
#line 3741 
static irqreturn_t e1000_intr(int irq, void *data);
#line 112 
#line 3820 
static bool e1000_clean_tx_irq(struct e1000_adapter *adapter, struct e1000_tx_ring *tx_ring);
#line 114 
#line 3790 
static int e1000_clean(struct napi_struct *napi, int budget);
#line 115 
#line 4339 
static bool e1000_clean_rx_irq(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring, int *work_done, int work_to_do);
#line 118 
#line 4118 
static bool e1000_clean_jumbo_rx_irq(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring, int *work_done, int work_to_do);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_alloc_dummy_rx_buffers(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring, int cleaned_count)
{
  #line 123 
  return;
}

#line 126 
#line 4550 
static void e1000_alloc_rx_buffers(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring, int cleaned_count);
#line 129 
#line 4488 
static void e1000_alloc_jumbo_rx_buffers(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring, int cleaned_count);
#line 132 
#line 4724 
static int e1000_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd);
#line 133 
#line 4742 
static int e1000_mii_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd);
#line 135 
#line 2144 
static void e1000_enter_82542_rst(struct e1000_adapter *adapter);
#line 136 
#line 2162 
static void e1000_leave_82542_rst(struct e1000_adapter *adapter);
#line 137 
#line 3491 
static void e1000_tx_timeout(struct net_device *netdev);
#line 138 
#line 3500 
static void e1000_reset_task(struct work_struct *work);
#line 139 
#line 4665 
static void e1000_smartspeed(struct e1000_adapter *adapter);
#line 140 
#line 3037 
static int e1000_82547_fifo_workaround(struct e1000_adapter *adapter, struct sk_buff *skb);
#line 143 
#line 4866 
static bool e1000_vlan_used(struct e1000_adapter *adapter);
#line 144 
#line 4920 
static void e1000_vlan_mode(struct net_device *netdev, netdev_features_t features);
#line 146 
#line 4891 
static void e1000_vlan_filter_on_off(struct e1000_adapter *adapter, bool filter_on);
#line 148 
#line 4934 
static int e1000_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid);
#line 150 
#line 4960 
static int e1000_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid);
#line 152 
#line 4986 
static void e1000_restore_vlan(struct e1000_adapter *adapter);
#line 155 
#line 5138 
static int e1000_suspend(struct pci_dev *pdev, pm_message_t state);
#line 156 
#line 5157 
static int e1000_resume(struct pci_dev *pdev);
#line 158 
#line 5206 
static void e1000_shutdown(struct pci_dev *pdev);
#line 162 
#line 5223 
static void e1000_netpoll(struct net_device *netdev);
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static unsigned int copybreak = 256U;
#line 171 
#line 5241 
static pci_ers_result_t e1000_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state);
#line 173 
#line 5269 
static pci_ers_result_t e1000_io_slot_reset(struct pci_dev *pdev);
#line 174 
#line 5307 
static void e1000_io_resume(struct pci_dev *pdev);
#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static struct pci_error_handlers e1000_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& e1000_io_error_detected), .slot_reset = & e1000_io_slot_reset, .resume = & e1000_io_resume};
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static struct pci_driver e1000_driver = {.name = (char *)(& e1000_driver_name), .id_table = (struct pci_device_id *)(& e1000_pci_tbl), .probe = & e1000_probe, .remove = & e1000_remove, .suspend = & e1000_suspend, .resume = & e1000_resume, .shutdown = & e1000_shutdown, .err_handler = & e1000_err_handler};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int debug = -1;
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
struct net_device *e1000_get_hw_dev(struct e1000_hw *hw)
{
  #line 213 
  struct e1000_adapter *adapter = (struct e1000_adapter *)hw->back;
  #line 214 
  return adapter->netdev;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_init_module(void)
{
  #line 225 
  int ret;
  #line 226 
  printk((char *)"\001",(char *)(& e1000_driver_string),(char *)(& e1000_driver_version));
  #line 228 
  printk((char *)"\001",(char *)(& e1000_copyright));
  #line 230 
  ret = cif___pci_register_driver(& e1000_driver,& __this_module,(char *)"e1000");
  #line 231 
  if (copybreak != 256U) 
    #line 232 
    if (copybreak == 0U) 
                         #line 233 
                         printk((char *)"\001"); else 
                                                      #line 235 
                                                      printk((char *)"\001",copybreak);
  #line 238 
  return ret;
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_exit_module(void)
{
  #line 251 
  cif_pci_unregister_driver(& e1000_driver);
  #line 252 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_request_irq(struct e1000_adapter *adapter)
{
  #line 261 
  int err;
  #line 258 
  struct net_device *netdev = adapter->netdev;
  #line 259 
  irqreturn_t (*handler)(int , void *) = & e1000_intr;
  #line 260 
  int irq_flags = 128;
  #line 263 
  err = cif_request_irq_0((adapter->pdev)->irq,handler,(unsigned long)irq_flags,(char *)(& netdev->name),(void *)netdev);
  #line 265 
  if (err != 0) 
    #line 266 
    if ((adapter->msg_enable & 2) != 0) 
                                        #line 266 
                                        netdev_err(adapter->netdev,(char *)"Unable to allocate interrupt Error: %d\n",err);
  #line 269 
  return err;
}

#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_free_irq(struct e1000_adapter *adapter)
{
  #line 274 
  struct net_device *netdev = adapter->netdev;
  #line 276 
  cif_free_irq_0((adapter->pdev)->irq,(void *)netdev);
  #line 277 
  return;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_irq_disable(struct e1000_adapter *adapter)
{
  #line 285 
  struct e1000_hw *hw = & adapter->hw;
  #line 287 
  writel(4294967295U,(void *)(hw->hw_addr + 216U));
  #line 288 
  readl((void *)(hw->hw_addr + 8U));
  #line 289 
  synchronize_irq((adapter->pdev)->irq);
  #line 290 
  return;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_irq_enable(struct e1000_adapter *adapter)
{
  #line 298 
  struct e1000_hw *hw = & adapter->hw;
  #line 300 
  writel(157U,(void *)(hw->hw_addr + 208U));
  #line 301 
  readl((void *)(hw->hw_addr + 8U));
  #line 302 
  return;
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_update_mng_vlan(struct e1000_adapter *adapter)
{
  #line 306 
  struct e1000_hw *hw = & adapter->hw;
  #line 307 
  struct net_device *netdev = adapter->netdev;
  #line 308 
  u16 vid = hw->mng_cookie.vlan_id;
  #line 309 
  u16 old_vid = adapter->mng_vlan_id;
  #line 311 
  if (! e1000_vlan_used(adapter)) 
                                  #line 312 
                                  return;
  #line 314 
  if (test_bit((long)vid,(unsigned long *)(& adapter->active_vlans))) 
    #line 328 
    adapter->mng_vlan_id = vid;
  else {
    #line 315 
    if (((int)hw->mng_cookie.status & 2) != 0) {
      #line 317 
      e1000_vlan_rx_add_vid(netdev,(unsigned short)129,(unsigned short)((int)vid));
      #line 318 
      adapter->mng_vlan_id = vid;
    }
    else 
         #line 320 
         adapter->mng_vlan_id = (unsigned short)65535U;
    #line 322 
    if ((unsigned int)old_vid != 65535U && (int)vid != (int)old_vid) {
      #line 324 
      if (! test_bit((long)old_vid,(unsigned long *)(& adapter->active_vlans))) 
        #line 325 
        e1000_vlan_rx_kill_vid(netdev,(unsigned short)129,(unsigned short)((int)old_vid));
    }
  }
  #line 329 
  return;
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_init_manageability(struct e1000_adapter *adapter)
{
  #line 334 
  struct e1000_hw *hw = & adapter->hw;
  #line 336 
  if (adapter->en_mng_pt != 0U) {
    #line 337 
    u32 manc = readl((void *)(hw->hw_addr + 22560U));
    #line 340 
    manc &= 4294959103U;
    #line 342 
    writel(manc,(void *)(hw->hw_addr + 22560U));
  }
  #line 344 
  return;
}

#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_release_manageability(struct e1000_adapter *adapter)
{
  #line 348 
  struct e1000_hw *hw = & adapter->hw;
  #line 350 
  if (adapter->en_mng_pt != 0U) {
    #line 351 
    u32 manc = readl((void *)(hw->hw_addr + 22560U));
    #line 354 
    manc |= 8192U;
    #line 356 
    writel(manc,(void *)(hw->hw_addr + 22560U));
  }
  #line 358 
  return;
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_configure(struct e1000_adapter *adapter)
{
  #line 367 
  int i;
  #line 366 
  struct net_device *netdev = adapter->netdev;
  #line 369 
  e1000_set_rx_mode(netdev);
  #line 371 
  e1000_restore_vlan(adapter);
  #line 372 
  e1000_init_manageability(adapter);
  #line 374 
  e1000_configure_tx(adapter);
  #line 375 
  e1000_setup_rctl(adapter);
  #line 376 
  e1000_configure_rx(adapter);
  #line 381 
  i = 0;
  #line 381 
  while (adapter->num_rx_queues > i) {
    {
      #line 384 
      unsigned int tmp_2;
      #line 384 
      unsigned int clean;
      #line 384 
      unsigned int use;
      #line 382 
      struct e1000_rx_ring *ring = adapter->rx_ring + (unsigned long)i;
      {
        #line 384 
        unsigned int ___p1;
        #line 385 
        union __anonunion___u_2017 __u_0;
        {
          #line 385 
          union __anonunion___u_2015 __u;
          #line 384 
          __read_once_size((void *)(& ring->next_to_clean),(void *)(& __u.__c),4);
          #line 384 
          ___p1 = (__u.__val);
          #line 387 
          ldv_inline_asm();
          }
        #line 384 
        clean = ___p1;
        #line 384 
        __read_once_size((void *)(& ring->next_to_use),(void *)(& __u_0.__c),4);
        #line 384 
        use = (__u_0.__val);
        #line 384 
        if (clean <= use) 
                          #line 384 
                          tmp_2 = ring->count; else 
                                                    #line 384 
                                                    tmp_2 = 0U;
        #line 384 
        ;
        }
      #line 383 
      ;
      #line 383 
      ;
      #line 383 
      (*(adapter->alloc_rx_buf))(adapter,ring,(int)(((tmp_2 + clean) - use) + 4294967295U));
    }
    #line 381 
    i ++;
  }
  #line 387 
  return;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
int e1000_up(struct e1000_adapter *adapter)
{
  #line 390 
  struct e1000_hw *hw = & adapter->hw;
  #line 393 
  e1000_configure(adapter);
  #line 395 
  cif_clear_bit_0(2L,& adapter->flags);
  #line 397 
  napi_enable(& adapter->napi);
  #line 399 
  e1000_irq_enable(adapter);
  #line 401 
  netif_wake_queue(adapter->netdev);
  #line 404 
  writel(4U,(void *)(hw->hw_addr + 200U));
  #line 405 
  return 0;
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_power_up_phy(struct e1000_adapter *adapter)
{
  #line 418 
  struct e1000_hw *hw = & adapter->hw;
  #line 419 
  u16 mii_reg = (unsigned short)0U;
  #line 422 
  if (hw->media_type == (unsigned int)0) {
    #line 426 
    e1000_read_phy_reg(hw,0U,& mii_reg);
    #line 427 
    mii_reg = (unsigned short)((unsigned int)mii_reg & 63487U);
    #line 428 
    e1000_write_phy_reg(hw,0U,(unsigned short)((int)mii_reg));
  }
  #line 430 
  return;
}

#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_power_down_phy(struct e1000_adapter *adapter)
{
  #line 434 
  struct e1000_hw *hw = & adapter->hw;
  #line 442 
  if ((adapter->wol == 0U && hw->mac_type > (unsigned int)4) && hw->media_type == (unsigned int)0) {
    #line 444 
    u16 mii_reg = (unsigned short)0U;
    #line 446 
    switch ((unsigned int)hw->mac_type) {
      #line 447 
      case (unsigned int)5: 
                            #line 447 
      ;
      #line 448 
      case (unsigned int)6: 
                            #line 448 
      ;
      #line 449 
      case (unsigned int)7: 
                            #line 449 
      ;
      #line 450 
      case (unsigned int)8: 
                            #line 450 
      ;
      #line 451 
      case (unsigned int)9: 
                            #line 451 
      ;
      #line 452 
      case (unsigned int)10: 
                             #line 452 
      ;
      #line 453 
      case (unsigned int)11: 
                             #line 453 
      ;
      #line 454 
      case (unsigned int)12: 
                             #line 454 
      ;
      #line 455 
      case (unsigned int)13: 
                             #line 455 
      ;
      #line 456 
      case (unsigned int)14: 
                             #line 456 
      ;
      #line 457 
      if ((readl((void *)(hw->hw_addr + 22560U)) & 1U) != 0U) 
                                                              #line 458 
                                                              goto out;
      #line 459 
      break;
      #line 460 
      default: 
               #line 460 
      ;
      #line 461 
      goto out;
    }
    #line 463 
    e1000_read_phy_reg(hw,0U,& mii_reg);
    #line 464 
    mii_reg = (unsigned short)((unsigned int)mii_reg | 2048U);
    #line 465 
    e1000_write_phy_reg(hw,0U,(unsigned short)((int)mii_reg));
    #line 466 
    msleep(1U);
  }
  #line 468 
  out: 
       #line 468 
  ;
  #line 469 
  return;
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_down_and_stop(struct e1000_adapter *adapter)
{
  #line 474 
  cif_set_bit_0(2L,& adapter->flags);
  #line 476 
  cancel_delayed_work_sync(& adapter->watchdog_task);
  #line 484 
  cancel_delayed_work_sync(& adapter->phy_info_task);
  #line 485 
  cancel_delayed_work_sync(& adapter->fifo_stall_task);
  #line 488 
  if (! test_bit(1L,& adapter->flags)) 
                                       #line 489 
                                       cancel_work_sync(& adapter->reset_task);
  #line 490 
  return;
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_down(struct e1000_adapter *adapter)
{
  #line 496 
  u32 rctl;
  #line 496 
  u32 tctl;
  #line 494 
  struct e1000_hw *hw = & adapter->hw;
  #line 495 
  struct net_device *netdev = adapter->netdev;
  #line 499 
  rctl = readl((void *)(hw->hw_addr + 256U));
  #line 500 
  writel(rctl & 4294967293U,(void *)(hw->hw_addr + 256U));
  #line 503 
  netif_tx_disable(netdev);
  #line 506 
  tctl = readl((void *)(hw->hw_addr + 1024U));
  #line 507 
  tctl &= 4294967293U;
  #line 508 
  writel(tctl,(void *)(hw->hw_addr + 1024U));
  #line 510 
  readl((void *)(hw->hw_addr + 8U));
  #line 511 
  msleep(10U);
  #line 520 
  netif_carrier_off(netdev);
  #line 522 
  napi_disable(& adapter->napi);
  #line 524 
  e1000_irq_disable(adapter);
  #line 530 
  e1000_down_and_stop(adapter);
  #line 532 
  adapter->link_speed = (unsigned short)0U;
  #line 533 
  adapter->link_duplex = (unsigned short)0U;
  #line 535 
  e1000_reset(adapter);
  #line 536 
  e1000_clean_all_tx_rings(adapter);
  #line 537 
  e1000_clean_all_rx_rings(adapter);
  #line 538 
  return;
}

#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_reinit_locked(struct e1000_adapter *adapter)
{
  {
    #line 542 
    int __ret_warn_on = ((unsigned long)preempt_count() & 2096896UL) != 0UL;
    #line 542 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 543 
      ldv_inline_asm();
      #line 544 
      ldv_inline_asm();
    }
    #line 542 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 543 
  while (1) {
    #line 543 
    if (! ((int)test_and_set_bit(1L,& adapter->flags) != 0)) 
                                                             #line 543 
                                                             break;
    #line 544 
    msleep(1U);
  }
  #line 545 
  e1000_down(adapter);
  #line 546 
  e1000_up(adapter);
  #line 547 
  cif_clear_bit_0(1L,& adapter->flags);
  #line 548 
  return;
}

#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_reset(struct e1000_adapter *adapter)
{
  #line 665 
  u32 __UNIQUE_ID___x549;
  #line 665 
  u32 tmp;
  #line 553 
  u32 tx_space;
  #line 553 
  u32 min_tx_space;
  #line 553 
  u32 min_rx_space;
  #line 555 
  u16 hwm;
  #line 552 
  struct e1000_hw *hw = & adapter->hw;
  #line 553 
  u32 pba = 0U;
  #line 554 
  bool legacy_pba_adjust = (_Bool)0;
  #line 561 
  switch ((unsigned int)hw->mac_type) {
    #line 562 
    case (unsigned int)1: 
                          #line 562 
    ;
    #line 563 
    case (unsigned int)2: 
                          #line 563 
    ;
    #line 564 
    case (unsigned int)3: 
                          #line 564 
    ;
    #line 565 
    case (unsigned int)4: 
                          #line 565 
    ;
    #line 566 
    case (unsigned int)5: 
                          #line 566 
    ;
    #line 567 
    case (unsigned int)11: 
                           #line 567 
    ;
    #line 568 
    case (unsigned int)12: 
                           #line 568 
    ;
    #line 569 
    legacy_pba_adjust = (_Bool)1;
    #line 570 
    pba = 48U;
    #line 571 
    break;
    #line 572 
    case (unsigned int)6: 
                          #line 572 
    ;
    #line 573 
    case (unsigned int)7: 
                          #line 573 
    ;
    #line 574 
    case (unsigned int)8: 
                          #line 574 
    ;
    #line 575 
    case (unsigned int)9: 
                          #line 575 
    ;
    #line 576 
    case (unsigned int)10: 
                           #line 576 
    ;
    #line 577 
    pba = 48U;
    #line 578 
    break;
    #line 579 
    case (unsigned int)13: 
                           #line 579 
    ;
    #line 580 
    case (unsigned int)14: 
                           #line 580 
    ;
    #line 581 
    legacy_pba_adjust = (_Bool)1;
    #line 582 
    pba = 30U;
    #line 583 
    break;
    #line 584 
    case (unsigned int)0: 
                          #line 584 
    ;
    #line 585 
    case (unsigned int)15: 
                           #line 585 
    ;
    #line 586 
    break;
  }
  #line 589 
  if ((int)legacy_pba_adjust != 0) {
    #line 590 
    if (hw->max_frame_size > 8192U) 
                                    #line 591 
                                    pba += 4294967288U;
    #line 593 
    if (hw->mac_type == (unsigned int)13) {
      #line 594 
      adapter->tx_fifo_head = 0U;
      #line 595 
      adapter->tx_head_addr = pba << 7;
      #line 596 
      adapter->tx_fifo_size = (40U - pba) << 10;
      #line 598 
      atomic_set(& adapter->tx_fifo_stall,0);
    }
  }
  else 
    #line 600 
    if (hw->max_frame_size > 1518U) {
      #line 602 
      writel(pba,(void *)(hw->hw_addr + 4096U));
      #line 611 
      pba = readl((void *)(hw->hw_addr + 4096U));
      #line 613 
      tx_space = pba >> 16;
      #line 615 
      pba &= 65535U;
      #line 619 
      min_tx_space = (hw->max_frame_size + 12U) * 2U;
      #line 622 
      min_tx_space = (min_tx_space + 1023U) & 4294966272U;
      #line 623 
      min_tx_space >>= 10;
      #line 625 
      min_rx_space = hw->max_frame_size;
      #line 626 
      min_rx_space = (min_rx_space + 1023U) & 4294966272U;
      #line 627 
      min_rx_space >>= 10;
      #line 633 
      if (tx_space < min_tx_space && min_tx_space - tx_space < pba) {
        #line 635 
        pba = (tx_space - min_tx_space) + pba;
        #line 638 
        switch ((unsigned int)hw->mac_type) {
          #line 639 
          case 6U: 
                   #line 639 
          case 7U: 
                   #line 639 
          case 8U: 
                   #line 639 
          case 9U: 
                   #line 639 
          case 10U: 
                    #line 639 
          ;
          #line 640 
          pba &= 4294967288U;
          #line 641 
          break;
          #line 642 
          default: 
                   #line 642 
          ;
          #line 643 
          break;
        }
        #line 649 
        if (pba < min_rx_space) 
                                #line 650 
                                pba = min_rx_space;
      }
    }
  #line 654 
  writel(pba,(void *)(hw->hw_addr + 4096U));
  {
    #line 665 
    __UNIQUE_ID___x549 = (pba * 9216U) / 10U;
    #line 665 
    u32 __UNIQUE_ID___y550 = (pba << 10) - hw->max_frame_size;
    #line 665 
    if (__UNIQUE_ID___x549 < __UNIQUE_ID___y550) 
                                                 #line 665 
                                                 tmp = __UNIQUE_ID___x549; else 
                                                                    #line 665 
                                                                    tmp = __UNIQUE_ID___y550;
    }
  #line 665 
  hwm = (unsigned short)tmp;
  #line 668 
  hw->fc_high_water = (unsigned short)((unsigned int)hwm & 65528U);
  #line 669 
  hw->fc_low_water = (unsigned short)((unsigned int)hw->fc_high_water + 65528U);
  #line 670 
  hw->fc_pause_time = (unsigned short)65535U;
  #line 671 
  hw->fc_send_xon = (_Bool)1;
  #line 672 
  hw->fc = (enum ldv_19219)hw->original_fc;
  #line 675 
  e1000_reset_hw(hw);
  #line 676 
  if (hw->mac_type > (unsigned int)3) 
                                      #line 677 
                                      writel(0U,(void *)(hw->hw_addr + 22528U));
  #line 679 
  if (e1000_init_hw(hw) != 0) 
                              #line 680 
                              _dev_err(& (adapter->pdev)->dev,(char *)"Hardware Error\n");
  #line 681 
  e1000_update_mng_vlan(adapter);
  #line 684 
  if ((hw->mac_type > (unsigned int)3 && (unsigned int)hw->autoneg == 1U) && (unsigned int)hw->autoneg_advertised == 32U) {
    #line 687 
    u32 ctrl = readl((void *)hw->hw_addr);
    #line 692 
    ctrl &= 4292870143U;
    #line 693 
    writel(ctrl,(void *)hw->hw_addr);
  }
  #line 697 
  writel(33024U,(void *)(hw->hw_addr + 56U));
  #line 699 
  e1000_reset_adaptive(hw);
  #line 700 
  e1000_phy_get_info(hw,& adapter->phy_info);
  #line 702 
  e1000_release_manageability(adapter);
  #line 703 
  return;
}

#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_dump_eeprom(struct e1000_adapter *adapter)
{
  #line 709 
  struct ethtool_eeprom eeprom;
  #line 711 
  u8 *data;
  #line 712 
  int i;
  #line 713 
  u16 csum_old;
  #line 708 
  struct net_device *netdev = adapter->netdev;
  #line 710 
  struct ethtool_ops *ops = netdev->ethtool_ops;
  #line 713 
  u16 csum_new = (unsigned short)0U;
  #line 715 
  eeprom.len = (unsigned int)(*(ops->get_eeprom_len))(netdev);
  #line 716 
  eeprom.offset = 0U;
  #line 718 
  data = (u8 *)kmalloc_0((unsigned long)eeprom.len,3264U);
  #line 719 
  if (data == (u8 *)0U) 
                        #line 720 
                        return;
  #line 722 
  (*(ops->get_eeprom))(netdev,& eeprom,data);
  #line 724 
  csum_old = (unsigned short)((int)((unsigned short)*(data + 126U)) + ((int)((unsigned short)*(data + 127U)) << 8U));
  #line 726 
  i = 0;
  #line 726 
  while (i <= 125) {
    #line 727 
    csum_new = (unsigned short)(((int)((unsigned short)*(data + (unsigned long)i)) + ((int)((unsigned short)*(data + ((unsigned long)i + (unsigned long)1U))) << 8U)) + (int)csum_new);
    #line 726 
    i += 2;
  }
  #line 728 
  csum_new = (unsigned short)(47802U - (unsigned int)csum_new);
  #line 730 
  printk((char *)"\001");
  #line 731 
  printk((char *)"\001",(int)csum_old);
  #line 732 
  printk((char *)"\001",(int)csum_new);
  #line 734 
  printk((char *)"\001");
  #line 735 
  printk((char *)"\001");
  #line 736 
  print_hex_dump((char *)"\001",(char *)"",2,16,1,(void *)data,128UL,(_Bool)0);
  #line 738 
  printk((char *)"\001");
  #line 739 
  printk((char *)"\001");
  #line 740 
  printk((char *)"\001");
  #line 741 
  printk((char *)"\001");
  #line 742 
  printk((char *)"\001");
  #line 743 
  printk((char *)"\001");
  #line 744 
  printk((char *)"\001");
  #line 745 
  printk((char *)"\001");
  #line 746 
  printk((char *)"\001");
  #line 747 
  printk((char *)"\001");
  #line 748 
  printk((char *)"\001");
  #line 750 
  kfree((void *)data);
  #line 751 
  return;
}

#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_is_need_ioport(struct pci_dev *pdev)
{
  #line 761 
  switch ((int)pdev->device) {
    #line 762 
    case 4110: 
               #line 762 
    ;
    #line 763 
    case 4117: 
               #line 763 
    ;
    #line 764 
    case 4119: 
               #line 764 
    ;
    #line 765 
    case 4118: 
               #line 765 
    ;
    #line 766 
    case 4126: 
               #line 766 
    ;
    #line 767 
    case 4115: 
               #line 767 
    ;
    #line 768 
    case 4120: 
               #line 768 
    ;
    #line 769 
    case 4216: 
               #line 769 
    ;
    #line 770 
    case 4116: 
               #line 770 
    ;
    #line 771 
    case 4214: 
               #line 771 
    ;
    #line 772 
    case 4220: 
               #line 772 
    ;
    #line 773 
    case 4215: 
               #line 773 
    ;
    #line 774 
    case 4104: 
               #line 774 
    ;
    #line 775 
    case 4105: 
               #line 775 
    ;
    #line 776 
    case 4108: 
               #line 776 
    ;
    #line 777 
    case 4109: 
               #line 777 
    ;
    #line 778 
    case 4111: 
               #line 778 
    ;
    #line 779 
    case 4113: 
               #line 779 
    ;
    #line 780 
    case 4112: 
               #line 780 
    ;
    #line 781 
    case 4114: 
               #line 781 
    ;
    #line 782 
    case 4125: 
               #line 782 
    ;
    #line 783 
    return 1;
    #line 784 
    default: 
             #line 784 
    ;
    #line 785 
    return 0;
  }
}

#line 789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static netdev_features_t e1000_fix_features(struct net_device *netdev, netdev_features_t features)
{
  #line 795 
  if ((features & 256ULL) != 0ULL) 
                                   #line 796 
                                   features |= 128ULL; else 
                                                            #line 798 
                                                            features &= 18446744073709551487ULL;
  #line 800 
  return features;
}

#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 806 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 807 
  netdev_features_t changed = netdev->features ^ features;
  #line 809 
  if ((changed & 256ULL) != 0ULL) 
                                  #line 810 
                                  e1000_vlan_mode(netdev,features);
  #line 812 
  if ((changed & 9345848836096ULL) == 0ULL) 
                                            #line 813 
                                            return 0;
  #line 815 
  netdev->features = features;
  #line 816 
  adapter->rx_csum = (_Bool)((features & 549755813888ULL) != 0ULL);
  #line 818 
  if ((int)netif_running(netdev) != 0) 
                                       #line 819 
                                       e1000_reinit_locked(adapter); else 
                                                                    #line 821 
                                                                    e1000_reset(adapter);
  #line 823 
  return 1;
}

#line 826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static struct net_device_ops e1000_netdev_ops = {.ndo_open = & e1000_open, .ndo_stop = & e1000_close, .ndo_start_xmit = & e1000_xmit_frame, .ndo_set_rx_mode = & e1000_set_rx_mode, .ndo_set_mac_address = & e1000_set_mac, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & e1000_ioctl, .ndo_change_mtu = & e1000_change_mtu, .ndo_tx_timeout = & e1000_tx_timeout, .ndo_vlan_rx_add_vid = & e1000_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & e1000_vlan_rx_kill_vid, .ndo_poll_controller = & e1000_netpoll, .ndo_fix_features = & e1000_fix_features, .ndo_set_features = & e1000_set_features};
#line 856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_init_hw_struct(struct e1000_adapter *adapter, struct e1000_hw *hw)
{
  #line 859 
  struct pci_dev *pdev = adapter->pdev;
  #line 862 
  hw->vendor_id = pdev->vendor;
  #line 863 
  hw->device_id = pdev->device;
  #line 864 
  hw->subsystem_vendor_id = pdev->subsystem_vendor;
  #line 865 
  hw->subsystem_id = pdev->subsystem_device;
  #line 866 
  hw->revision_id = pdev->revision;
  #line 868 
  pci_read_config_word(pdev,4,& hw->pci_cmd_word);
  #line 870 
  hw->max_frame_size = (adapter->netdev)->mtu + 18U;
  #line 872 
  hw->min_frame_size = 64U;
  #line 875 
  if (e1000_set_mac_type(hw) != 0) {
    #line 876 
    if ((adapter->msg_enable & 2) != 0) 
                                        #line 876 
                                        netdev_err(adapter->netdev,(char *)"Unknown MAC Type\n");
    #line 877 
    return -5;
  }
  #line 880 
  switch ((unsigned int)hw->mac_type) {
    #line 881 
    default: 
             #line 881 
    ;
    #line 882 
    break;
    #line 883 
    case (unsigned int)11: 
                           #line 883 
    ;
    #line 884 
    case (unsigned int)13: 
                           #line 884 
    ;
    #line 885 
    case (unsigned int)12: 
                           #line 885 
    ;
    #line 886 
    case (unsigned int)14: 
                           #line 886 
    ;
    #line 887 
    hw->phy_init_script = 1U;
    #line 888 
    break;
  }
  #line 891 
  e1000_set_media_type(hw);
  #line 892 
  e1000_get_bus_info(hw);
  #line 894 
  hw->wait_autoneg_complete = (unsigned char)0U;
  #line 895 
  hw->tbi_compatibility_en = (_Bool)1;
  #line 896 
  hw->adaptive_ifs = (_Bool)1;
  #line 900 
  if (hw->media_type == (unsigned int)0) {
    #line 901 
    hw->mdix = (unsigned char)0U;
    #line 902 
    hw->disable_polarity_correction = (_Bool)0;
    #line 903 
    hw->master_slave = 0;
  }
  #line 906 
  return 0;
}

#line 920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 922 
  struct net_device *netdev;
  #line 924 
  struct e1000_hw *hw;
  #line 926 
  int cards_found;
  #line 927 
  int global_quad_port_a;
  #line 928 
  int i;
  #line 928 
  int err;
  #line 928 
  int pci_using_dac;
  #line 932 
  int bars;
  #line 932 
  int need_ioport;
  #line 1238 
  int tmp_19;
  #line 923 
  struct e1000_adapter *adapter = (struct e1000_adapter *)0;
  #line 929 
  u16 eeprom_data = (unsigned short)0U;
  #line 930 
  u16 tmp = (unsigned short)0U;
  #line 931 
  u16 eeprom_apme_mask = (unsigned short)1024U;
  #line 933 
  bool disable_dev = (_Bool)0;
  #line 936 
  need_ioport = e1000_is_need_ioport(pdev);
  #line 937 
  if (need_ioport != 0) {
    #line 938 
    bars = pci_select_bars(pdev,768UL);
    #line 939 
    err = pci_enable_device(pdev);
  }
  else {
    #line 941 
    bars = pci_select_bars(pdev,512UL);
    #line 942 
    err = pci_enable_device_mem(pdev);
  }
  #line 944 
  if (err != 0) 
                #line 945 
                return err;
  #line 947 
  err = pci_request_selected_regions(pdev,bars,(char *)(& e1000_driver_name));
  #line 948 
  if (err != 0) 
                #line 949 
                goto err_pci_reg;
  #line 951 
  pci_set_master(pdev);
  #line 952 
  err = pci_save_state(pdev);
  #line 953 
  if (err != 0) 
                #line 954 
                goto err_alloc_etherdev;
  #line 956 
  err = -12;
  #line 957 
  netdev = cif_alloc_etherdev_mqs(2880,1U,1U);
  #line 958 
  if (netdev == (struct net_device *)0) 
                                        #line 959 
                                        goto err_alloc_etherdev;
  #line 961 
  netdev->dev.parent = & pdev->dev;
  #line 963 
  pci_set_drvdata(pdev,(void *)netdev);
  #line 964 
  adapter = (struct e1000_adapter *)netdev_priv(netdev);
  #line 965 
  adapter->netdev = netdev;
  #line 966 
  adapter->pdev = pdev;
  #line 967 
  adapter->msg_enable = (int)netif_msg_init(debug,7);
  #line 968 
  adapter->bars = bars;
  #line 969 
  adapter->need_ioport = need_ioport;
  #line 971 
  hw = & adapter->hw;
  #line 972 
  hw->back = (void *)adapter;
  #line 974 
  err = -5;
  #line 975 
  hw->hw_addr = (u8 *)pci_ioremap_bar(pdev,0);
  #line 976 
  if (hw->hw_addr == (u8 *)0U) 
                               #line 977 
                               goto err_ioremap;
  #line 979 
  if (adapter->need_ioport != 0) {
    #line 980 
    i = 1;
    #line 980 
    while (i <= 5) {
      #line 981 
      if (pdev->resource[i].start == 0ULL && pdev->resource[i].end == pdev->resource[i].start || pdev->resource[i].end - pdev->resource[i].start == 18446744073709551615ULL) 
        #line 982 
        goto __Cont;
      #line 983 
      if ((pdev->resource[i].flags & 256UL) != 0UL) {
        #line 984 
        hw->io_base = (unsigned long)pdev->resource[i].start;
        #line 985 
        break;
      }
      #line 980 
      __Cont: 
              #line 980 
      i ++;
    }
  }
  #line 991 
  err = e1000_init_hw_struct(adapter,hw);
  #line 992 
  if (err != 0) 
                #line 993 
                goto err_sw_init;
  #line 999 
  pci_using_dac = 0;
  #line 1000 
  if (hw->bus_type == (unsigned int)2) {
    #line 1000 
    if (dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL) == 0) 
      #line 1002 
      pci_using_dac = 1; else 
                              #line 1000 
                              goto _LAND;
  }
  else {
    #line 1000 
    _LAND: {
             #line 1004 
             err = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
             #line 1005 
             if (err != 0) {
               #line 1006 
               printk((char *)"\001");
               #line 1007 
               goto err_dma;
             }
           }
  }
  #line 1011 
  netdev->netdev_ops = & e1000_netdev_ops;
  #line 1012 
  e1000_set_ethtool_ops(netdev);
  #line 1013 
  netdev->watchdog_timeo = 1250;
  #line 1014 
  netif_napi_add(netdev,& adapter->napi,& e1000_clean,64);
  #line 1016 
  ;
  #line 1016 
  strncpy((char *)(& netdev->name),pci_name(pdev),15UL);
  #line 1018 
  adapter->bd_number = (unsigned int)cards_found;
  #line 1022 
  err = e1000_sw_init(adapter);
  #line 1023 
  if (err != 0) 
                #line 1024 
                goto err_sw_init;
  #line 1026 
  err = -5;
  #line 1027 
  if (hw->mac_type == (unsigned int)9) {
    #line 1029 
    unsigned long tmp_5;
    #line 1029 
    if (pdev->resource[1].start != 0ULL || pdev->resource[1].end != pdev->resource[1].start) 
      #line 1029 
      tmp_5 = (unsigned long)((pdev->resource[1].end - pdev->resource[1].start) + 1ULL); else 
                                                                    #line 1029 
                                                                    tmp_5 = 0UL;
    #line 1028 
    ;
    #line 1028 
    hw->ce4100_gbe_mdio_base_virt = ioremap(pdev->resource[1].start,tmp_5);
    #line 1032 
    if (hw->ce4100_gbe_mdio_base_virt == (void *)0) 
                                                    #line 1033 
                                                    goto err_mdio_ioremap;
  }
  #line 1036 
  if (hw->mac_type > (unsigned int)2) {
    #line 1037 
    netdev->hw_features = 265ULL;
    #line 1040 
    netdev->features = 640ULL;
  }
  #line 1044 
  if (hw->mac_type > (unsigned int)3 && hw->mac_type != (unsigned int)13) 
    #line 1046 
    netdev->hw_features |= 65536ULL;
  #line 1048 
  netdev->priv_flags |= 16384U;
  #line 1050 
  netdev->features |= netdev->hw_features;
  #line 1051 
  netdev->hw_features |= 13743895347200ULL;
  #line 1055 
  if (pci_using_dac != 0) {
    #line 1056 
    netdev->features |= 32ULL;
    #line 1057 
    netdev->vlan_features |= 32ULL;
  }
  #line 1060 
  netdev->vlan_features |= 65545ULL;
  #line 1065 
  if ((unsigned int)hw->device_id != 4111U || (unsigned int)hw->subsystem_vendor_id != 5549U) 
    #line 1067 
    netdev->priv_flags |= 4096U;
  #line 1070 
  netdev->min_mtu = 46U;
  #line 1071 
  netdev->max_mtu = 16110U;
  #line 1073 
  adapter->en_mng_pt = e1000_enable_mng_pass_thru(hw);
  #line 1076 
  if (e1000_init_eeprom_params(hw) != 0) {
    #line 1077 
    if ((adapter->msg_enable & 2) != 0) 
                                        #line 1077 
                                        netdev_err(adapter->netdev,(char *)"EEPROM initialization failed\n");
    #line 1078 
    goto err_eeprom;
  }
  #line 1085 
  e1000_reset_hw(hw);
  #line 1088 
  if (e1000_validate_eeprom_checksum(hw) < 0) {
    #line 1089 
    if ((adapter->msg_enable & 2) != 0) 
                                        #line 1089 
                                        netdev_err(adapter->netdev,(char *)"The EEPROM Checksum Is Not Valid\n");
    #line 1090 
    e1000_dump_eeprom(adapter);
    #line 1098 
    memset((void *)(& hw->mac_addr),0,(unsigned long)netdev->addr_len);
  }
  else {
    #line 1101 
    if (e1000_read_mac_addr(hw) != 0) 
      #line 1102 
      if ((adapter->msg_enable & 2) != 0) 
                                          #line 1102 
                                          netdev_err(adapter->netdev,(char *)"EEPROM Read Error\n");
  }
  #line 1105 
  memcpy((void *)netdev->dev_addr,(void *)(& hw->mac_addr),(unsigned long)netdev->addr_len);
  #line 1107 
  if (! is_valid_ether_addr(netdev->dev_addr)) 
    #line 1108 
    if ((adapter->msg_enable & 2) != 0) 
                                        #line 1108 
                                        netdev_err(adapter->netdev,(char *)"Invalid MAC Address\n");
  {
    #line 1111 
    struct lock_class_key __key;
    #line 1111 
    __init_work(& adapter->watchdog_task.work,0);
    #line 1111 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 1111 
    adapter->watchdog_task.work.data = __constr_expr_44;
    #line 1111 
    lockdep_init_map(& adapter->watchdog_task.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 1111 
    INIT_LIST_HEAD(& adapter->watchdog_task.work.entry);
    #line 1111 
    adapter->watchdog_task.work.func = & e1000_watchdog;
  }
  {
    #line 1111 
    struct lock_class_key __key_0;
    #line 1111 
    init_timer_key(& adapter->watchdog_task.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->watchdog_task)->timer",& __key_0);
  }
  {
    #line 1112 
    struct lock_class_key __key_1;
    #line 1112 
    __init_work(& adapter->fifo_stall_task.work,0);
    #line 1112 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 1112 
    adapter->fifo_stall_task.work.data = __constr_expr_45;
    #line 1112 
    lockdep_init_map(& adapter->fifo_stall_task.work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 1112 
    INIT_LIST_HEAD(& adapter->fifo_stall_task.work.entry);
    #line 1112 
    adapter->fifo_stall_task.work.func = & e1000_82547_tx_fifo_stall_task;
  }
  {
    #line 1112 
    struct lock_class_key __key_2;
    #line 1112 
    init_timer_key(& adapter->fifo_stall_task.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->fifo_stall_task)->timer",& __key_2);
  }
  {
    #line 1114 
    struct lock_class_key __key_3;
    #line 1114 
    __init_work(& adapter->phy_info_task.work,0);
    #line 1114 
    atomic_long_t __constr_expr_46 = {.counter = 137438953408LL};
    #line 1114 
    adapter->phy_info_task.work.data = __constr_expr_46;
    #line 1114 
    lockdep_init_map(& adapter->phy_info_task.work.lockdep_map,(char *)"(work_completion)",& __key_3,0);
    #line 1114 
    INIT_LIST_HEAD(& adapter->phy_info_task.work.entry);
    #line 1114 
    adapter->phy_info_task.work.func = & e1000_update_phy_info_task;
  }
  {
    #line 1114 
    struct lock_class_key __key_4;
    #line 1114 
    init_timer_key(& adapter->phy_info_task.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->phy_info_task)->timer",& __key_4);
  }
  {
    #line 1115 
    struct lock_class_key __key_5;
    #line 1115 
    __init_work(& adapter->reset_task,0);
    #line 1115 
    atomic_long_t __constr_expr_47 = {.counter = 137438953408LL};
    #line 1115 
    adapter->reset_task.data = __constr_expr_47;
    #line 1115 
    lockdep_init_map(& adapter->reset_task.lockdep_map,(char *)"(work_completion)",& __key_5,0);
    #line 1115 
    INIT_LIST_HEAD(& adapter->reset_task.entry);
    #line 1115 
    adapter->reset_task.func = & e1000_reset_task;
  }
  #line 1117 
  e1000_check_options(adapter);
  #line 1124 
  switch ((unsigned int)hw->mac_type) {
    #line 1125 
    case (unsigned int)1: 
                          #line 1125 
    ;
    #line 1126 
    case (unsigned int)2: 
                          #line 1126 
    ;
    #line 1127 
    case (unsigned int)3: 
                          #line 1127 
    ;
    #line 1128 
    break;
    #line 1129 
    case (unsigned int)4: 
                          #line 1129 
    ;
    #line 1130 
    e1000_read_eeprom(hw,(unsigned short)15,(unsigned short)1,& eeprom_data);
    #line 1132 
    eeprom_apme_mask = (unsigned short)4U;
    #line 1133 
    break;
    #line 1134 
    case (unsigned int)8: 
                          #line 1134 
    ;
    #line 1135 
    case (unsigned int)10: 
                           #line 1135 
    ;
    #line 1136 
    if ((readl((void *)(hw->hw_addr + 8U)) & 4U) != 0U) {
      #line 1137 
      e1000_read_eeprom(hw,(unsigned short)20,(unsigned short)1,& eeprom_data);
      #line 1139 
      break;
    }
    #line 1142 
    default: 
             #line 1142 
    ;
    #line 1143 
    e1000_read_eeprom(hw,(unsigned short)36,(unsigned short)1,& eeprom_data);
    #line 1145 
    break;
  }
  #line 1147 
  if ((unsigned int)((int)eeprom_data & (int)eeprom_apme_mask) != 0U) 
    #line 1148 
    adapter->eeprom_wol |= 2U;
  #line 1154 
  switch ((int)pdev->device) {
    #line 1155 
    case 4234: 
               #line 1155 
    ;
    #line 1156 
    adapter->eeprom_wol = 0U;
    #line 1157 
    break;
    #line 1158 
    case 4114: 
               #line 1158 
    ;
    #line 1159 
    case 4218: 
               #line 1159 
    ;
    #line 1163 
    if ((readl((void *)(hw->hw_addr + 8U)) & 4U) != 0U) 
                                                        #line 1164 
                                                        adapter->eeprom_wol = 0U;
    #line 1165 
    break;
    #line 1166 
    case 4277: 
               #line 1166 
    ;
    #line 1168 
    if (global_quad_port_a != 0) 
                                 #line 1169 
                                 adapter->eeprom_wol = 0U; else 
                                                                #line 1171 
                                                                adapter->quad_port_a = (_Bool)1;
    #line 1173 
    global_quad_port_a ++;
    #line 1173 
    if (global_quad_port_a == 4) 
                                 #line 1174 
                                 global_quad_port_a = 0;
    #line 1175 
    break;
  }
  #line 1179 
  adapter->wol = adapter->eeprom_wol;
  #line 1180 
  device_set_wakeup_enable(& (adapter->pdev)->dev,(_Bool)(adapter->wol != 0U));
  #line 1183 
  if (hw->mac_type == (unsigned int)9) {
    #line 1184 
    i = 0;
    #line 1184 
    while (i <= 31) {
      #line 1185 
      hw->phy_addr = (unsigned int)i;
      #line 1186 
      e1000_read_phy_reg(hw,3U,& tmp);
      #line 1188 
      if ((unsigned int)tmp != 0U && (unsigned int)tmp != 255U) 
                                                                #line 1189 
                                                                break;
      #line 1184 
      i ++;
    }
    #line 1192 
    if (i > 31) 
                #line 1193 
                goto err_eeprom;
  }
  #line 1197 
  e1000_reset(adapter);
  #line 1199 
  strcpy((char *)(& netdev->name),(char *)"eth%d");
  #line 1200 
  err = cif_register_netdev(netdev);
  #line 1201 
  if (err != 0) 
                #line 1202 
                goto err_register;
  #line 1204 
  e1000_vlan_filter_on_off(adapter,(_Bool)0);
  #line 1207 
  if ((adapter->msg_enable & 2) != 0) {
    #line 1207 
    int tmp_13;
    #line 1207 
    int tmp_14;
    #line 1207 
    int tmp_15;
    #line 1207 
    int tmp_12;
    #line 1207 
    int tmp_16;
    #line 1207 
    char *tmp_17;
    #line 1207 
    ;
    #line 1207 
    if (hw->bus_width == (unsigned int)2) 
                                          #line 1207 
                                          tmp_12 = 64; else 
                                                            #line 1207 
                                                            tmp_12 = 32;
    #line 1207 
    if (hw->bus_speed != (unsigned int)5) {
      #line 1207 
      if (hw->bus_speed != (unsigned int)4) {
        #line 1207 
        if (hw->bus_speed != (unsigned int)3) {
          #line 1207 
          if (hw->bus_speed == (unsigned int)2) 
                                                #line 1207 
                                                tmp_13 = 66; else 
                                                                  #line 1207 
                                                                  tmp_13 = 33;
          #line 1207 
          tmp_14 = tmp_13;
        }
        else 
             #line 1207 
             tmp_14 = 100;
        #line 1207 
        tmp_15 = tmp_14;
      }
      else 
           #line 1207 
           tmp_15 = 120;
      #line 1207 
      tmp_16 = tmp_15;
    }
    else 
         #line 1207 
         tmp_16 = 133;
    #line 1207 
    if (hw->bus_type == (unsigned int)2) 
                                         #line 1207 
                                         tmp_17 = (char *)"-X"; else 
                                                                  #line 1207 
                                                                  tmp_17 = (char *)"";
    #line 1207 
    ;
    #line 1207 
    netdev_info(adapter->netdev,(char *)"(PCI%s:%dMHz:%d-bit) %pM\n",tmp_17,tmp_16,tmp_12,netdev->dev_addr);
  }
  #line 1217 
  netif_carrier_off(netdev);
  #line 1219 
  if ((adapter->msg_enable & 2) != 0) 
                                      #line 1219 
                                      netdev_info(adapter->netdev,(char *)"Intel(R) PRO/1000 Network Connection\n");
  #line 1221 
  cards_found ++;
  #line 1222 
  return 0;
  #line 1224 
  err_register: 
                #line 1224 
  ;
  #line 1225 
  err_eeprom: 
              #line 1225 
  ;
  #line 1226 
  e1000_phy_hw_reset(hw);
  #line 1228 
  if (hw->flash_address != (u8 *)0U) 
                                     #line 1229 
                                     iounmap((void *)hw->flash_address);
  #line 1230 
  kfree((void *)adapter->tx_ring);
  #line 1231 
  kfree((void *)adapter->rx_ring);
  #line 1232 
  err_dma: 
           #line 1232 
  ;
  #line 1233 
  err_sw_init: 
               #line 1233 
  ;
  #line 1234 
  err_mdio_ioremap: 
                    #line 1234 
  ;
  #line 1235 
  iounmap(hw->ce4100_gbe_mdio_base_virt);
  #line 1236 
  iounmap((void *)hw->hw_addr);
  #line 1237 
  err_ioremap: 
               #line 1237 
  ;
  #line 1238 
  if ((int)test_and_set_bit(3L,& adapter->flags) != 0) 
                                                       #line 1238 
                                                       tmp_19 = 0; else 
                                                                    #line 1238 
                                                                    tmp_19 = 1;
  #line 1238 
  disable_dev = (_Bool)(tmp_19 != 0);
  #line 1239 
  cif_free_netdev(netdev);
  #line 1240 
  err_alloc_etherdev: 
                      #line 1240 
  ;
  #line 1241 
  pci_release_selected_regions(pdev,bars);
  #line 1242 
  err_pci_reg: 
               #line 1242 
  ;
  #line 1243 
  if (adapter == (struct e1000_adapter *)0 || (int)disable_dev != 0) 
    #line 1244 
    pci_disable_device(pdev);
  #line 1245 
  return err;
}

#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_remove(struct pci_dev *pdev)
{
  #line 1262 
  bool disable_dev;
  #line 1281 
  int tmp_2;
  #line 1259 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 1260 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1261 
  struct e1000_hw *hw = & adapter->hw;
  #line 1264 
  e1000_down_and_stop(adapter);
  #line 1265 
  e1000_release_manageability(adapter);
  #line 1267 
  cif_unregister_netdev(netdev);
  #line 1269 
  e1000_phy_hw_reset(hw);
  #line 1271 
  kfree((void *)adapter->tx_ring);
  #line 1272 
  kfree((void *)adapter->rx_ring);
  #line 1274 
  if (hw->mac_type == (unsigned int)9) 
                                       #line 1275 
                                       iounmap(hw->ce4100_gbe_mdio_base_virt);
  #line 1276 
  iounmap((void *)hw->hw_addr);
  #line 1277 
  if (hw->flash_address != (u8 *)0U) 
                                     #line 1278 
                                     iounmap((void *)hw->flash_address);
  #line 1279 
  pci_release_selected_regions(pdev,adapter->bars);
  #line 1281 
  if ((int)test_and_set_bit(3L,& adapter->flags) != 0) 
                                                       #line 1281 
                                                       tmp_2 = 0; else 
                                                                    #line 1281 
                                                                    tmp_2 = 1;
  #line 1281 
  disable_dev = (_Bool)(tmp_2 != 0);
  #line 1282 
  cif_free_netdev(netdev);
  #line 1284 
  if ((int)disable_dev != 0) 
                             #line 1285 
                             pci_disable_device(pdev);
  #line 1286 
  return;
}

#line 1295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_sw_init(struct e1000_adapter *adapter)
{
  #line 1297 
  adapter->rx_buffer_len = 1522U;
  #line 1299 
  adapter->num_tx_queues = 1;
  #line 1300 
  adapter->num_rx_queues = 1;
  #line 1302 
  if (e1000_alloc_queues(adapter) != 0) {
    #line 1303 
    if ((adapter->msg_enable & 2) != 0) 
                                        #line 1303 
                                        netdev_err(adapter->netdev,(char *)"Unable to allocate memory for queues\n");
    #line 1304 
    return -12;
  }
  #line 1308 
  e1000_irq_disable(adapter);
  #line 1310 
  spinlock_check(& adapter->stats_lock);
  {
    #line 1310 
    struct lock_class_key __key;
    #line 1310 
    __raw_spin_lock_init(& adapter->stats_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->stats_lock)->rlock",& __key);
  }
  #line 1312 
  cif_set_bit_0(2L,& adapter->flags);
  #line 1314 
  return 0;
}

#line 1324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_alloc_queues(struct e1000_adapter *adapter)
{
  #line 1326 
  adapter->tx_ring = (struct e1000_tx_ring *)kcalloc_0((unsigned long)adapter->num_tx_queues,48UL,3264U);
  #line 1328 
  if (adapter->tx_ring == (struct e1000_tx_ring *)0) 
                                                     #line 1329 
                                                     return -12;
  #line 1331 
  adapter->rx_ring = (struct e1000_rx_ring *)kcalloc_0((unsigned long)adapter->num_rx_queues,56UL,3264U);
  #line 1333 
  if (adapter->rx_ring == (struct e1000_rx_ring *)0) {
    #line 1334 
    kfree((void *)adapter->tx_ring);
    #line 1335 
    return -12;
  }
  #line 1338 
  return 0;
}

#line 1353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
int e1000_open(struct net_device *netdev)
{
  #line 1357 
  int err;
  #line 1355 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1356 
  struct e1000_hw *hw = & adapter->hw;
  #line 1360 
  if ((int)test_bit(0L,& adapter->flags) != 0) 
                                               #line 1361 
                                               return -16;
  #line 1363 
  netif_carrier_off(netdev);
  #line 1366 
  err = e1000_setup_all_tx_resources(adapter);
  #line 1367 
  if (err != 0) 
                #line 1368 
                goto err_setup_tx;
  #line 1371 
  err = e1000_setup_all_rx_resources(adapter);
  #line 1372 
  if (err != 0) 
                #line 1373 
                goto err_setup_rx;
  #line 1375 
  e1000_power_up_phy(adapter);
  #line 1377 
  adapter->mng_vlan_id = (unsigned short)65535U;
  #line 1378 
  if (((int)hw->mng_cookie.status & 2) != 0) 
                                             #line 1380 
                                             e1000_update_mng_vlan(adapter);
  #line 1388 
  e1000_configure(adapter);
  #line 1390 
  err = e1000_request_irq(adapter);
  #line 1391 
  if (err != 0) 
                #line 1392 
                goto err_req_irq;
  #line 1395 
  cif_clear_bit_0(2L,& adapter->flags);
  #line 1397 
  napi_enable(& adapter->napi);
  #line 1399 
  e1000_irq_enable(adapter);
  #line 1401 
  netif_start_queue(netdev);
  #line 1404 
  writel(4U,(void *)(hw->hw_addr + 200U));
  #line 1406 
  return 0;
  #line 1408 
  err_req_irq: 
               #line 1408 
  ;
  #line 1409 
  e1000_power_down_phy(adapter);
  #line 1410 
  e1000_free_all_rx_resources(adapter);
  #line 1411 
  err_setup_rx: 
                #line 1411 
  ;
  #line 1412 
  e1000_free_all_tx_resources(adapter);
  #line 1413 
  err_setup_tx: 
                #line 1413 
  ;
  #line 1414 
  e1000_reset(adapter);
  #line 1416 
  return err;
}

#line 1430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
int e1000_close(struct net_device *netdev)
{
  #line 1432 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1433 
  struct e1000_hw *hw = & adapter->hw;
  #line 1434 
  int count = 50;
  #line 1436 
  while (1) {
    #line 1436 
    if ((int)test_bit(1L,& adapter->flags) != 0) {
      #line 1436 
      int tmp_1;
      #line 1436 
      tmp_1 = count;
      #line 1436 
      count --;
      #line 1436 
      ;
      #line 1436 
      if (! (tmp_1 != 0)) 
                          #line 1436 
                          break;
    }
    else 
         #line 1436 
         break;
    #line 1437 
    usleep_range(10000UL,20000UL);
  }
  {
    #line 1439 
    int __ret_warn_on = (int)test_bit(1L,& adapter->flags) != 0;
    #line 1439 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1440 
      ldv_inline_asm();
      #line 1441 
      ldv_inline_asm();
    }
    #line 1439 
    long tmp_3 = (long)(__ret_warn_on != 0);
  }
  #line 1440 
  e1000_down(adapter);
  #line 1441 
  e1000_power_down_phy(adapter);
  #line 1442 
  e1000_free_irq(adapter);
  #line 1444 
  e1000_free_all_tx_resources(adapter);
  #line 1445 
  e1000_free_all_rx_resources(adapter);
  #line 1450 
  if (((int)hw->mng_cookie.status & 2) != 0) {
    #line 1452 
    if (! test_bit((long)adapter->mng_vlan_id,
                   (unsigned long *)(& adapter->active_vlans))) 
      #line 1453 
      e1000_vlan_rx_kill_vid(netdev,(unsigned short)129,(unsigned short)((int)adapter->mng_vlan_id));
  }
  #line 1457 
  return 0;
}

#line 1466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static bool e1000_check_64k_bound(struct e1000_adapter *adapter, void *start, unsigned long len)
{
  #line 1469 
  struct e1000_hw *hw = & adapter->hw;
  #line 1470 
  unsigned long begin = (unsigned long)start;
  #line 1471 
  unsigned long end = begin + len;
  #line 1476 
  if ((hw->mac_type == (unsigned int)6 || hw->mac_type == (unsigned int)9) || hw->mac_type == (unsigned int)8) 
    #line 1479 
    return (_Bool)(((end + 18446744073709551615UL) ^ begin) >> 16 == 0UL);
  #line 1482 
  return (_Bool)1;
}

#line 1492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_setup_tx_resources(struct e1000_adapter *adapter, struct e1000_tx_ring *txdr)
{
  #line 1496 
  int size;
  #line 1495 
  struct pci_dev *pdev = adapter->pdev;
  #line 1498 
  size = (int)(txdr->count * 40U);
  #line 1499 
  txdr->buffer_info = (struct e1000_tx_buffer *)cif_vzalloc((unsigned long)size);
  #line 1500 
  if (txdr->buffer_info == (struct e1000_tx_buffer *)0) 
                                                        #line 1501 
                                                        return -12;
  #line 1505 
  txdr->size = txdr->count * 16U;
  #line 1506 
  txdr->size = (txdr->size + 4095U) & 4294963200U;
  #line 1508 
  txdr->desc = dma_alloc_coherent(& pdev->dev,(unsigned long)txdr->size,& txdr->dma,3264U);
  #line 1510 
  if (txdr->desc == (void *)0) {
    #line 1511 
    setup_tx_desc_die: 
                       #line 1511 
    ;
    #line 1512 
    cif_vfree((void *)txdr->buffer_info);
    #line 1513 
    return -12;
  }
  #line 1517 
  if (! e1000_check_64k_bound(adapter,txdr->desc,(unsigned long)txdr->size)) {
    #line 1518 
    void *olddesc = txdr->desc;
    #line 1519 
    dma_addr_t olddma = txdr->dma;
    #line 1520 
    if ((adapter->msg_enable & 128) != 0) 
                                          #line 1520 
                                          netdev_err(adapter->netdev,(char *)"txdr align check failed: %u bytes at %p\n",txdr->size,txdr->desc);
    #line 1523 
    txdr->desc = dma_alloc_coherent(& pdev->dev,(unsigned long)txdr->size,& txdr->dma,3264U);
    #line 1526 
    if (txdr->desc == (void *)0) {
      #line 1527 
      dma_free_coherent(& pdev->dev,(unsigned long)txdr->size,olddesc,olddma);
      #line 1529 
      goto setup_tx_desc_die;
    }
    #line 1532 
    if (e1000_check_64k_bound(adapter,txdr->desc,(unsigned long)txdr->size)) 
      #line 1544 
      dma_free_coherent(& pdev->dev,(unsigned long)txdr->size,olddesc,olddma);
    else {
      #line 1534 
      dma_free_coherent(& pdev->dev,(unsigned long)txdr->size,txdr->desc,txdr->dma);
      #line 1536 
      dma_free_coherent(& pdev->dev,(unsigned long)txdr->size,olddesc,olddma);
      #line 1538 
      if ((adapter->msg_enable & 2) != 0) 
                                          #line 1538 
                                          netdev_err(adapter->netdev,(char *)"Unable to allocate aligned memory ");
      #line 1540 
      cif_vfree((void *)txdr->buffer_info);
      #line 1541 
      return -12;
    }
  }
  #line 1548 
  memset(txdr->desc,0,(unsigned long)txdr->size);
  #line 1550 
  txdr->next_to_use = 0U;
  #line 1551 
  txdr->next_to_clean = 0U;
  #line 1553 
  return 0;
}

#line 1563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
int e1000_setup_all_tx_resources(struct e1000_adapter *adapter)
{
  #line 1565 
  int i;
  #line 1565 
  int err = 0;
  #line 1567 
  i = 0;
  #line 1567 
  while (adapter->num_tx_queues > i) {
    #line 1568 
    err = e1000_setup_tx_resources(adapter,adapter->tx_ring + (unsigned long)i);
    #line 1569 
    if (err != 0) {
      #line 1570 
      if ((adapter->msg_enable & 2) != 0) 
                                          #line 1570 
                                          netdev_err(adapter->netdev,(char *)"Allocation for Tx Queue %u failed\n",i);
      #line 1571 
      i --;
      #line 1571 
      while (i >= 0) {
        #line 1572 
        e1000_free_tx_resources(adapter,adapter->tx_ring + (unsigned long)i);
        #line 1571 
        i --;
      }
      #line 1574 
      break;
    }
    #line 1567 
    i ++;
  }
  #line 1578 
  return err;
}

#line 1587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_configure_tx(struct e1000_adapter *adapter)
{
  #line 1589 
  u64 tdba;
  #line 1591 
  u32 tdlen;
  #line 1591 
  u32 tctl;
  #line 1591 
  u32 tipg;
  #line 1592 
  u32 ipgr1;
  #line 1592 
  u32 ipgr2;
  #line 1639 
  unsigned int tmp_4;
  #line 1590 
  struct e1000_hw *hw = & adapter->hw;
  #line 1596 
  switch (adapter->num_tx_queues) {
    #line 1602 
    unsigned int tmp;
    #line 1603 
    unsigned int tmp_0;
    #line 1604 
    unsigned int tmp_1;
    #line 1605 
    unsigned int tmp_2;
    #line 1606 
    unsigned int tmp_3;
    #line 1597 
    case 1: 
            #line 1597 
    ;
    #line 1598 
    default: 
             #line 1598 
    ;
    #line 1599 
    tdba = (adapter->tx_ring)->dma;
    #line 1600 
    tdlen = (adapter->tx_ring)->count * 16U;
    #line 1602 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1602 
                                        tmp = 14344U; else 
                                                           #line 1602 
                                                           tmp = 1064U;
    #line 1602 
    ;
    #line 1602 
    ;
    #line 1602 
    writel(tdlen,(void *)(hw->hw_addr + tmp));
    #line 1603 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1603 
                                        tmp_0 = 14340U; else 
                                                             #line 1603 
                                                             tmp_0 = 1060U;
    #line 1603 
    ;
    #line 1603 
    ;
    #line 1603 
    writel((unsigned int)(tdba >> 32),(void *)(hw->hw_addr + tmp_0));
    #line 1604 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1604 
                                        tmp_1 = 14336U; else 
                                                             #line 1604 
                                                             tmp_1 = 1056U;
    #line 1604 
    ;
    #line 1604 
    ;
    #line 1604 
    writel((unsigned int)tdba,(void *)(hw->hw_addr + tmp_1));
    #line 1605 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1605 
                                        tmp_2 = 14360U; else 
                                                             #line 1605 
                                                             tmp_2 = 1080U;
    #line 1605 
    ;
    #line 1605 
    writel(0U,(void *)(hw->hw_addr + tmp_2));
    #line 1606 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1606 
                                        tmp_3 = 14352U; else 
                                                             #line 1606 
                                                             tmp_3 = 1072U;
    #line 1606 
    ;
    #line 1606 
    writel(0U,(void *)(hw->hw_addr + tmp_3));
    #line 1607 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1607 
                                        (adapter->tx_ring)->tdh = (unsigned short)14352U; else 
                                                                    #line 1607 
                                                                    (adapter->tx_ring)->tdh = (unsigned short)1072U;
    #line 1609 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1609 
                                        (adapter->tx_ring)->tdt = (unsigned short)14360U; else 
                                                                    #line 1609 
                                                                    (adapter->tx_ring)->tdt = (unsigned short)1080U;
    #line 1611 
    break;
  }
  #line 1615 
  if ((unsigned int)hw->media_type + 4294967295U <= 1U) 
                                                        #line 1617 
                                                        tipg = 9U; else 
                                                                    #line 1619 
                                                                    tipg = 8U;
  #line 1621 
  switch ((unsigned int)hw->mac_type) {
    #line 1622 
    case (unsigned int)1: 
                          #line 1622 
    ;
    #line 1623 
    case (unsigned int)2: 
                          #line 1623 
    ;
    #line 1624 
    tipg = 10U;
    #line 1625 
    ipgr1 = 2U;
    #line 1626 
    ipgr2 = 10U;
    #line 1627 
    break;
    #line 1628 
    default: 
             #line 1628 
    ;
    #line 1629 
    ipgr1 = 8U;
    #line 1630 
    ipgr2 = 6U;
    #line 1631 
    break;
  }
  #line 1633 
  tipg = (ipgr1 << 10) | tipg;
  #line 1634 
  tipg = (ipgr2 << 20) | tipg;
  #line 1635 
  writel(tipg,(void *)(hw->hw_addr + 1040U));
  #line 1639 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1639 
                                      tmp_4 = 14368U; else 
                                                           #line 1639 
                                                           tmp_4 = 1088U;
  #line 1639 
  ;
  #line 1639 
  ;
  #line 1639 
  writel(adapter->tx_int_delay,(void *)(hw->hw_addr + tmp_4));
  #line 1640 
  if (hw->mac_type > (unsigned int)4) 
                                      #line 1641 
                                      writel(adapter->tx_abs_int_delay,(void *)(hw->hw_addr + 14380U));
  #line 1645 
  tctl = readl((void *)(hw->hw_addr + 1024U));
  #line 1646 
  tctl &= 4294963215U;
  #line 1647 
  tctl |= 16777464U;
  #line 1650 
  e1000_config_collision_dist(hw);
  #line 1653 
  adapter->txd_cmd = 50331648U;
  #line 1656 
  if (adapter->tx_int_delay != 0U) 
                                   #line 1657 
                                   adapter->txd_cmd |= 2147483648U;
  #line 1659 
  if (hw->mac_type <= (unsigned int)2) 
                                       #line 1660 
                                       adapter->txd_cmd |= 268435456U; else 
                                                                    #line 1662 
                                                                    adapter->txd_cmd |= 134217728U;
  #line 1667 
  if (hw->mac_type == (unsigned int)4 && hw->bus_type == (unsigned int)2) 
    #line 1669 
    adapter->pcix_82544 = (_Bool)1;
  #line 1671 
  writel(tctl,(void *)(hw->hw_addr + 1024U));
  #line 1672 
  return;
}

#line 1682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_setup_rx_resources(struct e1000_adapter *adapter, struct e1000_rx_ring *rxdr)
{
  #line 1686 
  int size;
  #line 1686 
  int desc_len;
  #line 1685 
  struct pci_dev *pdev = adapter->pdev;
  #line 1688 
  size = (int)(rxdr->count * 16U);
  #line 1689 
  rxdr->buffer_info = (struct e1000_rx_buffer *)cif_vzalloc((unsigned long)size);
  #line 1690 
  if (rxdr->buffer_info == (struct e1000_rx_buffer *)0) 
                                                        #line 1691 
                                                        return -12;
  #line 1693 
  desc_len = 16;
  #line 1697 
  rxdr->size = rxdr->count * (unsigned int)desc_len;
  #line 1698 
  rxdr->size = (rxdr->size + 4095U) & 4294963200U;
  #line 1700 
  rxdr->desc = dma_alloc_coherent(& pdev->dev,(unsigned long)rxdr->size,& rxdr->dma,3264U);
  #line 1702 
  if (rxdr->desc == (void *)0) {
    #line 1703 
    setup_rx_desc_die: 
                       #line 1703 
    ;
    #line 1704 
    cif_vfree((void *)rxdr->buffer_info);
    #line 1705 
    return -12;
  }
  #line 1709 
  if (! e1000_check_64k_bound(adapter,rxdr->desc,(unsigned long)rxdr->size)) {
    #line 1710 
    void *olddesc = rxdr->desc;
    #line 1711 
    dma_addr_t olddma = rxdr->dma;
    #line 1712 
    if ((adapter->msg_enable & 64) != 0) 
                                         #line 1712 
                                         netdev_err(adapter->netdev,(char *)"rxdr align check failed: %u bytes at %p\n",rxdr->size,rxdr->desc);
    #line 1715 
    rxdr->desc = dma_alloc_coherent(& pdev->dev,(unsigned long)rxdr->size,& rxdr->dma,3264U);
    #line 1718 
    if (rxdr->desc == (void *)0) {
      #line 1719 
      dma_free_coherent(& pdev->dev,(unsigned long)rxdr->size,olddesc,olddma);
      #line 1721 
      goto setup_rx_desc_die;
    }
    #line 1724 
    if (e1000_check_64k_bound(adapter,rxdr->desc,(unsigned long)rxdr->size)) 
      #line 1735 
      dma_free_coherent(& pdev->dev,(unsigned long)rxdr->size,olddesc,olddma);
    else {
      #line 1726 
      dma_free_coherent(& pdev->dev,(unsigned long)rxdr->size,rxdr->desc,rxdr->dma);
      #line 1728 
      dma_free_coherent(& pdev->dev,(unsigned long)rxdr->size,olddesc,olddma);
      #line 1730 
      if ((adapter->msg_enable & 2) != 0) 
                                          #line 1730 
                                          netdev_err(adapter->netdev,(char *)"Unable to allocate aligned memory for ");
      #line 1732 
      goto setup_rx_desc_die;
    }
  }
  #line 1739 
  memset(rxdr->desc,0,(unsigned long)rxdr->size);
  #line 1741 
  rxdr->next_to_clean = 0U;
  #line 1742 
  rxdr->next_to_use = 0U;
  #line 1743 
  rxdr->rx_skb_top = (struct sk_buff *)0;
  #line 1745 
  return 0;
}

#line 1755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
int e1000_setup_all_rx_resources(struct e1000_adapter *adapter)
{
  #line 1757 
  int i;
  #line 1757 
  int err = 0;
  #line 1759 
  i = 0;
  #line 1759 
  while (adapter->num_rx_queues > i) {
    #line 1760 
    err = e1000_setup_rx_resources(adapter,adapter->rx_ring + (unsigned long)i);
    #line 1761 
    if (err != 0) {
      #line 1762 
      if ((adapter->msg_enable & 2) != 0) 
                                          #line 1762 
                                          netdev_err(adapter->netdev,(char *)"Allocation for Rx Queue %u failed\n",i);
      #line 1763 
      i --;
      #line 1763 
      while (i >= 0) {
        #line 1764 
        e1000_free_rx_resources(adapter,adapter->rx_ring + (unsigned long)i);
        #line 1763 
        i --;
      }
      #line 1766 
      break;
    }
    #line 1759 
    i ++;
  }
  #line 1770 
  return err;
}

#line 1777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_setup_rctl(struct e1000_adapter *adapter)
{
  #line 1780 
  u32 rctl;
  #line 1779 
  struct e1000_hw *hw = & adapter->hw;
  #line 1782 
  rctl = readl((void *)(hw->hw_addr + 256U));
  #line 1784 
  rctl &= 4294955007U;
  #line 1786 
  rctl = ((hw->mc_filter_type << 12) | rctl) | 32768U;
  #line 1790 
  if ((int)hw->tbi_compatibility_on == 1) 
                                          #line 1791 
                                          rctl |= 4U; else 
                                                           #line 1793 
                                                           rctl &= 4294967291U;
  #line 1795 
  if ((adapter->netdev)->mtu <= 1500U) 
                                       #line 1796 
                                       rctl &= 4294967263U; else 
                                                                 #line 1798 
                                                                 rctl |= 32U;
  #line 1801 
  rctl &= 4294770687U;
  #line 1802 
  rctl |= 33554432U;
  #line 1803 
  switch (adapter->rx_buffer_len) {
    #line 1804 
    case (u32)2048: 
                    #line 1804 
    ;
    #line 1805 
    default: 
             #line 1805 
    ;
    #line 1806 
    rctl = rctl;
    #line 1807 
    rctl &= 4261412863U;
    #line 1808 
    break;
    #line 1809 
    case (u32)4096: 
                    #line 1809 
    ;
    #line 1810 
    rctl |= 196608U;
    #line 1811 
    break;
    #line 1812 
    case (u32)8192: 
                    #line 1812 
    ;
    #line 1813 
    rctl |= 131072U;
    #line 1814 
    break;
    #line 1815 
    case (u32)16384: 
                     #line 1815 
    ;
    #line 1816 
    rctl |= 65536U;
    #line 1817 
    break;
  }
  #line 1821 
  if (((adapter->netdev)->features & 8796093022208ULL) != 0ULL) {
    #line 1825 
    rctl |= 8421380U;
    #line 1829 
    rctl &= 4289986559U;
  }
  #line 1837 
  writel(rctl,(void *)(hw->hw_addr + 256U));
  #line 1838 
  return;
}

#line 1846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_configure_rx(struct e1000_adapter *adapter)
{
  #line 1848 
  u64 rdba;
  #line 1850 
  u32 rdlen;
  #line 1850 
  u32 rctl;
  #line 1850 
  u32 rxcsum;
  #line 1869 
  unsigned int tmp;
  #line 1849 
  struct e1000_hw *hw = & adapter->hw;
  #line 1852 
  if ((adapter->netdev)->mtu > 1500U) {
    #line 1853 
    rdlen = (adapter->rx_ring)->count * 16U;
    #line 1855 
    adapter->clean_rx = & e1000_clean_jumbo_rx_irq;
    #line 1856 
    adapter->alloc_rx_buf = & e1000_alloc_jumbo_rx_buffers;
  }
  else {
    #line 1858 
    rdlen = (adapter->rx_ring)->count * 16U;
    #line 1860 
    adapter->clean_rx = & e1000_clean_rx_irq;
    #line 1861 
    adapter->alloc_rx_buf = & e1000_alloc_rx_buffers;
  }
  #line 1865 
  rctl = readl((void *)(hw->hw_addr + 256U));
  #line 1866 
  writel(rctl & 4294967293U,(void *)(hw->hw_addr + 256U));
  #line 1869 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 1869 
                                      tmp = 10272U; else 
                                                         #line 1869 
                                                         tmp = 264U;
  #line 1869 
  ;
  #line 1869 
  ;
  #line 1869 
  writel(adapter->rx_int_delay,(void *)(hw->hw_addr + tmp));
  #line 1871 
  if (hw->mac_type > (unsigned int)4) {
    #line 1872 
    writel(adapter->rx_abs_int_delay,(void *)(hw->hw_addr + 10284U));
    #line 1873 
    if (adapter->itr_setting != 0U) 
                                    #line 1874 
                                    writel(1000000000U / (adapter->itr * 256U),(void *)(hw->hw_addr + 196U));
  }
  #line 1880 
  switch (adapter->num_rx_queues) {
    #line 1884 
    unsigned int tmp_0;
    #line 1885 
    unsigned int tmp_1;
    #line 1886 
    unsigned int tmp_2;
    #line 1887 
    unsigned int tmp_3;
    #line 1888 
    unsigned int tmp_4;
    #line 1881 
    case 1: 
            #line 1881 
    ;
    #line 1882 
    default: 
             #line 1882 
    ;
    #line 1883 
    rdba = (adapter->rx_ring)->dma;
    #line 1884 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1884 
                                        tmp_0 = 10248U; else 
                                                             #line 1884 
                                                             tmp_0 = 280U;
    #line 1884 
    ;
    #line 1884 
    ;
    #line 1884 
    writel(rdlen,(void *)(hw->hw_addr + tmp_0));
    #line 1885 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1885 
                                        tmp_1 = 10244U; else 
                                                             #line 1885 
                                                             tmp_1 = 276U;
    #line 1885 
    ;
    #line 1885 
    ;
    #line 1885 
    writel((unsigned int)(rdba >> 32),(void *)(hw->hw_addr + tmp_1));
    #line 1886 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1886 
                                        tmp_2 = 10240U; else 
                                                             #line 1886 
                                                             tmp_2 = 272U;
    #line 1886 
    ;
    #line 1886 
    ;
    #line 1886 
    writel((unsigned int)rdba,(void *)(hw->hw_addr + tmp_2));
    #line 1887 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1887 
                                        tmp_3 = 10264U; else 
                                                             #line 1887 
                                                             tmp_3 = 296U;
    #line 1887 
    ;
    #line 1887 
    writel(0U,(void *)(hw->hw_addr + tmp_3));
    #line 1888 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1888 
                                        tmp_4 = 10256U; else 
                                                             #line 1888 
                                                             tmp_4 = 288U;
    #line 1888 
    ;
    #line 1888 
    writel(0U,(void *)(hw->hw_addr + tmp_4));
    #line 1889 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1889 
                                        (adapter->rx_ring)->rdh = (unsigned short)10256U; else 
                                                                    #line 1889 
                                                                    (adapter->rx_ring)->rdh = (unsigned short)288U;
    #line 1891 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 1891 
                                        (adapter->rx_ring)->rdt = (unsigned short)10264U; else 
                                                                    #line 1891 
                                                                    (adapter->rx_ring)->rdt = (unsigned short)296U;
    #line 1893 
    break;
  }
  #line 1897 
  if (hw->mac_type > (unsigned int)2) {
    #line 1898 
    rxcsum = readl((void *)(hw->hw_addr + 20480U));
    #line 1899 
    if ((int)adapter->rx_csum != 0) 
                                    #line 1900 
                                    rxcsum |= 512U; else 
                                                         #line 1903 
                                                         rxcsum &= 4294966783U;
    #line 1904 
    writel(rxcsum,(void *)(hw->hw_addr + 20480U));
  }
  #line 1908 
  writel(rctl | 2U,(void *)(hw->hw_addr + 256U));
  #line 1909 
  return;
}

#line 1918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_free_tx_resources(struct e1000_adapter *adapter, struct e1000_tx_ring *tx_ring)
{
  #line 1921 
  struct pci_dev *pdev = adapter->pdev;
  #line 1923 
  e1000_clean_tx_ring(adapter,tx_ring);
  #line 1925 
  cif_vfree((void *)tx_ring->buffer_info);
  #line 1926 
  tx_ring->buffer_info = (struct e1000_tx_buffer *)0;
  #line 1928 
  dma_free_coherent(& pdev->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma);
  #line 1931 
  tx_ring->desc = (void *)0;
  #line 1932 
  return;
}

#line 1940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_free_all_tx_resources(struct e1000_adapter *adapter)
{
  #line 1942 
  int i;
  #line 1944 
  i = 0;
  #line 1944 
  while (adapter->num_tx_queues > i) {
    #line 1945 
    e1000_free_tx_resources(adapter,adapter->tx_ring + (unsigned long)i);
    #line 1944 
    i ++;
  }
  #line 1946 
  return;
}

#line 1949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_unmap_and_free_tx_resource(struct e1000_adapter *adapter, struct e1000_tx_buffer *buffer_info)
{
  #line 1952 
  if (buffer_info->dma != 0ULL) {
    #line 1953 
    if ((int)buffer_info->mapped_as_page != 0) 
                                               #line 1954 
                                               dma_unmap_page_attrs(& (adapter->pdev)->dev,buffer_info->dma,(unsigned long)buffer_info->length,(enum dma_data_direction)DMA_TO_DEVICE,0UL); else 
                                                                    #line 1957 
                                                                    dma_unmap_single_attrs(& (adapter->pdev)->dev,buffer_info->dma,(unsigned long)buffer_info->length,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 1960 
    buffer_info->dma = 0ULL;
  }
  #line 1962 
  if (buffer_info->skb != (struct sk_buff *)0) {
    #line 1963 
    dev_kfree_skb_any(buffer_info->skb);
    #line 1964 
    buffer_info->skb = (struct sk_buff *)0;
  }
  #line 1966 
  buffer_info->time_stamp = 0UL;
  #line 1967 
  return;
}

#line 1975  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_clean_tx_ring(struct e1000_adapter *adapter, struct e1000_tx_ring *tx_ring)
{
  #line 1979 
  struct e1000_tx_buffer *buffer_info;
  #line 1980 
  unsigned long size;
  #line 1981 
  unsigned int i;
  #line 1978 
  struct e1000_hw *hw = & adapter->hw;
  #line 1985 
  i = 0U;
  #line 1985 
  while (tx_ring->count > i) {
    #line 1986 
    buffer_info = tx_ring->buffer_info + (unsigned long)i;
    #line 1987 
    e1000_unmap_and_free_tx_resource(adapter,buffer_info);
    #line 1985 
    i ++;
  }
  #line 1990 
  netdev_reset_queue(adapter->netdev);
  #line 1991 
  size = (unsigned long)tx_ring->count * 40UL;
  #line 1992 
  memset((void *)tx_ring->buffer_info,0,size);
  #line 1996 
  memset(tx_ring->desc,0,(unsigned long)tx_ring->size);
  #line 1998 
  tx_ring->next_to_use = 0U;
  #line 1999 
  tx_ring->next_to_clean = 0U;
  #line 2000 
  tx_ring->last_tx_tso = (_Bool)0;
  #line 2002 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)tx_ring->tdh));
  #line 2003 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)tx_ring->tdt));
  #line 2004 
  return;
}

#line 2010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_clean_all_tx_rings(struct e1000_adapter *adapter)
{
  #line 2012 
  int i;
  #line 2014 
  i = 0;
  #line 2014 
  while (adapter->num_tx_queues > i) {
    #line 2015 
    e1000_clean_tx_ring(adapter,adapter->tx_ring + (unsigned long)i);
    #line 2014 
    i ++;
  }
  #line 2016 
  return;
}

#line 2025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_free_rx_resources(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring)
{
  #line 2028 
  struct pci_dev *pdev = adapter->pdev;
  #line 2030 
  e1000_clean_rx_ring(adapter,rx_ring);
  #line 2032 
  cif_vfree((void *)rx_ring->buffer_info);
  #line 2033 
  rx_ring->buffer_info = (struct e1000_rx_buffer *)0;
  #line 2035 
  dma_free_coherent(& pdev->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma);
  #line 2038 
  rx_ring->desc = (void *)0;
  #line 2039 
  return;
}

#line 2047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_free_all_rx_resources(struct e1000_adapter *adapter)
{
  #line 2049 
  int i;
  #line 2051 
  i = 0;
  #line 2051 
  while (adapter->num_rx_queues > i) {
    #line 2052 
    e1000_free_rx_resources(adapter,adapter->rx_ring + (unsigned long)i);
    #line 2051 
    i ++;
  }
  #line 2053 
  return;
}

#line 2056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static unsigned int e1000_frag_len(struct e1000_adapter *a)
{
  #line 2058 
  return ((a->rx_buffer_len + 127U) & 4294967232U) + 320U;
}

#line 2062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void *e1000_alloc_frag(struct e1000_adapter *a)
{
  #line 2064 
  unsigned int len = e1000_frag_len(a);
  #line 2065 
  u8 *data = netdev_alloc_frag(len);
  #line 2067 
  if ((long)(data != (u8 *)0U) != 0L) 
                                      #line 2068 
                                      data += 64U;
  #line 2069 
  return (void *)data;
}

#line 2077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_clean_rx_ring(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring)
{
  #line 2081 
  struct e1000_rx_buffer *buffer_info;
  #line 2083 
  unsigned long size;
  #line 2084 
  unsigned int i;
  #line 2080 
  struct e1000_hw *hw = & adapter->hw;
  #line 2082 
  struct pci_dev *pdev = adapter->pdev;
  #line 2087 
  i = 0U;
  #line 2087 
  while (rx_ring->count > i) {
    #line 2088 
    buffer_info = rx_ring->buffer_info + (unsigned long)i;
    #line 2089 
    if (adapter->clean_rx == & e1000_clean_rx_irq) {
      #line 2090 
      if (buffer_info->dma != 0ULL) 
                                    #line 2091 
                                    dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 2094 
      if (buffer_info->rxbuf.data != (u8 *)0U) {
        #line 2095 
        skb_free_frag((void *)buffer_info->rxbuf.data);
        #line 2096 
        buffer_info->rxbuf.data = (u8 *)0U;
      }
    }
    else 
      #line 2098 
      if (adapter->clean_rx == & e1000_clean_jumbo_rx_irq) {
        #line 2099 
        if (buffer_info->dma != 0ULL) 
                                      #line 2100 
                                      dma_unmap_page_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
        #line 2103 
        if (buffer_info->rxbuf.page != (struct page *)0) {
          #line 2104 
          put_page(buffer_info->rxbuf.page);
          #line 2105 
          buffer_info->rxbuf.page = (struct page *)0;
        }
      }
    #line 2109 
    buffer_info->dma = 0ULL;
    #line 2087 
    i ++;
  }
  #line 2113 
  napi_free_frags(& adapter->napi);
  #line 2114 
  rx_ring->rx_skb_top = (struct sk_buff *)0;
  #line 2116 
  size = (unsigned long)rx_ring->count * 16UL;
  #line 2117 
  memset((void *)rx_ring->buffer_info,0,size);
  #line 2120 
  memset(rx_ring->desc,0,(unsigned long)rx_ring->size);
  #line 2122 
  rx_ring->next_to_clean = 0U;
  #line 2123 
  rx_ring->next_to_use = 0U;
  #line 2125 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)rx_ring->rdh));
  #line 2126 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)rx_ring->rdt));
  #line 2127 
  return;
}

#line 2133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_clean_all_rx_rings(struct e1000_adapter *adapter)
{
  #line 2135 
  int i;
  #line 2137 
  i = 0;
  #line 2137 
  while (adapter->num_rx_queues > i) {
    #line 2138 
    e1000_clean_rx_ring(adapter,adapter->rx_ring + (unsigned long)i);
    #line 2137 
    i ++;
  }
  #line 2139 
  return;
}

#line 2144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_enter_82542_rst(struct e1000_adapter *adapter)
{
  #line 2148 
  u32 rctl;
  #line 2146 
  struct e1000_hw *hw = & adapter->hw;
  #line 2147 
  struct net_device *netdev = adapter->netdev;
  #line 2150 
  e1000_pci_clear_mwi(hw);
  #line 2152 
  rctl = readl((void *)(hw->hw_addr + 256U));
  #line 2153 
  rctl |= 1U;
  #line 2154 
  writel(rctl,(void *)(hw->hw_addr + 256U));
  #line 2155 
  readl((void *)(hw->hw_addr + 8U));
  #line 2156 
  __const_udelay(21475000UL);
  #line 2158 
  if ((int)netif_running(netdev) != 0) 
                                       #line 2159 
                                       e1000_clean_all_rx_rings(adapter);
  #line 2160 
  return;
}

#line 2162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_leave_82542_rst(struct e1000_adapter *adapter)
{
  #line 2166 
  u32 rctl;
  #line 2164 
  struct e1000_hw *hw = & adapter->hw;
  #line 2165 
  struct net_device *netdev = adapter->netdev;
  #line 2168 
  rctl = readl((void *)(hw->hw_addr + 256U));
  #line 2169 
  rctl &= 4294967294U;
  #line 2170 
  writel(rctl,(void *)(hw->hw_addr + 256U));
  #line 2171 
  readl((void *)(hw->hw_addr + 8U));
  #line 2172 
  __const_udelay(21475000UL);
  #line 2174 
  if (((int)hw->pci_cmd_word & 16) != 0) 
                                         #line 2175 
                                         e1000_pci_set_mwi(hw);
  #line 2177 
  if ((int)netif_running(netdev) != 0) {
    #line 2181 
    unsigned int use;
    #line 2181 
    unsigned int tmp_2;
    #line 2181 
    unsigned int clean;
    #line 2179 
    struct e1000_rx_ring *ring = adapter->rx_ring;
    #line 2180 
    e1000_configure_rx(adapter);
    {
      #line 2182 
      union __anonunion___u_2021 __u_0;
      #line 2181 
      unsigned int ___p1;
      {
        #line 2182 
        union __anonunion___u_2019 __u;
        #line 2181 
        __read_once_size((void *)(& ring->next_to_clean),(void *)(& __u.__c),4);
        #line 2181 
        ___p1 = (__u.__val);
        #line 2184 
        ldv_inline_asm();
        }
      #line 2181 
      clean = ___p1;
      #line 2181 
      __read_once_size((void *)(& ring->next_to_use),(void *)(& __u_0.__c),4);
      #line 2181 
      use = (__u_0.__val);
      #line 2181 
      if (clean <= use) 
                        #line 2181 
                        tmp_2 = ring->count; else 
                                                  #line 2181 
                                                  tmp_2 = 0U;
      #line 2181 
      ;
      }
    #line 2181 
    ;
    #line 2181 
    ;
    #line 2181 
    (*(adapter->alloc_rx_buf))(adapter,ring,(int)(((tmp_2 + clean) - use) + 4294967295U));
  }
  #line 2184 
  return;
}

#line 2192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_set_mac(struct net_device *netdev, void *p)
{
  #line 2194 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 2195 
  struct e1000_hw *hw = & adapter->hw;
  #line 2196 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 2198 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 2199 
                                                      return -99;
  #line 2203 
  if (hw->mac_type == (unsigned int)1) 
                                       #line 2204 
                                       e1000_enter_82542_rst(adapter);
  #line 2206 
  memcpy((void *)netdev->dev_addr,(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 2207 
  memcpy((void *)(& hw->mac_addr),(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 2209 
  e1000_rar_set(hw,(u8 *)(& hw->mac_addr),0U);
  #line 2211 
  if (hw->mac_type == (unsigned int)1) 
                                       #line 2212 
                                       e1000_leave_82542_rst(adapter);
  #line 2214 
  return 0;
}

#line 2226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_set_rx_mode(struct net_device *netdev)
{
  #line 2287 
  void *__mptr_1;
  #line 2230 
  struct netdev_hw_addr *ha;
  #line 2232 
  u32 rctl;
  #line 2233 
  u32 hash_value;
  #line 2234 
  int i;
  #line 2228 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 2229 
  struct e1000_hw *hw = & adapter->hw;
  #line 2231 
  bool use_uc = (_Bool)0;
  #line 2234 
  int rar_entries = 15;
  #line 2235 
  int mta_reg_count = 128;
  #line 2236 
  u32 *mcarray = kcalloc_0((unsigned long)mta_reg_count,4UL,2592U);
  #line 2238 
  if (mcarray == (u32 *)0U) 
                            #line 2239 
                            return;
  #line 2243 
  rctl = readl((void *)(hw->hw_addr + 256U));
  #line 2245 
  if ((netdev->flags & 256U) != 0U) {
    #line 2246 
    rctl |= 24U;
    #line 2247 
    rctl &= 4294705151U;
  }
  else {
    #line 2249 
    if ((netdev->flags & 512U) != 0U) 
                                      #line 2250 
                                      rctl |= 16U; else 
                                                        #line 2252 
                                                        rctl &= 4294967279U;
    #line 2254 
    if ((int)e1000_vlan_used(adapter) != 0) 
                                            #line 2255 
                                            rctl |= 262144U;
  }
  #line 2258 
  if (netdev->uc.count >= rar_entries) 
                                       #line 2259 
                                       rctl |= 8U;
  else 
    #line 2260 
    if ((netdev->flags & 256U) == 0U) {
      #line 2261 
      rctl &= 4294967287U;
      #line 2262 
      use_uc = (_Bool)1;
    }
  #line 2265 
  writel(rctl,(void *)(hw->hw_addr + 256U));
  #line 2269 
  if (hw->mac_type == (unsigned int)1) 
                                       #line 2270 
                                       e1000_enter_82542_rst(adapter);
  #line 2279 
  i = 1;
  #line 2280 
  if ((int)use_uc != 0) {
    #line 2281 
    void *__mptr;
    #line 2281 
    __mptr = (void *)netdev->uc.list.next;
    #line 2281 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 2281 
    while (& ha->list != & netdev->uc.list) {
      #line 2281 
      void *__mptr_0;
      {
        #line 2284 
        int tmp_4;
        #line 2282 
        if (i == rar_entries) 
                              #line 2283 
                              break;
        #line 2284 
        tmp_4 = i;
        #line 2284 
        i ++;
        #line 2284 
        ;
        #line 2284 
        ;
        #line 2284 
        ;
        #line 2284 
        e1000_rar_set(hw,(u8 *)(& ha->addr),(unsigned int)tmp_4);
      }
      #line 2281 
      __mptr_0 = (void *)ha->list.next;
      #line 2281 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
  }
  #line 2287 
  __mptr_1 = (void *)netdev->mc.list.next;
  #line 2287 
  ha = ((struct netdev_hw_addr *)__mptr_1);
  #line 2287 
  while (& ha->list != & netdev->mc.list) {
    #line 2287 
    void *__mptr_2;
    #line 2288 
    if (i == rar_entries) {
      #line 2290 
      u32 hash_reg;
      #line 2290 
      u32 hash_bit;
      #line 2290 
      u32 mta;
      #line 2291 
      hash_value = e1000_hash_mc_addr(hw,(u8 *)(& ha->addr));
      #line 2292 
      hash_reg = (hash_value >> 5) & 127U;
      #line 2293 
      hash_bit = hash_value & 31U;
      #line 2294 
      mta = (unsigned int)(1 << hash_bit);
      #line 2295 
      *(mcarray + (unsigned long)hash_reg) |= mta;
    }
    else {
      #line 2297 
      int tmp_7;
      #line 2297 
      tmp_7 = i;
      #line 2297 
      i ++;
      #line 2297 
      ;
      #line 2297 
      ;
      #line 2297 
      ;
      #line 2297 
      e1000_rar_set(hw,(u8 *)(& ha->addr),(unsigned int)tmp_7);
    }
    #line 2287 
    __mptr_2 = (void *)ha->list.next;
    #line 2287 
    ha = ((struct netdev_hw_addr *)__mptr_2);
  }
  #line 2301 
  while (i < rar_entries) {
    {
      #line 2302 
      unsigned int tmp_8;
      #line 2304 
      unsigned int tmp_9;
      #line 2302 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 2302 
                                          tmp_8 = 21504U; else 
                                                               #line 2302 
                                                               tmp_8 = 64U;
      #line 2302 
      ;
      #line 2302 
      writel(0U,(void *)(hw->hw_addr + ((unsigned long)tmp_8 + (unsigned long)(i << 3))));
      #line 2303 
      readl((void *)(hw->hw_addr + 8U));
      #line 2304 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 2304 
                                          tmp_9 = 21504U; else 
                                                               #line 2304 
                                                               tmp_9 = 64U;
      #line 2304 
      ;
      #line 2304 
      writel(0U,(void *)(hw->hw_addr + ((unsigned long)tmp_9 + (unsigned long)(((i << 1) + 1) << 2))));
      #line 2305 
      readl((void *)(hw->hw_addr + 8U));
    }
    #line 2301 
    i ++;
  }
  #line 2311 
  i = mta_reg_count + -1;
  #line 2311 
  while (i >= 0) {
    #line 2317 
    unsigned int tmp_10;
    #line 2317 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 2317 
                                        tmp_10 = 20992U; else 
                                                              #line 2317 
                                                              tmp_10 = 512U;
    #line 2317 
    ;
    #line 2317 
    ;
    #line 2317 
    writel(*(mcarray + (unsigned long)i),(void *)(hw->hw_addr + ((unsigned long)tmp_10 + (unsigned long)(i << 2))));
    #line 2311 
    i --;
  }
  #line 2319 
  readl((void *)(hw->hw_addr + 8U));
  #line 2321 
  if (hw->mac_type == (unsigned int)1) 
                                       #line 2322 
                                       e1000_leave_82542_rst(adapter);
  #line 2324 
  kfree((void *)mcarray);
  #line 2325 
  return;
}

#line 2334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_update_phy_info_task(struct work_struct *work)
{
  #line 2336 
  void *__mptr;
  #line 2336 
  __mptr = (void *)work;
  #line 2336 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709548920U));
  #line 2340 
  e1000_phy_get_info(& adapter->hw,& adapter->phy_info);
  #line 2341 
  return;
}

#line 2347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_82547_tx_fifo_stall_task(struct work_struct *work)
{
  #line 2349 
  void *__mptr;
  #line 2354 
  u32 tctl;
  #line 2349 
  __mptr = (void *)work;
  #line 2349 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709549104U));
  #line 2352 
  struct e1000_hw *hw = & adapter->hw;
  #line 2353 
  struct net_device *netdev = adapter->netdev;
  #line 2356 
  if (atomic_read(& adapter->tx_fifo_stall) != 0) {
    #line 2357 
    unsigned int tmp_4;
    #line 2357 
    unsigned int tmp_3;
    #line 2357 
    unsigned int tmp_5;
    #line 2357 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 2357 
                                        tmp_3 = 14360U; else 
                                                             #line 2357 
                                                             tmp_3 = 1080U;
    #line 2357 
    ;
    #line 2357 
    tmp_4 = readl((void *)(hw->hw_addr + tmp_3));
    #line 2357 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 2357 
                                        tmp_5 = 14352U; else 
                                                             #line 2357 
                                                             tmp_5 = 1072U;
    #line 2357 
    ;
    #line 2357 
    if (tmp_4 == readl((void *)(hw->hw_addr + tmp_5))) {
      #line 2357 
      unsigned int tmp_8;
      #line 2358 
      unsigned int tmp_7;
      #line 2358 
      unsigned int tmp_9;
      #line 2358 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 2358 
                                          tmp_7 = 13336U; else 
                                                               #line 2358 
                                                               tmp_7 = 32792U;
      #line 2357 
      ;
      #line 2357 
      tmp_8 = readl((void *)(hw->hw_addr + tmp_7));
      #line 2358 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 2358 
                                          tmp_9 = 13328U; else 
                                                               #line 2358 
                                                               tmp_9 = 32784U;
      #line 2358 
      ;
      #line 2357 
      if (tmp_8 == readl((void *)(hw->hw_addr + tmp_9))) {
        #line 2358 
        if (readl((void *)(hw->hw_addr + 13352U)) == readl((void *)(hw->hw_addr + 13344U))) {
          #line 2362 
          unsigned int tmp_0;
          #line 2363 
          unsigned int tmp_1;
          #line 2360 
          tctl = readl((void *)(hw->hw_addr + 1024U));
          #line 2361 
          writel(tctl & 4294967293U,(void *)(hw->hw_addr + 1024U));
          #line 2362 
          if (hw->mac_type > (unsigned int)2) 
                                              #line 2362 
                                              tmp_0 = 13336U; else 
                                                                   #line 2362 
                                                                   tmp_0 = 32792U;
          #line 2362 
          ;
          #line 2362 
          ;
          #line 2362 
          writel(adapter->tx_head_addr,(void *)(hw->hw_addr + tmp_0));
          #line 2363 
          if (hw->mac_type > (unsigned int)2) 
                                              #line 2363 
                                              tmp_1 = 13328U; else 
                                                                   #line 2363 
                                                                   tmp_1 = 32784U;
          #line 2363 
          ;
          #line 2363 
          ;
          #line 2363 
          writel(adapter->tx_head_addr,(void *)(hw->hw_addr + tmp_1));
          #line 2364 
          writel(adapter->tx_head_addr,(void *)(hw->hw_addr + 13352U));
          #line 2365 
          writel(adapter->tx_head_addr,(void *)(hw->hw_addr + 13344U));
          #line 2366 
          writel(tctl,(void *)(hw->hw_addr + 1024U));
          #line 2367 
          readl((void *)(hw->hw_addr + 8U));
          #line 2369 
          adapter->tx_fifo_head = 0U;
          #line 2370 
          atomic_set(& adapter->tx_fifo_stall,0);
          #line 2371 
          netif_wake_queue(netdev);
        }
        else 
             #line 2357 
             goto _LAND_0;
      }
      else 
           #line 2357 
           goto _LAND_0;
    }
    else {
      #line 2357 
      _LAND_0: 
      #line 2372 
      if (! test_bit(2L,& adapter->flags)) 
                                           #line 2373 
                                           cif_schedule_delayed_work(& adapter->fifo_stall_task,1UL);
    }
  }
  #line 2374 
  return;
}

#line 2378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
bool e1000_has_link(struct e1000_adapter *adapter)
{
  #line 2380 
  struct e1000_hw *hw = & adapter->hw;
  #line 2381 
  bool link_active = (_Bool)0;
  #line 2389 
  switch ((unsigned int)hw->media_type) {
    #line 2390 
    case (unsigned int)0: 
                          #line 2390 
    ;
    #line 2391 
    if (hw->mac_type == (unsigned int)9) 
                                         #line 2392 
                                         hw->get_link_status = (_Bool)1;
    #line 2393 
    if ((int)hw->get_link_status != 0) {
      #line 2394 
      e1000_check_for_link(hw);
      #line 2395 
      link_active = (_Bool)(! ((int)hw->get_link_status != 0));
    }
    else 
         #line 2397 
         link_active = (_Bool)1;
    #line 2399 
    break;
    #line 2400 
    case (unsigned int)1: 
                          #line 2400 
    ;
    #line 2401 
    e1000_check_for_link(hw);
    #line 2402 
    link_active = (_Bool)((readl((void *)(hw->hw_addr + 8U)) & 2U) != 0U);
    #line 2403 
    break;
    #line 2404 
    case (unsigned int)2: 
                          #line 2404 
    ;
    #line 2405 
    e1000_check_for_link(hw);
    #line 2406 
    link_active = hw->serdes_has_link;
    #line 2407 
    break;
    #line 2408 
    default: 
             #line 2408 
    ;
    #line 2409 
    break;
  }
  #line 2412 
  return link_active;
}

#line 2419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_watchdog(struct work_struct *work)
{
  #line 2421 
  void *__mptr;
  #line 2427 
  u32 link;
  #line 2427 
  u32 tctl;
  #line 2421 
  __mptr = (void *)work;
  #line 2421 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709549288U));
  #line 2424 
  struct e1000_hw *hw = & adapter->hw;
  #line 2425 
  struct net_device *netdev = adapter->netdev;
  #line 2426 
  struct e1000_tx_ring *txdr = adapter->tx_ring;
  #line 2429 
  link = (unsigned int)e1000_has_link(adapter);
  #line 2430 
  if ((int)netif_carrier_ok(netdev) != 0) 
    #line 2430 
    if (link != 0U) 
                    #line 2431 
                    goto link_up;
  #line 2433 
  if (link != 0U) {
    #line 2434 
    if (! netif_carrier_ok(netdev)) {
      #line 2442 
      char *tmp_2;
      #line 2442 
      char *tmp_3;
      #line 2435 
      u32 ctrl;
      #line 2442 
      char *tmp_4;
      #line 2442 
      char *tmp_5;
      #line 2437 
      e1000_get_speed_and_duplex(hw,& adapter->link_speed,& adapter->link_duplex);
      #line 2441 
      ctrl = readl((void *)hw->hw_addr);
      #line 2442 
      if ((ctrl & 268435456U) == 0U || (ctrl & 134217728U) == 0U) {
        #line 2442 
        if ((ctrl & 134217728U) == 0U) {
          #line 2442 
          if ((ctrl & 268435456U) != 0U) 
                                         #line 2442 
                                         tmp_2 = (char *)"TX"; else 
                                                                    #line 2442 
                                                                    tmp_2 = (char *)"None";
          #line 2442 
          tmp_3 = tmp_2;
        }
        else 
             #line 2442 
             tmp_3 = (char *)"RX";
        #line 2442 
        tmp_4 = tmp_3;
      }
      else 
           #line 2442 
           tmp_4 = (char *)"RX/TX";
      #line 2442 
      if ((unsigned int)adapter->link_duplex == 2U) 
                                                    #line 2442 
                                                    tmp_5 = (char *)"Full Duplex"; else 
                                                                    #line 2442 
                                                                    tmp_5 = (char *)"Half Duplex";
      #line 2442 
      ;
      #line 2442 
      ;
      #line 2442 
      printk((char *)"\001",(char *)(& netdev->name),(int)adapter->link_speed,tmp_5,tmp_4);
      #line 2454 
      adapter->tx_timeout_factor = (unsigned char)1U;
      #line 2455 
      switch ((int)adapter->link_speed) {
        #line 2456 
        case 10: 
                 #line 2456 
        ;
        #line 2457 
        adapter->tx_timeout_factor = (unsigned char)16U;
        #line 2458 
        break;
        #line 2459 
        case 100: 
                  #line 2459 
        ;
        #line 2461 
        break;
      }
      #line 2465 
      tctl = readl((void *)(hw->hw_addr + 1024U));
      #line 2466 
      tctl |= 2U;
      #line 2467 
      writel(tctl,(void *)(hw->hw_addr + 1024U));
      #line 2469 
      netif_carrier_on(netdev);
      #line 2470 
      if (! test_bit(2L,& adapter->flags)) 
                                           #line 2471 
                                           cif_schedule_delayed_work(& adapter->phy_info_task,500UL);
      #line 2473 
      adapter->smartspeed = 0U;
    }
  }
  else {
    #line 2476 
    if ((int)netif_carrier_ok(netdev) != 0) {
      #line 2477 
      adapter->link_speed = (unsigned short)0U;
      #line 2478 
      adapter->link_duplex = (unsigned short)0U;
      #line 2479 
      printk((char *)"\001",(char *)(& netdev->name));
      #line 2481 
      netif_carrier_off(netdev);
      #line 2483 
      if (! test_bit(2L,& adapter->flags)) 
                                           #line 2484 
                                           cif_schedule_delayed_work(& adapter->phy_info_task,500UL);
    }
    #line 2488 
    e1000_smartspeed(adapter);
  }
  #line 2491 
  link_up: 
           #line 2491 
  ;
  #line 2492 
  e1000_update_stats(adapter);
  #line 2494 
  hw->tx_packet_delta = (unsigned int)adapter->stats.tpt - (unsigned int)adapter->tpt_old;
  #line 2495 
  adapter->tpt_old = adapter->stats.tpt;
  #line 2496 
  hw->collision_delta = (unsigned int)adapter->stats.colc - (unsigned int)adapter->colc_old;
  #line 2497 
  adapter->colc_old = adapter->stats.colc;
  #line 2499 
  adapter->gorcl = (unsigned int)adapter->stats.gorcl - (unsigned int)adapter->gorcl_old;
  #line 2500 
  adapter->gorcl_old = adapter->stats.gorcl;
  #line 2501 
  adapter->gotcl = (unsigned int)adapter->stats.gotcl - (unsigned int)adapter->gotcl_old;
  #line 2502 
  adapter->gotcl_old = adapter->stats.gotcl;
  #line 2504 
  e1000_update_adaptive(hw);
  #line 2506 
  if (! netif_carrier_ok(netdev)) {
    #line 2507 
    unsigned int clean;
    #line 2507 
    unsigned int use;
    #line 2507 
    unsigned int tmp_13;
    {
      #line 2507 
      unsigned int ___p1;
      #line 2508 
      union __anonunion___u_2025 __u_0;
      {
        #line 2508 
        union __anonunion___u_2023 __u;
        #line 2507 
        __read_once_size((void *)(& txdr->next_to_clean),(void *)(& __u.__c),4);
        #line 2507 
        ___p1 = (__u.__val);
        #line 2510 
        ldv_inline_asm();
        }
      #line 2507 
      clean = ___p1;
      #line 2507 
      __read_once_size((void *)(& txdr->next_to_use),(void *)(& __u_0.__c),4);
      #line 2507 
      use = (__u_0.__val);
      #line 2507 
      if (clean <= use) 
                        #line 2507 
                        tmp_13 = txdr->count; else 
                                                   #line 2507 
                                                   tmp_13 = 0U;
      #line 2507 
      ;
      }
    #line 2507 
    ;
    #line 2507 
    if ((((tmp_13 + clean) - use) + 4294967295U) + 1U < txdr->count) {
      #line 2513 
      (adapter->tx_timeout_count) ++;
      #line 2514 
      cif_schedule_work(& adapter->reset_task);
      #line 2516 
      return;
    }
  }
  #line 2521 
  if (hw->mac_type > (unsigned int)4 && adapter->itr_setting == 4U) {
    #line 2527 
    u32 tmp_16;
    #line 2530 
    u32 tmp_17;
    #line 2526 
    u32 goc = (adapter->gotcl + adapter->gorcl) / 10000U;
    #line 2527 
    if (adapter->gotcl > adapter->gorcl) 
                                         #line 2527 
                                         tmp_16 = (adapter->gotcl - adapter->gorcl) / 10000U; else 
                                                                    #line 2527 
                                                                    tmp_16 = (adapter->gorcl - adapter->gotcl) / 10000U;
    #line 2527 
    u32 dif = tmp_16;
    #line 2530 
    if (goc != 0U) 
                   #line 2530 
                   tmp_17 = (dif * 6000U) / goc + 2000U; else 
                                                              #line 2530 
                                                              tmp_17 = 8000U;
    #line 2530 
    u32 itr = tmp_17;
    #line 2532 
    writel(1000000000U / (itr * 256U),(void *)(hw->hw_addr + 196U));
  }
  #line 2536 
  writel(16U,(void *)(hw->hw_addr + 200U));
  #line 2539 
  adapter->detect_tx_hung = (_Bool)1;
  #line 2542 
  if (! test_bit(2L,& adapter->flags)) 
                                       #line 2543 
                                       cif_schedule_delayed_work(& adapter->watchdog_task,500UL);
  #line 2544 
  return;
}

#line 2570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static unsigned int e1000_update_itr(struct e1000_adapter *adapter, u16 itr_setting, int packets, int bytes)
{
  #line 2573 
  unsigned int retval = (unsigned int)itr_setting;
  #line 2574 
  struct e1000_hw *hw = & adapter->hw;
  #line 2576 
  if ((long)(hw->mac_type <= (unsigned int)4) != 0L) 
                                                     #line 2577 
                                                     goto update_itr_done;
  #line 2579 
  if (packets == 0) 
                    #line 2580 
                    goto update_itr_done;
  #line 2582 
  switch ((int)itr_setting) {
    #line 2583 
    case 0: 
            #line 2583 
    ;
    #line 2585 
    if (bytes / packets > 8000) 
                                #line 2586 
                                retval = 2U;
    else 
      #line 2587 
      if (packets <= 4 && bytes > 512) 
                                       #line 2588 
                                       retval = 1U;
    #line 2589 
    break;
    #line 2590 
    case 1: 
            #line 2590 
    ;
    #line 2591 
    if (bytes > 10000) {
      #line 2593 
      if (bytes / packets > 8000) 
                                  #line 2594 
                                  retval = 2U;
      else 
        #line 2595 
        if (packets <= 9 || bytes / packets > 1200) 
                                                    #line 2596 
                                                    retval = 2U;
        else 
          #line 2597 
          if (packets > 35) 
                            #line 2598 
                            retval = 0U;
    }
    else 
      #line 2599 
      if (bytes / packets > 2000) 
                                  #line 2600 
                                  retval = 2U;
      else 
        #line 2601 
        if (packets <= 2 && bytes <= 511) 
                                          #line 2602 
                                          retval = 0U;
    #line 2603 
    break;
    #line 2604 
    case 2: 
            #line 2604 
    ;
    #line 2605 
    if (bytes > 25000) {
      #line 2606 
      if (packets > 35) 
                        #line 2607 
                        retval = 1U;
    }
    else 
      #line 2608 
      if (bytes <= 5999) 
                         #line 2609 
                         retval = 1U;
    #line 2611 
    break;
  }
  #line 2614 
  update_itr_done: 
                   #line 2614 
  ;
  #line 2615 
  return retval;
}

#line 2618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_set_itr(struct e1000_adapter *adapter)
{
  #line 2648 
  u16 __UNIQUE_ID___x556;
  #line 2648 
  int tmp_1;
  #line 2621 
  u16 current_itr;
  #line 2620 
  struct e1000_hw *hw = & adapter->hw;
  #line 2622 
  u32 new_itr = adapter->itr;
  #line 2624 
  if ((long)(hw->mac_type <= (unsigned int)4) != 0L) 
                                                     #line 2625 
                                                     return;
  #line 2628 
  if ((long)((unsigned int)adapter->link_speed != 1000U) != 0L) {
    #line 2629 
    current_itr = (unsigned short)0U;
    #line 2630 
    new_itr = 4000U;
    #line 2631 
    goto set_itr_now;
  }
  #line 2634 
  adapter->tx_itr = (unsigned short)e1000_update_itr(adapter,(unsigned short)((int)adapter->tx_itr),
                       (int)adapter->total_tx_packets,
                       (int)adapter->total_tx_bytes);
  #line 2638 
  if (adapter->itr_setting == 3U && (unsigned int)adapter->tx_itr == 0U) 
    #line 2639 
    adapter->tx_itr = (unsigned short)1U;
  #line 2641 
  adapter->rx_itr = (unsigned short)e1000_update_itr(adapter,(unsigned short)((int)adapter->rx_itr),
                         (int)adapter->total_rx_packets,
                         (int)adapter->total_rx_bytes);
  #line 2645 
  if (adapter->itr_setting == 3U && (unsigned int)adapter->rx_itr == 0U) 
    #line 2646 
    adapter->rx_itr = (unsigned short)1U;
  {
    #line 2648 
    __UNIQUE_ID___x556 = adapter->rx_itr;
    #line 2648 
    u16 __UNIQUE_ID___y557 = adapter->tx_itr;
    #line 2648 
    if ((int)__UNIQUE_ID___x556 > (int)__UNIQUE_ID___y557) 
                                                           #line 2648 
                                                           tmp_1 = (int)__UNIQUE_ID___x556; else 
                                                                    #line 2648 
                                                                    tmp_1 = (int)__UNIQUE_ID___y557;
    }
  #line 2648 
  current_itr = (unsigned short)tmp_1;
  #line 2650 
  switch ((int)current_itr) {
    #line 2652 
    case 0: 
            #line 2652 
    ;
    #line 2653 
    new_itr = 70000U;
    #line 2654 
    break;
    #line 2655 
    case 1: 
            #line 2655 
    ;
    #line 2656 
    new_itr = 20000U;
    #line 2657 
    break;
    #line 2658 
    case 2: 
            #line 2658 
    ;
    #line 2659 
    new_itr = 4000U;
    #line 2660 
    break;
    #line 2661 
    default: 
             #line 2661 
    ;
    #line 2662 
    break;
  }
  #line 2665 
  set_itr_now: 
               #line 2665 
  ;
  #line 2666 
  if (adapter->itr != new_itr) {
    #line 2671 
    if (adapter->itr < new_itr) {
      #line 2672 
      u32 tmp_3;
      #line 2672 
      u32 __UNIQUE_ID___x558;
      {
        #line 2672 
        __UNIQUE_ID___x558 = adapter->itr + (new_itr >> 2);
        #line 2672 
        u32 __UNIQUE_ID___y559 = new_itr;
        #line 2672 
        if (__UNIQUE_ID___x558 < __UNIQUE_ID___y559) 
                                                     #line 2672 
                                                     tmp_3 = __UNIQUE_ID___x558; else 
                                                                    #line 2672 
                                                                    tmp_3 = __UNIQUE_ID___y559;
        }
      #line 2671 
      new_itr = tmp_3;
    }
    else 
         #line 2671 
         new_itr = new_itr;
    #line 2674 
    adapter->itr = new_itr;
    #line 2675 
    writel(1000000000U / (new_itr * 256U),(void *)(hw->hw_addr + 196U));
  }
  #line 2677 
  return;
}

#line 2687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_tso(struct e1000_adapter *adapter, struct e1000_tx_ring *tx_ring, struct sk_buff *skb, __be16 protocol)
{
  #line 2691 
  struct e1000_context_desc *context_desc;
  #line 2692 
  struct e1000_tx_buffer *buffer_info;
  #line 2693 
  unsigned int i;
  #line 2695 
  u16 tucse;
  #line 2695 
  u16 mss;
  #line 2696 
  u8 ipcss;
  #line 2696 
  u8 ipcso;
  #line 2696 
  u8 tucss;
  #line 2696 
  u8 tucso;
  #line 2696 
  u8 hdr_len;
  #line 2694 
  u32 cmd_length = 0U;
  #line 2695 
  u16 ipcse = (unsigned short)0U;
  #line 2698 
  if ((int)skb_is_gso(skb) != 0) {
    #line 2699 
    int err;
    #line 2701 
    err = skb_cow_head(skb,0U);
    #line 2702 
    if (err < 0) 
                 #line 2703 
                 return err;
    #line 2705 
    hdr_len = (unsigned char)((int)((unsigned char)skb_transport_offset(skb)) + (int)((unsigned char)tcp_hdrlen(skb)));
    #line 2706 
    mss = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
    #line 2707 
    if ((unsigned int)protocol == 8U) {
      #line 2708 
      struct iphdr *iph = ip_hdr(skb);
      #line 2709 
      iph->tot_len = (unsigned short)0U;
      #line 2710 
      iph->check = (unsigned short)0U;
      #line 2711 
      tcp_hdr(skb)->check = (unsigned short)(~ ((int)csum_tcpudp_magic(iph->saddr,iph->daddr,0U,(unsigned char)6,0U)));
      #line 2715 
      cmd_length = 33554432U;
      #line 2716 
      ipcse = (unsigned short)((unsigned int)((unsigned short)skb_transport_offset(skb)) + 65535U);
    }
    else {
      #line 2717 
      if ((int)skb_is_gso_v6(skb) != 0) {
        #line 2718 
        ipv6_hdr(skb)->payload_len = (unsigned short)0U;
        #line 2719 
        tcp_hdr(skb)->check = (unsigned short)(~ ((int)csum_ipv6_magic(& ipv6_hdr(skb)->saddr,& ipv6_hdr(skb)->daddr,0U,
                         (unsigned char)6,0U)));
        #line 2723 
        ipcse = (unsigned short)0U;
      }
    }
    #line 2725 
    ipcss = (unsigned char)skb_network_offset(skb);
    #line 2726 
    ipcso = (unsigned char)((void *)(& ip_hdr(skb)->check) - (void *)skb->data);
    #line 2727 
    tucss = (unsigned char)skb_transport_offset(skb);
    #line 2728 
    tucso = (unsigned char)((void *)(& tcp_hdr(skb)->check) - (void *)skb->data);
    #line 2729 
    tucse = (unsigned short)0U;
    #line 2731 
    cmd_length = ((skb->len - (unsigned int)hdr_len) | cmd_length) | 620756992U;
    #line 2734 
    i = tx_ring->next_to_use;
    #line 2735 
    context_desc = (struct e1000_context_desc *)tx_ring->desc + (unsigned long)i;
    #line 2736 
    buffer_info = tx_ring->buffer_info + (unsigned long)i;
    #line 2738 
    context_desc->lower_setup.ip_fields.ipcss = ipcss;
    #line 2739 
    context_desc->lower_setup.ip_fields.ipcso = ipcso;
    #line 2740 
    context_desc->lower_setup.ip_fields.ipcse = ipcse;
    #line 2741 
    context_desc->upper_setup.tcp_fields.tucss = tucss;
    #line 2742 
    context_desc->upper_setup.tcp_fields.tucso = tucso;
    #line 2743 
    context_desc->upper_setup.tcp_fields.tucse = tucse;
    #line 2744 
    context_desc->tcp_seg_setup.fields.mss = mss;
    #line 2745 
    context_desc->tcp_seg_setup.fields.hdr_len = hdr_len;
    #line 2746 
    context_desc->cmd_and_length = cmd_length;
    #line 2748 
    buffer_info->time_stamp = jiffies;
    #line 2749 
    buffer_info->next_to_watch = (unsigned short)i;
    #line 2751 
    i ++;
    #line 2751 
    ;
    #line 2751 
    if (i == tx_ring->count) 
                             #line 2752 
                             i = 0U;
    #line 2754 
    tx_ring->next_to_use = i;
    #line 2756 
    return 1;
  }
  #line 2758 
  return 0;
}

#line 2761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static bool e1000_tx_csum(struct e1000_adapter *adapter, struct e1000_tx_ring *tx_ring, struct sk_buff *skb, __be16 protocol)
{
  #line 2765 
  struct e1000_context_desc *context_desc;
  #line 2766 
  struct e1000_tx_buffer *buffer_info;
  #line 2767 
  unsigned int i;
  #line 2768 
  u8 css;
  #line 2769 
  u32 cmd_len = 536870912U;
  #line 2771 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 2772 
                                          return (_Bool)0;
  #line 2774 
  switch ((int)protocol) {
    #line 2775 
    case 8: 
            #line 2775 
    ;
    #line 2776 
    ;
    #line 2776 
    if ((unsigned int)ip_hdr(skb)->protocol == 6U) 
                                                   #line 2777 
                                                   cmd_len |= 16777216U;
    #line 2778 
    break;
    #line 2779 
    case 56710: 
                #line 2779 
    ;
    #line 2781 
    ;
    #line 2781 
    if ((unsigned int)ipv6_hdr(skb)->nexthdr == 6U) 
                                                    #line 2782 
                                                    cmd_len |= 16777216U;
    #line 2783 
    break;
    #line 2784 
    default: 
             #line 2784 
    ;
    #line 2785 
    if ((long)(net_ratelimit() != 0) != 0L) 
      #line 2786 
      if ((adapter->msg_enable & 1) != 0) 
                                          #line 2786 
                                          netdev_warn(adapter->netdev,(char *)"checksum_partial proto=%x!\n",(int)skb->protocol);
    #line 2788 
    break;
  }
  #line 2791 
  css = (unsigned char)skb_checksum_start_offset(skb);
  #line 2793 
  i = tx_ring->next_to_use;
  #line 2794 
  buffer_info = tx_ring->buffer_info + (unsigned long)i;
  #line 2795 
  context_desc = (struct e1000_context_desc *)tx_ring->desc + (unsigned long)i;
  #line 2797 
  context_desc->lower_setup.ip_config = 0U;
  #line 2798 
  context_desc->upper_setup.tcp_fields.tucss = css;
  #line 2799 
  context_desc->upper_setup.tcp_fields.tucso = (unsigned char)((int)((unsigned char)skb->__anonCompField_sk_buff_98.__anonCompField___anonunion_540_97.csum_offset) + (int)css);
  #line 2801 
  context_desc->upper_setup.tcp_fields.tucse = (unsigned short)0U;
  #line 2802 
  context_desc->tcp_seg_setup.data = 0U;
  #line 2803 
  context_desc->cmd_and_length = cmd_len;
  #line 2805 
  buffer_info->time_stamp = jiffies;
  #line 2806 
  buffer_info->next_to_watch = (unsigned short)i;
  #line 2808 
  i ++;
  #line 2808 
  ;
  #line 2808 
  if ((long)(i == tx_ring->count) != 0L) 
                                         #line 2809 
                                         i = 0U;
  #line 2811 
  tx_ring->next_to_use = i;
  #line 2813 
  return (_Bool)1;
}

#line 2819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_tx_map(struct e1000_adapter *adapter, struct e1000_tx_ring *tx_ring, struct sk_buff *skb, unsigned int first, unsigned int max_per_txd, unsigned int nr_frags, unsigned int mss)
{
  #line 2827 
  struct e1000_tx_buffer *buffer_info;
  #line 2829 
  unsigned int size;
  #line 2829 
  unsigned int i;
  #line 2830 
  unsigned int f;
  #line 2830 
  unsigned int bytecount;
  #line 2830 
  unsigned int segs;
  #line 2825 
  struct e1000_hw *hw = & adapter->hw;
  #line 2826 
  struct pci_dev *pdev = adapter->pdev;
  #line 2828 
  unsigned int len = skb_headlen(skb);
  #line 2829 
  unsigned int offset = 0U;
  #line 2829 
  unsigned int count = 0U;
  #line 2832 
  i = tx_ring->next_to_use;
  #line 2834 
  while (len != 0U) {
    #line 2836 
    unsigned int __UNIQUE_ID___x560;
    #line 2836 
    unsigned int tmp_0;
    #line 2835 
    buffer_info = tx_ring->buffer_info + (unsigned long)i;
    {
      #line 2836 
      __UNIQUE_ID___x560 = len;
      #line 2836 
      unsigned int __UNIQUE_ID___y561 = max_per_txd;
      #line 2836 
      if (__UNIQUE_ID___x560 < __UNIQUE_ID___y561) 
                                                   #line 2836 
                                                   tmp_0 = __UNIQUE_ID___x560; else 
                                                                    #line 2836 
                                                                    tmp_0 = __UNIQUE_ID___y561;
      }
    #line 2836 
    size = tmp_0;
    #line 2842 
    if (skb->data_len == 0U && (int)tx_ring->last_tx_tso != 0) {
      #line 2843 
      if (! skb_is_gso(skb)) {
        #line 2844 
        tx_ring->last_tx_tso = (_Bool)0;
        #line 2845 
        size += 4294967292U;
      }
    }
    #line 2851 
    if ((long)((mss != 0U && nr_frags == 0U) != 0) != 0L && (long)((size == len && size > 8U) != 0) != 0L) 
      #line 2852 
      size += 4294967292U;
    #line 2858 
    if ((long)(hw->bus_type == (unsigned int)2) != 0L && (long)((size > 2015U && count == 0U) != 0) != 0L) 
      #line 2860 
      size = 2015U;
    #line 2865 
    if ((((long)((int)adapter->pcix_82544 != 0) != 0L && (long)(((unsigned long)(skb->data + (((unsigned long)offset + (unsigned long)size) + 18446744073709551615U)) & 4UL) == 0UL) != 0L) != 0) != 0 && (long)(size > 4U) != 0L) 
      #line 2868 
      size += 4294967292U;
    #line 2870 
    buffer_info->length = (unsigned short)size;
    #line 2872 
    buffer_info->time_stamp = jiffies;
    #line 2873 
    buffer_info->mapped_as_page = (_Bool)0;
    #line 2874 
    buffer_info->dma = dma_map_single_attrs(& pdev->dev,(void *)(skb->data + (unsigned long)offset),(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 2877 
    if (dma_mapping_error(& pdev->dev,buffer_info->dma) != 0) 
                                                              #line 2878 
                                                              goto dma_error;
    #line 2879 
    buffer_info->next_to_watch = (unsigned short)i;
    #line 2881 
    len -= size;
    #line 2882 
    offset += size;
    #line 2883 
    count ++;
    #line 2884 
    if (len != 0U) {
      #line 2885 
      i ++;
      #line 2886 
      if ((long)(tx_ring->count == i) != 0L) 
                                             #line 2887 
                                             i = 0U;
    }
  }
  #line 2891 
  f = 0U;
  #line 2891 
  while (f < nr_frags) {
    {
      #line 2892 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[f];
      #line 2894 
      len = skb_frag_size(frag);
      #line 2895 
      offset = 0U;
      #line 2897 
      while (len != 0U) {
        #line 2904 
        unsigned int __UNIQUE_ID___x562;
        #line 2904 
        unsigned int tmp_5;
        #line 2898 
        unsigned long bufend;
        #line 2899 
        i ++;
        #line 2900 
        if ((long)(tx_ring->count == i) != 0L) 
                                               #line 2901 
                                               i = 0U;
        #line 2903 
        buffer_info = tx_ring->buffer_info + (unsigned long)i;
        {
          #line 2904 
          __UNIQUE_ID___x562 = len;
          #line 2904 
          unsigned int __UNIQUE_ID___y563 = max_per_txd;
          #line 2904 
          if (__UNIQUE_ID___x562 < __UNIQUE_ID___y563) 
                                                       #line 2904 
                                                       tmp_5 = __UNIQUE_ID___x562; else 
                                                                    #line 2904 
                                                                    tmp_5 = __UNIQUE_ID___y563;
          }
        #line 2904 
        size = tmp_5;
        #line 2908 
        if ((((long)(mss != 0U) != 0L && (long)(nr_frags + 4294967295U == f) != 0L) != 0) != 0 && (long)((size == len && size > 8U) != 0) != 0L) 
          #line 2910 
          size += 4294967292U;
        #line 2915 
        bufend = (unsigned long)((unsigned long long)((skb_frag_page(frag) - (struct page *)vmemmap_base) / 64L) << 12);
        #line 2917 
        bufend = (unsigned long)((offset + size) + 4294967295U) + bufend;
        #line 2918 
        if ((((long)((int)adapter->pcix_82544 != 0) != 0L && (long)((bufend & 4UL) == 0UL) != 0L) != 0) != 0 && (long)(size > 4U) != 0L) 
          #line 2921 
          size += 4294967292U;
        #line 2923 
        buffer_info->length = (unsigned short)size;
        #line 2924 
        buffer_info->time_stamp = jiffies;
        #line 2925 
        buffer_info->mapped_as_page = (_Bool)1;
        #line 2926 
        buffer_info->dma = skb_frag_dma_map(& pdev->dev,frag,(unsigned long)offset,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
        #line 2928 
        if (dma_mapping_error(& pdev->dev,buffer_info->dma) != 0) 
                                                                  #line 2929 
                                                                  goto dma_error;
        #line 2930 
        buffer_info->next_to_watch = (unsigned short)i;
        #line 2932 
        len -= size;
        #line 2933 
        offset += size;
        #line 2934 
        count ++;
      }
    }
    #line 2891 
    f ++;
  }
  #line 2938 
  ;
  #line 2938 
  if ((int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs != 0) {
    #line 2938 
    segs = (unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs);
  }
  else 
       #line 2938 
       segs = 1U;
  #line 2940 
  bytecount = (segs + 4294967295U) * skb_headlen(skb) + skb->len;
  #line 2942 
  (tx_ring->buffer_info + (unsigned long)i)->skb = skb;
  #line 2943 
  (tx_ring->buffer_info + (unsigned long)i)->segs = (unsigned short)segs;
  #line 2944 
  (tx_ring->buffer_info + (unsigned long)i)->bytecount = bytecount;
  #line 2945 
  (tx_ring->buffer_info + (unsigned long)first)->next_to_watch = (unsigned short)i;
  #line 2947 
  return (int)count;
  #line 2949 
  dma_error: 
             #line 2949 
  ;
  #line 2950 
  _dev_err(& pdev->dev,(char *)"TX DMA map failed\n");
  #line 2951 
  buffer_info->dma = 0ULL;
  #line 2952 
  if (count != 0U) 
                   #line 2953 
                   count --;
  #line 2955 
  while (1) {
    #line 2955 
    unsigned int tmp_12;
    #line 2955 
    tmp_12 = count;
    #line 2955 
    count --;
    #line 2955 
    ;
    #line 2955 
    if (! (tmp_12 != 0U)) 
                          #line 2955 
                          break;
    #line 2956 
    if (i == 0U) 
                 #line 2957 
                 i = tx_ring->count + i;
    #line 2958 
    i --;
    #line 2959 
    buffer_info = tx_ring->buffer_info + (unsigned long)i;
    #line 2960 
    e1000_unmap_and_free_tx_resource(adapter,buffer_info);
  }
  #line 2963 
  return 0;
}

#line 2966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_tx_queue(struct e1000_adapter *adapter, struct e1000_tx_ring *tx_ring, int tx_flags, int count)
{
  #line 2971 
  struct e1000_tx_buffer *buffer_info;
  #line 2973 
  unsigned int i;
  #line 2970 
  struct e1000_tx_desc *tx_desc = (struct e1000_tx_desc *)0;
  #line 2972 
  u32 txd_upper = 0U;
  #line 2972 
  u32 txd_lower = 33554432U;
  #line 2975 
  if ((long)((tx_flags & 4) != 0) != 0L) {
    #line 2976 
    txd_lower |= 605028352U;
    #line 2978 
    txd_upper |= 512U;
    #line 2980 
    if ((long)((tx_flags & 8) != 0) != 0L) 
                                           #line 2981 
                                           txd_upper |= 256U;
  }
  #line 2984 
  if ((long)((tx_flags & 1) != 0) != 0L) {
    #line 2985 
    txd_lower |= 537919488U;
    #line 2986 
    txd_upper |= 512U;
  }
  #line 2989 
  if ((long)((tx_flags & 2) != 0) != 0L) {
    #line 2990 
    txd_lower |= 1073741824U;
    #line 2991 
    txd_upper = ((unsigned int)tx_flags & 4294901760U) | txd_upper;
  }
  #line 2994 
  if ((long)((tx_flags & 16) != 0) != 0L) 
                                          #line 2995 
                                          txd_lower &= 4261412863U;
  #line 2997 
  i = tx_ring->next_to_use;
  #line 2999 
  while (1) {
    #line 2999 
    int tmp;
    #line 2999 
    tmp = count;
    #line 2999 
    count --;
    #line 2999 
    ;
    #line 2999 
    if (! (tmp != 0)) 
                      #line 2999 
                      break;
    #line 3000 
    buffer_info = tx_ring->buffer_info + (unsigned long)i;
    #line 3001 
    tx_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)i;
    #line 3002 
    tx_desc->buffer_addr = buffer_info->dma;
    #line 3003 
    tx_desc->lower.data = (unsigned int)buffer_info->length | txd_lower;
    #line 3005 
    tx_desc->upper.data = txd_upper;
    #line 3006 
    i ++;
    #line 3006 
    ;
    #line 3006 
    if ((long)(i == tx_ring->count) != 0L) 
                                           #line 3007 
                                           i = 0U;
  }
  #line 3010 
  tx_desc->lower.data |= adapter->txd_cmd;
  #line 3013 
  if ((long)((tx_flags & 16) != 0) != 0L) 
                                          #line 3014 
                                          tx_desc->lower.data &= 4261412863U;
  #line 3015 
  ldv_inline_asm();
  #line 3023 
  tx_ring->next_to_use = i;
  #line 3024 
  return;
}

#line 3037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_82547_fifo_workaround(struct e1000_adapter *adapter, struct sk_buff *skb)
{
  #line 3040 
  u32 fifo_space = adapter->tx_fifo_size - adapter->tx_fifo_head;
  #line 3041 
  u32 skb_fifo_len = skb->len + 16U;
  #line 3043 
  skb_fifo_len = (skb_fifo_len + 15U) & 4294967280U;
  #line 3045 
  if ((unsigned int)adapter->link_duplex != 1U) 
                                                #line 3046 
                                                goto no_fifo_stall_required;
  #line 3048 
  if (atomic_read(& adapter->tx_fifo_stall) != 0) 
                                                  #line 3049 
                                                  return 1;
  #line 3051 
  if (fifo_space + 992U <= skb_fifo_len) {
    #line 3052 
    atomic_set(& adapter->tx_fifo_stall,1);
    #line 3053 
    return 1;
  }
  #line 3056 
  no_fifo_stall_required: 
                          #line 3056 
  ;
  #line 3057 
  adapter->tx_fifo_head += skb_fifo_len;
  #line 3058 
  if (adapter->tx_fifo_head >= adapter->tx_fifo_size) 
                                                      #line 3059 
                                                      adapter->tx_fifo_head -= adapter->tx_fifo_size;
  #line 3060 
  return 0;
}

#line 3063  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int __e1000_maybe_stop_tx(struct net_device *netdev, int size)
{
  #line 3078 
  unsigned int use;
  #line 3078 
  unsigned int tmp_3;
  #line 3078 
  unsigned int clean;
  #line 3065 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 3066 
  struct e1000_tx_ring *tx_ring = adapter->tx_ring;
  #line 3068 
  netif_stop_queue(netdev);
  #line 3069 
  ldv_inline_asm();
  {
    #line 3079 
    union __anonunion___u_2029 __u_0;
    #line 3078 
    unsigned int ___p1;
    {
      #line 3079 
      union __anonunion___u_2027 __u;
      #line 3078 
      __read_once_size((void *)(& tx_ring->next_to_clean),(void *)(& __u.__c),4);
      #line 3078 
      ___p1 = (__u.__val);
      #line 3081 
      ldv_inline_asm();
      }
    #line 3078 
    clean = ___p1;
    #line 3078 
    __read_once_size((void *)(& tx_ring->next_to_use),(void *)(& __u_0.__c),4);
    #line 3078 
    use = (__u_0.__val);
    #line 3078 
    if (clean <= use) 
                      #line 3078 
                      tmp_3 = tx_ring->count; else 
                                                   #line 3078 
                                                   tmp_3 = 0U;
    #line 3078 
    ;
    }
  #line 3078 
  ;
  #line 3078 
  if ((long)((((tmp_3 + clean) - use) + 4294967295U) < (unsigned int)size) != 0L) 
    #line 3079 
    return -16;
  #line 3082 
  netif_start_queue(netdev);
  #line 3083 
  (adapter->restart_queue) ++;
  #line 3084 
  return 0;
}

#line 3087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_maybe_stop_tx(struct net_device *netdev, struct e1000_tx_ring *tx_ring, int size)
{
  #line 3090 
  unsigned int tmp_2;
  #line 3090 
  unsigned int clean;
  #line 3090 
  unsigned int use;
  {
    #line 3090 
    unsigned int ___p1;
    #line 3091 
    union __anonunion___u_2033 __u_0;
    {
      #line 3091 
      union __anonunion___u_2031 __u;
      #line 3090 
      __read_once_size((void *)(& tx_ring->next_to_clean),(void *)(& __u.__c),4);
      #line 3090 
      ___p1 = (__u.__val);
      #line 3093 
      ldv_inline_asm();
      }
    #line 3090 
    clean = ___p1;
    #line 3090 
    __read_once_size((void *)(& tx_ring->next_to_use),(void *)(& __u_0.__c),4);
    #line 3090 
    use = (__u_0.__val);
    #line 3090 
    if (clean <= use) 
                      #line 3090 
                      tmp_2 = tx_ring->count; else 
                                                   #line 3090 
                                                   tmp_2 = 0U;
    #line 3090 
    ;
    }
  #line 3090 
  ;
  #line 3090 
  if ((long)((((tmp_2 + clean) - use) + 4294967295U) >= (unsigned int)size) != 0L) 
    #line 3091 
    return 0;
  #line 3092 
  return __e1000_maybe_stop_tx(netdev,size);
}

#line 3096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static netdev_tx_t e1000_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  #line 3101 
  struct e1000_tx_ring *tx_ring;
  #line 3102 
  unsigned int first;
  #line 3106 
  unsigned int nr_frags;
  #line 3107 
  unsigned int mss;
  #line 3109 
  int tso;
  #line 3110 
  unsigned int f;
  #line 3099 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 3100 
  struct e1000_hw *hw = & adapter->hw;
  #line 3102 
  unsigned int max_per_txd = 4096U;
  #line 3103 
  unsigned int max_txd_pwr = 12U;
  #line 3104 
  unsigned int tx_flags = 0U;
  #line 3105 
  unsigned int len = skb_headlen(skb);
  #line 3108 
  int count = 0;
  #line 3111 
  __be16 protocol = vlan_get_protocol(skb);
  #line 3118 
  tx_ring = adapter->tx_ring;
  #line 3124 
  if (eth_skb_pad(skb) != 0) 
                             #line 3125 
                             return NETDEV_TX_OK;
  #line 3127 
  mss = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 3135 
  if (mss != 0U) {
    #line 3137 
    unsigned int __UNIQUE_ID___x564;
    #line 3137 
    unsigned int tmp_4;
    #line 3136 
    u8 hdr_len;
    {
      #line 3137 
      __UNIQUE_ID___x564 = mss << 2;
      #line 3137 
      unsigned int __UNIQUE_ID___y565 = max_per_txd;
      #line 3137 
      if (__UNIQUE_ID___x564 < __UNIQUE_ID___y565) 
                                                   #line 3137 
                                                   tmp_4 = __UNIQUE_ID___x564; else 
                                                                    #line 3137 
                                                                    tmp_4 = __UNIQUE_ID___y565;
      }
    #line 3137 
    max_per_txd = tmp_4;
    #line 3138 
    max_txd_pwr = (unsigned int)(fls(max_per_txd) + -1);
    #line 3140 
    hdr_len = (unsigned char)((int)((unsigned char)skb_transport_offset(skb)) + (int)((unsigned char)tcp_hdrlen(skb)));
    #line 3141 
    if (skb->data_len != 0U && (unsigned int)hdr_len == len) 
      #line 3142 
      switch ((unsigned int)hw->mac_type) {
        #line 3156 
        unsigned int __UNIQUE_ID___x566;
        #line 3156 
        unsigned int tmp_10;
        #line 3143 
        unsigned int pull_size;
        #line 3144 
        case (unsigned int)4: 
                              #line 3144 
        ;
        #line 3152 
        if (((unsigned long)(skb_tail_pointer(skb) + 18446744073709551615U) & 4UL) != 0UL) 
          #line 3154 
          break;
        {
          #line 3156 
          __UNIQUE_ID___x566 = 4U;
          #line 3156 
          unsigned int __UNIQUE_ID___y567 = skb->data_len;
          #line 3156 
          if (__UNIQUE_ID___x566 < __UNIQUE_ID___y567) 
                                                       #line 3156 
                                                       tmp_10 = __UNIQUE_ID___x566; else 
                                                                    #line 3156 
                                                                    tmp_10 = __UNIQUE_ID___y567;
          }
        #line 3156 
        pull_size = tmp_10;
        #line 3157 
        if (__pskb_pull_tail(skb,(int)pull_size) == (void *)0) {
          #line 3158 
          if ((adapter->msg_enable & 1) != 0) 
                                              #line 3158 
                                              netdev_err(adapter->netdev,(char *)"__pskb_pull_tail ");
          #line 3160 
          dev_kfree_skb_any(skb);
          #line 3161 
          return NETDEV_TX_OK;
        }
        #line 3163 
        len = skb_headlen(skb);
        #line 3164 
        break;
        #line 3165 
        default: 
                 #line 3165 
        ;
        #line 3167 
        break;
      }
  }
  #line 3173 
  if (mss != 0U || (unsigned int)skb->ip_summed == 3U) 
                                                       #line 3174 
                                                       count ++;
  #line 3175 
  count ++;
  #line 3178 
  if (skb->data_len == 0U && (int)tx_ring->last_tx_tso != 0) {
    #line 3178 
    if (! skb_is_gso(skb)) 
                           #line 3179 
                           count ++;
  }
  #line 3181 
  count = (int)(((((unsigned int)(1 << max_txd_pwr) + len) + 4294967295U) >> max_txd_pwr) + (unsigned int)count);
  #line 3183 
  if ((int)adapter->pcix_82544 != 0) 
                                     #line 3184 
                                     count ++;
  #line 3189 
  if ((long)(hw->bus_type == (unsigned int)2) != 0L && (long)(len > 2015U) != 0L) 
    #line 3191 
    count ++;
  #line 3193 
  nr_frags = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 3194 
  f = 0U;
  #line 3194 
  while (f < nr_frags) {
    #line 3196 
    count = (int)((((skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[f]) + (unsigned int)(1 << max_txd_pwr)) + 4294967295U) >> max_txd_pwr) + (unsigned int)count);
    #line 3194 
    f ++;
  }
  #line 3197 
  if ((int)adapter->pcix_82544 != 0) 
                                     #line 3198 
                                     count = (int)((unsigned int)count + nr_frags);
  #line 3203 
  if ((long)(e1000_maybe_stop_tx(netdev,tx_ring,count + 2) != 0) != 0L) 
    #line 3204 
    return NETDEV_TX_BUSY;
  #line 3206 
  if ((long)(hw->mac_type == (unsigned int)13) != 0L) {
    #line 3206 
    if ((long)(e1000_82547_fifo_workaround(adapter,skb) != 0) != 0L) {
      #line 3208 
      netif_stop_queue(netdev);
      #line 3209 
      if (! test_bit(2L,& adapter->flags)) 
                                           #line 3210 
                                           cif_schedule_delayed_work(& adapter->fifo_stall_task,1UL);
      #line 3211 
      return NETDEV_TX_BUSY;
    }
  }
  #line 3214 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 3215 
    tx_flags |= 2U;
    #line 3216 
    tx_flags = (unsigned int)((int)skb->vlan_tci << 16) | tx_flags;
  }
  #line 3220 
  first = tx_ring->next_to_use;
  #line 3222 
  tso = e1000_tso(adapter,tx_ring,skb,(unsigned short)((int)protocol));
  #line 3223 
  if (tso < 0) {
    #line 3224 
    dev_kfree_skb_any(skb);
    #line 3225 
    return NETDEV_TX_OK;
  }
  #line 3228 
  if ((long)(tso != 0) != 0L) {
    #line 3229 
    if ((long)(hw->mac_type != (unsigned int)4) != 0L) 
                                                       #line 3230 
                                                       tx_ring->last_tx_tso = (_Bool)1;
    #line 3231 
    tx_flags |= 4U;
  }
  else {
    #line 3232 
    if ((long)((int)e1000_tx_csum(adapter,tx_ring,skb,(unsigned short)((int)protocol)) != 0) != 0L) 
      #line 3233 
      tx_flags |= 1U;
  }
  #line 3235 
  if ((unsigned int)protocol == 8U) 
                                    #line 3236 
                                    tx_flags |= 8U;
  #line 3238 
  if ((long)((unsigned int)skb->no_fcs != 0U) != 0L) 
                                                     #line 3239 
                                                     tx_flags |= 16U;
  #line 3241 
  count = e1000_tx_map(adapter,tx_ring,skb,first,max_per_txd,nr_frags,mss);
  #line 3244 
  if (count != 0) {
    #line 3252 
    int desc_needed = 24;
    #line 3254 
    netdev_sent_queue(netdev,skb->len);
    #line 3255 
    skb_tx_timestamp(skb);
    #line 3257 
    e1000_tx_queue(adapter,tx_ring,(int)tx_flags,count);
    #line 3263 
    if ((int)adapter->pcix_82544 != 0) 
                                       #line 3264 
                                       desc_needed = (int)((unsigned int)desc_needed + 18U);
    #line 3267 
    e1000_maybe_stop_tx(netdev,tx_ring,desc_needed);
    #line 3269 
    if (netdev_xmit_more()) {
      #line 3269 
      if ((int)netif_xmit_stopped(netdev_get_tx_queue(netdev,0U)) != 0) 
        #line 3271 
        writel(tx_ring->next_to_use,(void *)(hw->hw_addr + (unsigned long)tx_ring->tdt));
    }
    else 
         #line 3271 
         writel(tx_ring->next_to_use,(void *)(hw->hw_addr + (unsigned long)tx_ring->tdt));
  }
  else {
    #line 3274 
    dev_kfree_skb_any(skb);
    #line 3275 
    (tx_ring->buffer_info + (unsigned long)first)->time_stamp = 0UL;
    #line 3276 
    tx_ring->next_to_use = first;
  }
  #line 3279 
  return NETDEV_TX_OK;
}

#line 3283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_regdump(struct e1000_adapter *adapter)
{
  #line 3286 
  u32 regs[38U];
  #line 3306 
  unsigned int tmp;
  #line 3307 
  unsigned int tmp_0;
  #line 3308 
  unsigned int tmp_1;
  #line 3309 
  unsigned int tmp_2;
  #line 3312 
  unsigned int tmp_3;
  #line 3313 
  unsigned int tmp_4;
  #line 3314 
  unsigned int tmp_5;
  #line 3315 
  unsigned int tmp_6;
  #line 3316 
  unsigned int tmp_7;
  #line 3317 
  unsigned int tmp_8;
  #line 3331 
  unsigned int tmp_9;
  #line 3332 
  unsigned int tmp_10;
  #line 3333 
  unsigned int tmp_11;
  #line 3334 
  unsigned int tmp_12;
  #line 3285 
  struct e1000_hw *hw = & adapter->hw;
  #line 3287 
  u32 *regs_buff = (u32 *)(& regs);
  #line 3288 
  int i = 0;
  #line 3290 
  char *reg_name[38U] = {(char *)"CTRL", (char *)"STATUS", (char *)"RCTL", (char *)"RDLEN", (char *)"RDH", (char *)"RDT", (char *)"RDTR", (char *)"TCTL", (char *)"TDBAL", (char *)"TDBAH", (char *)"TDLEN", (char *)"TDH", (char *)"TDT", (char *)"TIDV", (char *)"TXDCTL", (char *)"TADV", (char *)"TARC0", (char *)"TDBAL1", (char *)"TDBAH1", (char *)"TDLEN1", (char *)"TDH1", (char *)"TDT1", (char *)"TXDCTL1", (char *)"TARC1", (char *)"CTRL_EXT", (char *)"ERT", (char *)"RDBAL", (char *)"RDBAH", (char *)"TDFH", (char *)"TDFT", (char *)"TDFHS", (char *)"TDFTS", (char *)"TDFPC", (char *)"RDFH", (char *)"RDFT", (char *)"RDFHS", (char *)"RDFTS", (char *)"RDFPC"};
  #line 3302 
  *regs_buff = readl((void *)hw->hw_addr);
  #line 3303 
  *(regs_buff + 1U) = readl((void *)(hw->hw_addr + 8U));
  #line 3305 
  *(regs_buff + 2U) = readl((void *)(hw->hw_addr + 256U));
  #line 3306 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3306 
                                      tmp = 10248U; else 
                                                         #line 3306 
                                                         tmp = 280U;
  #line 3306 
  ;
  #line 3306 
  *(regs_buff + 3U) = readl((void *)(hw->hw_addr + tmp));
  #line 3307 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3307 
                                      tmp_0 = 10256U; else 
                                                           #line 3307 
                                                           tmp_0 = 288U;
  #line 3307 
  ;
  #line 3307 
  *(regs_buff + 4U) = readl((void *)(hw->hw_addr + tmp_0));
  #line 3308 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3308 
                                      tmp_1 = 10264U; else 
                                                           #line 3308 
                                                           tmp_1 = 296U;
  #line 3308 
  ;
  #line 3308 
  *(regs_buff + 5U) = readl((void *)(hw->hw_addr + tmp_1));
  #line 3309 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3309 
                                      tmp_2 = 10272U; else 
                                                           #line 3309 
                                                           tmp_2 = 264U;
  #line 3309 
  ;
  #line 3309 
  *(regs_buff + 6U) = readl((void *)(hw->hw_addr + tmp_2));
  #line 3311 
  *(regs_buff + 7U) = readl((void *)(hw->hw_addr + 1024U));
  #line 3312 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3312 
                                      tmp_3 = 14336U; else 
                                                           #line 3312 
                                                           tmp_3 = 1056U;
  #line 3312 
  ;
  #line 3312 
  *(regs_buff + 8U) = readl((void *)(hw->hw_addr + tmp_3));
  #line 3313 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3313 
                                      tmp_4 = 14340U; else 
                                                           #line 3313 
                                                           tmp_4 = 1060U;
  #line 3313 
  ;
  #line 3313 
  *(regs_buff + 9U) = readl((void *)(hw->hw_addr + tmp_4));
  #line 3314 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3314 
                                      tmp_5 = 14344U; else 
                                                           #line 3314 
                                                           tmp_5 = 1064U;
  #line 3314 
  ;
  #line 3314 
  *(regs_buff + 10U) = readl((void *)(hw->hw_addr + tmp_5));
  #line 3315 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3315 
                                      tmp_6 = 14352U; else 
                                                           #line 3315 
                                                           tmp_6 = 1072U;
  #line 3315 
  ;
  #line 3315 
  *(regs_buff + 11U) = readl((void *)(hw->hw_addr + tmp_6));
  #line 3316 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3316 
                                      tmp_7 = 14360U; else 
                                                           #line 3316 
                                                           tmp_7 = 1080U;
  #line 3316 
  ;
  #line 3316 
  *(regs_buff + 12U) = readl((void *)(hw->hw_addr + tmp_7));
  #line 3317 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3317 
                                      tmp_8 = 14368U; else 
                                                           #line 3317 
                                                           tmp_8 = 1088U;
  #line 3317 
  ;
  #line 3317 
  *(regs_buff + 13U) = readl((void *)(hw->hw_addr + tmp_8));
  #line 3318 
  *(regs_buff + 14U) = readl((void *)(hw->hw_addr + 14376U));
  #line 3319 
  *(regs_buff + 15U) = readl((void *)(hw->hw_addr + 14380U));
  #line 3320 
  *(regs_buff + 16U) = readl((void *)(hw->hw_addr + 14400U));
  #line 3322 
  *(regs_buff + 17U) = readl((void *)(hw->hw_addr + 14592U));
  #line 3323 
  *(regs_buff + 18U) = readl((void *)(hw->hw_addr + 14596U));
  #line 3324 
  *(regs_buff + 19U) = readl((void *)(hw->hw_addr + 14600U));
  #line 3325 
  *(regs_buff + 20U) = readl((void *)(hw->hw_addr + 14608U));
  #line 3326 
  *(regs_buff + 21U) = readl((void *)(hw->hw_addr + 14616U));
  #line 3327 
  *(regs_buff + 22U) = readl((void *)(hw->hw_addr + 14632U));
  #line 3328 
  *(regs_buff + 23U) = readl((void *)(hw->hw_addr + 14656U));
  #line 3329 
  *(regs_buff + 24U) = readl((void *)(hw->hw_addr + 24U));
  #line 3330 
  *(regs_buff + 25U) = readl((void *)(hw->hw_addr + 8200U));
  #line 3331 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3331 
                                      tmp_9 = 10240U; else 
                                                           #line 3331 
                                                           tmp_9 = 272U;
  #line 3331 
  ;
  #line 3331 
  *(regs_buff + 26U) = readl((void *)(hw->hw_addr + tmp_9));
  #line 3332 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3332 
                                      tmp_10 = 10244U; else 
                                                            #line 3332 
                                                            tmp_10 = 276U;
  #line 3332 
  ;
  #line 3332 
  *(regs_buff + 27U) = readl((void *)(hw->hw_addr + tmp_10));
  #line 3333 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3333 
                                      tmp_11 = 13328U; else 
                                                            #line 3333 
                                                            tmp_11 = 32784U;
  #line 3333 
  ;
  #line 3333 
  *(regs_buff + 28U) = readl((void *)(hw->hw_addr + tmp_11));
  #line 3334 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 3334 
                                      tmp_12 = 13336U; else 
                                                            #line 3334 
                                                            tmp_12 = 32792U;
  #line 3334 
  ;
  #line 3334 
  *(regs_buff + 29U) = readl((void *)(hw->hw_addr + tmp_12));
  #line 3335 
  *(regs_buff + 30U) = readl((void *)(hw->hw_addr + 13344U));
  #line 3336 
  *(regs_buff + 31U) = readl((void *)(hw->hw_addr + 13352U));
  #line 3337 
  *(regs_buff + 32U) = readl((void *)(hw->hw_addr + 13360U));
  #line 3338 
  *(regs_buff + 33U) = readl((void *)(hw->hw_addr + 9232U));
  #line 3339 
  *(regs_buff + 34U) = readl((void *)(hw->hw_addr + 9240U));
  #line 3340 
  *(regs_buff + 35U) = readl((void *)(hw->hw_addr + 9248U));
  #line 3341 
  *(regs_buff + 36U) = readl((void *)(hw->hw_addr + 9256U));
  #line 3342 
  *(regs_buff + 37U) = readl((void *)(hw->hw_addr + 9264U));
  #line 3344 
  printk((char *)"\001");
  #line 3345 
  i = 0;
  #line 3345 
  while (i <= 37) {
    #line 3346 
    printk((char *)"\001",reg_name[i],*(regs_buff + (unsigned long)i));
    #line 3345 
    i ++;
  }
  #line 3347 
  return;
}

#line 3352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_dump(struct e1000_adapter *adapter)
{
  #line 3357 
  int i;
  #line 3355 
  struct e1000_tx_ring *tx_ring = adapter->tx_ring;
  #line 3356 
  struct e1000_rx_ring *rx_ring = adapter->rx_ring;
  #line 3359 
  if ((adapter->msg_enable & 8192) == 0) 
                                         #line 3360 
                                         return;
  #line 3363 
  e1000_regdump(adapter);
  #line 3366 
  printk((char *)"\001");
  #line 3395 
  printk((char *)"\001");
  #line 3396 
  printk((char *)"\001");
  #line 3398 
  if ((adapter->msg_enable & 1024) == 0) 
                                         #line 3399 
                                         goto rx_ring_summary;
  #line 3401 
  i = 0;
  #line 3401 
  while (tx_ring->desc != (void *)0 && tx_ring->count > (unsigned int)i) {
    {
      #line 3406 
      char *type;
      #line 3417 
      int tmp;
      #line 3402 
      struct e1000_tx_desc *tx_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)i;
      #line 3403 
      struct e1000_tx_buffer *buffer_info = tx_ring->buffer_info + (unsigned long)i;
      #line 3405 
      struct my_u *u = (struct my_u *)tx_desc;
      #line 3408 
      if (tx_ring->next_to_use == (unsigned int)i && tx_ring->next_to_clean == (unsigned int)i) 
        #line 3409 
        type = (char *)"NTC/U";
      else 
        #line 3410 
        if (tx_ring->next_to_use == (unsigned int)i) 
                                                     #line 3411 
                                                     type = (char *)"NTU";
        else 
          #line 3412 
          if (tx_ring->next_to_clean == (unsigned int)i) 
                                                         #line 3413 
                                                         type = (char *)"NTC"; else 
                                                                    #line 3415 
                                                                    type = (char *)"";
      #line 3417 
      ;
      #line 3417 
      ;
      #line 3417 
      ;
      #line 3417 
      ;
      #line 3417 
      ;
      #line 3417 
      ;
      #line 3417 
      ;
      #line 3417 
      ;
      #line 3417 
      ;
      #line 3417 
      if ((u->b & 1048576ULL) != 0ULL) 
                                       #line 3417 
                                       tmp = 100; else 
                                                       #line 3417 
                                                       tmp = 99;
      #line 3417 
      printk((char *)"\001",tmp,i,u->a,u->b,buffer_info->dma,(int)buffer_info->length,(int)buffer_info->next_to_watch,(unsigned long long)buffer_info->time_stamp,buffer_info->skb,type);
    }
    #line 3401 
    i ++;
  }
  #line 3425 
  rx_ring_summary: 
                   #line 3425 
  ;
  #line 3427 
  printk((char *)"\001");
  #line 3438 
  printk((char *)"\001");
  #line 3440 
  if ((adapter->msg_enable & 2048) == 0) 
                                         #line 3441 
                                         goto exit;
  #line 3443 
  i = 0;
  #line 3443 
  while (rx_ring->desc != (void *)0 && rx_ring->count > (unsigned int)i) {
    {
      #line 3448 
      char *type_0;
      #line 3444 
      struct e1000_rx_desc *rx_desc = (struct e1000_rx_desc *)rx_ring->desc + (unsigned long)i;
      #line 3445 
      struct e1000_rx_buffer *buffer_info_0 = rx_ring->buffer_info + (unsigned long)i;
      #line 3447 
      struct my_u_0 *u_0 = (struct my_u_0 *)rx_desc;
      #line 3450 
      if (rx_ring->next_to_use == (unsigned int)i) 
                                                   #line 3451 
                                                   type_0 = (char *)"NTU";
      else 
        #line 3452 
        if (rx_ring->next_to_clean == (unsigned int)i) 
                                                       #line 3453 
                                                       type_0 = (char *)"NTC"; else 
                                                                    #line 3455 
                                                                    type_0 = (char *)"";
      #line 3457 
      printk((char *)"\001",i,u_0->a,u_0->b,buffer_info_0->dma,buffer_info_0->rxbuf.data,type_0);
    }
    #line 3443 
    i ++;
  }
  #line 3464 
  printk((char *)"\001");
  #line 3465 
  i = 24576;
  #line 3465 
  while (i <= 25599) {
    #line 3466 
    ;
    #line 3466 
    printk((char *)"\001",i,readl((void *)(adapter->hw.hw_addr + ((unsigned long)i + (unsigned long)4U))),readl((void *)(adapter->hw.hw_addr + (unsigned long)i)),readl((void *)(adapter->hw.hw_addr + ((unsigned long)i + (unsigned long)12U))),readl((void *)(adapter->hw.hw_addr + ((unsigned long)i + (unsigned long)8U))));
    #line 3465 
    i += 16;
  }
  #line 3474 
  printk((char *)"\001");
  #line 3475 
  i = 28672;
  #line 3475 
  while (i <= 29695) {
    #line 3476 
    ;
    #line 3476 
    printk((char *)"\001",i,readl((void *)(adapter->hw.hw_addr + ((unsigned long)i + (unsigned long)4U))),readl((void *)(adapter->hw.hw_addr + (unsigned long)i)),readl((void *)(adapter->hw.hw_addr + ((unsigned long)i + (unsigned long)12U))),readl((void *)(adapter->hw.hw_addr + ((unsigned long)i + (unsigned long)8U))));
    #line 3475 
    i += 16;
  }
  #line 3483 
  exit: 
        #line 3483 
  ;
  #line 3484 
  return;
}

#line 3491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_tx_timeout(struct net_device *netdev)
{
  #line 3493 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 3496 
  (adapter->tx_timeout_count) ++;
  #line 3497 
  cif_schedule_work(& adapter->reset_task);
  #line 3498 
  return;
}

#line 3500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_reset_task(struct work_struct *work)
{
  #line 3503 
  void *__mptr;
  #line 3503 
  __mptr = (void *)work;
  #line 3502 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709549368U));
  #line 3505 
  if ((adapter->msg_enable & 1) != 0) 
                                      #line 3505 
                                      netdev_err(adapter->netdev,(char *)"Reset adapter\n");
  #line 3506 
  e1000_reinit_locked(adapter);
  #line 3507 
  return;
}

#line 3516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_change_mtu(struct net_device *netdev, int new_mtu)
{
  #line 3518 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 3519 
  struct e1000_hw *hw = & adapter->hw;
  #line 3520 
  int max_frame = new_mtu + 18;
  #line 3523 
  switch ((unsigned int)hw->mac_type) {
    #line 3524 
    case 0U: 
             #line 3524 
    case 1U: 
             #line 3524 
    case 2U: 
             #line 3524 
    ;
    #line 3525 
    if (max_frame > 1518) {
      #line 3526 
      if ((adapter->msg_enable & 2) != 0) 
                                          #line 3526 
                                          netdev_err(adapter->netdev,(char *)"Jumbo Frames not supported.\n");
      #line 3527 
      return -22;
    }
    #line 3529 
    break;
    #line 3530 
    default: 
             #line 3530 
    ;
    #line 3532 
    break;
  }
  #line 3535 
  while (1) {
    #line 3535 
    if (! ((int)test_and_set_bit(1L,& adapter->flags) != 0)) 
                                                             #line 3535 
                                                             break;
    #line 3536 
    msleep(1U);
  }
  #line 3538 
  hw->max_frame_size = (unsigned int)max_frame;
  #line 3539 
  if ((int)netif_running(netdev) != 0) {
    #line 3541 
    adapter->alloc_rx_buf = & e1000_alloc_dummy_rx_buffers;
    #line 3542 
    e1000_down(adapter);
  }
  #line 3553 
  if (max_frame <= 2048) 
                         #line 3554 
                         adapter->rx_buffer_len = 2048U; else 
                                                              #line 3559 
                                                              adapter->rx_buffer_len = 4096U;
  #line 3563 
  if (! hw->tbi_compatibility_on && (max_frame == 1518 || max_frame == 1522)) 
    #line 3566 
    adapter->rx_buffer_len = 1522U;
  {
    #line 3568 
    bool branch;
    #line 3568 
    struct _ddebug __UNIQUE_ID_ddebug568 = {.modname = (char *)"e1000", .function = (char *)"e1000_change_mtu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c", .format = (char *)"changing MTU from %d to %d\n", .lineno = (unsigned int)3568U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3568 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug568.key.dd_key_false.key,(_Bool)0);
    #line 3568 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 3568 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug568,netdev,(char *)"changing MTU from %d to %d\n",netdev->mtu,new_mtu);
  }
  #line 3570 
  netdev->mtu = (unsigned int)new_mtu;
  #line 3572 
  if ((int)netif_running(netdev) != 0) 
                                       #line 3573 
                                       e1000_up(adapter); else 
                                                               #line 3575 
                                                               e1000_reset(adapter);
  #line 3577 
  cif_clear_bit_0(1L,& adapter->flags);
  #line 3579 
  return 0;
}

#line 3586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_update_stats(struct e1000_adapter *adapter)
{
  #line 3591 
  unsigned long flags;
  #line 3592 
  u16 phy_tmp;
  #line 3588 
  struct net_device *netdev = adapter->netdev;
  #line 3589 
  struct e1000_hw *hw = & adapter->hw;
  #line 3590 
  struct pci_dev *pdev = adapter->pdev;
  #line 3599 
  if ((unsigned int)adapter->link_speed == 0U) 
                                               #line 3600 
                                               return;
  #line 3601 
  if (pci_channel_offline(pdev) != 0) 
                                      #line 3602 
                                      return;
  #line 3604 
  cif___ldv_spin_lock_stats_lock_of_e1000_adapter(& adapter->stats_lock);
  #line 3611 
  adapter->stats.crcerrs += (unsigned long long)readl((void *)(hw->hw_addr + 16384U));
  #line 3612 
  adapter->stats.gprc += (unsigned long long)readl((void *)(hw->hw_addr + 16500U));
  #line 3613 
  adapter->stats.gorcl += (unsigned long long)readl((void *)(hw->hw_addr + 16520U));
  #line 3614 
  adapter->stats.gorch += (unsigned long long)readl((void *)(hw->hw_addr + 16524U));
  #line 3615 
  adapter->stats.bprc += (unsigned long long)readl((void *)(hw->hw_addr + 16504U));
  #line 3616 
  adapter->stats.mprc += (unsigned long long)readl((void *)(hw->hw_addr + 16508U));
  #line 3617 
  adapter->stats.roc += (unsigned long long)readl((void *)(hw->hw_addr + 16556U));
  #line 3619 
  adapter->stats.prc64 += (unsigned long long)readl((void *)(hw->hw_addr + 16476U));
  #line 3620 
  adapter->stats.prc127 += (unsigned long long)readl((void *)(hw->hw_addr + 16480U));
  #line 3621 
  adapter->stats.prc255 += (unsigned long long)readl((void *)(hw->hw_addr + 16484U));
  #line 3622 
  adapter->stats.prc511 += (unsigned long long)readl((void *)(hw->hw_addr + 16488U));
  #line 3623 
  adapter->stats.prc1023 += (unsigned long long)readl((void *)(hw->hw_addr + 16492U));
  #line 3624 
  adapter->stats.prc1522 += (unsigned long long)readl((void *)(hw->hw_addr + 16496U));
  #line 3626 
  adapter->stats.symerrs += (unsigned long long)readl((void *)(hw->hw_addr + 16392U));
  #line 3627 
  adapter->stats.mpc += (unsigned long long)readl((void *)(hw->hw_addr + 16400U));
  #line 3628 
  adapter->stats.scc += (unsigned long long)readl((void *)(hw->hw_addr + 16404U));
  #line 3629 
  adapter->stats.ecol += (unsigned long long)readl((void *)(hw->hw_addr + 16408U));
  #line 3630 
  adapter->stats.mcc += (unsigned long long)readl((void *)(hw->hw_addr + 16412U));
  #line 3631 
  adapter->stats.latecol += (unsigned long long)readl((void *)(hw->hw_addr + 16416U));
  #line 3632 
  adapter->stats.dc += (unsigned long long)readl((void *)(hw->hw_addr + 16432U));
  #line 3633 
  adapter->stats.sec += (unsigned long long)readl((void *)(hw->hw_addr + 16440U));
  #line 3634 
  adapter->stats.rlec += (unsigned long long)readl((void *)(hw->hw_addr + 16448U));
  #line 3635 
  adapter->stats.xonrxc += (unsigned long long)readl((void *)(hw->hw_addr + 16456U));
  #line 3636 
  adapter->stats.xontxc += (unsigned long long)readl((void *)(hw->hw_addr + 16460U));
  #line 3637 
  adapter->stats.xoffrxc += (unsigned long long)readl((void *)(hw->hw_addr + 16464U));
  #line 3638 
  adapter->stats.xofftxc += (unsigned long long)readl((void *)(hw->hw_addr + 16468U));
  #line 3639 
  adapter->stats.fcruc += (unsigned long long)readl((void *)(hw->hw_addr + 16472U));
  #line 3640 
  adapter->stats.gptc += (unsigned long long)readl((void *)(hw->hw_addr + 16512U));
  #line 3641 
  adapter->stats.gotcl += (unsigned long long)readl((void *)(hw->hw_addr + 16528U));
  #line 3642 
  adapter->stats.gotch += (unsigned long long)readl((void *)(hw->hw_addr + 16532U));
  #line 3643 
  adapter->stats.rnbc += (unsigned long long)readl((void *)(hw->hw_addr + 16544U));
  #line 3644 
  adapter->stats.ruc += (unsigned long long)readl((void *)(hw->hw_addr + 16548U));
  #line 3645 
  adapter->stats.rfc += (unsigned long long)readl((void *)(hw->hw_addr + 16552U));
  #line 3646 
  adapter->stats.rjc += (unsigned long long)readl((void *)(hw->hw_addr + 16560U));
  #line 3647 
  adapter->stats.torl += (unsigned long long)readl((void *)(hw->hw_addr + 16576U));
  #line 3648 
  adapter->stats.torh += (unsigned long long)readl((void *)(hw->hw_addr + 16580U));
  #line 3649 
  adapter->stats.totl += (unsigned long long)readl((void *)(hw->hw_addr + 16584U));
  #line 3650 
  adapter->stats.toth += (unsigned long long)readl((void *)(hw->hw_addr + 16588U));
  #line 3651 
  adapter->stats.tpr += (unsigned long long)readl((void *)(hw->hw_addr + 16592U));
  #line 3653 
  adapter->stats.ptc64 += (unsigned long long)readl((void *)(hw->hw_addr + 16600U));
  #line 3654 
  adapter->stats.ptc127 += (unsigned long long)readl((void *)(hw->hw_addr + 16604U));
  #line 3655 
  adapter->stats.ptc255 += (unsigned long long)readl((void *)(hw->hw_addr + 16608U));
  #line 3656 
  adapter->stats.ptc511 += (unsigned long long)readl((void *)(hw->hw_addr + 16612U));
  #line 3657 
  adapter->stats.ptc1023 += (unsigned long long)readl((void *)(hw->hw_addr + 16616U));
  #line 3658 
  adapter->stats.ptc1522 += (unsigned long long)readl((void *)(hw->hw_addr + 16620U));
  #line 3660 
  adapter->stats.mptc += (unsigned long long)readl((void *)(hw->hw_addr + 16624U));
  #line 3661 
  adapter->stats.bptc += (unsigned long long)readl((void *)(hw->hw_addr + 16628U));
  #line 3665 
  hw->tx_packet_delta = readl((void *)(hw->hw_addr + 16596U));
  #line 3666 
  adapter->stats.tpt += (unsigned long long)hw->tx_packet_delta;
  #line 3667 
  hw->collision_delta = readl((void *)(hw->hw_addr + 16424U));
  #line 3668 
  adapter->stats.colc += (unsigned long long)hw->collision_delta;
  #line 3670 
  if (hw->mac_type > (unsigned int)2) {
    #line 3671 
    adapter->stats.algnerrc += (unsigned long long)readl((void *)(hw->hw_addr + 16388U));
    #line 3672 
    adapter->stats.rxerrc += (unsigned long long)readl((void *)(hw->hw_addr + 16396U));
    #line 3673 
    adapter->stats.tncrs += (unsigned long long)readl((void *)(hw->hw_addr + 16436U));
    #line 3674 
    adapter->stats.cexterr += (unsigned long long)readl((void *)(hw->hw_addr + 16444U));
    #line 3675 
    adapter->stats.tsctc += (unsigned long long)readl((void *)(hw->hw_addr + 16632U));
    #line 3676 
    adapter->stats.tsctfc += (unsigned long long)readl((void *)(hw->hw_addr + 16636U));
  }
  #line 3680 
  netdev->stats.multicast = (unsigned long)adapter->stats.mprc;
  #line 3681 
  netdev->stats.collisions = (unsigned long)adapter->stats.colc;
  #line 3688 
  netdev->stats.rx_errors = (unsigned long)(((((adapter->stats.rxerrc + adapter->stats.crcerrs) + adapter->stats.algnerrc) + adapter->stats.ruc) + adapter->stats.roc) + adapter->stats.cexterr);
  #line 3692 
  adapter->stats.rlerrc = adapter->stats.ruc + adapter->stats.roc;
  #line 3693 
  netdev->stats.rx_length_errors = (unsigned long)adapter->stats.rlerrc;
  #line 3694 
  netdev->stats.rx_crc_errors = (unsigned long)adapter->stats.crcerrs;
  #line 3695 
  netdev->stats.rx_frame_errors = (unsigned long)adapter->stats.algnerrc;
  #line 3696 
  netdev->stats.rx_missed_errors = (unsigned long)adapter->stats.mpc;
  #line 3699 
  adapter->stats.txerrc = adapter->stats.ecol + adapter->stats.latecol;
  #line 3700 
  netdev->stats.tx_errors = (unsigned long)adapter->stats.txerrc;
  #line 3701 
  netdev->stats.tx_aborted_errors = (unsigned long)adapter->stats.ecol;
  #line 3702 
  netdev->stats.tx_window_errors = (unsigned long)adapter->stats.latecol;
  #line 3703 
  netdev->stats.tx_carrier_errors = (unsigned long)adapter->stats.tncrs;
  #line 3704 
  if ((int)hw->bad_tx_carr_stats_fd != 0 && (unsigned int)adapter->link_duplex == 2U) {
    #line 3706 
    netdev->stats.tx_carrier_errors = 0UL;
    #line 3707 
    adapter->stats.tncrs = 0ULL;
  }
  #line 3713 
  if (hw->media_type == (unsigned int)0) {
    #line 3714 
    if ((unsigned int)adapter->link_speed == 1000U) {
      #line 3714 
      if (e1000_read_phy_reg(hw,10U,& phy_tmp) == 0) {
        #line 3716 
        phy_tmp = (unsigned short)((unsigned int)phy_tmp & 255U);
        #line 3717 
        adapter->phy_stats.idle_errors += (unsigned int)phy_tmp;
      }
    }
    #line 3720 
    if (hw->mac_type <= (unsigned int)8 && hw->phy_type == (unsigned int)0) {
      #line 3721 
      if (e1000_read_phy_reg(hw,21U,& phy_tmp) == 0) 
                                                     #line 3723 
                                                     adapter->phy_stats.receive_errors += (unsigned int)phy_tmp;
    }
  }
  #line 3727 
  if ((int)hw->has_smbus != 0) {
    #line 3728 
    adapter->stats.mgptc += (unsigned long long)readl((void *)(hw->hw_addr + 16572U));
    #line 3729 
    adapter->stats.mgprc += (unsigned long long)readl((void *)(hw->hw_addr + 16564U));
    #line 3730 
    adapter->stats.mgpdc += (unsigned long long)readl((void *)(hw->hw_addr + 16568U));
  }
  #line 3733 
  cif_spin_unlock_irqrestore_stats_lock_of_e1000_adapter(& adapter->stats_lock,flags);
  #line 3734 
  return;
}

#line 3741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static irqreturn_t e1000_intr(int irq, void *data)
{
  #line 3743 
  struct net_device *netdev = (struct net_device *)data;
  #line 3744 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 3745 
  struct e1000_hw *hw = & adapter->hw;
  #line 3746 
  u32 icr = readl((void *)(hw->hw_addr + 192U));
  #line 3748 
  if ((long)(icr == 0U) != 0L) 
                               #line 3749 
                               return IRQ_NONE;
  #line 3755 
  if ((long)((int)test_bit(2L,& adapter->flags) != 0) != 0L) 
                                                             #line 3756 
                                                             return IRQ_HANDLED;
  #line 3758 
  if ((long)((icr & 12U) != 0U) != 0L) {
    #line 3759 
    hw->get_link_status = (_Bool)1;
    #line 3761 
    if (! test_bit(2L,& adapter->flags)) 
                                         #line 3762 
                                         cif_schedule_delayed_work(& adapter->watchdog_task,1UL);
  }
  #line 3766 
  writel(4294967295U,(void *)(hw->hw_addr + 216U));
  #line 3767 
  readl((void *)(hw->hw_addr + 8U));
  #line 3769 
  if ((long)((int)napi_schedule_prep(& adapter->napi) != 0) != 0L) {
    #line 3770 
    adapter->total_tx_bytes = 0U;
    #line 3771 
    adapter->total_tx_packets = 0U;
    #line 3772 
    adapter->total_rx_bytes = 0U;
    #line 3773 
    adapter->total_rx_packets = 0U;
    #line 3774 
    __napi_schedule(& adapter->napi);
  }
  else {
    #line 3779 
    if (! test_bit(2L,& adapter->flags)) 
                                         #line 3780 
                                         e1000_irq_enable(adapter);
  }
  #line 3783 
  return IRQ_HANDLED;
}

#line 3790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_clean(struct napi_struct *napi, int budget)
{
  #line 3792 
  void *__mptr;
  #line 3792 
  __mptr = (void *)napi;
  #line 3792 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709550856U));
  #line 3794 
  int tx_clean_complete = 0;
  #line 3794 
  int work_done = 0;
  #line 3796 
  tx_clean_complete = (int)e1000_clean_tx_irq(adapter,adapter->tx_ring);
  #line 3798 
  (*(adapter->clean_rx))(adapter,adapter->rx_ring,& work_done,budget);
  #line 3800 
  if (tx_clean_complete == 0 || work_done == budget) 
                                                     #line 3801 
                                                     return budget;
  #line 3806 
  if ((long)((int)napi_complete_done(napi,work_done) != 0) != 0L) {
    #line 3807 
    if ((long)((adapter->itr_setting & 3U) != 0U) != 0L) 
                                                         #line 3808 
                                                         e1000_set_itr(adapter);
    #line 3809 
    if (! test_bit(2L,& adapter->flags)) 
                                         #line 3810 
                                         e1000_irq_enable(adapter);
  }
  #line 3813 
  return work_done;
}

#line 3820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static bool e1000_clean_tx_irq(struct e1000_adapter *adapter, struct e1000_tx_ring *tx_ring)
{
  #line 3825 
  struct e1000_tx_desc *tx_desc;
  #line 3825 
  struct e1000_tx_desc *eop_desc;
  #line 3826 
  struct e1000_tx_buffer *buffer_info;
  #line 3827 
  unsigned int i;
  #line 3827 
  unsigned int eop;
  #line 3873 
  int tmp_2;
  #line 3823 
  struct e1000_hw *hw = & adapter->hw;
  #line 3824 
  struct net_device *netdev = adapter->netdev;
  #line 3828 
  unsigned int count = 0U;
  #line 3829 
  unsigned int total_tx_bytes = 0U;
  #line 3829 
  unsigned int total_tx_packets = 0U;
  #line 3830 
  unsigned int bytes_compl = 0U;
  #line 3830 
  unsigned int pkts_compl = 0U;
  #line 3832 
  i = tx_ring->next_to_clean;
  #line 3833 
  eop = (unsigned int)(tx_ring->buffer_info + (unsigned long)i)->next_to_watch;
  #line 3834 
  eop_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)eop;
  #line 3836 
  while ((eop_desc->upper.data & 1U) != 0U && tx_ring->count > count) {
    #line 3838 
    bool cleaned = (_Bool)0;
    #line 3839 
    ldv_inline_asm();
    #line 3840 
    while (! cleaned) {
      #line 3841 
      tx_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)i;
      #line 3842 
      buffer_info = tx_ring->buffer_info + (unsigned long)i;
      #line 3843 
      cleaned = (_Bool)(i == eop);
      #line 3845 
      if ((int)cleaned != 0) {
        #line 3846 
        total_tx_packets = (unsigned int)buffer_info->segs + total_tx_packets;
        #line 3847 
        total_tx_bytes = buffer_info->bytecount + total_tx_bytes;
        #line 3848 
        if (buffer_info->skb != (struct sk_buff *)0) {
          #line 3849 
          bytes_compl = (buffer_info->skb)->len + bytes_compl;
          #line 3850 
          pkts_compl ++;
        }
      }
      #line 3854 
      e1000_unmap_and_free_tx_resource(adapter,buffer_info);
      #line 3855 
      tx_desc->upper.data = 0U;
      #line 3857 
      i ++;
      #line 3857 
      ;
      #line 3857 
      if ((long)(i == tx_ring->count) != 0L) 
                                             #line 3858 
                                             i = 0U;
      #line 3840 
      count ++;
    }
    #line 3861 
    eop = (unsigned int)(tx_ring->buffer_info + (unsigned long)i)->next_to_watch;
    #line 3862 
    eop_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)eop;
  }
  #line 3870 
  ldv_inline_asm();
  {
    #line 3869 
    union __anonunion___u_2035 __u = {.__val = i};
    #line 3868 
    __write_once_size((void *)(& tx_ring->next_to_clean),(void *)(& __u.__c),4);
    #line 3868 
    unsigned int tmp = __u.__val;
  }
  #line 3870 
  netdev_completed_queue(netdev,pkts_compl,bytes_compl);
  #line 3873 
  if ((long)(count != 0U) != 0L) {
    #line 3873 
    if ((long)((int)netif_carrier_ok(netdev) != 0) != 0L) 
                                                          #line 3873 
                                                          tmp_2 = 1; else 
                                                                    #line 3873 
                                                                    tmp_2 = 0;
  }
  else 
       #line 3873 
       tmp_2 = 0;
  #line 3873 
  if (tmp_2 != 0) {
    #line 3873 
    unsigned int use;
    #line 3873 
    unsigned int tmp_6;
    #line 3873 
    unsigned int clean;
    {
      #line 3874 
      union __anonunion___u_2039 __u_1;
      #line 3873 
      unsigned int ___p1;
      {
        #line 3874 
        union __anonunion___u_2037 __u_0;
        #line 3873 
        __read_once_size((void *)(& tx_ring->next_to_clean),(void *)(& __u_0.__c),4);
        #line 3873 
        ___p1 = (__u_0.__val);
        #line 3876 
        ldv_inline_asm();
        }
      #line 3873 
      clean = ___p1;
      #line 3873 
      __read_once_size((void *)(& tx_ring->next_to_use),(void *)(& __u_1.__c),4);
      #line 3873 
      use = (__u_1.__val);
      #line 3873 
      if (clean <= use) 
                        #line 3873 
                        tmp_6 = tx_ring->count; else 
                                                     #line 3873 
                                                     tmp_6 = 0U;
      #line 3873 
      ;
      }
    #line 3873 
    if ((long)((((tmp_6 + clean) - use) + 4294967295U) > 31U) != 0L) {
      #line 3875 
      ldv_inline_asm();
      #line 3880 
      if ((int)netif_queue_stopped(netdev) != 0) {
        #line 3881 
        if (! test_bit(2L,& adapter->flags)) {
          #line 3882 
          netif_wake_queue(netdev);
          #line 3883 
          (adapter->restart_queue) ++;
        }
      }
    }
  }
  #line 3887 
  if ((int)adapter->detect_tx_hung != 0) {
    #line 3891 
    adapter->detect_tx_hung = (_Bool)0;
    {
      #line 3893 
      unsigned long __dummy;
      #line 3893 
      unsigned long __dummy2;
      }
    #line 3892 
    if (1 != 0) {
      {
        #line 3893 
        unsigned long __dummy_0;
        #line 3893 
        unsigned long __dummy2_0;
        }
      #line 3893 
      if (1 != 0) 
        #line 3893 
        if ((long)(((tx_ring->buffer_info + (unsigned long)eop)->time_stamp + (unsigned long)((int)adapter->tx_timeout_factor * 250)) - jiffies) < 0L) 
          #line 3892 
          if ((tx_ring->buffer_info + (unsigned long)eop)->time_stamp != 0UL) {
            #line 3894 
            if ((readl((void *)(hw->hw_addr + 8U)) & 16U) == 0U) {
              #line 3898 
              if ((adapter->msg_enable & 1) != 0) {
                #line 3898 
                ;
                #line 3898 
                ;
                #line 3898 
                ;
                #line 3898 
                ;
                #line 3898 
                ;
                #line 3898 
                ;
                #line 3898 
                ;
                #line 3898 
                ;
                #line 3898 
                netdev_err(adapter->netdev,(char *)"Detected Tx Unit Hang\n",(unsigned long)((tx_ring - adapter->tx_ring) / 48L),readl((void *)(hw->hw_addr + (unsigned long)tx_ring->tdh)),readl((void *)(hw->hw_addr + (unsigned long)tx_ring->tdt)),tx_ring->next_to_use,tx_ring->next_to_clean,(tx_ring->buffer_info + (unsigned long)eop)->time_stamp,eop,jiffies,(int)eop_desc->upper.fields.status);
              }
              #line 3918 
              e1000_dump(adapter);
              #line 3919 
              netif_stop_queue(netdev);
            }
          }
    }
  }
  #line 3922 
  adapter->total_tx_bytes += total_tx_bytes;
  #line 3923 
  adapter->total_tx_packets += total_tx_packets;
  #line 3924 
  netdev->stats.tx_bytes += (unsigned long)total_tx_bytes;
  #line 3925 
  netdev->stats.tx_packets += (unsigned long)total_tx_packets;
  #line 3926 
  return (_Bool)(tx_ring->count > count);
}

#line 3936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_rx_checksum(struct e1000_adapter *adapter, u32 status_err, u32 csum, struct sk_buff *skb)
{
  #line 3939 
  struct e1000_hw *hw = & adapter->hw;
  #line 3940 
  u16 status = (unsigned short)status_err;
  #line 3941 
  u8 errors = (unsigned char)(status_err >> 24);
  #line 3943 
  skb_checksum_none_assert(skb);
  #line 3946 
  if ((long)(hw->mac_type <= (unsigned int)2) != 0L) 
                                                     #line 3947 
                                                     return;
  #line 3949 
  if ((long)(((int)status & 4) != 0) != 0L) 
                                            #line 3950 
                                            return;
  #line 3952 
  if ((long)(((int)errors & 32) != 0) != 0L) {
    #line 3954 
    (adapter->hw_csum_err) ++;
    #line 3955 
    return;
  }
  #line 3958 
  if (((int)status & 32) == 0) 
                               #line 3959 
                               return;
  #line 3962 
  if ((long)(((int)status & 32) != 0) != 0L) 
                                             #line 3964 
                                             skb->ip_summed = (unsigned char)1U;
  #line 3966 
  (adapter->hw_csum_good) ++;
  #line 3967 
  return;
}

#line 3972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_consume_page(struct e1000_rx_buffer *bi, struct sk_buff *skb, u16 length)
{
  #line 3975 
  bi->rxbuf.page = (struct page *)0;
  #line 3976 
  skb->len += (unsigned int)length;
  #line 3977 
  skb->data_len += (unsigned int)length;
  #line 3978 
  skb->truesize += 4096U;
  #line 3979 
  return;
}

#line 3988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_receive_skb(struct e1000_adapter *adapter, u8 status, __le16 vlan, struct sk_buff *skb)
{
  #line 3991 
  skb->protocol = eth_type_trans(skb,adapter->netdev);
  #line 3993 
  if (((int)status & 8) != 0) {
    #line 3994 
    u16 vid = (unsigned short)((unsigned int)vlan & 4095U);
    #line 3996 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
  }
  #line 3998 
  napi_gro_receive(& adapter->napi,skb);
  #line 3999 
  return;
}

#line 4009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_tbi_adjust_stats(struct e1000_hw *hw, struct e1000_hw_stats *stats, u32 frame_len, u8 *mac_addr)
{
  #line 4013 
  u64 carry_bit;
  #line 4016 
  frame_len --;
  #line 4022 
  (stats->crcerrs) --;
  #line 4024 
  (stats->gprc) ++;
  #line 4027 
  carry_bit = stats->gorcl & 2147483648ULL;
  #line 4028 
  stats->gorcl += (unsigned long long)frame_len;
  #line 4036 
  if (carry_bit != 0ULL && (stats->gorcl & 2147483648ULL) == 0ULL) 
                                                                   #line 4037 
                                                                   (stats->gorch) ++;
  #line 4042 
  if ((int)is_broadcast_ether_addr(mac_addr) != 0) 
                                                   #line 4043 
                                                   (stats->bprc) ++;
  else {
    #line 4044 
    if ((int)is_multicast_ether_addr(mac_addr) != 0) 
                                                     #line 4045 
                                                     (stats->mprc) ++;
  }
  #line 4047 
  if (hw->max_frame_size == frame_len) 
    #line 4051 
    if (stats->roc != 0ULL) 
                            #line 4052 
                            (stats->roc) --;
  #line 4058 
  if (frame_len == 64U) {
    #line 4059 
    (stats->prc64) ++;
    #line 4060 
    (stats->prc127) --;
  }
  else 
    #line 4061 
    if (frame_len == 127U) {
      #line 4062 
      (stats->prc127) ++;
      #line 4063 
      (stats->prc255) --;
    }
    else 
      #line 4064 
      if (frame_len == 255U) {
        #line 4065 
        (stats->prc255) ++;
        #line 4066 
        (stats->prc511) --;
      }
      else 
        #line 4067 
        if (frame_len == 511U) {
          #line 4068 
          (stats->prc511) ++;
          #line 4069 
          (stats->prc1023) --;
        }
        else 
          #line 4070 
          if (frame_len == 1023U) {
            #line 4071 
            (stats->prc1023) ++;
            #line 4072 
            (stats->prc1522) --;
          }
          else 
            #line 4073 
            if (frame_len == 1522U) 
                                    #line 4074 
                                    (stats->prc1522) ++;
  #line 4075 
  return;
}

#line 4078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static bool e1000_tbi_should_accept(struct e1000_adapter *adapter, u8 status, u8 errors, u32 length, u8 *data)
{
  #line 4082 
  struct e1000_hw *hw = & adapter->hw;
  #line 4083 
  u8 last_byte = *(data + ((unsigned long)length + 18446744073709551615U));
  #line 4085 
  if (((int)hw->tbi_compatibility_on != 0 && ((int)errors & 151) == 1) && (unsigned int)last_byte == 15U) {
    #line 4085 
    int tmp;
    #line 4085 
    if (((int)status & 8) != 0) 
                                #line 4085 
                                tmp = (hw->min_frame_size + 4294967292U < length && hw->max_frame_size + 1U >= length) != 0; else 
                                                                    #line 4085 
                                                                    tmp = (hw->min_frame_size < length && hw->max_frame_size + 5U >= length) != 0;
    #line 4085 
    if (tmp) {
      #line 4086 
      unsigned long irq_flags;
      #line 4088 
      cif___ldv_spin_lock_stats_lock_of_e1000_adapter(& adapter->stats_lock);
      #line 4089 
      e1000_tbi_adjust_stats(hw,& adapter->stats,length,data);
      #line 4090 
      cif_spin_unlock_irqrestore_stats_lock_of_e1000_adapter(& adapter->stats_lock,irq_flags);
      #line 4092 
      return (_Bool)1;
    }
  }
  #line 4095 
  return (_Bool)0;
}

#line 4098  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static struct sk_buff *e1000_alloc_rx_skb(struct e1000_adapter *adapter, unsigned int bufsz)
{
  #line 4101 
  struct sk_buff *skb = napi_alloc_skb(& adapter->napi,bufsz);
  #line 4103 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 4104 
                                                (adapter->alloc_rx_buff_failed) ++;
  #line 4105 
  return skb;
}

#line 4118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static bool e1000_clean_jumbo_rx_irq(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring, int *work_done, int work_to_do)
{
  #line 4297 
  unsigned int use;
  #line 4297 
  unsigned int tmp_8;
  #line 4297 
  unsigned int clean;
  #line 4124 
  struct e1000_rx_desc *rx_desc;
  #line 4124 
  struct e1000_rx_desc *next_rxd;
  #line 4125 
  struct e1000_rx_buffer *buffer_info;
  #line 4125 
  struct e1000_rx_buffer *next_buffer;
  #line 4126 
  u32 length;
  #line 4127 
  unsigned int i;
  #line 4122 
  struct net_device *netdev = adapter->netdev;
  #line 4123 
  struct pci_dev *pdev = adapter->pdev;
  #line 4128 
  int cleaned_count = 0;
  #line 4129 
  bool cleaned = (_Bool)0;
  #line 4130 
  unsigned int total_rx_bytes = 0U;
  #line 4130 
  unsigned int total_rx_packets = 0U;
  #line 4132 
  i = rx_ring->next_to_clean;
  #line 4133 
  rx_desc = (struct e1000_rx_desc *)rx_ring->desc + (unsigned long)i;
  #line 4134 
  buffer_info = rx_ring->buffer_info + (unsigned long)i;
  #line 4136 
  while (((int)rx_desc->status & 1) != 0) {
    #line 4137 
    struct sk_buff *skb;
    #line 4138 
    u8 status;
    #line 4140 
    if (*work_done >= work_to_do) 
                                  #line 4141 
                                  break;
    #line 4142 
    (*work_done) ++;
    #line 4143 
    ldv_inline_asm();
    #line 4145 
    status = rx_desc->status;
    #line 4147 
    i ++;
    #line 4147 
    ;
    #line 4147 
    if (i == rx_ring->count) 
                             #line 4148 
                             i = 0U;
    #line 4150 
    next_rxd = (struct e1000_rx_desc *)rx_ring->desc + (unsigned long)i;
    #line 4151 
    __builtin_prefetch((void const *)((void *)next_rxd));
    #line 4153 
    next_buffer = rx_ring->buffer_info + (unsigned long)i;
    #line 4155 
    cleaned = (_Bool)1;
    #line 4156 
    cleaned_count ++;
    #line 4157 
    dma_unmap_page_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 4159 
    buffer_info->dma = 0ULL;
    #line 4161 
    length = (unsigned int)rx_desc->length;
    #line 4164 
    if ((long)(((int)status & 2) != 0) != 0L && (long)(((int)rx_desc->errors & 151) != 0) != 0L) {
      #line 4166 
      u8 *mapped = lowmem_page_address(buffer_info->rxbuf.page);
      #line 4168 
      if ((int)e1000_tbi_should_accept(adapter,(unsigned char)((int)status),
                                (unsigned char)((int)rx_desc->errors),length,
                                mapped) != 0) 
        #line 4171 
        length --;
      else 
        #line 4172 
        if ((netdev->features & 8796093022208ULL) != 0ULL) 
                                                           #line 4173 
                                                           goto process_skb;
        else {
          #line 4178 
          consume_skb(rx_ring->rx_skb_top);
          #line 4179 
          rx_ring->rx_skb_top = (struct sk_buff *)0;
          #line 4180 
          goto next_desc;
        }
    }
    #line 4185 
    process_skb: 
                 #line 4185 
    ;
    #line 4186 
    if (((int)status & 2) == 0) {
      #line 4188 
      if (rx_ring->rx_skb_top == (struct sk_buff *)0) {
        #line 4190 
        rx_ring->rx_skb_top = napi_get_frags(& adapter->napi);
        #line 4191 
        if (rx_ring->rx_skb_top == (struct sk_buff *)0) 
                                                        #line 4192 
                                                        break;
        #line 4194 
        skb_fill_page_desc(rx_ring->rx_skb_top,0,buffer_info->rxbuf.page,0,(int)length);
      }
      else {
        #line 4199 
        ;
        #line 4199 
        ;
        #line 4199 
        ;
        #line 4199 
        skb_fill_page_desc(rx_ring->rx_skb_top,(int)((struct skb_shared_info *)skb_end_pointer(rx_ring->rx_skb_top))->nr_frags,buffer_info->rxbuf.page,0,(int)length);
      }
      #line 4203 
      e1000_consume_page(buffer_info,rx_ring->rx_skb_top,(unsigned short)((int)((unsigned short)length)));
      #line 4204 
      goto next_desc;
    }
    else 
      #line 4206 
      if (rx_ring->rx_skb_top != (struct sk_buff *)0) {
        #line 4208 
        ;
        #line 4208 
        ;
        #line 4208 
        ;
        #line 4208 
        skb_fill_page_desc(rx_ring->rx_skb_top,(int)((struct skb_shared_info *)skb_end_pointer(rx_ring->rx_skb_top))->nr_frags,buffer_info->rxbuf.page,0,(int)length);
        #line 4211 
        skb = rx_ring->rx_skb_top;
        #line 4212 
        rx_ring->rx_skb_top = (struct sk_buff *)0;
        #line 4213 
        e1000_consume_page(buffer_info,skb,(unsigned short)((int)((unsigned short)length)));
      }
      else {
        #line 4215 
        struct page *p;
        #line 4219 
        p = buffer_info->rxbuf.page;
        #line 4220 
        if (length <= copybreak) {
          #line 4221 
          u8 *vaddr;
          #line 4223 
          if ((long)((netdev->features & 4398046511104ULL) == 0ULL) != 0L) 
            #line 4224 
            length += 4294967292U;
          #line 4225 
          skb = e1000_alloc_rx_skb(adapter,length);
          #line 4227 
          if (skb == (struct sk_buff *)0) 
                                          #line 4228 
                                          break;
          #line 4230 
          vaddr = (u8 *)kmap_atomic(p);
          #line 4231 
          ;
          #line 4231 
          ;
          #line 4231 
          memcpy((void *)skb_tail_pointer(skb),(void *)vaddr,(unsigned long)length);
          #line 4233 
          __kunmap_atomic((void *)vaddr);
          #line 4237 
          skb_put(skb,length);
          #line 4238 
          e1000_rx_checksum(adapter,(unsigned int)((int)status | ((int)rx_desc->errors << 24)),(unsigned int)rx_desc->csum,skb);
          #line 4242 
          total_rx_bytes = skb->len + total_rx_bytes;
          #line 4243 
          total_rx_packets ++;
          #line 4245 
          e1000_receive_skb(adapter,(unsigned char)((int)status),(unsigned short)((int)rx_desc->special),skb);
          #line 4247 
          goto next_desc;
        }
        else {
          #line 4249 
          skb = napi_get_frags(& adapter->napi);
          #line 4250 
          if (skb == (struct sk_buff *)0) {
            #line 4251 
            (adapter->alloc_rx_buff_failed) ++;
            #line 4252 
            break;
          }
          #line 4254 
          skb_fill_page_desc(skb,0,p,0,(int)length);
          #line 4256 
          e1000_consume_page(buffer_info,skb,(unsigned short)((int)((unsigned short)length)));
        }
      }
    #line 4263 
    e1000_rx_checksum(adapter,(unsigned int)status | ((unsigned int)rx_desc->errors << 24),(unsigned int)rx_desc->csum,skb);
    #line 4268 
    total_rx_bytes = (skb->len + total_rx_bytes) + 4294967292U;
    #line 4269 
    if ((long)((netdev->features & 4398046511104ULL) == 0ULL) != 0L) 
      #line 4270 
      pskb_trim(skb,skb->len + 4294967292U);
    #line 4271 
    total_rx_packets ++;
    #line 4273 
    if (((int)status & 8) != 0) {
      #line 4274 
      __le16 vlan = rx_desc->special;
      #line 4275 
      u16 vid = (unsigned short)((unsigned int)vlan & 4095U);
      #line 4277 
      __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
    }
    #line 4280 
    napi_gro_frags(& adapter->napi);
    #line 4282 
    next_desc: 
               #line 4282 
    ;
    #line 4283 
    rx_desc->status = (unsigned char)0U;
    #line 4286 
    if ((long)(cleaned_count > 15) != 0L) {
      #line 4287 
      (*(adapter->alloc_rx_buf))(adapter,rx_ring,cleaned_count);
      #line 4288 
      cleaned_count = 0;
    }
    #line 4292 
    rx_desc = next_rxd;
    #line 4293 
    buffer_info = next_buffer;
  }
  #line 4295 
  rx_ring->next_to_clean = i;
  {
    #line 4298 
    union __anonunion___u_2043 __u_0;
    #line 4297 
    unsigned int ___p1;
    {
      #line 4298 
      union __anonunion___u_2041 __u;
      #line 4297 
      __read_once_size((void *)(& rx_ring->next_to_clean),(void *)(& __u.__c),4);
      #line 4297 
      ___p1 = (__u.__val);
      #line 4300 
      ldv_inline_asm();
      }
    #line 4297 
    clean = ___p1;
    #line 4297 
    __read_once_size((void *)(& rx_ring->next_to_use),(void *)(& __u_0.__c),4);
    #line 4297 
    use = (__u_0.__val);
    #line 4297 
    if (clean <= use) 
                      #line 4297 
                      tmp_8 = rx_ring->count; else 
                                                   #line 4297 
                                                   tmp_8 = 0U;
    #line 4297 
    ;
    }
  #line 4297 
  cleaned_count = (int)(((tmp_8 + clean) - use) + 4294967295U);
  #line 4298 
  if (cleaned_count != 0) 
                          #line 4299 
                          (*(adapter->alloc_rx_buf))(adapter,rx_ring,cleaned_count);
  #line 4301 
  adapter->total_rx_packets += total_rx_packets;
  #line 4302 
  adapter->total_rx_bytes += total_rx_bytes;
  #line 4303 
  netdev->stats.rx_bytes += (unsigned long)total_rx_bytes;
  #line 4304 
  netdev->stats.rx_packets += (unsigned long)total_rx_packets;
  #line 4305 
  return cleaned;
}

#line 4311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static struct sk_buff *e1000_copybreak(struct e1000_adapter *adapter, struct e1000_rx_buffer *buffer_info, u32 length, void *data)
{
  #line 4315 
  struct sk_buff *skb;
  #line 4317 
  if (length > copybreak) 
                          #line 4318 
                          return (struct sk_buff *)0;
  #line 4320 
  skb = e1000_alloc_rx_skb(adapter,length);
  #line 4321 
  if (skb == (struct sk_buff *)0) 
                                  #line 4322 
                                  return (struct sk_buff *)0;
  #line 4324 
  dma_sync_single_for_cpu(& (adapter->pdev)->dev,buffer_info->dma,(unsigned long)length,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 4327 
  skb_put_data(skb,data,length);
  #line 4329 
  return skb;
}

#line 4339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static bool e1000_clean_rx_irq(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring, int *work_done, int work_to_do)
{
  #line 4470 
  unsigned int clean;
  #line 4470 
  unsigned int use;
  #line 4470 
  unsigned int tmp_5;
  #line 4345 
  struct e1000_rx_desc *rx_desc;
  #line 4345 
  struct e1000_rx_desc *next_rxd;
  #line 4346 
  struct e1000_rx_buffer *buffer_info;
  #line 4346 
  struct e1000_rx_buffer *next_buffer;
  #line 4347 
  u32 length;
  #line 4348 
  unsigned int i;
  #line 4343 
  struct net_device *netdev = adapter->netdev;
  #line 4344 
  struct pci_dev *pdev = adapter->pdev;
  #line 4349 
  int cleaned_count = 0;
  #line 4350 
  bool cleaned = (_Bool)0;
  #line 4351 
  unsigned int total_rx_bytes = 0U;
  #line 4351 
  unsigned int total_rx_packets = 0U;
  #line 4353 
  i = rx_ring->next_to_clean;
  #line 4354 
  rx_desc = (struct e1000_rx_desc *)rx_ring->desc + (unsigned long)i;
  #line 4355 
  buffer_info = rx_ring->buffer_info + (unsigned long)i;
  #line 4357 
  while (((int)rx_desc->status & 1) != 0) {
    #line 4358 
    struct sk_buff *skb;
    #line 4359 
    u8 *data;
    #line 4360 
    u8 status;
    #line 4362 
    if (*work_done >= work_to_do) 
                                  #line 4363 
                                  break;
    #line 4364 
    (*work_done) ++;
    #line 4365 
    ldv_inline_asm();
    #line 4367 
    status = rx_desc->status;
    #line 4368 
    length = (unsigned int)rx_desc->length;
    #line 4370 
    data = buffer_info->rxbuf.data;
    #line 4371 
    __builtin_prefetch((void const *)((void *)data));
    #line 4372 
    skb = e1000_copybreak(adapter,buffer_info,length,(void *)data);
    #line 4373 
    if (skb == (struct sk_buff *)0) {
      #line 4374 
      unsigned int frag_len = e1000_frag_len(adapter);
      #line 4376 
      skb = build_skb((void *)(data + 18446744073709551552U),frag_len);
      #line 4377 
      if (skb == (struct sk_buff *)0) {
        #line 4378 
        (adapter->alloc_rx_buff_failed) ++;
        #line 4379 
        break;
      }
      #line 4382 
      skb_reserve(skb,64);
      #line 4383 
      dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 4386 
      buffer_info->dma = 0ULL;
      #line 4387 
      buffer_info->rxbuf.data = (u8 *)0U;
    }
    #line 4390 
    i ++;
    #line 4390 
    ;
    #line 4390 
    if (i == rx_ring->count) 
                             #line 4391 
                             i = 0U;
    #line 4393 
    next_rxd = (struct e1000_rx_desc *)rx_ring->desc + (unsigned long)i;
    #line 4394 
    __builtin_prefetch((void const *)((void *)next_rxd));
    #line 4396 
    next_buffer = rx_ring->buffer_info + (unsigned long)i;
    #line 4398 
    cleaned = (_Bool)1;
    #line 4399 
    cleaned_count ++;
    #line 4407 
    if ((long)(((int)status & 2) == 0) != 0L) 
                                              #line 4408 
                                              adapter->discarding = (_Bool)1;
    #line 4410 
    if ((int)adapter->discarding != 0) {
      {
        #line 4412 
        bool branch;
        #line 4412 
        struct _ddebug __UNIQUE_ID_ddebug573 = {.modname = (char *)"e1000", .function = (char *)"e1000_clean_rx_irq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c", .format = (char *)"Receive packet consumed multiple buffers\n", .lineno = (unsigned int)4412U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 4412 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug573.key.dd_key_false.key,(_Bool)0);
        #line 4412 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 4412 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug573,netdev,(char *)"Receive packet consumed multiple buffers\n");
      }
      #line 4413 
      consume_skb(skb);
      #line 4414 
      if (((int)status & 2) != 0) 
                                  #line 4415 
                                  adapter->discarding = (_Bool)0;
      #line 4416 
      goto next_desc;
    }
    #line 4419 
    if ((long)(((int)rx_desc->errors & 151) != 0) != 0L) {
      #line 4420 
      if ((int)e1000_tbi_should_accept(adapter,(unsigned char)((int)status),
                                (unsigned char)((int)rx_desc->errors),length,
                                data) != 0) 
        #line 4423 
        length --;
      else 
        #line 4424 
        if ((netdev->features & 8796093022208ULL) != 0ULL) 
                                                           #line 4425 
                                                           goto process_skb;
        else {
          #line 4427 
          consume_skb(skb);
          #line 4428 
          goto next_desc;
        }
    }
    #line 4432 
    process_skb: 
                 #line 4432 
    ;
    #line 4433 
    total_rx_bytes = (length + total_rx_bytes) + 4294967292U;
    #line 4434 
    total_rx_packets ++;
    #line 4436 
    if ((long)((netdev->features & 4398046511104ULL) == 0ULL) != 0L) 
      #line 4440 
      length += 4294967292U;
    #line 4442 
    if (buffer_info->rxbuf.data == (u8 *)0U) 
                                             #line 4443 
                                             skb_put(skb,length); else 
                                                                    #line 4445 
                                                                    skb_trim(skb,length);
    #line 4448 
    e1000_rx_checksum(adapter,(unsigned int)status | ((unsigned int)rx_desc->errors << 24),(unsigned int)rx_desc->csum,skb);
    #line 4453 
    e1000_receive_skb(adapter,(unsigned char)((int)status),(unsigned short)((int)rx_desc->special),skb);
    #line 4455 
    next_desc: 
               #line 4455 
    ;
    #line 4456 
    rx_desc->status = (unsigned char)0U;
    #line 4459 
    if ((long)(cleaned_count > 15) != 0L) {
      #line 4460 
      (*(adapter->alloc_rx_buf))(adapter,rx_ring,cleaned_count);
      #line 4461 
      cleaned_count = 0;
    }
    #line 4465 
    rx_desc = next_rxd;
    #line 4466 
    buffer_info = next_buffer;
  }
  #line 4468 
  rx_ring->next_to_clean = i;
  {
    #line 4470 
    unsigned int ___p1;
    #line 4471 
    union __anonunion___u_2047 __u_0;
    {
      #line 4471 
      union __anonunion___u_2045 __u;
      #line 4470 
      __read_once_size((void *)(& rx_ring->next_to_clean),(void *)(& __u.__c),4);
      #line 4470 
      ___p1 = (__u.__val);
      #line 4473 
      ldv_inline_asm();
      }
    #line 4470 
    clean = ___p1;
    #line 4470 
    __read_once_size((void *)(& rx_ring->next_to_use),(void *)(& __u_0.__c),4);
    #line 4470 
    use = (__u_0.__val);
    #line 4470 
    if (clean <= use) 
                      #line 4470 
                      tmp_5 = rx_ring->count; else 
                                                   #line 4470 
                                                   tmp_5 = 0U;
    #line 4470 
    ;
    }
  #line 4470 
  cleaned_count = (int)(((tmp_5 + clean) - use) + 4294967295U);
  #line 4471 
  if (cleaned_count != 0) 
                          #line 4472 
                          (*(adapter->alloc_rx_buf))(adapter,rx_ring,cleaned_count);
  #line 4474 
  adapter->total_rx_packets += total_rx_packets;
  #line 4475 
  adapter->total_rx_bytes += total_rx_bytes;
  #line 4476 
  netdev->stats.rx_bytes += (unsigned long)total_rx_bytes;
  #line 4477 
  netdev->stats.rx_packets += (unsigned long)total_rx_packets;
  #line 4478 
  return cleaned;
}

#line 4488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_alloc_jumbo_rx_buffers(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring, int cleaned_count)
{
  #line 4492 
  struct e1000_rx_desc *rx_desc;
  #line 4493 
  struct e1000_rx_buffer *buffer_info;
  #line 4494 
  unsigned int i;
  #line 4491 
  struct pci_dev *pdev = adapter->pdev;
  #line 4496 
  i = rx_ring->next_to_use;
  #line 4497 
  buffer_info = rx_ring->buffer_info + (unsigned long)i;
  #line 4499 
  while (1) {
    #line 4499 
    int tmp_0;
    #line 4499 
    tmp_0 = cleaned_count;
    #line 4499 
    cleaned_count --;
    #line 4499 
    ;
    #line 4499 
    if (! (tmp_0 != 0)) 
                        #line 4499 
                        break;
    #line 4501 
    if (buffer_info->rxbuf.page == (struct page *)0) {
      #line 4502 
      buffer_info->rxbuf.page = alloc_pages(2592U,0U);
      #line 4503 
      if ((long)(buffer_info->rxbuf.page == (struct page *)0) != 0L) {
        #line 4504 
        (adapter->alloc_rx_buff_failed) ++;
        #line 4505 
        break;
      }
    }
    #line 4509 
    if (buffer_info->dma == 0ULL) {
      #line 4510 
      buffer_info->dma = dma_map_page_attrs(& pdev->dev,buffer_info->rxbuf.page,0UL,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 4514 
      if (dma_mapping_error(& pdev->dev,buffer_info->dma) != 0) {
        #line 4515 
        put_page(buffer_info->rxbuf.page);
        #line 4516 
        buffer_info->rxbuf.page = (struct page *)0;
        #line 4517 
        buffer_info->dma = 0ULL;
        #line 4518 
        (adapter->alloc_rx_buff_failed) ++;
        #line 4519 
        break;
      }
    }
    #line 4523 
    rx_desc = (struct e1000_rx_desc *)rx_ring->desc + (unsigned long)i;
    #line 4524 
    rx_desc->buffer_addr = buffer_info->dma;
    #line 4526 
    i ++;
    #line 4526 
    ;
    #line 4526 
    if ((long)(i == rx_ring->count) != 0L) 
                                           #line 4527 
                                           i = 0U;
    #line 4528 
    buffer_info = rx_ring->buffer_info + (unsigned long)i;
  }
  #line 4531 
  if ((long)(rx_ring->next_to_use != i) != 0L) {
    #line 4533 
    unsigned int tmp_1;
    #line 4532 
    rx_ring->next_to_use = i;
    #line 4533 
    tmp_1 = i;
    #line 4533 
    i --;
    #line 4533 
    ;
    #line 4533 
    if ((long)(tmp_1 == 0U) != 0L) 
                                   #line 4534 
                                   i = rx_ring->count + 4294967295U;
    #line 4535 
    ldv_inline_asm();
    #line 4542 
    writel(i,(void *)(adapter->hw.hw_addr + (unsigned long)rx_ring->rdt));
  }
  #line 4544 
  return;
}

#line 4550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_alloc_rx_buffers(struct e1000_adapter *adapter, struct e1000_rx_ring *rx_ring, int cleaned_count)
{
  #line 4556 
  struct e1000_rx_desc *rx_desc;
  #line 4557 
  struct e1000_rx_buffer *buffer_info;
  #line 4558 
  unsigned int i;
  #line 4554 
  struct e1000_hw *hw = & adapter->hw;
  #line 4555 
  struct pci_dev *pdev = adapter->pdev;
  #line 4559 
  unsigned int bufsz = adapter->rx_buffer_len;
  #line 4561 
  i = rx_ring->next_to_use;
  #line 4562 
  buffer_info = rx_ring->buffer_info + (unsigned long)i;
  #line 4564 
  while (1) {
    #line 4564 
    int tmp_3;
    #line 4564 
    tmp_3 = cleaned_count;
    #line 4564 
    cleaned_count --;
    #line 4564 
    ;
    #line 4564 
    if (! (tmp_3 != 0)) 
                        #line 4564 
                        break;
    {
      #line 4565 
      void *data;
      #line 4567 
      if (buffer_info->rxbuf.data != (u8 *)0U) 
                                               #line 4568 
                                               goto skip;
      #line 4570 
      data = e1000_alloc_frag(adapter);
      #line 4571 
      if (data == (void *)0) {
        #line 4573 
        (adapter->alloc_rx_buff_failed) ++;
        #line 4574 
        break;
      }
      #line 4578 
      if (! e1000_check_64k_bound(adapter,data,(unsigned long)bufsz)) {
        #line 4579 
        void *olddata = data;
        #line 4580 
        if ((adapter->msg_enable & 64) != 0) 
                                             #line 4580 
                                             netdev_err(adapter->netdev,(char *)"skb align check failed: %u bytes at ",bufsz,data);
        #line 4583 
        data = e1000_alloc_frag(adapter);
        #line 4585 
        if (data == (void *)0) {
          #line 4586 
          skb_free_frag(olddata);
          #line 4587 
          (adapter->alloc_rx_buff_failed) ++;
          #line 4588 
          break;
        }
        #line 4591 
        if (! e1000_check_64k_bound(adapter,data,(unsigned long)bufsz)) {
          #line 4593 
          skb_free_frag(data);
          #line 4594 
          skb_free_frag(olddata);
          #line 4595 
          (adapter->alloc_rx_buff_failed) ++;
          #line 4596 
          break;
        }
        #line 4600 
        skb_free_frag(olddata);
      }
      #line 4602 
      buffer_info->dma = dma_map_single_attrs(& pdev->dev,data,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 4606 
      if (dma_mapping_error(& pdev->dev,buffer_info->dma) != 0) {
        #line 4607 
        skb_free_frag(data);
        #line 4608 
        buffer_info->dma = 0ULL;
        #line 4609 
        (adapter->alloc_rx_buff_failed) ++;
        #line 4610 
        break;
      }
      #line 4618 
      if (! e1000_check_64k_bound(adapter,(void *)buffer_info->dma,
                              (unsigned long)adapter->rx_buffer_len)) {
        #line 4621 
        if ((adapter->msg_enable & 64) != 0) 
                                             #line 4621 
                                             netdev_err(adapter->netdev,(char *)"dma align check failed: %u bytes at ",adapter->rx_buffer_len,(void *)buffer_info->dma);
        #line 4625 
        dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
        #line 4629 
        skb_free_frag(data);
        #line 4630 
        buffer_info->rxbuf.data = (u8 *)0U;
        #line 4631 
        buffer_info->dma = 0ULL;
        #line 4633 
        (adapter->alloc_rx_buff_failed) ++;
        #line 4634 
        break;
      }
      #line 4636 
      buffer_info->rxbuf.data = (u8 *)data;
      #line 4637 
      skip: 
            #line 4637 
      ;
      #line 4638 
      rx_desc = (struct e1000_rx_desc *)rx_ring->desc + (unsigned long)i;
      #line 4639 
      rx_desc->buffer_addr = buffer_info->dma;
      #line 4641 
      i ++;
      #line 4641 
      ;
      #line 4641 
      if ((long)(i == rx_ring->count) != 0L) 
                                             #line 4642 
                                             i = 0U;
      #line 4643 
      buffer_info = rx_ring->buffer_info + (unsigned long)i;
    }
  }
  #line 4646 
  if ((long)(rx_ring->next_to_use != i) != 0L) {
    #line 4648 
    unsigned int tmp_4;
    #line 4647 
    rx_ring->next_to_use = i;
    #line 4648 
    tmp_4 = i;
    #line 4648 
    i --;
    #line 4648 
    ;
    #line 4648 
    if ((long)(tmp_4 == 0U) != 0L) 
                                   #line 4649 
                                   i = rx_ring->count + 4294967295U;
    #line 4650 
    ldv_inline_asm();
    #line 4657 
    writel(i,(void *)(hw->hw_addr + (unsigned long)rx_ring->rdt));
  }
  #line 4659 
  return;
}

#line 4665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_smartspeed(struct e1000_adapter *adapter)
{
  #line 4668 
  u16 phy_status;
  #line 4669 
  u16 phy_ctrl;
  #line 4714 
  u32 tmp_3;
  #line 4667 
  struct e1000_hw *hw = & adapter->hw;
  #line 4671 
  if ((hw->phy_type != (unsigned int)1 || (unsigned int)hw->autoneg == 0U) || ((int)hw->autoneg_advertised & 32) == 0) 
    #line 4673 
    return;
  #line 4675 
  if (adapter->smartspeed == 0U) {
    #line 4679 
    e1000_read_phy_reg(hw,10U,& phy_status);
    #line 4680 
    if (((int)phy_status & 32768) == 0) 
                                        #line 4681 
                                        return;
    #line 4682 
    e1000_read_phy_reg(hw,10U,& phy_status);
    #line 4683 
    if (((int)phy_status & 32768) == 0) 
                                        #line 4684 
                                        return;
    #line 4685 
    e1000_read_phy_reg(hw,9U,& phy_ctrl);
    #line 4686 
    if (((int)phy_ctrl & 4096) != 0) {
      #line 4687 
      phy_ctrl = (unsigned short)((unsigned int)phy_ctrl & 61439U);
      #line 4688 
      e1000_write_phy_reg(hw,9U,(unsigned short)((int)phy_ctrl));
      #line 4690 
      (adapter->smartspeed) ++;
      #line 4691 
      if (e1000_phy_setup_autoneg(hw) == 0) {
        #line 4691 
        if (e1000_read_phy_reg(hw,0U,& phy_ctrl) == 0) {
          #line 4694 
          phy_ctrl = (unsigned short)((unsigned int)phy_ctrl | 4608U);
          #line 4696 
          e1000_write_phy_reg(hw,0U,(unsigned short)((int)phy_ctrl));
        }
      }
    }
    #line 4700 
    return;
  }
  else 
    #line 4701 
    if (adapter->smartspeed == 3U) {
      #line 4703 
      e1000_read_phy_reg(hw,9U,& phy_ctrl);
      #line 4704 
      phy_ctrl = (unsigned short)((unsigned int)phy_ctrl | 4096U);
      #line 4705 
      e1000_write_phy_reg(hw,9U,(unsigned short)((int)phy_ctrl));
      #line 4706 
      if (e1000_phy_setup_autoneg(hw) == 0) {
        #line 4706 
        if (e1000_read_phy_reg(hw,0U,& phy_ctrl) == 0) {
          #line 4708 
          phy_ctrl = (unsigned short)((unsigned int)phy_ctrl | 4608U);
          #line 4710 
          e1000_write_phy_reg(hw,0U,(unsigned short)((int)phy_ctrl));
        }
      }
    }
  #line 4714 
  tmp_3 = adapter->smartspeed;
  #line 4714 
  (adapter->smartspeed) ++;
  #line 4714 
  ;
  #line 4714 
  if (tmp_3 == 15U) 
                    #line 4715 
                    adapter->smartspeed = 0U;
  #line 4716 
  return;
}

#line 4724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
{
  #line 4726 
  switch (cmd) {
    #line 4727 
    case 35143: 
                #line 4727 
    ;
    #line 4728 
    case 35144: 
                #line 4728 
    ;
    #line 4729 
    case 35145: 
                #line 4729 
    ;
    #line 4730 
    return e1000_mii_ioctl(netdev,ifr,cmd);
    #line 4731 
    default: 
             #line 4731 
    ;
    #line 4732 
    return -95;
  }
}

#line 4742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_mii_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
{
  #line 4748 
  int retval;
  #line 4749 
  u16 mii_reg;
  #line 4750 
  unsigned long flags;
  #line 4745 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 4746 
  struct e1000_hw *hw = & adapter->hw;
  #line 4747 
  struct mii_ioctl_data *data = if_mii(ifr);
  #line 4752 
  if (hw->media_type != (unsigned int)0) 
                                         #line 4753 
                                         return -95;
  #line 4755 
  switch (cmd) {
    #line 4756 
    case 35143: 
                #line 4756 
    ;
    #line 4757 
    data->phy_id = (unsigned short)hw->phy_addr;
    #line 4758 
    break;
    #line 4759 
    case 35144: 
                #line 4759 
    ;
    #line 4760 
    cif___ldv_spin_lock_stats_lock_of_e1000_adapter(& adapter->stats_lock);
    #line 4761 
    if (e1000_read_phy_reg(hw,(unsigned int)data->reg_num & 31U,
                           & data->val_out) != 0) {
      #line 4763 
      cif_spin_unlock_irqrestore_stats_lock_of_e1000_adapter(& adapter->stats_lock,flags);
      #line 4764 
      return -5;
    }
    #line 4766 
    cif_spin_unlock_irqrestore_stats_lock_of_e1000_adapter(& adapter->stats_lock,flags);
    #line 4767 
    break;
    #line 4768 
    case 35145: 
                #line 4768 
    ;
    #line 4769 
    if (((int)data->reg_num & -32) != 0) 
                                         #line 4770 
                                         return -14;
    #line 4771 
    mii_reg = data->val_in;
    #line 4772 
    cif___ldv_spin_lock_stats_lock_of_e1000_adapter(& adapter->stats_lock);
    #line 4773 
    if (e1000_write_phy_reg(hw,(unsigned int)data->reg_num,
                            (unsigned short)((int)mii_reg)) != 0) {
      #line 4775 
      cif_spin_unlock_irqrestore_stats_lock_of_e1000_adapter(& adapter->stats_lock,flags);
      #line 4776 
      return -5;
    }
    #line 4778 
    cif_spin_unlock_irqrestore_stats_lock_of_e1000_adapter(& adapter->stats_lock,flags);
    #line 4779 
    if (hw->media_type == (unsigned int)0) 
      #line 4780 
      switch ((int)data->reg_num) {
        #line 4781 
        case 0: 
                #line 4781 
        ;
        #line 4782 
        if (((int)mii_reg & 2048) != 0) 
                                        #line 4783 
                                        break;
        #line 4784 
        if (((int)mii_reg & 4096) != 0) {
          #line 4785 
          hw->autoneg = (unsigned char)1U;
          #line 4786 
          hw->autoneg_advertised = (unsigned short)47U;
        }
        else {
          #line 4788 
          u32 speed;
          #line 4789 
          if (((int)mii_reg & 64) != 0) 
                                        #line 4790 
                                        speed = 1000U;
          else 
            #line 4791 
            if (((int)mii_reg & 8192) != 0) 
                                            #line 4792 
                                            speed = 100U; else 
                                                               #line 4794 
                                                               speed = 10U;
          #line 4795 
          retval = e1000_set_spd_dplx(adapter,speed,(unsigned char)((int)((unsigned char)((int)mii_reg >> 8)) & 1));
          #line 4800 
          if (retval != 0) 
                           #line 4801 
                           return retval;
        }
        #line 4803 
        if ((int)netif_running(adapter->netdev) != 0) 
                                                      #line 4804 
                                                      e1000_reinit_locked(adapter); else 
                                                                    #line 4806 
                                                                    e1000_reset(adapter);
        #line 4807 
        break;
        #line 4808 
        case 16: 
                 #line 4808 
        ;
        #line 4809 
        case 20: 
                 #line 4809 
        ;
        #line 4810 
        if (e1000_phy_reset(hw) != 0) 
                                      #line 4811 
                                      return -5;
        #line 4812 
        break;
      }
    else 
      #line 4815 
      switch ((int)data->reg_num) {
        #line 4816 
        case 0: 
                #line 4816 
        ;
        #line 4817 
        if (((int)mii_reg & 2048) != 0) 
                                        #line 4818 
                                        break;
        #line 4819 
        if ((int)netif_running(adapter->netdev) != 0) 
                                                      #line 4820 
                                                      e1000_reinit_locked(adapter); else 
                                                                    #line 4822 
                                                                    e1000_reset(adapter);
        #line 4823 
        break;
      }
    #line 4826 
    break;
    #line 4827 
    default: 
             #line 4827 
    ;
    #line 4828 
    return -95;
  }
  #line 4830 
  return 0;
}

#line 4833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_pci_set_mwi(struct e1000_hw *hw)
{
  #line 4835 
  struct e1000_adapter *adapter = (struct e1000_adapter *)hw->back;
  #line 4836 
  int ret_val = pci_set_mwi(adapter->pdev);
  #line 4838 
  if (ret_val != 0) 
    #line 4839 
    if ((adapter->msg_enable & 2) != 0) 
                                        #line 4839 
                                        netdev_err(adapter->netdev,(char *)"Error in setting MWI\n");
  #line 4840 
  return;
}

#line 4842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_pci_clear_mwi(struct e1000_hw *hw)
{
  #line 4844 
  struct e1000_adapter *adapter = (struct e1000_adapter *)hw->back;
  #line 4846 
  pci_clear_mwi(adapter->pdev);
  #line 4847 
  return;
}

#line 4849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
int e1000_pcix_get_mmrbc(struct e1000_hw *hw)
{
  #line 4851 
  struct e1000_adapter *adapter = (struct e1000_adapter *)hw->back;
  #line 4852 
  return pcix_get_mmrbc(adapter->pdev);
}

#line 4855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_pcix_set_mmrbc(struct e1000_hw *hw, int mmrbc)
{
  #line 4857 
  struct e1000_adapter *adapter = (struct e1000_adapter *)hw->back;
  #line 4858 
  pcix_set_mmrbc(adapter->pdev,mmrbc);
  #line 4859 
  return;
}

#line 4861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
void e1000_io_write(struct e1000_hw *hw, unsigned long port, u32 value)
{
  #line 4863 
  outl(value,(int)port);
  #line 4864 
  return;
}

#line 4866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static bool e1000_vlan_used(struct e1000_adapter *adapter)
{
  #line 4868 
  u16 vid;
  #line 4870 
  vid = (unsigned short)cif_find_first_bit((unsigned long *)(& adapter->active_vlans),4096UL);
  #line 4870 
  while ((unsigned int)vid <= 4095U) {
    #line 4871 
    return (_Bool)1;
    #line 4870 
    vid = (unsigned short)cif_find_next_bit((unsigned long *)(& adapter->active_vlans),4096UL,
                          (unsigned long)((int)vid + 1));
  }
  #line 4872 
  return (_Bool)0;
}

#line 4875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void __e1000_vlan_mode(struct e1000_adapter *adapter, netdev_features_t features)
{
  #line 4879 
  u32 ctrl;
  #line 4878 
  struct e1000_hw *hw = & adapter->hw;
  #line 4881 
  ctrl = readl((void *)hw->hw_addr);
  #line 4882 
  if ((features & 256ULL) != 0ULL) 
                                   #line 4884 
                                   ctrl |= 1073741824U; else 
                                                             #line 4887 
                                                             ctrl &= 3221225471U;
  #line 4889 
  writel(ctrl,(void *)hw->hw_addr);
  #line 4890 
  return;
}

#line 4891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_vlan_filter_on_off(struct e1000_adapter *adapter, bool filter_on)
{
  #line 4895 
  u32 rctl;
  #line 4894 
  struct e1000_hw *hw = & adapter->hw;
  #line 4897 
  if (! test_bit(2L,& adapter->flags)) 
                                       #line 4898 
                                       e1000_irq_disable(adapter);
  #line 4900 
  __e1000_vlan_mode(adapter,(adapter->netdev)->features);
  #line 4901 
  if ((int)filter_on != 0) {
    #line 4903 
    rctl = readl((void *)(hw->hw_addr + 256U));
    #line 4904 
    rctl &= 4294443007U;
    #line 4905 
    if (((adapter->netdev)->flags & 256U) == 0U) 
                                                 #line 4906 
                                                 rctl |= 262144U;
    #line 4907 
    writel(rctl,(void *)(hw->hw_addr + 256U));
    #line 4908 
    e1000_update_mng_vlan(adapter);
  }
  else {
    #line 4911 
    rctl = readl((void *)(hw->hw_addr + 256U));
    #line 4912 
    rctl &= 4294705151U;
    #line 4913 
    writel(rctl,(void *)(hw->hw_addr + 256U));
  }
  #line 4916 
  if (! test_bit(2L,& adapter->flags)) 
                                       #line 4917 
                                       e1000_irq_enable(adapter);
  #line 4918 
  return;
}

#line 4920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_vlan_mode(struct net_device *netdev, netdev_features_t features)
{
  #line 4923 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 4925 
  if (! test_bit(2L,& adapter->flags)) 
                                       #line 4926 
                                       e1000_irq_disable(adapter);
  #line 4928 
  __e1000_vlan_mode(adapter,features);
  #line 4930 
  if (! test_bit(2L,& adapter->flags)) 
                                       #line 4931 
                                       e1000_irq_enable(adapter);
  #line 4932 
  return;
}

#line 4934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 4939 
  u32 vfta;
  #line 4939 
  u32 index;
  #line 4951 
  unsigned int tmp_1;
  #line 4937 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 4938 
  struct e1000_hw *hw = & adapter->hw;
  #line 4941 
  if (((int)hw->mng_cookie.status & 2) != 0 && (int)adapter->mng_vlan_id == (int)vid) 
    #line 4944 
    return 0;
  #line 4946 
  if (! e1000_vlan_used(adapter)) 
                                  #line 4947 
                                  e1000_vlan_filter_on_off(adapter,(_Bool)1);
  #line 4950 
  index = (unsigned int)((int)vid >> 5) & 127U;
  #line 4951 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 4951 
                                      tmp_1 = 22016U; else 
                                                           #line 4951 
                                                           tmp_1 = 1536U;
  #line 4951 
  ;
  #line 4951 
  vfta = readl((void *)(hw->hw_addr + ((unsigned long)tmp_1 + (unsigned long)(index << 2))));
  #line 4952 
  vfta = (unsigned int)(1 << ((int)vid & 31)) | vfta;
  #line 4953 
  e1000_write_vfta(hw,index,vfta);
  #line 4955 
  cif_set_bit_0((long)vid,(unsigned long *)(& adapter->active_vlans));
  #line 4957 
  return 0;
}

#line 4960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 4965 
  u32 vfta;
  #line 4965 
  u32 index;
  #line 4974 
  unsigned int tmp_2;
  #line 4963 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 4964 
  struct e1000_hw *hw = & adapter->hw;
  #line 4967 
  if (! test_bit(2L,& adapter->flags)) 
                                       #line 4968 
                                       e1000_irq_disable(adapter);
  #line 4969 
  if (! test_bit(2L,& adapter->flags)) 
                                       #line 4970 
                                       e1000_irq_enable(adapter);
  #line 4973 
  index = (unsigned int)((int)vid >> 5) & 127U;
  #line 4974 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 4974 
                                      tmp_2 = 22016U; else 
                                                           #line 4974 
                                                           tmp_2 = 1536U;
  #line 4974 
  ;
  #line 4974 
  vfta = readl((void *)(hw->hw_addr + ((unsigned long)tmp_2 + (unsigned long)(index << 2))));
  #line 4975 
  vfta = (unsigned int)(~ (1 << ((int)vid & 31))) & vfta;
  #line 4976 
  e1000_write_vfta(hw,index,vfta);
  #line 4978 
  cif_clear_bit_0((long)vid,(unsigned long *)(& adapter->active_vlans));
  #line 4980 
  if (! e1000_vlan_used(adapter)) 
                                  #line 4981 
                                  e1000_vlan_filter_on_off(adapter,(_Bool)0);
  #line 4983 
  return 0;
}

#line 4986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_restore_vlan(struct e1000_adapter *adapter)
{
  #line 4988 
  u16 vid;
  #line 4990 
  if (! e1000_vlan_used(adapter)) 
                                  #line 4991 
                                  return;
  #line 4993 
  e1000_vlan_filter_on_off(adapter,(_Bool)1);
  #line 4994 
  vid = (unsigned short)cif_find_first_bit((unsigned long *)(& adapter->active_vlans),4096UL);
  #line 4994 
  while ((unsigned int)vid <= 4095U) {
    #line 4995 
    e1000_vlan_rx_add_vid(adapter->netdev,(unsigned short)129,(unsigned short)((int)vid));
    #line 4994 
    vid = (unsigned short)cif_find_next_bit((unsigned long *)(& adapter->active_vlans),4096UL,
                          (unsigned long)((int)vid + 1));
  }
  #line 4996 
  return;
}

#line 4998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
int e1000_set_spd_dplx(struct e1000_adapter *adapter, u32 spd, u8 dplx)
{
  #line 5000 
  struct e1000_hw *hw = & adapter->hw;
  #line 5002 
  hw->autoneg = (unsigned char)0U;
  #line 5007 
  if ((spd & 1U) != 0U || ((int)dplx & -2) != 0) 
                                                 #line 5008 
                                                 goto err_inval;
  #line 5011 
  if (hw->media_type == (unsigned int)1 && (spd != 1000U && (unsigned int)dplx != 1U)) 
    #line 5014 
    goto err_inval;
  #line 5016 
  switch ((unsigned int)dplx + spd) {
    #line 5017 
    case (unsigned int)10: 
                           #line 5017 
    ;
    #line 5018 
    hw->forced_speed_duplex = (unsigned char)0U;
    #line 5019 
    break;
    #line 5020 
    case (unsigned int)11: 
                           #line 5020 
    ;
    #line 5021 
    hw->forced_speed_duplex = (unsigned char)1U;
    #line 5022 
    break;
    #line 5023 
    case (unsigned int)100: 
                            #line 5023 
    ;
    #line 5024 
    hw->forced_speed_duplex = (unsigned char)2U;
    #line 5025 
    break;
    #line 5026 
    case (unsigned int)101: 
                            #line 5026 
    ;
    #line 5027 
    hw->forced_speed_duplex = (unsigned char)3U;
    #line 5028 
    break;
    #line 5029 
    case (unsigned int)1001: 
                             #line 5029 
    ;
    #line 5030 
    hw->autoneg = (unsigned char)1U;
    #line 5031 
    hw->autoneg_advertised = (unsigned short)32U;
    #line 5032 
    break;
    #line 5033 
    case (unsigned int)1000: 
                             #line 5033 
    ;
    #line 5034 
    default: 
             #line 5034 
    ;
    #line 5035 
    goto err_inval;
  }
  #line 5039 
  hw->mdix = (unsigned char)0U;
  #line 5041 
  return 0;
  #line 5043 
  err_inval: 
             #line 5043 
  ;
  #line 5044 
  if ((adapter->msg_enable & 2) != 0) 
                                      #line 5044 
                                      netdev_err(adapter->netdev,(char *)"Unsupported Speed/Duplex configuration\n");
  #line 5045 
  return -22;
}

#line 5048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int __e1000_shutdown(struct pci_dev *pdev, bool *enable_wake)
{
  #line 5053 
  u32 ctrl;
  #line 5053 
  u32 ctrl_ext;
  #line 5053 
  u32 rctl;
  #line 5053 
  u32 status;
  #line 5050 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 5051 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 5052 
  struct e1000_hw *hw = & adapter->hw;
  #line 5054 
  u32 wufc = adapter->wol;
  #line 5056 
  int retval = 0;
  #line 5059 
  netif_device_detach(netdev);
  #line 5061 
  if ((int)netif_running(netdev) != 0) {
    #line 5062 
    int count = 50;
    #line 5064 
    while (1) {
      #line 5064 
      if ((int)test_bit(1L,& adapter->flags) != 0) {
        #line 5064 
        int tmp_2;
        #line 5064 
        tmp_2 = count;
        #line 5064 
        count --;
        #line 5064 
        ;
        #line 5064 
        if (! (tmp_2 != 0)) 
                            #line 5064 
                            break;
      }
      else 
           #line 5064 
           break;
      #line 5065 
      usleep_range(10000UL,20000UL);
    }
    {
      #line 5067 
      int __ret_warn_on = (int)test_bit(1L,& adapter->flags) != 0;
      #line 5067 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 5068 
        ldv_inline_asm();
        #line 5069 
        ldv_inline_asm();
      }
      #line 5067 
      long tmp_4 = (long)(__ret_warn_on != 0);
    }
    #line 5068 
    e1000_down(adapter);
  }
  #line 5072 
  retval = pci_save_state(pdev);
  #line 5073 
  if (retval != 0) 
                   #line 5074 
                   return retval;
  #line 5077 
  status = readl((void *)(hw->hw_addr + 8U));
  #line 5078 
  if ((status & 2U) != 0U) 
                           #line 5079 
                           wufc &= 4294967294U;
  #line 5081 
  if (wufc != 0U) {
    #line 5082 
    e1000_setup_rctl(adapter);
    #line 5083 
    e1000_set_rx_mode(netdev);
    #line 5085 
    rctl = readl((void *)(hw->hw_addr + 256U));
    #line 5088 
    if ((wufc & 8U) != 0U) 
                           #line 5089 
                           rctl |= 16U;
    #line 5092 
    writel(rctl | 2U,(void *)(hw->hw_addr + 256U));
    #line 5094 
    if (hw->mac_type > (unsigned int)4) {
      #line 5095 
      ctrl = readl((void *)hw->hw_addr);
      #line 5100 
      ctrl |= 3145728U;
      #line 5102 
      writel(ctrl,(void *)hw->hw_addr);
    }
    #line 5105 
    if ((unsigned int)hw->media_type + 4294967295U <= 1U) {
      #line 5108 
      ctrl_ext = readl((void *)(hw->hw_addr + 24U));
      #line 5109 
      ctrl_ext |= 128U;
      #line 5110 
      writel(ctrl_ext,(void *)(hw->hw_addr + 24U));
    }
    #line 5113 
    writel(2U,(void *)(hw->hw_addr + 22528U));
    #line 5114 
    writel(wufc,(void *)(hw->hw_addr + 22536U));
  }
  else {
    #line 5116 
    writel(0U,(void *)(hw->hw_addr + 22528U));
    #line 5117 
    writel(0U,(void *)(hw->hw_addr + 22536U));
  }
  #line 5120 
  e1000_release_manageability(adapter);
  #line 5122 
  *enable_wake = (_Bool)(wufc != 0U);
  #line 5125 
  if (adapter->en_mng_pt != 0U) 
                                #line 5126 
                                *enable_wake = (_Bool)1;
  #line 5128 
  if ((int)netif_running(netdev) != 0) 
                                       #line 5129 
                                       e1000_free_irq(adapter);
  #line 5131 
  if (! test_and_set_bit(3L,& adapter->flags)) 
                                               #line 5132 
                                               pci_disable_device(pdev);
  #line 5134 
  return 0;
}

#line 5138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_suspend(struct pci_dev *pdev, pm_message_t state)
{
  #line 5140 
  int retval;
  #line 5141 
  bool wake;
  #line 5143 
  retval = __e1000_shutdown(pdev,& wake);
  #line 5144 
  if (retval != 0) 
                   #line 5145 
                   return retval;
  #line 5147 
  if ((int)wake != 0) 
                      #line 5148 
                      pci_prepare_to_sleep(pdev);
  else {
    #line 5150 
    pci_wake_from_d3(pdev,(_Bool)0);
    #line 5151 
    pci_set_power_state(pdev,3);
  }
  #line 5154 
  return 0;
}

#line 5157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static int e1000_resume(struct pci_dev *pdev)
{
  #line 5162 
  u32 err;
  #line 5159 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 5160 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 5161 
  struct e1000_hw *hw = & adapter->hw;
  #line 5164 
  pci_set_power_state(pdev,0);
  #line 5165 
  pci_restore_state(pdev);
  #line 5166 
  pci_save_state(pdev);
  #line 5168 
  if (adapter->need_ioport != 0) {
    #line 5169 
    err = (unsigned int)pci_enable_device(pdev);
  }
  else {
    #line 5171 
    err = (unsigned int)pci_enable_device_mem(pdev);
  }
  #line 5172 
  if (err != 0U) {
    #line 5173 
    printk((char *)"\001");
    #line 5174 
    return (int)err;
  }
  #line 5179 
  cif_clear_bit_0(3L,& adapter->flags);
  #line 5180 
  pci_set_master(pdev);
  #line 5182 
  pci_enable_wake(pdev,3,(_Bool)0);
  #line 5183 
  pci_enable_wake(pdev,4,(_Bool)0);
  #line 5185 
  if ((int)netif_running(netdev) != 0) {
    #line 5186 
    err = (unsigned int)e1000_request_irq(adapter);
    #line 5187 
    if (err != 0U) 
                   #line 5188 
                   return (int)err;
  }
  #line 5191 
  e1000_power_up_phy(adapter);
  #line 5192 
  e1000_reset(adapter);
  #line 5193 
  writel(4294967295U,(void *)(hw->hw_addr + 22544U));
  #line 5195 
  e1000_init_manageability(adapter);
  #line 5197 
  if ((int)netif_running(netdev) != 0) 
                                       #line 5198 
                                       e1000_up(adapter);
  #line 5200 
  netif_device_attach(netdev);
  #line 5202 
  return 0;
}

#line 5206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_shutdown(struct pci_dev *pdev)
{
  #line 5208 
  bool wake;
  #line 5210 
  __e1000_shutdown(pdev,& wake);
  #line 5212 
  if (system_state == (unsigned int)SYSTEM_POWER_OFF) {
    #line 5213 
    pci_wake_from_d3(pdev,(_Bool)((bool)((int)wake) != 0));
    #line 5214 
    pci_set_power_state(pdev,3);
  }
  #line 5216 
  return;
}

#line 5223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_netpoll(struct net_device *netdev)
{
  #line 5225 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 5227 
  if ((int)disable_hardirq((adapter->pdev)->irq) != 0) 
                                                       #line 5228 
                                                       e1000_intr((int)(adapter->pdev)->irq,(void *)netdev);
  #line 5229 
  enable_irq((adapter->pdev)->irq);
  #line 5230 
  return;
}

#line 5241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static pci_ers_result_t e1000_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 5244 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 5245 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 5247 
  netif_device_detach(netdev);
  #line 5249 
  if (state == 3U) 
                   #line 5250 
                   return 4U;
  #line 5252 
  if ((int)netif_running(netdev) != 0) 
                                       #line 5253 
                                       e1000_down(adapter);
  #line 5255 
  if (! test_and_set_bit(3L,& adapter->flags)) 
                                               #line 5256 
                                               pci_disable_device(pdev);
  #line 5259 
  return 3U;
}

#line 5269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static pci_ers_result_t e1000_io_slot_reset(struct pci_dev *pdev)
{
  #line 5274 
  int err;
  #line 5271 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 5272 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 5273 
  struct e1000_hw *hw = & adapter->hw;
  #line 5276 
  if (adapter->need_ioport != 0) 
                                 #line 5277 
                                 err = pci_enable_device(pdev); else 
                                                                  #line 5279 
                                                                  err = pci_enable_device_mem(pdev);
  #line 5280 
  if (err != 0) {
    #line 5281 
    printk((char *)"\001");
    #line 5282 
    return 4U;
  }
  #line 5287 
  cif_clear_bit_0(3L,& adapter->flags);
  #line 5288 
  pci_set_master(pdev);
  #line 5290 
  pci_enable_wake(pdev,3,(_Bool)0);
  #line 5291 
  pci_enable_wake(pdev,4,(_Bool)0);
  #line 5293 
  e1000_reset(adapter);
  #line 5294 
  writel(4294967295U,(void *)(hw->hw_addr + 22544U));
  #line 5296 
  return 5U;
}

#line 5307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_main.c"
static void e1000_io_resume(struct pci_dev *pdev)
{
  #line 5309 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 5310 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 5312 
  e1000_init_manageability(adapter);
  #line 5314 
  if ((int)netif_running(netdev) != 0) {
    #line 5315 
    if (e1000_up(adapter) != 0) {
      #line 5316 
      printk((char *)"\001");
      #line 5317 
      return;
    }
  }
  #line 5321 
  netif_device_attach(netdev);
  #line 5322 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
struct pci_driver *emg_alias_e1000_driver = & e1000_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
struct pci_device_id (*emg_alias_e1000_pci_tbl)[38U] = & e1000_pci_tbl;
#line 97 
#line 97 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 98 
#line 98 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 100 
#line 100 
void emg_free_netdev(struct net_device *arg0);
#line 101 
#line 101 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 102 
#line 102 
int emg_register_netdev(struct net_device *arg0);
#line 104 
#line 104 
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);
#line 105 
#line 105 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 106 
#line 106 
void emg_unregister_netdev(struct net_device *arg0);
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
void emg_e1000_exit_module(void)
{
  #line 111 
  e1000_exit_module();
  #line 112 
  return;
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
int emg_e1000_init_module(void)
{
  #line 115 
  return e1000_init_module();
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
int emg_wrapper_e1000_change_mtu(struct net_device *arg0, int arg1)
{
  #line 119 
  return e1000_change_mtu(arg0,arg1);
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
unsigned long long emg_wrapper_e1000_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 124 
  return e1000_fix_features(arg0,arg1);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
int emg_wrapper_e1000_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 129 
  return e1000_ioctl(arg0,arg1,arg2);
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
void emg_wrapper_e1000_netpoll(struct net_device *arg0)
{
  #line 134 
  e1000_netpoll(arg0);
  #line 135 
  return;
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
int emg_wrapper_e1000_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 139 
  return e1000_probe(arg0,arg1);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
void emg_wrapper_e1000_remove(struct pci_dev *arg0)
{
  #line 144 
  e1000_remove(arg0);
  #line 145 
  return;
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
int emg_wrapper_e1000_resume(struct pci_dev *arg0)
{
  #line 149 
  return e1000_resume(arg0);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
int emg_wrapper_e1000_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 154 
  return e1000_set_features(arg0,arg1);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
int emg_wrapper_e1000_set_mac(struct net_device *arg0, void *arg1)
{
  #line 159 
  return e1000_set_mac(arg0,arg1);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
void emg_wrapper_e1000_set_rx_mode(struct net_device *arg0)
{
  #line 164 
  e1000_set_rx_mode(arg0);
  #line 165 
  return;
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
void emg_wrapper_e1000_shutdown(struct pci_dev *arg0)
{
  #line 169 
  e1000_shutdown(arg0);
  #line 170 
  return;
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
int emg_wrapper_e1000_suspend(struct pci_dev *arg0, struct pm_message arg1)
{
  #line 174 
  return e1000_suspend(arg0,arg1);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
void emg_wrapper_e1000_tx_timeout(struct net_device *arg0)
{
  #line 179 
  e1000_tx_timeout(arg0);
  #line 180 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
int emg_wrapper_e1000_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 184 
  return e1000_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                            (unsigned short)((int)arg2));
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
int emg_wrapper_e1000_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 189 
  return e1000_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                             (unsigned short)((int)arg2));
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
enum netdev_tx emg_wrapper_e1000_xmit_frame(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 194 
  return e1000_xmit_frame(arg0,arg1);
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 209 
  return ldv_find_next_bit(addr,size,offset);
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 216 
  ldv_set_bit(nr,addr);
  #line 217 
  return;
}

#line 220  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 223 
  ldv_clear_bit(nr,addr);
  #line 224 
  return;
}

#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 230 
  ldv_init_list_head(list);
  #line 231 
  return;
}

#line 248  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 251 
  return ldv_find_first_bit(addr,size);
}

#line 544  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags)
{
  #line 547 
  return ldv_kmalloc(size,flags);
}

#line 558  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  #line 561 
  return ldv_kcalloc(n,size,flags);
}

#line 631  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 634 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 636 
  spin_lock(lock);
  #line 637 
  return;
}

#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 674 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 676 
  spin_unlock(lock);
  #line 677 
  return;
}

#line 777  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 781 
  return emg_schedule_work(work);
}

#line 899  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 903 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 907  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 911 
  emg_pci_unregister_driver(dev);
  #line 912 
  return;
}

#line 915  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 919 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 923  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 927 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 931  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 935 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 939  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 943 
  return emg_register_netdev(dev);
}

#line 947  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 951 
  emg_free_netdev(dev);
  #line 952 
  return;
}

#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 959 
  emg_unregister_netdev(dev);
  #line 960 
  return;
}

#line 963  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 966 
  return ldv_vzalloc(size);
}

#line 970  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_vfree(void *addr)
{
  #line 973 
  ldv_vfree(addr);
  #line 974 
  return;
}

#line 977  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay)
{
  #line 981 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 985  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif___ldv_spin_lock_stats_lock_of_e1000_adapter(spinlock_t *lock)
{
  #line 988 
  ldv_spin_model_lock((char *)"stats_lock_of_e1000_adapter");
  #line 990 
  __ldv_spin_lock(lock);
  #line 991 
  return;
}

#line 994  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_main.i.aux"
static void cif_spin_unlock_irqrestore_stats_lock_of_e1000_adapter(spinlock_t *lock, unsigned long flags)
{
  #line 997 
  ldv_spin_model_unlock((char *)"stats_lock_of_e1000_adapter");
  #line 999 
  spin_unlock_irqrestore(lock,flags);
  #line 1000 
  return;
}

#line 1714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.h"
#line 286 
s32 e1000_validate_mdi_setting(struct e1000_hw *hw);
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int TxDescriptors[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_TxDescriptors;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int RxDescriptors[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_RxDescriptors;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int Speed[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_Speed;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int Duplex[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_Duplex;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int AutoNeg[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_AutoNeg;
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int FlowControl[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_FlowControl;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int XsumRX[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_XsumRX;
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int TxIntDelay[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_TxIntDelay;
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int TxAbsIntDelay[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_TxAbsIntDelay;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int RxIntDelay[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_RxIntDelay;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int RxAbsIntDelay[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_RxAbsIntDelay;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int InterruptThrottleRate[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_InterruptThrottleRate;
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int SmartPowerDownEnable[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static unsigned int num_SmartPowerDownEnable;
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static int e1000_validate_option(unsigned int *value, struct e1000_option *opt, struct e1000_adapter *adapter)
{
  #line 187 
  if (*value == 4294967295U) {
    #line 188 
    *value = (unsigned int)opt->def;
    #line 189 
    return 0;
  }
  #line 192 
  switch ((unsigned int)opt->type) {
    #line 193 
    case (unsigned int)0: 
                          #line 193 
    ;
    #line 194 
    switch (*value) {
      #line 195 
      case (unsigned int)1: 
                            #line 195 
      ;
      #line 196 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s Enabled\n",opt->name);
      #line 197 
      return 0;
      #line 198 
      case (unsigned int)0: 
                            #line 198 
      ;
      #line 199 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s Disabled\n",opt->name);
      #line 200 
      return 0;
    }
    #line 202 
    break;
    #line 203 
    case (unsigned int)1: 
                          #line 203 
    ;
    #line 204 
    if (*value >= (unsigned int)opt->arg.r.min && *value <= (unsigned int)opt->arg.r.max) {
      #line 205 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s set to %i\n",opt->name,*value);
      #line 206 
      return 0;
    }
    #line 208 
    break;
    #line 209 
    case (unsigned int)2: 
                          #line 209 
    ;
    {
      #line 210 
      int i;
      #line 211 
      struct e1000_opt_list *ent;
      #line 213 
      i = 0;
      #line 213 
      while (opt->arg.l.nr > i) {
        #line 214 
        ent = opt->arg.l.p + (unsigned long)i;
        #line 215 
        if (*value == (unsigned int)ent->i) {
          #line 216 
          if ((int)*(ent->str) != 0) 
                                     #line 217 
                                     _dev_info(& (adapter->pdev)->dev,(char *)"%s\n",ent->str);
          #line 218 
          return 0;
        }
        #line 213 
        i ++;
      }
    }
    #line 222 
    break;
    #line 223 
    default: 
             #line 223 
    ;
    #line 225 
    ldv_inline_asm();
    #line 226 
    ldv_inline_asm();
    #line 227 
    ldv_inline_asm();
    #line 224 
    ;
  }
  #line 227 
  _dev_info(& (adapter->pdev)->dev,(char *)"Invalid %s value specified (%i) %s\n",opt->name,*value,opt->err);
  #line 229 
  *value = (unsigned int)opt->def;
  #line 230 
  return -1;
}

#line 233 
#line 512 
static void e1000_check_fiber_options(struct e1000_adapter *adapter);
#line 234 
#line 537 
static void e1000_check_copper_options(struct e1000_adapter *adapter);
#line 245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
void e1000_check_options(struct e1000_adapter *adapter)
{
  #line 247 
  struct e1000_option opt;
  #line 248 
  int bd = (int)adapter->bd_number;
  #line 250 
  if (bd > 31) 
               #line 251 
               _dev_warn(& (adapter->pdev)->dev,(char *)"Warning: no configuration for board #%i ",bd);
  {
    #line 257 
    int i;
    #line 264 
    int tmp;
    #line 256 
    struct e1000_tx_ring *tx_ring = adapter->tx_ring;
    #line 258 
    e1000_mac_type mac_type = adapter->hw.mac_type;
    #line 264 
    if (mac_type <= (unsigned int)3) 
                                     #line 264 
                                     tmp = 256; else 
                                                     #line 264 
                                                     tmp = 4096;
    #line 260 
    struct e1000_option __constr_expr_41 = {.type = range_option, .name = (char *)"Transmit Descriptors", .err = (char *)"using default of ", .def = 256, .arg = {.r = {.min = 48, .max = tmp}}};
    #line 260 
    opt = __constr_expr_41;
    #line 272 
    if (num_TxDescriptors > (unsigned int)bd) {
      #line 273 
      tx_ring->count = (unsigned int)TxDescriptors[bd];
      #line 274 
      e1000_validate_option(& tx_ring->count,& opt,adapter);
      #line 275 
      tx_ring->count = (tx_ring->count + 7U) & 4294967288U;
    }
    else 
         #line 278 
         tx_ring->count = (unsigned int)opt.def;
    #line 280 
    i = 0;
    #line 280 
    while (adapter->num_tx_queues > i) {
      #line 281 
      (tx_ring + (unsigned long)i)->count = tx_ring->count;
      #line 280 
      i ++;
    }
  }
  {
    #line 285 
    int i_0;
    #line 292 
    int tmp_0;
    #line 284 
    struct e1000_rx_ring *rx_ring = adapter->rx_ring;
    #line 286 
    e1000_mac_type mac_type_0 = adapter->hw.mac_type;
    #line 292 
    if (mac_type_0 <= (unsigned int)3) 
                                       #line 292 
                                       tmp_0 = 256; else 
                                                         #line 292 
                                                         tmp_0 = 4096;
    #line 288 
    struct e1000_option __constr_expr_42 = {.type = range_option, .name = (char *)"Receive Descriptors", .err = (char *)"using default of ", .def = 256, .arg = {.r = {.min = 48, .max = tmp_0}}};
    #line 288 
    opt = __constr_expr_42;
    #line 301 
    if (num_RxDescriptors > (unsigned int)bd) {
      #line 302 
      rx_ring->count = (unsigned int)RxDescriptors[bd];
      #line 303 
      e1000_validate_option(& rx_ring->count,& opt,adapter);
      #line 304 
      rx_ring->count = (rx_ring->count + 7U) & 4294967288U;
    }
    else 
         #line 307 
         rx_ring->count = (unsigned int)opt.def;
    #line 309 
    i_0 = 0;
    #line 309 
    while (adapter->num_rx_queues > i_0) {
      #line 310 
      (rx_ring + (unsigned long)i_0)->count = rx_ring->count;
      #line 309 
      i_0 ++;
    }
  }
  {
    #line 313 
    struct e1000_option __constr_expr_43 = {.type = enable_option, .name = (char *)"Checksum Offload", .err = (char *)"defaulting to Enabled", .def = 1, .arg = {.r = {.min = 0, .max = 0}}};
    #line 313 
    opt = __constr_expr_43;
    #line 320 
    if (num_XsumRX > (unsigned int)bd) {
      #line 321 
      unsigned int rx_csum = (unsigned int)XsumRX[bd];
      #line 322 
      e1000_validate_option(& rx_csum,& opt,adapter);
      #line 323 
      adapter->rx_csum = (_Bool)(rx_csum != 0U);
    }
    else 
         #line 325 
         adapter->rx_csum = (_Bool)(opt.def != 0);
  }
  {
    #line 330 
    struct e1000_opt_list fc_list[5U] = {{.i = 0, .str = (char *)"Flow Control Disabled"}, {.i = 1, .str = (char *)"Flow Control Receive Only"}, {.i = 2, .str = (char *)"Flow Control Transmit Only"}, {.i = 3, .str = (char *)"Flow Control Enabled"}, {.i = 255, .str = (char *)"Flow Control Hardware Default"}};
    #line 338 
    struct e1000_option __constr_expr_44 = {.type = list_option, .name = (char *)"Flow Control", .err = (char *)"reading default settings from EEPROM", .def = 255, .arg = {.l = {.nr = 5, .p = (struct e1000_opt_list *)(& fc_list)}}};
    #line 338 
    opt = __constr_expr_44;
    #line 347 
    if (num_FlowControl > (unsigned int)bd) {
      #line 348 
      unsigned int fc = (unsigned int)FlowControl[bd];
      #line 349 
      e1000_validate_option(& fc,& opt,adapter);
      #line 350 
      adapter->hw.original_fc = fc;
      #line 350 
      adapter->hw.fc = (enum ldv_19219)fc;
    }
    else {
      #line 352 
      adapter->hw.original_fc = ((unsigned int)opt.def);
      #line 352 
      adapter->hw.fc = (enum ldv_19219)((unsigned int)opt.def);
    }
  }
  {
    #line 356 
    struct e1000_option __constr_expr_45 = {.type = range_option, .name = (char *)"Transmit Interrupt Delay", .err = (char *)"using default of ", .def = 8, .arg = {.r = {.min = 0, .max = 65535}}};
    #line 356 
    opt = __constr_expr_45;
    #line 365 
    if (num_TxIntDelay > (unsigned int)bd) {
      #line 366 
      adapter->tx_int_delay = (unsigned int)TxIntDelay[bd];
      #line 367 
      e1000_validate_option(& adapter->tx_int_delay,& opt,adapter);
    }
    else 
         #line 370 
         adapter->tx_int_delay = (unsigned int)opt.def;
  }
  {
    #line 374 
    struct e1000_option __constr_expr_46 = {.type = range_option, .name = (char *)"Transmit Absolute Interrupt Delay", .err = (char *)"using default of ", .def = 32, .arg = {.r = {.min = 0, .max = 65535}}};
    #line 374 
    opt = __constr_expr_46;
    #line 383 
    if (num_TxAbsIntDelay > (unsigned int)bd) {
      #line 384 
      adapter->tx_abs_int_delay = (unsigned int)TxAbsIntDelay[bd];
      #line 385 
      e1000_validate_option(& adapter->tx_abs_int_delay,& opt,adapter);
    }
    else 
         #line 388 
         adapter->tx_abs_int_delay = (unsigned int)opt.def;
  }
  {
    #line 392 
    struct e1000_option __constr_expr_47 = {.type = range_option, .name = (char *)"Receive Interrupt Delay", .err = (char *)"using default of ", .def = 0, .arg = {.r = {.min = 0, .max = 65535}}};
    #line 392 
    opt = __constr_expr_47;
    #line 401 
    if (num_RxIntDelay > (unsigned int)bd) {
      #line 402 
      adapter->rx_int_delay = (unsigned int)RxIntDelay[bd];
      #line 403 
      e1000_validate_option(& adapter->rx_int_delay,& opt,adapter);
    }
    else 
         #line 406 
         adapter->rx_int_delay = (unsigned int)opt.def;
  }
  {
    #line 410 
    struct e1000_option __constr_expr_48 = {.type = range_option, .name = (char *)"Receive Absolute Interrupt Delay", .err = (char *)"using default of ", .def = 8, .arg = {.r = {.min = 0, .max = 65535}}};
    #line 410 
    opt = __constr_expr_48;
    #line 419 
    if (num_RxAbsIntDelay > (unsigned int)bd) {
      #line 420 
      adapter->rx_abs_int_delay = (unsigned int)RxAbsIntDelay[bd];
      #line 421 
      e1000_validate_option(& adapter->rx_abs_int_delay,& opt,adapter);
    }
    else 
         #line 424 
         adapter->rx_abs_int_delay = (unsigned int)opt.def;
  }
  {
    #line 428 
    struct e1000_option __constr_expr_49 = {.type = range_option, .name = (char *)"Interrupt Throttling Rate (ints/sec)", .err = (char *)"using default of ", .def = 3, .arg = {.r = {.min = 100, .max = 100000}}};
    #line 428 
    opt = __constr_expr_49;
    #line 437 
    if (num_InterruptThrottleRate > (unsigned int)bd) {
      #line 438 
      adapter->itr = (unsigned int)InterruptThrottleRate[bd];
      #line 439 
      switch (adapter->itr) {
        #line 440 
        case (u32)0: 
                     #line 440 
        ;
        #line 441 
        _dev_info(& (adapter->pdev)->dev,(char *)"%s turned off\n",opt.name);
        #line 442 
        break;
        #line 443 
        case (u32)1: 
                     #line 443 
        ;
        #line 444 
        _dev_info(& (adapter->pdev)->dev,(char *)"%s set to dynamic mode\n",opt.name);
        #line 446 
        adapter->itr_setting = adapter->itr;
        #line 447 
        adapter->itr = 20000U;
        #line 448 
        break;
        #line 449 
        case (u32)3: 
                     #line 449 
        ;
        #line 450 
        _dev_info(& (adapter->pdev)->dev,(char *)"%s set to dynamic conservative ",opt.name);
        #line 452 
        adapter->itr_setting = adapter->itr;
        #line 453 
        adapter->itr = 20000U;
        #line 454 
        break;
        #line 455 
        case (u32)4: 
                     #line 455 
        ;
        #line 456 
        _dev_info(& (adapter->pdev)->dev,(char *)"%s set to simplified ",opt.name);
        #line 458 
        adapter->itr_setting = adapter->itr;
        #line 459 
        break;
        #line 460 
        default: 
                 #line 460 
        ;
        #line 461 
        e1000_validate_option(& adapter->itr,& opt,adapter);
        #line 468 
        adapter->itr_setting = adapter->itr & 4294967292U;
        #line 469 
        break;
      }
    }
    else {
      #line 472 
      adapter->itr_setting = (unsigned int)opt.def;
      #line 473 
      adapter->itr = 20000U;
    }
  }
  {
    #line 477 
    struct e1000_option __constr_expr_50 = {.type = enable_option, .name = (char *)"PHY Smart Power Down", .err = (char *)"defaulting to Disabled", .def = 0, .arg = {.r = {.min = 0, .max = 0}}};
    #line 477 
    opt = __constr_expr_50;
    #line 484 
    if (num_SmartPowerDownEnable > (unsigned int)bd) {
      #line 485 
      unsigned int spd = (unsigned int)SmartPowerDownEnable[bd];
      #line 486 
      e1000_validate_option(& spd,& opt,adapter);
      #line 487 
      adapter->smart_power_down = (_Bool)(spd != 0U);
    }
    else 
         #line 489 
         adapter->smart_power_down = (_Bool)(opt.def != 0);
  }
  #line 493 
  switch ((unsigned int)adapter->hw.media_type) {
    #line 494 
    case (unsigned int)1: 
                          #line 494 
    ;
    #line 495 
    case (unsigned int)2: 
                          #line 495 
    ;
    #line 496 
    e1000_check_fiber_options(adapter);
    #line 497 
    break;
    #line 498 
    case (unsigned int)0: 
                          #line 498 
    ;
    #line 499 
    e1000_check_copper_options(adapter);
    #line 500 
    break;
    #line 501 
    default: 
             #line 501 
    ;
    #line 503 
    ldv_inline_asm();
    #line 504 
    ldv_inline_asm();
    #line 505 
    ldv_inline_asm();
    #line 502 
    ;
  }
  #line 506 
  return;
}

#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static void e1000_check_fiber_options(struct e1000_adapter *adapter)
{
  #line 514 
  int bd = (int)adapter->bd_number;
  #line 515 
  if (num_Speed > (unsigned int)bd) 
                                    #line 516 
                                    _dev_info(& (adapter->pdev)->dev,(char *)"Speed not valid for fiber adapters, parameter ");
  #line 520 
  if (num_Duplex > (unsigned int)bd) 
                                     #line 521 
                                     _dev_info(& (adapter->pdev)->dev,(char *)"Duplex not valid for fiber adapters, parameter ");
  #line 525 
  if (num_AutoNeg > (unsigned int)bd && AutoNeg[bd] != 32) 
                                                           #line 526 
                                                           _dev_info(& (adapter->pdev)->dev,(char *)"AutoNeg other than 1000/Full is not valid for fiber");
  #line 527 
  return;
}

#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_param.c"
static void e1000_check_copper_options(struct e1000_adapter *adapter)
{
  #line 539 
  struct e1000_option opt;
  #line 540 
  unsigned int speed;
  #line 540 
  unsigned int dplx;
  #line 540 
  unsigned int an;
  #line 541 
  int bd = (int)adapter->bd_number;
  {
    #line 544 
    struct e1000_opt_list speed_list[4U] = {{.i = 0, .str = (char *)""}, {.i = 10, .str = (char *)""}, {.i = 100, .str = (char *)""}, {.i = 1000, .str = (char *)""}};
    #line 550 
    struct e1000_option __constr_expr_51 = {.type = list_option, .name = (char *)"Speed", .err = (char *)"parameter ignored", .def = 0, .arg = {.l = {.nr = 4, .p = (struct e1000_opt_list *)(& speed_list)}}};
    #line 550 
    opt = __constr_expr_51;
    #line 559 
    if (num_Speed > (unsigned int)bd) {
      #line 560 
      speed = (unsigned int)Speed[bd];
      #line 561 
      e1000_validate_option(& speed,& opt,adapter);
    }
    else 
         #line 563 
         speed = (unsigned int)opt.def;
  }
  {
    #line 567 
    struct e1000_opt_list dplx_list[3U] = {{.i = 0, .str = (char *)""}, {.i = 1, .str = (char *)""}, {.i = 2, .str = (char *)""}};
    #line 572 
    struct e1000_option __constr_expr_52 = {.type = list_option, .name = (char *)"Duplex", .err = (char *)"parameter ignored", .def = 0, .arg = {.l = {.nr = 3, .p = (struct e1000_opt_list *)(& dplx_list)}}};
    #line 572 
    opt = __constr_expr_52;
    #line 581 
    if (num_Duplex > (unsigned int)bd) {
      #line 582 
      dplx = (unsigned int)Duplex[bd];
      #line 583 
      e1000_validate_option(& dplx,& opt,adapter);
    }
    else 
         #line 585 
         dplx = (unsigned int)opt.def;
  }
  #line 589 
  if (num_AutoNeg > (unsigned int)bd && (speed != 0U || dplx != 0U)) {
    #line 590 
    _dev_info(& (adapter->pdev)->dev,(char *)"AutoNeg specified along with Speed or Duplex, ");
    #line 592 
    adapter->hw.autoneg_advertised = (unsigned short)47U;
  }
  else {
    #line 594 
    struct e1000_opt_list an_list[31U] = {{.i = 1, .str = (char *)"AutoNeg advertising "}, {.i = 2, .str = (char *)"AutoNeg advertising "}, {.i = 3, .str = (char *)"AutoNeg advertising "}, {.i = 4, .str = (char *)"AutoNeg advertising "}, {.i = 5, .str = (char *)"AutoNeg advertising "}, {.i = 6, .str = (char *)"AutoNeg advertising "}, {.i = 7, .str = (char *)"AutoNeg advertising "}, {.i = 8, .str = (char *)"AutoNeg advertising "}, {.i = 9, .str = (char *)"AutoNeg advertising "}, {.i = 10, .str = (char *)"AutoNeg advertising "}, {.i = 11, .str = (char *)"AutoNeg advertising "}, {.i = 12, .str = (char *)"AutoNeg advertising "}, {.i = 13, .str = (char *)"AutoNeg advertising "}, {.i = 14, .str = (char *)"AutoNeg advertising "}, {.i = 15, .str = (char *)"AutoNeg advertising "}, {.i = 32, .str = (char *)"AutoNeg advertising "}, {.i = 33, .str = (char *)"AutoNeg advertising "}, {.i = 34, .str = (char *)"AutoNeg advertising "}, {.i = 35, .str = (char *)"AutoNeg advertising "}, {.i = 36, .str = (char *)"AutoNeg advertising "}, {.i = 37, .str = (char *)"AutoNeg advertising "}, {.i = 38, .str = (char *)"AutoNeg advertising "}, {.i = 39, .str = (char *)"AutoNeg advertising "}, {.i = 40, .str = (char *)"AutoNeg advertising "}, {.i = 41, .str = (char *)"AutoNeg advertising "}, {.i = 42, .str = (char *)"AutoNeg advertising "}, {.i = 43, .str = (char *)"AutoNeg advertising "}, {.i = 44, .str = (char *)"AutoNeg advertising "}, {.i = 45, .str = (char *)"AutoNeg advertising "}, {.i = 46, .str = (char *)"AutoNeg advertising "}, {.i = 47, .str = (char *)"AutoNeg advertising "}};
    #line 628 
    struct e1000_option __constr_expr_53 = {.type = list_option, .name = (char *)"AutoNeg", .err = (char *)"parameter ignored", .def = 47, .arg = {.l = {.nr = 31, .p = (struct e1000_opt_list *)(& an_list)}}};
    #line 628 
    opt = __constr_expr_53;
    #line 637 
    if (num_AutoNeg > (unsigned int)bd) {
      #line 638 
      an = (unsigned int)AutoNeg[bd];
      #line 639 
      e1000_validate_option(& an,& opt,adapter);
    }
    else 
         #line 641 
         an = (unsigned int)opt.def;
    #line 643 
    adapter->hw.autoneg_advertised = (unsigned short)an;
  }
  #line 646 
  switch (speed + dplx) {
    #line 647 
    case (unsigned int)0: 
                          #line 647 
    ;
    #line 648 
    adapter->fc_autoneg = ((unsigned char)1U);
    #line 648 
    adapter->hw.autoneg = ((unsigned char)1U);
    #line 649 
    if (num_Speed > (unsigned int)bd && (speed != 0U || dplx != 0U)) 
      #line 650 
      _dev_info(& (adapter->pdev)->dev,(char *)"Speed and duplex autonegotiation ");
    #line 652 
    break;
    #line 653 
    case (unsigned int)1: 
                          #line 653 
    ;
    #line 654 
    _dev_info(& (adapter->pdev)->dev,(char *)"Half Duplex specified without Speed\n");
    #line 655 
    _dev_info(& (adapter->pdev)->dev,(char *)"Using Autonegotiation at Half Duplex only\n");
    #line 656 
    adapter->fc_autoneg = ((unsigned char)1U);
    #line 656 
    adapter->hw.autoneg = ((unsigned char)1U);
    #line 657 
    adapter->hw.autoneg_advertised = (unsigned short)5U;
    #line 659 
    break;
    #line 660 
    case (unsigned int)2: 
                          #line 660 
    ;
    #line 661 
    _dev_info(& (adapter->pdev)->dev,(char *)"Full Duplex specified without Speed\n");
    #line 662 
    _dev_info(& (adapter->pdev)->dev,(char *)"Using Autonegotiation at Full Duplex only\n");
    #line 663 
    adapter->fc_autoneg = ((unsigned char)1U);
    #line 663 
    adapter->hw.autoneg = ((unsigned char)1U);
    #line 664 
    adapter->hw.autoneg_advertised = (unsigned short)42U;
    #line 667 
    break;
    #line 668 
    case (unsigned int)10: 
                           #line 668 
    ;
    #line 669 
    _dev_info(& (adapter->pdev)->dev,(char *)"10 Mbps Speed specified without Duplex\n");
    #line 670 
    _dev_info(& (adapter->pdev)->dev,(char *)"Using Autonegotiation at 10 Mbps only\n");
    #line 671 
    adapter->fc_autoneg = ((unsigned char)1U);
    #line 671 
    adapter->hw.autoneg = ((unsigned char)1U);
    #line 672 
    adapter->hw.autoneg_advertised = (unsigned short)3U;
    #line 674 
    break;
    #line 675 
    case (unsigned int)11: 
                           #line 675 
    ;
    #line 676 
    _dev_info(& (adapter->pdev)->dev,(char *)"Forcing to 10 Mbps Half Duplex\n");
    #line 677 
    adapter->fc_autoneg = ((unsigned char)0U);
    #line 677 
    adapter->hw.autoneg = ((unsigned char)0U);
    #line 678 
    adapter->hw.forced_speed_duplex = (unsigned char)0U;
    #line 679 
    adapter->hw.autoneg_advertised = (unsigned short)0U;
    #line 680 
    break;
    #line 681 
    case (unsigned int)12: 
                           #line 681 
    ;
    #line 682 
    _dev_info(& (adapter->pdev)->dev,(char *)"Forcing to 10 Mbps Full Duplex\n");
    #line 683 
    adapter->fc_autoneg = ((unsigned char)0U);
    #line 683 
    adapter->hw.autoneg = ((unsigned char)0U);
    #line 684 
    adapter->hw.forced_speed_duplex = (unsigned char)1U;
    #line 685 
    adapter->hw.autoneg_advertised = (unsigned short)0U;
    #line 686 
    break;
    #line 687 
    case (unsigned int)100: 
                            #line 687 
    ;
    #line 688 
    _dev_info(& (adapter->pdev)->dev,(char *)"100 Mbps Speed specified without Duplex\n");
    #line 689 
    _dev_info(& (adapter->pdev)->dev,(char *)"Using Autonegotiation at 100 Mbps only\n");
    #line 690 
    adapter->fc_autoneg = ((unsigned char)1U);
    #line 690 
    adapter->hw.autoneg = ((unsigned char)1U);
    #line 691 
    adapter->hw.autoneg_advertised = (unsigned short)12U;
    #line 693 
    break;
    #line 694 
    case (unsigned int)101: 
                            #line 694 
    ;
    #line 695 
    _dev_info(& (adapter->pdev)->dev,(char *)"Forcing to 100 Mbps Half Duplex\n");
    #line 696 
    adapter->fc_autoneg = ((unsigned char)0U);
    #line 696 
    adapter->hw.autoneg = ((unsigned char)0U);
    #line 697 
    adapter->hw.forced_speed_duplex = (unsigned char)2U;
    #line 698 
    adapter->hw.autoneg_advertised = (unsigned short)0U;
    #line 699 
    break;
    #line 700 
    case (unsigned int)102: 
                            #line 700 
    ;
    #line 701 
    _dev_info(& (adapter->pdev)->dev,(char *)"Forcing to 100 Mbps Full Duplex\n");
    #line 702 
    adapter->fc_autoneg = ((unsigned char)0U);
    #line 702 
    adapter->hw.autoneg = ((unsigned char)0U);
    #line 703 
    adapter->hw.forced_speed_duplex = (unsigned char)3U;
    #line 704 
    adapter->hw.autoneg_advertised = (unsigned short)0U;
    #line 705 
    break;
    #line 706 
    case (unsigned int)1000: 
                             #line 706 
    ;
    #line 707 
    _dev_info(& (adapter->pdev)->dev,(char *)"1000 Mbps Speed specified without Duplex\n");
    #line 708 
    goto full_duplex_only;
    #line 709 
    case (unsigned int)1001: 
                             #line 709 
    ;
    #line 710 
    _dev_info(& (adapter->pdev)->dev,(char *)"Half Duplex is not supported at 1000 Mbps\n");
    #line 712 
    case (unsigned int)1002: 
                             #line 712 
    ;
    #line 713 
    full_duplex_only: 
                      #line 713 
    ;
    #line 714 
    _dev_info(& (adapter->pdev)->dev,(char *)"Using Autonegotiation at 1000 Mbps Full Duplex ");
    #line 716 
    adapter->fc_autoneg = ((unsigned char)1U);
    #line 716 
    adapter->hw.autoneg = ((unsigned char)1U);
    #line 717 
    adapter->hw.autoneg_advertised = (unsigned short)32U;
    #line 718 
    break;
    #line 719 
    default: 
             #line 719 
    ;
    #line 721 
    ldv_inline_asm();
    #line 722 
    ldv_inline_asm();
    #line 723 
    ldv_inline_asm();
    #line 720 
    ;
  }
  #line 724 
  if (e1000_validate_mdi_setting(& adapter->hw) < 0) 
                                                     #line 725 
                                                     _dev_info(& (adapter->pdev)->dev,(char *)"Speed, AutoNeg and MDI-X specs are incompatible. ");
  #line 726 
  return;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 203 
void ___might_sleep(char *, int, int);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_hw.i.aux"
static void cif_spin_unlock_irqrestore_e1000_phy_lock(spinlock_t *lock, unsigned long flags);
#line 26 
#line 816 
static void cif_mutex_lock_e1000_eeprom_lock(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 35 
#line 798 
static void cif___ldv_spin_lock_e1000_phy_lock(spinlock_t *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_hw.i.aux"
static void cif_mutex_unlock_e1000_eeprom_lock(struct mutex *lock);
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void *phys_to_virt(phys_addr_t address)
{
  #line 150 
  return (void *)((unsigned long)address + page_offset_base);
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 83 
void ioread16_rep(void *, void *, unsigned long);
#line 87 
#line 87 
void iowrite16_rep(void *, void *, unsigned long);
#line 1778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 1778 
int _cond_resched(void);
#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
#line 5078 
static s32 e1000_check_downshift(struct e1000_hw *hw);
#line 11 
#line 5012 
static s32 e1000_check_polarity(struct e1000_hw *hw, e1000_rev_polarity *polarity);
#line 13 
#line 4676 
static void e1000_clear_hw_cntrs(struct e1000_hw *hw);
#line 14 
#line 4410 
static void e1000_clear_vfta(struct e1000_hw *hw);
#line 15 
#line 5188 
static s32 e1000_config_dsp_after_link_change(struct e1000_hw *hw, bool link_up);
#line 17 
#line 2049 
static s32 e1000_config_fc_after_link_up(struct e1000_hw *hw);
#line 18 
#line 3141 
static s32 e1000_detect_gig_phy(struct e1000_hw *hw);
#line 19 
#line 5640 
static s32 e1000_get_auto_rd_done(struct e1000_hw *hw);
#line 20 
#line 4898 
static s32 e1000_get_cable_length(struct e1000_hw *hw, u16 *min_length, u16 *max_length);
#line 22 
#line 5654 
static s32 e1000_get_phy_cfg_done(struct e1000_hw *hw);
#line 23 
#line 4428 
static s32 e1000_id_led_init(struct e1000_hw *hw);
#line 24 
#line 4273 
static void e1000_init_rx_addrs(struct e1000_hw *hw);
#line 25 
#line 3241 
static s32 e1000_phy_igp_get_info(struct e1000_hw *hw, struct e1000_phy_info *phy_info);
#line 27 
#line 3320 
static s32 e1000_phy_m88_get_info(struct e1000_hw *hw, struct e1000_phy_info *phy_info);
#line 29 
#line 5367 
static s32 e1000_set_d3_lplu_state(struct e1000_hw *hw, bool active);
#line 30 
#line 2625 
static s32 e1000_wait_autoneg(struct e1000_hw *hw);
#line 31 
#line 4875 
static void e1000_write_reg_io(struct e1000_hw *hw, u32 offset, u32 value);
#line 32 
#line 91 
static s32 e1000_set_phy_type(struct e1000_hw *hw);
#line 33 
#line 130 
static void e1000_phy_init_script(struct e1000_hw *hw);
#line 34 
#line 1416 
static s32 e1000_setup_copper_link(struct e1000_hw *hw);
#line 35 
#line 800 
static s32 e1000_setup_fiber_serdes_link(struct e1000_hw *hw);
#line 36 
#line 644 
static s32 e1000_adjust_serdes_amplitude(struct e1000_hw *hw);
#line 37 
#line 1643 
static s32 e1000_phy_force_speed_duplex(struct e1000_hw *hw);
#line 38 
#line 1906 
static s32 e1000_config_mac_to_phy(struct e1000_hw *hw);
#line 39 
#line 2657 
static void e1000_raise_mdi_clk(struct e1000_hw *hw, u32 *ctrl);
#line 40 
#line 2672 
static void e1000_lower_mdi_clk(struct e1000_hw *hw, u32 *ctrl);
#line 41 
#line 2690 
static void e1000_shift_out_mdi_bits(struct e1000_hw *hw, u32 data, u16 count);
#line 42 
#line 2736 
static u16 e1000_shift_in_mdi_bits(struct e1000_hw *hw);
#line 43 
#line 3214 
static s32 e1000_phy_reset_dsp(struct e1000_hw *hw);
#line 44 
#line 4086 
static s32 e1000_write_eeprom_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);
#line 46 
#line 4153 
static s32 e1000_write_eeprom_microwire(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);
#line 48 
#line 3815 
static s32 e1000_spi_eeprom_ready(struct e1000_hw *hw);
#line 49 
#line 3544 
static void e1000_raise_ee_clk(struct e1000_hw *hw, u32 *eecd);
#line 50 
#line 3560 
static void e1000_lower_ee_clk(struct e1000_hw *hw, u32 *eecd);
#line 51 
#line 3577 
static void e1000_shift_out_ee_bits(struct e1000_hw *hw, u16 data, u16 count);
#line 52 
#line 2953 
static s32 e1000_write_phy_reg_ex(struct e1000_hw *hw, u32 reg_addr, u16 phy_data);
#line 54 
#line 2815 
static s32 e1000_read_phy_reg_ex(struct e1000_hw *hw, u32 reg_addr, u16 *phy_data);
#line 56 
#line 3628 
static u16 e1000_shift_in_ee_bits(struct e1000_hw *hw, u16 count);
#line 57 
#line 3669 
static s32 e1000_acquire_eeprom(struct e1000_hw *hw);
#line 58 
#line 3769 
static void e1000_release_eeprom(struct e1000_hw *hw);
#line 59 
#line 3720 
static void e1000_standby_eeprom(struct e1000_hw *hw);
#line 60 
#line 5466 
static s32 e1000_set_vco_speed(struct e1000_hw *hw);
#line 61 
#line 5546 
static s32 e1000_polarity_reversal_workaround(struct e1000_hw *hw);
#line 62 
#line 5321 
static s32 e1000_set_phy_mode(struct e1000_hw *hw);
#line 63 
#line 3867 
static s32 e1000_do_read_eeprom(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);
#line 65 
#line 4040 
static s32 e1000_do_write_eeprom(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static u16 e1000_igp_cable_length_table[128U] = {(unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)5U, (unsigned short)10U, (unsigned short)10U, (unsigned short)10U, (unsigned short)10U, (unsigned short)10U, (unsigned short)10U, (unsigned short)10U, (unsigned short)20U, (unsigned short)20U, (unsigned short)20U, (unsigned short)20U, (unsigned short)20U, (unsigned short)25U, (unsigned short)25U, (unsigned short)25U, (unsigned short)25U, (unsigned short)25U, (unsigned short)25U, (unsigned short)25U, (unsigned short)30U, (unsigned short)30U, (unsigned short)30U, (unsigned short)30U, (unsigned short)40U, (unsigned short)40U, (unsigned short)40U, (unsigned short)40U, (unsigned short)40U, (unsigned short)40U, (unsigned short)40U, (unsigned short)40U, (unsigned short)40U, (unsigned short)50U, (unsigned short)50U, (unsigned short)50U, (unsigned short)50U, (unsigned short)50U, (unsigned short)50U, (unsigned short)50U, (unsigned short)60U, (unsigned short)60U, (unsigned short)60U, (unsigned short)60U, (unsigned short)60U, (unsigned short)60U, (unsigned short)60U, (unsigned short)60U, (unsigned short)60U, (unsigned short)70U, (unsigned short)70U, (unsigned short)70U, (unsigned short)70U, (unsigned short)70U, (unsigned short)70U, (unsigned short)80U, (unsigned short)80U, (unsigned short)80U, (unsigned short)80U, (unsigned short)80U, (unsigned short)80U, (unsigned short)90U, (unsigned short)90U, (unsigned short)90U, (unsigned short)90U, (unsigned short)90U, (unsigned short)90U, (unsigned short)90U, (unsigned short)90U, (unsigned short)90U, (unsigned short)100U, (unsigned short)100U, (unsigned short)100U, (unsigned short)100U, (unsigned short)100U, (unsigned short)100U, (unsigned short)100U, (unsigned short)100U, (unsigned short)100U, (unsigned short)100U, (unsigned short)100U, (unsigned short)100U, (unsigned short)100U, (unsigned short)100U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)110U, (unsigned short)120U, (unsigned short)120U, (unsigned short)120U, (unsigned short)120U, (unsigned short)120U, (unsigned short)120U, (unsigned short)120U, (unsigned short)120U, (unsigned short)120U, (unsigned short)120U};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static struct mutex e1000_eeprom_lock = {.wait_lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"e1000_eeprom_lock.wait_lock"}}}}, .wait_list = {.next = & e1000_eeprom_lock.wait_list, .prev = & e1000_eeprom_lock.wait_list}, .magic = (void *)(& e1000_eeprom_lock), .dep_map = {.name = (char *)"e1000_eeprom_lock"}};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static spinlock_t e1000_phy_lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"e1000_phy_lock"}}}};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_set_phy_type(struct e1000_hw *hw)
{
  #line 93 
  if (hw->mac_type == (unsigned int)0) 
                                       #line 94 
                                       return -6;
  #line 96 
  switch (hw->phy_id) {
    #line 97 
    case (u32)21040208: 
                        #line 97 
    ;
    #line 98 
    case (u32)21040176: 
                        #line 98 
    ;
    #line 99 
    case (u32)21040160: 
                        #line 99 
    ;
    #line 100 
    case (u32)21040320: 
                        #line 100 
    ;
    #line 101 
    case (u32)21040704: 
                        #line 101 
    ;
    #line 102 
    hw->phy_type = 0;
    #line 103 
    break;
    #line 104 
    case (u32)44565376: 
                        #line 104 
    ;
    #line 107 
    if ((unsigned int)hw->mac_type + 4294967285U <= 3U) 
                                                        #line 109 
                                                        hw->phy_type = 1;
    #line 110 
    break;
    #line 111 
    case (u32)1886480: 
                       #line 111 
    ;
    #line 112 
    hw->phy_type = 2;
    #line 113 
    break;
    #line 114 
    case (u32)33280: 
                     #line 114 
    ;
    #line 115 
    hw->phy_type = 3;
    #line 116 
    break;
    #line 117 
    default: 
             #line 117 
    ;
    #line 119 
    hw->phy_type = 255;
    #line 120 
    return -6;
  }
  #line 123 
  return 0;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_phy_init_script(struct e1000_hw *hw)
{
  #line 132 
  u32 ret_val;
  #line 133 
  u16 phy_saved_data;
  #line 135 
  if (hw->phy_init_script != 0U) {
    #line 136 
    msleep(20U);
    #line 141 
    ret_val = (unsigned int)e1000_read_phy_reg(hw,12123U,& phy_saved_data);
    #line 144 
    e1000_write_phy_reg(hw,12123U,(unsigned short)3);
    #line 145 
    msleep(20U);
    #line 147 
    e1000_write_phy_reg(hw,0U,(unsigned short)320);
    #line 148 
    msleep(5U);
    #line 150 
    switch ((unsigned int)hw->mac_type) {
      #line 151 
      case (unsigned int)11: 
                             #line 151 
      ;
      #line 152 
      case (unsigned int)13: 
                             #line 152 
      ;
      #line 153 
      e1000_write_phy_reg(hw,8085U,(unsigned short)1);
      #line 154 
      e1000_write_phy_reg(hw,8049U,(unsigned short)48417);
      #line 155 
      e1000_write_phy_reg(hw,8057U,(unsigned short)24);
      #line 156 
      e1000_write_phy_reg(hw,7984U,(unsigned short)5632);
      #line 157 
      e1000_write_phy_reg(hw,7985U,(unsigned short)20);
      #line 158 
      e1000_write_phy_reg(hw,7986U,(unsigned short)5660);
      #line 159 
      e1000_write_phy_reg(hw,8084U,(unsigned short)3);
      #line 160 
      e1000_write_phy_reg(hw,8086U,(unsigned short)63);
      #line 161 
      e1000_write_phy_reg(hw,8208U,(unsigned short)8);
      #line 162 
      break;
      #line 164 
      case (unsigned int)12: 
                             #line 164 
      ;
      #line 165 
      case (unsigned int)14: 
                             #line 165 
      ;
      #line 166 
      e1000_write_phy_reg(hw,8051U,(unsigned short)153);
      #line 167 
      break;
      #line 168 
      default: 
               #line 168 
      ;
      #line 169 
      break;
    }
    #line 172 
    e1000_write_phy_reg(hw,0U,(unsigned short)13056);
    #line 173 
    msleep(20U);
    #line 176 
    e1000_write_phy_reg(hw,12123U,(unsigned short)((int)phy_saved_data));
    #line 178 
    if (hw->mac_type == (unsigned int)13) {
      #line 179 
      u16 fused;
      #line 179 
      u16 fine;
      #line 179 
      u16 coarse;
      #line 182 
      e1000_read_phy_reg(hw,8401U,& fused);
      #line 186 
      if (((int)fused & 256) == 0) {
        #line 187 
        e1000_read_phy_reg(hw,8400U,& fused);
        #line 191 
        fine = (unsigned short)((unsigned int)fused & 3968U);
        #line 192 
        coarse = (unsigned short)((unsigned int)fused & 112U);
        #line 195 
        if ((unsigned int)coarse > 64U) {
          #line 197 
          coarse = (unsigned short)((unsigned int)coarse + 65520U);
          #line 199 
          fine = (unsigned short)((unsigned int)fine + 65408U);
        }
        else 
          #line 200 
          if ((unsigned int)coarse == 64U) 
                                           #line 202 
                                           fine = (unsigned short)((unsigned int)fine + 64256U);
        #line 204 
        fused = (unsigned short)((((int)fused & -4096) | ((int)fine & 3968)) | ((int)coarse & 112));
        #line 210 
        e1000_write_phy_reg(hw,8412U,(unsigned short)((int)fused));
        #line 213 
        e1000_write_phy_reg(hw,8414U,(unsigned short)2);
      }
    }
  }
  #line 217 
  return;
}

#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_set_mac_type(struct e1000_hw *hw)
{
  #line 227 
  switch ((int)hw->device_id) {
    #line 228 
    case 4096: 
               #line 228 
    ;
    #line 229 
    switch ((int)hw->revision_id) {
      #line 230 
      case 2: 
              #line 230 
      ;
      #line 231 
      hw->mac_type = 1;
      #line 232 
      break;
      #line 233 
      case 3: 
              #line 233 
      ;
      #line 234 
      hw->mac_type = 2;
      #line 235 
      break;
      #line 236 
      default: 
               #line 236 
      ;
      #line 238 
      return -5;
    }
    #line 240 
    break;
    #line 241 
    case 4097: 
               #line 241 
    ;
    #line 242 
    case 4100: 
               #line 242 
    ;
    #line 243 
    hw->mac_type = 3;
    #line 244 
    break;
    #line 245 
    case 4104: 
               #line 245 
    ;
    #line 246 
    case 4105: 
               #line 246 
    ;
    #line 247 
    case 4108: 
               #line 247 
    ;
    #line 248 
    case 4109: 
               #line 248 
    ;
    #line 249 
    hw->mac_type = 4;
    #line 250 
    break;
    #line 251 
    case 4110: 
               #line 251 
    ;
    #line 252 
    case 4117: 
               #line 252 
    ;
    #line 253 
    case 4119: 
               #line 253 
    ;
    #line 254 
    case 4118: 
               #line 254 
    ;
    #line 255 
    case 4126: 
               #line 255 
    ;
    #line 256 
    hw->mac_type = 5;
    #line 257 
    break;
    #line 258 
    case 4111: 
               #line 258 
    ;
    #line 259 
    case 4113: 
               #line 259 
    ;
    #line 260 
    hw->mac_type = 6;
    #line 261 
    break;
    #line 262 
    case 4134: 
               #line 262 
    ;
    #line 263 
    case 4135: 
               #line 263 
    ;
    #line 264 
    case 4136: 
               #line 264 
    ;
    #line 265 
    hw->mac_type = 7;
    #line 266 
    break;
    #line 267 
    case 4112: 
               #line 267 
    ;
    #line 268 
    case 4114: 
               #line 268 
    ;
    #line 269 
    case 4125: 
               #line 269 
    ;
    #line 270 
    hw->mac_type = 8;
    #line 271 
    break;
    #line 272 
    case 4217: 
               #line 272 
    ;
    #line 273 
    case 4218: 
               #line 273 
    ;
    #line 274 
    case 4219: 
               #line 274 
    ;
    #line 275 
    case 4234: 
               #line 275 
    ;
    #line 276 
    case 4249: 
               #line 276 
    ;
    #line 277 
    case 4277: 
               #line 277 
    ;
    #line 278 
    hw->mac_type = 10;
    #line 279 
    break;
    #line 280 
    case 4115: 
               #line 280 
    ;
    #line 281 
    case 4120: 
               #line 281 
    ;
    #line 282 
    case 4116: 
               #line 282 
    ;
    #line 283 
    hw->mac_type = 11;
    #line 284 
    break;
    #line 285 
    case 4216: 
               #line 285 
    ;
    #line 286 
    case 4214: 
               #line 286 
    ;
    #line 287 
    case 4220: 
               #line 287 
    ;
    #line 288 
    case 4215: 
               #line 288 
    ;
    #line 289 
    hw->mac_type = 12;
    #line 290 
    break;
    #line 291 
    case 4121: 
               #line 291 
    ;
    #line 292 
    case 4122: 
               #line 292 
    ;
    #line 293 
    hw->mac_type = 13;
    #line 294 
    break;
    #line 295 
    case 4213: 
               #line 295 
    ;
    #line 296 
    hw->mac_type = 14;
    #line 297 
    break;
    #line 298 
    case 11886: 
                #line 298 
    ;
    #line 299 
    hw->mac_type = 9;
    #line 300 
    break;
    #line 301 
    default: 
             #line 301 
    ;
    #line 303 
    return -5;
  }
  #line 306 
  switch ((unsigned int)hw->mac_type) {
    #line 307 
    case (unsigned int)11: 
                           #line 307 
    ;
    #line 308 
    case (unsigned int)13: 
                           #line 308 
    ;
    #line 309 
    case (unsigned int)12: 
                           #line 309 
    ;
    #line 310 
    case (unsigned int)14: 
                           #line 310 
    ;
    #line 311 
    hw->asf_firmware_present = 1U;
    #line 312 
    break;
    #line 313 
    default: 
             #line 313 
    ;
    #line 314 
    break;
  }
  #line 320 
  if (hw->mac_type == (unsigned int)3) 
                                       #line 321 
                                       hw->bad_tx_carr_stats_fd = (_Bool)1;
  #line 323 
  if (hw->mac_type > (unsigned int)4) 
                                      #line 324 
                                      hw->has_smbus = (_Bool)1;
  #line 326 
  return 0;
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
void e1000_set_media_type(struct e1000_hw *hw)
{
  #line 335 
  u32 status;
  #line 337 
  if (hw->mac_type != (unsigned int)3) 
                                       #line 339 
                                       hw->tbi_compatibility_en = (_Bool)0;
  #line 342 
  switch ((int)hw->device_id) {
    #line 343 
    case 4136: 
               #line 343 
    ;
    #line 344 
    case 4219: 
               #line 344 
    ;
    #line 345 
    hw->media_type = 2;
    #line 346 
    break;
    #line 347 
    default: 
             #line 347 
    ;
    #line 348 
    switch ((unsigned int)hw->mac_type) {
      #line 349 
      case (unsigned int)1: 
                            #line 349 
      ;
      #line 350 
      case (unsigned int)2: 
                            #line 350 
      ;
      #line 351 
      hw->media_type = 1;
      #line 352 
      break;
      #line 353 
      case (unsigned int)9: 
                            #line 353 
      ;
      #line 354 
      hw->media_type = 0;
      #line 355 
      break;
      #line 356 
      default: 
               #line 356 
      ;
      #line 357 
      status = readl((void *)(hw->hw_addr + 8U));
      #line 358 
      if ((status & 32U) != 0U) {
        #line 359 
        hw->media_type = 1;
        #line 361 
        hw->tbi_compatibility_en = (_Bool)0;
      }
      else 
           #line 363 
           hw->media_type = 0;
      #line 365 
      break;
    }
  }
  #line 368 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_reset_hw(struct e1000_hw *hw)
{
  #line 378 
  u32 ctrl;
  #line 379 
  u32 ctrl_ext;
  #line 380 
  u32 icr;
  #line 381 
  u32 manc;
  #line 382 
  u32 led_ctrl;
  #line 383 
  s32 ret_val;
  #line 386 
  if (hw->mac_type == (unsigned int)1) {
    {
      #line 387 
      bool branch;
      #line 387 
      struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"e1000", .function = (char *)"e1000_reset_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Disabling MWI on 82542 rev 2.0\n", .lineno = (unsigned int)387U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 387 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
      #line 387 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 387 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug536,e1000_get_hw_dev(hw),(char *)"Disabling MWI on 82542 rev 2.0\n");
      }
    }
    #line 388 
    e1000_pci_clear_mwi(hw);
  }
  {
    #line 392 
    bool branch_0;
    #line 392 
    struct _ddebug __UNIQUE_ID_ddebug537 = {.modname = (char *)"e1000", .function = (char *)"e1000_reset_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Masking off all interrupts\n", .lineno = (unsigned int)392U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 392 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug537.key.dd_key_false.key,(_Bool)0);
    #line 392 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 392 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug537,e1000_get_hw_dev(hw),(char *)"Masking off all interrupts\n");
    }
  }
  #line 393 
  writel(4294967295U,(void *)(hw->hw_addr + 216U));
  #line 399 
  writel(0U,(void *)(hw->hw_addr + 256U));
  #line 400 
  writel(8U,(void *)(hw->hw_addr + 1024U));
  #line 401 
  readl((void *)(hw->hw_addr + 8U));
  #line 404 
  hw->tbi_compatibility_on = (_Bool)0;
  #line 409 
  msleep(10U);
  #line 411 
  ctrl = readl((void *)hw->hw_addr);
  #line 414 
  if (hw->mac_type == (unsigned int)11 || hw->mac_type == (unsigned int)13) {
    #line 415 
    writel(ctrl | 2147483648U,(void *)hw->hw_addr);
    #line 416 
    readl((void *)(hw->hw_addr + 8U));
    #line 417 
    msleep(5U);
  }
  {
    #line 425 
    bool branch_1;
    #line 425 
    struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"e1000", .function = (char *)"e1000_reset_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Issuing a global reset to MAC\n", .lineno = (unsigned int)425U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 425 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
    #line 425 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 425 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug538,e1000_get_hw_dev(hw),(char *)"Issuing a global reset to MAC\n");
    }
  }
  #line 427 
  switch ((unsigned int)hw->mac_type) {
    #line 428 
    case (unsigned int)4: 
                          #line 428 
    ;
    #line 429 
    case (unsigned int)5: 
                          #line 429 
    ;
    #line 430 
    case (unsigned int)6: 
                          #line 430 
    ;
    #line 431 
    case (unsigned int)8: 
                          #line 431 
    ;
    #line 432 
    case (unsigned int)11: 
                           #line 432 
    ;
    #line 433 
    case (unsigned int)12: 
                           #line 433 
    ;
    #line 437 
    e1000_write_reg_io(hw,0U,ctrl | 67108864U);
    #line 438 
    break;
    #line 439 
    case (unsigned int)7: 
                          #line 439 
    ;
    #line 440 
    case (unsigned int)10: 
                           #line 440 
    ;
    #line 442 
    writel(ctrl | 67108864U,(void *)(hw->hw_addr + 4U));
    #line 443 
    break;
    #line 444 
    case (unsigned int)9: 
                          #line 444 
    ;
    #line 445 
    default: 
             #line 445 
    ;
    #line 446 
    writel(ctrl | 67108864U,(void *)hw->hw_addr);
    #line 447 
    break;
  }
  #line 454 
  switch ((unsigned int)hw->mac_type) {
    #line 455 
    case (unsigned int)1: 
                          #line 455 
    ;
    #line 456 
    case (unsigned int)2: 
                          #line 456 
    ;
    #line 457 
    case (unsigned int)3: 
                          #line 457 
    ;
    #line 458 
    case (unsigned int)4: 
                          #line 458 
    ;
    #line 460 
    __const_udelay(42950UL);
    #line 461 
    ctrl_ext = readl((void *)(hw->hw_addr + 24U));
    #line 462 
    ctrl_ext |= 8192U;
    #line 463 
    writel(ctrl_ext,(void *)(hw->hw_addr + 24U));
    #line 464 
    readl((void *)(hw->hw_addr + 8U));
    #line 466 
    msleep(2U);
    #line 467 
    break;
    #line 468 
    case (unsigned int)11: 
                           #line 468 
    ;
    #line 469 
    case (unsigned int)12: 
                           #line 469 
    ;
    #line 470 
    case (unsigned int)13: 
                           #line 470 
    ;
    #line 471 
    case (unsigned int)14: 
                           #line 471 
    ;
    #line 473 
    msleep(20U);
    #line 474 
    break;
    #line 475 
    default: 
             #line 475 
    ;
    #line 477 
    ret_val = e1000_get_auto_rd_done(hw);
    #line 478 
    if (ret_val != 0) 
                      #line 479 
                      return ret_val;
    #line 480 
    break;
  }
  #line 484 
  if (hw->mac_type > (unsigned int)4) {
    #line 485 
    manc = readl((void *)(hw->hw_addr + 22560U));
    #line 486 
    manc &= 4294959103U;
    #line 487 
    writel(manc,(void *)(hw->hw_addr + 22560U));
  }
  #line 490 
  if (hw->mac_type == (unsigned int)11 || hw->mac_type == (unsigned int)13) {
    #line 491 
    e1000_phy_init_script(hw);
    #line 494 
    led_ctrl = readl((void *)(hw->hw_addr + 3584U));
    #line 495 
    led_ctrl &= 4294963455U;
    #line 496 
    led_ctrl |= 117441280U;
    #line 497 
    writel(led_ctrl,(void *)(hw->hw_addr + 3584U));
  }
  {
    #line 501 
    bool branch_2;
    #line 501 
    struct _ddebug __UNIQUE_ID_ddebug539 = {.modname = (char *)"e1000", .function = (char *)"e1000_reset_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Masking off all interrupts\n", .lineno = (unsigned int)501U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 501 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug539.key.dd_key_false.key,(_Bool)0);
    #line 501 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 501 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug539,e1000_get_hw_dev(hw),(char *)"Masking off all interrupts\n");
    }
  }
  #line 502 
  writel(4294967295U,(void *)(hw->hw_addr + 216U));
  #line 505 
  icr = readl((void *)(hw->hw_addr + 192U));
  #line 508 
  if (hw->mac_type == (unsigned int)1) 
    #line 509 
    if (((int)hw->pci_cmd_word & 16) != 0) 
                                           #line 510 
                                           e1000_pci_set_mwi(hw);
  #line 513 
  return 0;
}

#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_init_hw(struct e1000_hw *hw)
{
  #line 528 
  u32 ctrl;
  #line 529 
  u32 i;
  #line 530 
  s32 ret_val;
  #line 531 
  u32 mta_size;
  #line 532 
  u32 ctrl_ext;
  #line 535 
  ret_val = e1000_id_led_init(hw);
  #line 536 
  if (ret_val != 0) {
    {
      #line 537 
      bool branch;
      #line 537 
      struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"e1000", .function = (char *)"e1000_init_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error Initializing Identification LED\n", .lineno = (unsigned int)537U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 537 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
      #line 537 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 537 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug540,e1000_get_hw_dev(hw),(char *)"Error Initializing Identification LED\n");
      }
    }
    #line 538 
    return ret_val;
  }
  #line 542 
  e1000_set_media_type(hw);
  {
    #line 545 
    bool branch_0;
    #line 545 
    struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"e1000", .function = (char *)"e1000_init_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Initializing the IEEE VLAN\n", .lineno = (unsigned int)545U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 545 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
    #line 545 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 545 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug541,e1000_get_hw_dev(hw),(char *)"Initializing the IEEE VLAN\n");
    }
  }
  #line 546 
  if (hw->mac_type <= (unsigned int)6) 
                                       #line 547 
                                       writel(0U,(void *)(hw->hw_addr + 56U));
  #line 548 
  e1000_clear_vfta(hw);
  #line 551 
  if (hw->mac_type == (unsigned int)1) {
    {
      #line 552 
      bool branch_1;
      #line 552 
      struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"e1000", .function = (char *)"e1000_init_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Disabling MWI on 82542 rev 2.0\n", .lineno = (unsigned int)552U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 552 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
      #line 552 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 552 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug542,e1000_get_hw_dev(hw),(char *)"Disabling MWI on 82542 rev 2.0\n");
      }
    }
    #line 553 
    e1000_pci_clear_mwi(hw);
    #line 554 
    writel(1U,(void *)(hw->hw_addr + 256U));
    #line 555 
    readl((void *)(hw->hw_addr + 8U));
    #line 556 
    msleep(5U);
  }
  #line 562 
  e1000_init_rx_addrs(hw);
  #line 565 
  if (hw->mac_type == (unsigned int)1) {
    #line 566 
    writel(0U,(void *)(hw->hw_addr + 256U));
    #line 567 
    readl((void *)(hw->hw_addr + 8U));
    #line 568 
    msleep(1U);
    #line 569 
    if (((int)hw->pci_cmd_word & 16) != 0) 
                                           #line 570 
                                           e1000_pci_set_mwi(hw);
  }
  {
    #line 574 
    bool branch_2;
    #line 574 
    struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"e1000", .function = (char *)"e1000_init_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Zeroing the MTA\n", .lineno = (unsigned int)574U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 574 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
    #line 574 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 574 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug543,e1000_get_hw_dev(hw),(char *)"Zeroing the MTA\n");
    }
  }
  #line 575 
  mta_size = 128U;
  #line 576 
  i = 0U;
  #line 576 
  while (i < mta_size) {
    {
      #line 577 
      unsigned int tmp_7;
      #line 577 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 577 
                                          tmp_7 = 20992U; else 
                                                               #line 577 
                                                               tmp_7 = 512U;
      #line 577 
      ;
      #line 577 
      writel(0U,(void *)(hw->hw_addr + ((unsigned long)tmp_7 + (unsigned long)(i << 2))));
      #line 581 
      readl((void *)(hw->hw_addr + 8U));
    }
    #line 576 
    i ++;
  }
  #line 589 
  if ((unsigned int)hw->dma_fairness != 0U && hw->mac_type <= (unsigned int)3) {
    #line 590 
    ctrl = readl((void *)hw->hw_addr);
    #line 591 
    writel(ctrl | 4U,(void *)hw->hw_addr);
  }
  #line 594 
  switch ((unsigned int)hw->mac_type) {
    #line 595 
    case (unsigned int)7: 
                          #line 595 
    ;
    #line 596 
    case (unsigned int)10: 
                           #line 596 
    ;
    #line 597 
    break;
    #line 598 
    default: 
             #line 598 
    ;
    #line 602 
    if (hw->bus_type == (unsigned int)2) {
      #line 602 
      if (e1000_pcix_get_mmrbc(hw) > 2048) 
                                           #line 604 
                                           e1000_pcix_set_mmrbc(hw,2048);
    }
    #line 605 
    break;
  }
  #line 609 
  ret_val = e1000_setup_link(hw);
  #line 612 
  if (hw->mac_type > (unsigned int)4) {
    #line 613 
    ctrl = readl((void *)(hw->hw_addr + 14376U));
    #line 614 
    ctrl = (ctrl & 4274061311U) | 16842752U;
    #line 617 
    writel(ctrl,(void *)(hw->hw_addr + 14376U));
  }
  #line 625 
  e1000_clear_hw_cntrs(hw);
  #line 627 
  if ((unsigned int)hw->device_id == 4249U || (unsigned int)hw->device_id == 4277U) {
    #line 629 
    ctrl_ext = readl((void *)(hw->hw_addr + 24U));
    #line 633 
    ctrl_ext |= 131072U;
    #line 634 
    writel(ctrl_ext,(void *)(hw->hw_addr + 24U));
  }
  #line 637 
  return ret_val;
}

#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_adjust_serdes_amplitude(struct e1000_hw *hw)
{
  #line 646 
  u16 eeprom_data;
  #line 647 
  s32 ret_val;
  #line 649 
  if (hw->media_type != (unsigned int)2) 
                                         #line 650 
                                         return 0;
  #line 652 
  switch ((unsigned int)hw->mac_type) {
    #line 653 
    case (unsigned int)7: 
                          #line 653 
    ;
    #line 654 
    case (unsigned int)10: 
                           #line 654 
    ;
    #line 655 
    break;
    #line 656 
    default: 
             #line 656 
    ;
    #line 657 
    return 0;
  }
  #line 660 
  ret_val = e1000_read_eeprom(hw,(unsigned short)6,(unsigned short)1,& eeprom_data);
  #line 662 
  if (ret_val != 0) 
                    #line 663 
                    return ret_val;
  #line 665 
  if ((unsigned int)eeprom_data != 65535U) {
    #line 667 
    eeprom_data = (unsigned short)((unsigned int)eeprom_data & 15U);
    #line 668 
    ret_val = e1000_write_phy_reg(hw,26U,(unsigned short)((int)eeprom_data));
    #line 670 
    if (ret_val != 0) 
                      #line 671 
                      return ret_val;
  }
  #line 674 
  return 0;
}

#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_setup_link(struct e1000_hw *hw)
{
  #line 689 
  u32 ctrl_ext;
  #line 690 
  s32 ret_val;
  #line 691 
  u16 eeprom_data;
  #line 701 
  if (hw->fc == (unsigned int)E1000_FC_DEFAULT) {
    #line 702 
    ret_val = e1000_read_eeprom(hw,(unsigned short)15,(unsigned short)1,& eeprom_data);
    #line 704 
    if (ret_val != 0) {
      {
        #line 705 
        bool branch;
        #line 705 
        struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"EEPROM Read Error\n", .lineno = (unsigned int)705U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 705 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
        #line 705 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 705 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug544,e1000_get_hw_dev(hw),(char *)"EEPROM Read Error\n");
        }
      }
      #line 706 
      return -1;
    }
    #line 708 
    if (((int)eeprom_data & 12288) == 0) 
                                         #line 709 
                                         hw->fc = E1000_FC_NONE;
    else 
      #line 710 
      if (((int)eeprom_data & 12288) == 8192) 
                                              #line 712 
                                              hw->fc = E1000_FC_TX_PAUSE; else 
                                                                    #line 714 
                                                                    hw->fc = E1000_FC_FULL;
  }
  #line 721 
  if (hw->mac_type == (unsigned int)1) 
                                       #line 722 
                                       hw->fc = (enum ldv_19219)((unsigned int)hw->fc & 4294967293U);
  #line 724 
  if (hw->mac_type <= (unsigned int)2 && (int)hw->report_tx_early == 1) 
    #line 725 
    hw->fc = (enum ldv_19219)((unsigned int)hw->fc & 4294967294U);
  #line 727 
  hw->original_fc = (unsigned int)hw->fc;
  {
    #line 729 
    bool branch_0;
    #line 729 
    struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"After fix-ups FlowControl is now = %x\n", .lineno = (unsigned int)729U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 729 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
    #line 729 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 729 
      ;
      #line 729 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug545,e1000_get_hw_dev(hw),(char *)"After fix-ups FlowControl is now = %x\n",(unsigned int)hw->fc);
    }
  }
  #line 738 
  if (hw->mac_type == (unsigned int)3) {
    #line 739 
    ret_val = e1000_read_eeprom(hw,(unsigned short)15,(unsigned short)1,& eeprom_data);
    #line 741 
    if (ret_val != 0) {
      {
        #line 742 
        bool branch_1;
        #line 742 
        struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"EEPROM Read Error\n", .lineno = (unsigned int)742U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 742 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
        #line 742 
        if ((long)((long)((int)branch_1 != 0)) != 0L) {
          #line 742 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug546,e1000_get_hw_dev(hw),(char *)"EEPROM Read Error\n");
        }
      }
      #line 743 
      return -1;
    }
    #line 745 
    ctrl_ext = (unsigned int)((int)eeprom_data << 4) & 3840U;
    #line 747 
    writel(ctrl_ext,(void *)(hw->hw_addr + 24U));
  }
  #line 751 
  if (hw->media_type == (unsigned int)0) 
                                         #line 751 
                                         ret_val = e1000_setup_copper_link(hw); else 
                                                                    #line 752 
                                                                    ret_val = e1000_setup_fiber_serdes_link(hw);
  {
    #line 759 
    bool branch_2;
    #line 759 
    struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Initializing the Flow Control address, type and timer regs\n", .lineno = (unsigned int)759U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 759 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
    #line 759 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 759 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug547,e1000_get_hw_dev(hw),(char *)"Initializing the Flow Control address, type and timer regs\n");
    }
  }
  #line 761 
  writel(34824U,(void *)(hw->hw_addr + 48U));
  #line 762 
  writel(256U,(void *)(hw->hw_addr + 44U));
  #line 763 
  writel(12746753U,(void *)(hw->hw_addr + 40U));
  #line 765 
  writel((unsigned int)hw->fc_pause_time,(void *)(hw->hw_addr + 368U));
  #line 773 
  if (((unsigned int)hw->fc & 2U) == 0U) {
    #line 774 
    unsigned int tmp_9;
    #line 775 
    unsigned int tmp_10;
    #line 774 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 774 
                                        tmp_9 = 8544U; else 
                                                            #line 774 
                                                            tmp_9 = 360U;
    #line 774 
    ;
    #line 774 
    writel(0U,(void *)(hw->hw_addr + tmp_9));
    #line 775 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 775 
                                        tmp_10 = 8552U; else 
                                                             #line 775 
                                                             tmp_10 = 352U;
    #line 775 
    ;
    #line 775 
    writel(0U,(void *)(hw->hw_addr + tmp_10));
  }
  else 
    #line 781 
    if ((int)hw->fc_send_xon != 0) {
      #line 782 
      unsigned int tmp_11;
      #line 783 
      unsigned int tmp_12;
      #line 782 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 782 
                                          tmp_11 = 8544U; else 
                                                               #line 782 
                                                               tmp_11 = 360U;
      #line 782 
      ;
      #line 782 
      ;
      #line 782 
      writel((unsigned int)hw->fc_low_water | 2147483648U,(void *)(hw->hw_addr + tmp_11));
      #line 783 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 783 
                                          tmp_12 = 8552U; else 
                                                               #line 783 
                                                               tmp_12 = 352U;
      #line 783 
      ;
      #line 783 
      ;
      #line 783 
      writel((unsigned int)hw->fc_high_water,(void *)(hw->hw_addr + tmp_12));
    }
    else {
      #line 785 
      unsigned int tmp_13;
      #line 786 
      unsigned int tmp_14;
      #line 785 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 785 
                                          tmp_13 = 8544U; else 
                                                               #line 785 
                                                               tmp_13 = 360U;
      #line 785 
      ;
      #line 785 
      ;
      #line 785 
      writel((unsigned int)hw->fc_low_water,(void *)(hw->hw_addr + tmp_13));
      #line 786 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 786 
                                          tmp_14 = 8552U; else 
                                                               #line 786 
                                                               tmp_14 = 352U;
      #line 786 
      ;
      #line 786 
      ;
      #line 786 
      writel((unsigned int)hw->fc_high_water,(void *)(hw->hw_addr + tmp_14));
    }
  #line 789 
  return ret_val;
}

#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_setup_fiber_serdes_link(struct e1000_hw *hw)
{
  #line 802 
  u32 ctrl;
  #line 803 
  u32 status;
  #line 805 
  u32 i;
  #line 807 
  s32 ret_val;
  #line 804 
  u32 txcw = 0U;
  #line 806 
  u32 signal = 0U;
  #line 815 
  ctrl = readl((void *)hw->hw_addr);
  #line 816 
  if (hw->media_type == (unsigned int)1) 
    #line 817 
    if (hw->mac_type > (unsigned int)4) 
                                        #line 817 
                                        signal = 524288U; else 
                                                               #line 817 
                                                               signal = 0U;
  #line 819 
  ret_val = e1000_adjust_serdes_amplitude(hw);
  #line 820 
  if (ret_val != 0) 
                    #line 821 
                    return ret_val;
  #line 824 
  ctrl &= 4294967287U;
  #line 827 
  ret_val = e1000_set_vco_speed(hw);
  #line 828 
  if (ret_val != 0) 
                    #line 829 
                    return ret_val;
  #line 831 
  e1000_config_collision_dist(hw);
  #line 849 
  switch ((unsigned int)hw->fc) {
    #line 850 
    case (unsigned int)0: 
                          #line 850 
    ;
    #line 852 
    txcw = 2147483680U;
    #line 853 
    break;
    #line 854 
    case (unsigned int)1: 
                          #line 854 
    ;
    #line 862 
    txcw = 2147484064U;
    #line 863 
    break;
    #line 864 
    case (unsigned int)2: 
                          #line 864 
    ;
    #line 868 
    txcw = 2147483936U;
    #line 869 
    break;
    #line 870 
    case (unsigned int)3: 
                          #line 870 
    ;
    #line 874 
    txcw = 2147484064U;
    #line 875 
    break;
    #line 876 
    default: 
             #line 876 
    ;
    {
      #line 877 
      bool branch;
      #line 877 
      struct _ddebug __UNIQUE_ID_ddebug548 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_fiber_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Flow control param set incorrectly\n", .lineno = (unsigned int)877U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 877 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug548.key.dd_key_false.key,(_Bool)0);
      #line 877 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 877 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug548,e1000_get_hw_dev(hw),(char *)"Flow control param set incorrectly\n");
      }
    }
    #line 878 
    return -3;
  }
  {
    #line 887 
    bool branch_0;
    #line 887 
    struct _ddebug __UNIQUE_ID_ddebug549 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_fiber_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Auto-negotiation enabled\n", .lineno = (unsigned int)887U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 887 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug549.key.dd_key_false.key,(_Bool)0);
    #line 887 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 887 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug549,e1000_get_hw_dev(hw),(char *)"Auto-negotiation enabled\n");
    }
  }
  #line 889 
  writel(txcw,(void *)(hw->hw_addr + 376U));
  #line 890 
  writel(ctrl,(void *)hw->hw_addr);
  #line 891 
  readl((void *)(hw->hw_addr + 8U));
  #line 893 
  hw->txcw = txcw;
  #line 894 
  msleep(1U);
  #line 903 
  if (hw->media_type == (unsigned int)2) 
                                         #line 903 
                                         goto _LOR;
  else {
    #line 903 
    ;
    #line 903 
    if ((readl((void *)hw->hw_addr) & 524288U) == signal) {
      #line 903 
      _LOR: {
              {
                #line 905 
                bool branch_1;
                #line 905 
                struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_fiber_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Looking for Link\n", .lineno = (unsigned int)905U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                #line 905 
                branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
                #line 905 
                if ((long)((long)((int)branch_1 != 0)) != 0L) {
                  #line 905 
                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug550,e1000_get_hw_dev(hw),(char *)"Looking for Link\n");
                }
              }
              #line 906 
              i = 0U;
              #line 906 
              while (i <= 49U) {
                #line 907 
                msleep(10U);
                #line 908 
                status = readl((void *)(hw->hw_addr + 8U));
                #line 909 
                if ((status & 2U) != 0U) 
                                         #line 910 
                                         break;
                #line 906 
                i ++;
              }
              #line 912 
              if (i == 50U) {
                {
                  #line 913 
                  bool branch_2;
                  #line 913 
                  struct _ddebug __UNIQUE_ID_ddebug551 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_fiber_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Never got a valid link from auto-neg!!!\n", .lineno = (unsigned int)913U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                  #line 913 
                  branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug551.key.dd_key_false.key,(_Bool)0);
                  #line 913 
                  if ((long)((long)((int)branch_2 != 0)) != 0L) {
                    #line 913 
                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug551,e1000_get_hw_dev(hw),(char *)"Never got a valid link from auto-neg!!!\n");
                  }
                }
                #line 914 
                hw->autoneg_failed = 1U;
                #line 920 
                ret_val = e1000_check_for_link(hw);
                #line 921 
                if (ret_val != 0) {
                  {
                    #line 922 
                    bool branch_3;
                    #line 922 
                    struct _ddebug __UNIQUE_ID_ddebug552 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_fiber_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error while checking for link\n", .lineno = (unsigned int)922U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                    #line 922 
                    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug552.key.dd_key_false.key,(_Bool)0);
                    #line 922 
                    if ((long)((long)((int)branch_3 != 0)) != 0L) {
                      #line 922 
                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug552,e1000_get_hw_dev(hw),(char *)"Error while checking for link\n");
                    }
                  }
                  #line 923 
                  return ret_val;
                }
                #line 925 
                hw->autoneg_failed = 0U;
              }
              else {
                #line 927 
                hw->autoneg_failed = 0U;
                {
                  #line 928 
                  bool branch_4;
                  #line 928 
                  struct _ddebug __UNIQUE_ID_ddebug553 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_fiber_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Valid Link Found\n", .lineno = (unsigned int)928U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                  #line 928 
                  branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug553.key.dd_key_false.key,(_Bool)0);
                  #line 928 
                  if ((long)((long)((int)branch_4 != 0)) != 0L) {
                    #line 928 
                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug553,e1000_get_hw_dev(hw),(char *)"Valid Link Found\n");
                  }
                }
              }
            }
    }
    else {
      #line 931 
      bool branch_5;
      #line 931 
      struct _ddebug __UNIQUE_ID_ddebug554 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_fiber_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"No Signal Detected\n", .lineno = (unsigned int)931U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 931 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug554.key.dd_key_false.key,(_Bool)0);
      #line 931 
      if ((long)((long)((int)branch_5 != 0)) != 0L) {
        #line 931 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug554,e1000_get_hw_dev(hw),(char *)"No Signal Detected\n");
      }
    }
  }
  #line 933 
  return 0;
}

#line 942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_copper_link_rtl_setup(struct e1000_hw *hw)
{
  #line 944 
  s32 ret_val;
  #line 947 
  ret_val = e1000_phy_reset(hw);
  #line 948 
  if (ret_val != 0) {
    {
      #line 949 
      bool branch;
      #line 949 
      struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_rtl_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error Resetting the PHY\n", .lineno = (unsigned int)949U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 949 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
      #line 949 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 949 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug555,e1000_get_hw_dev(hw),(char *)"Error Resetting the PHY\n");
      }
    }
    #line 950 
    return ret_val;
  }
  #line 953 
  return 0;
}

#line 956  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 gbe_dhg_phy_setup(struct e1000_hw *hw)
{
  #line 958 
  s32 ret_val;
  #line 959 
  u32 ctrl_aux;
  #line 961 
  switch ((unsigned int)hw->phy_type) {
    #line 962 
    case (unsigned int)2: 
                          #line 962 
    ;
    #line 963 
    ret_val = e1000_copper_link_rtl_setup(hw);
    #line 964 
    if (ret_val != 0) {
      {
        #line 965 
        bool branch;
        #line 965 
        struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"e1000", .function = (char *)"gbe_dhg_phy_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"e1000_copper_link_rtl_setup failed!\n", .lineno = (unsigned int)965U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 965 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
        #line 965 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 965 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug556,e1000_get_hw_dev(hw),(char *)"e1000_copper_link_rtl_setup failed!\n");
        }
      }
      #line 966 
      return ret_val;
    }
    #line 968 
    break;
    #line 969 
    case (unsigned int)3: 
                          #line 969 
    ;
    #line 971 
    ctrl_aux = readl((void *)(hw->hw_addr + 224U));
    #line 972 
    ctrl_aux |= 1U;
    #line 973 
    writel(ctrl_aux,(void *)(hw->hw_addr + 224U));
    #line 974 
    readl((void *)(hw->hw_addr + 8U));
    #line 977 
    ctrl_aux = readl((void *)(hw->hw_addr + 224U));
    #line 978 
    ctrl_aux |= 4U;
    #line 979 
    ctrl_aux &= 4294967293U;
    #line 980 
    writel(ctrl_aux,(void *)(hw->hw_addr + 224U));
    #line 981 
    readl((void *)(hw->hw_addr + 8U));
    #line 982 
    ret_val = e1000_copper_link_rtl_setup(hw);
    #line 984 
    if (ret_val != 0) {
      {
        #line 985 
        bool branch_0;
        #line 985 
        struct _ddebug __UNIQUE_ID_ddebug557 = {.modname = (char *)"e1000", .function = (char *)"gbe_dhg_phy_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"e1000_copper_link_rtl_setup failed!\n", .lineno = (unsigned int)985U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 985 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug557.key.dd_key_false.key,(_Bool)0);
        #line 985 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 985 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug557,e1000_get_hw_dev(hw),(char *)"e1000_copper_link_rtl_setup failed!\n");
        }
      }
      #line 986 
      return ret_val;
    }
    #line 988 
    break;
    #line 989 
    default: 
             #line 989 
    ;
    {
      #line 990 
      bool branch_1;
      #line 990 
      struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"e1000", .function = (char *)"gbe_dhg_phy_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error Resetting the PHY\n", .lineno = (unsigned int)990U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 990 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
      #line 990 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 990 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug558,e1000_get_hw_dev(hw),(char *)"Error Resetting the PHY\n");
      }
    }
    #line 991 
    return 6;
  }
  #line 994 
  return 0;
}

#line 1003  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_copper_link_preconfig(struct e1000_hw *hw)
{
  #line 1005 
  u32 ctrl;
  #line 1006 
  s32 ret_val;
  #line 1007 
  u16 phy_data;
  #line 1009 
  ctrl = readl((void *)hw->hw_addr);
  #line 1014 
  if (hw->mac_type > (unsigned int)3) {
    #line 1015 
    ctrl |= 64U;
    #line 1016 
    ctrl &= 4294961151U;
    #line 1017 
    writel(ctrl,(void *)hw->hw_addr);
  }
  else {
    #line 1019 
    ctrl |= 6208U;
    #line 1021 
    writel(ctrl,(void *)hw->hw_addr);
    #line 1022 
    ret_val = e1000_phy_hw_reset(hw);
    #line 1023 
    if (ret_val != 0) 
                      #line 1024 
                      return ret_val;
  }
  #line 1028 
  ret_val = e1000_detect_gig_phy(hw);
  #line 1029 
  if (ret_val != 0) {
    {
      #line 1030 
      bool branch;
      #line 1030 
      struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_preconfig", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error, did not detect valid phy.\n", .lineno = (unsigned int)1030U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1030 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
      #line 1030 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1030 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug559,e1000_get_hw_dev(hw),(char *)"Error, did not detect valid phy.\n");
      }
    }
    #line 1031 
    return ret_val;
  }
  {
    #line 1033 
    bool branch_0;
    #line 1033 
    struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_preconfig", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Phy ID = %x\n", .lineno = (unsigned int)1033U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1033 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
    #line 1033 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 1033 
      ;
      #line 1033 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug560,e1000_get_hw_dev(hw),(char *)"Phy ID = %x\n",hw->phy_id);
    }
  }
  #line 1036 
  ret_val = e1000_set_phy_mode(hw);
  #line 1037 
  if (ret_val != 0) 
                    #line 1038 
                    return ret_val;
  #line 1040 
  if (hw->mac_type == (unsigned int)7 || hw->mac_type == (unsigned int)10) {
    #line 1042 
    ret_val = e1000_read_phy_reg(hw,16U,& phy_data);
    #line 1044 
    phy_data = (unsigned short)((unsigned int)phy_data | 8U);
    #line 1045 
    ret_val = e1000_write_phy_reg(hw,16U,(unsigned short)((int)phy_data));
  }
  #line 1049 
  if ((((hw->mac_type <= (unsigned int)3 || hw->mac_type == (unsigned int)11) || hw->mac_type == (unsigned int)13) || hw->mac_type == (unsigned int)12) || hw->mac_type == (unsigned int)14) 
    #line 1053 
    hw->phy_reset_disable = (_Bool)0;
  #line 1055 
  return 0;
}

#line 1062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_copper_link_igp_setup(struct e1000_hw *hw)
{
  #line 1064 
  u32 led_ctrl;
  #line 1065 
  s32 ret_val;
  #line 1066 
  u16 phy_data;
  #line 1068 
  if ((int)hw->phy_reset_disable != 0) 
                                       #line 1069 
                                       return 0;
  #line 1071 
  ret_val = e1000_phy_reset(hw);
  #line 1072 
  if (ret_val != 0) {
    {
      #line 1073 
      bool branch;
      #line 1073 
      struct _ddebug __UNIQUE_ID_ddebug561 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_igp_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error Resetting the PHY\n", .lineno = (unsigned int)1073U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1073 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug561.key.dd_key_false.key,(_Bool)0);
      #line 1073 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1073 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug561,e1000_get_hw_dev(hw),(char *)"Error Resetting the PHY\n");
      }
    }
    #line 1074 
    return ret_val;
  }
  #line 1078 
  msleep(15U);
  #line 1080 
  led_ctrl = readl((void *)(hw->hw_addr + 3584U));
  #line 1081 
  led_ctrl &= 4294963455U;
  #line 1082 
  led_ctrl |= 117441280U;
  #line 1083 
  writel(led_ctrl,(void *)(hw->hw_addr + 3584U));
  #line 1086 
  if (hw->phy_type == (unsigned int)1) {
    #line 1088 
    ret_val = e1000_set_d3_lplu_state(hw,(_Bool)0);
    #line 1089 
    if (ret_val != 0) {
      {
        #line 1090 
        bool branch_0;
        #line 1090 
        struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_igp_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error Disabling LPLU D3\n", .lineno = (unsigned int)1090U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1090 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
        #line 1090 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 1090 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug562,e1000_get_hw_dev(hw),(char *)"Error Disabling LPLU D3\n");
        }
      }
      #line 1091 
      return ret_val;
    }
  }
  #line 1096 
  ret_val = e1000_read_phy_reg(hw,18U,& phy_data);
  #line 1097 
  if (ret_val != 0) 
                    #line 1098 
                    return ret_val;
  #line 1100 
  if (hw->mac_type == (unsigned int)11 || hw->mac_type == (unsigned int)13) {
    #line 1101 
    hw->dsp_config_state = 0;
    #line 1103 
    phy_data = (unsigned short)((unsigned int)phy_data & 53247U);
    #line 1106 
    hw->mdix = (unsigned char)1U;
  }
  else {
    #line 1109 
    hw->dsp_config_state = 1;
    #line 1110 
    phy_data = (unsigned short)((unsigned int)phy_data & 61439U);
    #line 1112 
    switch ((int)hw->mdix) {
      #line 1113 
      case 1: 
              #line 1113 
      ;
      #line 1114 
      phy_data = (unsigned short)((unsigned int)phy_data & 57343U);
      #line 1115 
      break;
      #line 1116 
      case 2: 
              #line 1116 
      ;
      #line 1117 
      phy_data = (unsigned short)((unsigned int)phy_data | 8192U);
      #line 1118 
      break;
      #line 1119 
      case 0: 
              #line 1119 
      ;
      #line 1120 
      default: 
               #line 1120 
      ;
      #line 1121 
      phy_data = (unsigned short)((unsigned int)phy_data | 4096U);
      #line 1122 
      break;
    }
  }
  #line 1125 
  ret_val = e1000_write_phy_reg(hw,18U,(unsigned short)((int)phy_data));
  #line 1126 
  if (ret_val != 0) 
                    #line 1127 
                    return ret_val;
  #line 1130 
  if ((unsigned int)hw->autoneg != 0U) {
    #line 1131 
    e1000_ms_type phy_ms_setting = hw->master_slave;
    #line 1133 
    if (hw->ffe_config_state == (unsigned int)1) 
                                                 #line 1134 
                                                 hw->ffe_config_state = 0;
    #line 1136 
    if (hw->dsp_config_state == (unsigned int)2) 
                                                 #line 1137 
                                                 hw->dsp_config_state = 1;
    #line 1143 
    if ((unsigned int)hw->autoneg_advertised == 32U) {
      #line 1145 
      ret_val = e1000_read_phy_reg(hw,16U,& phy_data);
      #line 1148 
      if (ret_val != 0) 
                        #line 1149 
                        return ret_val;
      #line 1150 
      phy_data = (unsigned short)((unsigned int)phy_data & 65407U);
      #line 1151 
      ret_val = e1000_write_phy_reg(hw,16U,(unsigned short)((int)phy_data));
      #line 1154 
      if (ret_val != 0) 
                        #line 1155 
                        return ret_val;
      #line 1157 
      ret_val = e1000_read_phy_reg(hw,9U,& phy_data);
      #line 1159 
      if (ret_val != 0) 
                        #line 1160 
                        return ret_val;
      #line 1161 
      phy_data = (unsigned short)((unsigned int)phy_data & 61439U);
      #line 1162 
      ret_val = e1000_write_phy_reg(hw,9U,(unsigned short)((int)phy_data));
      #line 1164 
      if (ret_val != 0) 
                        #line 1165 
                        return ret_val;
    }
    #line 1168 
    ret_val = e1000_read_phy_reg(hw,9U,& phy_data);
    #line 1169 
    if (ret_val != 0) 
                      #line 1170 
                      return ret_val;
    #line 1173 
    if (((int)phy_data & 4096) != 0) {
      #line 1173 
      int tmp_3;
      #line 1173 
      if (((int)phy_data & 2048) != 0) 
                                       #line 1173 
                                       tmp_3 = 1; else 
                                                       #line 1173 
                                                       tmp_3 = 2;
      #line 1173 
      hw->original_master_slave = tmp_3;
    }
    else 
         #line 1173 
         hw->original_master_slave = 3;
    #line 1178 
    switch ((unsigned int)phy_ms_setting) {
      #line 1179 
      case (unsigned int)1: 
                            #line 1179 
      ;
      #line 1180 
      phy_data = (unsigned short)((unsigned int)phy_data | 6144U);
      #line 1181 
      break;
      #line 1182 
      case (unsigned int)2: 
                            #line 1182 
      ;
      #line 1183 
      phy_data = (unsigned short)((unsigned int)phy_data | 4096U);
      #line 1184 
      phy_data = (unsigned short)((unsigned int)phy_data & 63487U);
      #line 1185 
      break;
      #line 1186 
      case (unsigned int)3: 
                            #line 1186 
      ;
      #line 1187 
      phy_data = (unsigned short)((unsigned int)phy_data & 61439U);
      #line 1188 
      default: 
               #line 1188 
      ;
      #line 1189 
      break;
    }
    #line 1191 
    ret_val = e1000_write_phy_reg(hw,9U,(unsigned short)((int)phy_data));
    #line 1192 
    if (ret_val != 0) 
                      #line 1193 
                      return ret_val;
  }
  #line 1196 
  return 0;
}

#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_copper_link_mgp_setup(struct e1000_hw *hw)
{
  #line 1205 
  s32 ret_val;
  #line 1206 
  u16 phy_data;
  #line 1208 
  if ((int)hw->phy_reset_disable != 0) 
                                       #line 1209 
                                       return 0;
  #line 1212 
  ret_val = e1000_read_phy_reg(hw,16U,& phy_data);
  #line 1213 
  if (ret_val != 0) 
                    #line 1214 
                    return ret_val;
  #line 1216 
  phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  #line 1225 
  phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
  #line 1227 
  switch ((int)hw->mdix) {
    #line 1228 
    case 1: 
            #line 1228 
    ;
    #line 1229 
    phy_data = phy_data;
    #line 1230 
    break;
    #line 1231 
    case 2: 
            #line 1231 
    ;
    #line 1232 
    phy_data = (unsigned short)((unsigned int)phy_data | 32U);
    #line 1233 
    break;
    #line 1234 
    case 3: 
            #line 1234 
    ;
    #line 1235 
    phy_data = (unsigned short)((unsigned int)phy_data | 64U);
    #line 1236 
    break;
    #line 1237 
    case 0: 
            #line 1237 
    ;
    #line 1238 
    default: 
             #line 1238 
    ;
    #line 1239 
    phy_data = (unsigned short)((unsigned int)phy_data | 96U);
    #line 1240 
    break;
  }
  #line 1249 
  phy_data = (unsigned short)((unsigned int)phy_data & 65533U);
  #line 1250 
  if ((int)hw->disable_polarity_correction == 1) 
                                                 #line 1251 
                                                 phy_data = (unsigned short)((unsigned int)phy_data | 2U);
  #line 1252 
  ret_val = e1000_write_phy_reg(hw,16U,(unsigned short)((int)phy_data));
  #line 1253 
  if (ret_val != 0) 
                    #line 1254 
                    return ret_val;
  #line 1256 
  if (hw->phy_revision <= 3U) {
    #line 1260 
    ret_val = e1000_read_phy_reg(hw,20U,& phy_data);
    #line 1263 
    if (ret_val != 0) 
                      #line 1264 
                      return ret_val;
    #line 1266 
    phy_data = (unsigned short)((unsigned int)phy_data | 112U);
    #line 1268 
    if (hw->phy_revision == 2U && hw->phy_id == 21040320U) {
      #line 1271 
      phy_data = (unsigned short)((unsigned int)phy_data & 61951U);
      #line 1272 
      phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
      #line 1273 
      ret_val = e1000_write_phy_reg(hw,20U,(unsigned short)((int)phy_data));
      #line 1276 
      if (ret_val != 0) 
                        #line 1277 
                        return ret_val;
    }
    else {
      #line 1280 
      phy_data = (unsigned short)((unsigned int)phy_data & 61695U);
      #line 1282 
      phy_data = (unsigned short)((unsigned int)phy_data | 256U);
      #line 1284 
      ret_val = e1000_write_phy_reg(hw,20U,(unsigned short)((int)phy_data));
      #line 1287 
      if (ret_val != 0) 
                        #line 1288 
                        return ret_val;
    }
  }
  #line 1293 
  ret_val = e1000_phy_reset(hw);
  #line 1294 
  if (ret_val != 0) {
    {
      #line 1295 
      bool branch;
      #line 1295 
      struct _ddebug __UNIQUE_ID_ddebug563 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_mgp_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error Resetting the PHY\n", .lineno = (unsigned int)1295U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1295 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug563.key.dd_key_false.key,(_Bool)0);
      #line 1295 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1295 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug563,e1000_get_hw_dev(hw),(char *)"Error Resetting the PHY\n");
      }
    }
    #line 1296 
    return ret_val;
  }
  #line 1299 
  return 0;
}

#line 1309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_copper_link_autoneg(struct e1000_hw *hw)
{
  #line 1311 
  s32 ret_val;
  #line 1312 
  u16 phy_data;
  #line 1317 
  hw->autoneg_advertised = (unsigned short)((unsigned int)hw->autoneg_advertised & 47U);
  #line 1322 
  if ((unsigned int)hw->autoneg_advertised == 0U) 
                                                  #line 1323 
                                                  hw->autoneg_advertised = (unsigned short)47U;
  #line 1326 
  if (hw->phy_type == (unsigned int)3) 
                                       #line 1327 
                                       hw->autoneg_advertised = (unsigned short)((unsigned int)hw->autoneg_advertised & 15U);
  {
    #line 1329 
    bool branch;
    #line 1329 
    struct _ddebug __UNIQUE_ID_ddebug564 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Reconfiguring auto-neg advertisement params\n", .lineno = (unsigned int)1329U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1329 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug564.key.dd_key_false.key,(_Bool)0);
    #line 1329 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1329 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug564,e1000_get_hw_dev(hw),(char *)"Reconfiguring auto-neg advertisement params\n");
    }
  }
  #line 1330 
  ret_val = e1000_phy_setup_autoneg(hw);
  #line 1331 
  if (ret_val != 0) {
    {
      #line 1332 
      bool branch_0;
      #line 1332 
      struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error Setting up Auto-Negotiation\n", .lineno = (unsigned int)1332U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1332 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
      #line 1332 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1332 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug565,e1000_get_hw_dev(hw),(char *)"Error Setting up Auto-Negotiation\n");
      }
    }
    #line 1333 
    return ret_val;
  }
  {
    #line 1335 
    bool branch_1;
    #line 1335 
    struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Restarting Auto-Neg\n", .lineno = (unsigned int)1335U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1335 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
    #line 1335 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 1335 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug566,e1000_get_hw_dev(hw),(char *)"Restarting Auto-Neg\n");
    }
  }
  #line 1340 
  ret_val = e1000_read_phy_reg(hw,0U,& phy_data);
  #line 1341 
  if (ret_val != 0) 
                    #line 1342 
                    return ret_val;
  #line 1344 
  phy_data = (unsigned short)((unsigned int)phy_data | 4608U);
  #line 1345 
  ret_val = e1000_write_phy_reg(hw,0U,(unsigned short)((int)phy_data));
  #line 1346 
  if (ret_val != 0) 
                    #line 1347 
                    return ret_val;
  #line 1352 
  if ((unsigned int)hw->wait_autoneg_complete != 0U) {
    #line 1353 
    ret_val = e1000_wait_autoneg(hw);
    #line 1354 
    if (ret_val != 0) {
      {
        #line 1355 
        bool branch_2;
        #line 1355 
        struct _ddebug __UNIQUE_ID_ddebug567 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error while waiting for autoneg to complete\n", .lineno = (unsigned int)1355U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1355 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug567.key.dd_key_false.key,(_Bool)0);
        #line 1355 
        if ((long)((long)((int)branch_2 != 0)) != 0L) {
          #line 1355 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug567,e1000_get_hw_dev(hw),(char *)"Error while waiting for autoneg to complete\n");
        }
      }
      #line 1357 
      return ret_val;
    }
  }
  #line 1361 
  hw->get_link_status = (_Bool)1;
  #line 1363 
  return 0;
}

#line 1379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_copper_link_postconfig(struct e1000_hw *hw)
{
  #line 1381 
  s32 ret_val;
  #line 1383 
  if (hw->mac_type > (unsigned int)3 && hw->mac_type != (unsigned int)9) 
    #line 1384 
    e1000_config_collision_dist(hw);
  else {
    #line 1386 
    ret_val = e1000_config_mac_to_phy(hw);
    #line 1387 
    if (ret_val != 0) {
      {
        #line 1388 
        bool branch;
        #line 1388 
        struct _ddebug __UNIQUE_ID_ddebug568 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_postconfig", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error configuring MAC to PHY settings\n", .lineno = (unsigned int)1388U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1388 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug568.key.dd_key_false.key,(_Bool)0);
        #line 1388 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 1388 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug568,e1000_get_hw_dev(hw),(char *)"Error configuring MAC to PHY settings\n");
        }
      }
      #line 1389 
      return ret_val;
    }
  }
  #line 1392 
  ret_val = e1000_config_fc_after_link_up(hw);
  #line 1393 
  if (ret_val != 0) {
    {
      #line 1394 
      bool branch_0;
      #line 1394 
      struct _ddebug __UNIQUE_ID_ddebug569 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_postconfig", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error Configuring Flow Control\n", .lineno = (unsigned int)1394U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1394 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug569.key.dd_key_false.key,(_Bool)0);
      #line 1394 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1394 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug569,e1000_get_hw_dev(hw),(char *)"Error Configuring Flow Control\n");
      }
    }
    #line 1395 
    return ret_val;
  }
  #line 1399 
  if (hw->phy_type == (unsigned int)1) {
    #line 1400 
    ret_val = e1000_config_dsp_after_link_change(hw,(_Bool)1);
    #line 1401 
    if (ret_val != 0) {
      {
        #line 1402 
        bool branch_1;
        #line 1402 
        struct _ddebug __UNIQUE_ID_ddebug570 = {.modname = (char *)"e1000", .function = (char *)"e1000_copper_link_postconfig", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error Configuring DSP after link up\n", .lineno = (unsigned int)1402U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1402 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug570.key.dd_key_false.key,(_Bool)0);
        #line 1402 
        if ((long)((long)((int)branch_1 != 0)) != 0L) {
          #line 1402 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug570,e1000_get_hw_dev(hw),(char *)"Error Configuring DSP after link up\n");
        }
      }
      #line 1403 
      return ret_val;
    }
  }
  #line 1407 
  return 0;
}

#line 1416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_setup_copper_link(struct e1000_hw *hw)
{
  #line 1418 
  s32 ret_val;
  #line 1419 
  u16 i;
  #line 1420 
  u16 phy_data;
  #line 1423 
  ret_val = e1000_copper_link_preconfig(hw);
  #line 1424 
  if (ret_val != 0) 
                    #line 1425 
                    return ret_val;
  #line 1427 
  if (hw->phy_type == (unsigned int)1) {
    #line 1428 
    ret_val = e1000_copper_link_igp_setup(hw);
    #line 1429 
    if (ret_val != 0) 
                      #line 1430 
                      return ret_val;
  }
  else 
    #line 1431 
    if (hw->phy_type == (unsigned int)0) {
      #line 1432 
      ret_val = e1000_copper_link_mgp_setup(hw);
      #line 1433 
      if (ret_val != 0) 
                        #line 1434 
                        return ret_val;
    }
    else {
      #line 1436 
      ret_val = gbe_dhg_phy_setup(hw);
      #line 1437 
      if (ret_val != 0) {
        {
          #line 1438 
          bool branch;
          #line 1438 
          struct _ddebug __UNIQUE_ID_ddebug571 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"gbe_dhg_phy_setup failed!\n", .lineno = (unsigned int)1438U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1438 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug571.key.dd_key_false.key,(_Bool)0);
          #line 1438 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 1438 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug571,e1000_get_hw_dev(hw),(char *)"gbe_dhg_phy_setup failed!\n");
          }
        }
        #line 1439 
        return ret_val;
      }
    }
  #line 1443 
  if ((unsigned int)hw->autoneg != 0U) {
    #line 1447 
    ret_val = e1000_copper_link_autoneg(hw);
    #line 1448 
    if (ret_val != 0) 
                      #line 1449 
                      return ret_val;
  }
  else {
    {
      #line 1454 
      bool branch_0;
      #line 1454 
      struct _ddebug __UNIQUE_ID_ddebug572 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Forcing speed and duplex\n", .lineno = (unsigned int)1454U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1454 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug572.key.dd_key_false.key,(_Bool)0);
      #line 1454 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1454 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug572,e1000_get_hw_dev(hw),(char *)"Forcing speed and duplex\n");
      }
    }
    #line 1455 
    ret_val = e1000_phy_force_speed_duplex(hw);
    #line 1456 
    if (ret_val != 0) {
      {
        #line 1457 
        bool branch_1;
        #line 1457 
        struct _ddebug __UNIQUE_ID_ddebug573 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error Forcing Speed and Duplex\n", .lineno = (unsigned int)1457U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1457 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug573.key.dd_key_false.key,(_Bool)0);
        #line 1457 
        if ((long)((long)((int)branch_1 != 0)) != 0L) {
          #line 1457 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug573,e1000_get_hw_dev(hw),(char *)"Error Forcing Speed and Duplex\n");
        }
      }
      #line 1458 
      return ret_val;
    }
  }
  #line 1465 
  i = (unsigned short)0U;
  #line 1465 
  while ((unsigned int)i <= 9U) {
    #line 1466 
    ret_val = e1000_read_phy_reg(hw,1U,& phy_data);
    #line 1467 
    if (ret_val != 0) 
                      #line 1468 
                      return ret_val;
    #line 1469 
    ret_val = e1000_read_phy_reg(hw,1U,& phy_data);
    #line 1470 
    if (ret_val != 0) 
                      #line 1471 
                      return ret_val;
    #line 1473 
    if (((int)phy_data & 4) != 0) {
      #line 1475 
      ret_val = e1000_copper_link_postconfig(hw);
      #line 1476 
      if (ret_val != 0) 
                        #line 1477 
                        return ret_val;
      {
        #line 1479 
        bool branch_2;
        #line 1479 
        struct _ddebug __UNIQUE_ID_ddebug574 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Valid link established!!!\n", .lineno = (unsigned int)1479U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1479 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug574.key.dd_key_false.key,(_Bool)0);
        #line 1479 
        if ((long)((long)((int)branch_2 != 0)) != 0L) {
          #line 1479 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug574,e1000_get_hw_dev(hw),(char *)"Valid link established!!!\n");
        }
      }
      #line 1480 
      return 0;
    }
    #line 1482 
    __const_udelay(42950UL);
    #line 1465 
    i = (u16)((int)i + 1);
  }
  {
    #line 1485 
    bool branch_3;
    #line 1485 
    struct _ddebug __UNIQUE_ID_ddebug575 = {.modname = (char *)"e1000", .function = (char *)"e1000_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Unable to establish link!!!\n", .lineno = (unsigned int)1485U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1485 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug575.key.dd_key_false.key,(_Bool)0);
    #line 1485 
    if ((long)((long)((int)branch_3 != 0)) != 0L) {
      #line 1485 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug575,e1000_get_hw_dev(hw),(char *)"Unable to establish link!!!\n");
    }
  }
  #line 1486 
  return 0;
}

#line 1495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_phy_setup_autoneg(struct e1000_hw *hw)
{
  #line 1497 
  s32 ret_val;
  #line 1498 
  u16 mii_autoneg_adv_reg;
  #line 1499 
  u16 mii_1000t_ctrl_reg;
  #line 1502 
  ret_val = e1000_read_phy_reg(hw,4U,& mii_autoneg_adv_reg);
  #line 1503 
  if (ret_val != 0) 
                    #line 1504 
                    return ret_val;
  #line 1507 
  ret_val = e1000_read_phy_reg(hw,9U,& mii_1000t_ctrl_reg);
  #line 1508 
  if (ret_val != 0) 
                    #line 1509 
                    return ret_val;
  else 
    #line 1510 
    if (hw->phy_type == (unsigned int)3) 
                                         #line 1511 
                                         mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg & 64767U);
  #line 1524 
  mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 65055U);
  #line 1525 
  mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg & 64767U);
  {
    #line 1527 
    bool branch;
    #line 1527 
    struct _ddebug __UNIQUE_ID_ddebug576 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"autoneg_advertised %x\n", .lineno = (unsigned int)1527U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1527 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug576.key.dd_key_false.key,(_Bool)0);
    #line 1527 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1527 
      ;
      #line 1527 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug576,e1000_get_hw_dev(hw),(char *)"autoneg_advertised %x\n",(int)hw->autoneg_advertised);
    }
  }
  #line 1530 
  if (((int)hw->autoneg_advertised & 1) != 0) {
    {
      #line 1531 
      bool branch_0;
      #line 1531 
      struct _ddebug __UNIQUE_ID_ddebug577 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Advertise 10mb Half duplex\n", .lineno = (unsigned int)1531U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1531 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug577.key.dd_key_false.key,(_Bool)0);
      #line 1531 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1531 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug577,e1000_get_hw_dev(hw),(char *)"Advertise 10mb Half duplex\n");
      }
    }
    #line 1532 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 32U);
  }
  #line 1536 
  if (((int)hw->autoneg_advertised & 2) != 0) {
    {
      #line 1537 
      bool branch_1;
      #line 1537 
      struct _ddebug __UNIQUE_ID_ddebug578 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Advertise 10mb Full duplex\n", .lineno = (unsigned int)1537U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1537 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug578.key.dd_key_false.key,(_Bool)0);
      #line 1537 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 1537 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug578,e1000_get_hw_dev(hw),(char *)"Advertise 10mb Full duplex\n");
      }
    }
    #line 1538 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 64U);
  }
  #line 1542 
  if (((int)hw->autoneg_advertised & 4) != 0) {
    {
      #line 1543 
      bool branch_2;
      #line 1543 
      struct _ddebug __UNIQUE_ID_ddebug579 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Advertise 100mb Half duplex\n", .lineno = (unsigned int)1543U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1543 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug579.key.dd_key_false.key,(_Bool)0);
      #line 1543 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 1543 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug579,e1000_get_hw_dev(hw),(char *)"Advertise 100mb Half duplex\n");
      }
    }
    #line 1544 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 128U);
  }
  #line 1548 
  if (((int)hw->autoneg_advertised & 8) != 0) {
    {
      #line 1549 
      bool branch_3;
      #line 1549 
      struct _ddebug __UNIQUE_ID_ddebug580 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Advertise 100mb Full duplex\n", .lineno = (unsigned int)1549U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1549 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug580.key.dd_key_false.key,(_Bool)0);
      #line 1549 
      if ((long)((long)((int)branch_3 != 0)) != 0L) {
        #line 1549 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug580,e1000_get_hw_dev(hw),(char *)"Advertise 100mb Full duplex\n");
      }
    }
    #line 1550 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 256U);
  }
  #line 1554 
  if (((int)hw->autoneg_advertised & 16) != 0) {
    #line 1555 
    bool branch_4;
    #line 1555 
    struct _ddebug __UNIQUE_ID_ddebug581 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Advertise 1000mb Half duplex requested, request denied!\n", .lineno = (unsigned int)1555U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1555 
    branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug581.key.dd_key_false.key,(_Bool)0);
    #line 1555 
    if ((long)((long)((int)branch_4 != 0)) != 0L) {
      #line 1555 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug581,e1000_get_hw_dev(hw),(char *)"Advertise 1000mb Half duplex requested, request denied!\n");
    }
  }
  #line 1560 
  if (((int)hw->autoneg_advertised & 32) != 0) {
    {
      #line 1561 
      bool branch_5;
      #line 1561 
      struct _ddebug __UNIQUE_ID_ddebug582 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Advertise 1000mb Full duplex\n", .lineno = (unsigned int)1561U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1561 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug582.key.dd_key_false.key,(_Bool)0);
      #line 1561 
      if ((long)((long)((int)branch_5 != 0)) != 0L) {
        #line 1561 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug582,e1000_get_hw_dev(hw),(char *)"Advertise 1000mb Full duplex\n");
      }
    }
    #line 1562 
    mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg | 512U);
  }
  #line 1582 
  switch ((unsigned int)hw->fc) {
    #line 1583 
    case (unsigned int)0: 
                          #line 1583 
    ;
    #line 1587 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 62463U);
    #line 1588 
    break;
    #line 1589 
    case (unsigned int)1: 
                          #line 1589 
    ;
    #line 1599 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 3072U);
    #line 1600 
    break;
    #line 1601 
    case (unsigned int)2: 
                          #line 1601 
    ;
    #line 1605 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 2048U);
    #line 1606 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 64511U);
    #line 1607 
    break;
    #line 1608 
    case (unsigned int)3: 
                          #line 1608 
    ;
    #line 1612 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 3072U);
    #line 1613 
    break;
    #line 1614 
    default: 
             #line 1614 
    ;
    {
      #line 1615 
      bool branch_6;
      #line 1615 
      struct _ddebug __UNIQUE_ID_ddebug583 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Flow control param set incorrectly\n", .lineno = (unsigned int)1615U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1615 
      branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug583.key.dd_key_false.key,(_Bool)0);
      #line 1615 
      if ((long)((long)((int)branch_6 != 0)) != 0L) {
        #line 1615 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug583,e1000_get_hw_dev(hw),(char *)"Flow control param set incorrectly\n");
      }
    }
    #line 1616 
    return -3;
  }
  #line 1619 
  ret_val = e1000_write_phy_reg(hw,4U,(unsigned short)((int)mii_autoneg_adv_reg));
  #line 1620 
  if (ret_val != 0) 
                    #line 1621 
                    return ret_val;
  {
    #line 1623 
    bool branch_7;
    #line 1623 
    struct _ddebug __UNIQUE_ID_ddebug584 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Auto-Neg Advertising %x\n", .lineno = (unsigned int)1623U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1623 
    branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug584.key.dd_key_false.key,(_Bool)0);
    #line 1623 
    if ((long)((long)((int)branch_7 != 0)) != 0L) {
      #line 1623 
      ;
      #line 1623 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug584,e1000_get_hw_dev(hw),(char *)"Auto-Neg Advertising %x\n",(int)mii_autoneg_adv_reg);
    }
  }
  #line 1625 
  if (hw->phy_type == (unsigned int)3) 
                                       #line 1626 
                                       mii_1000t_ctrl_reg = (unsigned short)0U;
  else {
    #line 1628 
    ret_val = e1000_write_phy_reg(hw,9U,(unsigned short)((int)mii_1000t_ctrl_reg));
    #line 1630 
    if (ret_val != 0) 
                      #line 1631 
                      return ret_val;
  }
  #line 1634 
  return 0;
}

#line 1643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_phy_force_speed_duplex(struct e1000_hw *hw)
{
  #line 1645 
  u32 ctrl;
  #line 1646 
  s32 ret_val;
  #line 1647 
  u16 mii_ctrl_reg;
  #line 1648 
  u16 mii_status_reg;
  #line 1649 
  u16 phy_data;
  #line 1650 
  u16 i;
  #line 1653 
  hw->fc = E1000_FC_NONE;
  {
    #line 1655 
    bool branch;
    #line 1655 
    struct _ddebug __UNIQUE_ID_ddebug585 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_force_speed_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"hw->fc = %d\n", .lineno = (unsigned int)1655U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1655 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug585.key.dd_key_false.key,(_Bool)0);
    #line 1655 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1655 
      ;
      #line 1655 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug585,e1000_get_hw_dev(hw),(char *)"hw->fc = %d\n",(unsigned int)hw->fc);
    }
  }
  #line 1658 
  ctrl = readl((void *)hw->hw_addr);
  #line 1661 
  ctrl |= 6144U;
  #line 1662 
  ctrl &= 4294966527U;
  #line 1665 
  ctrl &= 4294967263U;
  #line 1668 
  ret_val = e1000_read_phy_reg(hw,0U,& mii_ctrl_reg);
  #line 1669 
  if (ret_val != 0) 
                    #line 1670 
                    return ret_val;
  #line 1674 
  mii_ctrl_reg = (unsigned short)((unsigned int)mii_ctrl_reg & 61439U);
  #line 1677 
  if ((unsigned int)hw->forced_speed_duplex == 3U || (unsigned int)hw->forced_speed_duplex == 1U) {
    #line 1682 
    ctrl |= 1U;
    #line 1683 
    mii_ctrl_reg = (unsigned short)((unsigned int)mii_ctrl_reg | 256U);
    {
      #line 1684 
      bool branch_0;
      #line 1684 
      struct _ddebug __UNIQUE_ID_ddebug586 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_force_speed_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Full Duplex\n", .lineno = (unsigned int)1684U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1684 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug586.key.dd_key_false.key,(_Bool)0);
      #line 1684 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1684 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug586,e1000_get_hw_dev(hw),(char *)"Full Duplex\n");
      }
    }
  }
  else {
    #line 1689 
    ctrl &= 4294967294U;
    #line 1690 
    mii_ctrl_reg = (unsigned short)((unsigned int)mii_ctrl_reg & 65279U);
    {
      #line 1691 
      bool branch_1;
      #line 1691 
      struct _ddebug __UNIQUE_ID_ddebug587 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_force_speed_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Half Duplex\n", .lineno = (unsigned int)1691U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1691 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug587.key.dd_key_false.key,(_Bool)0);
      #line 1691 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 1691 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug587,e1000_get_hw_dev(hw),(char *)"Half Duplex\n");
      }
    }
  }
  #line 1695 
  if ((unsigned int)hw->forced_speed_duplex + 254U <= 1U) {
    #line 1698 
    ctrl |= 256U;
    #line 1699 
    mii_ctrl_reg = (unsigned short)((unsigned int)mii_ctrl_reg | 8192U);
    #line 1700 
    mii_ctrl_reg = (unsigned short)((unsigned int)mii_ctrl_reg & 65471U);
    {
      #line 1701 
      bool branch_2;
      #line 1701 
      struct _ddebug __UNIQUE_ID_ddebug588 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_force_speed_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Forcing 100mb ", .lineno = (unsigned int)1701U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1701 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug588.key.dd_key_false.key,(_Bool)0);
      #line 1701 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 1701 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug588,e1000_get_hw_dev(hw),(char *)"Forcing 100mb ");
      }
    }
  }
  else {
    #line 1704 
    ctrl &= 4294966527U;
    #line 1705 
    mii_ctrl_reg = mii_ctrl_reg;
    #line 1706 
    mii_ctrl_reg = (unsigned short)((unsigned int)mii_ctrl_reg & 57279U);
    {
      #line 1707 
      bool branch_3;
      #line 1707 
      struct _ddebug __UNIQUE_ID_ddebug589 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_force_speed_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Forcing 10mb ", .lineno = (unsigned int)1707U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1707 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug589.key.dd_key_false.key,(_Bool)0);
      #line 1707 
      if ((long)((long)((int)branch_3 != 0)) != 0L) {
        #line 1707 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug589,e1000_get_hw_dev(hw),(char *)"Forcing 10mb ");
      }
    }
  }
  #line 1710 
  e1000_config_collision_dist(hw);
  #line 1713 
  writel(ctrl,(void *)hw->hw_addr);
  #line 1715 
  if (hw->phy_type == (unsigned int)0) {
    #line 1716 
    ret_val = e1000_read_phy_reg(hw,16U,& phy_data);
    #line 1718 
    if (ret_val != 0) 
                      #line 1719 
                      return ret_val;
    #line 1724 
    phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
    #line 1725 
    ret_val = e1000_write_phy_reg(hw,16U,(unsigned short)((int)phy_data));
    #line 1727 
    if (ret_val != 0) 
                      #line 1728 
                      return ret_val;
    {
      #line 1730 
      bool branch_4;
      #line 1730 
      struct _ddebug __UNIQUE_ID_ddebug590 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_force_speed_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"M88E1000 PSCR: %x\n", .lineno = (unsigned int)1730U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1730 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug590.key.dd_key_false.key,(_Bool)0);
      #line 1730 
      if ((long)((long)((int)branch_4 != 0)) != 0L) {
        #line 1730 
        ;
        #line 1730 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug590,e1000_get_hw_dev(hw),(char *)"M88E1000 PSCR: %x\n",(int)phy_data);
      }
    }
    #line 1733 
    mii_ctrl_reg = (unsigned short)((unsigned int)mii_ctrl_reg | 32768U);
  }
  else {
    #line 1740 
    ret_val = e1000_read_phy_reg(hw,18U,& phy_data);
    #line 1742 
    if (ret_val != 0) 
                      #line 1743 
                      return ret_val;
    #line 1745 
    phy_data = (unsigned short)((unsigned int)phy_data & 61439U);
    #line 1746 
    phy_data = (unsigned short)((unsigned int)phy_data & 57343U);
    #line 1748 
    ret_val = e1000_write_phy_reg(hw,18U,(unsigned short)((int)phy_data));
    #line 1750 
    if (ret_val != 0) 
                      #line 1751 
                      return ret_val;
  }
  #line 1755 
  ret_val = e1000_write_phy_reg(hw,0U,(unsigned short)((int)mii_ctrl_reg));
  #line 1756 
  if (ret_val != 0) 
                    #line 1757 
                    return ret_val;
  #line 1759 
  __const_udelay(4295UL);
  #line 1768 
  if ((unsigned int)hw->wait_autoneg_complete != 0U) {
    {
      #line 1770 
      bool branch_5;
      #line 1770 
      struct _ddebug __UNIQUE_ID_ddebug591 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_force_speed_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Waiting for forced speed/duplex link.\n", .lineno = (unsigned int)1770U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1770 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug591.key.dd_key_false.key,(_Bool)0);
      #line 1770 
      if ((long)((long)((int)branch_5 != 0)) != 0L) {
        #line 1770 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug591,e1000_get_hw_dev(hw),(char *)"Waiting for forced speed/duplex link.\n");
      }
    }
    #line 1771 
    mii_status_reg = (unsigned short)0U;
    #line 1774 
    i = (unsigned short)20U;
    #line 1774 
    while ((unsigned int)i != 0U) {
      #line 1778 
      ret_val = e1000_read_phy_reg(hw,1U,& mii_status_reg);
      #line 1780 
      if (ret_val != 0) 
                        #line 1781 
                        return ret_val;
      #line 1783 
      ret_val = e1000_read_phy_reg(hw,1U,& mii_status_reg);
      #line 1785 
      if (ret_val != 0) 
                        #line 1786 
                        return ret_val;
      #line 1788 
      if (((int)mii_status_reg & 4) != 0) 
                                          #line 1789 
                                          break;
      #line 1790 
      msleep(100U);
      #line 1774 
      i = (u16)((int)i - 1);
    }
    #line 1792 
    if ((unsigned int)i == 0U && hw->phy_type == (unsigned int)0) {
      #line 1796 
      ret_val = e1000_phy_reset_dsp(hw);
      #line 1797 
      if (ret_val != 0) {
        {
          #line 1798 
          bool branch_6;
          #line 1798 
          struct _ddebug __UNIQUE_ID_ddebug592 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_force_speed_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error Resetting PHY DSP\n", .lineno = (unsigned int)1798U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1798 
          branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug592.key.dd_key_false.key,(_Bool)0);
          #line 1798 
          if ((long)((long)((int)branch_6 != 0)) != 0L) {
            #line 1798 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug592,e1000_get_hw_dev(hw),(char *)"Error Resetting PHY DSP\n");
          }
        }
        #line 1799 
        return ret_val;
      }
    }
    #line 1805 
    i = (unsigned short)20U;
    #line 1805 
    while ((unsigned int)i != 0U) {
      #line 1806 
      if (((int)mii_status_reg & 4) != 0) 
                                          #line 1807 
                                          break;
      #line 1808 
      msleep(100U);
      #line 1812 
      ret_val = e1000_read_phy_reg(hw,1U,& mii_status_reg);
      #line 1814 
      if (ret_val != 0) 
                        #line 1815 
                        return ret_val;
      #line 1817 
      ret_val = e1000_read_phy_reg(hw,1U,& mii_status_reg);
      #line 1819 
      if (ret_val != 0) 
                        #line 1820 
                        return ret_val;
      #line 1805 
      i = (u16)((int)i - 1);
    }
  }
  #line 1824 
  if (hw->phy_type == (unsigned int)0) {
    #line 1830 
    ret_val = e1000_read_phy_reg(hw,20U,& phy_data);
    #line 1833 
    if (ret_val != 0) 
                      #line 1834 
                      return ret_val;
    #line 1836 
    phy_data = (unsigned short)((unsigned int)phy_data | 112U);
    #line 1837 
    ret_val = e1000_write_phy_reg(hw,20U,(unsigned short)((int)phy_data));
    #line 1840 
    if (ret_val != 0) 
                      #line 1841 
                      return ret_val;
    #line 1847 
    ret_val = e1000_read_phy_reg(hw,16U,& phy_data);
    #line 1849 
    if (ret_val != 0) 
                      #line 1850 
                      return ret_val;
    #line 1852 
    phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
    #line 1853 
    ret_val = e1000_write_phy_reg(hw,16U,(unsigned short)((int)phy_data));
    #line 1855 
    if (ret_val != 0) 
                      #line 1856 
                      return ret_val;
    #line 1858 
    if (((unsigned int)hw->mac_type + 4294967293U <= 1U && (unsigned int)hw->autoneg == 0U) && (unsigned int)hw->forced_speed_duplex <= 1U) {
      #line 1863 
      ret_val = e1000_polarity_reversal_workaround(hw);
      #line 1864 
      if (ret_val != 0) 
                        #line 1865 
                        return ret_val;
    }
  }
  #line 1868 
  return 0;
}

#line 1879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
void e1000_config_collision_dist(struct e1000_hw *hw)
{
  #line 1881 
  u32 tctl;
  #line 1881 
  u32 coll_dist;
  #line 1883 
  if (hw->mac_type <= (unsigned int)2) 
                                       #line 1884 
                                       coll_dist = 64U; else 
                                                             #line 1886 
                                                             coll_dist = 63U;
  #line 1888 
  tctl = readl((void *)(hw->hw_addr + 1024U));
  #line 1890 
  tctl &= 4290777087U;
  #line 1891 
  tctl = (coll_dist << 12) | tctl;
  #line 1893 
  writel(tctl,(void *)(hw->hw_addr + 1024U));
  #line 1894 
  readl((void *)(hw->hw_addr + 8U));
  #line 1895 
  return;
}

#line 1906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_config_mac_to_phy(struct e1000_hw *hw)
{
  #line 1908 
  u32 ctrl;
  #line 1909 
  s32 ret_val;
  #line 1910 
  u16 phy_data;
  #line 1915 
  if (hw->mac_type > (unsigned int)3 && hw->mac_type != (unsigned int)9) 
    #line 1916 
    return 0;
  #line 1921 
  ctrl = readl((void *)hw->hw_addr);
  #line 1922 
  ctrl |= 6144U;
  #line 1923 
  ctrl &= 4294966399U;
  #line 1925 
  switch ((unsigned int)hw->phy_type) {
    #line 1926 
    case (unsigned int)3: 
                          #line 1926 
    ;
    #line 1927 
    ret_val = e1000_read_phy_reg(hw,0U,& phy_data);
    #line 1928 
    if (ret_val != 0) 
                      #line 1929 
                      return ret_val;
    #line 1931 
    if (((int)phy_data & 256) != 0) 
                                    #line 1932 
                                    ctrl |= 1U; else 
                                                     #line 1934 
                                                     ctrl &= 4294967294U;
    #line 1936 
    if (((int)phy_data & 2097152) != 0) 
                                        #line 1937 
                                        ctrl |= 256U; else 
                                                           #line 1939 
                                                           ctrl = ctrl;
    #line 1941 
    e1000_config_collision_dist(hw);
    #line 1942 
    break;
    #line 1943 
    default: 
             #line 1943 
    ;
    #line 1947 
    ret_val = e1000_read_phy_reg(hw,17U,& phy_data);
    #line 1949 
    if (ret_val != 0) 
                      #line 1950 
                      return ret_val;
    #line 1952 
    if (((int)phy_data & 8192) != 0) 
                                     #line 1953 
                                     ctrl |= 1U; else 
                                                      #line 1955 
                                                      ctrl &= 4294967294U;
    #line 1957 
    e1000_config_collision_dist(hw);
    #line 1962 
    if (((int)phy_data & 49152) == 32768) 
                                          #line 1963 
                                          ctrl |= 512U;
    else 
      #line 1964 
      if (((int)phy_data & 49152) == 16384) 
                                            #line 1966 
                                            ctrl |= 256U;
  }
  #line 1970 
  writel(ctrl,(void *)hw->hw_addr);
  #line 1971 
  return 0;
}

#line 1985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_force_mac_fc(struct e1000_hw *hw)
{
  #line 1987 
  u32 ctrl;
  #line 1990 
  ctrl = readl((void *)hw->hw_addr);
  #line 2010 
  switch ((unsigned int)hw->fc) {
    #line 2011 
    case (unsigned int)0: 
                          #line 2011 
    ;
    #line 2012 
    ctrl &= 3892314111U;
    #line 2013 
    break;
    #line 2014 
    case (unsigned int)1: 
                          #line 2014 
    ;
    #line 2015 
    ctrl &= 4026531839U;
    #line 2016 
    ctrl |= 134217728U;
    #line 2017 
    break;
    #line 2018 
    case (unsigned int)2: 
                          #line 2018 
    ;
    #line 2019 
    ctrl &= 4160749567U;
    #line 2020 
    ctrl |= 268435456U;
    #line 2021 
    break;
    #line 2022 
    case (unsigned int)3: 
                          #line 2022 
    ;
    #line 2023 
    ctrl |= 402653184U;
    #line 2024 
    break;
    #line 2025 
    default: 
             #line 2025 
    ;
    {
      #line 2026 
      bool branch;
      #line 2026 
      struct _ddebug __UNIQUE_ID_ddebug593 = {.modname = (char *)"e1000", .function = (char *)"e1000_force_mac_fc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Flow control param set incorrectly\n", .lineno = (unsigned int)2026U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2026 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug593.key.dd_key_false.key,(_Bool)0);
      #line 2026 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2026 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug593,e1000_get_hw_dev(hw),(char *)"Flow control param set incorrectly\n");
      }
    }
    #line 2027 
    return -3;
  }
  #line 2031 
  if (hw->mac_type == (unsigned int)1) 
                                       #line 2032 
                                       ctrl &= 4026531839U;
  #line 2034 
  writel(ctrl,(void *)hw->hw_addr);
  #line 2035 
  return 0;
}

#line 2049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_config_fc_after_link_up(struct e1000_hw *hw)
{
  #line 2051 
  s32 ret_val;
  #line 2052 
  u16 mii_status_reg;
  #line 2053 
  u16 mii_nway_adv_reg;
  #line 2054 
  u16 mii_nway_lp_ability_reg;
  #line 2055 
  u16 speed;
  #line 2056 
  u16 duplex;
  #line 2063 
  if ((unsigned int)hw->media_type + 4294967295U <= 1U && hw->autoneg_failed != 0U || hw->media_type == (unsigned int)0 && (unsigned int)hw->autoneg == 0U) {
    #line 2068 
    ret_val = e1000_force_mac_fc(hw);
    #line 2069 
    if (ret_val != 0) {
      {
        #line 2070 
        bool branch;
        #line 2070 
        struct _ddebug __UNIQUE_ID_ddebug594 = {.modname = (char *)"e1000", .function = (char *)"e1000_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error forcing flow control settings\n", .lineno = (unsigned int)2070U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2070 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug594.key.dd_key_false.key,(_Bool)0);
        #line 2070 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 2070 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug594,e1000_get_hw_dev(hw),(char *)"Error forcing flow control settings\n");
        }
      }
      #line 2071 
      return ret_val;
    }
  }
  #line 2080 
  if (hw->media_type == (unsigned int)0 && (unsigned int)hw->autoneg != 0U) {
    #line 2085 
    ret_val = e1000_read_phy_reg(hw,1U,& mii_status_reg);
    #line 2086 
    if (ret_val != 0) 
                      #line 2087 
                      return ret_val;
    #line 2088 
    ret_val = e1000_read_phy_reg(hw,1U,& mii_status_reg);
    #line 2089 
    if (ret_val != 0) 
                      #line 2090 
                      return ret_val;
    #line 2092 
    if (((int)mii_status_reg & 32) != 0) {
      #line 2099 
      ret_val = e1000_read_phy_reg(hw,4U,& mii_nway_adv_reg);
      #line 2101 
      if (ret_val != 0) 
                        #line 2102 
                        return ret_val;
      #line 2103 
      ret_val = e1000_read_phy_reg(hw,5U,& mii_nway_lp_ability_reg);
      #line 2105 
      if (ret_val != 0) 
                        #line 2106 
                        return ret_val;
      #line 2143 
      if (((int)mii_nway_adv_reg & 1024) != 0 && ((int)mii_nway_lp_ability_reg & 1024) != 0) 
        #line 2152 
        if (hw->original_fc == 3U) {
          #line 2153 
          hw->fc = E1000_FC_FULL;
          {
            #line 2154 
            bool branch_0;
            #line 2154 
            struct _ddebug __UNIQUE_ID_ddebug595 = {.modname = (char *)"e1000", .function = (char *)"e1000_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Flow Control = FULL.\n", .lineno = (unsigned int)2154U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 2154 
            branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug595.key.dd_key_false.key,(_Bool)0);
            #line 2154 
            if ((long)((long)((int)branch_0 != 0)) != 0L) {
              #line 2154 
              __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug595,e1000_get_hw_dev(hw),(char *)"Flow Control = FULL.\n");
            }
          }
        }
        else {
          #line 2156 
          hw->fc = E1000_FC_RX_PAUSE;
          {
            #line 2157 
            bool branch_1;
            #line 2157 
            struct _ddebug __UNIQUE_ID_ddebug596 = {.modname = (char *)"e1000", .function = (char *)"e1000_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int)2157U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 2157 
            branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug596.key.dd_key_false.key,(_Bool)0);
            #line 2157 
            if ((long)((long)((int)branch_1 != 0)) != 0L) {
              #line 2157 
              __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug596,e1000_get_hw_dev(hw),(char *)"Flow Control = RX PAUSE frames only.\n");
            }
          }
        }
      else 
        #line 2169 
        if (((((int)mii_nway_adv_reg & 1024) == 0 && ((int)mii_nway_adv_reg & 2048) != 0) && ((int)mii_nway_lp_ability_reg & 1024) != 0) && ((int)mii_nway_lp_ability_reg & 2048) != 0) {
          #line 2173 
          hw->fc = E1000_FC_TX_PAUSE;
          {
            #line 2174 
            bool branch_2;
            #line 2174 
            struct _ddebug __UNIQUE_ID_ddebug597 = {.modname = (char *)"e1000", .function = (char *)"e1000_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Flow Control = TX PAUSE frames only.\n", .lineno = (unsigned int)2174U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 2174 
            branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug597.key.dd_key_false.key,(_Bool)0);
            #line 2174 
            if ((long)((long)((int)branch_2 != 0)) != 0L) {
              #line 2174 
              __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug597,e1000_get_hw_dev(hw),(char *)"Flow Control = TX PAUSE frames only.\n");
            }
          }
        }
        else 
          #line 2185 
          if (((((int)mii_nway_adv_reg & 1024) != 0 && ((int)mii_nway_adv_reg & 2048) != 0) && ((int)mii_nway_lp_ability_reg & 1024) == 0) && ((int)mii_nway_lp_ability_reg & 2048) != 0) {
            #line 2189 
            hw->fc = E1000_FC_RX_PAUSE;
            {
              #line 2190 
              bool branch_3;
              #line 2190 
              struct _ddebug __UNIQUE_ID_ddebug598 = {.modname = (char *)"e1000", .function = (char *)"e1000_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int)2190U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 2190 
              branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug598.key.dd_key_false.key,(_Bool)0);
              #line 2190 
              if ((long)((long)((int)branch_3 != 0)) != 0L) {
                #line 2190 
                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug598,e1000_get_hw_dev(hw),(char *)"Flow Control = RX PAUSE frames only.\n");
              }
            }
          }
          else 
            #line 2215 
            if ((hw->original_fc == 0U || hw->original_fc == 2U) || (int)hw->fc_strict_ieee != 0) {
              #line 2218 
              hw->fc = E1000_FC_NONE;
              {
                #line 2219 
                bool branch_4;
                #line 2219 
                struct _ddebug __UNIQUE_ID_ddebug599 = {.modname = (char *)"e1000", .function = (char *)"e1000_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Flow Control = NONE.\n", .lineno = (unsigned int)2219U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                #line 2219 
                branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug599.key.dd_key_false.key,(_Bool)0);
                #line 2219 
                if ((long)((long)((int)branch_4 != 0)) != 0L) {
                  #line 2219 
                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug599,e1000_get_hw_dev(hw),(char *)"Flow Control = NONE.\n");
                }
              }
            }
            else {
              #line 2221 
              hw->fc = E1000_FC_RX_PAUSE;
              {
                #line 2222 
                bool branch_5;
                #line 2222 
                struct _ddebug __UNIQUE_ID_ddebug600 = {.modname = (char *)"e1000", .function = (char *)"e1000_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int)2222U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                #line 2222 
                branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug600.key.dd_key_false.key,(_Bool)0);
                #line 2222 
                if ((long)((long)((int)branch_5 != 0)) != 0L) {
                  #line 2222 
                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug600,e1000_get_hw_dev(hw),(char *)"Flow Control = RX PAUSE frames only.\n");
                }
              }
            }
      #line 2230 
      ret_val = e1000_get_speed_and_duplex(hw,& speed,& duplex);
      #line 2232 
      if (ret_val != 0) {
        {
          #line 2233 
          bool branch_6;
          #line 2233 
          struct _ddebug __UNIQUE_ID_ddebug601 = {.modname = (char *)"e1000", .function = (char *)"e1000_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error getting link speed and duplex\n", .lineno = (unsigned int)2233U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2233 
          branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug601.key.dd_key_false.key,(_Bool)0);
          #line 2233 
          if ((long)((long)((int)branch_6 != 0)) != 0L) {
            #line 2233 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug601,e1000_get_hw_dev(hw),(char *)"Error getting link speed and duplex\n");
          }
        }
        #line 2235 
        return ret_val;
      }
      #line 2238 
      if ((unsigned int)duplex == 1U) 
                                      #line 2239 
                                      hw->fc = E1000_FC_NONE;
      #line 2244 
      ret_val = e1000_force_mac_fc(hw);
      #line 2245 
      if (ret_val != 0) {
        {
          #line 2246 
          bool branch_7;
          #line 2246 
          struct _ddebug __UNIQUE_ID_ddebug602 = {.modname = (char *)"e1000", .function = (char *)"e1000_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error forcing flow control settings\n", .lineno = (unsigned int)2246U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2246 
          branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug602.key.dd_key_false.key,(_Bool)0);
          #line 2246 
          if ((long)((long)((int)branch_7 != 0)) != 0L) {
            #line 2246 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug602,e1000_get_hw_dev(hw),(char *)"Error forcing flow control settings\n");
          }
        }
        #line 2248 
        return ret_val;
      }
    }
    else {
      #line 2251 
      bool branch_8;
      #line 2251 
      struct _ddebug __UNIQUE_ID_ddebug603 = {.modname = (char *)"e1000", .function = (char *)"e1000_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Copper PHY and Auto Neg has not completed.\n", .lineno = (unsigned int)2251U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2251 
      branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug603.key.dd_key_false.key,(_Bool)0);
      #line 2251 
      if ((long)((long)((int)branch_8 != 0)) != 0L) {
        #line 2251 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug603,e1000_get_hw_dev(hw),(char *)"Copper PHY and Auto Neg has not completed.\n");
      }
    }
  }
  #line 2255 
  return 0;
}

#line 2265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_check_for_serdes_link_generic(struct e1000_hw *hw)
{
  #line 2267 
  u32 rxcw;
  #line 2268 
  u32 ctrl;
  #line 2269 
  u32 status;
  #line 2270 
  s32 ret_val = 0;
  #line 2272 
  ctrl = readl((void *)hw->hw_addr);
  #line 2273 
  status = readl((void *)(hw->hw_addr + 8U));
  #line 2274 
  rxcw = readl((void *)(hw->hw_addr + 384U));
  #line 2283 
  if ((status & 2U) == 0U && (rxcw & 536870912U) == 0U) {
    #line 2284 
    if (hw->autoneg_failed == 0U) {
      #line 2285 
      hw->autoneg_failed = 1U;
      #line 2286 
      goto out;
    }
    {
      #line 2288 
      bool branch;
      #line 2288 
      struct _ddebug __UNIQUE_ID_ddebug604 = {.modname = (char *)"e1000", .function = (char *)"e1000_check_for_serdes_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"NOT RXing /C/, disable AutoNeg and force link.\n", .lineno = (unsigned int)2288U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2288 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug604.key.dd_key_false.key,(_Bool)0);
      #line 2288 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2288 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug604,e1000_get_hw_dev(hw),(char *)"NOT RXing /C/, disable AutoNeg and force link.\n");
      }
    }
    #line 2291 
    writel(hw->txcw & 2147483647U,(void *)(hw->hw_addr + 376U));
    #line 2294 
    ctrl = readl((void *)hw->hw_addr);
    #line 2295 
    ctrl |= 65U;
    #line 2296 
    writel(ctrl,(void *)hw->hw_addr);
    #line 2299 
    ret_val = e1000_config_fc_after_link_up(hw);
    #line 2300 
    if (ret_val != 0) {
      {
        #line 2301 
        bool branch_0;
        #line 2301 
        struct _ddebug __UNIQUE_ID_ddebug605 = {.modname = (char *)"e1000", .function = (char *)"e1000_check_for_serdes_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error configuring flow control\n", .lineno = (unsigned int)2301U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2301 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug605.key.dd_key_false.key,(_Bool)0);
        #line 2301 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 2301 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug605,e1000_get_hw_dev(hw),(char *)"Error configuring flow control\n");
        }
      }
      #line 2302 
      goto out;
    }
  }
  else 
    #line 2304 
    if ((ctrl & 64U) != 0U && (rxcw & 536870912U) != 0U) {
      {
        #line 2310 
        bool branch_1;
        #line 2310 
        struct _ddebug __UNIQUE_ID_ddebug606 = {.modname = (char *)"e1000", .function = (char *)"e1000_check_for_serdes_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"RXing /C/, enable AutoNeg and stop forcing link.\n", .lineno = (unsigned int)2310U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2310 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug606.key.dd_key_false.key,(_Bool)0);
        #line 2310 
        if ((long)((long)((int)branch_1 != 0)) != 0L) {
          #line 2310 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug606,e1000_get_hw_dev(hw),(char *)"RXing /C/, enable AutoNeg and stop forcing link.\n");
        }
      }
      #line 2311 
      writel(hw->txcw,(void *)(hw->hw_addr + 376U));
      #line 2312 
      writel(ctrl & 4294967231U,(void *)hw->hw_addr);
      #line 2314 
      hw->serdes_has_link = (_Bool)1;
    }
    else {
      #line 2315 
      if ((readl((void *)(hw->hw_addr + 376U)) & 2147483648U) == 0U) {
        #line 2321 
        __const_udelay(42950UL);
        #line 2322 
        rxcw = readl((void *)(hw->hw_addr + 384U));
        #line 2323 
        if ((rxcw & 1073741824U) != 0U) {
          #line 2324 
          if ((rxcw & 134217728U) == 0U) {
            #line 2325 
            hw->serdes_has_link = (_Bool)1;
            {
              #line 2326 
              bool branch_2;
              #line 2326 
              struct _ddebug __UNIQUE_ID_ddebug607 = {.modname = (char *)"e1000", .function = (char *)"e1000_check_for_serdes_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"SERDES: Link up - forced.\n", .lineno = (unsigned int)2326U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 2326 
              branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug607.key.dd_key_false.key,(_Bool)0);
              #line 2326 
              if ((long)((long)((int)branch_2 != 0)) != 0L) {
                #line 2326 
                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug607,e1000_get_hw_dev(hw),(char *)"SERDES: Link up - forced.\n");
              }
            }
          }
        }
        else {
          #line 2329 
          hw->serdes_has_link = (_Bool)0;
          {
            #line 2330 
            bool branch_3;
            #line 2330 
            struct _ddebug __UNIQUE_ID_ddebug608 = {.modname = (char *)"e1000", .function = (char *)"e1000_check_for_serdes_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"SERDES: Link down - force failed.\n", .lineno = (unsigned int)2330U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 2330 
            branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug608.key.dd_key_false.key,(_Bool)0);
            #line 2330 
            if ((long)((long)((int)branch_3 != 0)) != 0L) {
              #line 2330 
              __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug608,e1000_get_hw_dev(hw),(char *)"SERDES: Link down - force failed.\n");
            }
          }
        }
      }
    }
  #line 2334 
  if ((readl((void *)(hw->hw_addr + 376U)) & 2147483648U) != 0U) {
    #line 2335 
    status = readl((void *)(hw->hw_addr + 8U));
    #line 2336 
    if ((status & 2U) != 0U) {
      #line 2338 
      __const_udelay(42950UL);
      #line 2339 
      rxcw = readl((void *)(hw->hw_addr + 384U));
      #line 2340 
      if ((rxcw & 1073741824U) != 0U) 
        #line 2341 
        if ((rxcw & 134217728U) == 0U) {
          #line 2342 
          hw->serdes_has_link = (_Bool)1;
          {
            #line 2343 
            bool branch_4;
            #line 2343 
            struct _ddebug __UNIQUE_ID_ddebug609 = {.modname = (char *)"e1000", .function = (char *)"e1000_check_for_serdes_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"SERDES: Link up - autoneg ", .lineno = (unsigned int)2343U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 2343 
            branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug609.key.dd_key_false.key,(_Bool)0);
            #line 2343 
            if ((long)((long)((int)branch_4 != 0)) != 0L) {
              #line 2343 
              __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug609,e1000_get_hw_dev(hw),(char *)"SERDES: Link up - autoneg ");
            }
          }
        }
        else {
          #line 2346 
          hw->serdes_has_link = (_Bool)0;
          {
            #line 2347 
            bool branch_5;
            #line 2347 
            struct _ddebug __UNIQUE_ID_ddebug610 = {.modname = (char *)"e1000", .function = (char *)"e1000_check_for_serdes_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"SERDES: Link down - invalid", .lineno = (unsigned int)2347U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 2347 
            branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug610.key.dd_key_false.key,(_Bool)0);
            #line 2347 
            if ((long)((long)((int)branch_5 != 0)) != 0L) {
              #line 2347 
              __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug610,e1000_get_hw_dev(hw),(char *)"SERDES: Link down - invalid");
            }
          }
        }
      else {
        #line 2351 
        hw->serdes_has_link = (_Bool)0;
        {
          #line 2352 
          bool branch_6;
          #line 2352 
          struct _ddebug __UNIQUE_ID_ddebug611 = {.modname = (char *)"e1000", .function = (char *)"e1000_check_for_serdes_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"SERDES: Link down - no sync.\n", .lineno = (unsigned int)2352U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2352 
          branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug611.key.dd_key_false.key,(_Bool)0);
          #line 2352 
          if ((long)((long)((int)branch_6 != 0)) != 0L) {
            #line 2352 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug611,e1000_get_hw_dev(hw),(char *)"SERDES: Link down - no sync.\n");
          }
        }
      }
    }
    else {
      #line 2355 
      hw->serdes_has_link = (_Bool)0;
      {
        #line 2356 
        bool branch_7;
        #line 2356 
        struct _ddebug __UNIQUE_ID_ddebug612 = {.modname = (char *)"e1000", .function = (char *)"e1000_check_for_serdes_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"SERDES: Link down - autoneg failed\n", .lineno = (unsigned int)2356U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2356 
        branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug612.key.dd_key_false.key,(_Bool)0);
        #line 2356 
        if ((long)((long)((int)branch_7 != 0)) != 0L) {
          #line 2356 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug612,e1000_get_hw_dev(hw),(char *)"SERDES: Link down - autoneg failed\n");
        }
      }
    }
  }
  #line 2360 
  out: 
       #line 2360 
  ;
  #line 2361 
  return ret_val;
}

#line 2371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_check_for_link(struct e1000_hw *hw)
{
  #line 2374 
  u32 ctrl;
  #line 2375 
  u32 status;
  #line 2376 
  u32 rctl;
  #line 2377 
  u32 icr;
  #line 2379 
  s32 ret_val;
  #line 2380 
  u16 phy_data;
  #line 2373 
  u32 rxcw = 0U;
  #line 2378 
  u32 signal = 0U;
  #line 2382 
  ctrl = readl((void *)hw->hw_addr);
  #line 2383 
  status = readl((void *)(hw->hw_addr + 8U));
  #line 2389 
  if ((unsigned int)hw->media_type + 4294967295U <= 1U) {
    #line 2391 
    rxcw = readl((void *)(hw->hw_addr + 384U));
    #line 2393 
    if (hw->media_type == (unsigned int)1) {
      #line 2394 
      if (hw->mac_type > (unsigned int)4) 
                                          #line 2394 
                                          signal = 524288U; else 
                                                                 #line 2394 
                                                                 signal = 0U;
      #line 2397 
      if ((status & 2U) != 0U) 
                               #line 2398 
                               hw->get_link_status = (_Bool)0;
    }
  }
  #line 2408 
  if (hw->media_type == (unsigned int)0 && (int)hw->get_link_status != 0) {
    #line 2414 
    ret_val = e1000_read_phy_reg(hw,1U,& phy_data);
    #line 2415 
    if (ret_val != 0) 
                      #line 2416 
                      return ret_val;
    #line 2417 
    ret_val = e1000_read_phy_reg(hw,1U,& phy_data);
    #line 2418 
    if (ret_val != 0) 
                      #line 2419 
                      return ret_val;
    #line 2421 
    if (((int)phy_data & 4) != 0) {
      #line 2422 
      hw->get_link_status = (_Bool)0;
      #line 2426 
      e1000_check_downshift(hw);
      #line 2437 
      if (((unsigned int)hw->mac_type + 4294967293U <= 1U && (unsigned int)hw->autoneg == 0U) && (unsigned int)hw->forced_speed_duplex <= 1U) {
        #line 2442 
        writel(4294967295U,(void *)(hw->hw_addr + 216U));
        #line 2443 
        ret_val = e1000_polarity_reversal_workaround(hw);
        #line 2445 
        icr = readl((void *)(hw->hw_addr + 192U));
        #line 2446 
        writel(icr & 4294967291U,(void *)(hw->hw_addr + 200U));
        #line 2447 
        writel(157U,(void *)(hw->hw_addr + 208U));
      }
    }
    else {
      #line 2452 
      e1000_config_dsp_after_link_change(hw,(_Bool)0);
      #line 2453 
      return 0;
    }
    #line 2459 
    if ((unsigned int)hw->autoneg == 0U) 
                                         #line 2460 
                                         return -3;
    #line 2463 
    e1000_config_dsp_after_link_change(hw,(_Bool)1);
    #line 2473 
    if (hw->mac_type > (unsigned int)3 && hw->mac_type != (unsigned int)9) 
      #line 2475 
      e1000_config_collision_dist(hw);
    else {
      #line 2477 
      ret_val = e1000_config_mac_to_phy(hw);
      #line 2478 
      if (ret_val != 0) {
        {
          #line 2479 
          bool branch;
          #line 2479 
          struct _ddebug __UNIQUE_ID_ddebug613 = {.modname = (char *)"e1000", .function = (char *)"e1000_check_for_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error configuring MAC to PHY settings\n", .lineno = (unsigned int)2479U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2479 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug613.key.dd_key_false.key,(_Bool)0);
          #line 2479 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 2479 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug613,e1000_get_hw_dev(hw),(char *)"Error configuring MAC to PHY settings\n");
          }
        }
        #line 2481 
        return ret_val;
      }
    }
    #line 2490 
    ret_val = e1000_config_fc_after_link_up(hw);
    #line 2491 
    if (ret_val != 0) {
      {
        #line 2492 
        bool branch_0;
        #line 2492 
        struct _ddebug __UNIQUE_ID_ddebug614 = {.modname = (char *)"e1000", .function = (char *)"e1000_check_for_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error configuring flow control\n", .lineno = (unsigned int)2492U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2492 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug614.key.dd_key_false.key,(_Bool)0);
        #line 2492 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 2492 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug614,e1000_get_hw_dev(hw),(char *)"Error configuring flow control\n");
        }
      }
      #line 2493 
      return ret_val;
    }
    #line 2504 
    if ((int)hw->tbi_compatibility_en != 0) {
      #line 2505 
      u16 speed;
      #line 2505 
      u16 duplex;
      #line 2507 
      ret_val = e1000_get_speed_and_duplex(hw,& speed,& duplex);
      #line 2510 
      if (ret_val != 0) {
        {
          #line 2511 
          bool branch_1;
          #line 2511 
          struct _ddebug __UNIQUE_ID_ddebug615 = {.modname = (char *)"e1000", .function = (char *)"e1000_check_for_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error getting link speed and duplex\n", .lineno = (unsigned int)2511U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2511 
          branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug615.key.dd_key_false.key,(_Bool)0);
          #line 2511 
          if ((long)((long)((int)branch_1 != 0)) != 0L) {
            #line 2511 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug615,e1000_get_hw_dev(hw),(char *)"Error getting link speed and duplex\n");
          }
        }
        #line 2513 
        return ret_val;
      }
      #line 2515 
      if ((unsigned int)speed != 1000U) {
        #line 2519 
        if ((int)hw->tbi_compatibility_on != 0) {
          #line 2523 
          rctl = readl((void *)(hw->hw_addr + 256U));
          #line 2524 
          rctl &= 4294967291U;
          #line 2525 
          writel(rctl,(void *)(hw->hw_addr + 256U));
          #line 2526 
          hw->tbi_compatibility_on = (_Bool)0;
        }
      }
      else 
        #line 2535 
        if (! hw->tbi_compatibility_on) {
          #line 2536 
          hw->tbi_compatibility_on = (_Bool)1;
          #line 2537 
          rctl = readl((void *)(hw->hw_addr + 256U));
          #line 2538 
          rctl |= 4U;
          #line 2539 
          writel(rctl,(void *)(hw->hw_addr + 256U));
        }
    }
  }
  #line 2545 
  if ((unsigned int)hw->media_type + 4294967295U <= 1U) 
                                                        #line 2547 
                                                        e1000_check_for_serdes_link_generic(hw);
  #line 2549 
  return 0;
}

#line 2560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_get_speed_and_duplex(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  #line 2562 
  u32 status;
  #line 2563 
  s32 ret_val;
  #line 2564 
  u16 phy_data;
  #line 2566 
  if (hw->mac_type > (unsigned int)2) {
    #line 2567 
    status = readl((void *)(hw->hw_addr + 8U));
    #line 2568 
    if ((status & 128U) != 0U) {
      #line 2569 
      *speed = (unsigned short)1000U;
      {
        #line 2570 
        bool branch;
        #line 2570 
        struct _ddebug __UNIQUE_ID_ddebug616 = {.modname = (char *)"e1000", .function = (char *)"e1000_get_speed_and_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"1000 Mbs, ", .lineno = (unsigned int)2570U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2570 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug616.key.dd_key_false.key,(_Bool)0);
        #line 2570 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 2570 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug616,e1000_get_hw_dev(hw),(char *)"1000 Mbs, ");
        }
      }
    }
    else 
      #line 2571 
      if ((status & 64U) != 0U) {
        #line 2572 
        *speed = (unsigned short)100U;
        {
          #line 2573 
          bool branch_0;
          #line 2573 
          struct _ddebug __UNIQUE_ID_ddebug617 = {.modname = (char *)"e1000", .function = (char *)"e1000_get_speed_and_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"100 Mbs, ", .lineno = (unsigned int)2573U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2573 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug617.key.dd_key_false.key,(_Bool)0);
          #line 2573 
          if ((long)((long)((int)branch_0 != 0)) != 0L) {
            #line 2573 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug617,e1000_get_hw_dev(hw),(char *)"100 Mbs, ");
          }
        }
      }
      else {
        #line 2575 
        *speed = (unsigned short)10U;
        {
          #line 2576 
          bool branch_1;
          #line 2576 
          struct _ddebug __UNIQUE_ID_ddebug618 = {.modname = (char *)"e1000", .function = (char *)"e1000_get_speed_and_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"10 Mbs, ", .lineno = (unsigned int)2576U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2576 
          branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug618.key.dd_key_false.key,(_Bool)0);
          #line 2576 
          if ((long)((long)((int)branch_1 != 0)) != 0L) {
            #line 2576 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug618,e1000_get_hw_dev(hw),(char *)"10 Mbs, ");
          }
        }
      }
    #line 2579 
    if ((status & 1U) != 0U) {
      #line 2580 
      *duplex = (unsigned short)2U;
      {
        #line 2581 
        bool branch_2;
        #line 2581 
        struct _ddebug __UNIQUE_ID_ddebug619 = {.modname = (char *)"e1000", .function = (char *)"e1000_get_speed_and_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Full Duplex\n", .lineno = (unsigned int)2581U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2581 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug619.key.dd_key_false.key,(_Bool)0);
        #line 2581 
        if ((long)((long)((int)branch_2 != 0)) != 0L) {
          #line 2581 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug619,e1000_get_hw_dev(hw),(char *)"Full Duplex\n");
        }
      }
    }
    else {
      #line 2583 
      *duplex = (unsigned short)1U;
      {
        #line 2584 
        bool branch_3;
        #line 2584 
        struct _ddebug __UNIQUE_ID_ddebug620 = {.modname = (char *)"e1000", .function = (char *)"e1000_get_speed_and_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)" Half Duplex\n", .lineno = (unsigned int)2584U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2584 
        branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug620.key.dd_key_false.key,(_Bool)0);
        #line 2584 
        if ((long)((long)((int)branch_3 != 0)) != 0L) {
          #line 2584 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug620,e1000_get_hw_dev(hw),(char *)" Half Duplex\n");
        }
      }
    }
  }
  else {
    {
      #line 2587 
      bool branch_4;
      #line 2587 
      struct _ddebug __UNIQUE_ID_ddebug621 = {.modname = (char *)"e1000", .function = (char *)"e1000_get_speed_and_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"1000 Mbs, Full Duplex\n", .lineno = (unsigned int)2587U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2587 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug621.key.dd_key_false.key,(_Bool)0);
      #line 2587 
      if ((long)((long)((int)branch_4 != 0)) != 0L) {
        #line 2587 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug621,e1000_get_hw_dev(hw),(char *)"1000 Mbs, Full Duplex\n");
      }
    }
    #line 2588 
    *speed = (unsigned short)1000U;
    #line 2589 
    *duplex = (unsigned short)2U;
  }
  #line 2596 
  if (hw->phy_type == (unsigned int)1 && (int)hw->speed_downgraded != 0) {
    #line 2597 
    ret_val = e1000_read_phy_reg(hw,6U,& phy_data);
    #line 2598 
    if (ret_val != 0) 
                      #line 2599 
                      return ret_val;
    #line 2601 
    if (((int)phy_data & 1) == 0) 
                                  #line 2602 
                                  *duplex = (unsigned short)1U;
    else {
      #line 2604 
      ret_val = e1000_read_phy_reg(hw,5U,& phy_data);
      #line 2606 
      if (ret_val != 0) 
                        #line 2607 
                        return ret_val;
      #line 2608 
      if ((unsigned int)*speed == 100U && ((int)phy_data & 256) == 0 || (unsigned int)*speed == 10U && ((int)phy_data & 64) == 0) 
        #line 2612 
        *duplex = (unsigned short)1U;
    }
  }
  #line 2616 
  return 0;
}

#line 2625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_wait_autoneg(struct e1000_hw *hw)
{
  #line 2627 
  s32 ret_val;
  #line 2628 
  u16 i;
  #line 2629 
  u16 phy_data;
  {
    #line 2631 
    bool branch;
    #line 2631 
    struct _ddebug __UNIQUE_ID_ddebug622 = {.modname = (char *)"e1000", .function = (char *)"e1000_wait_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Waiting for Auto-Neg to complete.\n", .lineno = (unsigned int)2631U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2631 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug622.key.dd_key_false.key,(_Bool)0);
    #line 2631 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 2631 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug622,e1000_get_hw_dev(hw),(char *)"Waiting for Auto-Neg to complete.\n");
    }
  }
  #line 2634 
  i = (unsigned short)45U;
  #line 2634 
  while ((unsigned int)i != 0U) {
    #line 2638 
    ret_val = e1000_read_phy_reg(hw,1U,& phy_data);
    #line 2639 
    if (ret_val != 0) 
                      #line 2640 
                      return ret_val;
    #line 2641 
    ret_val = e1000_read_phy_reg(hw,1U,& phy_data);
    #line 2642 
    if (ret_val != 0) 
                      #line 2643 
                      return ret_val;
    #line 2644 
    if (((int)phy_data & 32) != 0) 
                                   #line 2645 
                                   return 0;
    #line 2647 
    msleep(100U);
    #line 2634 
    i = (u16)((int)i - 1);
  }
  #line 2649 
  return 0;
}

#line 2657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_raise_mdi_clk(struct e1000_hw *hw, u32 *ctrl)
{
  #line 2662 
  writel(*ctrl | 2097152U,(void *)hw->hw_addr);
  #line 2663 
  readl((void *)(hw->hw_addr + 8U));
  #line 2664 
  __const_udelay(42950UL);
  #line 2666 
  return;
}

#line 2672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_lower_mdi_clk(struct e1000_hw *hw, u32 *ctrl)
{
  #line 2677 
  writel(*ctrl & 4292870143U,(void *)hw->hw_addr);
  #line 2678 
  readl((void *)(hw->hw_addr + 8U));
  #line 2679 
  __const_udelay(42950UL);
  #line 2681 
  return;
}

#line 2690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_shift_out_mdi_bits(struct e1000_hw *hw, u32 data, u16 count)
{
  #line 2692 
  u32 ctrl;
  #line 2693 
  u32 mask;
  #line 2699 
  mask = 1U;
  #line 2700 
  mask <<= (int)count + -1;
  #line 2702 
  ctrl = readl((void *)hw->hw_addr);
  #line 2705 
  ctrl |= 50331648U;
  #line 2707 
  while (mask != 0U) {
    #line 2713 
    if ((data & mask) != 0U) 
                             #line 2714 
                             ctrl |= 1048576U; else 
                                                    #line 2716 
                                                    ctrl &= 4293918719U;
    #line 2718 
    writel(ctrl,(void *)hw->hw_addr);
    #line 2719 
    readl((void *)(hw->hw_addr + 8U));
    #line 2721 
    __const_udelay(42950UL);
    #line 2723 
    e1000_raise_mdi_clk(hw,& ctrl);
    #line 2724 
    e1000_lower_mdi_clk(hw,& ctrl);
    #line 2726 
    mask >>= 1;
  }
  #line 2728 
  return;
}

#line 2736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static u16 e1000_shift_in_mdi_bits(struct e1000_hw *hw)
{
  #line 2738 
  u32 ctrl;
  #line 2740 
  u8 i;
  #line 2739 
  u16 data = (unsigned short)0U;
  #line 2749 
  ctrl = readl((void *)hw->hw_addr);
  #line 2754 
  ctrl &= 4278190079U;
  #line 2755 
  ctrl &= 4293918719U;
  #line 2757 
  writel(ctrl,(void *)hw->hw_addr);
  #line 2758 
  readl((void *)(hw->hw_addr + 8U));
  #line 2764 
  e1000_raise_mdi_clk(hw,& ctrl);
  #line 2765 
  e1000_lower_mdi_clk(hw,& ctrl);
  #line 2767 
  data = (unsigned short)0U;
  #line 2767 
  i = (unsigned char)0U;
  #line 2767 
  while ((unsigned int)i <= 15U) {
    #line 2768 
    data = (unsigned short)((int)data << 1U);
    #line 2769 
    e1000_raise_mdi_clk(hw,& ctrl);
    #line 2770 
    ctrl = readl((void *)hw->hw_addr);
    #line 2772 
    if ((ctrl & 1048576U) != 0U) 
                                 #line 2773 
                                 data = (unsigned short)((unsigned int)data | 1U);
    #line 2774 
    e1000_lower_mdi_clk(hw,& ctrl);
    #line 2767 
    i = (u8)((int)i + 1);
  }
  #line 2777 
  e1000_raise_mdi_clk(hw,& ctrl);
  #line 2778 
  e1000_lower_mdi_clk(hw,& ctrl);
  #line 2780 
  return data;
}

#line 2792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_read_phy_reg(struct e1000_hw *hw, u32 reg_addr, u16 *phy_data)
{
  #line 2794 
  u32 ret_val;
  #line 2795 
  unsigned long flags;
  #line 2797 
  cif___ldv_spin_lock_e1000_phy_lock(& e1000_phy_lock);
  #line 2799 
  if (hw->phy_type == (unsigned int)1 && reg_addr > 15U) {
    #line 2801 
    ret_val = (unsigned int)e1000_write_phy_reg_ex(hw,31U,
                             (unsigned short)((int)((unsigned short)reg_addr)));
    #line 2803 
    if (ret_val != 0U) 
                       #line 2804 
                       goto out;
  }
  #line 2807 
  ret_val = (unsigned int)e1000_read_phy_reg_ex(hw,reg_addr & 31U,phy_data);
  #line 2809 
  out: 
       #line 2809 
  ;
  #line 2810 
  cif_spin_unlock_irqrestore_e1000_phy_lock(& e1000_phy_lock,flags);
  #line 2812 
  return (int)ret_val;
}

#line 2815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_read_phy_reg_ex(struct e1000_hw *hw, u32 reg_addr, u16 *phy_data)
{
  #line 2818 
  u32 i;
  #line 2820 
  u32 tmp;
  #line 2819 
  u32 mdic = 0U;
  #line 2820 
  if (hw->mac_type == (unsigned int)9) 
                                       #line 2820 
                                       tmp = hw->phy_addr; else 
                                                                #line 2820 
                                                                tmp = 1U;
  #line 2820 
  u32 phy_addr = tmp;
  #line 2822 
  if (reg_addr > 31U) {
    {
      #line 2823 
      bool branch;
      #line 2823 
      struct _ddebug __UNIQUE_ID_ddebug623 = {.modname = (char *)"e1000", .function = (char *)"e1000_read_phy_reg_ex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"PHY Address %d is out of range\n", .lineno = (unsigned int)2823U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2823 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug623.key.dd_key_false.key,(_Bool)0);
      #line 2823 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2823 
        ;
        #line 2823 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug623,e1000_get_hw_dev(hw),(char *)"PHY Address %d is out of range\n",reg_addr);
      }
    }
    #line 2824 
    return -4;
  }
  #line 2827 
  if (hw->mac_type > (unsigned int)3) 
    #line 2832 
    if (hw->mac_type == (unsigned int)9) {
      #line 2833 
      mdic = ((reg_addr << 16) | (phy_addr << 21)) | 2147483648U;
      #line 2838 
      writel(mdic,hw->ce4100_gbe_mdio_base_virt + 4U);
      #line 2843 
      i = 0U;
      #line 2843 
      while (i <= 63U) {
        #line 2844 
        __const_udelay(214750UL);
        #line 2845 
        mdic = readl(hw->ce4100_gbe_mdio_base_virt + 4U);
        #line 2846 
        if ((mdic & 2147483648U) == 0U) 
                                        #line 2847 
                                        break;
        #line 2843 
        i ++;
      }
      #line 2850 
      if ((mdic & 2147483648U) != 0U) {
        {
          #line 2851 
          bool branch_0;
          #line 2851 
          struct _ddebug __UNIQUE_ID_ddebug624 = {.modname = (char *)"e1000", .function = (char *)"e1000_read_phy_reg_ex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"MDI Read did not complete\n", .lineno = (unsigned int)2851U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2851 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug624.key.dd_key_false.key,(_Bool)0);
          #line 2851 
          if ((long)((long)((int)branch_0 != 0)) != 0L) {
            #line 2851 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug624,e1000_get_hw_dev(hw),(char *)"MDI Read did not complete\n");
          }
        }
        #line 2852 
        return -2;
      }
      #line 2855 
      mdic = readl(hw->ce4100_gbe_mdio_base_virt);
      #line 2856 
      if ((mdic & 2147483648U) != 0U) {
        {
          #line 2857 
          bool branch_1;
          #line 2857 
          struct _ddebug __UNIQUE_ID_ddebug625 = {.modname = (char *)"e1000", .function = (char *)"e1000_read_phy_reg_ex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"MDI Read Error\n", .lineno = (unsigned int)2857U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2857 
          branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug625.key.dd_key_false.key,(_Bool)0);
          #line 2857 
          if ((long)((long)((int)branch_1 != 0)) != 0L) {
            #line 2857 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug625,e1000_get_hw_dev(hw),(char *)"MDI Read Error\n");
          }
        }
        #line 2858 
        return -2;
      }
      #line 2860 
      *phy_data = (unsigned short)mdic;
    }
    else {
      #line 2862 
      mdic = ((reg_addr << 16) | (phy_addr << 21)) | 134217728U;
      #line 2866 
      writel(mdic,(void *)(hw->hw_addr + 32U));
      #line 2871 
      i = 0U;
      #line 2871 
      while (i <= 63U) {
        #line 2872 
        __const_udelay(214750UL);
        #line 2873 
        mdic = readl((void *)(hw->hw_addr + 32U));
        #line 2874 
        if ((mdic & 268435456U) != 0U) 
                                       #line 2875 
                                       break;
        #line 2871 
        i ++;
      }
      #line 2877 
      if ((mdic & 268435456U) == 0U) {
        {
          #line 2878 
          bool branch_2;
          #line 2878 
          struct _ddebug __UNIQUE_ID_ddebug626 = {.modname = (char *)"e1000", .function = (char *)"e1000_read_phy_reg_ex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"MDI Read did not complete\n", .lineno = (unsigned int)2878U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2878 
          branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug626.key.dd_key_false.key,(_Bool)0);
          #line 2878 
          if ((long)((long)((int)branch_2 != 0)) != 0L) {
            #line 2878 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug626,e1000_get_hw_dev(hw),(char *)"MDI Read did not complete\n");
          }
        }
        #line 2879 
        return -2;
      }
      #line 2881 
      if ((mdic & 1073741824U) != 0U) {
        {
          #line 2882 
          bool branch_3;
          #line 2882 
          struct _ddebug __UNIQUE_ID_ddebug627 = {.modname = (char *)"e1000", .function = (char *)"e1000_read_phy_reg_ex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"MDI Error\n", .lineno = (unsigned int)2882U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2882 
          branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug627.key.dd_key_false.key,(_Bool)0);
          #line 2882 
          if ((long)((long)((int)branch_3 != 0)) != 0L) {
            #line 2882 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug627,e1000_get_hw_dev(hw),(char *)"MDI Error\n");
          }
        }
        #line 2883 
        return -2;
      }
      #line 2885 
      *phy_data = (unsigned short)mdic;
    }
  else {
    #line 2892 
    e1000_shift_out_mdi_bits(hw,4294967295U,(unsigned short)32);
    #line 2906 
    mdic = ((phy_addr << 5) | reg_addr) | 6144U;
    #line 2909 
    e1000_shift_out_mdi_bits(hw,mdic,(unsigned short)14);
    #line 2915 
    *phy_data = e1000_shift_in_mdi_bits(hw);
  }
  #line 2917 
  return 0;
}

#line 2929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_write_phy_reg(struct e1000_hw *hw, u32 reg_addr, u16 phy_data)
{
  #line 2931 
  u32 ret_val;
  #line 2932 
  unsigned long flags;
  #line 2934 
  cif___ldv_spin_lock_e1000_phy_lock(& e1000_phy_lock);
  #line 2936 
  if (hw->phy_type == (unsigned int)1 && reg_addr > 15U) {
    #line 2938 
    ret_val = (unsigned int)e1000_write_phy_reg_ex(hw,31U,
                             (unsigned short)((int)((unsigned short)reg_addr)));
    #line 2940 
    if (ret_val != 0U) {
      #line 2941 
      cif_spin_unlock_irqrestore_e1000_phy_lock(& e1000_phy_lock,flags);
      #line 2942 
      return (int)ret_val;
    }
  }
  #line 2946 
  ret_val = (unsigned int)e1000_write_phy_reg_ex(hw,reg_addr & 31U,
                               (unsigned short)((int)phy_data));
  #line 2948 
  cif_spin_unlock_irqrestore_e1000_phy_lock(& e1000_phy_lock,flags);
  #line 2950 
  return (int)ret_val;
}

#line 2953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_write_phy_reg_ex(struct e1000_hw *hw, u32 reg_addr, u16 phy_data)
{
  #line 2956 
  u32 i;
  #line 2958 
  u32 tmp;
  #line 2957 
  u32 mdic = 0U;
  #line 2958 
  if (hw->mac_type == (unsigned int)9) 
                                       #line 2958 
                                       tmp = hw->phy_addr; else 
                                                                #line 2958 
                                                                tmp = 1U;
  #line 2958 
  u32 phy_addr = tmp;
  #line 2960 
  if (reg_addr > 31U) {
    {
      #line 2961 
      bool branch;
      #line 2961 
      struct _ddebug __UNIQUE_ID_ddebug628 = {.modname = (char *)"e1000", .function = (char *)"e1000_write_phy_reg_ex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"PHY Address %d is out of range\n", .lineno = (unsigned int)2961U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2961 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug628.key.dd_key_false.key,(_Bool)0);
      #line 2961 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2961 
        ;
        #line 2961 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug628,e1000_get_hw_dev(hw),(char *)"PHY Address %d is out of range\n",reg_addr);
      }
    }
    #line 2962 
    return -4;
  }
  #line 2965 
  if (hw->mac_type > (unsigned int)3) 
    #line 2971 
    if (hw->mac_type == (unsigned int)9) {
      #line 2972 
      mdic = (((unsigned int)phy_data | (reg_addr << 16)) | (phy_addr << 21)) | 2214592512U;
      #line 2978 
      writel(mdic,hw->ce4100_gbe_mdio_base_virt + 4U);
      #line 2983 
      i = 0U;
      #line 2983 
      while (i <= 639U) {
        #line 2984 
        __const_udelay(21475UL);
        #line 2985 
        mdic = readl(hw->ce4100_gbe_mdio_base_virt + 4U);
        #line 2986 
        if ((mdic & 2147483648U) == 0U) 
                                        #line 2987 
                                        break;
        #line 2983 
        i ++;
      }
      #line 2989 
      if ((mdic & 2147483648U) != 0U) {
        {
          #line 2990 
          bool branch_0;
          #line 2990 
          struct _ddebug __UNIQUE_ID_ddebug629 = {.modname = (char *)"e1000", .function = (char *)"e1000_write_phy_reg_ex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"MDI Write did not complete\n", .lineno = (unsigned int)2990U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2990 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug629.key.dd_key_false.key,(_Bool)0);
          #line 2990 
          if ((long)((long)((int)branch_0 != 0)) != 0L) {
            #line 2990 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug629,e1000_get_hw_dev(hw),(char *)"MDI Write did not complete\n");
          }
        }
        #line 2991 
        return -2;
      }
    }
    else {
      #line 2994 
      mdic = (((unsigned int)phy_data | (reg_addr << 16)) | (phy_addr << 21)) | 67108864U;
      #line 2999 
      writel(mdic,(void *)(hw->hw_addr + 32U));
      #line 3004 
      i = 0U;
      #line 3004 
      while (i <= 640U) {
        #line 3005 
        __const_udelay(21475UL);
        #line 3006 
        mdic = readl((void *)(hw->hw_addr + 32U));
        #line 3007 
        if ((mdic & 268435456U) != 0U) 
                                       #line 3008 
                                       break;
        #line 3004 
        i ++;
      }
      #line 3010 
      if ((mdic & 268435456U) == 0U) {
        {
          #line 3011 
          bool branch_1;
          #line 3011 
          struct _ddebug __UNIQUE_ID_ddebug630 = {.modname = (char *)"e1000", .function = (char *)"e1000_write_phy_reg_ex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"MDI Write did not complete\n", .lineno = (unsigned int)3011U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 3011 
          branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug630.key.dd_key_false.key,(_Bool)0);
          #line 3011 
          if ((long)((long)((int)branch_1 != 0)) != 0L) {
            #line 3011 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug630,e1000_get_hw_dev(hw),(char *)"MDI Write did not complete\n");
          }
        }
        #line 3012 
        return -2;
      }
    }
  else {
    #line 3021 
    e1000_shift_out_mdi_bits(hw,4294967295U,(unsigned short)32);
    #line 3029 
    mdic = ((reg_addr << 2) | (phy_addr << 7)) | 20482U;
    #line 3031 
    mdic <<= 16;
    #line 3032 
    mdic = (unsigned int)phy_data | mdic;
    #line 3034 
    e1000_shift_out_mdi_bits(hw,mdic,(unsigned short)32);
  }
  #line 3037 
  return 0;
}

#line 3046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_phy_hw_reset(struct e1000_hw *hw)
{
  #line 3048 
  u32 ctrl;
  #line 3048 
  u32 ctrl_ext;
  #line 3049 
  u32 led_ctrl;
  {
    #line 3051 
    bool branch;
    #line 3051 
    struct _ddebug __UNIQUE_ID_ddebug631 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_hw_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Resetting Phy...\n", .lineno = (unsigned int)3051U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3051 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug631.key.dd_key_false.key,(_Bool)0);
    #line 3051 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 3051 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug631,e1000_get_hw_dev(hw),(char *)"Resetting Phy...\n");
    }
  }
  #line 3053 
  if (hw->mac_type > (unsigned int)3) {
    #line 3059 
    ctrl = readl((void *)hw->hw_addr);
    #line 3060 
    writel(ctrl | 2147483648U,(void *)hw->hw_addr);
    #line 3061 
    readl((void *)(hw->hw_addr + 8U));
    #line 3063 
    msleep(10U);
    #line 3065 
    writel(ctrl,(void *)hw->hw_addr);
    #line 3066 
    readl((void *)(hw->hw_addr + 8U));
  }
  else {
    #line 3073 
    ctrl_ext = readl((void *)(hw->hw_addr + 24U));
    #line 3074 
    ctrl_ext |= 256U;
    #line 3075 
    ctrl_ext &= 4294967279U;
    #line 3076 
    writel(ctrl_ext,(void *)(hw->hw_addr + 24U));
    #line 3077 
    readl((void *)(hw->hw_addr + 8U));
    #line 3078 
    msleep(10U);
    #line 3079 
    ctrl_ext |= 16U;
    #line 3080 
    writel(ctrl_ext,(void *)(hw->hw_addr + 24U));
    #line 3081 
    readl((void *)(hw->hw_addr + 8U));
  }
  #line 3083 
  __const_udelay(644250UL);
  #line 3085 
  if (hw->mac_type == (unsigned int)11 || hw->mac_type == (unsigned int)13) {
    #line 3087 
    led_ctrl = readl((void *)(hw->hw_addr + 3584U));
    #line 3088 
    led_ctrl &= 4294963455U;
    #line 3089 
    led_ctrl |= 117441280U;
    #line 3090 
    writel(led_ctrl,(void *)(hw->hw_addr + 3584U));
  }
  #line 3094 
  return e1000_get_phy_cfg_done(hw);
}

#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_phy_reset(struct e1000_hw *hw)
{
  #line 3106 
  s32 ret_val;
  #line 3107 
  u16 phy_data;
  #line 3109 
  switch ((unsigned int)hw->phy_type) {
    #line 3110 
    case (unsigned int)1: 
                          #line 3110 
    ;
    #line 3111 
    ret_val = e1000_phy_hw_reset(hw);
    #line 3112 
    if (ret_val != 0) 
                      #line 3113 
                      return ret_val;
    #line 3114 
    break;
    #line 3115 
    default: 
             #line 3115 
    ;
    #line 3116 
    ret_val = e1000_read_phy_reg(hw,0U,& phy_data);
    #line 3117 
    if (ret_val != 0) 
                      #line 3118 
                      return ret_val;
    #line 3120 
    phy_data = (unsigned short)((unsigned int)phy_data | 32768U);
    #line 3121 
    ret_val = e1000_write_phy_reg(hw,0U,(unsigned short)((int)phy_data));
    #line 3122 
    if (ret_val != 0) 
                      #line 3123 
                      return ret_val;
    #line 3125 
    __const_udelay(4295UL);
    #line 3126 
    break;
  }
  #line 3129 
  if (hw->phy_type == (unsigned int)1) 
                                       #line 3130 
                                       e1000_phy_init_script(hw);
  #line 3132 
  return 0;
}

#line 3141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_detect_gig_phy(struct e1000_hw *hw)
{
  #line 3143 
  s32 phy_init_status;
  #line 3143 
  s32 ret_val;
  #line 3144 
  u16 phy_id_high;
  #line 3144 
  u16 phy_id_low;
  #line 3145 
  bool match = (_Bool)0;
  #line 3147 
  if (hw->phy_id != 0U) 
                        #line 3148 
                        return 0;
  #line 3151 
  ret_val = e1000_read_phy_reg(hw,2U,& phy_id_high);
  #line 3152 
  if (ret_val != 0) 
                    #line 3153 
                    return ret_val;
  #line 3155 
  hw->phy_id = (unsigned int)((int)phy_id_high << 16);
  #line 3156 
  __const_udelay(85900UL);
  #line 3157 
  ret_val = e1000_read_phy_reg(hw,3U,& phy_id_low);
  #line 3158 
  if (ret_val != 0) 
                    #line 3159 
                    return ret_val;
  #line 3161 
  hw->phy_id |= (unsigned int)phy_id_low & 4294967280U;
  #line 3162 
  hw->phy_revision = (unsigned int)phy_id_low & 15U;
  #line 3164 
  switch ((unsigned int)hw->mac_type) {
    #line 3165 
    case (unsigned int)3: 
                          #line 3165 
    ;
    #line 3166 
    if (hw->phy_id == 21040208U) 
                                 #line 3167 
                                 match = (_Bool)1;
    #line 3168 
    break;
    #line 3169 
    case (unsigned int)4: 
                          #line 3169 
    ;
    #line 3170 
    if (hw->phy_id == 21040176U) 
                                 #line 3171 
                                 match = (_Bool)1;
    #line 3172 
    break;
    #line 3173 
    case (unsigned int)5: 
                          #line 3173 
    ;
    #line 3174 
    case (unsigned int)6: 
                          #line 3174 
    ;
    #line 3175 
    case (unsigned int)7: 
                          #line 3175 
    ;
    #line 3176 
    case (unsigned int)8: 
                          #line 3176 
    ;
    #line 3177 
    case (unsigned int)10: 
                           #line 3177 
    ;
    #line 3178 
    if (hw->phy_id == 21040160U) 
                                 #line 3179 
                                 match = (_Bool)1;
    #line 3180 
    break;
    #line 3181 
    case (unsigned int)9: 
                          #line 3181 
    ;
    #line 3182 
    if ((hw->phy_id == 1886480U || hw->phy_id == 33280U) || hw->phy_id == 21040704U) 
      #line 3185 
      match = (_Bool)1;
    #line 3186 
    break;
    #line 3187 
    case (unsigned int)11: 
                           #line 3187 
    ;
    #line 3188 
    case (unsigned int)12: 
                           #line 3188 
    ;
    #line 3189 
    case (unsigned int)13: 
                           #line 3189 
    ;
    #line 3190 
    case (unsigned int)14: 
                           #line 3190 
    ;
    #line 3191 
    if (hw->phy_id == 44565376U) 
                                 #line 3192 
                                 match = (_Bool)1;
    #line 3193 
    break;
    #line 3194 
    default: 
             #line 3194 
    ;
    {
      #line 3195 
      bool branch;
      #line 3195 
      struct _ddebug __UNIQUE_ID_ddebug632 = {.modname = (char *)"e1000", .function = (char *)"e1000_detect_gig_phy", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Invalid MAC type %d\n", .lineno = (unsigned int)3195U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3195 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug632.key.dd_key_false.key,(_Bool)0);
      #line 3195 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 3195 
        ;
        #line 3195 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug632,e1000_get_hw_dev(hw),(char *)"Invalid MAC type %d\n",(unsigned int)hw->mac_type);
      }
    }
    #line 3196 
    return -3;
  }
  #line 3198 
  phy_init_status = e1000_set_phy_type(hw);
  #line 3200 
  if ((int)match != 0 && phy_init_status == 0) {
    {
      #line 3201 
      bool branch_0;
      #line 3201 
      struct _ddebug __UNIQUE_ID_ddebug633 = {.modname = (char *)"e1000", .function = (char *)"e1000_detect_gig_phy", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"PHY ID 0x%X detected\n", .lineno = (unsigned int)3201U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3201 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug633.key.dd_key_false.key,(_Bool)0);
      #line 3201 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 3201 
        ;
        #line 3201 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug633,e1000_get_hw_dev(hw),(char *)"PHY ID 0x%X detected\n",hw->phy_id);
      }
    }
    #line 3202 
    return 0;
  }
  {
    #line 3204 
    bool branch_1;
    #line 3204 
    struct _ddebug __UNIQUE_ID_ddebug634 = {.modname = (char *)"e1000", .function = (char *)"e1000_detect_gig_phy", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Invalid PHY ID 0x%X\n", .lineno = (unsigned int)3204U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3204 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug634.key.dd_key_false.key,(_Bool)0);
    #line 3204 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 3204 
      ;
      #line 3204 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug634,e1000_get_hw_dev(hw),(char *)"Invalid PHY ID 0x%X\n",hw->phy_id);
    }
  }
  #line 3205 
  return -2;
}

#line 3214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_phy_reset_dsp(struct e1000_hw *hw)
{
  #line 3216 
  s32 ret_val;
  #line 3218 
  while (1) {
    #line 3219 
    ret_val = e1000_write_phy_reg(hw,29U,(unsigned short)29);
    #line 3220 
    if (ret_val != 0) 
                      #line 3221 
                      break;
    #line 3222 
    ret_val = e1000_write_phy_reg(hw,30U,(unsigned short)193);
    #line 3223 
    if (ret_val != 0) 
                      #line 3224 
                      break;
    #line 3225 
    ret_val = e1000_write_phy_reg(hw,30U,(unsigned short)0);
    #line 3226 
    if (ret_val != 0) 
                      #line 3227 
                      break;
    #line 3228 
    ret_val = 0;
    #line 3218 
    break;
  }
  #line 3231 
  return ret_val;
}

#line 3241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_phy_igp_get_info(struct e1000_hw *hw, struct e1000_phy_info *phy_info)
{
  #line 3244 
  s32 ret_val;
  #line 3245 
  u16 phy_data;
  #line 3245 
  u16 min_length;
  #line 3245 
  u16 max_length;
  #line 3245 
  u16 average;
  #line 3246 
  e1000_rev_polarity polarity;
  #line 3251 
  phy_info->downshift = (int)hw->speed_downgraded;
  #line 3254 
  phy_info->extended_10bt_distance = 0;
  #line 3257 
  phy_info->polarity_correction = 0;
  #line 3260 
  ret_val = e1000_check_polarity(hw,& polarity);
  #line 3261 
  if (ret_val != 0) 
                    #line 3262 
                    return ret_val;
  #line 3264 
  phy_info->cable_polarity = polarity;
  #line 3266 
  ret_val = e1000_read_phy_reg(hw,17U,& phy_data);
  #line 3267 
  if (ret_val != 0) 
                    #line 3268 
                    return ret_val;
  #line 3270 
  phy_info->mdix_mode = ((int)phy_data >> 11) & 1;
  #line 3274 
  if (((int)phy_data & 49152) == 49152) {
    #line 3279 
    ret_val = e1000_read_phy_reg(hw,10U,& phy_data);
    #line 3280 
    if (ret_val != 0) 
                      #line 3281 
                      return ret_val;
    #line 3283 
    phy_info->local_rx = ((int)phy_data >> 13) & 1;
    #line 3286 
    phy_info->remote_rx = ((int)phy_data >> 12) & 1;
    #line 3291 
    ret_val = e1000_get_cable_length(hw,& min_length,& max_length);
    #line 3292 
    if (ret_val != 0) 
                      #line 3293 
                      return ret_val;
    #line 3296 
    average = (unsigned short)(((int)max_length + (int)min_length) / 2);
    #line 3298 
    if ((unsigned int)average <= 50U) 
                                      #line 3299 
                                      phy_info->cable_length = 0;
    else 
      #line 3300 
      if ((unsigned int)average <= 80U) 
                                        #line 3301 
                                        phy_info->cable_length = 1;
      else 
        #line 3302 
        if ((unsigned int)average <= 110U) 
                                           #line 3303 
                                           phy_info->cable_length = 2;
        else 
          #line 3304 
          if ((unsigned int)average <= 140U) 
                                             #line 3305 
                                             phy_info->cable_length = 3; else 
                                                                    #line 3307 
                                                                    phy_info->cable_length = 4;
  }
  #line 3310 
  return 0;
}

#line 3320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_phy_m88_get_info(struct e1000_hw *hw, struct e1000_phy_info *phy_info)
{
  #line 3323 
  s32 ret_val;
  #line 3324 
  u16 phy_data;
  #line 3325 
  e1000_rev_polarity polarity;
  #line 3330 
  phy_info->downshift = (int)hw->speed_downgraded;
  #line 3332 
  ret_val = e1000_read_phy_reg(hw,16U,& phy_data);
  #line 3333 
  if (ret_val != 0) 
                    #line 3334 
                    return ret_val;
  #line 3336 
  phy_info->extended_10bt_distance = ((int)phy_data >> 7) & 1;
  #line 3342 
  phy_info->polarity_correction = ((int)phy_data >> 1) & 1;
  #line 3348 
  ret_val = e1000_check_polarity(hw,& polarity);
  #line 3349 
  if (ret_val != 0) 
                    #line 3350 
                    return ret_val;
  #line 3351 
  phy_info->cable_polarity = polarity;
  #line 3353 
  ret_val = e1000_read_phy_reg(hw,17U,& phy_data);
  #line 3354 
  if (ret_val != 0) 
                    #line 3355 
                    return ret_val;
  #line 3357 
  phy_info->mdix_mode = ((int)phy_data >> 6) & 1;
  #line 3361 
  if (((int)phy_data & 49152) == 32768) {
    #line 3365 
    phy_info->cable_length = ((int)phy_data >> 7) & 7;
    #line 3370 
    ret_val = e1000_read_phy_reg(hw,10U,& phy_data);
    #line 3371 
    if (ret_val != 0) 
                      #line 3372 
                      return ret_val;
    #line 3374 
    phy_info->local_rx = ((int)phy_data >> 13) & 1;
    #line 3377 
    phy_info->remote_rx = ((int)phy_data >> 12) & 1;
  }
  #line 3382 
  return 0;
}

#line 3392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_phy_get_info(struct e1000_hw *hw, struct e1000_phy_info *phy_info)
{
  #line 3394 
  s32 ret_val;
  #line 3395 
  u16 phy_data;
  #line 3397 
  phy_info->cable_length = 255;
  #line 3398 
  phy_info->extended_10bt_distance = 255;
  #line 3399 
  phy_info->cable_polarity = 255;
  #line 3400 
  phy_info->downshift = 255;
  #line 3401 
  phy_info->polarity_correction = 255;
  #line 3402 
  phy_info->mdix_mode = 255;
  #line 3403 
  phy_info->local_rx = 255;
  #line 3404 
  phy_info->remote_rx = 255;
  #line 3406 
  if (hw->media_type != (unsigned int)0) {
    {
      #line 3407 
      bool branch;
      #line 3407 
      struct _ddebug __UNIQUE_ID_ddebug635 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_get_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"PHY info is only valid for copper media\n", .lineno = (unsigned int)3407U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3407 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug635.key.dd_key_false.key,(_Bool)0);
      #line 3407 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 3407 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug635,e1000_get_hw_dev(hw),(char *)"PHY info is only valid for copper media\n");
      }
    }
    #line 3408 
    return -3;
  }
  #line 3411 
  ret_val = e1000_read_phy_reg(hw,1U,& phy_data);
  #line 3412 
  if (ret_val != 0) 
                    #line 3413 
                    return ret_val;
  #line 3415 
  ret_val = e1000_read_phy_reg(hw,1U,& phy_data);
  #line 3416 
  if (ret_val != 0) 
                    #line 3417 
                    return ret_val;
  #line 3419 
  if (((int)phy_data & 4) == 0) {
    {
      #line 3420 
      bool branch_0;
      #line 3420 
      struct _ddebug __UNIQUE_ID_ddebug636 = {.modname = (char *)"e1000", .function = (char *)"e1000_phy_get_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"PHY info is only valid if link is up\n", .lineno = (unsigned int)3420U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3420 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug636.key.dd_key_false.key,(_Bool)0);
      #line 3420 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 3420 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug636,e1000_get_hw_dev(hw),(char *)"PHY info is only valid if link is up\n");
      }
    }
    #line 3421 
    return -3;
  }
  #line 3424 
  if (hw->phy_type == (unsigned int)1) {
    #line 3425 
    return e1000_phy_igp_get_info(hw,phy_info);
  }
  else 
    #line 3426 
    if ((unsigned int)hw->phy_type + 4294967294U <= 1U) 
                                                        #line 3428 
                                                        return 0;
    else {
      #line 3430 
      return e1000_phy_m88_get_info(hw,phy_info);
    }
}

#line 3433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_validate_mdi_setting(struct e1000_hw *hw)
{
  #line 3435 
  if ((unsigned int)hw->autoneg == 0U && ((unsigned int)hw->mdix == 0U || (unsigned int)hw->mdix == 3U)) {
    {
      #line 3436 
      bool branch;
      #line 3436 
      struct _ddebug __UNIQUE_ID_ddebug637 = {.modname = (char *)"e1000", .function = (char *)"e1000_validate_mdi_setting", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Invalid MDI setting detected\n", .lineno = (unsigned int)3436U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3436 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug637.key.dd_key_false.key,(_Bool)0);
      #line 3436 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 3436 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug637,e1000_get_hw_dev(hw),(char *)"Invalid MDI setting detected\n");
      }
    }
    #line 3437 
    hw->mdix = (unsigned char)1U;
    #line 3438 
    return -3;
  }
  #line 3440 
  return 0;
}

#line 3450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_init_eeprom_params(struct e1000_hw *hw)
{
  #line 3455 
  u16 eeprom_size;
  #line 3452 
  struct e1000_eeprom_info *eeprom = & hw->eeprom;
  #line 3453 
  u32 eecd = readl((void *)(hw->hw_addr + 16U));
  #line 3454 
  s32 ret_val = 0;
  #line 3457 
  switch ((unsigned int)hw->mac_type) {
    #line 3458 
    case (unsigned int)1: 
                          #line 3458 
    ;
    #line 3459 
    case (unsigned int)2: 
                          #line 3459 
    ;
    #line 3460 
    case (unsigned int)3: 
                          #line 3460 
    ;
    #line 3461 
    case (unsigned int)4: 
                          #line 3461 
    ;
    #line 3462 
    eeprom->type = 2;
    #line 3463 
    eeprom->word_size = (unsigned short)64U;
    #line 3464 
    eeprom->opcode_bits = (unsigned short)3U;
    #line 3465 
    eeprom->address_bits = (unsigned short)6U;
    #line 3466 
    eeprom->delay_usec = (unsigned short)50U;
    #line 3467 
    break;
    #line 3468 
    case (unsigned int)5: 
                          #line 3468 
    ;
    #line 3469 
    case (unsigned int)6: 
                          #line 3469 
    ;
    #line 3470 
    case (unsigned int)7: 
                          #line 3470 
    ;
    #line 3471 
    case (unsigned int)8: 
                          #line 3471 
    ;
    #line 3472 
    case (unsigned int)10: 
                           #line 3472 
    ;
    #line 3473 
    eeprom->type = 2;
    #line 3474 
    eeprom->opcode_bits = (unsigned short)3U;
    #line 3475 
    eeprom->delay_usec = (unsigned short)50U;
    #line 3476 
    if ((eecd & 512U) != 0U) {
      #line 3477 
      eeprom->word_size = (unsigned short)256U;
      #line 3478 
      eeprom->address_bits = (unsigned short)8U;
    }
    else {
      #line 3480 
      eeprom->word_size = (unsigned short)64U;
      #line 3481 
      eeprom->address_bits = (unsigned short)6U;
    }
    #line 3483 
    break;
    #line 3484 
    case (unsigned int)11: 
                           #line 3484 
    ;
    #line 3485 
    case (unsigned int)12: 
                           #line 3485 
    ;
    #line 3486 
    case (unsigned int)13: 
                           #line 3486 
    ;
    #line 3487 
    case (unsigned int)14: 
                           #line 3487 
    ;
    #line 3488 
    if ((eecd & 8192U) != 0U) {
      #line 3489 
      eeprom->type = 1;
      #line 3490 
      eeprom->opcode_bits = (unsigned short)8U;
      #line 3491 
      eeprom->delay_usec = (unsigned short)1U;
      #line 3492 
      if ((eecd & 1024U) != 0U) {
        #line 3493 
        eeprom->page_size = (unsigned short)32U;
        #line 3494 
        eeprom->address_bits = (unsigned short)16U;
      }
      else {
        #line 3496 
        eeprom->page_size = (unsigned short)8U;
        #line 3497 
        eeprom->address_bits = (unsigned short)8U;
      }
    }
    else {
      #line 3500 
      eeprom->type = 2;
      #line 3501 
      eeprom->opcode_bits = (unsigned short)3U;
      #line 3502 
      eeprom->delay_usec = (unsigned short)50U;
      #line 3503 
      if ((eecd & 1024U) != 0U) {
        #line 3504 
        eeprom->word_size = (unsigned short)256U;
        #line 3505 
        eeprom->address_bits = (unsigned short)8U;
      }
      else {
        #line 3507 
        eeprom->word_size = (unsigned short)64U;
        #line 3508 
        eeprom->address_bits = (unsigned short)6U;
      }
    }
    #line 3511 
    break;
    #line 3512 
    default: 
             #line 3512 
    ;
    #line 3513 
    break;
  }
  #line 3516 
  if (eeprom->type == (unsigned int)1) {
    #line 3521 
    eeprom->word_size = (unsigned short)64U;
    #line 3522 
    ret_val = e1000_read_eeprom(hw,(unsigned short)18,(unsigned short)1,& eeprom_size);
    #line 3523 
    if (ret_val != 0) 
                      #line 3524 
                      return ret_val;
    #line 3525 
    eeprom_size = (unsigned short)((unsigned int)((unsigned short)((int)eeprom_size >> 10)) & 7U);
    #line 3531 
    if ((unsigned int)eeprom_size != 0U) 
                                         #line 3532 
                                         eeprom_size = (u16)((int)eeprom_size + 1);
    #line 3534 
    eeprom->word_size = (unsigned short)(1 << ((int)eeprom_size + 6));
  }
  #line 3536 
  return ret_val;
}

#line 3544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_raise_ee_clk(struct e1000_hw *hw, u32 *eecd)
{
  #line 3549 
  *eecd |= 1U;
  #line 3550 
  writel(*eecd,(void *)(hw->hw_addr + 16U));
  #line 3551 
  readl((void *)(hw->hw_addr + 8U));
  #line 3552 
  if (0 != 0) 
    #line 3552 
    if ((unsigned int)hw->eeprom.delay_usec > 19999U) 
                                                      #line 3552 
                                                      __bad_udelay(); else 
                                                                    #line 3552 
                                                                    __const_udelay((unsigned long)hw->eeprom.delay_usec * 4295UL);
  else 
       #line 3552 
       __udelay((unsigned long)hw->eeprom.delay_usec);
  #line 3554 
  return;
}

#line 3560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_lower_ee_clk(struct e1000_hw *hw, u32 *eecd)
{
  #line 3565 
  *eecd &= 4294967294U;
  #line 3566 
  writel(*eecd,(void *)(hw->hw_addr + 16U));
  #line 3567 
  readl((void *)(hw->hw_addr + 8U));
  #line 3568 
  if (0 != 0) 
    #line 3568 
    if ((unsigned int)hw->eeprom.delay_usec > 19999U) 
                                                      #line 3568 
                                                      __bad_udelay(); else 
                                                                    #line 3568 
                                                                    __const_udelay((unsigned long)hw->eeprom.delay_usec * 4295UL);
  else 
       #line 3568 
       __udelay((unsigned long)hw->eeprom.delay_usec);
  #line 3570 
  return;
}

#line 3577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_shift_out_ee_bits(struct e1000_hw *hw, u16 data, u16 count)
{
  #line 3580 
  u32 eecd;
  #line 3581 
  u32 mask;
  #line 3579 
  struct e1000_eeprom_info *eeprom = & hw->eeprom;
  #line 3587 
  mask = (unsigned int)(1 << ((int)count + -1));
  #line 3588 
  eecd = readl((void *)(hw->hw_addr + 16U));
  #line 3589 
  if (eeprom->type == (unsigned int)2) 
                                       #line 3590 
                                       eecd &= 4294967287U;
  else 
    #line 3591 
    if (eeprom->type == (unsigned int)1) 
                                         #line 3592 
                                         eecd |= 8U;
  #line 3594 
  while (1) {
    #line 3601 
    eecd &= 4294967291U;
    #line 3603 
    if (((unsigned int)data & mask) != 0U) 
                                           #line 3604 
                                           eecd |= 4U;
    #line 3606 
    writel(eecd,(void *)(hw->hw_addr + 16U));
    #line 3607 
    readl((void *)(hw->hw_addr + 8U));
    #line 3609 
    if (0 != 0) 
      #line 3609 
      if ((unsigned int)eeprom->delay_usec > 19999U) 
                                                     #line 3609 
                                                     __bad_udelay(); else 
                                                                    #line 3609 
                                                                    __const_udelay((unsigned long)eeprom->delay_usec * 4295UL);
    else 
         #line 3609 
         __udelay((unsigned long)eeprom->delay_usec);
    #line 3611 
    e1000_raise_ee_clk(hw,& eecd);
    #line 3612 
    e1000_lower_ee_clk(hw,& eecd);
    #line 3614 
    mask >>= 1;
    #line 3615 
    if (! (mask != 0U)) 
                        #line 3594 
                        break;
  }
  #line 3619 
  eecd &= 4294967291U;
  #line 3620 
  writel(eecd,(void *)(hw->hw_addr + 16U));
  #line 3621 
  return;
}

#line 3628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static u16 e1000_shift_in_ee_bits(struct e1000_hw *hw, u16 count)
{
  #line 3630 
  u32 eecd;
  #line 3631 
  u32 i;
  #line 3632 
  u16 data;
  #line 3641 
  eecd = readl((void *)(hw->hw_addr + 16U));
  #line 3643 
  eecd &= 4294967283U;
  #line 3644 
  data = (unsigned short)0U;
  #line 3646 
  i = 0U;
  #line 3646 
  while ((unsigned int)count > i) {
    #line 3647 
    data = (unsigned short)((int)data << 1U);
    #line 3648 
    e1000_raise_ee_clk(hw,& eecd);
    #line 3650 
    eecd = readl((void *)(hw->hw_addr + 16U));
    #line 3652 
    eecd &= 4294967291U;
    #line 3653 
    if ((eecd & 8U) != 0U) 
                           #line 3654 
                           data = (unsigned short)((unsigned int)data | 1U);
    #line 3656 
    e1000_lower_ee_clk(hw,& eecd);
    #line 3646 
    i ++;
  }
  #line 3659 
  return data;
}

#line 3669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_acquire_eeprom(struct e1000_hw *hw)
{
  #line 3672 
  u32 eecd;
  #line 3671 
  struct e1000_eeprom_info *eeprom = & hw->eeprom;
  #line 3672 
  u32 i = 0U;
  #line 3674 
  eecd = readl((void *)(hw->hw_addr + 16U));
  #line 3677 
  if (hw->mac_type > (unsigned int)4) {
    #line 3678 
    eecd |= 64U;
    #line 3679 
    writel(eecd,(void *)(hw->hw_addr + 16U));
    #line 3680 
    eecd = readl((void *)(hw->hw_addr + 16U));
    #line 3681 
    while ((eecd & 128U) == 0U && i <= 999U) {
      #line 3683 
      i ++;
      #line 3684 
      __const_udelay(21475UL);
      #line 3685 
      eecd = readl((void *)(hw->hw_addr + 16U));
    }
    #line 3687 
    if ((eecd & 128U) == 0U) {
      #line 3688 
      eecd &= 4294967231U;
      #line 3689 
      writel(eecd,(void *)(hw->hw_addr + 16U));
      {
        #line 3690 
        bool branch;
        #line 3690 
        struct _ddebug __UNIQUE_ID_ddebug638 = {.modname = (char *)"e1000", .function = (char *)"e1000_acquire_eeprom", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Could not acquire EEPROM grant\n", .lineno = (unsigned int)3690U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 3690 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug638.key.dd_key_false.key,(_Bool)0);
        #line 3690 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 3690 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug638,e1000_get_hw_dev(hw),(char *)"Could not acquire EEPROM grant\n");
        }
      }
      #line 3691 
      return -1;
    }
  }
  #line 3697 
  if (eeprom->type == (unsigned int)2) {
    #line 3699 
    eecd &= 4294967290U;
    #line 3700 
    writel(eecd,(void *)(hw->hw_addr + 16U));
    #line 3703 
    eecd |= 2U;
    #line 3704 
    writel(eecd,(void *)(hw->hw_addr + 16U));
  }
  else 
    #line 3705 
    if (eeprom->type == (unsigned int)1) {
      #line 3707 
      eecd &= 4294967292U;
      #line 3708 
      writel(eecd,(void *)(hw->hw_addr + 16U));
      #line 3709 
      readl((void *)(hw->hw_addr + 8U));
      #line 3710 
      __const_udelay(4295UL);
    }
  #line 3713 
  return 0;
}

#line 3720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_standby_eeprom(struct e1000_hw *hw)
{
  #line 3723 
  u32 eecd;
  #line 3722 
  struct e1000_eeprom_info *eeprom = & hw->eeprom;
  #line 3725 
  eecd = readl((void *)(hw->hw_addr + 16U));
  #line 3727 
  if (eeprom->type == (unsigned int)2) {
    #line 3728 
    eecd &= 4294967292U;
    #line 3729 
    writel(eecd,(void *)(hw->hw_addr + 16U));
    #line 3730 
    readl((void *)(hw->hw_addr + 8U));
    #line 3731 
    if (0 != 0) 
      #line 3731 
      if ((unsigned int)eeprom->delay_usec > 19999U) 
                                                     #line 3731 
                                                     __bad_udelay(); else 
                                                                    #line 3731 
                                                                    __const_udelay((unsigned long)eeprom->delay_usec * 4295UL);
    else 
         #line 3731 
         __udelay((unsigned long)eeprom->delay_usec);
    #line 3734 
    eecd |= 1U;
    #line 3735 
    writel(eecd,(void *)(hw->hw_addr + 16U));
    #line 3736 
    readl((void *)(hw->hw_addr + 8U));
    #line 3737 
    if (0 != 0) 
      #line 3737 
      if ((unsigned int)eeprom->delay_usec > 19999U) 
                                                     #line 3737 
                                                     __bad_udelay(); else 
                                                                    #line 3737 
                                                                    __const_udelay((unsigned long)eeprom->delay_usec * 4295UL);
    else 
         #line 3737 
         __udelay((unsigned long)eeprom->delay_usec);
    #line 3740 
    eecd |= 2U;
    #line 3741 
    writel(eecd,(void *)(hw->hw_addr + 16U));
    #line 3742 
    readl((void *)(hw->hw_addr + 8U));
    #line 3743 
    if (0 != 0) 
      #line 3743 
      if ((unsigned int)eeprom->delay_usec > 19999U) 
                                                     #line 3743 
                                                     __bad_udelay(); else 
                                                                    #line 3743 
                                                                    __const_udelay((unsigned long)eeprom->delay_usec * 4295UL);
    else 
         #line 3743 
         __udelay((unsigned long)eeprom->delay_usec);
    #line 3746 
    eecd &= 4294967294U;
    #line 3747 
    writel(eecd,(void *)(hw->hw_addr + 16U));
    #line 3748 
    readl((void *)(hw->hw_addr + 8U));
    #line 3749 
    if (0 != 0) 
      #line 3749 
      if ((unsigned int)eeprom->delay_usec > 19999U) 
                                                     #line 3749 
                                                     __bad_udelay(); else 
                                                                    #line 3749 
                                                                    __const_udelay((unsigned long)eeprom->delay_usec * 4295UL);
    else 
         #line 3749 
         __udelay((unsigned long)eeprom->delay_usec);
  }
  else 
    #line 3750 
    if (eeprom->type == (unsigned int)1) {
      #line 3752 
      eecd |= 2U;
      #line 3753 
      writel(eecd,(void *)(hw->hw_addr + 16U));
      #line 3754 
      readl((void *)(hw->hw_addr + 8U));
      #line 3755 
      if (0 != 0) 
        #line 3755 
        if ((unsigned int)eeprom->delay_usec > 19999U) 
                                                       #line 3755 
                                                       __bad_udelay(); else 
                                                                    #line 3755 
                                                                    __const_udelay((unsigned long)eeprom->delay_usec * 4295UL);
      else 
           #line 3755 
           __udelay((unsigned long)eeprom->delay_usec);
      #line 3756 
      eecd &= 4294967293U;
      #line 3757 
      writel(eecd,(void *)(hw->hw_addr + 16U));
      #line 3758 
      readl((void *)(hw->hw_addr + 8U));
      #line 3759 
      if (0 != 0) 
        #line 3759 
        if ((unsigned int)eeprom->delay_usec > 19999U) 
                                                       #line 3759 
                                                       __bad_udelay(); else 
                                                                    #line 3759 
                                                                    __const_udelay((unsigned long)eeprom->delay_usec * 4295UL);
      else 
           #line 3759 
           __udelay((unsigned long)eeprom->delay_usec);
    }
  #line 3762 
  return;
}

#line 3769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_release_eeprom(struct e1000_hw *hw)
{
  #line 3771 
  u32 eecd;
  #line 3773 
  eecd = readl((void *)(hw->hw_addr + 16U));
  #line 3775 
  if (hw->eeprom.type == (unsigned int)1) {
    #line 3776 
    eecd |= 2U;
    #line 3777 
    eecd &= 4294967294U;
    #line 3779 
    writel(eecd,(void *)(hw->hw_addr + 16U));
    #line 3780 
    readl((void *)(hw->hw_addr + 8U));
    #line 3782 
    if (0 != 0) 
      #line 3782 
      if ((unsigned int)hw->eeprom.delay_usec > 19999U) 
                                                        #line 3782 
                                                        __bad_udelay(); else 
                                                                    #line 3782 
                                                                    __const_udelay((unsigned long)hw->eeprom.delay_usec * 4295UL);
    else 
         #line 3782 
         __udelay((unsigned long)hw->eeprom.delay_usec);
  }
  else 
    #line 3783 
    if (hw->eeprom.type == (unsigned int)2) {
      #line 3787 
      eecd &= 4294967289U;
      #line 3789 
      writel(eecd,(void *)(hw->hw_addr + 16U));
      #line 3792 
      eecd |= 1U;
      #line 3793 
      writel(eecd,(void *)(hw->hw_addr + 16U));
      #line 3794 
      readl((void *)(hw->hw_addr + 8U));
      #line 3795 
      if (0 != 0) 
        #line 3795 
        if ((unsigned int)hw->eeprom.delay_usec > 19999U) 
                                                          #line 3795 
                                                          __bad_udelay(); else 
                                                                    #line 3795 
                                                                    __const_udelay((unsigned long)hw->eeprom.delay_usec * 4295UL);
      else 
           #line 3795 
           __udelay((unsigned long)hw->eeprom.delay_usec);
      #line 3798 
      eecd &= 4294967294U;
      #line 3799 
      writel(eecd,(void *)(hw->hw_addr + 16U));
      #line 3800 
      readl((void *)(hw->hw_addr + 8U));
      #line 3801 
      if (0 != 0) 
        #line 3801 
        if ((unsigned int)hw->eeprom.delay_usec > 19999U) 
                                                          #line 3801 
                                                          __bad_udelay(); else 
                                                                    #line 3801 
                                                                    __const_udelay((unsigned long)hw->eeprom.delay_usec * 4295UL);
      else 
           #line 3801 
           __udelay((unsigned long)hw->eeprom.delay_usec);
    }
  #line 3805 
  if (hw->mac_type > (unsigned int)4) {
    #line 3806 
    eecd &= 4294967231U;
    #line 3807 
    writel(eecd,(void *)(hw->hw_addr + 16U));
  }
  #line 3809 
  return;
}

#line 3815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_spi_eeprom_ready(struct e1000_hw *hw)
{
  #line 3818 
  u8 spi_stat_reg;
  #line 3817 
  u16 retry_count = (unsigned short)0U;
  #line 3825 
  retry_count = (unsigned short)0U;
  #line 3826 
  while (1) {
    {
      #line 3827 
      e1000_shift_out_ee_bits(hw,(unsigned short)5,(unsigned short)((int)hw->eeprom.opcode_bits));
      #line 3829 
      spi_stat_reg = (unsigned char)e1000_shift_in_ee_bits(hw,(unsigned short)8);
      #line 3830 
      if (((int)spi_stat_reg & 1) == 0) 
                                        #line 3831 
                                        break;
      #line 3833 
      __const_udelay(21475UL);
      #line 3834 
      retry_count = (unsigned short)((unsigned int)retry_count + 5U);
      #line 3836 
      e1000_standby_eeprom(hw);
    }
    #line 3837 
    if (! ((unsigned int)retry_count <= 4999U)) 
                                                #line 3826 
                                                break;
  }
  #line 3842 
  if ((unsigned int)retry_count > 4999U) {
    {
      #line 3843 
      bool branch;
      #line 3843 
      struct _ddebug __UNIQUE_ID_ddebug639 = {.modname = (char *)"e1000", .function = (char *)"e1000_spi_eeprom_ready", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"SPI EEPROM Status error\n", .lineno = (unsigned int)3843U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3843 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug639.key.dd_key_false.key,(_Bool)0);
      #line 3843 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 3843 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug639,e1000_get_hw_dev(hw),(char *)"SPI EEPROM Status error\n");
      }
    }
    #line 3844 
    return -1;
  }
  #line 3847 
  return 0;
}

#line 3857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_read_eeprom(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 3859 
  s32 ret;
  #line 3861 
  cif_mutex_lock_e1000_eeprom_lock(& e1000_eeprom_lock);
  #line 3862 
  ret = e1000_do_read_eeprom(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
  #line 3863 
  cif_mutex_unlock_e1000_eeprom_lock(& e1000_eeprom_lock);
  #line 3864 
  return ret;
}

#line 3867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_do_read_eeprom(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 3870 
  struct e1000_eeprom_info *eeprom = & hw->eeprom;
  #line 3871 
  u32 i = 0U;
  #line 3873 
  if (hw->mac_type == (unsigned int)9) {
    #line 3874 
    ;
    #line 3874 
    ;
    #line 3874 
    ;
    #line 3874 
    ioread16_rep(phys_to_virt(393216ULL) + (unsigned long)((int)offset << 1),(void *)data,(unsigned long)words);
    #line 3876 
    return 0;
  }
  #line 3882 
  if (((int)eeprom->word_size <= (int)offset || (int)words > (int)eeprom->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 3885 
      bool branch;
      #line 3885 
      struct _ddebug __UNIQUE_ID_ddebug640 = {.modname = (char *)"e1000", .function = (char *)"e1000_do_read_eeprom", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"\"words\" parameter out of bounds. Words = %d,", .lineno = (unsigned int)3885U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3885 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug640.key.dd_key_false.key,(_Bool)0);
      #line 3885 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 3885 
        ;
        #line 3885 
        ;
        #line 3885 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug640,e1000_get_hw_dev(hw),(char *)"\"words\" parameter out of bounds. Words = %d,",(int)offset,(int)eeprom->word_size);
      }
    }
    #line 3887 
    return -1;
  }
  #line 3895 
  if (e1000_acquire_eeprom(hw) != 0) 
                                     #line 3896 
                                     return -1;
  #line 3901 
  if (eeprom->type == (unsigned int)1) {
    #line 3902 
    u16 word_in;
    #line 3903 
    u8 read_opcode = (unsigned char)3U;
    #line 3905 
    if (e1000_spi_eeprom_ready(hw) != 0) {
      #line 3906 
      e1000_release_eeprom(hw);
      #line 3907 
      return -1;
    }
    #line 3910 
    e1000_standby_eeprom(hw);
    #line 3915 
    if ((unsigned int)eeprom->address_bits == 8U && (unsigned int)offset > 127U) 
      #line 3916 
      read_opcode = (unsigned char)((unsigned int)read_opcode | 8U);
    #line 3919 
    e1000_shift_out_ee_bits(hw,(unsigned short)((int)read_opcode),(unsigned short)((int)eeprom->opcode_bits));
    #line 3920 
    e1000_shift_out_ee_bits(hw,(unsigned short)((int)((unsigned int)offset * 2U)),(unsigned short)((int)eeprom->address_bits));
    #line 3930 
    i = 0U;
    #line 3930 
    while ((unsigned int)words > i) {
      #line 3931 
      word_in = e1000_shift_in_ee_bits(hw,(unsigned short)16);
      #line 3932 
      *(data + (unsigned long)i) = (unsigned short)(((int)word_in >> 8) | ((int)word_in << 8));
      #line 3930 
      i ++;
    }
  }
  else 
    #line 3934 
    if (eeprom->type == (unsigned int)2) {
      #line 3935 
      i = 0U;
      #line 3935 
      while ((unsigned int)words > i) {
        #line 3937 
        e1000_shift_out_ee_bits(hw,(unsigned short)6,(unsigned short)((int)eeprom->opcode_bits));
        #line 3940 
        e1000_shift_out_ee_bits(hw,(unsigned short)((int)((unsigned short)i) + (int)offset),(unsigned short)((int)eeprom->address_bits));
        #line 3946 
        *(data + (unsigned long)i) = e1000_shift_in_ee_bits(hw,(unsigned short)16);
        #line 3947 
        e1000_standby_eeprom(hw);
        #line 3948 
        ___might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c",3948,0);
        #line 3948 
        _cond_resched();
        #line 3935 
        i ++;
      }
    }
  #line 3953 
  e1000_release_eeprom(hw);
  #line 3955 
  return 0;
}

#line 3966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_validate_eeprom_checksum(struct e1000_hw *hw)
{
  #line 3969 
  u16 i;
  #line 3969 
  u16 eeprom_data;
  #line 3968 
  u16 checksum = (unsigned short)0U;
  #line 3971 
  i = (unsigned short)0U;
  #line 3971 
  while ((unsigned int)i <= 63U) {
    {
      #line 3972 
      if (e1000_read_eeprom(hw,(unsigned short)((int)i),(unsigned short)1,
                          & eeprom_data) < 0) {
        {
          #line 3973 
          bool branch;
          #line 3973 
          struct _ddebug __UNIQUE_ID_ddebug641 = {.modname = (char *)"e1000", .function = (char *)"e1000_validate_eeprom_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"EEPROM Read Error\n", .lineno = (unsigned int)3973U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 3973 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug641.key.dd_key_false.key,(_Bool)0);
          #line 3973 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 3973 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug641,e1000_get_hw_dev(hw),(char *)"EEPROM Read Error\n");
          }
        }
        #line 3974 
        return -1;
      }
      #line 3976 
      checksum = (unsigned short)((int)checksum + (int)eeprom_data);
    }
    #line 3971 
    i = (u16)((int)i + 1);
  }
  #line 3985 
  if ((unsigned int)checksum == 47802U) 
                                        #line 3986 
                                        return 0;
  else {
    {
      #line 3988 
      bool branch_0;
      #line 3988 
      struct _ddebug __UNIQUE_ID_ddebug642 = {.modname = (char *)"e1000", .function = (char *)"e1000_validate_eeprom_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"EEPROM Checksum Invalid\n", .lineno = (unsigned int)3988U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3988 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug642.key.dd_key_false.key,(_Bool)0);
      #line 3988 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 3988 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug642,e1000_get_hw_dev(hw),(char *)"EEPROM Checksum Invalid\n");
      }
    }
    #line 3989 
    return -1;
  }
}

#line 4000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_update_eeprom_checksum(struct e1000_hw *hw)
{
  #line 4003 
  u16 i;
  #line 4003 
  u16 eeprom_data;
  #line 4002 
  u16 checksum = (unsigned short)0U;
  #line 4005 
  i = (unsigned short)0U;
  #line 4005 
  while ((unsigned int)i <= 62U) {
    {
      #line 4006 
      if (e1000_read_eeprom(hw,(unsigned short)((int)i),(unsigned short)1,
                          & eeprom_data) < 0) {
        {
          #line 4007 
          bool branch;
          #line 4007 
          struct _ddebug __UNIQUE_ID_ddebug643 = {.modname = (char *)"e1000", .function = (char *)"e1000_update_eeprom_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"EEPROM Read Error\n", .lineno = (unsigned int)4007U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 4007 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug643.key.dd_key_false.key,(_Bool)0);
          #line 4007 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 4007 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug643,e1000_get_hw_dev(hw),(char *)"EEPROM Read Error\n");
          }
        }
        #line 4008 
        return -1;
      }
      #line 4010 
      checksum = (unsigned short)((int)checksum + (int)eeprom_data);
    }
    #line 4005 
    i = (u16)((int)i + 1);
  }
  #line 4012 
  checksum = (unsigned short)(47802U - (unsigned int)checksum);
  #line 4013 
  if (e1000_write_eeprom(hw,(unsigned short)63,(unsigned short)1,
                           & checksum) < 0) {
    {
      #line 4014 
      bool branch_0;
      #line 4014 
      struct _ddebug __UNIQUE_ID_ddebug644 = {.modname = (char *)"e1000", .function = (char *)"e1000_update_eeprom_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"EEPROM Write Error\n", .lineno = (unsigned int)4014U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 4014 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug644.key.dd_key_false.key,(_Bool)0);
      #line 4014 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 4014 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug644,e1000_get_hw_dev(hw),(char *)"EEPROM Write Error\n");
      }
    }
    #line 4015 
    return -1;
  }
  #line 4017 
  return 0;
}

#line 4030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_write_eeprom(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 4032 
  s32 ret;
  #line 4034 
  cif_mutex_lock_e1000_eeprom_lock(& e1000_eeprom_lock);
  #line 4035 
  ret = e1000_do_write_eeprom(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
  #line 4036 
  cif_mutex_unlock_e1000_eeprom_lock(& e1000_eeprom_lock);
  #line 4037 
  return ret;
}

#line 4040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_do_write_eeprom(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 4043 
  struct e1000_eeprom_info *eeprom = & hw->eeprom;
  #line 4044 
  s32 status = 0;
  #line 4046 
  if (hw->mac_type == (unsigned int)9) {
    #line 4047 
    ;
    #line 4047 
    ;
    #line 4047 
    ;
    #line 4047 
    iowrite16_rep(phys_to_virt(393216ULL) + (unsigned long)offset,(void *)data,(unsigned long)words);
    #line 4049 
    return 0;
  }
  #line 4055 
  if (((int)eeprom->word_size <= (int)offset || (int)words > (int)eeprom->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 4058 
      bool branch;
      #line 4058 
      struct _ddebug __UNIQUE_ID_ddebug645 = {.modname = (char *)"e1000", .function = (char *)"e1000_do_write_eeprom", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"\"words\" parameter out of bounds\n", .lineno = (unsigned int)4058U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 4058 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug645.key.dd_key_false.key,(_Bool)0);
      #line 4058 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 4058 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug645,e1000_get_hw_dev(hw),(char *)"\"words\" parameter out of bounds\n");
      }
    }
    #line 4059 
    return -1;
  }
  #line 4063 
  if (e1000_acquire_eeprom(hw) != 0) 
                                     #line 4064 
                                     return -1;
  #line 4066 
  if (eeprom->type == (unsigned int)2) 
                                       #line 4067 
                                       status = e1000_write_eeprom_microwire(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
  else {
    #line 4069 
    status = e1000_write_eeprom_spi(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
    #line 4070 
    msleep(10U);
  }
  #line 4074 
  e1000_release_eeprom(hw);
  #line 4076 
  return status;
}

#line 4086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_write_eeprom_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 4089 
  struct e1000_eeprom_info *eeprom = & hw->eeprom;
  #line 4090 
  u16 widx = (unsigned short)0U;
  #line 4092 
  while ((int)widx < (int)words) {
    #line 4093 
    u8 write_opcode = (unsigned char)2U;
    #line 4095 
    if (e1000_spi_eeprom_ready(hw) != 0) 
                                         #line 4096 
                                         return -1;
    #line 4098 
    e1000_standby_eeprom(hw);
    #line 4099 
    ___might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c",4099,0);
    #line 4099 
    _cond_resched();
    #line 4102 
    e1000_shift_out_ee_bits(hw,(unsigned short)6,(unsigned short)((int)eeprom->opcode_bits));
    #line 4105 
    e1000_standby_eeprom(hw);
    #line 4110 
    if ((unsigned int)eeprom->address_bits == 8U && (unsigned int)offset > 127U) 
      #line 4111 
      write_opcode = (unsigned char)((unsigned int)write_opcode | 8U);
    #line 4114 
    e1000_shift_out_ee_bits(hw,(unsigned short)((int)write_opcode),(unsigned short)((int)eeprom->opcode_bits));
    #line 4116 
    e1000_shift_out_ee_bits(hw,(unsigned short)((int)((unsigned int)((int)offset + (int)widx) * 2U)),(unsigned short)((int)eeprom->address_bits));
    #line 4124 
    while ((int)widx < (int)words) {
      #line 4125 
      u16 word_out = *(data + (unsigned long)widx);
      #line 4127 
      word_out = (unsigned short)(((int)word_out >> 8) | ((int)word_out << 8));
      #line 4128 
      e1000_shift_out_ee_bits(hw,(unsigned short)((int)word_out),(unsigned short)16);
      #line 4129 
      widx = (u16)((int)widx + 1);
      #line 4136 
      if ((((int)offset + (int)widx) * 2) % (int)eeprom->page_size == 0) {
        #line 4137 
        e1000_standby_eeprom(hw);
        #line 4138 
        break;
      }
    }
  }
  #line 4143 
  return 0;
}

#line 4153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_write_eeprom_microwire(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 4157 
  u32 eecd;
  #line 4156 
  struct e1000_eeprom_info *eeprom = & hw->eeprom;
  #line 4158 
  u16 words_written = (unsigned short)0U;
  #line 4159 
  u16 i = (unsigned short)0U;
  #line 4167 
  e1000_shift_out_ee_bits(hw,(unsigned short)19,(unsigned short)((int)((unsigned int)eeprom->opcode_bits + 2U)));
  #line 4170 
  e1000_shift_out_ee_bits(hw,(unsigned short)0,(unsigned short)((int)((unsigned int)eeprom->address_bits + 65534U)));
  #line 4173 
  e1000_standby_eeprom(hw);
  #line 4175 
  while ((int)words_written < (int)words) {
    #line 4177 
    e1000_shift_out_ee_bits(hw,(unsigned short)5,(unsigned short)((int)eeprom->opcode_bits));
    #line 4180 
    e1000_shift_out_ee_bits(hw,(unsigned short)((int)offset + (int)words_written),(unsigned short)((int)eeprom->address_bits));
    #line 4184 
    e1000_shift_out_ee_bits(hw,(unsigned short)((int)*(data + (unsigned long)words_written)),(unsigned short)16);
    #line 4189 
    e1000_standby_eeprom(hw);
    #line 4196 
    i = (unsigned short)0U;
    #line 4196 
    while ((unsigned int)i <= 199U) {
      #line 4197 
      eecd = readl((void *)(hw->hw_addr + 16U));
      #line 4198 
      if ((eecd & 8U) != 0U) 
                             #line 4199 
                             break;
      #line 4200 
      __const_udelay(214750UL);
      #line 4196 
      i = (u16)((int)i + 1);
    }
    #line 4202 
    if ((unsigned int)i == 200U) {
      {
        #line 4203 
        bool branch;
        #line 4203 
        struct _ddebug __UNIQUE_ID_ddebug646 = {.modname = (char *)"e1000", .function = (char *)"e1000_write_eeprom_microwire", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"EEPROM Write did not complete\n", .lineno = (unsigned int)4203U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 4203 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug646.key.dd_key_false.key,(_Bool)0);
        #line 4203 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 4203 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug646,e1000_get_hw_dev(hw),(char *)"EEPROM Write did not complete\n");
        }
      }
      #line 4204 
      return -1;
    }
    #line 4208 
    e1000_standby_eeprom(hw);
    #line 4209 
    ___might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c",4209,0);
    #line 4209 
    _cond_resched();
    #line 4211 
    words_written = (u16)((int)words_written + 1);
  }
  #line 4220 
  e1000_shift_out_ee_bits(hw,(unsigned short)16,(unsigned short)((int)((unsigned int)eeprom->opcode_bits + 2U)));
  #line 4223 
  e1000_shift_out_ee_bits(hw,(unsigned short)0,(unsigned short)((int)((unsigned int)eeprom->address_bits + 65534U)));
  #line 4225 
  return 0;
}

#line 4235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_read_mac_addr(struct e1000_hw *hw)
{
  #line 4237 
  u16 offset;
  #line 4238 
  u16 eeprom_data;
  #line 4238 
  u16 i;
  #line 4240 
  i = (unsigned short)0U;
  #line 4240 
  while ((unsigned int)i <= 5U) {
    {
      #line 4241 
      offset = (unsigned short)((int)i >> 1);
      #line 4242 
      if (e1000_read_eeprom(hw,(unsigned short)((int)offset),(unsigned short)1,
                          & eeprom_data) < 0) {
        {
          #line 4243 
          bool branch;
          #line 4243 
          struct _ddebug __UNIQUE_ID_ddebug647 = {.modname = (char *)"e1000", .function = (char *)"e1000_read_mac_addr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"EEPROM Read Error\n", .lineno = (unsigned int)4243U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 4243 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug647.key.dd_key_false.key,(_Bool)0);
          #line 4243 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 4243 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug647,e1000_get_hw_dev(hw),(char *)"EEPROM Read Error\n");
          }
        }
        #line 4244 
        return -1;
      }
      #line 4246 
      hw->perm_mac_addr[(int)i] = (unsigned char)eeprom_data;
      #line 4247 
      hw->perm_mac_addr[(int)i + 1] = (unsigned char)((int)eeprom_data >> 8);
    }
    #line 4240 
    i = (unsigned short)((unsigned int)i + 2U);
  }
  #line 4250 
  switch ((unsigned int)hw->mac_type) {
    #line 4251 
    default: 
             #line 4251 
    ;
    #line 4252 
    break;
    #line 4253 
    case (unsigned int)8: 
                          #line 4253 
    ;
    #line 4254 
    case (unsigned int)10: 
                           #line 4254 
    ;
    #line 4255 
    if ((readl((void *)(hw->hw_addr + 8U)) & 4U) != 0U) 
                                                        #line 4256 
                                                        hw->perm_mac_addr[5] = (unsigned char)((unsigned int)hw->perm_mac_addr[5] ^ 1U);
    #line 4257 
    break;
  }
  #line 4260 
  i = (unsigned short)0U;
  #line 4260 
  while ((unsigned int)i <= 5U) {
    #line 4261 
    hw->mac_addr[(int)i] = hw->perm_mac_addr[(int)i];
    #line 4260 
    i = (u16)((int)i + 1);
  }
  #line 4262 
  return 0;
}

#line 4273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_init_rx_addrs(struct e1000_hw *hw)
{
  #line 4275 
  u32 i;
  #line 4276 
  u32 rar_num;
  {
    #line 4279 
    bool branch;
    #line 4279 
    struct _ddebug __UNIQUE_ID_ddebug648 = {.modname = (char *)"e1000", .function = (char *)"e1000_init_rx_addrs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Programming MAC Address into RAR[0]\n", .lineno = (unsigned int)4279U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4279 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug648.key.dd_key_false.key,(_Bool)0);
    #line 4279 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 4279 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug648,e1000_get_hw_dev(hw),(char *)"Programming MAC Address into RAR[0]\n");
    }
  }
  #line 4281 
  e1000_rar_set(hw,(u8 *)(& hw->mac_addr),0U);
  #line 4283 
  rar_num = 15U;
  {
    #line 4288 
    bool branch_0;
    #line 4288 
    struct _ddebug __UNIQUE_ID_ddebug649 = {.modname = (char *)"e1000", .function = (char *)"e1000_init_rx_addrs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Clearing RAR[1-14]\n", .lineno = (unsigned int)4288U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4288 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug649.key.dd_key_false.key,(_Bool)0);
    #line 4288 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 4288 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug649,e1000_get_hw_dev(hw),(char *)"Clearing RAR[1-14]\n");
    }
  }
  #line 4289 
  i = 1U;
  #line 4289 
  while (i < rar_num) {
    {
      #line 4290 
      unsigned int tmp_3;
      #line 4292 
      unsigned int tmp_4;
      #line 4290 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 4290 
                                          tmp_3 = 21504U; else 
                                                               #line 4290 
                                                               tmp_3 = 64U;
      #line 4290 
      ;
      #line 4290 
      writel(0U,(void *)(hw->hw_addr + ((unsigned long)tmp_3 + (unsigned long)(i << 3))));
      #line 4291 
      readl((void *)(hw->hw_addr + 8U));
      #line 4292 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 4292 
                                          tmp_4 = 21504U; else 
                                                               #line 4292 
                                                               tmp_4 = 64U;
      #line 4292 
      ;
      #line 4292 
      writel(0U,(void *)(hw->hw_addr + ((unsigned long)tmp_4 + (unsigned long)(((i << 1) + 1U) << 2))));
      #line 4293 
      readl((void *)(hw->hw_addr + 8U));
    }
    #line 4289 
    i ++;
  }
  #line 4295 
  return;
}

#line 4302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
u32 e1000_hash_mc_addr(struct e1000_hw *hw, u8 *mc_addr)
{
  #line 4304 
  u32 hash_value = 0U;
  #line 4309 
  switch (hw->mc_filter_type) {
    #line 4314 
    case (u32)0: 
                 #line 4314 
    ;
    #line 4316 
    hash_value = (unsigned int)(((int)*(mc_addr + 4U) >> 4) | ((int)*(mc_addr + 5U) << 4));
    #line 4317 
    break;
    #line 4318 
    case (u32)1: 
                 #line 4318 
    ;
    #line 4320 
    hash_value = (unsigned int)(((int)*(mc_addr + 4U) >> 3) | ((int)*(mc_addr + 5U) << 5));
    #line 4321 
    break;
    #line 4322 
    case (u32)2: 
                 #line 4322 
    ;
    #line 4324 
    hash_value = (unsigned int)(((int)*(mc_addr + 4U) >> 2) | ((int)*(mc_addr + 5U) << 6));
    #line 4325 
    break;
    #line 4326 
    case (u32)3: 
                 #line 4326 
    ;
    #line 4328 
    hash_value = (unsigned int)((int)*(mc_addr + 4U) | ((int)*(mc_addr + 5U) << 8));
    #line 4329 
    break;
  }
  #line 4332 
  hash_value &= 4095U;
  #line 4333 
  return hash_value;
}

#line 4342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
void e1000_rar_set(struct e1000_hw *hw, u8 *addr, u32 index)
{
  #line 4344 
  u32 rar_low;
  #line 4344 
  u32 rar_high;
  #line 4378 
  unsigned int tmp;
  #line 4380 
  unsigned int tmp_0;
  #line 4349 
  rar_low = (((unsigned int)*addr | ((unsigned int)*(addr + 1U) << 8)) | ((unsigned int)*(addr + 2U) << 16)) | ((unsigned int)*(addr + 3U) << 24);
  #line 4351 
  rar_high = (unsigned int)*(addr + 4U) | ((unsigned int)*(addr + 5U) << 8);
  #line 4371 
  switch ((unsigned int)hw->mac_type) {
    #line 4372 
    default: 
             #line 4372 
    ;
    #line 4374 
    rar_high |= 2147483648U;
    #line 4375 
    break;
  }
  #line 4378 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 4378 
                                      tmp = 21504U; else 
                                                         #line 4378 
                                                         tmp = 64U;
  #line 4378 
  ;
  #line 4378 
  ;
  #line 4378 
  writel(rar_low,(void *)(hw->hw_addr + ((unsigned long)tmp + (unsigned long)(index << 3))));
  #line 4379 
  readl((void *)(hw->hw_addr + 8U));
  #line 4380 
  if (hw->mac_type > (unsigned int)2) 
                                      #line 4380 
                                      tmp_0 = 21504U; else 
                                                           #line 4380 
                                                           tmp_0 = 64U;
  #line 4380 
  ;
  #line 4380 
  ;
  #line 4380 
  writel(rar_high,(void *)(hw->hw_addr + ((unsigned long)tmp_0 + (unsigned long)(((index << 1) + 1U) << 2))));
  #line 4381 
  readl((void *)(hw->hw_addr + 8U));
  #line 4382 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
void e1000_write_vfta(struct e1000_hw *hw, u32 offset, u32 value)
{
  #line 4392 
  u32 temp;
  #line 4394 
  if (hw->mac_type == (unsigned int)4 && (offset & 1U) != 0U) {
    #line 4395 
    unsigned int tmp;
    #line 4396 
    unsigned int tmp_0;
    #line 4398 
    unsigned int tmp_1;
    #line 4395 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 4395 
                                        tmp = 22016U; else 
                                                           #line 4395 
                                                           tmp = 1536U;
    #line 4395 
    ;
    #line 4395 
    temp = readl((void *)(hw->hw_addr + ((unsigned long)tmp + (unsigned long)((offset + 4294967295U) << 2))));
    #line 4396 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 4396 
                                        tmp_0 = 22016U; else 
                                                             #line 4396 
                                                             tmp_0 = 1536U;
    #line 4396 
    ;
    #line 4396 
    ;
    #line 4396 
    writel(value,(void *)(hw->hw_addr + ((unsigned long)tmp_0 + (unsigned long)(offset << 2))));
    #line 4397 
    readl((void *)(hw->hw_addr + 8U));
    #line 4398 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 4398 
                                        tmp_1 = 22016U; else 
                                                             #line 4398 
                                                             tmp_1 = 1536U;
    #line 4398 
    ;
    #line 4398 
    ;
    #line 4398 
    writel(temp,(void *)(hw->hw_addr + ((unsigned long)tmp_1 + (unsigned long)((offset + 4294967295U) << 2))));
    #line 4399 
    readl((void *)(hw->hw_addr + 8U));
  }
  else {
    #line 4401 
    unsigned int tmp_2;
    #line 4401 
    if (hw->mac_type > (unsigned int)2) 
                                        #line 4401 
                                        tmp_2 = 22016U; else 
                                                             #line 4401 
                                                             tmp_2 = 1536U;
    #line 4401 
    ;
    #line 4401 
    ;
    #line 4401 
    writel(value,(void *)(hw->hw_addr + ((unsigned long)tmp_2 + (unsigned long)(offset << 2))));
    #line 4402 
    readl((void *)(hw->hw_addr + 8U));
  }
  #line 4404 
  return;
}

#line 4410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_clear_vfta(struct e1000_hw *hw)
{
  #line 4412 
  u32 offset;
  #line 4413 
  u32 vfta_value = 0U;
  #line 4414 
  u32 vfta_offset = 0U;
  #line 4415 
  u32 vfta_bit_in_reg = 0U;
  #line 4417 
  offset = 0U;
  #line 4417 
  while (offset <= 127U) {
    {
      #line 4423 
      unsigned int tmp;
      #line 4422 
      if (offset == vfta_offset) 
                                 #line 4422 
                                 vfta_value = vfta_bit_in_reg; else 
                                                                    #line 4422 
                                                                    vfta_value = 0U;
      #line 4423 
      if (hw->mac_type > (unsigned int)2) 
                                          #line 4423 
                                          tmp = 22016U; else 
                                                             #line 4423 
                                                             tmp = 1536U;
      #line 4423 
      ;
      #line 4423 
      ;
      #line 4423 
      writel(vfta_value,(void *)(hw->hw_addr + ((unsigned long)tmp + (unsigned long)(offset << 2))));
      #line 4424 
      readl((void *)(hw->hw_addr + 8U));
    }
    #line 4417 
    offset ++;
  }
  #line 4426 
  return;
}

#line 4428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_id_led_init(struct e1000_hw *hw)
{
  #line 4430 
  u32 ledctl;
  #line 4434 
  u16 eeprom_data;
  #line 4434 
  u16 i;
  #line 4434 
  u16 temp;
  #line 4431 
  u32 ledctl_mask = 255U;
  #line 4432 
  u32 ledctl_on = 14U;
  #line 4433 
  u32 ledctl_off = 15U;
  #line 4435 
  u16 led_mask = (unsigned short)15U;
  #line 4437 
  if (hw->mac_type <= (unsigned int)4) 
                                       #line 4439 
                                       return 0;
  #line 4442 
  ledctl = readl((void *)(hw->hw_addr + 3584U));
  #line 4443 
  hw->ledctl_default = ledctl;
  #line 4444 
  hw->ledctl_mode1 = hw->ledctl_default;
  #line 4445 
  hw->ledctl_mode2 = hw->ledctl_default;
  #line 4447 
  if (e1000_read_eeprom(hw,(unsigned short)4,(unsigned short)1,
                          & eeprom_data) < 0) {
    {
      #line 4448 
      bool branch;
      #line 4448 
      struct _ddebug __UNIQUE_ID_ddebug650 = {.modname = (char *)"e1000", .function = (char *)"e1000_id_led_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"EEPROM Read Error\n", .lineno = (unsigned int)4448U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 4448 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug650.key.dd_key_false.key,(_Bool)0);
      #line 4448 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 4448 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug650,e1000_get_hw_dev(hw),(char *)"EEPROM Read Error\n");
      }
    }
    #line 4449 
    return -1;
  }
  #line 4452 
  if ((unsigned int)eeprom_data + 65535U > 65533U) 
                                                   #line 4454 
                                                   eeprom_data = (unsigned short)35089U;
  #line 4457 
  i = (unsigned short)0U;
  #line 4457 
  while ((unsigned int)i <= 3U) {
    #line 4458 
    temp = (unsigned short)((unsigned int)((unsigned short)((int)eeprom_data >> ((int)i << 2))) & 15U);
    #line 4459 
    switch ((int)temp) {
      #line 4460 
      case 4: 
              #line 4460 
      ;
      #line 4461 
      case 5: 
              #line 4461 
      ;
      #line 4462 
      case 6: 
              #line 4462 
      ;
      #line 4463 
      hw->ledctl_mode1 &= ~ (255U << ((int)i << 3));
      #line 4464 
      hw->ledctl_mode1 |= 14U << ((int)i << 3);
      #line 4465 
      break;
      #line 4466 
      case 7: 
              #line 4466 
      ;
      #line 4467 
      case 8: 
              #line 4467 
      ;
      #line 4468 
      case 9: 
              #line 4468 
      ;
      #line 4469 
      hw->ledctl_mode1 &= ~ (255U << ((int)i << 3));
      #line 4470 
      hw->ledctl_mode1 |= 15U << ((int)i << 3);
      #line 4471 
      break;
      #line 4472 
      default: 
               #line 4472 
      ;
      #line 4474 
      break;
    }
    #line 4476 
    switch ((int)temp) {
      #line 4477 
      case 2: 
              #line 4477 
      ;
      #line 4478 
      case 5: 
              #line 4478 
      ;
      #line 4479 
      case 8: 
              #line 4479 
      ;
      #line 4480 
      hw->ledctl_mode2 &= ~ (255U << ((int)i << 3));
      #line 4481 
      hw->ledctl_mode2 |= 14U << ((int)i << 3);
      #line 4482 
      break;
      #line 4483 
      case 3: 
              #line 4483 
      ;
      #line 4484 
      case 6: 
              #line 4484 
      ;
      #line 4485 
      case 9: 
              #line 4485 
      ;
      #line 4486 
      hw->ledctl_mode2 &= ~ (255U << ((int)i << 3));
      #line 4487 
      hw->ledctl_mode2 |= 15U << ((int)i << 3);
      #line 4488 
      break;
      #line 4489 
      default: 
               #line 4489 
      ;
      #line 4491 
      break;
    }
    #line 4457 
    i = (u16)((int)i + 1);
  }
  #line 4494 
  return 0;
}

#line 4503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_setup_led(struct e1000_hw *hw)
{
  #line 4505 
  u32 ledctl;
  #line 4506 
  s32 ret_val = 0;
  #line 4508 
  switch ((unsigned int)hw->mac_type) {
    #line 4509 
    case (unsigned int)1: 
                          #line 4509 
    ;
    #line 4510 
    case (unsigned int)2: 
                          #line 4510 
    ;
    #line 4511 
    case (unsigned int)3: 
                          #line 4511 
    ;
    #line 4512 
    case (unsigned int)4: 
                          #line 4512 
    ;
    #line 4514 
    break;
    #line 4515 
    case (unsigned int)11: 
                           #line 4515 
    ;
    #line 4516 
    case (unsigned int)13: 
                           #line 4516 
    ;
    #line 4517 
    case (unsigned int)12: 
                           #line 4517 
    ;
    #line 4518 
    case (unsigned int)14: 
                           #line 4518 
    ;
    #line 4520 
    ret_val = e1000_read_phy_reg(hw,20U,& hw->phy_spd_default);
    #line 4522 
    if (ret_val != 0) 
                      #line 4523 
                      return ret_val;
    #line 4524 
    ret_val = e1000_write_phy_reg(hw,20U,(unsigned short)((int)hw->phy_spd_default & 65503));
    #line 4527 
    if (ret_val != 0) 
                      #line 4528 
                      return ret_val;
    #line 4530 
    default: 
             #line 4530 
    ;
    #line 4531 
    if (hw->media_type == (unsigned int)1) {
      #line 4532 
      ledctl = readl((void *)(hw->hw_addr + 3584U));
      #line 4534 
      hw->ledctl_default = ledctl;
      #line 4536 
      ledctl &= 4294967088U;
      #line 4539 
      ledctl |= 15U;
      #line 4541 
      writel(ledctl,(void *)(hw->hw_addr + 3584U));
    }
    else 
      #line 4542 
      if (hw->media_type == (unsigned int)0) 
                                             #line 4543 
                                             writel(hw->ledctl_mode1,(void *)(hw->hw_addr + 3584U));
    #line 4544 
    break;
  }
  #line 4547 
  return 0;
}

#line 4554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_cleanup_led(struct e1000_hw *hw)
{
  #line 4556 
  s32 ret_val = 0;
  #line 4558 
  switch ((unsigned int)hw->mac_type) {
    #line 4559 
    case (unsigned int)1: 
                          #line 4559 
    ;
    #line 4560 
    case (unsigned int)2: 
                          #line 4560 
    ;
    #line 4561 
    case (unsigned int)3: 
                          #line 4561 
    ;
    #line 4562 
    case (unsigned int)4: 
                          #line 4562 
    ;
    #line 4564 
    break;
    #line 4565 
    case (unsigned int)11: 
                           #line 4565 
    ;
    #line 4566 
    case (unsigned int)13: 
                           #line 4566 
    ;
    #line 4567 
    case (unsigned int)12: 
                           #line 4567 
    ;
    #line 4568 
    case (unsigned int)14: 
                           #line 4568 
    ;
    #line 4570 
    ret_val = e1000_write_phy_reg(hw,20U,(unsigned short)((int)hw->phy_spd_default));
    #line 4572 
    if (ret_val != 0) 
                      #line 4573 
                      return ret_val;
    #line 4575 
    default: 
             #line 4575 
    ;
    #line 4577 
    writel(hw->ledctl_default,(void *)(hw->hw_addr + 3584U));
    #line 4578 
    break;
  }
  #line 4581 
  return 0;
}

#line 4588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_led_on(struct e1000_hw *hw)
{
  #line 4590 
  u32 ctrl = readl((void *)hw->hw_addr);
  #line 4592 
  switch ((unsigned int)hw->mac_type) {
    #line 4593 
    case (unsigned int)1: 
                          #line 4593 
    ;
    #line 4594 
    case (unsigned int)2: 
                          #line 4594 
    ;
    #line 4595 
    case (unsigned int)3: 
                          #line 4595 
    ;
    #line 4597 
    ctrl |= 262144U;
    #line 4598 
    ctrl |= 4194304U;
    #line 4599 
    break;
    #line 4600 
    case (unsigned int)4: 
                          #line 4600 
    ;
    #line 4601 
    if (hw->media_type == (unsigned int)1) {
      #line 4603 
      ctrl |= 262144U;
      #line 4604 
      ctrl |= 4194304U;
    }
    else {
      #line 4607 
      ctrl &= 4294705151U;
      #line 4608 
      ctrl |= 4194304U;
    }
    #line 4610 
    break;
    #line 4611 
    default: 
             #line 4611 
    ;
    #line 4612 
    if (hw->media_type == (unsigned int)1) {
      #line 4614 
      ctrl &= 4294705151U;
      #line 4615 
      ctrl |= 4194304U;
    }
    else 
      #line 4616 
      if (hw->media_type == (unsigned int)0) {
        #line 4617 
        writel(hw->ledctl_mode2,(void *)(hw->hw_addr + 3584U));
        #line 4618 
        return 0;
      }
    #line 4620 
    break;
  }
  #line 4623 
  writel(ctrl,(void *)hw->hw_addr);
  #line 4625 
  return 0;
}

#line 4632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
s32 e1000_led_off(struct e1000_hw *hw)
{
  #line 4634 
  u32 ctrl = readl((void *)hw->hw_addr);
  #line 4636 
  switch ((unsigned int)hw->mac_type) {
    #line 4637 
    case (unsigned int)1: 
                          #line 4637 
    ;
    #line 4638 
    case (unsigned int)2: 
                          #line 4638 
    ;
    #line 4639 
    case (unsigned int)3: 
                          #line 4639 
    ;
    #line 4641 
    ctrl &= 4294705151U;
    #line 4642 
    ctrl |= 4194304U;
    #line 4643 
    break;
    #line 4644 
    case (unsigned int)4: 
                          #line 4644 
    ;
    #line 4645 
    if (hw->media_type == (unsigned int)1) {
      #line 4647 
      ctrl &= 4294705151U;
      #line 4648 
      ctrl |= 4194304U;
    }
    else {
      #line 4651 
      ctrl |= 262144U;
      #line 4652 
      ctrl |= 4194304U;
    }
    #line 4654 
    break;
    #line 4655 
    default: 
             #line 4655 
    ;
    #line 4656 
    if (hw->media_type == (unsigned int)1) {
      #line 4658 
      ctrl |= 262144U;
      #line 4659 
      ctrl |= 4194304U;
    }
    else 
      #line 4660 
      if (hw->media_type == (unsigned int)0) {
        #line 4661 
        writel(hw->ledctl_mode1,(void *)(hw->hw_addr + 3584U));
        #line 4662 
        return 0;
      }
    #line 4664 
    break;
  }
  #line 4667 
  writel(ctrl,(void *)hw->hw_addr);
  #line 4669 
  return 0;
}

#line 4676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_clear_hw_cntrs(struct e1000_hw *hw)
{
  #line 4678 
  u32 temp;
  #line 4680 
  temp = readl((void *)(hw->hw_addr + 16384U));
  #line 4681 
  temp = readl((void *)(hw->hw_addr + 16392U));
  #line 4682 
  temp = readl((void *)(hw->hw_addr + 16400U));
  #line 4683 
  temp = readl((void *)(hw->hw_addr + 16404U));
  #line 4684 
  temp = readl((void *)(hw->hw_addr + 16408U));
  #line 4685 
  temp = readl((void *)(hw->hw_addr + 16412U));
  #line 4686 
  temp = readl((void *)(hw->hw_addr + 16416U));
  #line 4687 
  temp = readl((void *)(hw->hw_addr + 16424U));
  #line 4688 
  temp = readl((void *)(hw->hw_addr + 16432U));
  #line 4689 
  temp = readl((void *)(hw->hw_addr + 16440U));
  #line 4690 
  temp = readl((void *)(hw->hw_addr + 16448U));
  #line 4691 
  temp = readl((void *)(hw->hw_addr + 16456U));
  #line 4692 
  temp = readl((void *)(hw->hw_addr + 16460U));
  #line 4693 
  temp = readl((void *)(hw->hw_addr + 16464U));
  #line 4694 
  temp = readl((void *)(hw->hw_addr + 16468U));
  #line 4695 
  temp = readl((void *)(hw->hw_addr + 16472U));
  #line 4697 
  temp = readl((void *)(hw->hw_addr + 16476U));
  #line 4698 
  temp = readl((void *)(hw->hw_addr + 16480U));
  #line 4699 
  temp = readl((void *)(hw->hw_addr + 16484U));
  #line 4700 
  temp = readl((void *)(hw->hw_addr + 16488U));
  #line 4701 
  temp = readl((void *)(hw->hw_addr + 16492U));
  #line 4702 
  temp = readl((void *)(hw->hw_addr + 16496U));
  #line 4704 
  temp = readl((void *)(hw->hw_addr + 16500U));
  #line 4705 
  temp = readl((void *)(hw->hw_addr + 16504U));
  #line 4706 
  temp = readl((void *)(hw->hw_addr + 16508U));
  #line 4707 
  temp = readl((void *)(hw->hw_addr + 16512U));
  #line 4708 
  temp = readl((void *)(hw->hw_addr + 16520U));
  #line 4709 
  temp = readl((void *)(hw->hw_addr + 16524U));
  #line 4710 
  temp = readl((void *)(hw->hw_addr + 16528U));
  #line 4711 
  temp = readl((void *)(hw->hw_addr + 16532U));
  #line 4712 
  temp = readl((void *)(hw->hw_addr + 16544U));
  #line 4713 
  temp = readl((void *)(hw->hw_addr + 16548U));
  #line 4714 
  temp = readl((void *)(hw->hw_addr + 16552U));
  #line 4715 
  temp = readl((void *)(hw->hw_addr + 16556U));
  #line 4716 
  temp = readl((void *)(hw->hw_addr + 16560U));
  #line 4717 
  temp = readl((void *)(hw->hw_addr + 16576U));
  #line 4718 
  temp = readl((void *)(hw->hw_addr + 16580U));
  #line 4719 
  temp = readl((void *)(hw->hw_addr + 16584U));
  #line 4720 
  temp = readl((void *)(hw->hw_addr + 16588U));
  #line 4721 
  temp = readl((void *)(hw->hw_addr + 16592U));
  #line 4722 
  temp = readl((void *)(hw->hw_addr + 16596U));
  #line 4724 
  temp = readl((void *)(hw->hw_addr + 16600U));
  #line 4725 
  temp = readl((void *)(hw->hw_addr + 16604U));
  #line 4726 
  temp = readl((void *)(hw->hw_addr + 16608U));
  #line 4727 
  temp = readl((void *)(hw->hw_addr + 16612U));
  #line 4728 
  temp = readl((void *)(hw->hw_addr + 16616U));
  #line 4729 
  temp = readl((void *)(hw->hw_addr + 16620U));
  #line 4731 
  temp = readl((void *)(hw->hw_addr + 16624U));
  #line 4732 
  temp = readl((void *)(hw->hw_addr + 16628U));
  #line 4734 
  if (hw->mac_type <= (unsigned int)2) 
                                       #line 4735 
                                       return;
  #line 4737 
  temp = readl((void *)(hw->hw_addr + 16388U));
  #line 4738 
  temp = readl((void *)(hw->hw_addr + 16396U));
  #line 4739 
  temp = readl((void *)(hw->hw_addr + 16436U));
  #line 4740 
  temp = readl((void *)(hw->hw_addr + 16444U));
  #line 4741 
  temp = readl((void *)(hw->hw_addr + 16632U));
  #line 4742 
  temp = readl((void *)(hw->hw_addr + 16636U));
  #line 4744 
  if (hw->mac_type <= (unsigned int)4) 
                                       #line 4745 
                                       return;
  #line 4747 
  temp = readl((void *)(hw->hw_addr + 16564U));
  #line 4748 
  temp = readl((void *)(hw->hw_addr + 16568U));
  #line 4749 
  temp = readl((void *)(hw->hw_addr + 16572U));
  #line 4750 
  return;
}

#line 4761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
void e1000_reset_adaptive(struct e1000_hw *hw)
{
  #line 4763 
  if ((int)hw->adaptive_ifs != 0) {
    #line 4764 
    if (! hw->ifs_params_forced) {
      #line 4765 
      hw->current_ifs_val = (unsigned short)0U;
      #line 4766 
      hw->ifs_min_val = (unsigned short)40U;
      #line 4767 
      hw->ifs_max_val = (unsigned short)80U;
      #line 4768 
      hw->ifs_step_size = (unsigned short)10U;
      #line 4769 
      hw->ifs_ratio = (unsigned short)4U;
    }
    #line 4771 
    hw->in_ifs_mode = (_Bool)0;
    #line 4772 
    writel(0U,(void *)(hw->hw_addr + 1112U));
  }
  else {
    #line 4774 
    bool branch;
    #line 4774 
    struct _ddebug __UNIQUE_ID_ddebug651 = {.modname = (char *)"e1000", .function = (char *)"e1000_reset_adaptive", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Not in Adaptive IFS mode!\n", .lineno = (unsigned int)4774U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4774 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug651.key.dd_key_false.key,(_Bool)0);
    #line 4774 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 4774 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug651,e1000_get_hw_dev(hw),(char *)"Not in Adaptive IFS mode!\n");
    }
  }
  #line 4776 
  return;
}

#line 4787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
void e1000_update_adaptive(struct e1000_hw *hw)
{
  #line 4789 
  if ((int)hw->adaptive_ifs != 0) {
    #line 4790 
    if (hw->collision_delta * (unsigned int)hw->ifs_ratio > hw->tx_packet_delta) {
      #line 4791 
      if (hw->tx_packet_delta > 1000U) {
        #line 4792 
        hw->in_ifs_mode = (_Bool)1;
        #line 4793 
        if ((int)hw->current_ifs_val < (int)hw->ifs_max_val) {
          #line 4794 
          if ((unsigned int)hw->current_ifs_val == 0U) 
                                                       #line 4795 
                                                       hw->current_ifs_val = hw->ifs_min_val; else 
                                                                    #line 4798 
                                                                    hw->current_ifs_val = (unsigned short)((int)hw->current_ifs_val + (int)hw->ifs_step_size);
          #line 4800 
          writel((unsigned int)hw->current_ifs_val,(void *)(hw->hw_addr + 1112U));
        }
      }
    }
    else 
      #line 4804 
      if ((int)hw->in_ifs_mode != 0 && hw->tx_packet_delta <= 1000U) {
        #line 4806 
        hw->current_ifs_val = (unsigned short)0U;
        #line 4807 
        hw->in_ifs_mode = (_Bool)0;
        #line 4808 
        writel(0U,(void *)(hw->hw_addr + 1112U));
      }
  }
  else {
    #line 4812 
    bool branch;
    #line 4812 
    struct _ddebug __UNIQUE_ID_ddebug652 = {.modname = (char *)"e1000", .function = (char *)"e1000_update_adaptive", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Not in Adaptive IFS mode!\n", .lineno = (unsigned int)4812U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4812 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug652.key.dd_key_false.key,(_Bool)0);
    #line 4812 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 4812 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug652,e1000_get_hw_dev(hw),(char *)"Not in Adaptive IFS mode!\n");
    }
  }
  #line 4814 
  return;
}

#line 4822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
void e1000_get_bus_info(struct e1000_hw *hw)
{
  #line 4824 
  u32 status;
  #line 4826 
  switch ((unsigned int)hw->mac_type) {
    #line 4827 
    case (unsigned int)1: 
                          #line 4827 
    ;
    #line 4828 
    case (unsigned int)2: 
                          #line 4828 
    ;
    #line 4829 
    hw->bus_type = 1;
    #line 4830 
    hw->bus_speed = 0;
    #line 4831 
    hw->bus_width = 0;
    #line 4832 
    break;
    #line 4833 
    default: 
             #line 4833 
    ;
    #line 4834 
    status = readl((void *)(hw->hw_addr + 8U));
    #line 4835 
    if ((status & 8192U) != 0U) 
                                #line 4835 
                                hw->bus_type = 2; else 
                                                       #line 4835 
                                                       hw->bus_type = 1;
    #line 4838 
    if ((unsigned int)hw->device_id == 4125U) 
      #line 4839 
      if (hw->bus_type == (unsigned int)1) 
                                           #line 4839 
                                           hw->bus_speed = 2; else 
                                                                   #line 4839 
                                                                   hw->bus_speed = 4;
    else 
      #line 4841 
      if (hw->bus_type == (unsigned int)1) 
        #line 4842 
        if ((status & 2048U) != 0U) 
                                    #line 4842 
                                    hw->bus_speed = 2; else 
                                                            #line 4842 
                                                            hw->bus_speed = 1;
      else 
        #line 4845 
        switch (status & 49152U) {
          #line 4846 
          case (unsigned int)0: 
                                #line 4846 
          ;
          #line 4847 
          hw->bus_speed = 2;
          #line 4848 
          break;
          #line 4849 
          case (unsigned int)16384: 
                                    #line 4849 
          ;
          #line 4850 
          hw->bus_speed = 3;
          #line 4851 
          break;
          #line 4852 
          case (unsigned int)32768: 
                                    #line 4852 
          ;
          #line 4853 
          hw->bus_speed = 5;
          #line 4854 
          break;
          #line 4855 
          default: 
                   #line 4855 
          ;
          #line 4856 
          hw->bus_speed = 6;
          #line 4857 
          break;
        }
    #line 4860 
    if ((status & 4096U) != 0U) 
                                #line 4860 
                                hw->bus_width = 2; else 
                                                        #line 4860 
                                                        hw->bus_width = 1;
    #line 4862 
    break;
  }
  #line 4864 
  return;
}

#line 4875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static void e1000_write_reg_io(struct e1000_hw *hw, u32 offset, u32 value)
{
  #line 4877 
  unsigned long io_addr = hw->io_base;
  #line 4878 
  unsigned long io_data = hw->io_base + 4UL;
  #line 4880 
  e1000_io_write(hw,io_addr,offset);
  #line 4881 
  e1000_io_write(hw,io_data,value);
  #line 4882 
  return;
}

#line 4898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_get_cable_length(struct e1000_hw *hw, u16 *min_length, u16 *max_length)
{
  #line 4901 
  s32 ret_val;
  #line 4903 
  u16 i;
  #line 4903 
  u16 phy_data;
  #line 4904 
  u16 cable_length;
  #line 4902 
  u16 agc_value = (unsigned short)0U;
  #line 4906 
  *max_length = ((unsigned short)0U);
  #line 4906 
  *min_length = ((unsigned short)0U);
  #line 4909 
  if (hw->phy_type == (unsigned int)0) {
    #line 4910 
    ret_val = e1000_read_phy_reg(hw,17U,& phy_data);
    #line 4912 
    if (ret_val != 0) 
                      #line 4913 
                      return ret_val;
    #line 4914 
    cable_length = (unsigned short)((unsigned int)((unsigned short)((int)phy_data >> 7)) & 7U);
    #line 4918 
    switch ((int)cable_length) {
      #line 4919 
      case 0: 
              #line 4919 
      ;
      #line 4920 
      *min_length = (unsigned short)0U;
      #line 4921 
      *max_length = (unsigned short)50U;
      #line 4922 
      break;
      #line 4923 
      case 1: 
              #line 4923 
      ;
      #line 4924 
      *min_length = (unsigned short)50U;
      #line 4925 
      *max_length = (unsigned short)80U;
      #line 4926 
      break;
      #line 4927 
      case 2: 
              #line 4927 
      ;
      #line 4928 
      *min_length = (unsigned short)80U;
      #line 4929 
      *max_length = (unsigned short)110U;
      #line 4930 
      break;
      #line 4931 
      case 3: 
              #line 4931 
      ;
      #line 4932 
      *min_length = (unsigned short)110U;
      #line 4933 
      *max_length = (unsigned short)140U;
      #line 4934 
      break;
      #line 4935 
      case 4: 
              #line 4935 
      ;
      #line 4936 
      *min_length = (unsigned short)140U;
      #line 4937 
      *max_length = (unsigned short)170U;
      #line 4938 
      break;
      #line 4939 
      default: 
               #line 4939 
      ;
      #line 4940 
      return -2;
    }
  }
  else 
    #line 4942 
    if (hw->phy_type == (unsigned int)1) {
      #line 4943 
      u16 cur_agc_value;
      #line 4986 
      unsigned int tmp_0;
      #line 4944 
      u16 min_agc_value = (unsigned short)128U;
      #line 4945 
      u16 agc_reg_array[4U] = {(unsigned short)4466U, (unsigned short)4722U, (unsigned short)5234U, (unsigned short)6258U};
      #line 4952 
      i = (unsigned short)0U;
      #line 4952 
      while ((unsigned int)i <= 3U) {
        #line 4953 
        ret_val = e1000_read_phy_reg(hw,(unsigned int)agc_reg_array[(int)i],& phy_data);
        #line 4955 
        if (ret_val != 0) 
                          #line 4956 
                          return ret_val;
        #line 4958 
        cur_agc_value = (unsigned short)((int)phy_data >> 7);
        #line 4961 
        if ((unsigned int)cur_agc_value + 65535U > 125U) 
                                                         #line 4964 
                                                         return -2;
        #line 4966 
        agc_value = (unsigned short)((int)agc_value + (int)cur_agc_value);
        #line 4969 
        if ((int)min_agc_value > (int)cur_agc_value) 
                                                     #line 4970 
                                                     min_agc_value = cur_agc_value;
        #line 4952 
        i = (u16)((int)i + 1);
      }
      #line 4974 
      if ((unsigned int)agc_value <= 199U) {
        #line 4976 
        agc_value = (unsigned short)((int)agc_value - (int)min_agc_value);
        #line 4979 
        agc_value = (unsigned short)((unsigned int)agc_value / 3U);
      }
      else 
           #line 4982 
           agc_value = (unsigned short)((unsigned int)agc_value / 4U);
      #line 4986 
      if (10U > (unsigned int)e1000_igp_cable_length_table[(int)agc_value]) 
        #line 4986 
        tmp_0 = 10U; else 
                          #line 4986 
                          tmp_0 = (unsigned int)e1000_igp_cable_length_table[(int)agc_value];
      #line 4986 
      *min_length = (unsigned short)(tmp_0 + 65526U);
      #line 4990 
      *max_length = (unsigned short)((unsigned int)e1000_igp_cable_length_table[(int)agc_value] + 10U);
    }
  #line 4994 
  return 0;
}

#line 5012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_check_polarity(struct e1000_hw *hw, e1000_rev_polarity *polarity)
{
  #line 5015 
  s32 ret_val;
  #line 5016 
  u16 phy_data;
  #line 5018 
  if (hw->phy_type == (unsigned int)0) {
    #line 5020 
    ret_val = e1000_read_phy_reg(hw,17U,& phy_data);
    #line 5022 
    if (ret_val != 0) 
                      #line 5023 
                      return ret_val;
    #line 5024 
    *polarity = ((int)phy_data >> 1) & 1;
  }
  else 
    #line 5028 
    if (hw->phy_type == (unsigned int)1) {
      #line 5030 
      ret_val = e1000_read_phy_reg(hw,17U,& phy_data);
      #line 5032 
      if (ret_val != 0) 
                        #line 5033 
                        return ret_val;
      #line 5038 
      if (((int)phy_data & 49152) == 49152) {
        #line 5041 
        ret_val = e1000_read_phy_reg(hw,180U,& phy_data);
        #line 5044 
        if (ret_val != 0) 
                          #line 5045 
                          return ret_val;
        #line 5048 
        *polarity = ((int)phy_data & 120) != 0;
      }
      else 
           #line 5055 
           *polarity = ((int)phy_data >> 1) & 1;
    }
  #line 5061 
  return 0;
}

#line 5078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_check_downshift(struct e1000_hw *hw)
{
  #line 5080 
  s32 ret_val;
  #line 5081 
  u16 phy_data;
  #line 5083 
  if (hw->phy_type == (unsigned int)1) {
    #line 5084 
    ret_val = e1000_read_phy_reg(hw,19U,& phy_data);
    #line 5086 
    if (ret_val != 0) 
                      #line 5087 
                      return ret_val;
    #line 5089 
    hw->speed_downgraded = (_Bool)((unsigned int)((unsigned short)((int)phy_data >> 15)) != 0U);
  }
  else 
    #line 5091 
    if (hw->phy_type == (unsigned int)0) {
      #line 5092 
      ret_val = e1000_read_phy_reg(hw,17U,& phy_data);
      #line 5094 
      if (ret_val != 0) 
                        #line 5095 
                        return ret_val;
      #line 5097 
      hw->speed_downgraded = (_Bool)((((int)phy_data >> 5) & 1) != 0);
    }
  #line 5101 
  return 0;
}

#line 5104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static u16 dsp_reg_array[4U] = {(unsigned short)4465U, (unsigned short)4721U, (unsigned short)5233U, (unsigned short)6257U};
#line 5111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_1000Mb_check_cable_length(struct e1000_hw *hw)
{
  #line 5113 
  u16 min_length;
  #line 5113 
  u16 max_length;
  #line 5114 
  u16 phy_data;
  #line 5114 
  u16 i;
  #line 5115 
  s32 ret_val;
  #line 5117 
  ret_val = e1000_get_cable_length(hw,& min_length,& max_length);
  #line 5118 
  if (ret_val != 0) 
                    #line 5119 
                    return ret_val;
  #line 5121 
  if (hw->dsp_config_state != (unsigned int)1) 
                                               #line 5122 
                                               return 0;
  #line 5124 
  if ((unsigned int)min_length > 49U) {
    #line 5125 
    i = (unsigned short)0U;
    #line 5125 
    while ((unsigned int)i <= 3U) {
      #line 5126 
      ret_val = e1000_read_phy_reg(hw,(unsigned int)dsp_reg_array[(int)i],& phy_data);
      #line 5128 
      if (ret_val != 0) 
                        #line 5129 
                        return ret_val;
      #line 5131 
      phy_data = (unsigned short)((unsigned int)phy_data & 16383U);
      #line 5133 
      ret_val = e1000_write_phy_reg(hw,(unsigned int)dsp_reg_array[(int)i],(unsigned short)((int)phy_data));
      #line 5135 
      if (ret_val != 0) 
                        #line 5136 
                        return ret_val;
      #line 5125 
      i = (u16)((int)i + 1);
    }
    #line 5138 
    hw->dsp_config_state = 2;
  }
  else {
    #line 5140 
    u16 ffe_idle_err_timeout = (unsigned short)20U;
    #line 5141 
    u32 idle_errs = 0U;
    #line 5144 
    ret_val = e1000_read_phy_reg(hw,10U,& phy_data);
    #line 5145 
    if (ret_val != 0) 
                      #line 5146 
                      return ret_val;
    #line 5148 
    i = (unsigned short)0U;
    #line 5148 
    while ((int)i < (int)ffe_idle_err_timeout) {
      #line 5149 
      __const_udelay(4295000UL);
      #line 5150 
      ret_val = e1000_read_phy_reg(hw,10U,& phy_data);
      #line 5152 
      if (ret_val != 0) 
                        #line 5153 
                        return ret_val;
      #line 5155 
      idle_errs = ((unsigned int)phy_data & 255U) + idle_errs;
      #line 5156 
      if (idle_errs > 5U) {
        #line 5157 
        hw->ffe_config_state = 1;
        #line 5159 
        ret_val = e1000_write_phy_reg(hw,7989U,(unsigned short)105);
        #line 5162 
        if (ret_val != 0) 
                          #line 5163 
                          return ret_val;
        #line 5164 
        break;
      }
      #line 5167 
      if (idle_errs != 0U) 
                           #line 5168 
                           ffe_idle_err_timeout = (unsigned short)100U;
      #line 5148 
      i = (u16)((int)i + 1);
    }
  }
  #line 5173 
  return 0;
}

#line 5188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_config_dsp_after_link_change(struct e1000_hw *hw, bool link_up)
{
  #line 5190 
  s32 ret_val;
  #line 5191 
  u16 phy_data;
  #line 5191 
  u16 phy_saved_data;
  #line 5191 
  u16 speed;
  #line 5191 
  u16 duplex;
  #line 5191 
  u16 i;
  #line 5193 
  if (hw->phy_type != (unsigned int)1) 
                                       #line 5194 
                                       return 0;
  #line 5196 
  if ((int)link_up != 0) {
    #line 5197 
    ret_val = e1000_get_speed_and_duplex(hw,& speed,& duplex);
    #line 5198 
    if (ret_val != 0) {
      {
        #line 5199 
        bool branch;
        #line 5199 
        struct _ddebug __UNIQUE_ID_ddebug653 = {.modname = (char *)"e1000", .function = (char *)"e1000_config_dsp_after_link_change", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c", .format = (char *)"Error getting link speed and duplex\n", .lineno = (unsigned int)5199U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 5199 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug653.key.dd_key_false.key,(_Bool)0);
        #line 5199 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 5199 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug653,e1000_get_hw_dev(hw),(char *)"Error getting link speed and duplex\n");
        }
      }
      #line 5200 
      return ret_val;
    }
    #line 5203 
    if ((unsigned int)speed == 1000U) {
      #line 5204 
      ret_val = e1000_1000Mb_check_cable_length(hw);
      #line 5205 
      if (ret_val != 0) 
                        #line 5206 
                        return ret_val;
    }
  }
  else {
    #line 5209 
    if (hw->dsp_config_state == (unsigned int)2) {
      #line 5213 
      ret_val = e1000_read_phy_reg(hw,12123U,& phy_saved_data);
      #line 5216 
      if (ret_val != 0) 
                        #line 5217 
                        return ret_val;
      #line 5220 
      ret_val = e1000_write_phy_reg(hw,12123U,(unsigned short)3);
      #line 5222 
      if (ret_val != 0) 
                        #line 5223 
                        return ret_val;
      #line 5225 
      msleep(20U);
      #line 5227 
      ret_val = e1000_write_phy_reg(hw,0U,(unsigned short)320);
      #line 5229 
      if (ret_val != 0) 
                        #line 5230 
                        return ret_val;
      #line 5231 
      i = (unsigned short)0U;
      #line 5231 
      while ((unsigned int)i <= 3U) {
        #line 5232 
        ret_val = e1000_read_phy_reg(hw,(unsigned int)dsp_reg_array[(int)i],& phy_data);
        #line 5235 
        if (ret_val != 0) 
                          #line 5236 
                          return ret_val;
        #line 5238 
        phy_data = (unsigned short)((unsigned int)phy_data & 16383U);
        #line 5239 
        phy_data = (unsigned short)((unsigned int)phy_data | 32768U);
        #line 5241 
        ret_val = e1000_write_phy_reg(hw,(unsigned int)dsp_reg_array[(int)i],(unsigned short)((int)phy_data));
        #line 5244 
        if (ret_val != 0) 
                          #line 5245 
                          return ret_val;
        #line 5231 
        i = (u16)((int)i + 1);
      }
      #line 5248 
      ret_val = e1000_write_phy_reg(hw,0U,(unsigned short)13056);
      #line 5250 
      if (ret_val != 0) 
                        #line 5251 
                        return ret_val;
      #line 5253 
      msleep(20U);
      #line 5256 
      ret_val = e1000_write_phy_reg(hw,12123U,(unsigned short)((int)phy_saved_data));
      #line 5259 
      if (ret_val != 0) 
                        #line 5260 
                        return ret_val;
      #line 5262 
      hw->dsp_config_state = 1;
    }
    #line 5265 
    if (hw->ffe_config_state == (unsigned int)1) {
      #line 5269 
      ret_val = e1000_read_phy_reg(hw,12123U,& phy_saved_data);
      #line 5272 
      if (ret_val != 0) 
                        #line 5273 
                        return ret_val;
      #line 5276 
      ret_val = e1000_write_phy_reg(hw,12123U,(unsigned short)3);
      #line 5278 
      if (ret_val != 0) 
                        #line 5279 
                        return ret_val;
      #line 5281 
      msleep(20U);
      #line 5283 
      ret_val = e1000_write_phy_reg(hw,0U,(unsigned short)320);
      #line 5285 
      if (ret_val != 0) 
                        #line 5286 
                        return ret_val;
      #line 5287 
      ret_val = e1000_write_phy_reg(hw,7989U,(unsigned short)42);
      #line 5290 
      if (ret_val != 0) 
                        #line 5291 
                        return ret_val;
      #line 5293 
      ret_val = e1000_write_phy_reg(hw,0U,(unsigned short)13056);
      #line 5295 
      if (ret_val != 0) 
                        #line 5296 
                        return ret_val;
      #line 5298 
      msleep(20U);
      #line 5301 
      ret_val = e1000_write_phy_reg(hw,12123U,(unsigned short)((int)phy_saved_data));
      #line 5304 
      if (ret_val != 0) 
                        #line 5305 
                        return ret_val;
      #line 5307 
      hw->ffe_config_state = 0;
    }
  }
  #line 5310 
  return 0;
}

#line 5321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_set_phy_mode(struct e1000_hw *hw)
{
  #line 5323 
  s32 ret_val;
  #line 5324 
  u16 eeprom_data;
  #line 5326 
  if (hw->mac_type == (unsigned int)7 && hw->media_type == (unsigned int)0) {
    #line 5328 
    ret_val = e1000_read_eeprom(hw,(unsigned short)7,(unsigned short)1,& eeprom_data);
    #line 5331 
    if (ret_val != 0) 
                      #line 5332 
                      return ret_val;
    #line 5334 
    if ((unsigned int)eeprom_data != 65535U && ((int)eeprom_data & 32768) != 0) {
      #line 5336 
      ret_val = e1000_write_phy_reg(hw,29U,(unsigned short)11);
      #line 5339 
      if (ret_val != 0) 
                        #line 5340 
                        return ret_val;
      #line 5341 
      ret_val = e1000_write_phy_reg(hw,30U,(unsigned short)33028);
      #line 5344 
      if (ret_val != 0) 
                        #line 5345 
                        return ret_val;
      #line 5347 
      hw->phy_reset_disable = (_Bool)0;
    }
  }
  #line 5351 
  return 0;
}

#line 5367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_set_d3_lplu_state(struct e1000_hw *hw, bool active)
{
  #line 5369 
  s32 ret_val;
  #line 5370 
  u16 phy_data;
  #line 5372 
  if (hw->phy_type != (unsigned int)1) 
                                       #line 5373 
                                       return 0;
  #line 5379 
  if (hw->mac_type == (unsigned int)12 || hw->mac_type == (unsigned int)14) {
    #line 5381 
    ret_val = e1000_read_phy_reg(hw,20U,& phy_data);
    #line 5383 
    if (ret_val != 0) 
                      #line 5384 
                      return ret_val;
  }
  #line 5387 
  if (! active) {
    #line 5388 
    if (hw->mac_type == (unsigned int)12 || hw->mac_type == (unsigned int)14) {
      #line 5390 
      phy_data = (unsigned short)((unsigned int)phy_data & 65519U);
      #line 5391 
      ret_val = e1000_write_phy_reg(hw,20U,(unsigned short)((int)phy_data));
      #line 5394 
      if (ret_val != 0) 
                        #line 5395 
                        return ret_val;
    }
    #line 5403 
    if (hw->smart_speed == (unsigned int)1) {
      #line 5404 
      ret_val = e1000_read_phy_reg(hw,16U,& phy_data);
      #line 5407 
      if (ret_val != 0) 
                        #line 5408 
                        return ret_val;
      #line 5410 
      phy_data = (unsigned short)((unsigned int)phy_data | 128U);
      #line 5411 
      ret_val = e1000_write_phy_reg(hw,16U,(unsigned short)((int)phy_data));
      #line 5414 
      if (ret_val != 0) 
                        #line 5415 
                        return ret_val;
    }
    else 
      #line 5416 
      if (hw->smart_speed == (unsigned int)2) {
        #line 5417 
        ret_val = e1000_read_phy_reg(hw,16U,& phy_data);
        #line 5420 
        if (ret_val != 0) 
                          #line 5421 
                          return ret_val;
        #line 5423 
        phy_data = (unsigned short)((unsigned int)phy_data & 65407U);
        #line 5424 
        ret_val = e1000_write_phy_reg(hw,16U,(unsigned short)((int)phy_data));
        #line 5427 
        if (ret_val != 0) 
                          #line 5428 
                          return ret_val;
      }
  }
  else 
    #line 5430 
    if (((unsigned int)hw->autoneg_advertised == 47U || (unsigned int)hw->autoneg_advertised == 3U) || (unsigned int)hw->autoneg_advertised == 15U) {
      #line 5433 
      if (hw->mac_type == (unsigned int)12 || hw->mac_type == (unsigned int)14) {
        #line 5435 
        phy_data = (unsigned short)((unsigned int)phy_data | 16U);
        #line 5436 
        ret_val = e1000_write_phy_reg(hw,20U,(unsigned short)((int)phy_data));
        #line 5439 
        if (ret_val != 0) 
                          #line 5440 
                          return ret_val;
      }
      #line 5444 
      ret_val = e1000_read_phy_reg(hw,16U,& phy_data);
      #line 5447 
      if (ret_val != 0) 
                        #line 5448 
                        return ret_val;
      #line 5450 
      phy_data = (unsigned short)((unsigned int)phy_data & 65407U);
      #line 5451 
      ret_val = e1000_write_phy_reg(hw,16U,(unsigned short)((int)phy_data));
      #line 5454 
      if (ret_val != 0) 
                        #line 5455 
                        return ret_val;
    }
  #line 5457 
  return 0;
}

#line 5466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_set_vco_speed(struct e1000_hw *hw)
{
  #line 5468 
  s32 ret_val;
  #line 5470 
  u16 phy_data;
  #line 5469 
  u16 default_page = (unsigned short)0U;
  #line 5472 
  switch ((unsigned int)hw->mac_type) {
    #line 5473 
    case (unsigned int)7: 
                          #line 5473 
    ;
    #line 5474 
    case (unsigned int)10: 
                           #line 5474 
    ;
    #line 5475 
    break;
    #line 5476 
    default: 
             #line 5476 
    ;
    #line 5477 
    return 0;
  }
  #line 5482 
  ret_val = e1000_read_phy_reg(hw,29U,& default_page);
  #line 5484 
  if (ret_val != 0) 
                    #line 5485 
                    return ret_val;
  #line 5487 
  ret_val = e1000_write_phy_reg(hw,29U,(unsigned short)5);
  #line 5488 
  if (ret_val != 0) 
                    #line 5489 
                    return ret_val;
  #line 5491 
  ret_val = e1000_read_phy_reg(hw,30U,& phy_data);
  #line 5492 
  if (ret_val != 0) 
                    #line 5493 
                    return ret_val;
  #line 5495 
  phy_data = (unsigned short)((unsigned int)phy_data & 65279U);
  #line 5496 
  ret_val = e1000_write_phy_reg(hw,30U,(unsigned short)((int)phy_data));
  #line 5497 
  if (ret_val != 0) 
                    #line 5498 
                    return ret_val;
  #line 5502 
  ret_val = e1000_write_phy_reg(hw,29U,(unsigned short)4);
  #line 5503 
  if (ret_val != 0) 
                    #line 5504 
                    return ret_val;
  #line 5506 
  ret_val = e1000_read_phy_reg(hw,30U,& phy_data);
  #line 5507 
  if (ret_val != 0) 
                    #line 5508 
                    return ret_val;
  #line 5510 
  phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  #line 5511 
  ret_val = e1000_write_phy_reg(hw,30U,(unsigned short)((int)phy_data));
  #line 5512 
  if (ret_val != 0) 
                    #line 5513 
                    return ret_val;
  #line 5515 
  ret_val = e1000_write_phy_reg(hw,29U,(unsigned short)((int)default_page));
  #line 5517 
  if (ret_val != 0) 
                    #line 5518 
                    return ret_val;
  #line 5520 
  return 0;
}

#line 5530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
u32 e1000_enable_mng_pass_thru(struct e1000_hw *hw)
{
  #line 5532 
  u32 manc;
  #line 5534 
  if (hw->asf_firmware_present != 0U) {
    #line 5535 
    manc = readl((void *)(hw->hw_addr + 22560U));
    #line 5537 
    if ((manc & 131072U) == 0U || (manc & 1048576U) == 0U) 
                                                           #line 5539 
                                                           return 0U;
    #line 5540 
    if ((manc & 1U) != 0U && (manc & 2U) == 0U) 
                                                #line 5541 
                                                return 1U;
  }
  #line 5543 
  return 0U;
}

#line 5546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_polarity_reversal_workaround(struct e1000_hw *hw)
{
  #line 5548 
  s32 ret_val;
  #line 5549 
  u16 mii_status_reg;
  #line 5550 
  u16 i;
  #line 5556 
  ret_val = e1000_write_phy_reg(hw,29U,(unsigned short)25);
  #line 5557 
  if (ret_val != 0) 
                    #line 5558 
                    return ret_val;
  #line 5559 
  ret_val = e1000_write_phy_reg(hw,30U,(unsigned short)65535);
  #line 5560 
  if (ret_val != 0) 
                    #line 5561 
                    return ret_val;
  #line 5563 
  ret_val = e1000_write_phy_reg(hw,29U,(unsigned short)0);
  #line 5564 
  if (ret_val != 0) 
                    #line 5565 
                    return ret_val;
  #line 5568 
  i = (unsigned short)20U;
  #line 5568 
  while ((unsigned int)i != 0U) {
    #line 5573 
    ret_val = e1000_read_phy_reg(hw,1U,& mii_status_reg);
    #line 5574 
    if (ret_val != 0) 
                      #line 5575 
                      return ret_val;
    #line 5577 
    ret_val = e1000_read_phy_reg(hw,1U,& mii_status_reg);
    #line 5578 
    if (ret_val != 0) 
                      #line 5579 
                      return ret_val;
    #line 5581 
    if (((int)mii_status_reg & -5) == 0) 
                                         #line 5582 
                                         break;
    #line 5583 
    msleep(100U);
    #line 5568 
    i = (u16)((int)i - 1);
  }
  #line 5587 
  msleep(1000U);
  #line 5591 
  ret_val = e1000_write_phy_reg(hw,29U,(unsigned short)25);
  #line 5592 
  if (ret_val != 0) 
                    #line 5593 
                    return ret_val;
  #line 5594 
  msleep(50U);
  #line 5595 
  ret_val = e1000_write_phy_reg(hw,30U,(unsigned short)65520);
  #line 5596 
  if (ret_val != 0) 
                    #line 5597 
                    return ret_val;
  #line 5598 
  msleep(50U);
  #line 5599 
  ret_val = e1000_write_phy_reg(hw,30U,(unsigned short)65280);
  #line 5600 
  if (ret_val != 0) 
                    #line 5601 
                    return ret_val;
  #line 5602 
  msleep(50U);
  #line 5603 
  ret_val = e1000_write_phy_reg(hw,30U,(unsigned short)0);
  #line 5604 
  if (ret_val != 0) 
                    #line 5605 
                    return ret_val;
  #line 5607 
  ret_val = e1000_write_phy_reg(hw,29U,(unsigned short)0);
  #line 5608 
  if (ret_val != 0) 
                    #line 5609 
                    return ret_val;
  #line 5612 
  i = (unsigned short)20U;
  #line 5612 
  while ((unsigned int)i != 0U) {
    #line 5617 
    ret_val = e1000_read_phy_reg(hw,1U,& mii_status_reg);
    #line 5618 
    if (ret_val != 0) 
                      #line 5619 
                      return ret_val;
    #line 5621 
    ret_val = e1000_read_phy_reg(hw,1U,& mii_status_reg);
    #line 5622 
    if (ret_val != 0) 
                      #line 5623 
                      return ret_val;
    #line 5625 
    if (((int)mii_status_reg & 4) != 0) 
                                        #line 5626 
                                        break;
    #line 5627 
    msleep(100U);
    #line 5612 
    i = (u16)((int)i - 1);
  }
  #line 5629 
  return 0;
}

#line 5640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_get_auto_rd_done(struct e1000_hw *hw)
{
  #line 5642 
  msleep(5U);
  #line 5643 
  return 0;
}

#line 5654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000/e1000_hw.c"
static s32 e1000_get_phy_cfg_done(struct e1000_hw *hw)
{
  #line 5656 
  msleep(10U);
  #line 5657 
  return 0;
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_hw.i.aux"
static void cif___ldv_spin_lock_e1000_phy_lock(spinlock_t *lock)
{
  #line 801 
  ldv_spin_model_lock((char *)"e1000_phy_lock");
  #line 803 
  __ldv_spin_lock(lock);
  #line 804 
  return;
}

#line 807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_hw.i.aux"
static void cif_spin_unlock_irqrestore_e1000_phy_lock(spinlock_t *lock, unsigned long flags)
{
  #line 810 
  ldv_spin_model_unlock((char *)"e1000_phy_lock");
  #line 812 
  spin_unlock_irqrestore_0(lock,flags);
  #line 813 
  return;
}

#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_hw.i.aux"
static void cif_mutex_lock_e1000_eeprom_lock(struct mutex *lock)
{
  #line 819 
  ldv_mutex_model_lock(lock,(char *)"e1000_eeprom_lock");
  #line 820 
  return;
}

#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/0/concurrency safety/weaver/e1000_hw.i.aux"
static void cif_mutex_unlock_e1000_eeprom_lock(struct mutex *lock)
{
  #line 826 
  ldv_mutex_model_unlock(lock,(char *)"e1000_eeprom_lock");
  #line 827 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
#line 174 
void emg_dispatch_deregister_11(struct net_device *arg0);
#line 94 
#line 140 
void emg_dispatch_deregister_6(struct pci_driver *arg0);
#line 95 
#line 131 
void emg_dispatch_irq_deregister_4(int arg0);
#line 96 
#line 160 
void emg_dispatch_irq_register_8(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 97 
#line 120 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 98 
#line 149 
void emg_dispatch_register_7(struct net_device *arg0);
#line 99 
#line 1192 
void *emg_entry_point_insmod(void *arg0);
#line 102 
#line 183 
void *emg_interrupt_interrupt_scenario_e1000_test_intr(void *arg0);
#line 103 
#line 246 
void *emg_net_random_allocationless_scenario_e1000_get_coalesce(void *arg0);
#line 104 
#line 749 
void *emg_pci_pci_scenario_e1000_driver(void *arg0);
#line 111 
#line 1221 
int main(void);
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 121 
  int ret;
  #line 122 
  struct emg_struct_pci_scenario_e1000_driver_14 *cf_arg_14;
  #line 123 
  cf_arg_14 = (struct emg_struct_pci_scenario_e1000_driver_14 *)ldv_xmalloc(16UL);
  #line 124 
  cf_arg_14->arg0 = arg0;
  #line 125 
  ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_pci_pci_scenario_e1000_driver,(void *)cf_arg_14);
  #line 126 
  __VERIFIER_assume(ret == 0);
  #line 127 
  return;
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_4(int arg0)
{
  #line 132 
  int ret;
  #line 133 
  struct emg_struct_free_irq_4 *cf_arg_12;
  #line 134 
  ret = pthread_join(emg_thread_12,(void **)0);
  #line 135 
  __VERIFIER_assume(ret == 0);
  #line 136 
  return;
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_6(struct pci_driver *arg0)
{
  #line 141 
  int ret;
  #line 142 
  struct emg_struct_pci_scenario_e1000_driver_14 *cf_arg_14;
  #line 143 
  ret = pthread_join(emg_thread_14,(void **)0);
  #line 144 
  __VERIFIER_assume(ret == 0);
  #line 145 
  return;
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_7(struct net_device *arg0)
{
  #line 150 
  int ret;
  #line 151 
  struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_13 *cf_arg_13;
  #line 152 
  cf_arg_13 = (struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_13 *)ldv_xmalloc(16UL);
  #line 153 
  cf_arg_13->arg0 = arg0;
  #line 154 
  ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_e1000_get_coalesce,(void *)cf_arg_13);
  #line 155 
  __VERIFIER_assume(ret == 0);
  #line 156 
  return;
}

#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_8(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 161 
  int ret;
  #line 162 
  struct emg_struct_interrupt_scenario_e1000_test_intr_12 *cf_arg_12;
  #line 163 
  cf_arg_12 = (struct emg_struct_interrupt_scenario_e1000_test_intr_12 *)ldv_xmalloc(40UL);
  #line 164 
  cf_arg_12->arg0 = arg0;
  #line 165 
  cf_arg_12->arg1 = arg1;
  #line 166 
  cf_arg_12->arg2 = arg2;
  #line 167 
  cf_arg_12->arg3 = arg3;
  #line 168 
  ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_e1000_test_intr,(void *)cf_arg_12);
  #line 169 
  __VERIFIER_assume(ret == 0);
  #line 170 
  return;
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_11(struct net_device *arg0)
{
  #line 175 
  int ret;
  #line 176 
  struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_13 *cf_arg_13;
  #line 177 
  ret = pthread_join(emg_thread_13,(void **)0);
  #line 178 
  __VERIFIER_assume(ret == 0);
  #line 179 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_e1000_test_intr(void *arg0)
{
  #line 186 
  enum irqreturn (*emg_12_callback)(int , void *);
  #line 187 
  void *emg_12_data;
  #line 188 
  int emg_12_line;
  #line 189 
  enum irqreturn emg_12_ret_val;
  #line 190 
  enum irqreturn (*emg_12_thread)(int , void *);
  #line 192 
  struct emg_struct_interrupt_scenario_e1000_test_intr_12 *data = (struct emg_struct_interrupt_scenario_e1000_test_intr_12 *)arg0;
  #line 195 
  emg_12_callback = & emg_wrapper_e1000_test_intr;
  #line 198 
  if (data != (struct emg_struct_interrupt_scenario_e1000_test_intr_12 *)0) {
    #line 199 
    emg_12_line = data->arg0;
    #line 200 
    emg_12_callback = data->arg1;
    #line 201 
    emg_12_thread = data->arg2;
    #line 202 
    emg_12_data = data->arg3;
    #line 203 
    ldv_free((void *)data);
  }
  #line 209 
  ldv_switch_to_interrupt_context();
  #line 213 
  emg_12_ret_val = emg_wrapper_e1000_test_intr(emg_12_line,emg_12_data);
  #line 218 
  ldv_switch_to_process_context();
  #line 221 
  if (ldv_undef_int() != 0) {
    #line 223 
    __VERIFIER_assume(emg_12_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 227 
    if (emg_12_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 228 
                                                              (*emg_12_thread)(emg_12_line,emg_12_data);
  }
  else 
       #line 233 
       __VERIFIER_assume(emg_12_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 241 
  return (void *)0;
}

#line 246  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_e1000_get_coalesce(void *arg0)
{
  #line 249 
  struct net_device *emg_13_container;
  #line 250 
  struct sk_buff *emg_13_emg_param_0_22;
  #line 251 
  struct ethtool_coalesce *emg_13_emg_param_1_0;
  #line 252 
  struct ethtool_drvinfo *emg_13_emg_param_1_1;
  #line 253 
  struct ethtool_ringparam *emg_13_emg_param_1_10;
  #line 254 
  int emg_13_emg_param_1_11;
  #line 255 
  unsigned int emg_13_emg_param_1_12;
  #line 256 
  struct ethtool_ts_info *emg_13_emg_param_1_14;
  #line 257 
  struct ethtool_wolinfo *emg_13_emg_param_1_15;
  #line 258 
  int emg_13_emg_param_1_16;
  #line 259 
  struct ifreq *emg_13_emg_param_1_17;
  #line 260 
  unsigned long long emg_13_emg_param_1_19;
  #line 261 
  struct ethtool_eeprom *emg_13_emg_param_1_2;
  #line 262 
  unsigned long long emg_13_emg_param_1_20;
  #line 263 
  void *emg_13_emg_param_1_21;
  #line 264 
  unsigned short emg_13_emg_param_1_23;
  #line 265 
  unsigned short emg_13_emg_param_1_25;
  #line 266 
  struct ethtool_test *emg_13_emg_param_1_27;
  #line 267 
  struct ethtool_coalesce *emg_13_emg_param_1_29;
  #line 268 
  struct ethtool_eeprom *emg_13_emg_param_1_30;
  #line 269 
  struct ethtool_link_ksettings *emg_13_emg_param_1_32;
  #line 270 
  unsigned int emg_13_emg_param_1_33;
  #line 271 
  struct ethtool_pauseparam *emg_13_emg_param_1_34;
  #line 272 
  enum ethtool_phys_id_state *emg_13_emg_param_1_35;
  #line 273 
  struct ethtool_ringparam *emg_13_emg_param_1_36;
  #line 274 
  struct ethtool_wolinfo *emg_13_emg_param_1_37;
  #line 275 
  struct ethtool_stats *emg_13_emg_param_1_4;
  #line 276 
  struct ethtool_link_ksettings *emg_13_emg_param_1_6;
  #line 277 
  struct ethtool_pauseparam *emg_13_emg_param_1_7;
  #line 278 
  struct ethtool_regs *emg_13_emg_param_1_8;
  #line 279 
  unsigned char *emg_13_emg_param_2_13;
  #line 280 
  int emg_13_emg_param_2_18;
  #line 281 
  unsigned short emg_13_emg_param_2_24;
  #line 282 
  unsigned short emg_13_emg_param_2_26;
  #line 283 
  unsigned long long *emg_13_emg_param_2_28;
  #line 284 
  unsigned char *emg_13_emg_param_2_3;
  #line 285 
  unsigned char *emg_13_emg_param_2_31;
  #line 286 
  unsigned long long *emg_13_emg_param_2_5;
  #line 287 
  void *emg_13_emg_param_2_9;
  #line 288 
  int emg_repeat_cnt_call_13 = 1;
  #line 290 
  struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_13 *data = (struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_13 *)arg0;
  #line 295 
  if (data != (struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_13 *)0) {
    #line 296 
    emg_13_container = data->arg0;
    #line 297 
    ldv_free((void *)data);
  }
  #line 302 
  goto emg_call_13;
  #line 306 
  return (void *)0;
  #line 309 
  emg_call_13: 
               #line 309 
  ;
  #line 310 
  switch (ldv_undef_int()) {
    #line 311 
    case 0: 
            #line 311 
    ;
    #line 313 
    emg_13_emg_param_1_37 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 313 
    emg_13_emg_param_1_37 = emg_13_emg_param_1_37;
    #line 317 
    emg_wrapper_e1000_set_wol(emg_13_container,emg_13_emg_param_1_37);
    #line 321 
    ldv_free((void *)emg_13_emg_param_1_37);
    #line 323 
    break;
    #line 325 
    case 1: 
            #line 325 
    ;
    #line 327 
    emg_13_emg_param_1_36 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 327 
    emg_13_emg_param_1_36 = emg_13_emg_param_1_36;
    #line 331 
    emg_wrapper_e1000_set_ringparam(emg_13_container,emg_13_emg_param_1_36);
    #line 335 
    ldv_free((void *)emg_13_emg_param_1_36);
    #line 337 
    break;
    #line 339 
    case 2: 
            #line 339 
    ;
    #line 341 
    emg_13_emg_param_1_35 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 341 
    emg_13_emg_param_1_35 = emg_13_emg_param_1_35;
    #line 345 
    emg_wrapper_e1000_set_phys_id(emg_13_container,*emg_13_emg_param_1_35);
    #line 349 
    ldv_free((void *)emg_13_emg_param_1_35);
    #line 351 
    break;
    #line 353 
    case 3: 
            #line 353 
    ;
    #line 355 
    emg_13_emg_param_1_34 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 355 
    emg_13_emg_param_1_34 = emg_13_emg_param_1_34;
    #line 359 
    emg_wrapper_e1000_set_pauseparam(emg_13_container,emg_13_emg_param_1_34);
    #line 363 
    ldv_free((void *)emg_13_emg_param_1_34);
    #line 365 
    break;
    #line 367 
    case 4: 
            #line 367 
    ;
    #line 369 
    emg_wrapper_e1000_set_msglevel(emg_13_container,emg_13_emg_param_1_33);
    #line 371 
    break;
    #line 373 
    case 5: 
            #line 373 
    ;
    #line 375 
    emg_13_emg_param_1_32 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 375 
    emg_13_emg_param_1_32 = emg_13_emg_param_1_32;
    #line 379 
    emg_wrapper_e1000_set_link_ksettings(emg_13_container,emg_13_emg_param_1_32);
    #line 383 
    ldv_free((void *)emg_13_emg_param_1_32);
    #line 385 
    break;
    #line 387 
    case 6: 
            #line 387 
    ;
    #line 389 
    emg_13_emg_param_1_30 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 389 
    emg_13_emg_param_1_30 = emg_13_emg_param_1_30;
    #line 390 
    emg_13_emg_param_2_31 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 390 
    emg_13_emg_param_2_31 = emg_13_emg_param_2_31;
    #line 394 
    emg_wrapper_e1000_set_eeprom(emg_13_container,emg_13_emg_param_1_30,emg_13_emg_param_2_31);
    #line 398 
    ldv_free((void *)emg_13_emg_param_1_30);
    #line 399 
    ldv_free((void *)emg_13_emg_param_2_31);
    #line 401 
    break;
    #line 403 
    case 7: 
            #line 403 
    ;
    #line 405 
    emg_13_emg_param_1_29 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 405 
    emg_13_emg_param_1_29 = emg_13_emg_param_1_29;
    #line 409 
    emg_wrapper_e1000_set_coalesce(emg_13_container,emg_13_emg_param_1_29);
    #line 413 
    ldv_free((void *)emg_13_emg_param_1_29);
    #line 415 
    break;
    #line 417 
    case 8: 
            #line 417 
    ;
    #line 419 
    emg_13_emg_param_1_27 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 419 
    emg_13_emg_param_1_27 = emg_13_emg_param_1_27;
    #line 420 
    emg_13_emg_param_2_28 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 420 
    emg_13_emg_param_2_28 = emg_13_emg_param_2_28;
    #line 424 
    emg_wrapper_e1000_diag_test(emg_13_container,emg_13_emg_param_1_27,emg_13_emg_param_2_28);
    #line 428 
    ldv_free((void *)emg_13_emg_param_1_27);
    #line 429 
    ldv_free((void *)emg_13_emg_param_2_28);
    #line 431 
    break;
    #line 433 
    case 9: 
            #line 433 
    ;
    #line 435 
    emg_wrapper_e1000_nway_reset(emg_13_container);
    #line 437 
    break;
    #line 439 
    case 10: 
             #line 439 
    ;
    #line 441 
    emg_wrapper_e1000_vlan_rx_kill_vid(emg_13_container,(unsigned short)((int)emg_13_emg_param_1_25),(unsigned short)((int)emg_13_emg_param_2_26));
    #line 443 
    break;
    #line 445 
    case 11: 
             #line 445 
    ;
    #line 447 
    emg_wrapper_e1000_vlan_rx_add_vid(emg_13_container,(unsigned short)((int)emg_13_emg_param_1_23),(unsigned short)((int)emg_13_emg_param_2_24));
    #line 449 
    break;
    #line 451 
    case 12: 
             #line 451 
    ;
    #line 453 
    eth_validate_addr(emg_13_container);
    #line 455 
    break;
    #line 457 
    case 13: 
             #line 457 
    ;
    #line 459 
    emg_wrapper_e1000_tx_timeout(emg_13_container);
    #line 461 
    break;
    #line 463 
    case 14: 
             #line 463 
    ;
    #line 465 
    emg_13_emg_param_0_22 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 465 
    emg_13_emg_param_0_22 = emg_13_emg_param_0_22;
    #line 469 
    emg_wrapper_e1000_xmit_frame(emg_13_emg_param_0_22,emg_13_container);
    #line 473 
    ldv_free((void *)emg_13_emg_param_0_22);
    #line 475 
    break;
    #line 477 
    case 15: 
             #line 477 
    ;
    #line 479 
    emg_wrapper_e1000_set_rx_mode(emg_13_container);
    #line 481 
    break;
    #line 483 
    case 16: 
             #line 483 
    ;
    #line 485 
    emg_13_emg_param_1_21 = ldv_xmalloc_unknown_size(0UL);
    #line 485 
    emg_13_emg_param_1_21 = emg_13_emg_param_1_21;
    #line 489 
    emg_wrapper_e1000_set_mac(emg_13_container,emg_13_emg_param_1_21);
    #line 493 
    ldv_free(emg_13_emg_param_1_21);
    #line 495 
    break;
    #line 497 
    case 17: 
             #line 497 
    ;
    #line 499 
    emg_wrapper_e1000_set_features(emg_13_container,emg_13_emg_param_1_20);
    #line 501 
    break;
    #line 503 
    case 18: 
             #line 503 
    ;
    #line 505 
    emg_wrapper_e1000_netpoll(emg_13_container);
    #line 507 
    break;
    #line 509 
    case 19: 
             #line 509 
    ;
    #line 511 
    emg_wrapper_e1000_fix_features(emg_13_container,emg_13_emg_param_1_19);
    #line 513 
    break;
    #line 515 
    case 20: 
             #line 515 
    ;
    #line 517 
    emg_13_emg_param_1_17 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 517 
    emg_13_emg_param_1_17 = emg_13_emg_param_1_17;
    #line 521 
    emg_wrapper_e1000_ioctl(emg_13_container,emg_13_emg_param_1_17,emg_13_emg_param_2_18);
    #line 525 
    ldv_free((void *)emg_13_emg_param_1_17);
    #line 527 
    break;
    #line 529 
    case 21: 
             #line 529 
    ;
    #line 531 
    emg_wrapper_e1000_change_mtu(emg_13_container,emg_13_emg_param_1_16);
    #line 533 
    break;
    #line 535 
    case 22: 
             #line 535 
    ;
    #line 537 
    emg_13_emg_param_1_15 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 537 
    emg_13_emg_param_1_15 = emg_13_emg_param_1_15;
    #line 541 
    emg_wrapper_e1000_get_wol(emg_13_container,emg_13_emg_param_1_15);
    #line 545 
    ldv_free((void *)emg_13_emg_param_1_15);
    #line 547 
    break;
    #line 549 
    case 23: 
             #line 549 
    ;
    #line 551 
    emg_13_emg_param_1_14 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 551 
    emg_13_emg_param_1_14 = emg_13_emg_param_1_14;
    #line 555 
    ethtool_op_get_ts_info(emg_13_container,emg_13_emg_param_1_14);
    #line 559 
    ldv_free((void *)emg_13_emg_param_1_14);
    #line 561 
    break;
    #line 563 
    case 24: 
             #line 563 
    ;
    #line 565 
    emg_13_emg_param_2_13 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 565 
    emg_13_emg_param_2_13 = emg_13_emg_param_2_13;
    #line 569 
    emg_wrapper_e1000_get_strings(emg_13_container,emg_13_emg_param_1_12,emg_13_emg_param_2_13);
    #line 573 
    ldv_free((void *)emg_13_emg_param_2_13);
    #line 575 
    break;
    #line 577 
    case 25: 
             #line 577 
    ;
    #line 579 
    emg_wrapper_e1000_get_sset_count(emg_13_container,emg_13_emg_param_1_11);
    #line 581 
    break;
    #line 583 
    case 26: 
             #line 583 
    ;
    #line 585 
    emg_13_emg_param_1_10 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 585 
    emg_13_emg_param_1_10 = emg_13_emg_param_1_10;
    #line 589 
    emg_wrapper_e1000_get_ringparam(emg_13_container,emg_13_emg_param_1_10);
    #line 593 
    ldv_free((void *)emg_13_emg_param_1_10);
    #line 595 
    break;
    #line 597 
    case 27: 
             #line 597 
    ;
    #line 599 
    emg_wrapper_e1000_get_regs_len(emg_13_container);
    #line 601 
    break;
    #line 603 
    case 28: 
             #line 603 
    ;
    #line 605 
    emg_13_emg_param_1_8 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 605 
    emg_13_emg_param_1_8 = emg_13_emg_param_1_8;
    #line 606 
    emg_13_emg_param_2_9 = ldv_xmalloc_unknown_size(0UL);
    #line 606 
    emg_13_emg_param_2_9 = emg_13_emg_param_2_9;
    #line 610 
    emg_wrapper_e1000_get_regs(emg_13_container,emg_13_emg_param_1_8,emg_13_emg_param_2_9);
    #line 614 
    ldv_free((void *)emg_13_emg_param_1_8);
    #line 615 
    ldv_free(emg_13_emg_param_2_9);
    #line 617 
    break;
    #line 619 
    case 29: 
             #line 619 
    ;
    #line 621 
    emg_13_emg_param_1_7 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 621 
    emg_13_emg_param_1_7 = emg_13_emg_param_1_7;
    #line 625 
    emg_wrapper_e1000_get_pauseparam(emg_13_container,emg_13_emg_param_1_7);
    #line 629 
    ldv_free((void *)emg_13_emg_param_1_7);
    #line 631 
    break;
    #line 633 
    case 30: 
             #line 633 
    ;
    #line 635 
    emg_wrapper_e1000_get_msglevel(emg_13_container);
    #line 637 
    break;
    #line 639 
    case 31: 
             #line 639 
    ;
    #line 641 
    emg_13_emg_param_1_6 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 641 
    emg_13_emg_param_1_6 = emg_13_emg_param_1_6;
    #line 645 
    emg_wrapper_e1000_get_link_ksettings(emg_13_container,emg_13_emg_param_1_6);
    #line 649 
    ldv_free((void *)emg_13_emg_param_1_6);
    #line 651 
    break;
    #line 653 
    case 32: 
             #line 653 
    ;
    #line 655 
    emg_wrapper_e1000_get_link(emg_13_container);
    #line 657 
    break;
    #line 659 
    case 33: 
             #line 659 
    ;
    #line 661 
    emg_13_emg_param_1_4 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 661 
    emg_13_emg_param_1_4 = emg_13_emg_param_1_4;
    #line 662 
    emg_13_emg_param_2_5 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 662 
    emg_13_emg_param_2_5 = emg_13_emg_param_2_5;
    #line 666 
    emg_wrapper_e1000_get_ethtool_stats(emg_13_container,emg_13_emg_param_1_4,emg_13_emg_param_2_5);
    #line 670 
    ldv_free((void *)emg_13_emg_param_1_4);
    #line 671 
    ldv_free((void *)emg_13_emg_param_2_5);
    #line 673 
    break;
    #line 675 
    case 34: 
             #line 675 
    ;
    #line 677 
    emg_wrapper_e1000_get_eeprom_len(emg_13_container);
    #line 679 
    break;
    #line 681 
    case 35: 
             #line 681 
    ;
    #line 683 
    emg_13_emg_param_1_2 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 683 
    emg_13_emg_param_1_2 = emg_13_emg_param_1_2;
    #line 684 
    emg_13_emg_param_2_3 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 684 
    emg_13_emg_param_2_3 = emg_13_emg_param_2_3;
    #line 688 
    emg_wrapper_e1000_get_eeprom(emg_13_container,emg_13_emg_param_1_2,emg_13_emg_param_2_3);
    #line 692 
    ldv_free((void *)emg_13_emg_param_1_2);
    #line 693 
    ldv_free((void *)emg_13_emg_param_2_3);
    #line 695 
    break;
    #line 697 
    case 36: 
             #line 697 
    ;
    #line 699 
    emg_13_emg_param_1_1 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 699 
    emg_13_emg_param_1_1 = emg_13_emg_param_1_1;
    #line 703 
    emg_wrapper_e1000_get_drvinfo(emg_13_container,emg_13_emg_param_1_1);
    #line 707 
    ldv_free((void *)emg_13_emg_param_1_1);
    #line 709 
    break;
    #line 711 
    case 37: 
             #line 711 
    ;
    #line 713 
    emg_13_emg_param_1_0 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 713 
    emg_13_emg_param_1_0 = emg_13_emg_param_1_0;
    #line 717 
    emg_wrapper_e1000_get_coalesce(emg_13_container,emg_13_emg_param_1_0);
    #line 721 
    ldv_free((void *)emg_13_emg_param_1_0);
    #line 724 
    if (emg_repeat_cnt_call_13 > 0) {
      #line 725 
      emg_repeat_cnt_call_13 --;
      #line 727 
      goto emg_call_13;
    }
    else 
         #line 729 
         __VERIFIER_assume(0);
    #line 733 
    break;
    #line 735 
    case 38: 
             #line 735 
    ;
    #line 739 
    break;
    #line 741 
    default: 
             #line 741 
    ;
    #line 741 
    __VERIFIER_assume(0);
  }
  #line 744 
  return (void *)0;
}

#line 749  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_e1000_driver(void *arg0)
{
  #line 752 
  int emg_14_choice;
  #line 753 
  struct pci_driver *emg_14_container;
  #line 754 
  struct pci_device_id *emg_14_device_id;
  #line 755 
  struct pci_dev *emg_14_resource_0;
  #line 756 
  struct pm_message emg_14_resource_1;
  #line 757 
  int emg_14_ret;
  #line 758 
  int emg_repeat_cnt_call_14_1 = 1;
  #line 759 
  int emg_repeat_cnt_call_14_0 = 1;
  #line 760 
  int emg_repeat_cnt_main_14_0 = 1;
  #line 761 
  int emg_repeat_cnt_main_14_1 = 1;
  #line 763 
  struct emg_struct_pci_scenario_e1000_driver_14 *data = (struct emg_struct_pci_scenario_e1000_driver_14 *)arg0;
  #line 767 
  emg_14_choice = 0;
  #line 768 
  emg_14_ret = ldv_undef_int();
  #line 769 
  emg_14_choice = 0;
  #line 770 
  emg_14_container = emg_alias_e1000_driver;
  #line 771 
  emg_14_ret = ldv_undef_int();
  #line 773 
  __VERIFIER_assume(data->arg0 == emg_alias_e1000_driver);
  #line 775 
  if (data != (struct emg_struct_pci_scenario_e1000_driver_14 *)0) {
    #line 776 
    emg_14_container = data->arg0;
    #line 777 
    ldv_free((void *)data);
  }
  #line 782 
  emg_14_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 783 
  emg_14_choice = __ldv_undef_int_range(0,37);
  #line 784 
  emg_14_device_id = emg_14_container->id_table + (unsigned long)emg_14_choice;
  #line 788 
  goto emg_main_14;
  #line 792 
  return (void *)0;
  #line 795 
  emg_call_14: 
               #line 795 
  ;
  #line 796 
  switch (ldv_undef_int()) {
    #line 797 
    case 0: 
            #line 797 
    ;
    #line 802 
    if (emg_repeat_cnt_call_14_1 > 0) {
      #line 803 
      emg_repeat_cnt_call_14_1 --;
      #line 805 
      goto emg_call_14;
    }
    else 
         #line 807 
         __VERIFIER_assume(0);
    #line 811 
    break;
    #line 813 
    case 1: 
            #line 813 
    ;
    #line 815 
    emg_14_ret = emg_wrapper_e1000_suspend(emg_14_resource_0,emg_14_resource_1);
    #line 820 
    emg_14_ret = ldv_filter_err_code(emg_14_ret);
    #line 824 
    emg_wrapper_e1000_resume(emg_14_resource_0);
    #line 827 
    if (emg_repeat_cnt_call_14_0 > 0) {
      #line 828 
      emg_repeat_cnt_call_14_0 --;
      #line 830 
      goto emg_call_14;
    }
    else 
         #line 832 
         __VERIFIER_assume(0);
    #line 836 
    break;
    #line 838 
    case 2: 
            #line 838 
    ;
    #line 840 
    emg_wrapper_e1000_shutdown(emg_14_resource_0);
    #line 844 
    emg_wrapper_e1000_remove(emg_14_resource_0);
    #line 847 
    if (emg_repeat_cnt_main_14_1 > 0) {
      #line 848 
      emg_repeat_cnt_main_14_1 --;
      #line 850 
      goto emg_main_14;
    }
    else 
         #line 852 
         __VERIFIER_assume(0);
    #line 856 
    break;
    #line 858 
    default: 
             #line 858 
    ;
    #line 858 
    __VERIFIER_assume(0);
  }
  #line 861 
  return (void *)0;
  #line 864 
  emg_main_14: 
               #line 864 
  ;
  #line 865 
  if (ldv_undef_int() != 0) {
    #line 868 
    ldv_pre_probe();
    #line 872 
    emg_14_ret = emg_wrapper_e1000_probe(emg_14_resource_0,emg_14_device_id);
    #line 877 
    emg_14_ret = ldv_post_probe(emg_14_ret);
    #line 880 
    if (ldv_undef_int() != 0) {
      #line 882 
      __VERIFIER_assume(emg_14_ret == 0);
      #line 886 
      goto emg_call_14;
    }
    else 
         #line 891 
         __VERIFIER_assume(emg_14_ret != 0);
    #line 895 
    if (emg_repeat_cnt_main_14_0 > 0) {
      #line 896 
      emg_repeat_cnt_main_14_0 --;
      #line 898 
      goto emg_main_14;
    }
    else 
         #line 900 
         __VERIFIER_assume(0);
  }
  else 
       #line 906 
       ldv_free((void *)emg_14_resource_0);
  #line 914 
  return (void *)0;
}

#line 919  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 922 
  struct pci_driver *emg_2_pci_driver;
  #line 924 
  emg_2_pci_driver = emg_alias_e1000_driver;
  #line 925 
  if (ldv_undef_int() != 0) {
    #line 927 
    emg_2_pci_driver = arg0;
    #line 931 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 935 
    return 0;
  }
  else {
    #line 939 
    return ldv_undef_int_negative();
  }
}

#line 947  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 950 
  struct net_device *emg_3_netdev;
  #line 952 
  if (ldv_undef_int() != 0) {
    #line 954 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 958 
    return emg_3_netdev;
  }
  else 
       #line 962 
       return (struct net_device *)0;
}

#line 970  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 973 
  int emg_4_line;
  #line 976 
  emg_4_line = (int)arg0;
  #line 980 
  emg_dispatch_irq_deregister_4(emg_4_line);
  #line 981 
  ;
  #line 981 
  return (void *)0;
}

#line 987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 990 
  struct net_device *emg_5_netdev;
  #line 993 
  emg_5_netdev = arg0;
  #line 994 
  ldv_free((void *)emg_5_netdev);
  #line 997 
  return;
}

#line 1002  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1005 
  struct pci_driver *emg_6_pci_driver;
  #line 1007 
  emg_6_pci_driver = emg_alias_e1000_driver;
  #line 1009 
  emg_6_pci_driver = arg0;
  #line 1013 
  emg_dispatch_deregister_6(emg_6_pci_driver);
  #line 1016 
  return;
}

#line 1021  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1024 
  struct net_device *emg_7_netdev;
  #line 1025 
  int emg_7_ret;
  #line 1028 
  emg_7_ret = ldv_undef_int();
  #line 1029 
  emg_7_ret = ldv_undef_int();
  #line 1030 
  if (ldv_undef_int() != 0) {
    #line 1032 
    emg_7_netdev = arg0;
    #line 1036 
    emg_7_ret = e1000_open(emg_7_netdev);
    #line 1039 
    if (ldv_undef_int() != 0) {
      #line 1041 
      __VERIFIER_assume(emg_7_ret == 0);
      #line 1045 
      emg_dispatch_register_7(emg_7_netdev);
      #line 1049 
      return 0;
    }
    else {
      #line 1053 
      __VERIFIER_assume(emg_7_ret != 0);
      #line 1054 
      ldv_failed_register_netdev();
      #line 1055 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1060 
    ldv_failed_register_netdev();
    #line 1061 
    return ldv_undef_int_negative();
  }
}

#line 1069  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1072 
  enum irqreturn (*emg_8_callback)(int , void *);
  #line 1073 
  void *emg_8_data;
  #line 1074 
  int emg_8_line;
  #line 1075 
  enum irqreturn (*emg_8_thread)(int , void *);
  #line 1077 
  emg_8_callback = & emg_wrapper_e1000_test_intr;
  #line 1078 
  if (ldv_undef_int() != 0) {
    #line 1080 
    emg_8_line = (int)arg0;
    #line 1081 
    emg_8_callback = arg1;
    #line 1082 
    emg_8_thread = (enum irqreturn (*)(int , void *))0;
    #line 1083 
    emg_8_data = arg4;
    #line 1087 
    emg_dispatch_irq_register_8(emg_8_line,emg_8_callback,emg_8_thread,emg_8_data);
    #line 1091 
    return 0;
  }
  else {
    #line 1095 
    return ldv_undef_int_negative();
  }
}

#line 1103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  #line 1106 
  struct delayed_work *emg_9_delayed_work;
  #line 1107 
  struct work_struct *emg_9_emg_param_0_0;
  #line 1109 
  if (ldv_undef_int() != 0) {
    #line 1111 
    emg_9_delayed_work = arg0;
    #line 1115 
    emg_9_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 1115 
    emg_9_emg_param_0_0 = emg_9_emg_param_0_0;
    #line 1119 
    if (emg_9_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 1120 
      (*(emg_9_delayed_work->work.func))(emg_9_emg_param_0_0);
    #line 1125 
    ldv_free((void *)emg_9_emg_param_0_0);
    #line 1129 
    return (_Bool)1;
  }
  else 
       #line 1133 
       return (_Bool)0;
}

#line 1141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 1144 
  struct work_struct *emg_10_work_struct;
  #line 1146 
  if (ldv_undef_int() != 0) {
    #line 1148 
    emg_10_work_struct = arg0;
    #line 1152 
    if (emg_10_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1153 
      (*(emg_10_work_struct->func))(emg_10_work_struct);
    #line 1158 
    return (_Bool)1;
  }
  else 
       #line 1162 
       return (_Bool)0;
}

#line 1170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1173 
  struct net_device *emg_11_netdev;
  #line 1176 
  emg_11_netdev = arg0;
  #line 1180 
  e1000_close(emg_11_netdev);
  #line 1184 
  emg_dispatch_deregister_11(emg_11_netdev);
  #line 1187 
  return;
}

#line 1192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1195 
  int emg_1_ret;
  #line 1198 
  emg_1_ret = emg_e1000_init_module();
  #line 1199 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1202 
  if (ldv_undef_int() != 0) {
    #line 1204 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1208 
    emg_e1000_exit_module();
  }
  else 
       #line 1212 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1216 
  return (void *)0;
}

#line 1221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000/e1000.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1223 
  ldv_initialize();
  #line 1225 
  emg_entry_point_insmod((void *)0);
  #line 1227 
  return 0;
}

