/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_113 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_113 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_114 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_114 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
struct wait_queue_entry;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_entry {
   unsigned int flags ;
   void *private ;
   int (*func)(struct wait_queue_entry *, unsigned int , int , void *) ;
   struct list_head entry ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 195 
struct hrtimer;
#line 196 
enum hrtimer_restart;
#line 220 
struct workqueue_struct;
#line 221 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_128 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_127 {
   struct __anonstruct_128 __anonCompField___anonunion_127_28 ;
   struct __anonstruct_129 __anonCompField___anonunion_127_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_127 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_130 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_130 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   struct list_head slab_list ;
   struct __anonstruct_136 __anonCompField___anonunion_135_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_138 __anonCompField___anonunion_137_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   union __anonunion_135 __anonCompField___anonstruct_134_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_137 __anonCompField___anonstruct_134_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_142 __anonCompField___anonstruct_141_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_131 {
   struct __anonstruct_132 __anonCompField___anonunion_131_31 ;
   struct __anonstruct_133 __anonCompField___anonunion_131_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_131_37 ;
   struct __anonstruct_139 __anonCompField___anonunion_131_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_131_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_131_41 ;
   struct __anonstruct_143 __anonCompField___anonunion_131_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_131 __anonCompField_page_43 ;
   union __anonunion_144 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_145 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_146 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_146 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_149 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/arch_topology.h"
struct device_node;
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_237 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_236 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 325 
struct poll_table_struct;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_256 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_256 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_259 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_259 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_303 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_305 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 18 
struct percpu_ref;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sched.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_310 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_310 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_311 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_312 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_313 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_314 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_317 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_318 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_316 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_317 _addr_bnd ;
   struct __anonstruct__addr_pkey_318 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_315 {
   void *_addr ;
   union __anonunion_316 __anonCompField___anonstruct__sigfault_315_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_319 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_320 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_311 _kill ;
   struct __anonstruct__timer_312 _timer ;
   struct __anonstruct__rt_313 _rt ;
   struct __anonstruct__sigchld_314 _sigchld ;
   struct __anonstruct__sigfault_315 _sigfault ;
   struct __anonstruct__sigpoll_319 _sigpoll ;
   struct __anonstruct__sigsys_320 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_325 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_325 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_330 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_330 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_332 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_332 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_410 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_412 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_411 {
   unsigned long nr_segs ;
   struct __anonstruct_412 __anonCompField___anonunion_411_60 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_410 __anonCompField_iov_iter_59 ;
   union __anonunion_411 __anonCompField_iov_iter_61 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_415 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_415 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_416 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_416 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_417 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_417 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_418 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_418 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_419 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_419 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_420 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_420 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_421 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_421 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_422 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_422 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_423 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_424 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_423 ifr_ifrn ;
   union __anonunion_ifr_ifru_424 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_439 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_438 {
   struct __anonstruct_439 __anonCompField___anonunion_438_64 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_438 __anonCompField_lockref_65 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_441 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_440 {
   struct __anonstruct_441 __anonCompField___anonunion_440_66 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_440 __anonCompField_qstr_67 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_442 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_443 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_442 __anonCompField_dentry_68 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_443 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_451 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_451 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_452 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_453 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_452 __anonCompField_io_cq_69 ;
   union __anonunion_453 __anonCompField_io_cq_70 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 287 
struct bio;
#line 288 
struct export_operations;
#line 289 
struct hd_geometry;
#line 290 
struct kstatfs;
#line 291 
struct swap_info_struct;
#line 292 
struct fscrypt_info;
#line 293 
struct fscrypt_operations;
#line 294 
struct fsverity_info;
#line 295 
struct fsverity_operations;
#line 296 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_454 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_454 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_455 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_455 __anonCompField_kqid_71 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_457 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_456 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_457 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_456 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_460 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_461 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_462 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_463 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_460 __anonCompField_inode_72 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_461 __anonCompField_inode_73 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_462 __anonCompField_inode_74 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_463 __anonCompField_inode_75 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_464 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_464 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_466 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_465 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_466 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_465 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9894 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9894 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_510 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_510 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_511 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_511 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_522 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_523 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_524 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_525 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_522 ports ;
   struct __anonstruct_icmpt_523 icmpt ;
   struct __anonstruct_dnports_524 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_525 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_526 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_526 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_532 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_533 __anonCompField___anonstruct_532_89 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_531 {
   struct __anonstruct_532 __anonCompField___anonunion_531_90 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_534 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_537 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_536 {
   struct __anonstruct_537 __anonCompField___anonunion_536_94 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_539 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   __wsum csum ;
   struct __anonstruct_539 __anonCompField___anonunion_538_96 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_541 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_531 __anonCompField_sk_buff_91 ;
   union __anonunion_534 __anonCompField_sk_buff_92 ;
   union __anonunion_535 __anonCompField_sk_buff_93 ;
   char cb[48U] ;
   union __anonunion_536 __anonCompField_sk_buff_95 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_538 __anonCompField_sk_buff_97 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_540 __anonCompField_sk_buff_98 ;
   __u32 secmark ;
   union __anonunion_541 __anonCompField_sk_buff_99 ;
   union __anonunion_542 __anonCompField_sk_buff_100 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_568 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_568 __anonCompField_ethtool_rxnfc_102 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_571 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_571 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_572 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_572 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_573 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_573 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_574 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_574 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_575 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_575 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_577 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_577 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_590 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_589 {
   struct __anonstruct_590 __anonCompField___anonunion_589_103 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_589 __anonCompField_keyring_index_key_104 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_592 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_594 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct keyring_index_key index_key ;
   struct __anonstruct_594 __anonCompField___anonunion_593_107 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   union key_payload payload ;
   struct __anonstruct_596 __anonCompField___anonunion_595_109 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_591 __anonCompField_key_105 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_592 __anonCompField_key_106 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_593 __anonCompField_key_108 ;
   union __anonunion_595 __anonCompField_key_110 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_599 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_599 __anonCompField_cred_111 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_600 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_600 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_602 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_601 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_602 __anonCompField___anonunion_601_112 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_601 __anonCompField_uid_gid_map_113 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_604 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_606 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_605 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_606 __anonCompField___anonstruct_605_116 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_608 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_610 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_612 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   union __anonunion_612 __anonCompField___anonstruct_611_121 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_613 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_614 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_615 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_616 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_617 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_604 __anonCompField_bpf_attr_115 ;
   struct __anonstruct_605 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_608 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_test_610 test ;
   struct __anonstruct_611 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_info_613 info ;
   struct __anonstruct_query_614 query ;
   struct __anonstruct_raw_tracepoint_615 raw_tracepoint ;
   struct __anonstruct_616 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_task_fd_query_617 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_644 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_644 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_646 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_645 {
   struct __anonstruct_tail_call_646 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_645 __anonCompField_bpf_jit_poke_descriptor_148 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_647 __anonCompField_bpf_prog_aux_149 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_649 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_649 __anonCompField_bpf_cgroup_storage_151 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_651 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_650 {
   struct __anonstruct_651 __anonCompField___anonunion_650_152 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_650 __anonCompField_sock_cgroup_data_153 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_674 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_674 __anonCompField_netlink_callback_154 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_679 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_680 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_682 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_678 {
   struct __anonstruct_679 __anonCompField___anonunion_678_156 ;
   struct __anonstruct_680 __anonCompField___anonunion_678_157 ;
   struct __anonstruct_681 __anonCompField___anonunion_678_158 ;
   struct __anonstruct_xsk_682 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_678 __anonCompField_netdev_bpf_159 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14758 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14759 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_683 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_684 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_683 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14758 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14759 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_684 __anonCompField_net_device_160 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 2525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_notifier_info {
   struct net_device *dev ;
   struct netlink_ext_ack *extack ;
};
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct dmi_strmatch {
   unsigned char slot : 7 ;
   unsigned char exact_match : 1 ;
   char substr[79U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct dmi_system_id {
   int (*callback)(struct dmi_system_id *) ;
   char *ident ;
   struct dmi_strmatch matches[4U] ;
   void *driver_data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_696 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_696 __anonCompField_pci_dev_161 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_697 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_697 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_698 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_698 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_701 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_702 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_704 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_705 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_703 {
   struct __anonstruct_elv_704 elv ;
   struct __anonstruct_flush_705 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_706 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_701 __anonCompField_request_164 ;
   union __anonunion_702 __anonCompField_request_165 ;
   union __anonunion_703 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_706 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_729 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_728 {
   void *validation_data ;
   struct __anonstruct_729 __anonCompField___anonunion_728_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_728 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_803 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_804 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_802 {
   struct __anonstruct_803 __anonCompField___anonunion_802_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_804 __anonCompField___anonunion_802_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_802 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_806 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_806 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_819 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_819 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_841 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_841 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_843 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   __addrpair skc_addrpair ;
   struct __anonstruct_843 __anonCompField___anonunion_842_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_844 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_846 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   __portpair skc_portpair ;
   struct __anonstruct_846 __anonCompField___anonunion_845_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_844 __anonCompField_sock_common_179 ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_847 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_848 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_849 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_850 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_851 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_852 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_852 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_853 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_854 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_889 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_889 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_986 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_986 __anonCompField_ip_ra_chain_196 ;
   struct callback_head rcu ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mii.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
struct gpio_desc;
#line 327 
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_20455 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_20455 phy_interface_t;
#line 186 
struct phylink;
#line 188 
enum ldv_20470 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_20470 state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 1298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dmi.h"
enum led_mode {
    MO_LED_NORM = 0,
    MO_LED_BLINK = 1,
    MO_LED_OFF = 2,
    MO_LED_ON = 3
};
#line 2170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
struct sky2_tx_le {
   __le32 addr ;
   __le16 length ;
   u8 ctrl ;
   u8 opcode ;
} __attribute__((__packed__));
#line 2177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
struct sky2_rx_le {
   __le32 addr ;
   __le16 length ;
   u8 ctrl ;
   u8 opcode ;
} __attribute__((__packed__));
#line 2184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
struct sky2_status_le {
   __le32 status ;
   __le16 length ;
   u8 css ;
   u8 opcode ;
} __attribute__((__packed__));
#line 2191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
struct tx_ring_info {
   struct sk_buff *skb ;
   unsigned long flags ;
   dma_addr_t mapaddr ;
   __u32 maplen ;
};
#line 2200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
struct rx_ring_info {
   struct sk_buff *skb ;
   dma_addr_t data_addr ;
   __u32 data_size ;
   dma_addr_t frag_addr[2U] ;
};
#line 2206 
enum flow_control {
    FC_NONE = 0,
    FC_TX = 1,
    FC_RX = 2,
    FC_BOTH = 3
};
#line 2214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
struct sky2_stats {
   struct u64_stats_sync syncp ;
   u64 packets ;
   u64 bytes ;
};
#line 2220 
struct sky2_hw;
#line 2220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
struct __anonstruct_check_995 {
   unsigned long last ;
   u32 mac_rp ;
   u8 mac_lev ;
   u8 fifo_rp ;
   u8 fifo_lev ;
};
#line 2220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
struct sky2_port {
   struct sky2_hw *hw ;
   struct net_device *netdev ;
   unsigned int port ;
   u32 msg_enable ;
   spinlock_t phy_lock ;
   struct tx_ring_info *tx_ring ;
   struct sky2_tx_le *tx_le ;
   struct sky2_stats tx_stats ;
   u16 tx_ring_size ;
   u16 tx_cons ;
   u16 tx_prod ;
   u16 tx_next ;
   u16 tx_pending ;
   u16 tx_last_mss ;
   u32 tx_last_upper ;
   u32 tx_tcpsum ;
   struct rx_ring_info *rx_ring ;
   struct sky2_rx_le *rx_le ;
   struct sky2_stats rx_stats ;
   u16 rx_next ;
   u16 rx_put ;
   u16 rx_pending ;
   u16 rx_data_size ;
   u16 rx_nfrags ;
   unsigned long last_rx ;
   struct __anonstruct_check_995 check ;
   dma_addr_t rx_le_map ;
   dma_addr_t tx_le_map ;
   u16 advertising ;
   u16 speed ;
   u8 wol ;
   u8 duplex ;
   u16 flags ;
   enum flow_control flow_mode ;
   enum flow_control flow_status ;
   struct dentry *debugfs ;
};
#line 2279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
struct sky2_hw {
   void *regs ;
   struct pci_dev *pdev ;
   struct napi_struct napi ;
   struct net_device *dev[2U] ;
   unsigned long flags ;
   u8 chip_id ;
   u8 chip_rev ;
   u8 pmd_type ;
   u8 ports ;
   struct sky2_status_le *st_le ;
   u32 st_size ;
   u32 st_idx ;
   dma_addr_t st_dma ;
   struct timer_list watchdog_timer ;
   struct work_struct restart_work ;
   wait_queue_head_t msi_wait ;
   char irq_name[0U] ;
};
#line 632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
struct __anonstruct_eee_afe_998 {
   u16 reg ;
   u16 val ;
};
#line 3695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
struct sky2_stat {
   char name[32U] ;
   u16 offset ;
};
#line 4440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
struct vpd_tag {
   char tag[2U] ;
   char *label ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2782 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_2782 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2783 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_2783 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2799 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_2799 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_2803 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_2803 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2804 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2805 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_2804 __anonCompField_media_link_90 ;
   union __anonunion_2805 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_2807 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_2806 {
   struct __anonstruct_dev_2807 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_2806 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_2821 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_2822 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_2820 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_2821 i2c ;
   struct __anonstruct_custom_2822 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_2820 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_3723 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_3723 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_8 {
   int arg0 ;
   int signal_pending ;
};
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_sky2_intr_17 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_sky2_debug_fops_16 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_sky2_change_mtu_19 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_sky2_driver_20 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_6_22 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 162 
  bool c;
  #line 163 
  ldv_inline_asm();
  #line 162 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 355  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 362  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 83 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 84 
  return arch_test_and_clear_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u64(u64 n)
{
  #line 32 
  return fls64(n) + -1;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  #line 57 
  return 1UL << fls_long(n + 18446744073709551615UL);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 469 
#line 469 
int sprintf(char *, char * , ...);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 369  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 29 
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 88 
#line 383  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static size_t cif_strlen(char *s);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_read((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 453  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static bool IS_ERR(void *ptr);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 773  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_lock_tx_global_lock_of_net_device(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_lock_phy_lock_of_sky2_port(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 1069  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_lock_bh_phy_lock_of_sky2_port(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 813  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_unlock_tx_global_lock_of_net_device(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_unlock_phy_lock_of_sky2_port(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 1078  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_unlock_bh_phy_lock_of_sky2_port(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
#line 15 
extern u8 byte_rev_table[256U];
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static u8 __bitrev8(u8 byte)
{
  #line 18 
  return byte_rev_table[(int)byte];
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static u16 __bitrev16(u16 x)
{
  #line 23 
  return (unsigned short)(((int)__bitrev8((unsigned char)((int)((unsigned char)x))) << 8) | (int)__bitrev8((unsigned char)((int)((unsigned char)((int)x >> 8)))));
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitrev.h"
__inline static u32 __bitrev32(u32 x)
{
  #line 28 
  return (unsigned int)(((int)__bitrev16((unsigned short)((int)((unsigned short)x))) << 16) | (int)__bitrev16((unsigned short)((int)((unsigned short)(x >> 16)))));
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crc32.h"
#line 11 
u32 crc32_le(u32, unsigned char *, size_t);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 200 
#line 200 
void __wake_up(struct wait_queue_head *, unsigned int, int, void *);
#line 248 
#line 248 
void init_wait_entry(struct wait_queue_entry *, int);
#line 1128 
#line 1128 
long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
#line 1129 
#line 1129 
void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 1103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 1185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 209 
unsigned long round_jiffies(unsigned long);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 919  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_149 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_131_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void *addr)
{
  #line 57 
  unsigned char ret;
  #line 58 
  ldv_inline_asm();
  #line 57 
  return ret;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned short readw(void *addr)
{
  #line 58 
  unsigned short ret;
  #line 59 
  ldv_inline_asm();
  #line 58 
  return ret;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val, void *addr)
{
  #line 67 
  ldv_inline_asm();
  #line 68 
  return;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writew(unsigned short val, void *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 206 
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 209 
#line 209 
void iounmap(void *);
#line 216 
#line 216 
void memcpy_fromio(void *, void *, size_t);
#line 217 
#line 217 
void memcpy_toio(void *, void *, size_t);
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 527 
struct page *alloc_pages_current(gfp_t, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 532 
  return alloc_pages_current(gfp_mask,order);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_303 __u;
  #line 93 
  union __anonunion___u_305 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 219 
long schedule_timeout(long);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 611  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 625  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 12 
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
#line 31 
#line 31 
void __page_ref_mod_and_test(struct page *, int, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read(& page->_refcount);
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_dec_and_test(struct page *page)
{
  #line 139 
  int ret = (int)atomic_dec_and_test(& page->_refcount);
  #line 141 
  if ((int)static_key_false(& __tracepoint_page_ref_mod_and_test.key) != 0) 
    #line 142 
    __page_ref_mod_and_test(page,-1,ret);
  #line 143 
  return ret;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 736 
#line 736 
void __put_page(struct page *);
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static enum zone_type page_zonenum(struct page *page)
{
  #line 937 
  return (enum zone_type)((unsigned int)(page->flags >> 51UL) & 7U);
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_zone_device_page(struct page *page)
{
  #line 943 
  return (_Bool)(page_zonenum(page) == (unsigned int)ZONE_DEVICE);
}

#line 955 
#line 955 
void __put_devmap_managed_page(struct page *);
#line 956 
#line 956 
extern struct static_key_false devmap_managed_key;
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool put_devmap_managed_page(struct page *page)
{
  #line 959 
  bool branch;
  #line 959 
  branch = arch_static_branch(& devmap_managed_key.key,(_Bool)0);
  #line 959 
  if ((long)((long)((int)branch != 0)) == 0L) 
                                              #line 960 
                                              return (_Bool)0;
  #line 961 
  if (! is_zone_device_page(page)) 
                                   #line 962 
                                   return (_Bool)0;
  #line 963 
  switch ((unsigned int)(page->__anonCompField_page_43.__anonCompField___anonunion_131_42.pgmap)->type) {
    #line 964 
    case (unsigned int)1: 
                          #line 964 
    ;
    #line 965 
    case (unsigned int)2: 
                          #line 965 
    ;
    #line 966 
    __put_devmap_managed_page(page);
    #line 967 
    return (_Bool)1;
    #line 968 
    default: 
             #line 968 
    ;
    #line 969 
    break;
  }
  #line 971 
  return (_Bool)0;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page(struct page *page)
{
  #line 1023 
  page = compound_head(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero(page) != 0) 
                                    #line 1035 
                                    __put_page(page);
  #line 1036 
  return;
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index == 18446744073709551615UL);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
__inline static bool device_can_wakeup(struct device *dev)
{
  #line 79 
  return (_Bool)((int)dev->power.can_wakeup != 0);
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
__inline static bool device_may_wakeup(struct device *dev)
{
  #line 84 
  return (_Bool)(((unsigned int)dev->power.can_wakeup != 0U && dev->power.wakeup != (struct wakeup_source *)0) != 0);
}

#line 108 
#line 108 
int device_set_wakeup_enable(struct device *, bool);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1716 
#line 1716 
void _dev_notice(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  #line 337 
  frag->bv_len = size;
  #line 338 
  return;
}

#line 1019 
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_clear_hash(struct sk_buff *skb)
{
  #line 1202 
  skb->hash = 0U;
  #line 1203 
  skb->sw_hash = (unsigned char)0U;
  #line 1204 
  skb->l4_hash = (unsigned char)0U;
  #line 1205 
  return;
}

#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_hash(struct sk_buff *to, struct sk_buff *from)
{
  #line 1367 
  to->hash = from->hash;
  #line 1368 
  to->sw_hash = from->sw_hash;
  #line 1369 
  to->l4_hash = from->l4_hash;
  #line 1370 
  return;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2105 
  skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
  #line 2112 
  frag->bv_page = page;
  #line 2113 
  frag->bv_offset = (unsigned int)off;
  #line 2114 
  skb_frag_size_set(frag,(unsigned int)size);
  #line 2116 
  page = compound_head(page);
  #line 2117 
  if ((int)page_is_pfmemalloc(page) != 0) 
                                          #line 2118 
                                          skb->pfmemalloc = (unsigned char)1U;
  #line 2119 
  return;
}

#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2138 
  __skb_fill_page_desc(skb,i,page,off,size);
  #line 2139 
  ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  #line 2140 
  return;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length, gfp_t gfp)
{
  #line 2801 
  struct sk_buff *skb = __netdev_alloc_skb(dev,length,gfp);
  #line 2805 
  return skb;
}

#line 2808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length)
{
  #line 2811 
  return __netdev_alloc_skb_ip_align(dev,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 2972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_frag_unref(skb_frag_t *frag)
{
  #line 2974 
  put_page(skb_frag_page(frag));
  #line 2975 
  return;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff *skb, void *to, unsigned int len)
{
  #line 3605 
  memcpy(to,(void *)skb->data,(unsigned long)len);
  #line 3606 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 173 
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 177 
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  #line 117 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 110 
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
#line 111 
#line 111 
loff_t seq_lseek(struct file *, loff_t, int);
#line 118 
#line 118 
void seq_printf(struct seq_file *, char * , ...);
#line 119 
#line 119 
void seq_putc(struct seq_file *, char);
#line 120 
#line 120 
void seq_puts(struct seq_file *, char *);
#line 142 
#line 142 
int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
#line 144 
#line 144 
int single_release(struct inode *, struct file *);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1087  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1095  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_synchronize(struct napi_struct *n)
{
  #line 531 
  while (1) {
    #line 531 
    if (! ((int)test_bit(0L,& n->state) != 0)) 
                                               #line 531 
                                               break;
    #line 532 
    msleep(1U);
  }
  #line 536 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2519 
#line 2519 
int register_netdevice_notifier(struct notifier_block *);
#line 2520 
#line 2520 
int unregister_netdevice_notifier(struct notifier_block *);
#line 2568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct net_device *netdev_notifier_info_to_dev(struct netdev_notifier_info *info)
{
  #line 2570 
  return info->dev;
}

#line 2658 
#line 2658 
void dev_close(struct net_device *);
#line 2679 
#line 1177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  #line 3141 
  netif_tx_wake_queue(netdev_get_tx_queue(dev,0U));
  #line 3142 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_sent_queue(struct net_device *dev, unsigned int bytes)
{
  #line 3290 
  ;
  #line 3290 
  netdev_tx_sent_queue(netdev_get_tx_queue(dev,0U),bytes);
  #line 3291 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_clear_bit(1L,& dev_queue->state) != 0) 
                                                           #line 3321 
                                                           netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_completed_queue(struct net_device *dev, unsigned int pkts, unsigned int bytes)
{
  #line 3338 
  ;
  #line 3338 
  ;
  #line 3338 
  netdev_tx_completed_queue(netdev_get_tx_queue(dev,0U),pkts,bytes);
  #line 3339 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_reset_queue(struct net_device *dev_queue)
{
  #line 3358 
  netdev_tx_reset_queue(netdev_get_tx_queue(dev_queue,0U));
  #line 3359 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3662 
#line 3662 
int netif_receive_skb(struct sk_buff *);
#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_trans_update(struct net_device *dev)
{
  #line 3986 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,0U);
  #line 3988 
  if (txq->trans_start != jiffies) 
                                   #line 3989 
                                   txq->trans_start = jiffies;
  #line 3990 
  return;
}

#line 3998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_lock(struct net_device *dev)
{
  #line 4004 
  int pscr_ret__;
  #line 4000 
  unsigned int i;
  #line 4001 
  int cpu;
  #line 4003 
  cif_spin_lock_tx_global_lock_of_net_device(& dev->tx_global_lock);
  #line 4004 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4004 
    void *__vpp_verify = (void *)0;
    #line 4004 
    void *tmp = __vpp_verify;
  }
  #line 4004 
  switch (4UL) {
    #line 4004 
    int pfo_ret___1;
    #line 4004 
    int pfo_ret___2;
    #line 4004 
    int pfo_ret__;
    #line 4004 
    int pfo_ret___0;
    #line 4004 
    case (unsigned long)1: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret__;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)2: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___0;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)4: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___1;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)8: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___2;
    #line 4004 
    break;
    #line 4004 
    default: 
             #line 4004 
    ;
    #line 4004 
    __bad_size_call_parameter();
    #line 4004 
    break;
  }
  #line 4004 
  cpu = pscr_ret__;
  #line 4005 
  i = 0U;
  #line 4005 
  while (dev->num_tx_queues > i) {
    {
      #line 4006 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4014 
      __netif_tx_lock(txq,cpu);
      #line 4015 
      cif_set_bit(2L,& txq->state);
      #line 4016 
      __netif_tx_unlock(txq);
    }
    #line 4005 
    i ++;
  }
  #line 4018 
  return;
}

#line 4026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_unlock(struct net_device *dev)
{
  #line 4028 
  unsigned int i;
  #line 4030 
  i = 0U;
  #line 4030 
  while (dev->num_tx_queues > i) {
    {
      #line 4031 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4037 
      cif_clear_bit(2L,& txq->state);
      #line 4038 
      netif_schedule_queue(txq);
    }
    #line 4030 
    i ++;
  }
  #line 4040 
  cif_spin_unlock_tx_global_lock_of_net_device(& dev->tx_global_lock);
  #line 4041 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    int pfo_ret__;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4131 
#line 1161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4523 
#line 4523 
void netdev_update_features(struct net_device *);
#line 4741 
#line 4741 
void netdev_printk(char *, struct net_device *, char * , ...);
#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 1153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_random(struct net_device *dev)
{
  #line 265 
  dev->addr_assign_type = (unsigned char)1U;
  #line 266 
  eth_random_addr(dev->dev_addr);
  #line 267 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 1040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1040 
int pci_find_capability(struct pci_dev *, int);
#line 1085 
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1088 
#line 1088 
int pci_write_config_dword(struct pci_dev *, int, u32);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1235 
#line 1235 
bool pci_pme_capable(struct pci_dev *, pci_power_t);
#line 1238 
#line 1238 
int pci_wake_from_d3(struct pci_dev *, bool);
#line 1260 
#line 1260 
ssize_t pci_read_vpd(struct pci_dev *, loff_t, size_t, void *);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 1193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 2092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_pcie_cap(struct pci_dev *dev)
{
  #line 2094 
  return (int)dev->pcie_cap;
}

#line 2103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static bool pci_is_pcie(struct pci_dev *dev)
{
  #line 2105 
  return (_Bool)(pci_pcie_cap(dev) != 0);
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void *pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle)
{
  #line 20 
  return dma_alloc_coherent(& hwdev->dev,size,dma_handle,2592U);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_free_consistent(struct pci_dev *hwdev, size_t size, void *vaddr, dma_addr_t dma_handle)
{
  #line 34 
  dma_free_coherent(& hwdev->dev,size,vaddr,dma_handle);
  #line 35 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  #line 40 
  return dma_map_single_attrs(& hwdev->dev,ptr,size,
                           (enum dma_data_direction)direction,0UL);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  #line 47 
  dma_unmap_single_attrs(& hwdev->dev,dma_addr,size,(enum dma_data_direction)direction,0UL);
  #line 48 
  return;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  #line 61 
  dma_unmap_page_attrs(& hwdev->dev,dma_address,size,(enum dma_data_direction)direction,0UL);
  #line 62 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 82 
  dma_sync_single_for_cpu(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 83 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 89 
  dma_sync_single_for_device(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 90 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  #line 109 
  return dma_mapping_error(& pdev->dev,dma_addr);
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_clear_tag(struct sk_buff *skb)
{
  #line 467 
  skb->vlan_present = (unsigned char)0U;
  #line 468 
  return;
}

#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_copy_tag(struct sk_buff *dst, struct sk_buff *src)
{
  #line 479 
  dst->vlan_present = src->vlan_present;
  #line 480 
  dst->vlan_proto = src->vlan_proto;
  #line 481 
  dst->vlan_tci = src->vlan_tci;
  #line 482 
  return;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
__inline static unsigned int ip_hdrlen(struct sk_buff *skb)
{
  #line 67 
  ;
  #line 67 
  return (unsigned int)((int)ip_hdr(skb)->ihl * 4);
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 1137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 1145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 1129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_debugfs_remove(struct dentry *dentry);
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 97 
struct dentry *debugfs_rename(struct dentry *, struct dentry *, struct dentry *, char *);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  #line 53 
  return (struct mii_ioctl_data *)(& rq->ifr_ifru);
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_net.h"
#line 16 
void *of_get_mac_address(struct device_node *);
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dmi.h"
#line 100 
int dmi_check_system(struct dmi_system_id *);
#line 2315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static int sky2_is_copper(struct sky2_hw *hw)
{
  #line 2317 
  return (hw->flags & 2UL) == 0UL;
}

#line 2321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static u32 sky2_read32(struct sky2_hw *hw, unsigned int reg)
{
  #line 2323 
  return readl(hw->regs + (unsigned long)reg);
}

#line 2326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static u16 sky2_read16(struct sky2_hw *hw, unsigned int reg)
{
  #line 2328 
  return readw(hw->regs + (unsigned long)reg);
}

#line 2331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static u8 sky2_read8(struct sky2_hw *hw, unsigned int reg)
{
  #line 2333 
  return readb(hw->regs + (unsigned long)reg);
}

#line 2336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static void sky2_write32(struct sky2_hw *hw, unsigned int reg, u32 val)
{
  #line 2338 
  writel(val,hw->regs + (unsigned long)reg);
  #line 2339 
  return;
}

#line 2341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static void sky2_write16(struct sky2_hw *hw, unsigned int reg, u16 val)
{
  #line 2343 
  writew((unsigned short)((int)val),hw->regs + (unsigned long)reg);
  #line 2344 
  return;
}

#line 2346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static void sky2_write8(struct sky2_hw *hw, unsigned int reg, u8 val)
{
  #line 2348 
  writeb((unsigned char)((int)val),hw->regs + (unsigned long)reg);
  #line 2349 
  return;
}

#line 2356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static u16 gma_read16(struct sky2_hw *hw, unsigned int port, unsigned int reg)
{
  #line 2358 
  return sky2_read16(hw,(port * 4096U + reg) + 10240U);
}

#line 2361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static u32 gma_read32(struct sky2_hw *hw, unsigned int port, unsigned int reg)
{
  #line 2363 
  unsigned int base = (port * 4096U + reg) + 10240U;
  #line 2365 
  return (unsigned int)sky2_read16(hw,base) | ((unsigned int)sky2_read16(hw,base + 4U) << 16);
}

#line 2368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static u64 gma_read64(struct sky2_hw *hw, unsigned int port, unsigned int reg)
{
  #line 2370 
  unsigned int base = (port * 4096U + reg) + 10240U;
  #line 2375 
  return (((unsigned long long)sky2_read16(hw,base) | ((unsigned long long)sky2_read16(hw,base + 4U) << 16)) | ((unsigned long long)sky2_read16(hw,base + 8U) << 32)) | ((unsigned long long)sky2_read16(hw,base + 12U) << 48);
}

#line 2379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static u32 get_stats32(struct sky2_hw *hw, unsigned int port, unsigned int reg)
{
  #line 2381 
  u32 val;
  #line 2383 
  while (1) {
    #line 2384 
    val = gma_read32(hw,port,reg);
    #line 2384 
    ;
    #line 2384 
    if (! (gma_read32(hw,port,reg) != val)) 
                                            #line 2383 
                                            break;
  }
  #line 2387 
  return val;
}

#line 2390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static u64 get_stats64(struct sky2_hw *hw, unsigned int port, unsigned int reg)
{
  #line 2392 
  u64 val;
  #line 2394 
  while (1) {
    #line 2395 
    val = gma_read64(hw,port,reg);
    #line 2395 
    ;
    #line 2395 
    if (! (gma_read64(hw,port,reg) != val)) 
                                            #line 2394 
                                            break;
  }
  #line 2398 
  return val;
}

#line 2401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static void gma_write16(struct sky2_hw *hw, unsigned int port, int r, u16 v)
{
  #line 2403 
  sky2_write16(hw,(port * 4096U + (unsigned int)r) + 10240U,(unsigned short)((int)v));
  #line 2404 
  return;
}

#line 2406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static void gma_set_addr(struct sky2_hw *hw, unsigned int port, unsigned int reg, u8 *addr)
{
  #line 2409 
  gma_write16(hw,port,(int)reg,(unsigned short)((int)((unsigned short)((int)*addr | ((int)*(addr + 1U) << 8)))));
  #line 2410 
  gma_write16(hw,port,(int)(reg + 4U),(unsigned short)((int)((unsigned short)((int)*(addr + 2U) | ((int)*(addr + 3U) << 8)))));
  #line 2411 
  gma_write16(hw,port,(int)(reg + 8U),(unsigned short)((int)((unsigned short)((int)*(addr + 4U) | ((int)*(addr + 5U) << 8)))));
  #line 2412 
  return;
}

#line 2415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static u32 sky2_pci_read32(struct sky2_hw *hw, unsigned int reg)
{
  #line 2417 
  return sky2_read32(hw,reg + 7168U);
}

#line 2420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static u16 sky2_pci_read16(struct sky2_hw *hw, unsigned int reg)
{
  #line 2422 
  return sky2_read16(hw,reg + 7168U);
}

#line 2425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static void sky2_pci_write32(struct sky2_hw *hw, unsigned int reg, u32 val)
{
  #line 2427 
  sky2_write32(hw,reg + 7168U,val);
  #line 2428 
  return;
}

#line 2430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.h"
__inline static void sky2_pci_write16(struct sky2_hw *hw, unsigned int reg, u16 val)
{
  #line 2432 
  sky2_write16(hw,reg + 7168U,(unsigned short)((int)val));
  #line 2433 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int debug = -1;
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int copybreak = 128;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int disable_msi = -1;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int legacy_pme = 0;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct pci_device_id sky2_id_table[43U] = {{.vendor = 4424U, .device = 36864U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4424U, .device = 40448U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4424U, .device = 40449U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4486U, .device = 19200U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4486U, .device = 16385U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4486U, .device = 19202U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4486U, .device = 19203U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17216U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17217U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17218U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17219U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17220U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17221U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17222U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17223U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17232U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17233U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17234U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17235U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17236U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17237U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17238U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17239U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17242U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17248U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17249U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17250U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17251U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17252U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17253U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17254U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17255U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17256U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17257U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17258U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17259U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17260U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17261U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17264U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17280U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17281U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4523U, .device = 17282U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
struct pci_device_id __mod_pci__sky2_id_table_device_table[43U];
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static unsigned int txqaddr[2U] = {640U, 896U};
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static unsigned int rxqaddr[2U] = {[1] = 128U};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static u32 portirq_msk[2U] = {29U, 7424U};
#line 146 
#line 3841 
static void sky2_set_multicast(struct net_device *dev);
#line 147 
#line 3053 
static irqreturn_t sky2_intr(int irq, void *dev_id);
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int gm_phy_write(struct sky2_hw *hw, unsigned int port, u16 reg, u16 val)
{
  #line 152 
  int i;
  #line 154 
  gma_write16(hw,port,132,(unsigned short)((int)val));
  #line 155 
  gma_write16(hw,port,128,(unsigned short)((int)((unsigned short)((int)reg << 6)) & 1984));
  #line 158 
  i = 0;
  #line 158 
  while (i <= 999) {
    {
      #line 159 
      u16 ctrl = gma_read16(hw,port,128U);
      #line 160 
      if ((unsigned int)ctrl == 65535U) 
                                        #line 161 
                                        goto io_error;
      #line 163 
      if (((int)ctrl & 8) == 0) 
                                #line 164 
                                return 0;
      #line 166 
      __const_udelay(42950UL);
    }
    #line 158 
    i ++;
  }
  #line 169 
  _dev_warn(& (hw->pdev)->dev,(char *)"%s: phy write timeout\n",(char *)(& (hw->dev[port])->name));
  #line 170 
  return -110;
  #line 172 
  io_error: 
            #line 172 
  ;
  #line 173 
  _dev_err(& (hw->pdev)->dev,(char *)"%s: phy I/O error\n",(char *)(& (hw->dev[port])->name));
  #line 174 
  return -5;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int __gm_phy_read(struct sky2_hw *hw, unsigned int port, u16 reg, u16 *val)
{
  #line 179 
  int i;
  #line 181 
  gma_write16(hw,port,128,(unsigned short)((int)((unsigned short)((((int)reg << 6) & 1984) | 32))));
  #line 184 
  i = 0;
  #line 184 
  while (i <= 999) {
    {
      #line 185 
      u16 ctrl = gma_read16(hw,port,128U);
      #line 186 
      if ((unsigned int)ctrl == 65535U) 
                                        #line 187 
                                        goto io_error;
      #line 189 
      if (((int)ctrl & 16) != 0) {
        #line 190 
        *val = gma_read16(hw,port,132U);
        #line 191 
        return 0;
      }
      #line 194 
      __const_udelay(42950UL);
    }
    #line 184 
    i ++;
  }
  #line 197 
  _dev_warn(& (hw->pdev)->dev,(char *)"%s: phy read timeout\n",(char *)(& (hw->dev[port])->name));
  #line 198 
  return -110;
  #line 199 
  io_error: 
            #line 199 
  ;
  #line 200 
  _dev_err(& (hw->pdev)->dev,(char *)"%s: phy I/O error\n",(char *)(& (hw->dev[port])->name));
  #line 201 
  return -5;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static u16 gm_phy_read(struct sky2_hw *hw, unsigned int port, u16 reg)
{
  #line 206 
  u16 v;
  #line 207 
  __gm_phy_read(hw,port,(unsigned short)((int)reg),& v);
  #line 208 
  return v;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_power_on(struct sky2_hw *hw)
{
  #line 215 
  sky2_write8(hw,7U,(unsigned char)166);
  #line 219 
  sky2_write32(hw,288U,1U);
  #line 221 
  if ((unsigned int)hw->chip_id == 179U && (unsigned int)hw->chip_rev > 1U) 
    #line 223 
    sky2_write8(hw,285U,(unsigned char)119); else 
                                                  #line 228 
                                                  sky2_write8(hw,285U,(unsigned char)0);
  #line 230 
  if ((hw->flags & 128UL) != 0UL) {
    #line 231 
    u32 reg;
    #line 233 
    sky2_pci_write32(hw,128U,0U);
    #line 235 
    reg = sky2_pci_read32(hw,132U);
    #line 237 
    reg &= 61440U;
    #line 238 
    sky2_pci_write32(hw,132U,reg);
    #line 240 
    reg = sky2_pci_read32(hw,136U);
    #line 242 
    reg &= 402653184U;
    #line 243 
    sky2_pci_write32(hw,136U,reg);
    #line 245 
    sky2_pci_write32(hw,148U,0U);
    #line 247 
    sky2_write16(hw,4U,(unsigned short)32768);
    #line 250 
    reg = sky2_read32(hw,348U);
    #line 251 
    reg |= 8192U;
    #line 252 
    sky2_write32(hw,348U,reg);
    #line 254 
    sky2_read32(hw,348U);
  }
  #line 258 
  sky2_write16(hw,4U,(unsigned short)512);
  #line 259 
  return;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_power_aux(struct sky2_hw *hw)
{
  #line 263 
  if ((unsigned int)hw->chip_id == 179U && (unsigned int)hw->chip_rev > 1U) 
    #line 264 
    sky2_write8(hw,285U,(unsigned char)0); else 
                                                #line 267 
                                                sky2_write8(hw,285U,(unsigned char)119);
  #line 273 
  if ((sky2_read32(hw,4U) & 65536U) != 0U) {
    #line 273 
    if ((int)pci_pme_capable(hw->pdev,4) != 0) 
                                               #line 275 
                                               sky2_write8(hw,7U,(unsigned char)169);
  }
  #line 280 
  sky2_write16(hw,4U,(unsigned short)256);
  #line 281 
  return;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_gmac_reset(struct sky2_hw *hw, unsigned int port)
{
  #line 285 
  u16 reg;
  #line 288 
  sky2_write8(hw,(port << 7) + 3852U,(unsigned char)0);
  #line 290 
  gma_write16(hw,port,52,(unsigned short)0);
  #line 291 
  gma_write16(hw,port,56,(unsigned short)0);
  #line 292 
  gma_write16(hw,port,60,(unsigned short)0);
  #line 293 
  gma_write16(hw,port,64,(unsigned short)0);
  #line 295 
  reg = gma_read16(hw,port,12U);
  #line 296 
  reg = (unsigned short)((unsigned int)reg | 49152U);
  #line 297 
  gma_write16(hw,port,12,(unsigned short)((int)reg));
  #line 298 
  return;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static u16 copper_fc_adv[4U] = {[1] = (unsigned short)2048U, (unsigned short)1024U, (unsigned short)3072U};
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static u16 fiber_fc_adv[4U] = {[1] = (unsigned short)256U, (unsigned short)128U, (unsigned short)384U};
#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static u16 gm_fc_disable[4U] = {(unsigned short)8208U, (unsigned short)16U, (unsigned short)8192U};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_phy_init(struct sky2_hw *hw, unsigned int port)
{
  #line 328 
  u16 ctrl;
  #line 328 
  u16 ct1000;
  #line 328 
  u16 adv;
  #line 328 
  u16 pg;
  #line 328 
  u16 ledctrl;
  #line 328 
  u16 ledover;
  #line 328 
  u16 reg;
  #line 327 
  struct sky2_port *sky2 = netdev_priv(hw->dev[port]);
  #line 330 
  if (((int)sky2->flags & 2) != 0 && (hw->flags & 8UL) == 0UL) {
    #line 332 
    u16 ectrl = gm_phy_read(hw,port,(unsigned short)20);
    #line 334 
    ectrl = (unsigned short)((unsigned int)ectrl & 61583U);
    #line 336 
    ectrl = (unsigned short)((unsigned int)ectrl | 112U);
    #line 339 
    if ((unsigned int)hw->chip_id == 182U) 
                                           #line 341 
                                           ectrl = (unsigned short)((unsigned int)ectrl | 1280U); else 
                                                                    #line 344 
                                                                    ectrl = (unsigned short)((unsigned int)ectrl | 256U);
    #line 346 
    gm_phy_write(hw,port,(unsigned short)20,(unsigned short)((int)ectrl));
  }
  #line 349 
  ctrl = gm_phy_read(hw,port,(unsigned short)16);
  #line 350 
  if (sky2_is_copper(hw) != 0) 
    #line 351 
    if ((hw->flags & 4UL) == 0UL) {
      #line 353 
      ctrl = (unsigned short)((unsigned int)ctrl | 48U);
      #line 355 
      if ((unsigned int)hw->chip_id == 184U && (unsigned int)hw->chip_rev == 0U) {
        #line 357 
        u16 spec;
        #line 360 
        spec = gm_phy_read(hw,port,(unsigned short)28);
        #line 361 
        spec = (unsigned short)((unsigned int)spec | 1U);
        #line 362 
        gm_phy_write(hw,port,(unsigned short)28,(unsigned short)((int)spec));
      }
    }
    else {
      #line 366 
      ctrl = (unsigned short)((unsigned int)ctrl & 64767U);
      #line 369 
      ctrl = (unsigned short)((unsigned int)ctrl | 96U);
      #line 372 
      if (((int)sky2->flags & 2) != 0 && (hw->flags & 8UL) != 0UL) {
        #line 375 
        ctrl = (unsigned short)((unsigned int)ctrl & 36863U);
        #line 376 
        ctrl = (unsigned short)((unsigned int)ctrl | 10240U);
      }
    }
  else 
       #line 383 
       ctrl = (unsigned short)((unsigned int)ctrl & 65439U);
  #line 386 
  gm_phy_write(hw,port,(unsigned short)16,(unsigned short)((int)ctrl));
  #line 389 
  if ((unsigned int)hw->chip_id == 179U && (hw->flags & 2UL) != 0UL) {
    #line 390 
    pg = gm_phy_read(hw,port,(unsigned short)22);
    #line 393 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)2);
    #line 394 
    ctrl = gm_phy_read(hw,port,(unsigned short)16);
    #line 395 
    ctrl = (unsigned short)((unsigned int)ctrl & 64639U);
    #line 396 
    ctrl = (unsigned short)((unsigned int)ctrl | 896U);
    #line 397 
    gm_phy_write(hw,port,(unsigned short)16,(unsigned short)((int)ctrl));
    #line 399 
    if ((unsigned int)hw->pmd_type == 80U) {
      #line 401 
      gm_phy_write(hw,port,(unsigned short)22,(unsigned short)1);
      #line 404 
      ctrl = gm_phy_read(hw,port,(unsigned short)16);
      #line 405 
      ctrl = (unsigned short)((unsigned int)ctrl | 512U);
      #line 406 
      gm_phy_write(hw,port,(unsigned short)16,(unsigned short)((int)ctrl));
    }
    #line 409 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)((int)pg));
  }
  #line 412 
  ctrl = (unsigned short)32768U;
  #line 413 
  ct1000 = (unsigned short)0U;
  #line 414 
  adv = (unsigned short)1U;
  #line 415 
  reg = (unsigned short)0U;
  #line 417 
  if (((int)sky2->flags & 2) != 0) {
    #line 418 
    if (sky2_is_copper(hw) != 0) {
      #line 419 
      if (((unsigned long)sky2->advertising & 32UL) != 0UL) 
                                                            #line 420 
                                                            ct1000 = (unsigned short)((unsigned int)ct1000 | 512U);
      #line 421 
      if (((unsigned long)sky2->advertising & 16UL) != 0UL) 
                                                            #line 422 
                                                            ct1000 = (unsigned short)((unsigned int)ct1000 | 256U);
      #line 423 
      if (((unsigned long)sky2->advertising & 8UL) != 0UL) 
                                                           #line 424 
                                                           adv = (unsigned short)((unsigned int)adv | 256U);
      #line 425 
      if (((unsigned long)sky2->advertising & 4UL) != 0UL) 
                                                           #line 426 
                                                           adv = (unsigned short)((unsigned int)adv | 128U);
      #line 427 
      if (((unsigned long)sky2->advertising & 2UL) != 0UL) 
                                                           #line 428 
                                                           adv = (unsigned short)((unsigned int)adv | 64U);
      #line 429 
      if (((unsigned long)sky2->advertising & 1UL) != 0UL) 
                                                           #line 430 
                                                           adv = (unsigned short)((unsigned int)adv | 32U);
    }
    else {
      #line 433 
      if (((unsigned long)sky2->advertising & 32UL) != 0UL) 
                                                            #line 434 
                                                            adv = (unsigned short)((unsigned int)adv | 32U);
      #line 435 
      if (((unsigned long)sky2->advertising & 16UL) != 0UL) 
                                                            #line 436 
                                                            adv = (unsigned short)((unsigned int)adv | 64U);
    }
    #line 440 
    ctrl = (unsigned short)((unsigned int)ctrl | 4608U);
  }
  else {
    #line 443 
    ct1000 = (unsigned short)4096U;
    #line 446 
    reg = (unsigned short)((unsigned int)reg | 5U);
    #line 448 
    switch ((int)sky2->speed) {
      #line 449 
      case 1000: 
                 #line 449 
      ;
      #line 450 
      ctrl = (unsigned short)((unsigned int)ctrl | 64U);
      #line 451 
      reg = (unsigned short)((unsigned int)reg | 136U);
      #line 452 
      break;
      #line 453 
      case 100: 
                #line 453 
      ;
      #line 454 
      ctrl = (unsigned short)((unsigned int)ctrl | 8192U);
      #line 455 
      reg = (unsigned short)((unsigned int)reg | 8U);
      #line 456 
      break;
    }
    #line 459 
    if ((unsigned int)sky2->duplex == 1U) {
      #line 460 
      reg = (unsigned short)((unsigned int)reg | 32U);
      #line 461 
      ctrl = (unsigned short)((unsigned int)ctrl | 256U);
    }
    else 
      #line 462 
      if ((unsigned int)sky2->speed <= 999U) 
                                             #line 463 
                                             sky2->flow_mode = FC_NONE;
  }
  #line 466 
  if (((int)sky2->flags & 4) != 0) {
    #line 467 
    if (sky2_is_copper(hw) != 0) 
                                 #line 468 
                                 adv = (unsigned short)((int)copper_fc_adv[(unsigned int)sky2->flow_mode] | (int)adv); else 
                                                                    #line 470 
                                                                    adv = (unsigned short)((int)fiber_fc_adv[(unsigned int)sky2->flow_mode] | (int)adv);
  }
  else {
    #line 472 
    reg = (unsigned short)((unsigned int)reg | 2U);
    #line 473 
    reg = (unsigned short)((int)gm_fc_disable[(unsigned int)sky2->flow_mode] | (int)reg);
    #line 476 
    if (((unsigned int)sky2->flow_mode & 2U) != 0U) 
                                                    #line 477 
                                                    sky2_write8(hw,(port << 7) + 3840U,(unsigned char)8); else 
                                                                    #line 479 
                                                                    sky2_write8(hw,(port << 7) + 3840U,(unsigned char)4);
  }
  #line 482 
  gma_write16(hw,port,4,(unsigned short)((int)reg));
  #line 484 
  if ((hw->flags & 4UL) != 0UL) 
                                #line 485 
                                gm_phy_write(hw,port,(unsigned short)9,(unsigned short)((int)ct1000));
  #line 487 
  gm_phy_write(hw,port,(unsigned short)4,(unsigned short)((int)adv));
  #line 488 
  gm_phy_write(hw,port,(unsigned short)0,(unsigned short)((int)ctrl));
  #line 491 
  ledctrl = (unsigned short)16384U;
  #line 492 
  ledover = (unsigned short)0U;
  #line 494 
  switch ((int)hw->chip_id) {
    #line 495 
    case 183: 
              #line 495 
    ;
    #line 497 
    ledctrl = (unsigned short)((unsigned int)ledctrl | 512U);
    #line 499 
    ctrl = gm_phy_read(hw,port,(unsigned short)22);
    #line 502 
    ctrl = (unsigned short)((unsigned int)ctrl & 65295U);
    #line 504 
    ctrl = (unsigned short)((unsigned int)ctrl | 176U);
    #line 505 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)((int)ctrl));
    #line 506 
    break;
    #line 508 
    case 184: 
              #line 508 
    ;
    #line 510 
    ctrl = gm_phy_read(hw,port,(unsigned short)16);
    #line 511 
    ctrl = (unsigned short)((unsigned int)ctrl | 4096U);
    #line 514 
    ctrl = (unsigned short)((unsigned int)ctrl & 48639U);
    #line 515 
    gm_phy_write(hw,port,(unsigned short)16,(unsigned short)((int)ctrl));
    #line 518 
    ctrl = (unsigned short)2900U;
    #line 522 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)((int)ctrl));
    #line 523 
    break;
    #line 525 
    case 179: 
              #line 525 
    ;
    #line 526 
    pg = gm_phy_read(hw,port,(unsigned short)22);
    #line 529 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)3);
    #line 532 
    gm_phy_write(hw,port,(unsigned short)16,(unsigned short)6007);
    #line 539 
    gm_phy_write(hw,port,(unsigned short)17,(unsigned short)17578);
    #line 548 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)((int)pg));
    #line 549 
    break;
    #line 551 
    case 180: 
              #line 551 
    ;
    #line 552 
    case 181: 
              #line 552 
    ;
    #line 553 
    case 185: 
              #line 553 
    ;
    #line 554 
    pg = gm_phy_read(hw,port,(unsigned short)22);
    #line 557 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)3);
    #line 560 
    gm_phy_write(hw,port,(unsigned short)16,(unsigned short)6263);
    #line 567 
    gm_phy_write(hw,port,(unsigned short)18,(unsigned short)((int)((unsigned int)ledctrl | 256U)));
    #line 570 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)((int)pg));
    #line 571 
    break;
    #line 573 
    default: 
             #line 573 
    ;
    #line 575 
    ledctrl = (unsigned short)((unsigned int)ledctrl | 257U);
    #line 578 
    ledover = (unsigned short)((unsigned int)ledover | 8U);
  }
  #line 581 
  if ((unsigned int)hw->chip_id == 180U || (unsigned int)hw->chip_id == 186U) {
    #line 583 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)255);
    #line 586 
    gm_phy_write(hw,port,(unsigned short)24,(unsigned short)43673);
    #line 587 
    gm_phy_write(hw,port,(unsigned short)23,(unsigned short)8209);
    #line 589 
    if ((unsigned int)hw->chip_id == 180U) {
      #line 591 
      gm_phy_write(hw,port,(unsigned short)24,(unsigned short)41476);
      #line 592 
      gm_phy_write(hw,port,(unsigned short)23,(unsigned short)8194);
    }
    #line 596 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)0);
  }
  else 
    #line 597 
    if ((unsigned int)hw->chip_id == 184U && (unsigned int)hw->chip_rev == 0U) {
      #line 600 
      gm_phy_write(hw,port,(unsigned short)29,(unsigned short)17);
      #line 601 
      gm_phy_write(hw,port,(unsigned short)30,(unsigned short)16224);
    }
    else 
      #line 602 
      if ((unsigned int)hw->chip_id == 188U && (unsigned int)hw->chip_rev == 0U) {
        #line 604 
        gm_phy_write(hw,port,(unsigned short)22,(unsigned short)255);
        #line 607 
        gm_phy_write(hw,port,(unsigned short)24,(unsigned short)10240);
        #line 608 
        gm_phy_write(hw,port,(unsigned short)23,(unsigned short)8193);
        #line 611 
        gm_phy_write(hw,port,(unsigned short)22,(unsigned short)0);
      }
      else 
        #line 612 
        if ((unsigned int)hw->chip_id != 181U && (unsigned int)hw->chip_id <= 184U) {
          #line 615 
          gm_phy_write(hw,port,(unsigned short)24,(unsigned short)((int)ledctrl));
          #line 617 
          if (((int)sky2->flags & 2) == 0 || (unsigned int)sky2->speed == 100U) 
            #line 620 
            ledover = (unsigned short)((unsigned int)ledover | 192U);
          #line 623 
          if ((unsigned int)ledover != 0U) 
                                           #line 624 
                                           gm_phy_write(hw,port,(unsigned short)25,(unsigned short)((int)ledover));
        }
        else 
          #line 626 
          if ((unsigned int)hw->chip_id == 189U) {
            #line 626 
            if (((int)sky2_read8(hw,282U) & 15) == 7) {
              #line 628 
              int i;
              #line 632 
              struct __anonstruct_eee_afe_998 eee_afe[15U] = {{.reg = (unsigned short)342U, .val = (unsigned short)22734U}, {.reg = (unsigned short)339U, .val = (unsigned short)39403U}, {.reg = (unsigned short)321U, .val = (unsigned short)32868U}, {.reg = (unsigned short)0U, .val = (unsigned short)0U}, {.reg = (unsigned short)337U, .val = (unsigned short)33843U}, {.reg = (unsigned short)331U, .val = (unsigned short)35908U}, {.reg = (unsigned short)332U, .val = (unsigned short)3984U}, {.reg = (unsigned short)335U, .val = (unsigned short)14762U}, {.reg = (unsigned short)333U, .val = (unsigned short)47667U}, {.reg = (unsigned short)324U, .val = (unsigned short)72U}, {.reg = (unsigned short)338U, .val = (unsigned short)8208U}, {.reg = (unsigned short)320U, .val = (unsigned short)17476U}, {.reg = (unsigned short)340U, .val = (unsigned short)12091U}, {.reg = (unsigned short)344U, .val = (unsigned short)45571U}, {.reg = (unsigned short)343U, .val = (unsigned short)8233U}};
              #line 654 
              gm_phy_write(hw,port,(unsigned short)22,(unsigned short)251);
              #line 656 
              gm_phy_write(hw,port,(unsigned short)1,(unsigned short)16537);
              #line 657 
              gm_phy_write(hw,port,(unsigned short)3,(unsigned short)4384);
              #line 658 
              gm_phy_write(hw,port,(unsigned short)11,(unsigned short)4412);
              #line 659 
              gm_phy_write(hw,port,(unsigned short)14,(unsigned short)33024);
              #line 660 
              gm_phy_write(hw,port,(unsigned short)15,(unsigned short)4394);
              #line 661 
              gm_phy_write(hw,port,(unsigned short)17,(unsigned short)4104);
              #line 663 
              gm_phy_write(hw,port,(unsigned short)22,(unsigned short)252);
              #line 664 
              gm_phy_write(hw,port,(unsigned short)1,(unsigned short)8368);
              #line 666 
              gm_phy_write(hw,port,(unsigned short)22,(unsigned short)255);
              #line 668 
              i = 0;
              #line 668 
              while ((unsigned int)i <= 14U) {
                #line 670 
                gm_phy_write(hw,port,(unsigned short)17,(unsigned short)((int)eee_afe[i].val));
                #line 671 
                gm_phy_write(hw,port,(unsigned short)16,(unsigned short)((int)((unsigned int)eee_afe[i].reg | 8192U)));
                #line 668 
                i ++;
              }
              #line 675 
              gm_phy_write(hw,port,(unsigned short)22,(unsigned short)0);
              #line 678 
              if ((unsigned int)hw->chip_id > 188U) {
                #line 679 
                reg = gm_phy_read(hw,port,(unsigned short)20);
                #line 680 
                gm_phy_write(hw,port,(unsigned short)20,(unsigned short)((int)((unsigned int)reg | 128U)));
              }
            }
          }
  #line 686 
  if (((int)sky2->flags & 2) != 0) 
                                   #line 687 
                                   gm_phy_write(hw,port,(unsigned short)18,(unsigned short)2048); else 
                                                                    #line 689 
                                                                    gm_phy_write(hw,port,(unsigned short)18,(unsigned short)25600);
  #line 690 
  return;
}

#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static u32 phy_power[2U] = {67108864U, 134217728U};
#line 693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static u32 coma_mode[2U] = {268435456U, 536870912U};
#line 695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_phy_power_up(struct sky2_hw *hw, unsigned int port)
{
  #line 697 
  u32 reg1;
  #line 699 
  sky2_write8(hw,344U,(unsigned char)2);
  #line 700 
  reg1 = sky2_pci_read32(hw,64U);
  #line 701 
  reg1 = ~ phy_power[port] & reg1;
  #line 703 
  if ((unsigned int)hw->chip_id == 179U && (unsigned int)hw->chip_rev > 1U) 
    #line 704 
    reg1 = coma_mode[port] | reg1;
  #line 706 
  sky2_pci_write32(hw,64U,reg1);
  #line 707 
  sky2_write8(hw,344U,(unsigned char)1);
  #line 708 
  sky2_pci_read32(hw,64U);
  #line 710 
  if ((unsigned int)hw->chip_id == 183U) 
                                         #line 711 
                                         gm_phy_write(hw,port,(unsigned short)0,(unsigned short)4096);
  else 
    #line 712 
    if ((hw->flags & 128UL) != 0UL) 
                                    #line 713 
                                    sky2_write8(hw,(port << 7) + 3844U,(unsigned char)2);
  #line 714 
  return;
}

#line 716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_phy_power_down(struct sky2_hw *hw, unsigned int port)
{
  #line 718 
  u32 reg1;
  #line 719 
  u16 ctrl;
  #line 722 
  sky2_write8(hw,(port << 7) + 3844U,(unsigned char)2);
  #line 725 
  sky2_write8(hw,(port << 7) + 3840U,(unsigned char)2);
  #line 727 
  if ((hw->flags & 8UL) != 0UL) {
    #line 729 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)2);
    #line 731 
    ctrl = gm_phy_read(hw,port,(unsigned short)16);
    #line 733 
    ctrl = (unsigned short)((unsigned int)ctrl & 65527U);
    #line 734 
    gm_phy_write(hw,port,(unsigned short)16,(unsigned short)((int)ctrl));
    #line 737 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)0);
  }
  #line 741 
  gma_write16(hw,port,4,(unsigned short)79);
  #line 746 
  if ((unsigned int)hw->chip_id != 182U) {
    #line 747 
    if ((unsigned int)hw->chip_id == 180U) {
      #line 749 
      gm_phy_write(hw,port,(unsigned short)22,(unsigned short)2);
      #line 751 
      ctrl = gm_phy_read(hw,port,(unsigned short)16);
      #line 753 
      ctrl = (unsigned short)((unsigned int)ctrl | 4U);
      #line 754 
      gm_phy_write(hw,port,(unsigned short)16,(unsigned short)((int)ctrl));
      #line 757 
      gm_phy_write(hw,port,(unsigned short)22,(unsigned short)0);
    }
    #line 761 
    gm_phy_write(hw,port,(unsigned short)0,(unsigned short)2048);
  }
  #line 764 
  sky2_write8(hw,344U,(unsigned char)2);
  #line 765 
  reg1 = sky2_pci_read32(hw,64U);
  #line 766 
  reg1 = phy_power[port] | reg1;
  #line 767 
  sky2_pci_write32(hw,64U,reg1);
  #line 768 
  sky2_write8(hw,344U,(unsigned char)1);
  #line 769 
  return;
}

#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_set_ipg(struct sky2_port *sky2)
{
  #line 774 
  u16 reg;
  #line 776 
  reg = gma_read16(sky2->hw,sky2->port,24U);
  #line 777 
  reg = (unsigned short)((unsigned int)reg & 65504U);
  #line 778 
  if ((unsigned int)sky2->speed > 100U) 
                                        #line 779 
                                        reg = (unsigned short)((unsigned int)reg | 30U); else 
                                                                    #line 781 
                                                                    reg = (unsigned short)((unsigned int)reg | 24U);
  #line 782 
  gma_write16(sky2->hw,sky2->port,24,(unsigned short)((int)reg));
  #line 783 
  return;
}

#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_enable_rx_tx(struct sky2_port *sky2)
{
  #line 790 
  u16 reg;
  #line 788 
  struct sky2_hw *hw = sky2->hw;
  #line 789 
  unsigned int port = sky2->port;
  #line 792 
  reg = gma_read16(hw,port,4U);
  #line 793 
  reg = (unsigned short)((unsigned int)reg | 6144U);
  #line 794 
  gma_write16(hw,port,4,(unsigned short)((int)reg));
  #line 795 
  return;
}

#line 798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_phy_reinit(struct sky2_port *sky2)
{
  #line 800 
  cif_spin_lock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
  #line 801 
  sky2_phy_init(sky2->hw,sky2->port);
  #line 802 
  sky2_enable_rx_tx(sky2);
  #line 803 
  cif_spin_unlock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
  #line 804 
  return;
}

#line 807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_wol_init(struct sky2_port *sky2)
{
  #line 811 
  enum flow_control save_mode;
  #line 812 
  u16 ctrl;
  #line 809 
  struct sky2_hw *hw = sky2->hw;
  #line 810 
  unsigned int port = sky2->port;
  #line 815 
  sky2_write16(hw,4U,(unsigned short)2);
  #line 816 
  sky2_write16(hw,(port << 7) + 3856U,(unsigned short)2);
  #line 818 
  sky2_write8(hw,(port << 7) + 3844U,(unsigned char)2);
  #line 819 
  sky2_write8(hw,(port << 7) + 3840U,(unsigned char)2);
  #line 824 
  save_mode = sky2->flow_mode;
  #line 825 
  ctrl = sky2->advertising;
  #line 827 
  sky2->advertising = (unsigned short)((unsigned int)sky2->advertising & 65487U);
  #line 828 
  sky2->flow_mode = FC_NONE;
  #line 830 
  cif_spin_lock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
  #line 831 
  sky2_phy_power_up(hw,port);
  #line 832 
  sky2_phy_init(hw,port);
  #line 833 
  cif_spin_unlock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
  #line 835 
  sky2->flow_mode = save_mode;
  #line 836 
  sky2->advertising = ctrl;
  #line 839 
  gma_write16(hw,port,4,(unsigned short)14386);
  #line 844 
  memcpy_toio(hw->regs + (unsigned long)(port * 128U + 3876U),(void *)(sky2->netdev)->dev_addr,6UL);
  #line 848 
  sky2_write16(hw,port * 128U + 3872U,(unsigned short)4096);
  #line 849 
  ctrl = (unsigned short)0U;
  #line 850 
  if (((int)sky2->wol & 1) != 0) 
                                 #line 851 
                                 ctrl = (unsigned short)((unsigned int)ctrl | 2080U); else 
                                                                    #line 853 
                                                                    ctrl = (unsigned short)((unsigned int)ctrl | 1040U);
  #line 855 
  if (((int)sky2->wol & 32) != 0) 
                                  #line 856 
                                  ctrl = (unsigned short)((unsigned int)ctrl | 520U); else 
                                                                    #line 858 
                                                                    ctrl = (unsigned short)((unsigned int)ctrl | 260U);
  #line 860 
  ctrl = (unsigned short)((unsigned int)ctrl | 65U);
  #line 861 
  sky2_write16(hw,port * 128U + 3872U,(unsigned short)((int)ctrl));
  #line 864 
  sky2_write16(hw,4U,(unsigned short)16384);
  #line 867 
  if (legacy_pme != 0) {
    #line 868 
    u32 reg1 = sky2_pci_read32(hw,64U);
    #line 869 
    reg1 |= 32768U;
    #line 870 
    sky2_pci_write32(hw,64U,reg1);
  }
  #line 874 
  sky2_write8(hw,(port << 7) + 3144U,(unsigned char)1);
  #line 875 
  sky2_read32(hw,4U);
  #line 876 
  return;
}

#line 878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_set_tx_stfwd(struct sky2_hw *hw, unsigned int port)
{
  #line 880 
  struct net_device *dev = hw->dev[port];
  #line 882 
  if ((unsigned int)hw->chip_id == 181U && (unsigned int)hw->chip_rev != 1U || (unsigned int)hw->chip_id > 183U) 
    #line 886 
    sky2_write32(hw,(port << 7) + 3400U,1073741824U);
  else 
    #line 887 
    if (dev->mtu > 1500U) {
      #line 889 
      sky2_write32(hw,(port << 7) + 3396U,8388720U);
      #line 892 
      sky2_write32(hw,(port << 7) + 3400U,2147483648U);
    }
    else 
         #line 894 
         sky2_write32(hw,(port << 7) + 3400U,1073741824U);
  #line 895 
  return;
}

#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_mac_init(struct sky2_hw *hw, unsigned int port)
{
  #line 900 
  u16 reg;
  #line 901 
  u32 rx_reg;
  #line 902 
  int i;
  #line 899 
  struct sky2_port *sky2 = netdev_priv(hw->dev[port]);
  #line 903 
  u8 *addr = (hw->dev[port])->dev_addr;
  #line 905 
  sky2_write8(hw,(port << 7) + 3844U,(unsigned char)1);
  #line 906 
  sky2_write8(hw,(port << 7) + 3844U,(unsigned char)2);
  #line 908 
  sky2_write8(hw,(port << 7) + 3840U,(unsigned char)2);
  #line 910 
  if (((unsigned int)hw->chip_id == 179U && (unsigned int)hw->chip_rev == 0U) && port == 1U) {
    #line 915 
    sky2_write8(hw,3840U,(unsigned char)2);
    #line 916 
    while (1) {
      #line 917 
      sky2_write8(hw,3968U,(unsigned char)1);
      #line 918 
      sky2_write8(hw,3968U,(unsigned char)2);
      #line 919 
      if (! ((unsigned int)gm_phy_read(hw,1U,(unsigned short)2) != 321U)) {
        #line 919 
        if (! ((unsigned int)gm_phy_read(hw,1U,(unsigned short)3) != 3217U)) {
          #line 920 
          if (! ((unsigned int)gm_phy_read(hw,1U,(unsigned short)18) != 0U)) 
            #line 916 
            break;
        }
      }
    }
  }
  #line 924 
  sky2_read16(hw,(port << 7) + 3848U);
  #line 927 
  sky2_write8(hw,(port << 7) + 3852U,(unsigned char)10);
  #line 929 
  cif_spin_lock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
  #line 930 
  sky2_phy_power_up(hw,port);
  #line 931 
  sky2_phy_init(hw,port);
  #line 932 
  cif_spin_unlock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
  #line 935 
  reg = gma_read16(hw,port,136U);
  #line 936 
  gma_write16(hw,port,136,(unsigned short)((int)((unsigned int)reg | 32U)));
  #line 938 
  i = 256;
  #line 938 
  while (i <= 604) {
    #line 939 
    gma_read16(hw,port,(unsigned int)i);
    #line 938 
    i += 4;
  }
  #line 940 
  gma_write16(hw,port,136,(unsigned short)((int)reg));
  #line 943 
  gma_write16(hw,port,8,(unsigned short)4096);
  #line 946 
  gma_write16(hw,port,12,(unsigned short)57344);
  #line 950 
  gma_write16(hw,port,16,(unsigned short)65535);
  #line 953 
  gma_write16(hw,port,20,(unsigned short)55236);
  #line 960 
  reg = (unsigned short)8734U;
  #line 963 
  if ((hw->dev[port])->mtu > 1500U) 
                                    #line 964 
                                    reg = (unsigned short)((unsigned int)reg | 256U);
  #line 966 
  if ((unsigned int)hw->chip_id == 180U && (unsigned int)hw->chip_rev == 5U) 
    #line 968 
    reg = (unsigned short)((unsigned int)reg | 64U);
  #line 970 
  gma_write16(hw,port,24,(unsigned short)((int)reg));
  #line 973 
  gma_set_addr(hw,port,40U,addr);
  #line 976 
  gma_set_addr(hw,port,28U,addr);
  #line 979 
  gma_write16(hw,port,80,(unsigned short)0);
  #line 980 
  gma_write16(hw,port,84,(unsigned short)0);
  #line 981 
  gma_write16(hw,port,88,(unsigned short)0);
  #line 984 
  sky2_write8(hw,(port << 7) + 3144U,(unsigned char)2);
  #line 985 
  rx_reg = 136U;
  #line 986 
  if ((unsigned int)hw->chip_id == 181U || (unsigned int)hw->chip_id == 184U) 
    #line 988 
    rx_reg |= 524288U;
  #line 990 
  sky2_write32(hw,(port << 7) + 3144U,rx_reg);
  #line 992 
  if ((unsigned int)hw->chip_id == 179U) 
                                         #line 994 
                                         sky2_write16(hw,(port << 7) + 3148U,(unsigned short)0); else 
                                                                    #line 997 
                                                                    sky2_write16(hw,(port << 7) + 3148U,(unsigned short)6267);
  #line 1001 
  reg = (unsigned short)11U;
  #line 1003 
  if ((unsigned int)hw->chip_id == 184U && (unsigned int)hw->chip_rev == 0U) 
    #line 1005 
    reg = (unsigned short)376U;
  #line 1006 
  sky2_write16(hw,(port << 7) + 3152U,(unsigned short)((int)reg));
  #line 1009 
  sky2_write8(hw,(port << 7) + 3400U,(unsigned char)2);
  #line 1010 
  sky2_write16(hw,(port << 7) + 3400U,(unsigned short)8);
  #line 1013 
  if ((hw->flags & 16UL) == 0UL) {
    #line 1015 
    if ((unsigned int)hw->chip_id == 184U && (unsigned int)hw->chip_rev == 0U) 
      #line 1017 
      reg = (unsigned short)196U; else 
                                       #line 1019 
                                       reg = (unsigned short)128U;
    #line 1020 
    sky2_write16(hw,(port << 7) + 3160U,(unsigned short)((int)reg));
    #line 1021 
    sky2_write16(hw,(port << 7) + 3162U,(unsigned short)96);
    #line 1023 
    sky2_set_tx_stfwd(hw,port);
  }
  #line 1026 
  if ((unsigned int)hw->chip_id == 184U && (unsigned int)hw->chip_rev == 0U) {
    #line 1029 
    reg = sky2_read16(hw,(port << 7) + 3392U);
    #line 1030 
    reg = (unsigned short)((unsigned int)reg & 65532U);
    #line 1031 
    sky2_write16(hw,(port << 7) + 3392U,(unsigned short)((int)reg));
  }
  #line 1033 
  return;
}

#line 1036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_ramset(struct sky2_hw *hw, u16 q, u32 start, u32 space)
{
  #line 1038 
  u32 end;
  #line 1041 
  start *= 128U;
  #line 1042 
  space *= 128U;
  #line 1043 
  end = (start + space) + 4294967295U;
  #line 1045 
  sky2_write8(hw,(unsigned int)((int)q + 2088),(unsigned char)2);
  #line 1046 
  sky2_write32(hw,(unsigned int)((int)q + 2048),start);
  #line 1047 
  sky2_write32(hw,(unsigned int)((int)q + 2052),end);
  #line 1048 
  sky2_write32(hw,(unsigned int)((int)q + 2056),start);
  #line 1049 
  sky2_write32(hw,(unsigned int)((int)q + 2060),start);
  #line 1051 
  if ((unsigned int)q == 0U || (unsigned int)q == 128U) {
    #line 1052 
    u32 tp = space - space / 4U;
    #line 1058 
    sky2_write32(hw,(unsigned int)((int)q + 2072),tp);
    #line 1059 
    sky2_write32(hw,(unsigned int)((int)q + 2076),space / 2U);
    #line 1061 
    tp = space + 4294966272U;
    #line 1062 
    sky2_write32(hw,(unsigned int)((int)q + 2064),tp);
    #line 1063 
    sky2_write32(hw,(unsigned int)((int)q + 2068),space / 4U);
  }
  else 
       #line 1068 
       sky2_write8(hw,(unsigned int)((int)q + 2088),(unsigned char)32);
  #line 1071 
  sky2_write8(hw,(unsigned int)((int)q + 2088),(unsigned char)8);
  #line 1072 
  sky2_read8(hw,(unsigned int)((int)q + 2088));
  #line 1073 
  return;
}

#line 1076  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_qset(struct sky2_hw *hw, u16 q)
{
  #line 1078 
  sky2_write32(hw,(unsigned int)((int)q + 1076),22U);
  #line 1079 
  sky2_write32(hw,(unsigned int)((int)q + 1076),3368U);
  #line 1080 
  sky2_write32(hw,(unsigned int)((int)q + 1076),128U);
  #line 1081 
  sky2_write32(hw,(unsigned int)((int)q + 1088),1536U);
  #line 1082 
  return;
}

#line 1087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_prefetch_init(struct sky2_hw *hw, u32 qaddr, dma_addr_t addr, u32 last)
{
  #line 1090 
  sky2_write32(hw,qaddr + 1104U,1U);
  #line 1091 
  sky2_write32(hw,qaddr + 1104U,2U);
  #line 1092 
  sky2_write32(hw,qaddr + 1116U,(unsigned int)(addr >> 32));
  #line 1093 
  sky2_write32(hw,qaddr + 1112U,(unsigned int)addr);
  #line 1094 
  sky2_write16(hw,qaddr + 1108U,(unsigned short)((int)((unsigned short)last)));
  #line 1095 
  sky2_write32(hw,qaddr + 1104U,8U);
  #line 1097 
  sky2_read32(hw,qaddr + 1104U);
  #line 1098 
  return;
}

#line 1100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static struct sky2_tx_le *get_tx_le(struct sky2_port *sky2, u16 *slot)
{
  #line 1102 
  struct sky2_tx_le *le = sky2->tx_le + (unsigned long)*slot;
  #line 1104 
  *slot = (unsigned short)(((unsigned int)*slot + 1U) & ((unsigned int)sky2->tx_ring_size + 65535U));
  #line 1105 
  le->ctrl = (unsigned char)0U;
  #line 1106 
  return le;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void tx_init(struct sky2_port *sky2)
{
  #line 1111 
  struct sky2_tx_le *le;
  #line 1113 
  sky2->tx_cons = ((unsigned short)0U);
  #line 1113 
  sky2->tx_prod = ((unsigned short)0U);
  #line 1114 
  sky2->tx_tcpsum = 0U;
  #line 1115 
  sky2->tx_last_mss = (unsigned short)0U;
  #line 1116 
  netdev_reset_queue(sky2->netdev);
  #line 1118 
  le = get_tx_le(sky2,& sky2->tx_prod);
  #line 1119 
  le->addr = 0U;
  #line 1120 
  le->opcode = (unsigned char)161U;
  #line 1121 
  sky2->tx_last_upper = 0U;
  #line 1122 
  return;
}

#line 1125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static void sky2_put_idx(struct sky2_hw *hw, unsigned int q, u16 idx)
{
  #line 1127 
  ldv_inline_asm();
  #line 1129 
  sky2_write16(hw,q + 1124U,(unsigned short)((int)idx));
  #line 1130 
  return;
}

#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static struct sky2_rx_le *sky2_next_rx(struct sky2_port *sky2)
{
  #line 1135 
  struct sky2_rx_le *le = sky2->rx_le + (unsigned long)sky2->rx_put;
  #line 1136 
  sky2->rx_put = (unsigned short)((unsigned int)((unsigned short)((unsigned int)sky2->rx_put + 1U)) & 1023U);
  #line 1137 
  le->ctrl = (unsigned char)0U;
  #line 1138 
  return le;
}

#line 1141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static unsigned int sky2_get_rx_threshold(struct sky2_port *sky2)
{
  #line 1146 
  int __y;
  #line 1143 
  unsigned int size;
  #line 1146 
  __y = 8;
  #line 1146 
  size = (((((sky2->netdev)->mtu + (unsigned int)__y) + 17U) / (unsigned int)__y) * (unsigned int)__y);
  #line 1149 
  return (size + 4294967288U) / 4U;
}

#line 1152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static unsigned int sky2_get_rx_data_size(struct sky2_port *sky2)
{
  #line 1158 
  int __y;
  #line 1154 
  struct rx_ring_info *re;
  #line 1155 
  unsigned int size;
  #line 1158 
  __y = 8;
  #line 1158 
  size = (((((sky2->netdev)->mtu + (unsigned int)__y) + 17U) / (unsigned int)__y) * (unsigned int)__y);
  #line 1160 
  sky2->rx_nfrags = (unsigned short)(size >> 12);
  #line 1161 
  if ((long)((unsigned int)sky2->rx_nfrags > 2U) != 0L) {
    #line 1162 
    ldv_inline_asm();
    #line 1163 
    ldv_inline_asm();
    #line 1164 
    ldv_inline_asm();
    #line 1161 
    ;
  }
  #line 1164 
  size -= (unsigned int)((int)sky2->rx_nfrags << 12);
  #line 1167 
  if (size < (unsigned int)copybreak) 
                                      #line 1168 
                                      size = (unsigned int)copybreak;
  #line 1169 
  if (size <= 13U) 
                   #line 1170 
                   size = 14U;
  #line 1172 
  return size;
}

#line 1176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_rx_add(struct sky2_port *sky2, u8 op, dma_addr_t map, unsigned int len)
{
  #line 1179 
  struct sky2_rx_le *le;
  #line 1182 
  le = sky2_next_rx(sky2);
  #line 1183 
  le->addr = (unsigned int)(map >> 32);
  #line 1184 
  le->opcode = (unsigned char)161U;
  #line 1187 
  le = sky2_next_rx(sky2);
  #line 1188 
  le->addr = (unsigned int)map;
  #line 1189 
  le->length = (unsigned short)len;
  #line 1190 
  le->opcode = (unsigned char)((unsigned int)op | 128U);
  #line 1191 
  return;
}

#line 1194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_rx_submit(struct sky2_port *sky2, struct rx_ring_info *re)
{
  #line 1197 
  int i;
  #line 1199 
  sky2_rx_add(sky2,(unsigned char)65,re->data_addr,(unsigned int)sky2->rx_data_size);
  #line 1201 
  i = 0;
  #line 1201 
  while (1) {
    #line 1201 
    ;
    #line 1201 
    if (! ((int)((struct skb_shared_info *)skb_end_pointer(re->skb))->nr_frags > i)) 
      #line 1201 
      break;
    #line 1202 
    sky2_rx_add(sky2,(unsigned char)64,re->frag_addr[i],4096U);
    #line 1201 
    i ++;
  }
  #line 1203 
  return;
}

#line 1206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_rx_map_skb(struct pci_dev *pdev, struct rx_ring_info *re, unsigned int size)
{
  #line 1210 
  int i;
  #line 1209 
  struct sk_buff *skb = re->skb;
  #line 1212 
  re->data_addr = pci_map_single(pdev,(void *)skb->data,(unsigned long)size,2);
  #line 1213 
  if (pci_dma_mapping_error(pdev,re->data_addr) != 0) 
                                                      #line 1214 
                                                      goto mapping_error;
  #line 1216 
  re->data_size = size;
  #line 1218 
  i = 0;
  #line 1218 
  while (1) {
    #line 1218 
    ;
    #line 1218 
    if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 1218 
      break;
    {
      #line 1219 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 1221 
      ;
      #line 1221 
      ;
      #line 1221 
      re->frag_addr[i] = skb_frag_dma_map(& pdev->dev,frag,0UL,(unsigned long)skb_frag_size(frag),(enum dma_data_direction)DMA_FROM_DEVICE);
      #line 1225 
      if (dma_mapping_error(& pdev->dev,re->frag_addr[i]) != 0) 
                                                                #line 1226 
                                                                goto map_page_error;
    }
    #line 1218 
    i ++;
  }
  #line 1228 
  return 0;
  #line 1230 
  map_page_error: 
                  #line 1230 
  ;
  #line 1231 
  while (1) {
    #line 1231 
    i --;
    #line 1231 
    if (! (i >= 0)) 
                    #line 1231 
                    break;
    #line 1232 
    ;
    #line 1232 
    ;
    #line 1232 
    pci_unmap_page(pdev,re->frag_addr[i],(unsigned long)skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i]),2);
  }
  #line 1237 
  pci_unmap_single(pdev,re->data_addr,(unsigned long)re->data_size,2);
  #line 1240 
  mapping_error: 
                 #line 1240 
  ;
  #line 1241 
  if (net_ratelimit() != 0) 
                            #line 1242 
                            _dev_warn(& pdev->dev,(char *)"%s: rx mapping error\n",(char *)(& (skb->__anonCompField_sk_buff_91.__anonCompField___anonunion_531_90.__anonCompField___anonstruct_532_89.dev)->name));
  #line 1244 
  return -5;
}

#line 1247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_rx_unmap_skb(struct pci_dev *pdev, struct rx_ring_info *re)
{
  #line 1250 
  int i;
  #line 1249 
  struct sk_buff *skb = re->skb;
  #line 1252 
  pci_unmap_single(pdev,re->data_addr,(unsigned long)re->data_size,2);
  #line 1255 
  i = 0;
  #line 1255 
  while (1) {
    #line 1255 
    ;
    #line 1255 
    if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 1255 
      break;
    #line 1256 
    ;
    #line 1256 
    ;
    #line 1256 
    pci_unmap_page(pdev,re->frag_addr[i],(unsigned long)skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i]),2);
    #line 1255 
    i ++;
  }
  #line 1258 
  return;
}

#line 1265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void rx_set_checksum(struct sky2_port *sky2)
{
  #line 1274 
  unsigned int tmp_0;
  #line 1267 
  struct sky2_rx_le *le = sky2_next_rx(sky2);
  #line 1269 
  le->addr = 917518U;
  #line 1270 
  le->ctrl = (unsigned char)0U;
  #line 1271 
  le->opcode = (unsigned char)146U;
  #line 1274 
  if (((sky2->netdev)->features & 549755813888ULL) != 0ULL) 
                                                            #line 1274 
                                                            tmp_0 = 8192U; else 
                                                                    #line 1274 
                                                                    tmp_0 = 4096U;
  #line 1273 
  ;
  #line 1273 
  ;
  #line 1273 
  sky2_write32(sky2->hw,rxqaddr[sky2->port] + 1076U,tmp_0);
  #line 1277 
  return;
}

#line 1280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void rx_set_rss(struct net_device *dev, netdev_features_t features)
{
  #line 1284 
  int i;
  #line 1282 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 1283 
  struct sky2_hw *hw = sky2->hw;
  #line 1284 
  int nkeys = 4;
  #line 1287 
  if ((hw->flags & 32UL) != 0UL) {
    #line 1288 
    nkeys = 10;
    #line 1289 
    sky2_write32(hw,(sky2->port << 7) + 584U,63U);
  }
  #line 1293 
  if ((features & 274877906944ULL) != 0ULL) {
    #line 1294 
    u32 rss_key[10U];
    #line 1296 
    netdev_rss_key_fill((void *)(& rss_key),40UL);
    #line 1297 
    i = 0;
    #line 1297 
    while (i < nkeys) {
      #line 1298 
      sky2_write32(hw,(sky2->port << 7) + (unsigned int)((i + 136) * 4),rss_key[i]);
      #line 1297 
      i ++;
    }
    #line 1302 
    sky2_write32(hw,(sky2->port << 7) + 3144U,268435456U);
    #line 1305 
    sky2_write32(hw,rxqaddr[sky2->port] + 1076U,32768U);
  }
  else 
       #line 1308 
       sky2_write32(hw,rxqaddr[sky2->port] + 1076U,16384U);
  #line 1309 
  return;
}

#line 1322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_rx_stop(struct sky2_port *sky2)
{
  #line 1326 
  int i;
  #line 1324 
  struct sky2_hw *hw = sky2->hw;
  #line 1325 
  unsigned int rxq = rxqaddr[sky2->port];
  #line 1329 
  sky2_write8(hw,rxq + 2088U,(unsigned char)4);
  #line 1331 
  i = 0;
  #line 1331 
  while (i <= 65534) {
    #line 1332 
    if ((int)sky2_read8(hw,rxq + 2118U) == (int)sky2_read8(hw,rxq + 2122U)) 
      #line 1334 
      goto stopped;
    #line 1331 
    i ++;
  }
  #line 1336 
  netdev_warn(sky2->netdev,(char *)"receiver stop failed\n");
  #line 1337 
  stopped: 
           #line 1337 
  ;
  #line 1338 
  sky2_write32(hw,rxq + 1076U,17U);
  #line 1341 
  sky2_write32(hw,rxq + 1104U,1U);
  #line 1342 
  return;
}

#line 1345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_rx_clean(struct sky2_port *sky2)
{
  #line 1347 
  unsigned int i;
  #line 1349 
  if (sky2->rx_le != (struct sky2_rx_le *)0) 
                                             #line 1350 
                                             memset((void *)sky2->rx_le,0,8192UL);
  #line 1352 
  i = 0U;
  #line 1352 
  while ((unsigned int)sky2->rx_pending > i) {
    {
      #line 1353 
      struct rx_ring_info *re = sky2->rx_ring + (unsigned long)i;
      #line 1355 
      if (re->skb != (struct sk_buff *)0) {
        #line 1356 
        sky2_rx_unmap_skb((sky2->hw)->pdev,re);
        #line 1357 
        kfree_skb(re->skb);
        #line 1358 
        re->skb = (struct sk_buff *)0;
      }
    }
    #line 1352 
    i ++;
  }
  #line 1361 
  return;
}

#line 1364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
{
  #line 1366 
  struct mii_ioctl_data *data = if_mii(ifr);
  #line 1367 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 1368 
  struct sky2_hw *hw = sky2->hw;
  #line 1369 
  int err = -95;
  #line 1371 
  if (! netif_running(dev)) 
                            #line 1372 
                            return -19;
  #line 1374 
  switch (cmd) {
    #line 1375 
    case 35143: 
                #line 1375 
    ;
    #line 1376 
    data->phy_id = (unsigned short)0U;
    #line 1379 
    case 35144: 
                #line 1379 
    ;
    {
      #line 1380 
      u16 val = (unsigned short)0U;
      #line 1382 
      cif_spin_lock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
      #line 1383 
      err = __gm_phy_read(hw,sky2->port,(unsigned short)((int)data->reg_num & 31),& val);
      #line 1384 
      cif_spin_unlock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
      #line 1386 
      data->val_out = val;
      #line 1387 
      break;
    }
    #line 1390 
    case 35145: 
                #line 1390 
    ;
    #line 1391 
    cif_spin_lock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
    #line 1392 
    err = gm_phy_write(hw,sky2->port,(unsigned short)((int)data->reg_num & 31),(unsigned short)((int)data->val_in));
    #line 1394 
    cif_spin_unlock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
    #line 1395 
    break;
  }
  #line 1397 
  return err;
}

#line 1402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_vlan_mode(struct net_device *dev, netdev_features_t features)
{
  #line 1404 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 1405 
  struct sky2_hw *hw = sky2->hw;
  #line 1406 
  u16 port = (unsigned short)sky2->port;
  #line 1408 
  if ((features & 256ULL) != 0ULL) 
                                   #line 1409 
                                   sky2_write32(hw,(unsigned int)(((int)port << 7) + 3144),33554432U); else 
                                                                    #line 1412 
                                                                    sky2_write32(hw,(unsigned int)(((int)port << 7) + 3144),16777216U);
  #line 1415 
  if ((features & 128ULL) != 0ULL) {
    #line 1416 
    sky2_write32(hw,(unsigned int)(((int)port << 7) + 3400),33554432U);
    #line 1419 
    dev->vlan_features |= 65539ULL;
  }
  else {
    #line 1421 
    sky2_write32(hw,(unsigned int)(((int)port << 7) + 3400),16777216U);
    #line 1425 
    dev->vlan_features &= 18446744073709486076ULL;
  }
  #line 1427 
  return;
}

#line 1430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static unsigned int sky2_rx_pad(struct sky2_hw *hw)
{
  #line 1432 
  unsigned int tmp;
  #line 1432 
  if ((hw->flags & 16UL) != 0UL) 
                                 #line 1432 
                                 tmp = 8U; else 
                                                #line 1432 
                                                tmp = 2U;
  #line 1432 
  return tmp;
}

#line 1439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct sk_buff *sky2_rx_alloc(struct sky2_port *sky2, gfp_t gfp)
{
  #line 1441 
  struct sk_buff *skb;
  #line 1442 
  int i;
  #line 1444 
  ;
  #line 1444 
  ;
  #line 1444 
  ;
  #line 1444 
  skb = __netdev_alloc_skb(sky2->netdev,(unsigned int)sky2->rx_data_size + sky2_rx_pad(sky2->hw),gfp);
  #line 1447 
  if (skb == (struct sk_buff *)0) 
                                  #line 1448 
                                  goto nomem;
  #line 1450 
  if (((sky2->hw)->flags & 16UL) != 0UL) {
    #line 1451 
    unsigned char *start;
    #line 1458 
    start = (unsigned char *)(((unsigned long)skb->data + 7UL) & 18446744073709551608UL);
    #line 1459 
    skb_reserve(skb,(int)(start - skb->data));
  }
  else 
       #line 1461 
       skb_reserve(skb,0);
  #line 1463 
  i = 0;
  #line 1463 
  while ((int)sky2->rx_nfrags > i) {
    {
      #line 1464 
      struct page *page = alloc_pages(gfp,0U);
      #line 1466 
      if (page == (struct page *)0) 
                                    #line 1467 
                                    goto free_partial;
      #line 1468 
      skb_fill_page_desc(skb,i,page,0,4096);
    }
    #line 1463 
    i ++;
  }
  #line 1471 
  return skb;
  #line 1472 
  free_partial: 
                #line 1472 
  ;
  #line 1473 
  kfree_skb(skb);
  #line 1474 
  nomem: 
         #line 1474 
  ;
  #line 1475 
  return (struct sk_buff *)0;
}

#line 1478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static void sky2_rx_update(struct sky2_port *sky2, unsigned int rxq)
{
  #line 1480 
  sky2_put_idx(sky2->hw,rxq,(unsigned short)((int)sky2->rx_put));
  #line 1481 
  return;
}

#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_alloc_rx_skbs(struct sky2_port *sky2)
{
  #line 1486 
  unsigned int i;
  #line 1485 
  struct sky2_hw *hw = sky2->hw;
  #line 1488 
  sky2->rx_data_size = (unsigned short)sky2_get_rx_data_size(sky2);
  #line 1491 
  i = 0U;
  #line 1491 
  while ((unsigned int)sky2->rx_pending > i) {
    {
      #line 1492 
      struct rx_ring_info *re = sky2->rx_ring + (unsigned long)i;
      #line 1494 
      re->skb = sky2_rx_alloc(sky2,3264U);
      #line 1495 
      if (re->skb == (struct sk_buff *)0) 
                                          #line 1496 
                                          return -12;
      #line 1498 
      if (sky2_rx_map_skb(hw->pdev,re,(unsigned int)sky2->rx_data_size) != 0) {
        #line 1499 
        consume_skb(re->skb);
        #line 1500 
        re->skb = (struct sk_buff *)0;
        #line 1501 
        return -12;
      }
    }
    #line 1491 
    i ++;
  }
  #line 1504 
  return 0;
}

#line 1516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_rx_start(struct sky2_port *sky2)
{
  #line 1519 
  struct rx_ring_info *re;
  #line 1521 
  unsigned int i;
  #line 1521 
  unsigned int thresh;
  #line 1518 
  struct sky2_hw *hw = sky2->hw;
  #line 1520 
  unsigned int rxq = rxqaddr[sky2->port];
  #line 1523 
  sky2->rx_next = ((unsigned short)0U);
  #line 1523 
  sky2->rx_put = ((unsigned short)0U);
  #line 1524 
  sky2_qset(hw,(unsigned short)((int)((unsigned short)rxq)));
  #line 1527 
  if ((int)pci_is_pcie(hw->pdev) != 0) 
                                       #line 1528 
                                       sky2_write32(hw,rxq + 1088U,128U);
  #line 1532 
  if ((unsigned int)hw->chip_id == 180U && (unsigned int)hw->chip_rev > 1U) 
    #line 1534 
    sky2_write32(hw,rxq + 1080U,16777216U);
  #line 1536 
  sky2_prefetch_init(hw,rxq,sky2->rx_le_map,1023U);
  #line 1538 
  if ((hw->flags & 32UL) == 0UL) 
                                 #line 1539 
                                 rx_set_checksum(sky2);
  #line 1541 
  if ((hw->flags & 256UL) == 0UL) 
                                  #line 1542 
                                  rx_set_rss(sky2->netdev,(sky2->netdev)->features);
  #line 1545 
  i = 0U;
  #line 1545 
  while ((unsigned int)sky2->rx_pending > i) {
    #line 1546 
    re = sky2->rx_ring + (unsigned long)i;
    #line 1547 
    sky2_rx_submit(sky2,re);
    #line 1545 
    i ++;
  }
  #line 1556 
  thresh = sky2_get_rx_threshold(sky2);
  #line 1557 
  if (thresh > 511U) 
                     #line 1558 
                     sky2_write32(hw,(sky2->port << 7) + 3144U,67108864U);
  else {
    #line 1560 
    sky2_write16(hw,(sky2->port << 7) + 3156U,(unsigned short)((int)((unsigned short)thresh)));
    #line 1561 
    sky2_write32(hw,(sky2->port << 7) + 3144U,134217728U);
  }
  #line 1565 
  sky2_rx_update(sky2,rxq);
  #line 1567 
  if ((unsigned int)hw->chip_id == 181U || (unsigned int)hw->chip_id == 185U) 
    #line 1576 
    sky2_write32(hw,(sky2->port << 7) + 3144U,4194304U);
  #line 1579 
  if ((unsigned int)hw->chip_id > 184U) {
    #line 1581 
    sky2_write16(hw,(sky2->port << 7) + 3154U,(unsigned short)640);
    #line 1585 
    sky2_write32(hw,txqaddr[sky2->port] + 1080U,167772160U);
  }
  #line 1587 
  return;
}

#line 1590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_alloc_buffers(struct sky2_port *sky2)
{
  #line 1592 
  struct sky2_hw *hw = sky2->hw;
  #line 1595 
  sky2->tx_le = (struct sky2_tx_le *)pci_alloc_consistent(hw->pdev,(unsigned long)sky2->tx_ring_size * 8UL,& sky2->tx_le_map);
  #line 1599 
  if (sky2->tx_le == (struct sky2_tx_le *)0) 
                                             #line 1600 
                                             goto nomem;
  #line 1602 
  sky2->tx_ring = (struct tx_ring_info *)kcalloc((unsigned long)sky2->tx_ring_size,32UL,3264U);
  #line 1604 
  if (sky2->tx_ring == (struct tx_ring_info *)0) 
                                                 #line 1605 
                                                 goto nomem;
  #line 1607 
  sky2->rx_le = (struct sky2_rx_le *)pci_alloc_consistent(hw->pdev,8192UL,& sky2->rx_le_map);
  #line 1609 
  if (sky2->rx_le == (struct sky2_rx_le *)0) 
                                             #line 1610 
                                             goto nomem;
  #line 1612 
  sky2->rx_ring = (struct rx_ring_info *)kcalloc((unsigned long)sky2->rx_pending,40UL,3264U);
  #line 1614 
  if (sky2->rx_ring == (struct rx_ring_info *)0) 
                                                 #line 1615 
                                                 goto nomem;
  #line 1617 
  return sky2_alloc_rx_skbs(sky2);
  #line 1618 
  nomem: 
         #line 1618 
  ;
  #line 1619 
  return -12;
}

#line 1622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_free_buffers(struct sky2_port *sky2)
{
  #line 1624 
  struct sky2_hw *hw = sky2->hw;
  #line 1626 
  sky2_rx_clean(sky2);
  #line 1628 
  if (sky2->rx_le != (struct sky2_rx_le *)0) {
    #line 1629 
    pci_free_consistent(hw->pdev,8192UL,(void *)sky2->rx_le,sky2->rx_le_map);
    #line 1631 
    sky2->rx_le = (struct sky2_rx_le *)0;
  }
  #line 1633 
  if (sky2->tx_le != (struct sky2_tx_le *)0) {
    #line 1634 
    pci_free_consistent(hw->pdev,(unsigned long)sky2->tx_ring_size * 8UL,(void *)sky2->tx_le,sky2->tx_le_map);
    #line 1637 
    sky2->tx_le = (struct sky2_tx_le *)0;
  }
  #line 1639 
  kfree((void *)sky2->tx_ring);
  #line 1640 
  kfree((void *)sky2->rx_ring);
  #line 1642 
  sky2->tx_ring = (struct tx_ring_info *)0;
  #line 1643 
  sky2->rx_ring = (struct rx_ring_info *)0;
  #line 1644 
  return;
}

#line 1646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_hw_up(struct sky2_port *sky2)
{
  #line 1650 
  u32 ramsize;
  #line 1651 
  int cap;
  #line 1648 
  struct sky2_hw *hw = sky2->hw;
  #line 1649 
  unsigned int port = sky2->port;
  #line 1652 
  struct net_device *otherdev = hw->dev[sky2->port ^ 1U];
  #line 1654 
  tx_init(sky2);
  #line 1660 
  if (otherdev != (struct net_device *)0) {
    #line 1660 
    if ((int)netif_running(otherdev) != 0) {
      #line 1661 
      cap = pci_find_capability(hw->pdev,7);
      #line 1660 
      if (cap != 0) {
        #line 1662 
        u16 cmd;
        #line 1664 
        cmd = sky2_pci_read16(hw,(unsigned int)(cap + 2));
        #line 1665 
        cmd = (unsigned short)((unsigned int)cmd & 65423U);
        #line 1666 
        sky2_pci_write16(hw,(unsigned int)(cap + 2),(unsigned short)((int)cmd));
      }
    }
  }
  #line 1669 
  sky2_mac_init(hw,port);
  #line 1672 
  ramsize = (unsigned int)((int)sky2_read8(hw,284U) * 4);
  #line 1673 
  if (ramsize != 0U) {
    #line 1674 
    u32 rxspace;
    #line 1686 
    unsigned int tmp_2;
    {
      #line 1676 
      bool branch;
      #line 1676 
      struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"sky2", .function = (char *)"sky2_hw_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c", .format = (char *)"ram buffer %dK\n", .lineno = (unsigned int)1676U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1676 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
      #line 1676 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1676 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug547,sky2->netdev,(char *)"ram buffer %dK\n",ramsize);
    }
    #line 1677 
    if (ramsize <= 15U) 
                        #line 1678 
                        rxspace = ramsize / 2U; else 
                                                     #line 1680 
                                                     rxspace = ((ramsize + 4294967280U) * 2U) / 3U + 8U;
    #line 1682 
    sky2_ramset(hw,(unsigned short)((int)((unsigned short)rxqaddr[port])),0U,rxspace);
    #line 1683 
    sky2_ramset(hw,(unsigned short)((int)((unsigned short)txqaddr[port])),rxspace,ramsize - rxspace);
    #line 1686 
    if (port == 0U) 
                    #line 1686 
                    tmp_2 = 2600U; else 
                                        #line 1686 
                                        tmp_2 = 2856U;
    #line 1686 
    ;
    #line 1686 
    sky2_write8(hw,tmp_2,(unsigned char)1);
  }
  #line 1690 
  sky2_qset(hw,(unsigned short)((int)((unsigned short)txqaddr[port])));
  #line 1693 
  if ((unsigned int)hw->chip_id == 181U && (unsigned int)hw->chip_rev == 2U) 
    #line 1694 
    sky2_write32(hw,txqaddr[port] + 1080U,2147483648U);
  #line 1697 
  if ((unsigned int)hw->chip_id == 180U && (unsigned int)hw->chip_rev == 1U) 
    #line 1699 
    sky2_write16(hw,txqaddr[port] + 1090U,(unsigned short)416);
  #line 1701 
  sky2_prefetch_init(hw,txqaddr[port],sky2->tx_le_map,(unsigned int)((int)sky2->tx_ring_size + -1));
  #line 1704 
  sky2_vlan_mode(sky2->netdev,(sky2->netdev)->features);
  #line 1705 
  netdev_update_features(sky2->netdev);
  #line 1707 
  sky2_rx_start(sky2);
  #line 1708 
  return;
}

#line 1711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_setup_irq(struct sky2_hw *hw, char *name)
{
  #line 1714 
  int err;
  #line 1716 
  unsigned long tmp;
  #line 1713 
  struct pci_dev *pdev = hw->pdev;
  #line 1716 
  ;
  #line 1716 
  ;
  #line 1716 
  if ((hw->flags & 1UL) != 0UL) 
                                #line 1716 
                                tmp = 0UL; else 
                                                #line 1716 
                                                tmp = 128UL;
  #line 1716 
  ;
  #line 1716 
  err = cif_request_irq(pdev->irq,& sky2_intr,tmp,name,(void *)hw);
  #line 1719 
  if (err != 0) 
                #line 1720 
                _dev_err(& pdev->dev,(char *)"cannot assign irq %d\n",pdev->irq);
  else {
    #line 1722 
    hw->flags |= 2048UL;
    #line 1724 
    napi_enable(& hw->napi);
    #line 1725 
    sky2_write32(hw,12U,3221225472U);
    #line 1726 
    sky2_read32(hw,12U);
  }
  #line 1729 
  return err;
}

#line 1734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_open(struct net_device *dev)
{
  #line 1739 
  u32 imask;
  #line 1740 
  int err;
  #line 1736 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 1737 
  struct sky2_hw *hw = sky2->hw;
  #line 1738 
  unsigned int port = sky2->port;
  #line 1742 
  netif_carrier_off(dev);
  #line 1744 
  err = sky2_alloc_buffers(sky2);
  #line 1745 
  if (err != 0) 
                #line 1746 
                goto err_out;
  #line 1749 
  if ((unsigned int)hw->ports == 1U) {
    #line 1749 
    err = sky2_setup_irq(hw,(char *)(& dev->name));
    #line 1749 
    if (err != 0) 
                  #line 1750 
                  goto err_out;
  }
  #line 1752 
  sky2_hw_up(sky2);
  #line 1755 
  imask = sky2_read32(hw,12U);
  #line 1757 
  if ((unsigned int)hw->chip_id + 68U <= 2U) 
                                             #line 1760 
                                             imask |= 32U;
  #line 1762 
  imask = portirq_msk[port] | imask;
  #line 1763 
  sky2_write32(hw,12U,imask);
  #line 1764 
  sky2_read32(hw,12U);
  #line 1766 
  if ((sky2->msg_enable & 32U) != 0U) 
                                      #line 1766 
                                      netdev_info(dev,(char *)"enabling interface\n");
  #line 1768 
  return 0;
  #line 1770 
  err_out: 
           #line 1770 
  ;
  #line 1771 
  sky2_free_buffers(sky2);
  #line 1772 
  return err;
}

#line 1776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static int tx_inuse(struct sky2_port *sky2)
{
  #line 1778 
  return ((int)sky2->tx_prod - (int)sky2->tx_cons) & ((int)sky2->tx_ring_size + -1);
}

#line 1782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static int tx_avail(struct sky2_port *sky2)
{
  #line 1784 
  ;
  #line 1784 
  return (int)sky2->tx_pending - tx_inuse(sky2);
}

#line 1788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static unsigned int tx_le_req(struct sk_buff *skb)
{
  #line 1790 
  unsigned int count;
  #line 1792 
  count = (unsigned int)((unsigned long)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1)) * 2U;
  #line 1795 
  if ((int)skb_is_gso(skb) != 0) 
                                 #line 1796 
                                 count ++;
  #line 1800 
  if ((unsigned int)skb->ip_summed == 3U) 
                                          #line 1801 
                                          count ++;
  #line 1803 
  return count;
}

#line 1806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_tx_unmap(struct pci_dev *pdev, struct tx_ring_info *re)
{
  #line 1808 
  if ((re->flags & 1UL) != 0UL) 
                                #line 1809 
                                pci_unmap_single(pdev,re->mapaddr,(unsigned long)re->maplen,1);
  else 
    #line 1812 
    if ((re->flags & 2UL) != 0UL) 
                                  #line 1813 
                                  pci_unmap_page(pdev,re->mapaddr,(unsigned long)re->maplen,1);
  #line 1816 
  re->flags = 0UL;
  #line 1817 
  return;
}

#line 1825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static netdev_tx_t sky2_xmit_frame(struct sk_buff *skb, struct net_device *dev)
{
  #line 1831 
  struct tx_ring_info *re;
  #line 1832 
  unsigned int i;
  #line 1832 
  unsigned int len;
  #line 1833 
  dma_addr_t mapping;
  #line 1834 
  u32 upper;
  #line 1835 
  u16 slot;
  #line 1836 
  u16 mss;
  #line 1837 
  u8 ctrl;
  #line 1828 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 1829 
  struct sky2_hw *hw = sky2->hw;
  #line 1830 
  struct sky2_tx_le *le = (struct sky2_tx_le *)0;
  #line 1839 
  if ((long)((unsigned int)tx_avail(sky2) < tx_le_req(skb)) != 0L) 
                                                                   #line 1840 
                                                                   return NETDEV_TX_BUSY;
  #line 1842 
  len = skb_headlen(skb);
  #line 1843 
  mapping = pci_map_single(hw->pdev,(void *)skb->data,(unsigned long)len,1);
  #line 1845 
  if (pci_dma_mapping_error(hw->pdev,mapping) != 0) 
                                                    #line 1846 
                                                    goto mapping_error;
  #line 1848 
  slot = sky2->tx_prod;
  #line 1849 
  if ((sky2->msg_enable & 256U) != 0U) 
                                       #line 1849 
                                       netdev_printk((char *)"\001",dev,(char *)"tx queued, slot %u, len %d\n",(int)slot,skb->len);
  #line 1853 
  upper = (unsigned int)(mapping >> 32);
  #line 1854 
  if (sky2->tx_last_upper != upper) {
    #line 1855 
    le = get_tx_le(sky2,& slot);
    #line 1856 
    le->addr = upper;
    #line 1857 
    sky2->tx_last_upper = upper;
    #line 1858 
    le->opcode = (unsigned char)161U;
  }
  #line 1862 
  mss = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 1863 
  if ((unsigned int)mss != 0U) {
    #line 1865 
    if ((hw->flags & 32UL) == 0UL) {
      #line 1866 
      mss = (unsigned short)((int)((unsigned short)((ip_hdrlen(skb) + tcp_hdrlen(skb)) + 14U)) + (int)mss);
    }
    #line 1868 
    if ((int)sky2->tx_last_mss != (int)mss) {
      #line 1869 
      le = get_tx_le(sky2,& slot);
      #line 1870 
      le->addr = (unsigned int)mss;
      #line 1872 
      if ((hw->flags & 32UL) != 0UL) 
                                     #line 1873 
                                     le->opcode = (unsigned char)168U; else 
                                                                    #line 1875 
                                                                    le->opcode = (unsigned char)164U;
      #line 1876 
      sky2->tx_last_mss = mss;
    }
  }
  #line 1880 
  ctrl = (unsigned char)0U;
  #line 1883 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 1884 
    if (le == (struct sky2_tx_le *)0) {
      #line 1885 
      le = get_tx_le(sky2,& slot);
      #line 1886 
      le->addr = 0U;
      #line 1887 
      le->opcode = (unsigned char)162U;
    }
    else 
         #line 1889 
         le->opcode = (unsigned char)((unsigned int)le->opcode | 34U);
    #line 1890 
    le->length = __builtin_bswap16((unsigned short)((int)skb->vlan_tci));
    #line 1891 
    ctrl = (unsigned char)((unsigned int)ctrl | 32U);
  }
  #line 1895 
  if ((unsigned int)skb->ip_summed == 3U) 
    #line 1897 
    if ((hw->flags & 64UL) != 0UL) 
                                   #line 1898 
                                   ctrl = (unsigned char)((unsigned int)ctrl | 2U);
    else {
      #line 1901 
      u32 tcpsum;
      #line 1900 
      unsigned int offset = (unsigned int)skb_transport_offset(skb);
      #line 1903 
      tcpsum = offset << 16;
      #line 1904 
      tcpsum = ((unsigned int)skb->__anonCompField_sk_buff_97.__anonCompField___anonunion_538_96.csum_offset + offset) | tcpsum;
      #line 1906 
      ctrl = (unsigned char)((unsigned int)ctrl | 30U);
      #line 1907 
      ;
      #line 1907 
      if ((unsigned int)ip_hdr(skb)->protocol == 17U) 
                                                      #line 1908 
                                                      ctrl = (unsigned char)((unsigned int)ctrl | 1U);
      #line 1910 
      if (sky2->tx_tcpsum != tcpsum) {
        #line 1911 
        sky2->tx_tcpsum = tcpsum;
        #line 1913 
        le = get_tx_le(sky2,& slot);
        #line 1914 
        le->addr = tcpsum;
        #line 1915 
        le->length = (unsigned short)0U;
        #line 1916 
        le->ctrl = (unsigned char)1U;
        #line 1917 
        le->opcode = (unsigned char)159U;
      }
    }
  #line 1922 
  re = sky2->tx_ring + (unsigned long)slot;
  #line 1923 
  re->flags = 1UL;
  #line 1924 
  re->mapaddr = mapping;
  #line 1925 
  re->maplen = len;
  #line 1927 
  le = get_tx_le(sky2,& slot);
  #line 1928 
  le->addr = (unsigned int)mapping;
  #line 1929 
  le->length = (unsigned short)len;
  #line 1930 
  le->ctrl = ctrl;
  #line 1931 
  if ((unsigned int)mss != 0U) 
                               #line 1931 
                               le->opcode = (unsigned char)195U; else 
                                                                   #line 1931 
                                                                   le->opcode = (unsigned char)193U;
  #line 1934 
  i = 0U;
  #line 1934 
  while (1) {
    #line 1934 
    ;
    #line 1934 
    if (! ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 1934 
      break;
    {
      #line 1935 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 1937 
      ;
      #line 1937 
      ;
      #line 1937 
      mapping = skb_frag_dma_map(& (hw->pdev)->dev,frag,0UL,(unsigned long)skb_frag_size(frag),(enum dma_data_direction)DMA_TO_DEVICE);
      #line 1940 
      if (dma_mapping_error(& (hw->pdev)->dev,mapping) != 0) 
                                                             #line 1941 
                                                             goto mapping_unwind;
      #line 1943 
      upper = (unsigned int)(mapping >> 32);
      #line 1944 
      if (sky2->tx_last_upper != upper) {
        #line 1945 
        le = get_tx_le(sky2,& slot);
        #line 1946 
        le->addr = upper;
        #line 1947 
        sky2->tx_last_upper = upper;
        #line 1948 
        le->opcode = (unsigned char)161U;
      }
      #line 1951 
      re = sky2->tx_ring + (unsigned long)slot;
      #line 1952 
      re->flags = 2UL;
      #line 1953 
      re->mapaddr = mapping;
      #line 1954 
      re->maplen = skb_frag_size(frag);
      #line 1956 
      le = get_tx_le(sky2,& slot);
      #line 1957 
      le->addr = (unsigned int)mapping;
      #line 1958 
      le->length = (unsigned short)skb_frag_size(frag);
      #line 1959 
      le->ctrl = ctrl;
      #line 1960 
      le->opcode = (unsigned char)192U;
    }
    #line 1934 
    i ++;
  }
  #line 1963 
  re->skb = skb;
  #line 1964 
  le->ctrl = (unsigned char)((unsigned int)le->ctrl | 128U);
  #line 1966 
  sky2->tx_prod = slot;
  #line 1968 
  if ((unsigned int)tx_avail(sky2) <= 38U) 
                                           #line 1969 
                                           netif_stop_queue(dev);
  #line 1971 
  netdev_sent_queue(dev,skb->len);
  #line 1972 
  sky2_put_idx(hw,txqaddr[sky2->port],(unsigned short)((int)sky2->tx_prod));
  #line 1974 
  return NETDEV_TX_OK;
  #line 1976 
  mapping_unwind: 
                  #line 1976 
  ;
  #line 1977 
  i = (unsigned int)sky2->tx_prod;
  #line 1977 
  while ((unsigned int)slot != i) {
    #line 1978 
    re = sky2->tx_ring + (unsigned long)i;
    #line 1980 
    sky2_tx_unmap(hw->pdev,re);
    #line 1977 
    i = (i + 1U) & (unsigned int)((int)sky2->tx_ring_size + -1);
  }
  #line 1983 
  mapping_error: 
                 #line 1983 
  ;
  #line 1984 
  if (net_ratelimit() != 0) 
                            #line 1985 
                            _dev_warn(& (hw->pdev)->dev,(char *)"%s: tx mapping error\n",(char *)(& dev->name));
  #line 1986 
  dev_kfree_skb_any(skb);
  #line 1987 
  return NETDEV_TX_OK;
}

#line 2000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_tx_complete(struct sky2_port *sky2, u16 done)
{
  #line 2003 
  u16 idx;
  #line 2002 
  struct net_device *dev = sky2->netdev;
  #line 2004 
  unsigned int bytes_compl = 0U;
  #line 2004 
  unsigned int pkts_compl = 0U;
  #line 2006 
  if ((long)((int)sky2->tx_ring_size <= (int)done) != 0L) {
    #line 2007 
    ldv_inline_asm();
    #line 2008 
    ldv_inline_asm();
    #line 2009 
    ldv_inline_asm();
    #line 2006 
    ;
  }
  #line 2008 
  idx = sky2->tx_cons;
  #line 2008 
  while ((int)idx != (int)done) {
    {
      #line 2010 
      struct tx_ring_info *re = sky2->tx_ring + (unsigned long)idx;
      #line 2011 
      struct sk_buff *skb = re->skb;
      #line 2013 
      sky2_tx_unmap((sky2->hw)->pdev,re);
      #line 2015 
      if (skb != (struct sk_buff *)0) {
        #line 2016 
        if ((sky2->msg_enable & 1024U) != 0U) 
                                              #line 2016 
                                              netdev_printk((char *)"\001",dev,(char *)"tx done %u\n",(int)idx);
        #line 2019 
        pkts_compl ++;
        #line 2020 
        bytes_compl = skb->len + bytes_compl;
        #line 2022 
        re->skb = (struct sk_buff *)0;
        #line 2023 
        dev_kfree_skb_any(skb);
        #line 2025 
        sky2->tx_next = (unsigned short)(((unsigned int)idx + 1U) & ((unsigned int)sky2->tx_ring_size + 65535U));
      }
    }
    #line 2008 
    idx = (unsigned short)(((unsigned int)idx + 1U) & ((unsigned int)sky2->tx_ring_size + 65535U));
  }
  #line 2029 
  sky2->tx_cons = idx;
  #line 2030 
  ldv_inline_asm();
  #line 2032 
  netdev_completed_queue(dev,pkts_compl,bytes_compl);
  #line 2034 
  u64_stats_init(& sky2->tx_stats.syncp);
  #line 2035 
  sky2->tx_stats.packets += (unsigned long long)pkts_compl;
  #line 2036 
  sky2->tx_stats.bytes += (unsigned long long)bytes_compl;
  #line 2037 
  u64_stats_init(& sky2->tx_stats.syncp);
  #line 2038 
  return;
}

#line 2040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_tx_reset(struct sky2_hw *hw, unsigned int port)
{
  #line 2043 
  sky2_write8(hw,(port << 7) + 528U,(unsigned char)84);
  #line 2047 
  sky2_write32(hw,(port << 7) + 512U,0U);
  #line 2048 
  sky2_write32(hw,(port << 7) + 520U,0U);
  #line 2051 
  sky2_write32(hw,txqaddr[port] + 1076U,17U);
  #line 2055 
  sky2_write32(hw,txqaddr[port] + 1104U,1U);
  #line 2058 
  sky2_write32(hw,txqaddr[port] + 2088U,1U);
  #line 2059 
  sky2_write8(hw,(port << 7) + 3400U,(unsigned char)1);
  #line 2061 
  sky2_read32(hw,4U);
  #line 2062 
  return;
}

#line 2064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_hw_down(struct sky2_port *sky2)
{
  #line 2068 
  u16 ctrl;
  #line 2066 
  struct sky2_hw *hw = sky2->hw;
  #line 2067 
  unsigned int port = sky2->port;
  #line 2071 
  sky2_write8(hw,(port << 7) + 3840U,(unsigned char)4);
  #line 2074 
  sky2_write32(hw,txqaddr[port] + 1076U,512U);
  #line 2075 
  sky2_read32(hw,txqaddr[port] + 1076U);
  #line 2077 
  sky2_write32(hw,txqaddr[port] + 2088U,5U);
  #line 2080 
  ctrl = gma_read16(hw,port,4U);
  #line 2081 
  ctrl = (unsigned short)((unsigned int)ctrl & 59391U);
  #line 2082 
  gma_write16(hw,port,4,(unsigned short)((int)ctrl));
  #line 2084 
  sky2_write8(hw,(port << 7) + 3844U,(unsigned char)1);
  #line 2087 
  if ((((unsigned int)hw->chip_id != 179U || (unsigned int)hw->chip_rev != 0U) || port != 0U) || hw->dev[1] == (struct net_device *)0) 
    #line 2089 
    sky2_write8(hw,(port << 7) + 3840U,(unsigned char)1);
  else {
    #line 2088 
    if (! netif_running(hw->dev[1])) 
                                     #line 2089 
                                     sky2_write8(hw,(port << 7) + 3840U,(unsigned char)1);
  }
  #line 2091 
  sky2_write8(hw,(port << 7) + 3144U,(unsigned char)1);
  #line 2094 
  sky2_write32(hw,3764U,0U);
  #line 2095 
  sky2_write32(hw,3780U,0U);
  #line 2096 
  sky2_write32(hw,3796U,0U);
  #line 2097 
  sky2_read8(hw,3800U);
  #line 2099 
  sky2_rx_stop(sky2);
  #line 2101 
  cif_spin_lock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
  #line 2102 
  sky2_phy_power_down(hw,port);
  #line 2103 
  cif_spin_unlock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
  #line 2105 
  sky2_tx_reset(hw,port);
  #line 2108 
  sky2_tx_complete(sky2,(unsigned short)((int)sky2->tx_prod));
  #line 2109 
  return;
}

#line 2112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_close(struct net_device *dev)
{
  #line 2114 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 2115 
  struct sky2_hw *hw = sky2->hw;
  #line 2118 
  if (sky2->tx_le == (struct sky2_tx_le *)0) 
                                             #line 2119 
                                             return 0;
  #line 2121 
  if ((sky2->msg_enable & 16U) != 0U) 
                                      #line 2121 
                                      netdev_info(dev,(char *)"disabling interface\n");
  #line 2123 
  if ((unsigned int)hw->ports == 1U) {
    #line 2124 
    sky2_write32(hw,12U,0U);
    #line 2125 
    sky2_read32(hw,12U);
    #line 2127 
    napi_disable(& hw->napi);
    #line 2128 
    cif_free_irq((hw->pdev)->irq,(void *)hw);
    #line 2129 
    hw->flags &= 18446744073709549567UL;
  }
  else {
    #line 2131 
    u32 imask;
    #line 2134 
    imask = sky2_read32(hw,12U);
    #line 2135 
    imask = ~ portirq_msk[sky2->port] & imask;
    #line 2136 
    sky2_write32(hw,12U,imask);
    #line 2137 
    sky2_read32(hw,12U);
    #line 2139 
    synchronize_irq((hw->pdev)->irq);
    #line 2140 
    napi_synchronize(& hw->napi);
  }
  #line 2143 
  sky2_hw_down(sky2);
  #line 2145 
  sky2_free_buffers(sky2);
  #line 2147 
  return 0;
}

#line 2150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static u16 sky2_phy_speed(struct sky2_hw *hw, u16 aux)
{
  #line 2152 
  if ((hw->flags & 2UL) != 0UL) 
                                #line 2153 
                                return (unsigned short)1000U;
  #line 2155 
  if ((hw->flags & 4UL) == 0UL) 
    #line 2156 
    if (((int)aux & 16384) != 0) 
                                 #line 2157 
                                 return (unsigned short)100U; else 
                                                                   #line 2159 
                                                                   return (unsigned short)10U;
  #line 2162 
  switch ((int)aux & 49152) {
    #line 2163 
    case 32768: 
                #line 2163 
    ;
    #line 2164 
    return (unsigned short)1000U;
    #line 2165 
    case 16384: 
                #line 2165 
    ;
    #line 2166 
    return (unsigned short)100U;
    #line 2167 
    default: 
             #line 2167 
    ;
    #line 2168 
    return (unsigned short)10U;
  }
}

#line 2172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_link_up(struct sky2_port *sky2)
{
  #line 2174 
  struct sky2_hw *hw = sky2->hw;
  #line 2175 
  unsigned int port = sky2->port;
  #line 2176 
  char *fc_name[4U] = {(char *)"none", (char *)"tx", (char *)"rx", (char *)"both"};
  #line 2183 
  sky2_set_ipg(sky2);
  #line 2185 
  sky2_enable_rx_tx(sky2);
  #line 2187 
  gm_phy_write(hw,port,(unsigned short)18,(unsigned short)25600);
  #line 2189 
  netif_carrier_on(sky2->netdev);
  #line 2191 
  cif_mod_timer(& hw->watchdog_timer,jiffies + 1UL);
  #line 2194 
  sky2_write8(hw,(port << 7) + 3132U,(unsigned char)22);
  #line 2197 
  if ((sky2->msg_enable & 4U) != 0U) {
    #line 2197 
    char *tmp;
    #line 2197 
    ;
    #line 2197 
    if ((unsigned int)sky2->duplex == 1U) 
                                          #line 2197 
                                          tmp = (char *)"full"; else 
                                                                  #line 2197 
                                                                  tmp = (char *)"half";
    #line 2197 
    ;
    #line 2197 
    ;
    #line 2197 
    netdev_info(sky2->netdev,(char *)"Link is up at %d Mbps, %s duplex, flow control %s\n",(int)sky2->speed,tmp,fc_name[(unsigned int)sky2->flow_status]);
  }
  #line 2198 
  return;
}

#line 2204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_link_down(struct sky2_port *sky2)
{
  #line 2208 
  u16 reg;
  #line 2206 
  struct sky2_hw *hw = sky2->hw;
  #line 2207 
  unsigned int port = sky2->port;
  #line 2210 
  gm_phy_write(hw,port,(unsigned short)18,(unsigned short)0);
  #line 2212 
  reg = gma_read16(hw,port,4U);
  #line 2213 
  reg = (unsigned short)((unsigned int)reg & 59391U);
  #line 2214 
  gma_write16(hw,port,4,(unsigned short)((int)reg));
  #line 2216 
  netif_carrier_off(sky2->netdev);
  #line 2219 
  sky2_write8(hw,(port << 7) + 3132U,(unsigned char)1);
  #line 2221 
  if ((sky2->msg_enable & 4U) != 0U) 
                                     #line 2221 
                                     netdev_info(sky2->netdev,(char *)"Link is down\n");
  #line 2223 
  sky2_phy_init(hw,port);
  #line 2224 
  return;
}

#line 2226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static enum flow_control sky2_flow(int rx, int tx)
{
  #line 2228 
  if (rx != 0) {
    #line 2229 
    int tmp;
    #line 2229 
    if (tx != 0) 
                 #line 2229 
                 tmp = FC_BOTH; else 
                                     #line 2229 
                                     tmp = FC_RX;
    #line 2229 
    return (enum flow_control)tmp;
  }
  else 
       #line 2231 
       return (enum flow_control)(tx != 0);
}

#line 2234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_autoneg_done(struct sky2_port *sky2, u16 aux)
{
  #line 2238 
  u16 advert;
  #line 2238 
  u16 lpa;
  #line 2236 
  struct sky2_hw *hw = sky2->hw;
  #line 2237 
  unsigned int port = sky2->port;
  #line 2240 
  advert = gm_phy_read(hw,port,(unsigned short)4);
  #line 2241 
  lpa = gm_phy_read(hw,port,(unsigned short)5);
  #line 2242 
  if (((int)lpa & 8192) != 0) {
    #line 2243 
    netdev_err(sky2->netdev,(char *)"remote fault\n");
    #line 2244 
    return -1;
  }
  #line 2247 
  if (((int)aux & 2048) == 0) {
    #line 2248 
    netdev_err(sky2->netdev,(char *)"speed/duplex mismatch\n");
    #line 2249 
    return -1;
  }
  #line 2252 
  sky2->speed = sky2_phy_speed(hw,(unsigned short)((int)aux));
  #line 2253 
  sky2->duplex = (unsigned char)((unsigned int)((unsigned char)((int)aux >> 13)) & 1U);
  #line 2258 
  if ((hw->flags & 2UL) != 0UL) {
    #line 2260 
    advert = (unsigned short)((unsigned int)advert & 62463U);
    #line 2261 
    lpa = (unsigned short)((unsigned int)lpa & 62463U);
    #line 2263 
    if (((int)advert & 128) != 0) 
                                  #line 2264 
                                  advert = (unsigned short)((unsigned int)advert | 1024U);
    #line 2265 
    if (((int)advert & 256) != 0) 
                                  #line 2266 
                                  advert = (unsigned short)((unsigned int)advert | 2048U);
    #line 2267 
    if (((int)lpa & 128) != 0) 
                               #line 2268 
                               lpa = (unsigned short)((unsigned int)lpa | 1024U);
    #line 2269 
    if (((int)lpa & 256) != 0) 
                               #line 2270 
                               lpa = (unsigned short)((unsigned int)lpa | 2048U);
  }
  #line 2273 
  sky2->flow_status = FC_NONE;
  #line 2274 
  if (((int)advert & 1024) != 0) {
    #line 2275 
    if (((int)lpa & 1024) != 0) 
                                #line 2276 
                                sky2->flow_status = FC_BOTH;
    else 
      #line 2277 
      if (((int)advert & 2048) != 0) 
                                     #line 2278 
                                     sky2->flow_status = FC_RX;
  }
  else 
    #line 2279 
    if (((int)advert & 2048) != 0) 
      #line 2280 
      if (((int)lpa & 1024) != 0 && ((int)lpa & 2048) != 0) 
                                                            #line 2281 
                                                            sky2->flow_status = FC_TX;
  #line 2284 
  if (((unsigned int)sky2->duplex == 0U && (unsigned int)sky2->speed <= 999U) && (unsigned int)hw->chip_id + 76U > 1U) 
    #line 2286 
    sky2->flow_status = FC_NONE;
  #line 2288 
  if (((unsigned int)sky2->flow_status & 1U) != 0U) 
                                                    #line 2289 
                                                    sky2_write8(hw,(port << 7) + 3840U,(unsigned char)8); else 
                                                                    #line 2291 
                                                                    sky2_write8(hw,(port << 7) + 3840U,(unsigned char)4);
  #line 2293 
  return 0;
}

#line 2297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_phy_intr(struct sky2_hw *hw, unsigned int port)
{
  #line 2301 
  u16 istatus;
  #line 2301 
  u16 phystat;
  #line 2299 
  struct net_device *dev = hw->dev[port];
  #line 2300 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 2303 
  if (! netif_running(dev)) 
                            #line 2304 
                            return;
  #line 2306 
  cif_spin_lock_phy_lock_of_sky2_port(& sky2->phy_lock);
  #line 2307 
  istatus = gm_phy_read(hw,port,(unsigned short)19);
  #line 2308 
  phystat = gm_phy_read(hw,port,(unsigned short)17);
  #line 2310 
  if ((sky2->msg_enable & 512U) != 0U) 
                                       #line 2310 
                                       netdev_info(sky2->netdev,(char *)"phy interrupt status 0x%x 0x%x\n",(int)istatus,(int)phystat);
  #line 2313 
  if (((int)istatus & 2048) != 0) {
    #line 2314 
    if (sky2_autoneg_done(sky2,(unsigned short)((int)phystat)) == 0) {
      #line 2315 
      if (! netif_carrier_ok(dev)) 
                                   #line 2316 
                                   sky2_link_up(sky2);
    }
    #line 2317 
    goto out;
  }
  #line 2320 
  if (((int)istatus & 16384) != 0) 
                                   #line 2321 
                                   sky2->speed = sky2_phy_speed(hw,(unsigned short)((int)phystat));
  #line 2323 
  if (((int)istatus & 8192) != 0) 
                                  #line 2324 
                                  sky2->duplex = (unsigned char)((unsigned int)((unsigned char)((int)phystat >> 13)) & 1U);
  #line 2327 
  if (((int)istatus & 1024) != 0) 
    #line 2328 
    if (((int)phystat & 1024) != 0) 
                                    #line 2329 
                                    sky2_link_up(sky2); else 
                                                             #line 2331 
                                                             sky2_link_down(sky2);
  #line 2333 
  out: 
       #line 2333 
  ;
  #line 2334 
  cif_spin_unlock_phy_lock_of_sky2_port(& sky2->phy_lock);
  #line 2335 
  return;
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_qlink_intr(struct sky2_hw *hw)
{
  #line 2341 
  u32 imask;
  #line 2342 
  u16 phy;
  #line 2340 
  struct sky2_port *sky2 = netdev_priv(hw->dev[0]);
  #line 2345 
  imask = sky2_read32(hw,12U);
  #line 2346 
  imask &= 4294967263U;
  #line 2347 
  sky2_write32(hw,12U,imask);
  #line 2350 
  phy = sky2_pci_read16(hw,360U);
  #line 2351 
  sky2_write8(hw,344U,(unsigned char)2);
  #line 2352 
  sky2_pci_write16(hw,360U,(unsigned short)((int)((unsigned int)phy | 1U)));
  #line 2353 
  sky2_write8(hw,344U,(unsigned char)1);
  #line 2355 
  sky2_link_up(sky2);
  #line 2356 
  return;
}

#line 2361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_tx_timeout(struct net_device *dev)
{
  #line 2371 
  u16 tmp_0;
  #line 2370 
  unsigned int tmp_1;
  #line 2363 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 2364 
  struct sky2_hw *hw = sky2->hw;
  #line 2366 
  if ((sky2->msg_enable & 8U) != 0U) 
                                     #line 2366 
                                     netdev_err(dev,(char *)"tx timeout\n");
  #line 2371 
  tmp_0 = sky2_read16(hw,txqaddr[sky2->port] + 1060U);
  #line 2370 
  if (sky2->port == 0U) 
                        #line 2370 
                        tmp_1 = 3728U; else 
                                            #line 2370 
                                            tmp_1 = 3732U;
  #line 2370 
  ;
  #line 2368 
  ;
  #line 2368 
  ;
  #line 2368 
  ;
  #line 2368 
  netdev_printk((char *)"\001",dev,(char *)"transmit ring %u .. %u report=%u done=%u\n",(int)sky2->tx_cons,(int)sky2->tx_prod,(int)sky2_read16(hw,tmp_1),(int)tmp_0);
  #line 2374 
  cif_schedule_work(& hw->restart_work);
  #line 2375 
  return;
}

#line 2377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 2382 
  int err;
  #line 2383 
  u16 ctl;
  #line 2383 
  u16 mode;
  #line 2384 
  u32 imask;
  #line 2379 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 2380 
  struct sky2_hw *hw = sky2->hw;
  #line 2381 
  unsigned int port = sky2->port;
  #line 2386 
  if (! netif_running(dev)) {
    #line 2387 
    dev->mtu = (unsigned int)new_mtu;
    #line 2388 
    netdev_update_features(dev);
    #line 2389 
    return 0;
  }
  #line 2392 
  imask = sky2_read32(hw,12U);
  #line 2393 
  sky2_write32(hw,12U,0U);
  #line 2394 
  sky2_read32(hw,12U);
  #line 2396 
  netif_trans_update(dev);
  #line 2397 
  napi_disable(& hw->napi);
  #line 2398 
  netif_tx_disable(dev);
  #line 2400 
  synchronize_irq((hw->pdev)->irq);
  #line 2402 
  if ((hw->flags & 16UL) == 0UL) 
                                 #line 2403 
                                 sky2_set_tx_stfwd(hw,port);
  #line 2405 
  ctl = gma_read16(hw,port,4U);
  #line 2406 
  gma_write16(hw,port,4,(unsigned short)((int)ctl & 63487));
  #line 2407 
  sky2_rx_stop(sky2);
  #line 2408 
  sky2_rx_clean(sky2);
  #line 2410 
  dev->mtu = (unsigned int)new_mtu;
  #line 2411 
  netdev_update_features(dev);
  #line 2413 
  mode = (unsigned short)8704U;
  #line 2414 
  if ((unsigned int)sky2->speed > 100U) 
                                        #line 2415 
                                        mode = (unsigned short)((unsigned int)mode | 30U); else 
                                                                    #line 2417 
                                                                    mode = (unsigned short)((unsigned int)mode | 24U);
  #line 2419 
  if (dev->mtu > 1500U) 
                        #line 2420 
                        mode = (unsigned short)((unsigned int)mode | 256U);
  #line 2422 
  gma_write16(hw,port,24,(unsigned short)((int)mode));
  #line 2424 
  sky2_write8(hw,rxqaddr[port] + 2088U,(unsigned char)8);
  #line 2426 
  err = sky2_alloc_rx_skbs(sky2);
  #line 2427 
  if (err == 0) 
                #line 2428 
                sky2_rx_start(sky2); else 
                                          #line 2430 
                                          sky2_rx_clean(sky2);
  #line 2431 
  sky2_write32(hw,12U,imask);
  #line 2433 
  sky2_read32(hw,40U);
  #line 2434 
  napi_enable(& hw->napi);
  #line 2436 
  if (err != 0) 
                #line 2437 
                dev_close(dev);
  else {
    #line 2439 
    gma_write16(hw,port,4,(unsigned short)((int)ctl));
    #line 2441 
    netif_wake_queue(dev);
  }
  #line 2444 
  return err;
}

#line 2447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static bool needs_copy(struct rx_ring_info *re, unsigned int length)
{
  #line 2455 
  return (_Bool)(length < (unsigned int)copybreak);
}

#line 2459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct sk_buff *receive_copy(struct sky2_port *sky2, struct rx_ring_info *re, unsigned int length)
{
  #line 2463 
  struct sk_buff *skb;
  #line 2465 
  skb = netdev_alloc_skb_ip_align(sky2->netdev,length);
  #line 2466 
  if ((long)(skb != (struct sk_buff *)0) != 0L) {
    #line 2467 
    pci_dma_sync_single_for_cpu((sky2->hw)->pdev,re->data_addr,(unsigned long)length,2);
    #line 2469 
    skb_copy_from_linear_data(re->skb,(void *)skb->data,length);
    #line 2470 
    skb->ip_summed = (re->skb)->ip_summed;
    #line 2471 
    skb->__anonCompField_sk_buff_97.csum = (re->skb)->__anonCompField_sk_buff_97.csum;
    #line 2472 
    skb_copy_hash(skb,re->skb);
    #line 2473 
    __vlan_hwaccel_copy_tag(skb,re->skb);
    #line 2475 
    pci_dma_sync_single_for_device((sky2->hw)->pdev,re->data_addr,(unsigned long)length,2);
    #line 2477 
    __vlan_hwaccel_clear_tag(re->skb);
    #line 2478 
    skb_clear_hash(re->skb);
    #line 2479 
    (re->skb)->ip_summed = (unsigned char)0U;
    #line 2480 
    skb_put(skb,length);
  }
  #line 2482 
  return skb;
}

#line 2486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void skb_put_frags(struct sk_buff *skb, unsigned int hdr_space, unsigned int length)
{
  #line 2493 
  unsigned int __UNIQUE_ID___x549;
  #line 2493 
  unsigned int tmp;
  #line 2489 
  int i;
  #line 2489 
  int num_frags;
  #line 2490 
  unsigned int size;
  {
    #line 2493 
    __UNIQUE_ID___x549 = length;
    #line 2493 
    unsigned int __UNIQUE_ID___y550 = hdr_space;
    #line 2493 
    if (__UNIQUE_ID___x549 < __UNIQUE_ID___y550) 
                                                 #line 2493 
                                                 tmp = __UNIQUE_ID___x549; else 
                                                                    #line 2493 
                                                                    tmp = __UNIQUE_ID___y550;
    }
  #line 2493 
  size = tmp;
  #line 2494 
  skb->tail += size;
  #line 2495 
  skb->len += size;
  #line 2496 
  length -= size;
  #line 2498 
  num_frags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 2499 
  i = 0;
  #line 2499 
  while (i < num_frags) {
    {
      #line 2500 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 2502 
      if (length == 0U) {
        #line 2504 
        __skb_frag_unref(frag);
        #line 2505 
        ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (__u8)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags - 1);
      }
      else {
        #line 2507 
        unsigned int __UNIQUE_ID___x551;
        #line 2507 
        unsigned int tmp_4;
        {
          #line 2507 
          __UNIQUE_ID___x551 = length;
          #line 2507 
          unsigned int __UNIQUE_ID___y552 = 4096U;
          #line 2507 
          if (__UNIQUE_ID___x551 < __UNIQUE_ID___y552) 
                                                       #line 2507 
                                                       tmp_4 = __UNIQUE_ID___x551; else 
                                                                    #line 2507 
                                                                    tmp_4 = __UNIQUE_ID___y552;
          }
        #line 2507 
        size = tmp_4;
        #line 2509 
        skb_frag_size_set(frag,size);
        #line 2510 
        skb->data_len += size;
        #line 2511 
        skb->truesize += 4096U;
        #line 2512 
        skb->len += size;
        #line 2513 
        length -= size;
      }
    }
    #line 2499 
    i ++;
  }
  #line 2516 
  return;
}

#line 2519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct sk_buff *receive_new(struct sky2_port *sky2, struct rx_ring_info *re, unsigned int length)
{
  #line 2523 
  struct sk_buff *skb;
  #line 2524 
  struct rx_ring_info nre;
  #line 2525 
  unsigned int hdr_space = (unsigned int)sky2->rx_data_size;
  #line 2527 
  nre.skb = sky2_rx_alloc(sky2,2592U);
  #line 2528 
  if ((long)(nre.skb == (struct sk_buff *)0) != 0L) 
                                                    #line 2529 
                                                    goto nobuf;
  #line 2531 
  if (sky2_rx_map_skb((sky2->hw)->pdev,& nre,hdr_space) != 0) 
                                                              #line 2532 
                                                              goto nomap;
  #line 2534 
  skb = re->skb;
  #line 2535 
  sky2_rx_unmap_skb((sky2->hw)->pdev,re);
  #line 2536 
  __builtin_prefetch((void const *)((void *)skb->data));
  #line 2537 
  *re = nre;
  #line 2539 
  ;
  #line 2539 
  if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags != 0U) 
    #line 2540 
    skb_put_frags(skb,hdr_space,length); else 
                                              #line 2542 
                                              skb_put(skb,length);
  #line 2543 
  return skb;
  #line 2545 
  nomap: 
         #line 2545 
  ;
  #line 2546 
  consume_skb(nre.skb);
  #line 2547 
  nobuf: 
         #line 2547 
  ;
  #line 2548 
  return (struct sk_buff *)0;
}

#line 2555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct sk_buff *sky2_receive(struct net_device *dev, u16 length, u32 status)
{
  #line 2558 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 2559 
  struct rx_ring_info *re = sky2->rx_ring + (unsigned long)sky2->rx_next;
  #line 2560 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 2561 
  u16 count = (unsigned short)((unsigned int)((unsigned short)(status >> 16)) & 32767U);
  #line 2563 
  if ((sky2->msg_enable & 2048U) != 0U) 
                                        #line 2563 
                                        netdev_printk((char *)"\001",dev,(char *)"rx slot %u status 0x%x len %d\n",(int)sky2->rx_next,status,(int)length);
  #line 2567 
  sky2->rx_next = (unsigned short)(((int)sky2->rx_next + 1) % (int)sky2->rx_pending);
  #line 2568 
  __builtin_prefetch((void const *)((void *)(sky2->rx_ring + (unsigned long)sky2->rx_next)));
  #line 2570 
  if ((unsigned int)(re->skb)->vlan_present != 0U) 
                                                   #line 2571 
                                                   count = (unsigned short)((unsigned int)count + 65532U);
  #line 2577 
  if (((unsigned int)(sky2->hw)->chip_id == 184U && (unsigned int)(sky2->hw)->chip_rev == 0U) && (int)length != (int)count) 
    #line 2580 
    goto okay;
  #line 2582 
  if ((status & 6267U) != 0U) 
                              #line 2583 
                              goto error;
  #line 2585 
  if ((status & 256U) == 0U) 
                             #line 2586 
                             goto resubmit;
  #line 2589 
  if ((int)length != (int)count) 
                                 #line 2590 
                                 goto error;
  #line 2592 
  okay: 
        #line 2592 
  ;
  #line 2593 
  if ((int)needs_copy(re,(unsigned int)length) != 0) 
                                                     #line 2594 
                                                     skb = receive_copy(sky2,re,(unsigned int)length); else 
                                                                    #line 2596 
                                                                    skb = receive_new(sky2,re,(unsigned int)length);
  #line 2598 
  dev->stats.rx_dropped += (unsigned long)(skb == (struct sk_buff *)0);
  #line 2600 
  resubmit: 
            #line 2600 
  ;
  #line 2601 
  sky2_rx_submit(sky2,re);
  #line 2603 
  return skb;
  #line 2605 
  error: 
         #line 2605 
  ;
  #line 2606 
  (dev->stats.rx_errors) ++;
  #line 2608 
  if (net_ratelimit() != 0) 
    #line 2609 
    if ((sky2->msg_enable & 64U) != 0U) 
                                        #line 2609 
                                        netdev_info(dev,(char *)"rx error, status 0x%x length %d\n",status,(int)length);
  #line 2612 
  goto resubmit;
}

#line 2616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static void sky2_tx_done(struct net_device *dev, u16 last)
{
  #line 2618 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 2620 
  if ((int)netif_running(dev) != 0) {
    #line 2621 
    sky2_tx_complete(sky2,(unsigned short)((int)last));
    #line 2624 
    if ((unsigned int)tx_avail(sky2) > 42U) 
                                            #line 2625 
                                            netif_wake_queue(dev);
  }
  #line 2627 
  return;
}

#line 2629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static void sky2_skb_rx(struct sky2_port *sky2, struct sk_buff *skb)
{
  #line 2632 
  if ((unsigned int)skb->ip_summed == 0U) 
                                          #line 2633 
                                          netif_receive_skb(skb); else 
                                                                    #line 2635 
                                                                    napi_gro_receive(& (sky2->hw)->napi,skb);
  #line 2636 
  return;
}

#line 2638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static void sky2_rx_done(struct sky2_hw *hw, unsigned int port, unsigned int packets, unsigned int bytes)
{
  #line 2641 
  struct net_device *dev = hw->dev[port];
  #line 2642 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 2644 
  if (packets == 0U) 
                     #line 2645 
                     return;
  #line 2647 
  u64_stats_init(& sky2->rx_stats.syncp);
  #line 2648 
  sky2->rx_stats.packets += (unsigned long long)packets;
  #line 2649 
  sky2->rx_stats.bytes += (unsigned long long)bytes;
  #line 2650 
  u64_stats_init(& sky2->rx_stats.syncp);
  #line 2652 
  sky2->last_rx = jiffies;
  #line 2653 
  ;
  #line 2653 
  sky2_rx_update((struct sky2_port *)netdev_priv(dev),rxqaddr[port]);
  #line 2654 
  return;
}

#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_rx_checksum(struct sky2_port *sky2, u32 status)
{
  #line 2659 
  if ((long)(((sky2->hw)->flags & 32UL) != 0UL) != 0L) {
    #line 2660 
    ldv_inline_asm();
    #line 2661 
    ldv_inline_asm();
    #line 2662 
    ldv_inline_asm();
    #line 2659 
    ;
  }
  #line 2666 
  if ((long)((int)((unsigned short)(status >> 16)) == (int)((unsigned short)status)) != 0L) {
    #line 2667 
    struct sk_buff *skb = (sky2->rx_ring + (unsigned long)sky2->rx_next)->skb;
    #line 2668 
    skb->ip_summed = (unsigned char)2U;
    #line 2669 
    skb->__anonCompField_sk_buff_97.csum = (unsigned int)((unsigned short)status);
  }
  else {
    #line 2671 
    _dev_notice(& ((sky2->hw)->pdev)->dev,(char *)"%s: receive checksum problem (status = %#x)\n",(char *)(& (sky2->netdev)->name),status);
    #line 2679 
    (sky2->netdev)->features &= 18446743523953737727ULL;
    #line 2680 
    sky2_write32(sky2->hw,rxqaddr[sky2->port] + 1076U,4096U);
  }
  #line 2682 
  return;
}

#line 2685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_rx_tag(struct sky2_port *sky2, u16 length)
{
  #line 2687 
  struct sk_buff *skb;
  #line 2689 
  skb = (sky2->rx_ring + (unsigned long)sky2->rx_next)->skb;
  #line 2690 
  ;
  #line 2690 
  __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)length))));
  #line 2691 
  return;
}

#line 2693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_rx_hash(struct sky2_port *sky2, u32 status)
{
  #line 2695 
  struct sk_buff *skb;
  #line 2697 
  skb = (sky2->rx_ring + (unsigned long)sky2->rx_next)->skb;
  #line 2698 
  skb_set_hash(skb,status,(enum pkt_hash_types)PKT_HASH_TYPE_L3);
  #line 2699 
  return;
}

#line 2702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_status_intr(struct sky2_hw *hw, int to_do, u16 idx)
{
  #line 2704 
  int work_done = 0;
  #line 2705 
  unsigned int total_bytes[2U] = {0U};
  #line 2706 
  unsigned int total_packets[2U] = {0U};
  #line 2708 
  if (to_do <= 0) 
                  #line 2709 
                  return work_done;
  #line 2710 
  ldv_inline_asm();
  #line 2712 
  while (1) {
    {
      #line 2713 
      struct sky2_port *sky2;
      #line 2715 
      unsigned int port;
      #line 2716 
      struct net_device *dev;
      #line 2717 
      struct sk_buff *skb;
      #line 2718 
      u32 status;
      #line 2719 
      u16 length;
      #line 2714 
      struct sky2_status_le *le = hw->st_le + (unsigned long)hw->st_idx;
      #line 2720 
      u8 opcode = le->opcode;
      #line 2722 
      if (((int)opcode & 128) == 0) 
                                    #line 2723 
                                    break;
      #line 2725 
      hw->st_idx = (hw->st_idx + 1U) & (hw->st_size + 4294967295U);
      #line 2727 
      port = (unsigned int)le->css & 1U;
      #line 2728 
      dev = hw->dev[port];
      #line 2729 
      sky2 = (struct sky2_port *)netdev_priv(dev);
      #line 2730 
      length = le->length;
      #line 2731 
      status = le->status;
      #line 2733 
      le->opcode = (unsigned char)0U;
      #line 2734 
      switch ((int)opcode & -129) {
        #line 2735 
        case 96: 
                 #line 2735 
        ;
        #line 2736 
        (total_packets[port]) ++;
        #line 2737 
        total_bytes[port] += (unsigned int)length;
        #line 2739 
        skb = sky2_receive(dev,(unsigned short)((int)length),status);
        #line 2740 
        if (skb == (struct sk_buff *)0) 
                                        #line 2741 
                                        break;
        #line 2744 
        if ((hw->flags & 32UL) != 0UL) 
          #line 2745 
          if (((dev->features & 549755813888ULL) != 0ULL && ((int)le->css & 10) != 0) && ((int)le->css & 128) != 0) 
            #line 2748 
            skb->ip_summed = (unsigned char)1U; else 
                                                     #line 2750 
                                                     skb->ip_summed = (unsigned char)0U;
        #line 2753 
        skb->protocol = eth_type_trans(skb,dev);
        #line 2754 
        sky2_skb_rx(sky2,skb);
        #line 2757 
        work_done ++;
        #line 2757 
        ;
        #line 2757 
        if (work_done >= to_do) 
                                #line 2758 
                                goto exit_loop;
        #line 2759 
        break;
        #line 2761 
        case 98: 
                 #line 2761 
        ;
        #line 2762 
        sky2_rx_tag(sky2,(unsigned short)((int)length));
        #line 2763 
        break;
        #line 2765 
        case 102: 
                  #line 2765 
        ;
        #line 2766 
        sky2_rx_tag(sky2,(unsigned short)((int)length));
        #line 2768 
        case 100: 
                  #line 2768 
        ;
        #line 2769 
        if ((long)((dev->features & 549755813888ULL) != 0ULL) != 0L) 
          #line 2770 
          sky2_rx_checksum(sky2,status);
        #line 2771 
        break;
        #line 2773 
        case 101: 
                  #line 2773 
        ;
        #line 2774 
        sky2_rx_hash(sky2,status);
        #line 2775 
        break;
        #line 2777 
        case 104: 
                  #line 2777 
        ;
        #line 2779 
        sky2_tx_done(hw->dev[0],(unsigned short)((int)((unsigned short)status) & 4095));
        #line 2780 
        if (hw->dev[1] != (struct net_device *)0) 
                                                  #line 2781 
                                                  sky2_tx_done(hw->dev[1],(unsigned short)((int)((unsigned int)((unsigned short)(status >> 24)) | ((unsigned int)((int)length << 8U) & 3840U))));
        #line 2784 
        break;
        #line 2786 
        default: 
                 #line 2786 
        ;
        #line 2787 
        if (net_ratelimit() != 0) 
                                  #line 2788 
                                  printk((char *)"\001",(int)opcode);
      }
    }
    #line 2790 
    if (! (hw->st_idx != (unsigned int)idx)) 
                                             #line 2712 
                                             break;
  }
  #line 2793 
  sky2_write32(hw,3712U,16U);
  #line 2795 
  exit_loop: 
             #line 2795 
  ;
  #line 2796 
  sky2_rx_done(hw,0U,total_packets[0],total_bytes[0]);
  #line 2797 
  sky2_rx_done(hw,1U,total_packets[1],total_bytes[1]);
  #line 2799 
  return work_done;
}

#line 2802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_hw_error(struct sky2_hw *hw, unsigned int port, u32 status)
{
  #line 2804 
  struct net_device *dev = hw->dev[port];
  #line 2806 
  if (net_ratelimit() != 0) 
                            #line 2807 
                            netdev_info(dev,(char *)"hw error interrupt status 0x%x\n",status);
  #line 2809 
  if ((status & 32U) != 0U) {
    #line 2810 
    if (net_ratelimit() != 0) 
                              #line 2811 
                              netdev_err(dev,(char *)"ram data read parity error\n");
    #line 2813 
    sky2_write16(hw,(port << 6) | 416U,(unsigned short)512);
  }
  #line 2816 
  if ((status & 16U) != 0U) {
    #line 2817 
    if (net_ratelimit() != 0) 
                              #line 2818 
                              netdev_err(dev,(char *)"ram data write parity error\n");
    #line 2820 
    sky2_write16(hw,(port << 6) | 416U,(unsigned short)256);
  }
  #line 2823 
  if ((status & 8U) != 0U) {
    #line 2824 
    if (net_ratelimit() != 0) 
                              #line 2825 
                              netdev_err(dev,(char *)"MAC parity error\n");
    #line 2826 
    sky2_write8(hw,(port << 7) + 3400U,(unsigned char)16);
  }
  #line 2829 
  if ((status & 4U) != 0U) {
    #line 2830 
    if (net_ratelimit() != 0) 
                              #line 2831 
                              netdev_err(dev,(char *)"RX parity error\n");
    #line 2832 
    sky2_write32(hw,rxqaddr[port] + 1076U,2048U);
  }
  #line 2835 
  if ((status & 1U) != 0U) {
    #line 2836 
    if (net_ratelimit() != 0) 
                              #line 2837 
                              netdev_err(dev,(char *)"TCP segmentation error\n");
    #line 2838 
    sky2_write32(hw,txqaddr[port] + 1076U,2048U);
  }
  #line 2840 
  return;
}

#line 2842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_hw_intr(struct sky2_hw *hw)
{
  #line 2844 
  struct pci_dev *pdev = hw->pdev;
  #line 2845 
  u32 status = sky2_read32(hw,16U);
  #line 2846 
  u32 hwmsk = sky2_read32(hw,20U);
  #line 2848 
  status &= hwmsk;
  #line 2850 
  if ((status & 536870912U) != 0U) 
                                   #line 2851 
                                   sky2_write8(hw,3608U,(unsigned char)1);
  #line 2853 
  if ((status & 201326592U) != 0U) {
    #line 2854 
    u16 pci_err;
    #line 2856 
    sky2_write8(hw,344U,(unsigned char)2);
    #line 2857 
    pci_err = sky2_pci_read16(hw,6U);
    #line 2858 
    if (net_ratelimit() != 0) 
                              #line 2859 
                              _dev_err(& pdev->dev,(char *)"PCI hardware error (0x%x)\n",(int)pci_err);
    #line 2862 
    sky2_pci_write16(hw,6U,(unsigned short)((int)((unsigned int)pci_err | 61696U)));
    #line 2864 
    sky2_write8(hw,344U,(unsigned char)1);
  }
  #line 2867 
  if ((status & 33554432U) != 0U) {
    #line 2869 
    u32 err;
    #line 2871 
    sky2_write8(hw,344U,(unsigned char)2);
    #line 2872 
    err = sky2_read32(hw,7428U);
    #line 2873 
    sky2_write32(hw,7428U,4294967295U);
    #line 2875 
    if (net_ratelimit() != 0) 
                              #line 2876 
                              _dev_err(& pdev->dev,(char *)"PCI Express error (0x%x)\n",err);
    #line 2878 
    sky2_read32(hw,7428U);
    #line 2879 
    sky2_write8(hw,344U,(unsigned char)1);
  }
  #line 2882 
  if ((status & 63U) != 0U) 
                            #line 2883 
                            sky2_hw_error(hw,0U,status);
  #line 2884 
  status >>= 8;
  #line 2885 
  if ((status & 63U) != 0U) 
                            #line 2886 
                            sky2_hw_error(hw,1U,status);
  #line 2887 
  return;
}

#line 2889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_mac_intr(struct sky2_hw *hw, unsigned int port)
{
  #line 2891 
  struct net_device *dev = hw->dev[port];
  #line 2892 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 2893 
  u8 status = sky2_read8(hw,(port << 7) + 3848U);
  #line 2895 
  if ((sky2->msg_enable & 512U) != 0U) 
                                       #line 2895 
                                       netdev_info(dev,(char *)"mac interrupt status 0x%x\n",(int)status);
  #line 2897 
  if (((int)status & 16) != 0) 
                               #line 2898 
                               gma_read16(hw,port,72U);
  #line 2900 
  if (((int)status & 32) != 0) 
                               #line 2901 
                               gma_read16(hw,port,68U);
  #line 2903 
  if (((int)status & 2) != 0) {
    #line 2904 
    (dev->stats.rx_fifo_errors) ++;
    #line 2905 
    sky2_write8(hw,(port << 7) + 3144U,(unsigned char)32);
  }
  #line 2908 
  if (((int)status & 8) != 0) {
    #line 2909 
    (dev->stats.tx_fifo_errors) ++;
    #line 2910 
    sky2_write8(hw,(port << 7) + 3400U,(unsigned char)64);
  }
  #line 2912 
  return;
}

#line 2915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_le_error(struct sky2_hw *hw, unsigned int port, u16 q)
{
  #line 2917 
  struct net_device *dev = hw->dev[port];
  #line 2918 
  u16 idx = sky2_read16(hw,(unsigned int)((int)q + 1120));
  #line 2920 
  ;
  #line 2920 
  ;
  #line 2920 
  ;
  #line 2920 
  ;
  #line 2920 
  _dev_err(& (hw->pdev)->dev,(char *)"%s: descriptor error q=%#x get=%u put=%u\n",(char *)(& dev->name),(unsigned int)q,(unsigned int)idx,(unsigned int)sky2_read16(hw,(unsigned int)((int)q + 1124)));
  #line 2924 
  sky2_write32(hw,(unsigned int)((int)q + 1076),1024U);
  #line 2925 
  return;
}

#line 2927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_rx_hung(struct net_device *dev)
{
  #line 2929 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 2930 
  struct sky2_hw *hw = sky2->hw;
  #line 2931 
  unsigned int port = sky2->port;
  #line 2932 
  unsigned int rxq = rxqaddr[port];
  #line 2933 
  u32 mac_rp = sky2_read32(hw,(port << 7) + 3184U);
  #line 2934 
  u8 mac_lev = sky2_read8(hw,(port << 7) + 3192U);
  #line 2935 
  u8 fifo_rp = sky2_read8(hw,rxq + 1096U);
  #line 2936 
  u8 fifo_lev = sky2_read8(hw,rxq + 1098U);
  #line 2939 
  if (sky2->check.last == sky2->last_rx && ((sky2->check.mac_rp == mac_rp && (unsigned int)mac_lev != 0U) && (int)sky2->check.mac_lev <= (int)mac_lev || ((int)sky2->check.fifo_rp == (int)fifo_rp && (unsigned int)fifo_lev != 0U) && (int)sky2->check.fifo_lev <= (int)fifo_lev)) {
    #line 2945 
    ;
    #line 2945 
    ;
    #line 2945 
    ;
    #line 2945 
    ;
    #line 2945 
    ;
    #line 2945 
    netdev_printk((char *)"\001",dev,(char *)"hung mac %d:%d fifo %d (%d:%d)\n",(int)mac_lev,mac_rp,(int)fifo_lev,(int)fifo_rp,(int)sky2_read8(hw,rxq + 1100U));
    #line 2949 
    return 1;
  }
  else {
    #line 2951 
    sky2->check.last = sky2->last_rx;
    #line 2952 
    sky2->check.mac_rp = mac_rp;
    #line 2953 
    sky2->check.mac_lev = mac_lev;
    #line 2954 
    sky2->check.fifo_rp = fifo_rp;
    #line 2955 
    sky2->check.fifo_lev = fifo_lev;
    #line 2956 
    return 0;
  }
}

#line 2960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_watchdog(struct timer_list *t)
{
  #line 2962 
  void *__mptr;
  #line 2962 
  __mptr = (void *)t;
  #line 2962 
  struct sky2_hw *hw = ((struct sky2_hw *)(__mptr + 18446744073709551152U));
  #line 2965 
  if (sky2_read32(hw,8U) != 0U) 
                                #line 2966 
                                napi_schedule(& hw->napi);
  else {
    #line 2968 
    int i;
    #line 2968 
    int active = 0;
    #line 2970 
    i = 0;
    #line 2970 
    while ((int)hw->ports > i) {
      {
        #line 2971 
        struct net_device *dev = hw->dev[i];
        #line 2972 
        if (! netif_running(dev)) 
                                  #line 2973 
                                  goto __Cont;
        #line 2974 
        active ++;
        #line 2977 
        if ((hw->flags & 16UL) != 0UL) {
          #line 2977 
          if (sky2_rx_hung(dev) != 0) {
            #line 2979 
            netdev_info(dev,(char *)"receiver hang detected\n");
            #line 2980 
            cif_schedule_work(& hw->restart_work);
            #line 2981 
            return;
          }
        }
      }
      #line 2970 
      __Cont: 
              #line 2970 
      i ++;
    }
    #line 2985 
    if (active == 0) 
                     #line 2986 
                     return;
  }
  #line 2989 
  ;
  #line 2989 
  cif_mod_timer(& hw->watchdog_timer,round_jiffies(jiffies + 250UL));
  #line 2990 
  return;
}

#line 2993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_err_intr(struct sky2_hw *hw, u32 status)
{
  #line 2995 
  if (net_ratelimit() != 0) 
                            #line 2996 
                            _dev_warn(& (hw->pdev)->dev,(char *)"error interrupt status=%#x\n",status);
  #line 2998 
  if ((status & 2147483648U) != 0U) 
                                    #line 2999 
                                    sky2_hw_intr(hw);
  #line 3001 
  if ((status & 8U) != 0U) 
                           #line 3002 
                           sky2_mac_intr(hw,0U);
  #line 3004 
  if ((status & 2048U) != 0U) 
                              #line 3005 
                              sky2_mac_intr(hw,1U);
  #line 3007 
  if ((status & 4U) != 0U) 
                           #line 3008 
                           sky2_le_error(hw,0U,(unsigned short)0);
  #line 3010 
  if ((status & 1024U) != 0U) 
                              #line 3011 
                              sky2_le_error(hw,1U,(unsigned short)128);
  #line 3013 
  if ((status & 1U) != 0U) 
                           #line 3014 
                           sky2_le_error(hw,0U,(unsigned short)640);
  #line 3016 
  if ((status & 256U) != 0U) 
                             #line 3017 
                             sky2_le_error(hw,1U,(unsigned short)896);
  #line 3018 
  return;
}

#line 3020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_poll(struct napi_struct *napi, int work_limit)
{
  #line 3022 
  void *__mptr;
  #line 3025 
  u16 idx;
  #line 3022 
  __mptr = (void *)napi;
  #line 3022 
  struct sky2_hw *hw = ((struct sky2_hw *)(__mptr + 18446744073709551600U));
  #line 3023 
  u32 status = sky2_read32(hw,36U);
  #line 3024 
  int work_done = 0;
  #line 3027 
  if ((long)((status & 2147486989U) != 0U) != 0L) 
                                                  #line 3028 
                                                  sky2_err_intr(hw,status);
  #line 3030 
  if ((status & 16U) != 0U) 
                            #line 3031 
                            sky2_phy_intr(hw,0U);
  #line 3033 
  if ((status & 4096U) != 0U) 
                              #line 3034 
                              sky2_phy_intr(hw,1U);
  #line 3036 
  if ((status & 32U) != 0U) 
                            #line 3037 
                            sky2_qlink_intr(hw);
  #line 3039 
  while (1) {
    #line 3039 
    idx = sky2_read16(hw,3740U);
    #line 3039 
    ;
    #line 3039 
    if (! ((unsigned int)idx != hw->st_idx)) 
                                             #line 3039 
                                             break;
    {
      #line 3040 
      work_done = sky2_status_intr(hw,work_limit - work_done,
                         (unsigned short)((int)idx)) + work_done;
      #line 3042 
      if (work_done >= work_limit) 
                                   #line 3043 
                                   goto done;
    }
  }
  #line 3046 
  napi_complete_done(napi,work_done);
  #line 3047 
  sky2_read32(hw,40U);
  #line 3048 
  done: 
        #line 3048 
  ;
  #line 3050 
  return work_done;
}

#line 3053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static irqreturn_t sky2_intr(int irq, void *dev_id)
{
  #line 3056 
  u32 status;
  #line 3055 
  struct sky2_hw *hw = (struct sky2_hw *)dev_id;
  #line 3059 
  status = sky2_read32(hw,28U);
  #line 3060 
  if (status + 4294967295U > 4294967293U) {
    #line 3061 
    sky2_write32(hw,44U,2U);
    #line 3062 
    return IRQ_NONE;
  }
  #line 3065 
  __builtin_prefetch((void const *)((void *)(hw->st_le + (unsigned long)hw->st_idx)));
  #line 3067 
  napi_schedule(& hw->napi);
  #line 3069 
  return IRQ_HANDLED;
}

#line 3073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_netpoll(struct net_device *dev)
{
  #line 3075 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 3077 
  napi_schedule(& (sky2->hw)->napi);
  #line 3078 
  return;
}

#line 3082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static u32 sky2_mhz(struct sky2_hw *hw)
{
  #line 3084 
  switch ((int)hw->chip_id) {
    #line 3085 
    case 182: 
              #line 3085 
    ;
    #line 3086 
    case 180: 
              #line 3086 
    ;
    #line 3087 
    case 181: 
              #line 3087 
    ;
    #line 3088 
    case 185: 
              #line 3088 
    ;
    #line 3089 
    case 186: 
              #line 3089 
    ;
    #line 3090 
    case 188: 
              #line 3090 
    ;
    #line 3091 
    case 189: 
              #line 3091 
    ;
    #line 3092 
    case 190: 
              #line 3092 
    ;
    #line 3093 
    return 125U;
    #line 3095 
    case 183: 
              #line 3095 
    ;
    #line 3096 
    return 100U;
    #line 3098 
    case 184: 
              #line 3098 
    ;
    #line 3099 
    return 50U;
    #line 3101 
    case 179: 
              #line 3101 
    ;
    #line 3102 
    return 156U;
    #line 3104 
    default: 
             #line 3104 
    ;
    #line 3106 
    ldv_inline_asm();
    #line 3107 
    ldv_inline_asm();
    #line 3108 
    ldv_inline_asm();
    #line 3105 
    ;
  }
  #line 3109 
  ;
  #line 3109 
  return 0U;
}

#line 3109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static u32 sky2_us2clk(struct sky2_hw *hw, u32 us)
{
  #line 3111 
  ;
  #line 3111 
  return sky2_mhz(hw) * us;
}

#line 3114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static u32 sky2_clk2us(struct sky2_hw *hw, u32 clk)
{
  #line 3116 
  ;
  #line 3116 
  return clk / sky2_mhz(hw);
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_init(struct sky2_hw *hw)
{
  #line 3122 
  u8 t8;
  #line 3125 
  sky2_pci_write32(hw,128U,0U);
  #line 3127 
  sky2_write8(hw,4U,(unsigned char)2);
  #line 3129 
  hw->chip_id = sky2_read8(hw,283U);
  #line 3130 
  hw->chip_rev = (unsigned char)((unsigned int)((unsigned char)((int)sky2_read8(hw,282U) >> 4)) & 15U);
  #line 3132 
  switch ((int)hw->chip_id) {
    #line 3133 
    case 179: 
              #line 3133 
    ;
    #line 3134 
    hw->flags = 12UL;
    #line 3135 
    if ((unsigned int)hw->chip_rev <= 1U) 
                                          #line 3136 
                                          hw->flags |= 256UL;
    #line 3137 
    break;
    #line 3139 
    case 180: 
              #line 3139 
    ;
    #line 3140 
    hw->flags = 140UL;
    #line 3143 
    break;
    #line 3145 
    case 181: 
              #line 3145 
    ;
    #line 3146 
    hw->flags = 1196UL;
    #line 3153 
    if ((unsigned int)hw->chip_rev != 2U) 
                                          #line 3154 
                                          hw->flags |= 64UL;
    #line 3155 
    break;
    #line 3157 
    case 182: 
              #line 3157 
    ;
    #line 3159 
    if ((unsigned int)hw->chip_rev == 0U) {
      #line 3160 
      _dev_err(& (hw->pdev)->dev,(char *)"unsupported revision Yukon-EC rev A1\n");
      #line 3161 
      return -95;
    }
    #line 3163 
    hw->flags = 260UL;
    #line 3164 
    break;
    #line 3166 
    case 183: 
              #line 3166 
    ;
    #line 3167 
    hw->flags = 256UL;
    #line 3168 
    break;
    #line 3170 
    case 184: 
              #line 3170 
    ;
    #line 3171 
    hw->flags = 232UL;
    #line 3177 
    if ((unsigned int)hw->chip_rev == 0U) 
                                          #line 3178 
                                          hw->flags |= 1536UL;
    #line 3179 
    break;
    #line 3181 
    case 185: 
              #line 3181 
    ;
    #line 3182 
    hw->flags = 236UL;
    #line 3188 
    if ((unsigned int)hw->chip_rev == 0U) 
                                          #line 3189 
                                          hw->flags |= 1024UL;
    #line 3190 
    break;
    #line 3192 
    case 186: 
              #line 3192 
    ;
    #line 3193 
    hw->flags = 132UL;
    #line 3195 
    break;
    #line 3197 
    case 188: 
              #line 3197 
    ;
    #line 3198 
    case 189: 
              #line 3198 
    ;
    #line 3199 
    case 190: 
              #line 3199 
    ;
    #line 3200 
    hw->flags = 164UL;
    #line 3203 
    break;
    #line 3205 
    default: 
             #line 3205 
    ;
    #line 3206 
    _dev_err(& (hw->pdev)->dev,(char *)"unsupported chip type 0x%x\n",(int)hw->chip_id);
    #line 3208 
    return -95;
  }
  #line 3211 
  hw->pmd_type = sky2_read8(hw,281U);
  #line 3212 
  if (((unsigned int)hw->pmd_type == 76U || (unsigned int)hw->pmd_type == 83U) || (unsigned int)hw->pmd_type == 80U) 
    #line 3213 
    hw->flags |= 2UL;
  #line 3215 
  hw->ports = (unsigned char)1U;
  #line 3216 
  t8 = sky2_read8(hw,286U);
  #line 3217 
  if (((int)t8 & 3) == 3) {
    #line 3218 
    if (((int)sky2_read8(hw,285U) & 128) == 0) 
                                               #line 3219 
                                               hw->ports = (u8)((int)hw->ports + 1);
  }
  #line 3222 
  if ((unsigned int)sky2_read8(hw,284U) != 0U) 
                                               #line 3223 
                                               hw->flags |= 16UL;
  #line 3225 
  return 0;
}

#line 3228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_reset(struct sky2_hw *hw)
{
  #line 3231 
  u16 status;
  #line 3232 
  int i;
  #line 3230 
  struct pci_dev *pdev = hw->pdev;
  #line 3233 
  u32 hwe_mask = 738213695U;
  #line 3236 
  if ((unsigned int)hw->chip_id == 181U || (unsigned int)hw->chip_id == 185U) {
    #line 3238 
    sky2_write32(hw,3656U,0U);
    #line 3239 
    status = sky2_read16(hw,3688U);
    #line 3240 
    status = (unsigned short)((unsigned int)status & 64764U);
    #line 3247 
    status = (unsigned short)((unsigned int)status & 65511U);
    #line 3248 
    sky2_write16(hw,3688U,(unsigned short)((int)status));
    #line 3249 
    sky2_write32(hw,3656U,0U);
  }
  else 
       #line 3251 
       sky2_write8(hw,3688U,(unsigned char)8);
  #line 3252 
  sky2_write16(hw,4U,(unsigned short)4096);
  #line 3255 
  sky2_write8(hw,4U,(unsigned char)1);
  #line 3256 
  sky2_write8(hw,4U,(unsigned char)2);
  #line 3259 
  sky2_write8(hw,344U,(unsigned char)2);
  #line 3262 
  status = sky2_pci_read16(hw,6U);
  #line 3263 
  status = (unsigned short)((unsigned int)status | 61696U);
  #line 3264 
  sky2_pci_write16(hw,6U,(unsigned short)((int)status));
  #line 3266 
  sky2_write8(hw,4U,(unsigned char)8);
  #line 3268 
  if ((int)pci_is_pcie(pdev) != 0) {
    #line 3269 
    sky2_write32(hw,7428U,4294967295U);
    #line 3273 
    if ((sky2_read32(hw,16U) & 33554432U) != 0U) 
                                                 #line 3274 
                                                 _dev_info(& pdev->dev,(char *)"ignoring stuck error report bit\n"); else 
                                                                    #line 3276 
                                                                    hwe_mask |= 33554432U;
  }
  #line 3279 
  sky2_power_on(hw);
  #line 3280 
  sky2_write8(hw,344U,(unsigned char)1);
  #line 3282 
  i = 0;
  #line 3282 
  while ((int)hw->ports > i) {
    #line 3283 
    sky2_write8(hw,(unsigned int)((i << 7) + 3856),(unsigned char)1);
    #line 3284 
    sky2_write8(hw,(unsigned int)((i << 7) + 3856),(unsigned char)2);
    #line 3286 
    if ((unsigned int)hw->chip_id == 181U || (unsigned int)hw->chip_id == 185U) 
      #line 3288 
      sky2_write16(hw,(unsigned int)((i << 7) + 3840),(unsigned short)10752);
    #line 3282 
    i ++;
  }
  #line 3294 
  if ((unsigned int)hw->chip_id == 185U && (unsigned int)hw->chip_rev > 1U) 
    #line 3296 
    sky2_pci_write32(hw,128U,131072U);
  #line 3299 
  if ((unsigned int)hw->chip_id + 68U <= 2U) {
    #line 3302 
    u16 reg;
    #line 3304 
    if ((unsigned int)hw->chip_id == 188U && (unsigned int)hw->chip_rev == 0U) {
      #line 3306 
      sky2_write32(hw,368U,8388736U);
      #line 3309 
      reg = (unsigned short)10U;
      #line 3312 
      sky2_write32(hw,368U,1074266112U);
    }
    else 
         #line 3315 
         reg = (unsigned short)3U;
    #line 3318 
    reg = (unsigned short)((int)reg << 4U);
    #line 3319 
    reg = (unsigned short)((unsigned int)reg | 1U);
    #line 3322 
    sky2_write8(hw,344U,(unsigned char)2);
    #line 3323 
    sky2_pci_write16(hw,360U,(unsigned short)((int)reg));
    #line 3326 
    reg = sky2_pci_read16(hw,356U);
    #line 3327 
    if (((int)reg & 3) != 0) 
                             #line 3329 
                             sky2_pci_write16(hw,(unsigned int)((int)pdev->pcie_cap + 16),(unsigned short)((int)reg));
    #line 3332 
    if ((unsigned int)hw->chip_id == 189U && (unsigned int)hw->chip_rev == 2U) {
      #line 3335 
      reg = sky2_read16(hw,3844U);
      #line 3336 
      sky2_write16(hw,3844U,(unsigned short)((int)((unsigned int)reg | 8192U)));
      #line 3339 
      reg = sky2_read16(hw,7356U);
      #line 3340 
      sky2_write16(hw,7356U,(unsigned short)((int)((unsigned int)reg | 128U)));
    }
    #line 3343 
    sky2_write8(hw,344U,(unsigned char)1);
    #line 3346 
    sky2_write32(hw,368U,1074266112U);
  }
  #line 3350 
  sky2_write32(hw,360U,1U);
  #line 3353 
  sky2_write8(hw,312U,(unsigned char)2);
  #line 3354 
  sky2_write8(hw,312U,(unsigned char)1);
  #line 3357 
  sky2_write32(hw,3592U,1U);
  #line 3360 
  sky2_write8(hw,3608U,(unsigned char)2);
  #line 3361 
  sky2_write8(hw,3608U,(unsigned char)1);
  #line 3364 
  i = 0;
  #line 3364 
  while ((int)hw->ports > i) {
    #line 3365 
    sky2_write8(hw,(unsigned int)((i << 7) + 528),(unsigned char)2);
    #line 3364 
    i ++;
  }
  #line 3368 
  i = 0;
  #line 3368 
  while ((int)hw->ports > i) {
    #line 3369 
    sky2_write8(hw,(unsigned int)((i << 6) | 416),(unsigned char)2);
    #line 3371 
    sky2_write8(hw,(unsigned int)((i << 6) | 400),(unsigned char)36);
    #line 3372 
    sky2_write8(hw,(unsigned int)((i << 6) | 401),(unsigned char)36);
    #line 3373 
    sky2_write8(hw,(unsigned int)((i << 6) | 402),(unsigned char)36);
    #line 3374 
    sky2_write8(hw,(unsigned int)((i << 6) | 403),(unsigned char)36);
    #line 3375 
    sky2_write8(hw,(unsigned int)((i << 6) | 404),(unsigned char)36);
    #line 3376 
    sky2_write8(hw,(unsigned int)((i << 6) | 405),(unsigned char)36);
    #line 3377 
    sky2_write8(hw,(unsigned int)((i << 6) | 406),(unsigned char)36);
    #line 3378 
    sky2_write8(hw,(unsigned int)((i << 6) | 407),(unsigned char)36);
    #line 3379 
    sky2_write8(hw,(unsigned int)((i << 6) | 408),(unsigned char)36);
    #line 3380 
    sky2_write8(hw,(unsigned int)((i << 6) | 409),(unsigned char)36);
    #line 3381 
    sky2_write8(hw,(unsigned int)((i << 6) | 410),(unsigned char)36);
    #line 3382 
    sky2_write8(hw,(unsigned int)((i << 6) | 411),(unsigned char)36);
    #line 3368 
    i ++;
  }
  #line 3385 
  sky2_write32(hw,20U,hwe_mask);
  #line 3387 
  i = 0;
  #line 3387 
  while ((int)hw->ports > i) {
    #line 3388 
    sky2_gmac_reset(hw,(unsigned int)i);
    #line 3387 
    i ++;
  }
  #line 3390 
  memset((void *)hw->st_le,0,(unsigned long)hw->st_size * 8UL);
  #line 3391 
  hw->st_idx = 0U;
  #line 3393 
  sky2_write32(hw,3712U,1U);
  #line 3394 
  sky2_write32(hw,3712U,2U);
  #line 3396 
  sky2_write32(hw,3720U,(unsigned int)hw->st_dma);
  #line 3397 
  sky2_write32(hw,3724U,(unsigned int)(hw->st_dma >> 32));
  #line 3400 
  sky2_write16(hw,3716U,(unsigned short)((int)((unsigned int)((unsigned short)hw->st_size) + 65535U)));
  #line 3402 
  sky2_write16(hw,3736U,(unsigned short)10);
  #line 3403 
  sky2_write8(hw,3756U,(unsigned char)16);
  #line 3406 
  if ((unsigned int)hw->chip_id == 179U && (unsigned int)hw->chip_rev == 0U) 
    #line 3407 
    sky2_write8(hw,3757U,(unsigned char)4); else 
                                                 #line 3409 
                                                 sky2_write8(hw,3757U,(unsigned char)16);
  #line 3411 
  ;
  #line 3411 
  sky2_write32(hw,3776U,sky2_us2clk(hw,1000U));
  #line 3412 
  ;
  #line 3412 
  sky2_write32(hw,3792U,sky2_us2clk(hw,20U));
  #line 3413 
  ;
  #line 3413 
  sky2_write32(hw,3760U,sky2_us2clk(hw,100U));
  #line 3416 
  sky2_write32(hw,3712U,8U);
  #line 3418 
  sky2_write8(hw,3784U,(unsigned char)4);
  #line 3419 
  sky2_write8(hw,3768U,(unsigned char)4);
  #line 3420 
  sky2_write8(hw,3800U,(unsigned char)4);
  #line 3421 
  return;
}

#line 3427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_detach(struct net_device *dev)
{
  #line 3429 
  if ((int)netif_running(dev) != 0) {
    #line 3430 
    netif_tx_lock(dev);
    #line 3431 
    netif_device_detach(dev);
    #line 3432 
    netif_tx_unlock(dev);
    #line 3433 
    sky2_close(dev);
  }
  #line 3435 
  return;
}

#line 3438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_reattach(struct net_device *dev)
{
  #line 3440 
  int err = 0;
  #line 3442 
  if ((int)netif_running(dev) != 0) {
    #line 3443 
    err = sky2_open(dev);
    #line 3444 
    if (err != 0) {
      #line 3445 
      netdev_info(dev,(char *)"could not restart %d\n",err);
      #line 3446 
      dev_close(dev);
    }
    else {
      #line 3448 
      netif_device_attach(dev);
      #line 3449 
      sky2_set_multicast(dev);
    }
  }
  #line 3453 
  return err;
}

#line 3456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_all_down(struct sky2_hw *hw)
{
  #line 3458 
  int i;
  #line 3460 
  if ((hw->flags & 2048UL) != 0UL) {
    #line 3461 
    sky2_write32(hw,12U,0U);
    #line 3462 
    sky2_read32(hw,12U);
    #line 3464 
    synchronize_irq((hw->pdev)->irq);
    #line 3465 
    napi_disable(& hw->napi);
  }
  #line 3468 
  i = 0;
  #line 3468 
  while ((int)hw->ports > i) {
    {
      #line 3469 
      struct net_device *dev = hw->dev[i];
      #line 3470 
      struct sky2_port *sky2 = netdev_priv(dev);
      #line 3472 
      if (! netif_running(dev)) 
                                #line 3473 
                                goto __Cont;
      #line 3475 
      netif_carrier_off(dev);
      #line 3476 
      netif_tx_disable(dev);
      #line 3477 
      sky2_hw_down(sky2);
    }
    #line 3468 
    __Cont: 
            #line 3468 
    i ++;
  }
  #line 3479 
  return;
}

#line 3481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_all_up(struct sky2_hw *hw)
{
  #line 3484 
  int i;
  #line 3483 
  u32 imask = 3221225472U;
  #line 3486 
  i = 0;
  #line 3486 
  while ((int)hw->ports > i) {
    {
      #line 3487 
      struct net_device *dev = hw->dev[i];
      #line 3488 
      struct sky2_port *sky2 = netdev_priv(dev);
      #line 3490 
      if (! netif_running(dev)) 
                                #line 3491 
                                goto __Cont;
      #line 3493 
      sky2_hw_up(sky2);
      #line 3494 
      sky2_set_multicast(dev);
      #line 3495 
      imask = portirq_msk[i] | imask;
      #line 3496 
      netif_wake_queue(dev);
    }
    #line 3486 
    __Cont: 
            #line 3486 
    i ++;
  }
  #line 3499 
  if ((hw->flags & 2048UL) != 0UL) {
    #line 3500 
    sky2_write32(hw,12U,imask);
    #line 3501 
    sky2_read32(hw,12U);
    #line 3502 
    sky2_read32(hw,40U);
    #line 3503 
    napi_enable(& hw->napi);
  }
  #line 3505 
  return;
}

#line 3507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_restart(struct work_struct *work)
{
  #line 3509 
  void *__mptr;
  #line 3509 
  __mptr = (void *)work;
  #line 3509 
  struct sky2_hw *hw = ((struct sky2_hw *)(__mptr + 18446744073709551064U));
  #line 3511 
  rtnl_lock();
  #line 3513 
  sky2_all_down(hw);
  #line 3514 
  sky2_reset(hw);
  #line 3515 
  sky2_all_up(hw);
  #line 3517 
  rtnl_unlock();
  #line 3518 
  return;
}

#line 3520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static u8 sky2_wol_supported(struct sky2_hw *hw)
{
  #line 3522 
  unsigned int tmp_0;
  #line 3522 
  if (sky2_is_copper(hw) != 0) 
                               #line 3522 
                               tmp_0 = 33U; else 
                                                 #line 3522 
                                                 tmp_0 = 0U;
  #line 3522 
  return (unsigned char)tmp_0;
}

#line 3525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 3527 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 3529 
  wol->supported = (unsigned int)sky2_wol_supported(sky2->hw);
  #line 3530 
  wol->wolopts = (unsigned int)sky2->wol;
  #line 3531 
  return;
}

#line 3533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 3538 
  int i;
  #line 3535 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 3536 
  struct sky2_hw *hw = sky2->hw;
  #line 3537 
  bool enable_wakeup = (_Bool)0;
  #line 3540 
  ;
  #line 3540 
  if ((wol->wolopts & (unsigned int)(~ ((int)sky2_wol_supported(sky2->hw)))) != 0U) 
    #line 3542 
    return -95;
  else {
    #line 3541 
    if (! device_can_wakeup(& (hw->pdev)->dev)) 
                                                #line 3542 
                                                return -95;
  }
  #line 3544 
  sky2->wol = (unsigned char)wol->wolopts;
  #line 3546 
  i = 0;
  #line 3546 
  while ((int)hw->ports > i) {
    {
      #line 3547 
      struct net_device *dev_0 = hw->dev[i];
      #line 3548 
      struct sky2_port *sky2_0 = netdev_priv(dev_0);
      #line 3550 
      if ((unsigned int)sky2_0->wol != 0U) 
                                           #line 3551 
                                           enable_wakeup = (_Bool)1;
    }
    #line 3546 
    i ++;
  }
  #line 3553 
  device_set_wakeup_enable(& (hw->pdev)->dev,(_Bool)((bool)((int)enable_wakeup) != 0));
  #line 3555 
  return 0;
}

#line 3558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static u32 sky2_supported_modes(struct sky2_hw *hw)
{
  #line 3560 
  if (sky2_is_copper(hw) != 0) {
    #line 3561 
    u32 modes = 15U;
    #line 3566 
    if ((hw->flags & 4UL) != 0UL) 
                                  #line 3567 
                                  modes |= 48U;
    #line 3569 
    return modes;
  }
  else 
       #line 3571 
       return 48U;
}

#line 3575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 3580 
  u32 supported;
  #line 3580 
  u32 advertising;
  #line 3578 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 3579 
  struct sky2_hw *hw = sky2->hw;
  #line 3582 
  supported = sky2_supported_modes(hw);
  #line 3583 
  cmd->base.phy_address = (unsigned char)0U;
  #line 3584 
  if (sky2_is_copper(hw) != 0) {
    #line 3585 
    cmd->base.port = (unsigned char)0U;
    #line 3586 
    cmd->base.speed = (unsigned int)sky2->speed;
    #line 3587 
    supported |= 192U;
  }
  else {
    #line 3589 
    cmd->base.speed = 1000U;
    #line 3590 
    cmd->base.port = (unsigned char)3U;
    #line 3591 
    supported |= 1088U;
  }
  #line 3594 
  advertising = (unsigned int)sky2->advertising;
  #line 3595 
  cmd->base.autoneg = (unsigned char)((unsigned int)((unsigned char)((int)sky2->flags >> 1)) & 1U);
  #line 3597 
  cmd->base.duplex = sky2->duplex;
  #line 3599 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),supported);
  #line 3601 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),advertising);
  #line 3604 
  return 0;
}

#line 3607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 3613 
  u32 new_advertising;
  #line 3610 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 3611 
  struct sky2_hw *hw = sky2->hw;
  #line 3612 
  u32 supported = sky2_supported_modes(hw);
  #line 3615 
  ethtool_convert_link_mode_to_legacy_u32(& new_advertising,(unsigned long *)(& cmd->link_modes.advertising));
  #line 3618 
  if ((unsigned int)cmd->base.autoneg == 1U) {
    #line 3619 
    if ((~ supported & new_advertising) != 0U) 
                                               #line 3620 
                                               return -22;
    #line 3622 
    if (sky2_is_copper(hw) != 0) 
                                 #line 3623 
                                 sky2->advertising = (unsigned short)((unsigned int)((unsigned short)new_advertising) | 192U); else 
                                                                    #line 3627 
                                                                    sky2->advertising = (unsigned short)((unsigned int)((unsigned short)new_advertising) | 1088U);
    #line 3631 
    sky2->flags = (unsigned short)((unsigned int)sky2->flags | 2U);
    #line 3632 
    sky2->duplex = (unsigned char)255U;
    #line 3633 
    sky2->speed = (unsigned short)65535U;
  }
  else {
    #line 3635 
    u32 setting;
    #line 3636 
    u32 speed = cmd->base.speed;
    #line 3638 
    switch (speed) {
      #line 3639 
      case (u32)1000: 
                      #line 3639 
      ;
      #line 3640 
      if ((unsigned int)cmd->base.duplex == 1U) 
                                                #line 3641 
                                                setting = 32U;
      else 
        #line 3642 
        if ((unsigned int)cmd->base.duplex == 0U) 
                                                  #line 3643 
                                                  setting = 16U; else 
                                                                   #line 3645 
                                                                   return -22;
      #line 3646 
      break;
      #line 3647 
      case (u32)100: 
                     #line 3647 
      ;
      #line 3648 
      if ((unsigned int)cmd->base.duplex == 1U) 
                                                #line 3649 
                                                setting = 8U;
      else 
        #line 3650 
        if ((unsigned int)cmd->base.duplex == 0U) 
                                                  #line 3651 
                                                  setting = 4U; else 
                                                                  #line 3653 
                                                                  return -22;
      #line 3654 
      break;
      #line 3656 
      case (u32)10: 
                    #line 3656 
      ;
      #line 3657 
      if ((unsigned int)cmd->base.duplex == 1U) 
                                                #line 3658 
                                                setting = 2U;
      else 
        #line 3659 
        if ((unsigned int)cmd->base.duplex == 0U) 
                                                  #line 3660 
                                                  setting = 1U; else 
                                                                  #line 3662 
                                                                  return -22;
      #line 3663 
      break;
      #line 3664 
      default: 
               #line 3664 
      ;
      #line 3665 
      return -22;
    }
    #line 3668 
    if ((setting & supported) == 0U) 
                                     #line 3669 
                                     return -22;
    #line 3671 
    sky2->speed = (unsigned short)speed;
    #line 3672 
    sky2->duplex = cmd->base.duplex;
    #line 3673 
    sky2->flags = (unsigned short)((unsigned int)sky2->flags & 65533U);
  }
  #line 3676 
  if ((int)netif_running(dev) != 0) {
    #line 3677 
    sky2_phy_reinit(sky2);
    #line 3678 
    sky2_set_multicast(dev);
  }
  #line 3681 
  return 0;
}

#line 3684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 3687 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 3689 
  strlcpy((char *)(& info->driver),(char *)"sky2",32UL);
  #line 3690 
  strlcpy((char *)(& info->version),(char *)"1.30",32UL);
  #line 3691 
  ;
  #line 3691 
  strlcpy((char *)(& info->bus_info),pci_name((sky2->hw)->pdev),32UL);
  #line 3692 
  return;
}

#line 3698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct sky2_stat sky2_stats[36U] = {{.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .offset = (unsigned short)488U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .offset = (unsigned short)312U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .offset = (unsigned short)456U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .offset = (unsigned short)264U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .offset = (unsigned short)472U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .offset = (unsigned short)280U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .offset = (unsigned short)448U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .offset = (unsigned short)256U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e'}, .offset = (unsigned short)464U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e'}, .offset = (unsigned short)272U}, {.name = {(char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .offset = (unsigned short)560U}, {.name = {(char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n'}, .offset = (unsigned short)568U}, {.name = {(char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'e', (char)'d'}, .offset = (unsigned short)576U}, {.name = {(char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .offset = (unsigned short)592U}, {.name = {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .offset = (unsigned short)584U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'h', (char)'o', (char)'r', (char)'t'}, .offset = (unsigned short)336U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'u', (char)'n', (char)'t'}, .offset = (unsigned short)344U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)352U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)360U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)368U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)376U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)384U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)392U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)400U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g'}, .offset = (unsigned short)408U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w'}, .offset = (unsigned short)432U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r'}, .offset = (unsigned short)416U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'c', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}, .offset = (unsigned short)288U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)496U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)504U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)512U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)520U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)528U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)536U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .offset = (unsigned short)544U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, .offset = (unsigned short)600U}};
#line 3739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static u32 sky2_get_msglevel(struct net_device *netdev)
{
  #line 3741 
  struct sky2_port *sky2 = netdev_priv(netdev);
  #line 3742 
  return sky2->msg_enable;
}

#line 3745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_nway_reset(struct net_device *dev)
{
  #line 3747 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 3749 
  if (netif_running(dev)) {
    #line 3749 
    if (((int)sky2->flags & 2) == 0) 
                                     #line 3750 
                                     return -22;
  }
  else 
       #line 3750 
       return -22;
  #line 3752 
  sky2_phy_reinit(sky2);
  #line 3753 
  sky2_set_multicast(dev);
  #line 3755 
  return 0;
}

#line 3758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_phy_stats(struct sky2_port *sky2, u64 *data, unsigned int count)
{
  #line 3762 
  int i;
  #line 3760 
  struct sky2_hw *hw = sky2->hw;
  #line 3761 
  unsigned int port = sky2->port;
  #line 3764 
  *data = get_stats64(hw,port,480U);
  #line 3765 
  *(data + 1U) = get_stats64(hw,port,304U);
  #line 3767 
  i = 2;
  #line 3767 
  while ((unsigned int)i < count) {
    #line 3768 
    *(data + (unsigned long)i) = (unsigned long long)get_stats32(hw,port,(unsigned int)sky2_stats[i].offset);
    #line 3767 
    i ++;
  }
  #line 3769 
  return;
}

#line 3771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_set_msglevel(struct net_device *netdev, u32 value)
{
  #line 3773 
  struct sky2_port *sky2 = netdev_priv(netdev);
  #line 3774 
  sky2->msg_enable = value;
  #line 3775 
  return;
}

#line 3777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_get_sset_count(struct net_device *dev, int sset)
{
  #line 3779 
  switch (sset) {
    #line 3780 
    case 1: 
            #line 3780 
    ;
    #line 3781 
    return 36;
    #line 3782 
    default: 
             #line 3782 
    ;
    #line 3783 
    return -95;
  }
}

#line 3787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  #line 3790 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 3792 
  sky2_phy_stats(sky2,data,36U);
  #line 3793 
  return;
}

#line 3795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  #line 3797 
  int i;
  #line 3799 
  switch (stringset) {
    #line 3800 
    case (u32)1: 
                 #line 3800 
    ;
    #line 3801 
    i = 0;
    #line 3801 
    while ((unsigned int)i <= 35U) {
      #line 3802 
      memcpy((void *)(data + (unsigned long)(i * 32)),(void *)(& sky2_stats[i].name),32UL);
      #line 3801 
      i ++;
    }
    #line 3804 
    break;
  }
  #line 3806 
  return;
}

#line 3808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_set_mac_address(struct net_device *dev, void *p)
{
  #line 3810 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 3811 
  struct sky2_hw *hw = sky2->hw;
  #line 3812 
  unsigned int port = sky2->port;
  #line 3813 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 3815 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 3816 
                                                      return -99;
  #line 3818 
  memcpy((void *)dev->dev_addr,(void *)(& addr->sa_data),6UL);
  #line 3819 
  memcpy_toio(hw->regs + ((unsigned long)(port * 8U) + (unsigned long)256U),(void *)dev->dev_addr,6UL);
  #line 3821 
  memcpy_toio(hw->regs + ((unsigned long)(port * 8U) + (unsigned long)264U),(void *)dev->dev_addr,6UL);
  #line 3825 
  gma_set_addr(hw,port,40U,dev->dev_addr);
  #line 3828 
  gma_set_addr(hw,port,28U,dev->dev_addr);
  #line 3830 
  return 0;
}

#line 3833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
__inline static void sky2_add_filter(u8 *filter, u8 *addr)
{
  #line 3837 
  u32 ___x;
  #line 3837 
  u32 tmp_2;
  #line 3835 
  u32 bit;
  {
    #line 3837 
    u32 __x = crc32_le(4294967295U,addr,6UL);
    #line 3837 
    if (0 != 0) {
      #line 3837 
      ___x = __x;
      #line 3837 
      ___x = (___x << 16) | (___x << ((unsigned long)8 * sizeof(___x) - (unsigned long)16));
      #line 3837 
      ___x = ((___x >> 8) & 16711935U) | ((___x << 8) & 4278255360U);
      #line 3837 
      ___x = ((___x >> 4) & 252645135U) | ((___x << 4) & 4042322160U);
      #line 3837 
      ___x = ((___x >> 2) & 858993459U) | ((___x << 2) & 3435973836U);
      #line 3837 
      ___x = ((___x >> 1) & 1431655765U) | ((___x << 1) & 2863311530U);
      #line 3837 
      tmp_2 = ___x;
    }
    else 
         #line 3837 
         tmp_2 = __bitrev32(__x);
    }
  #line 3837 
  bit = tmp_2 & 63U;
  #line 3838 
  *(filter + (unsigned long)(bit >> 3)) = (unsigned char)((int)*(filter + (unsigned long)(bit >> 3)) | (1 << (bit & 7U)));
  #line 3839 
  return;
}

#line 3841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_set_multicast(struct net_device *dev)
{
  #line 3846 
  struct netdev_hw_addr *ha;
  #line 3847 
  u16 reg;
  #line 3848 
  u8 filter[8U];
  #line 3849 
  int rx_pause;
  #line 3843 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 3844 
  struct sky2_hw *hw = sky2->hw;
  #line 3845 
  unsigned int port = sky2->port;
  #line 3850 
  u8 pause_mc_addr[6U] = {(unsigned char)1U, (unsigned char)128U, (unsigned char)194U, (unsigned char)0U, (unsigned char)0U, (unsigned char)1U};
  #line 3852 
  rx_pause = (unsigned int)sky2->flow_status + 4294967294U <= 1U;
  #line 3853 
  memset((void *)(& filter),0,8UL);
  #line 3855 
  reg = gma_read16(hw,port,12U);
  #line 3856 
  reg = (unsigned short)((unsigned int)reg | 32768U);
  #line 3858 
  if ((dev->flags & 256U) != 0U) 
                                 #line 3859 
                                 reg = (unsigned short)((unsigned int)reg & 16383U);
  else 
    #line 3860 
    if ((dev->flags & 512U) != 0U) 
                                   #line 3861 
                                   memset((void *)(& filter),255,8UL);
    else 
      #line 3862 
      if (dev->mc.count == 0 && rx_pause == 0) 
                                               #line 3863 
                                               reg = (unsigned short)((unsigned int)reg & 49151U);
      else {
        #line 3870 
        void *__mptr;
        #line 3865 
        reg = (unsigned short)((unsigned int)reg | 16384U);
        #line 3867 
        if (rx_pause != 0) 
                           #line 3868 
                           sky2_add_filter((u8 *)(& filter),(u8 *)(& pause_mc_addr));
        #line 3870 
        __mptr = (void *)dev->mc.list.next;
        #line 3870 
        ha = ((struct netdev_hw_addr *)__mptr);
        #line 3870 
        while (& ha->list != & dev->mc.list) {
          #line 3870 
          void *__mptr_0;
          #line 3871 
          sky2_add_filter((u8 *)(& filter),(u8 *)(& ha->addr));
          #line 3870 
          __mptr_0 = (void *)ha->list.next;
          #line 3870 
          ha = ((struct netdev_hw_addr *)__mptr_0);
        }
      }
  #line 3874 
  gma_write16(hw,port,52,(unsigned short)((int)((unsigned short)((int)filter[0] | ((int)filter[1] << 8)))));
  #line 3876 
  gma_write16(hw,port,56,(unsigned short)((int)((unsigned short)((int)filter[2] | ((int)filter[3] << 8)))));
  #line 3878 
  gma_write16(hw,port,60,(unsigned short)((int)((unsigned short)((int)filter[4] | ((int)filter[5] << 8)))));
  #line 3880 
  gma_write16(hw,port,64,(unsigned short)((int)((unsigned short)((int)filter[6] | ((int)filter[7] << 8)))));
  #line 3883 
  gma_write16(hw,port,12,(unsigned short)((int)reg));
  #line 3884 
  return;
}

#line 3886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
{
  #line 3892 
  unsigned int start;
  #line 3893 
  u64 _bytes;
  #line 3893 
  u64 _packets;
  #line 3889 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 3890 
  struct sky2_hw *hw = sky2->hw;
  #line 3891 
  unsigned int port = sky2->port;
  #line 3895 
  while (1) {
    #line 3896 
    start = u64_stats_fetch_begin_irq(& sky2->rx_stats.syncp);
    #line 3897 
    _bytes = sky2->rx_stats.bytes;
    #line 3898 
    _packets = sky2->rx_stats.packets;
    #line 3899 
    if (! ((int)u64_stats_fetch_retry_irq(& sky2->rx_stats.syncp,start) != 0)) 
      #line 3895 
      break;
  }
  #line 3901 
  stats->rx_packets = _packets;
  #line 3902 
  stats->rx_bytes = _bytes;
  #line 3904 
  while (1) {
    #line 3905 
    start = u64_stats_fetch_begin_irq(& sky2->tx_stats.syncp);
    #line 3906 
    _bytes = sky2->tx_stats.bytes;
    #line 3907 
    _packets = sky2->tx_stats.packets;
    #line 3908 
    if (! ((int)u64_stats_fetch_retry_irq(& sky2->tx_stats.syncp,start) != 0)) 
      #line 3904 
      break;
  }
  #line 3910 
  stats->tx_packets = _packets;
  #line 3911 
  stats->tx_bytes = _bytes;
  #line 3913 
  stats->multicast = (unsigned long long)(get_stats32(hw,port,280U) + get_stats32(hw,port,264U));
  #line 3916 
  stats->collisions = (unsigned long long)get_stats32(hw,port,560U);
  #line 3918 
  stats->rx_length_errors = (unsigned long long)get_stats32(hw,port,408U);
  #line 3919 
  stats->rx_crc_errors = (unsigned long long)get_stats32(hw,port,288U);
  #line 3920 
  stats->rx_frame_errors = (unsigned long long)(get_stats32(hw,port,336U) + get_stats32(hw,port,344U));
  #line 3922 
  stats->rx_over_errors = (unsigned long long)get_stats32(hw,port,432U);
  #line 3924 
  stats->rx_dropped = (unsigned long long)dev->stats.rx_dropped;
  #line 3925 
  stats->rx_fifo_errors = (unsigned long long)dev->stats.rx_fifo_errors;
  #line 3926 
  stats->tx_fifo_errors = (unsigned long long)dev->stats.tx_fifo_errors;
  #line 3927 
  return;
}

#line 3932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_led(struct sky2_port *sky2, enum led_mode mode)
{
  #line 3934 
  struct sky2_hw *hw = sky2->hw;
  #line 3935 
  unsigned int port = sky2->port;
  #line 3937 
  cif_spin_lock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
  #line 3938 
  if ((unsigned int)hw->chip_id + 76U <= 1U || (unsigned int)hw->chip_id == 185U) {
    #line 3941 
    u16 pg;
    #line 3942 
    pg = gm_phy_read(hw,port,(unsigned short)22);
    #line 3943 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)3);
    #line 3945 
    switch ((unsigned int)mode) {
      #line 3946 
      case (unsigned int)2: 
                            #line 3946 
      ;
      #line 3947 
      gm_phy_write(hw,port,(unsigned short)16,(unsigned short)34952);
      #line 3952 
      break;
      #line 3953 
      case (unsigned int)3: 
                            #line 3953 
      ;
      #line 3954 
      gm_phy_write(hw,port,(unsigned short)16,(unsigned short)39321);
      #line 3959 
      break;
      #line 3960 
      case (unsigned int)1: 
                            #line 3960 
      ;
      #line 3961 
      gm_phy_write(hw,port,(unsigned short)16,(unsigned short)43690);
      #line 3966 
      break;
      #line 3967 
      case (unsigned int)0: 
                            #line 3967 
      ;
      #line 3968 
      gm_phy_write(hw,port,(unsigned short)16,(unsigned short)6263);
    }
    #line 3975 
    gm_phy_write(hw,port,(unsigned short)22,(unsigned short)((int)pg));
  }
  else 
       #line 3977 
       gm_phy_write(hw,port,(unsigned short)25,(unsigned short)(((((((int)((unsigned short)mode) << 10U) | ((int)((unsigned short)mode) << 8U)) | ((int)((unsigned short)mode) << 6U)) | ((int)((unsigned short)mode) << 4U)) | ((int)((unsigned short)mode) << 2U)) | (int)((unsigned short)mode)));
  #line 3985 
  cif_spin_unlock_bh_phy_lock_of_sky2_port(& sky2->phy_lock);
  #line 3986 
  return;
}

#line 3989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_set_phys_id(struct net_device *dev, enum ethtool_phys_id_state state)
{
  #line 3992 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 3994 
  switch ((unsigned int)state) {
    #line 3995 
    case (unsigned int)1: 
                          #line 3995 
    ;
    #line 3996 
    return 1;
    #line 3997 
    case (unsigned int)0: 
                          #line 3997 
    ;
    #line 3998 
    sky2_led(sky2,(enum led_mode)MO_LED_NORM);
    #line 3999 
    break;
    #line 4000 
    case (unsigned int)2: 
                          #line 4000 
    ;
    #line 4001 
    sky2_led(sky2,(enum led_mode)MO_LED_ON);
    #line 4002 
    break;
    #line 4003 
    case (unsigned int)3: 
                          #line 4003 
    ;
    #line 4004 
    sky2_led(sky2,(enum led_mode)MO_LED_OFF);
    #line 4005 
    break;
  }
  #line 4008 
  return 0;
}

#line 4011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *ecmd)
{
  #line 4014 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4016 
  switch ((unsigned int)sky2->flow_mode) {
    #line 4017 
    case (unsigned int)0: 
                          #line 4017 
    ;
    #line 4018 
    ecmd->rx_pause = 0U;
    #line 4018 
    ecmd->tx_pause = 0U;
    #line 4019 
    break;
    #line 4020 
    case (unsigned int)1: 
                          #line 4020 
    ;
    #line 4021 
    ecmd->tx_pause = 1U;
    #line 4021 
    ecmd->rx_pause = 0U;
    #line 4022 
    break;
    #line 4023 
    case (unsigned int)2: 
                          #line 4023 
    ;
    #line 4024 
    ecmd->tx_pause = 0U;
    #line 4024 
    ecmd->rx_pause = 1U;
    #line 4025 
    break;
    #line 4026 
    case (unsigned int)3: 
                          #line 4026 
    ;
    #line 4027 
    ecmd->rx_pause = 1U;
    #line 4027 
    ecmd->tx_pause = 1U;
  }
  #line 4030 
  ecmd->autoneg = (unsigned int)((int)sky2->flags >> 2) & 1U;
  #line 4032 
  return;
}

#line 4034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_set_pauseparam(struct net_device *dev, struct ethtool_pauseparam *ecmd)
{
  #line 4037 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4039 
  if (ecmd->autoneg == 1U) 
                           #line 4040 
                           sky2->flags = (unsigned short)((unsigned int)sky2->flags | 4U); else 
                                                                    #line 4042 
                                                                    sky2->flags = (unsigned short)((unsigned int)sky2->flags & 65531U);
  #line 4044 
  sky2->flow_mode = sky2_flow((int)ecmd->rx_pause,(int)ecmd->tx_pause);
  #line 4046 
  if ((int)netif_running(dev) != 0) 
                                    #line 4047 
                                    sky2_phy_reinit(sky2);
  #line 4049 
  return 0;
}

#line 4052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_get_coalesce(struct net_device *dev, struct ethtool_coalesce *ecmd)
{
  #line 4055 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4056 
  struct sky2_hw *hw = sky2->hw;
  #line 4058 
  if ((unsigned int)sky2_read8(hw,3784U) == 2U) 
                                                #line 4059 
                                                ecmd->tx_coalesce_usecs = 0U;
  else {
    #line 4061 
    u32 clks = sky2_read32(hw,3776U);
    #line 4062 
    ecmd->tx_coalesce_usecs = sky2_clk2us(hw,clks);
  }
  #line 4064 
  ecmd->tx_max_coalesced_frames = (unsigned int)sky2_read16(hw,3736U);
  #line 4066 
  if ((unsigned int)sky2_read8(hw,3768U) == 2U) 
                                                #line 4067 
                                                ecmd->rx_coalesce_usecs = 0U;
  else {
    #line 4069 
    u32 clks_0 = sky2_read32(hw,3760U);
    #line 4070 
    ecmd->rx_coalesce_usecs = sky2_clk2us(hw,clks_0);
  }
  #line 4072 
  ecmd->rx_max_coalesced_frames = (unsigned int)sky2_read8(hw,3756U);
  #line 4074 
  if ((unsigned int)sky2_read8(hw,3800U) == 2U) 
                                                #line 4075 
                                                ecmd->rx_coalesce_usecs_irq = 0U;
  else {
    #line 4077 
    u32 clks_1 = sky2_read32(hw,3792U);
    #line 4078 
    ecmd->rx_coalesce_usecs_irq = sky2_clk2us(hw,clks_1);
  }
  #line 4081 
  ecmd->rx_max_coalesced_frames_irq = (unsigned int)sky2_read8(hw,3757U);
  #line 4083 
  return 0;
}

#line 4087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_set_coalesce(struct net_device *dev, struct ethtool_coalesce *ecmd)
{
  #line 4090 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4091 
  struct sky2_hw *hw = sky2->hw;
  #line 4092 
  u32 tmax = sky2_clk2us(hw,16777215U);
  #line 4094 
  if ((ecmd->tx_coalesce_usecs > tmax || ecmd->rx_coalesce_usecs > tmax) || ecmd->rx_coalesce_usecs_irq > tmax) 
    #line 4097 
    return -22;
  #line 4099 
  if (ecmd->tx_max_coalesced_frames >= (unsigned int)((int)sky2->tx_ring_size + -1)) 
    #line 4100 
    return -22;
  #line 4101 
  if (ecmd->rx_max_coalesced_frames > 168U) 
                                            #line 4102 
                                            return -22;
  #line 4103 
  if (ecmd->rx_max_coalesced_frames_irq > 168U) 
                                                #line 4104 
                                                return -22;
  #line 4106 
  if (ecmd->tx_coalesce_usecs == 0U) 
                                     #line 4107 
                                     sky2_write8(hw,3784U,(unsigned char)2);
  else {
    #line 4109 
    ;
    #line 4109 
    sky2_write32(hw,3776U,sky2_us2clk(hw,ecmd->tx_coalesce_usecs));
    #line 4111 
    sky2_write8(hw,3784U,(unsigned char)4);
  }
  #line 4113 
  sky2_write16(hw,3736U,(unsigned short)((int)((unsigned short)ecmd->tx_max_coalesced_frames)));
  #line 4115 
  if (ecmd->rx_coalesce_usecs == 0U) 
                                     #line 4116 
                                     sky2_write8(hw,3768U,(unsigned char)2);
  else {
    #line 4118 
    ;
    #line 4118 
    sky2_write32(hw,3760U,sky2_us2clk(hw,ecmd->rx_coalesce_usecs));
    #line 4120 
    sky2_write8(hw,3768U,(unsigned char)4);
  }
  #line 4122 
  sky2_write8(hw,3756U,(unsigned char)((int)((unsigned char)ecmd->rx_max_coalesced_frames)));
  #line 4124 
  if (ecmd->rx_coalesce_usecs_irq == 0U) 
                                         #line 4125 
                                         sky2_write8(hw,3800U,(unsigned char)2);
  else {
    #line 4127 
    ;
    #line 4127 
    sky2_write32(hw,3792U,sky2_us2clk(hw,ecmd->rx_coalesce_usecs_irq));
    #line 4129 
    sky2_write8(hw,3800U,(unsigned char)4);
  }
  #line 4131 
  sky2_write8(hw,3757U,(unsigned char)((int)((unsigned char)ecmd->rx_max_coalesced_frames_irq)));
  #line 4132 
  return 0;
}

#line 4140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static unsigned long roundup_ring_size(unsigned long pending)
{
  #line 4142 
  unsigned long __UNIQUE_ID___x555;
  #line 4142 
  unsigned long tmp_67;
  {
    #line 4142 
    unsigned long tmp_27;
    #line 4142 
    unsigned long tmp_28;
    #line 4142 
    unsigned long tmp_29;
    #line 4142 
    unsigned long tmp_30;
    #line 4142 
    unsigned long tmp_31;
    #line 4142 
    unsigned long tmp_32;
    #line 4142 
    unsigned long tmp_33;
    #line 4142 
    unsigned long tmp_34;
    #line 4142 
    unsigned long tmp_35;
    #line 4142 
    unsigned long tmp_36;
    #line 4142 
    unsigned long tmp_37;
    #line 4142 
    unsigned long tmp_38;
    #line 4142 
    unsigned long tmp_39;
    #line 4142 
    unsigned long tmp_40;
    #line 4142 
    unsigned long tmp_41;
    #line 4142 
    unsigned long tmp_42;
    #line 4142 
    unsigned long tmp_43;
    #line 4142 
    unsigned long tmp_44;
    #line 4142 
    unsigned long tmp_45;
    #line 4142 
    unsigned long tmp_46;
    #line 4142 
    unsigned long tmp_47;
    #line 4142 
    unsigned long tmp_48;
    #line 4142 
    unsigned long tmp_49;
    #line 4142 
    unsigned long tmp_50;
    #line 4142 
    unsigned long tmp_51;
    #line 4142 
    unsigned long tmp_52;
    #line 4142 
    unsigned long tmp_53;
    #line 4142 
    unsigned long tmp_54;
    #line 4142 
    unsigned long tmp_55;
    #line 4142 
    unsigned long tmp_56;
    #line 4142 
    unsigned long tmp_57;
    #line 4142 
    unsigned long tmp_58;
    #line 4142 
    unsigned long tmp_59;
    #line 4142 
    unsigned long tmp_60;
    #line 4142 
    unsigned long tmp_61;
    #line 4142 
    unsigned long tmp;
    #line 4142 
    unsigned long tmp_63;
    #line 4142 
    unsigned long tmp_64;
    #line 4142 
    unsigned long tmp_0;
    #line 4142 
    unsigned long tmp_1;
    #line 4142 
    unsigned long tmp_2;
    #line 4142 
    unsigned long tmp_3;
    #line 4142 
    unsigned long tmp_4;
    #line 4142 
    unsigned long tmp_5;
    #line 4142 
    unsigned long tmp_6;
    #line 4142 
    unsigned long tmp_7;
    #line 4142 
    unsigned long tmp_8;
    #line 4142 
    unsigned long tmp_9;
    #line 4142 
    unsigned long tmp_10;
    #line 4142 
    unsigned long tmp_11;
    #line 4142 
    unsigned long tmp_12;
    #line 4142 
    unsigned long tmp_13;
    #line 4142 
    unsigned long tmp_14;
    #line 4142 
    unsigned long tmp_15;
    #line 4142 
    unsigned long tmp_16;
    #line 4142 
    unsigned long tmp_17;
    #line 4142 
    unsigned long tmp_18;
    #line 4142 
    unsigned long tmp_19;
    #line 4142 
    unsigned long tmp_20;
    #line 4142 
    unsigned long tmp_21;
    #line 4142 
    unsigned long tmp_22;
    #line 4142 
    unsigned long tmp_23;
    #line 4142 
    unsigned long tmp_24;
    #line 4142 
    unsigned long tmp_25;
    #line 4142 
    unsigned long tmp_26;
    #line 4142 
    unsigned long tmp_66;
    #line 4142 
    __UNIQUE_ID___x555 = 128UL;
    #line 4142 
    if (0 != 0) {
      #line 4142 
      if (pending != 0UL) {
        #line 4142 
        if (0 != 0) {
          #line 4142 
          if (pending > 1UL) {
            #line 4142 
            if (((unsigned long long)pending & 9223372036854775808ULL) == 0ULL) {
              #line 4142 
              if (((unsigned long long)pending & 4611686018427387904ULL) == 0ULL) {
                #line 4142 
                if (((unsigned long long)pending & 2305843009213693952ULL) == 0ULL) {
                  #line 4142 
                  if (((unsigned long long)pending & 1152921504606846976ULL) == 0ULL) {
                    #line 4142 
                    if (((unsigned long long)pending & 576460752303423488ULL) == 0ULL) {
                      #line 4142 
                      if (((unsigned long long)pending & 288230376151711744ULL) == 0ULL) {
                        #line 4142 
                        if (((unsigned long long)pending & 144115188075855872ULL) == 0ULL) {
                          #line 4142 
                          if (((unsigned long long)pending & 72057594037927936ULL) == 0ULL) {
                            #line 4142 
                            if (((unsigned long long)pending & 36028797018963968ULL) == 0ULL) {
                              #line 4142 
                              if (((unsigned long long)pending & 18014398509481984ULL) == 0ULL) {
                                #line 4142 
                                if (((unsigned long long)pending & 9007199254740992ULL) == 0ULL) {
                                  #line 4142 
                                  if (((unsigned long long)pending & 4503599627370496ULL) == 0ULL) {
                                    #line 4142 
                                    if (((unsigned long long)pending & 2251799813685248ULL) == 0ULL) {
                                      #line 4142 
                                      if (((unsigned long long)pending & 1125899906842624ULL) == 0ULL) {
                                        #line 4142 
                                        if (((unsigned long long)pending & 562949953421312ULL) == 0ULL) {
                                          #line 4142 
                                          if (((unsigned long long)pending & 281474976710656ULL) == 0ULL) {
                                            #line 4142 
                                            if (((unsigned long long)pending & 140737488355328ULL) == 0ULL) {
                                              #line 4142 
                                              if (((unsigned long long)pending & 70368744177664ULL) == 0ULL) {
                                                #line 4142 
                                                if (((unsigned long long)pending & 35184372088832ULL) == 0ULL) {
                                                  #line 4142 
                                                  if (((unsigned long long)pending & 17592186044416ULL) == 0ULL) {
                                                    #line 4142 
                                                    if (((unsigned long long)pending & 8796093022208ULL) == 0ULL) {
                                                      #line 4142 
                                                      if (((unsigned long long)pending & 4398046511104ULL) == 0ULL) {
                                                        #line 4142 
                                                        if (((unsigned long long)pending & 2199023255552ULL) == 0ULL) {
                                                          #line 4142 
                                                          if (((unsigned long long)pending & 1099511627776ULL) == 0ULL) {
                                                            #line 4142 
                                                            if (((unsigned long long)pending & 549755813888ULL) == 0ULL) {
                                                              #line 4142 
                                                              if (((unsigned long long)pending & 274877906944ULL) == 0ULL) {
                                                                #line 4142 
                                                                if (((unsigned long long)pending & 137438953472ULL) == 0ULL) {
                                                                  #line 4142 
                                                                  if (
                                                                    ((unsigned long long)pending & 68719476736ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 34359738368ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 17179869184ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 8589934592ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 4294967296ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 2147483648ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 1073741824ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 536870912ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 268435456ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 134217728ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 67108864ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 33554432ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 16777216ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 8388608ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 4194304ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 2097152ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 1048576ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 524288ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 262144ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 131072ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 65536ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 32768ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 16384ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 8192ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 4096ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 2048ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 1024ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 512ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 256ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 128ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 64ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 32ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 16ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 8ULL) == 0ULL) {
                                                                    #line 4142 
                                                                    if (
                                                                    ((unsigned long long)pending & 4ULL) != 0ULL) 
                                                                    #line 4142 
                                                                    tmp = 8UL; else 
                                                                    #line 4142 
                                                                    tmp = 4UL;
                                                                    #line 4142 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_0 = 16UL;
                                                                    #line 4142 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_1 = 32UL;
                                                                    #line 4142 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_2 = 64UL;
                                                                    #line 4142 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_3 = 128UL;
                                                                    #line 4142 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_4 = 256UL;
                                                                    #line 4142 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_5 = 512UL;
                                                                    #line 4142 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_6 = 1024UL;
                                                                    #line 4142 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_7 = 2048UL;
                                                                    #line 4142 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_8 = 4096UL;
                                                                    #line 4142 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_9 = 8192UL;
                                                                    #line 4142 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_10 = 16384UL;
                                                                    #line 4142 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_11 = 32768UL;
                                                                    #line 4142 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_12 = 65536UL;
                                                                    #line 4142 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_13 = 131072UL;
                                                                    #line 4142 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_14 = 262144UL;
                                                                    #line 4142 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_15 = 524288UL;
                                                                    #line 4142 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_16 = 1048576UL;
                                                                    #line 4142 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_17 = 2097152UL;
                                                                    #line 4142 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_18 = 4194304UL;
                                                                    #line 4142 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_19 = 8388608UL;
                                                                    #line 4142 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_20 = 16777216UL;
                                                                    #line 4142 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_21 = 33554432UL;
                                                                    #line 4142 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_22 = 67108864UL;
                                                                    #line 4142 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_23 = 134217728UL;
                                                                    #line 4142 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_24 = 268435456UL;
                                                                    #line 4142 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_25 = 536870912UL;
                                                                    #line 4142 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_26 = 1073741824UL;
                                                                    #line 4142 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_27 = 2147483648UL;
                                                                    #line 4142 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_28 = 4294967296UL;
                                                                    #line 4142 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_29 = 8589934592UL;
                                                                    #line 4142 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_30 = 17179869184UL;
                                                                    #line 4142 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_31 = 34359738368UL;
                                                                    #line 4142 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 4142 
                                                                    tmp_32 = 68719476736UL;
                                                                    #line 4142 
                                                                    tmp_33 = tmp_32;
                                                                  }
                                                                  else 
                                                                    #line 4142 
                                                                    tmp_33 = 137438953472UL;
                                                                  #line 4142 
                                                                  tmp_34 = tmp_33;
                                                                }
                                                                else 
                                                                  #line 4142 
                                                                  tmp_34 = 274877906944UL;
                                                                #line 4142 
                                                                tmp_35 = tmp_34;
                                                              }
                                                              else 
                                                                   #line 4142 
                                                                   tmp_35 = 549755813888UL;
                                                              #line 4142 
                                                              tmp_36 = tmp_35;
                                                            }
                                                            else 
                                                                 #line 4142 
                                                                 tmp_36 = 1099511627776UL;
                                                            #line 4142 
                                                            tmp_37 = tmp_36;
                                                          }
                                                          else 
                                                               #line 4142 
                                                               tmp_37 = 2199023255552UL;
                                                          #line 4142 
                                                          tmp_38 = tmp_37;
                                                        }
                                                        else 
                                                             #line 4142 
                                                             tmp_38 = 4398046511104UL;
                                                        #line 4142 
                                                        tmp_39 = tmp_38;
                                                      }
                                                      else 
                                                           #line 4142 
                                                           tmp_39 = 8796093022208UL;
                                                      #line 4142 
                                                      tmp_40 = tmp_39;
                                                    }
                                                    else 
                                                         #line 4142 
                                                         tmp_40 = 17592186044416UL;
                                                    #line 4142 
                                                    tmp_41 = tmp_40;
                                                  }
                                                  else 
                                                       #line 4142 
                                                       tmp_41 = 35184372088832UL;
                                                  #line 4142 
                                                  tmp_42 = tmp_41;
                                                }
                                                else 
                                                     #line 4142 
                                                     tmp_42 = 70368744177664UL;
                                                #line 4142 
                                                tmp_43 = tmp_42;
                                              }
                                              else 
                                                   #line 4142 
                                                   tmp_43 = 140737488355328UL;
                                              #line 4142 
                                              tmp_44 = tmp_43;
                                            }
                                            else 
                                                 #line 4142 
                                                 tmp_44 = 281474976710656UL;
                                            #line 4142 
                                            tmp_45 = tmp_44;
                                          }
                                          else 
                                               #line 4142 
                                               tmp_45 = 562949953421312UL;
                                          #line 4142 
                                          tmp_46 = tmp_45;
                                        }
                                        else 
                                             #line 4142 
                                             tmp_46 = 1125899906842624UL;
                                        #line 4142 
                                        tmp_47 = tmp_46;
                                      }
                                      else 
                                           #line 4142 
                                           tmp_47 = 2251799813685248UL;
                                      #line 4142 
                                      tmp_48 = tmp_47;
                                    }
                                    else 
                                         #line 4142 
                                         tmp_48 = 4503599627370496UL;
                                    #line 4142 
                                    tmp_49 = tmp_48;
                                  }
                                  else 
                                       #line 4142 
                                       tmp_49 = 9007199254740992UL;
                                  #line 4142 
                                  tmp_50 = tmp_49;
                                }
                                else 
                                     #line 4142 
                                     tmp_50 = 18014398509481984UL;
                                #line 4142 
                                tmp_51 = tmp_50;
                              }
                              else 
                                   #line 4142 
                                   tmp_51 = 36028797018963968UL;
                              #line 4142 
                              tmp_52 = tmp_51;
                            }
                            else 
                                 #line 4142 
                                 tmp_52 = 72057594037927936UL;
                            #line 4142 
                            tmp_53 = tmp_52;
                          }
                          else 
                               #line 4142 
                               tmp_53 = 144115188075855872UL;
                          #line 4142 
                          tmp_54 = tmp_53;
                        }
                        else 
                             #line 4142 
                             tmp_54 = 288230376151711744UL;
                        #line 4142 
                        tmp_55 = tmp_54;
                      }
                      else 
                           #line 4142 
                           tmp_55 = 576460752303423488UL;
                      #line 4142 
                      tmp_56 = tmp_55;
                    }
                    else 
                         #line 4142 
                         tmp_56 = 1152921504606846976UL;
                    #line 4142 
                    tmp_57 = tmp_56;
                  }
                  else 
                       #line 4142 
                       tmp_57 = 2305843009213693952UL;
                  #line 4142 
                  tmp_58 = tmp_57;
                }
                else 
                     #line 4142 
                     tmp_58 = 4611686018427387904UL;
                #line 4142 
                tmp_59 = tmp_58;
              }
              else 
                   #line 4142 
                   tmp_59 = 9223372036854775808UL;
              #line 4142 
              tmp_60 = tmp_59;
            }
            else 
                 #line 4142 
                 tmp_60 = 0UL;
            #line 4142 
            tmp_61 = tmp_60;
          }
          else 
               #line 4142 
               tmp_61 = 2UL;
          #line 4142 
          tmp_63 = tmp_61;
        }
        else {
          #line 4142 
          tmp_63 = 1UL << (__ilog2_u64((unsigned long long)pending) + 1);
        }
        #line 4142 
        tmp_64 = tmp_63;
      }
      else 
           #line 4142 
           tmp_64 = 1UL;
      #line 4142 
      tmp_66 = tmp_64;
    }
    else 
         #line 4142 
         tmp_66 = __roundup_pow_of_two(pending + 1UL);
    #line 4142 
    unsigned long __UNIQUE_ID___y556 = tmp_66;
    #line 4142 
    if (__UNIQUE_ID___x555 > __UNIQUE_ID___y556) 
                                                 #line 4142 
                                                 tmp_67 = __UNIQUE_ID___x555; else 
                                                                    #line 4142 
                                                                    tmp_67 = __UNIQUE_ID___y556;
    }
  #line 4142 
  return tmp_67;
}

#line 4145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_get_ringparam(struct net_device *dev, struct ethtool_ringparam *ering)
{
  #line 4148 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4150 
  ering->rx_max_pending = 168U;
  #line 4151 
  ering->tx_max_pending = 1024U;
  #line 4153 
  ering->rx_pending = (unsigned int)sky2->rx_pending;
  #line 4154 
  ering->tx_pending = (unsigned int)sky2->tx_pending;
  #line 4155 
  return;
}

#line 4157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_set_ringparam(struct net_device *dev, struct ethtool_ringparam *ering)
{
  #line 4160 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4162 
  if ((ering->rx_pending + 4294967288U > 160U || ering->tx_pending <= 38U) || ering->tx_pending > 1024U) 
    #line 4166 
    return -22;
  #line 4168 
  sky2_detach(dev);
  #line 4170 
  sky2->rx_pending = (unsigned short)ering->rx_pending;
  #line 4171 
  sky2->tx_pending = (unsigned short)ering->tx_pending;
  #line 4172 
  sky2->tx_ring_size = (unsigned short)roundup_ring_size((unsigned long)sky2->tx_pending);
  #line 4174 
  return sky2_reattach(dev);
}

#line 4177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_get_regs_len(struct net_device *dev)
{
  #line 4179 
  return 16384;
}

#line 4182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_reg_access_ok(struct sky2_hw *hw, unsigned int b)
{
  #line 4188 
  switch (b) {
    #line 4190 
    case (unsigned int)5: 
                          #line 4190 
    ;
    #line 4191 
    case (unsigned int)9: 
                          #line 4191 
    ;
    #line 4192 
    case 14U: 
              #line 4192 
    case 15U: 
              #line 4192 
    ;
    #line 4193 
    case (unsigned int)17: 
                           #line 4193 
    ;
    #line 4193 
    case (unsigned int)19: 
                           #line 4193 
    ;
    #line 4194 
    case 22U: 
              #line 4194 
    case 23U: 
              #line 4194 
    ;
    #line 4195 
    case (unsigned int)25: 
                           #line 4195 
    ;
    #line 4196 
    case (unsigned int)27: 
                           #line 4196 
    ;
    #line 4197 
    case (unsigned int)31: 
                           #line 4197 
    ;
    #line 4198 
    case 40U: 
              #line 4198 
    case 41U: 
              #line 4198 
    case 42U: 
              #line 4198 
    case 43U: 
              #line 4198 
    case 44U: 
              #line 4198 
    case 45U: 
              #line 4198 
    case 46U: 
              #line 4198 
    case 47U: 
              #line 4198 
    ;
    #line 4199 
    case (unsigned int)52: 
                           #line 4199 
    ;
    #line 4199 
    case (unsigned int)54: 
                           #line 4199 
    ;
    #line 4200 
    case 112U: 
               #line 4200 
    case 113U: 
               #line 4200 
    case 114U: 
               #line 4200 
    case 115U: 
               #line 4200 
    case 116U: 
               #line 4200 
    ;
    #line 4201 
    return (unsigned int)hw->ports > 1U;
    #line 4203 
    case (unsigned int)0: 
                          #line 4203 
    ;
    #line 4204 
    case (unsigned int)2: 
                          #line 4204 
    ;
    #line 4205 
    case (unsigned int)4: 
                          #line 4205 
    ;
    #line 4206 
    case (unsigned int)7: 
                          #line 4206 
    ;
    #line 4207 
    case (unsigned int)8: 
                          #line 4207 
    ;
    #line 4208 
    case 12U: 
              #line 4208 
    case 13U: 
              #line 4208 
    ;
    #line 4209 
    case (unsigned int)16: 
                           #line 4209 
    ;
    #line 4209 
    case (unsigned int)18: 
                           #line 4209 
    ;
    #line 4210 
    case 20U: 
              #line 4210 
    case 21U: 
              #line 4210 
    ;
    #line 4211 
    case (unsigned int)24: 
                           #line 4211 
    ;
    #line 4212 
    case (unsigned int)26: 
                           #line 4212 
    ;
    #line 4213 
    case 28U: 
              #line 4213 
    case 29U: 
              #line 4213 
    ;
    #line 4214 
    case (unsigned int)30: 
                           #line 4214 
    ;
    #line 4215 
    case 32U: 
              #line 4215 
    case 33U: 
              #line 4215 
    case 34U: 
              #line 4215 
    case 35U: 
              #line 4215 
    case 36U: 
              #line 4215 
    case 37U: 
              #line 4215 
    case 38U: 
              #line 4215 
    case 39U: 
              #line 4215 
    ;
    #line 4216 
    case (unsigned int)48: 
                           #line 4216 
    ;
    #line 4216 
    case (unsigned int)50: 
                           #line 4216 
    ;
    #line 4217 
    case 56U: 
              #line 4217 
    case 57U: 
              #line 4217 
    case 58U: 
              #line 4217 
    case 59U: 
              #line 4217 
    case 60U: 
              #line 4217 
    ;
    #line 4218 
    case 80U: 
              #line 4218 
    case 81U: 
              #line 4218 
    case 82U: 
              #line 4218 
    case 83U: 
              #line 4218 
    case 84U: 
              #line 4218 
    ;
    #line 4219 
    return 1;
    #line 4221 
    default: 
             #line 4221 
    ;
    #line 4222 
    return 0;
  }
}

#line 4230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *p)
{
  #line 4235 
  unsigned int b;
  #line 4233 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4234 
  void *io = (sky2->hw)->regs;
  #line 4237 
  regs->version = 1U;
  #line 4239 
  b = 0U;
  #line 4239 
  while (b <= 127U) {
    #line 4241 
    if (b == 3U) 
                 #line 4242 
                 memcpy_fromio(p + 16U,io + 16U,112UL);
    else {
      #line 4243 
      if (sky2_reg_access_ok(sky2->hw,b) != 0) 
                                               #line 4244 
                                               memcpy_fromio(p,io,128UL); else 
                                                                    #line 4246 
                                                                    memset(p,0,128UL);
    }
    #line 4248 
    p += 128U;
    #line 4249 
    io += 128U;
    #line 4239 
    b ++;
  }
  #line 4251 
  return;
}

#line 4253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_get_eeprom_len(struct net_device *dev)
{
  #line 4257 
  u16 reg2;
  #line 4255 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4256 
  struct sky2_hw *hw = sky2->hw;
  #line 4259 
  reg2 = sky2_pci_read16(hw,68U);
  #line 4260 
  return 1 << (((int)reg2 >> 14) + 8);
}

#line 4263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_vpd_wait(struct sky2_hw *hw, int cap, u16 busy)
{
  #line 4265 
  unsigned long start = jiffies;
  #line 4267 
  while (1) {
    #line 4267 
    ;
    #line 4267 
    if (! (((int)sky2_pci_read16(hw,(unsigned int)(cap + 2)) & 32768) == (int)busy)) 
      #line 4267 
      break;
    {
      {
        #line 4269 
        unsigned long __dummy;
        #line 4269 
        unsigned long __dummy2;
        }
      #line 4269 
      if (1 != 0) {
        {
          #line 4269 
          unsigned long __dummy_0;
          #line 4269 
          unsigned long __dummy2_0;
          }
        #line 4269 
        if (1 != 0) 
          #line 4269 
          if ((long)((start - jiffies) + 62UL) < 0L) {
            #line 4270 
            _dev_err(& (hw->pdev)->dev,(char *)"VPD cycle timed out\n");
            #line 4271 
            return -110;
          }
      }
      #line 4273 
      msleep(1U);
    }
  }
  #line 4276 
  return 0;
}

#line 4279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_vpd_read(struct sky2_hw *hw, int cap, void *data, u16 offset, size_t length)
{
  #line 4282 
  int rc = 0;
  #line 4284 
  while (length != 0UL) {
    #line 4294 
    unsigned long __UNIQUE_ID___x557;
    #line 4294 
    unsigned long tmp;
    #line 4285 
    u32 val;
    #line 4287 
    sky2_pci_write16(hw,(unsigned int)(cap + 2),(unsigned short)((int)offset));
    #line 4288 
    rc = sky2_vpd_wait(hw,cap,(unsigned short)0);
    #line 4289 
    if (rc != 0) 
                 #line 4290 
                 break;
    #line 4292 
    val = sky2_pci_read32(hw,(unsigned int)(cap + 4));
    {
      #line 4294 
      __UNIQUE_ID___x557 = 4UL;
      #line 4294 
      size_t __UNIQUE_ID___y558 = length;
      #line 4294 
      if (__UNIQUE_ID___x557 < __UNIQUE_ID___y558) 
                                                   #line 4294 
                                                   tmp = __UNIQUE_ID___x557; else 
                                                                    #line 4294 
                                                                    tmp = __UNIQUE_ID___y558;
      }
    #line 4294 
    ;
    #line 4294 
    memcpy(data,(void *)(& val),tmp);
    #line 4295 
    offset = (unsigned short)((unsigned int)offset + 4U);
    #line 4296 
    data += 4UL;
    #line 4297 
    length += 18446744073709551612UL;
  }
  #line 4300 
  return rc;
}

#line 4303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_vpd_write(struct sky2_hw *hw, int cap, void *data, u16 offset, unsigned int length)
{
  #line 4306 
  unsigned int i;
  #line 4307 
  int rc = 0;
  #line 4309 
  i = 0U;
  #line 4309 
  while (i < length) {
    {
      #line 4310 
      u32 val = *((u32 *)(data + (unsigned long)i));
      #line 4312 
      sky2_pci_write32(hw,(unsigned int)(cap + 4),val);
      #line 4313 
      sky2_pci_write32(hw,(unsigned int)(cap + 2),(unsigned int)offset | 32768U);
      #line 4315 
      rc = sky2_vpd_wait(hw,cap,(unsigned short)32768);
      #line 4316 
      if (rc != 0) 
                   #line 4317 
                   break;
    }
    #line 4309 
    i += 4U;
  }
  #line 4319 
  return rc;
}

#line 4322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_get_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *data)
{
  #line 4325 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4326 
  int cap = pci_find_capability((sky2->hw)->pdev,3);
  #line 4328 
  if (cap == 0) 
                #line 4329 
                return -22;
  #line 4331 
  eeprom->magic = 2572528315U;
  #line 4333 
  return sky2_vpd_read(sky2->hw,cap,(void *)data,
                      (unsigned short)((int)((unsigned short)eeprom->offset)),
                      (unsigned long)eeprom->len);
}

#line 4336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_set_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *data)
{
  #line 4339 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4340 
  int cap = pci_find_capability((sky2->hw)->pdev,3);
  #line 4342 
  if (cap == 0) 
                #line 4343 
                return -22;
  #line 4345 
  if (eeprom->magic != 2572528315U) 
                                    #line 4346 
                                    return -22;
  #line 4349 
  if ((eeprom->offset & 3U) != 0U || (eeprom->len & 3U) != 0U) 
                                                               #line 4350 
                                                               return -22;
  #line 4352 
  return sky2_vpd_write(sky2->hw,cap,(void *)data,
                       (unsigned short)((int)((unsigned short)eeprom->offset)),
                       eeprom->len);
}

#line 4355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static netdev_features_t sky2_fix_features(struct net_device *dev, netdev_features_t features)
{
  #line 4358 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4359 
  struct sky2_hw *hw = sky2->hw;
  #line 4364 
  if (dev->mtu > 1500U && (unsigned int)hw->chip_id == 180U) {
    #line 4365 
    netdev_info(dev,(char *)"checksum offload not possible with jumbo frames\n");
    #line 4366 
    features &= 18446744073709486052ULL;
  }
  #line 4370 
  if (((features & 274877906944ULL) != 0ULL && (features & 549755813888ULL) == 0ULL) && ((sky2->hw)->flags & 1024UL) != 0UL) {
    #line 4373 
    netdev_info(dev,(char *)"receive hashing forces receive checksum\n");
    #line 4374 
    features |= 549755813888ULL;
  }
  #line 4377 
  return features;
}

#line 4380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 4382 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4383 
  netdev_features_t changed = dev->features ^ features;
  #line 4385 
  if ((changed & 549755813888ULL) != 0ULL && ((sky2->hw)->flags & 32UL) == 0UL) {
    #line 4388 
    unsigned int tmp_0;
    #line 4388 
    if ((features & 549755813888ULL) != 0ULL) 
                                              #line 4388 
                                              tmp_0 = 8192U; else 
                                                                  #line 4388 
                                                                  tmp_0 = 4096U;
    #line 4387 
    ;
    #line 4387 
    ;
    #line 4387 
    sky2_write32(sky2->hw,rxqaddr[sky2->port] + 1076U,tmp_0);
  }
  #line 4393 
  if ((changed & 274877906944ULL) != 0ULL) 
                                           #line 4394 
                                           rx_set_rss(dev,features);
  #line 4396 
  if ((changed & 384ULL) != 0ULL) 
                                  #line 4397 
                                  sky2_vlan_mode(dev,features);
  #line 4399 
  return 0;
}

#line 4402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct ethtool_ops sky2_ethtool_ops = {.get_drvinfo = & sky2_get_drvinfo, .get_regs_len = & sky2_get_regs_len, .get_regs = & sky2_get_regs, .get_wol = & sky2_get_wol, .set_wol = & sky2_set_wol, .get_msglevel = & sky2_get_msglevel, .set_msglevel = & sky2_set_msglevel, .nway_reset = & sky2_nway_reset, .get_link = & ethtool_op_get_link, .get_eeprom_len = & sky2_get_eeprom_len, .get_eeprom = & sky2_get_eeprom, .set_eeprom = & sky2_set_eeprom, .get_coalesce = & sky2_get_coalesce, .set_coalesce = & sky2_set_coalesce, .get_ringparam = & sky2_get_ringparam, .set_ringparam = & sky2_set_ringparam, .get_pauseparam = & sky2_get_pauseparam, .set_pauseparam = & sky2_set_pauseparam, .get_strings = & sky2_get_strings, .set_phys_id = & sky2_set_phys_id, .get_ethtool_stats = & sky2_get_ethtool_stats, .get_sset_count = & sky2_get_sset_count, .get_link_ksettings = & sky2_get_link_ksettings, .set_link_ksettings = & sky2_set_link_ksettings};
#line 4431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct dentry *sky2_debug;
#line 4443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct vpd_tag vpd_tags[9U] = {{.tag = {(char)'P', (char)'N'}, .label = (char *)"Part Number"}, {.tag = {(char)'E', (char)'C'}, .label = (char *)"Engineering Level"}, {.tag = {(char)'M', (char)'N'}, .label = (char *)"Manufacturer"}, {.tag = {(char)'S', (char)'N'}, .label = (char *)"Serial Number"}, {.tag = {(char)'Y', (char)'A'}, .label = (char *)"Asset Tag"}, {.tag = {(char)'V', (char)'L'}, .label = (char *)"First Error Log Message"}, {.tag = {(char)'V', (char)'F'}, .label = (char *)"Second Error Log Message"}, {.tag = {(char)'V', (char)'B'}, .label = (char *)"Boot Agent ROM Configuration"}, {.tag = {(char)'V', (char)'E'}, .label = (char *)"EFI UNDI Configuration"}};
#line 4455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_show_vpd(struct seq_file *seq, struct sky2_hw *hw)
{
  #line 4457 
  size_t vpd_size;
  #line 4458 
  loff_t offs;
  #line 4459 
  u8 len;
  #line 4460 
  unsigned char *buf;
  #line 4461 
  u16 reg2;
  #line 4463 
  reg2 = sky2_pci_read16(hw,68U);
  #line 4464 
  vpd_size = (unsigned long)(1 << (((int)reg2 >> 14) + 8));
  #line 4466 
  ;
  #line 4466 
  seq_printf(seq,(char *)"%s Product Data\n",pci_name(hw->pdev));
  #line 4467 
  buf = (unsigned char *)kmalloc(vpd_size,3264U);
  #line 4468 
  if (buf == (unsigned char *)0U) {
    #line 4469 
    seq_puts(seq,(char *)"no memory!\n");
    #line 4470 
    return;
  }
  #line 4473 
  if (pci_read_vpd(hw->pdev,0LL,vpd_size,(void *)buf) < 0L) {
    #line 4474 
    seq_puts(seq,(char *)"VPD read failed\n");
    #line 4475 
    goto out;
  }
  #line 4478 
  if ((unsigned int)*buf != 130U) {
    #line 4479 
    seq_printf(seq,(char *)"VPD tag mismatch: %#x\n",(int)*buf);
    #line 4480 
    goto out;
  }
  #line 4482 
  len = *(buf + 1U);
  #line 4483 
  if ((unsigned int)len == 0U || (unsigned long)len > vpd_size + 18446744073709551612UL) {
    #line 4484 
    seq_printf(seq,(char *)"Invalid id length: %d\n",(int)len);
    #line 4485 
    goto out;
  }
  #line 4488 
  seq_printf(seq,(char *)"%.*s\n",(int)len,buf + 3U);
  #line 4489 
  offs = (long long)((int)len + 3);
  #line 4491 
  while (vpd_size + 18446744073709551612UL > (unsigned long)offs) {
    #line 4492 
    int i;
    #line 4494 
    if (memcmp((void *)"RW",(void *)(buf + (unsigned long)offs),2UL) == 0) 
      #line 4495 
      break;
    #line 4496 
    len = *(buf + ((unsigned long)offs + (unsigned long)2U));
    #line 4497 
    if ((unsigned long long)(((long long)len + offs) + 3LL) >= (unsigned long long)vpd_size) 
      #line 4498 
      break;
    #line 4500 
    i = 0;
    #line 4500 
    while ((unsigned int)i <= 8U) {
      #line 4501 
      if (memcmp((void *)(& vpd_tags[i].tag),
               (void *)(buf + (unsigned long)offs),2UL) == 0) {
        #line 4502 
        seq_printf(seq,(char *)" %s: %.*s\n",vpd_tags[i].label,(int)len,buf + ((unsigned long)offs + (unsigned long)3U));
        #line 4504 
        break;
      }
      #line 4500 
      i ++;
    }
    #line 4507 
    offs = (long long)((int)len + 3) + offs;
  }
  #line 4509 
  out: 
       #line 4509 
  ;
  #line 4510 
  kfree((void *)buf);
  #line 4511 
  return;
}

#line 4513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_debug_show(struct seq_file *seq, void *v)
{
  #line 4519 
  unsigned int idx;
  #line 4519 
  unsigned int last;
  #line 4520 
  int sop;
  #line 4554 
  u16 tmp_5;
  #line 4553 
  unsigned int tmp_6;
  #line 4515 
  struct net_device *dev = (struct net_device *)seq->private;
  #line 4516 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4517 
  struct sky2_hw *hw = sky2->hw;
  #line 4518 
  unsigned int port = sky2->port;
  #line 4522 
  sky2_show_vpd(seq,hw);
  #line 4524 
  ;
  #line 4524 
  seq_printf(seq,(char *)"\nIRQ src=%x mask=%x control=%x\n",sky2_read32(hw,8U),sky2_read32(hw,12U),sky2_read32(hw,44U));
  #line 4529 
  if (! netif_running(dev)) {
    #line 4530 
    seq_puts(seq,(char *)"network not running\n");
    #line 4531 
    return 0;
  }
  #line 4534 
  napi_disable(& hw->napi);
  #line 4535 
  last = (unsigned int)sky2_read16(hw,3740U);
  #line 4537 
  seq_printf(seq,(char *)"Status ring %u\n",hw->st_size);
  #line 4538 
  if (hw->st_idx == last) 
                          #line 4539 
                          seq_puts(seq,(char *)"Status ring (empty)\n");
  else {
    #line 4541 
    seq_puts(seq,(char *)"Status ring\n");
    #line 4542 
    idx = hw->st_idx;
    #line 4542 
    while (idx != last && hw->st_size > idx) {
      {
        #line 4544 
        struct sky2_status_le *le = hw->st_le + (unsigned long)idx;
        #line 4545 
        seq_printf(seq,(char *)"[%d] %#x %d %#x\n",idx,(int)le->opcode,(int)le->length,le->status);
      }
      #line 4542 
      idx = (idx + 1U) & (hw->st_size + 4294967295U);
    }
    #line 4548 
    seq_puts(seq,(char *)"\n");
  }
  #line 4554 
  tmp_5 = sky2_read16(hw,txqaddr[port] + 1060U);
  #line 4553 
  if (port == 0U) 
                  #line 4553 
                  tmp_6 = 3728U; else 
                                      #line 4553 
                                      tmp_6 = 3732U;
  #line 4553 
  ;
  #line 4551 
  ;
  #line 4551 
  ;
  #line 4551 
  ;
  #line 4551 
  seq_printf(seq,(char *)"Tx ring pending=%u...%u report=%d done=%d\n",(int)sky2->tx_cons,(int)sky2->tx_prod,(int)sky2_read16(hw,tmp_6),(int)tmp_5);
  #line 4557 
  sop = 1;
  #line 4558 
  idx = (unsigned int)sky2->tx_next;
  #line 4558 
  while ((unsigned int)sky2->tx_prod != idx && (unsigned int)sky2->tx_ring_size > idx) {
    {
      #line 4560 
      struct sky2_tx_le *le_0 = sky2->tx_le + (unsigned long)idx;
      #line 4561 
      u32 a = le_0->addr;
      #line 4563 
      if (sop != 0) 
                    #line 4564 
                    seq_printf(seq,(char *)"%u:",idx);
      #line 4565 
      sop = 0;
      #line 4567 
      switch ((int)le_0->opcode & -129) {
        #line 4568 
        case 33: 
                 #line 4568 
        ;
        #line 4569 
        seq_printf(seq,(char *)" %#x:",a);
        #line 4570 
        break;
        #line 4571 
        case 36: 
                 #line 4571 
        ;
        #line 4572 
        seq_printf(seq,(char *)" mtu=%d",a);
        #line 4573 
        break;
        #line 4574 
        case 34: 
                 #line 4574 
        ;
        #line 4575 
        ;
        #line 4575 
        seq_printf(seq,(char *)" vlan=%d",(int)__builtin_bswap16((unsigned short)((int)le_0->length)));
        #line 4576 
        break;
        #line 4577 
        case 31: 
                 #line 4577 
        ;
        #line 4578 
        seq_printf(seq,(char *)" csum=%#x",a);
        #line 4579 
        break;
        #line 4580 
        case 67: 
                 #line 4580 
        ;
        #line 4581 
        seq_printf(seq,(char *)" tso=%#x(%d)",a,(int)le_0->length);
        #line 4582 
        break;
        #line 4583 
        case 65: 
                 #line 4583 
        ;
        #line 4584 
        seq_printf(seq,(char *)" %#x(%d)",a,(int)le_0->length);
        #line 4585 
        break;
        #line 4586 
        case 64: 
                 #line 4586 
        ;
        #line 4587 
        seq_printf(seq,(char *)" frag=%#x(%d)",a,(int)le_0->length);
        #line 4588 
        break;
        #line 4589 
        default: 
                 #line 4589 
        ;
        #line 4590 
        seq_printf(seq,(char *)" op=%#x,%#x(%d)",(int)le_0->opcode,a,(int)le_0->length);
      }
      #line 4594 
      if (((int)le_0->ctrl & 128) != 0) {
        #line 4595 
        seq_putc(seq,(char)10);
        #line 4596 
        sop = 1;
      }
    }
    #line 4558 
    idx = (idx + 1U) & (unsigned int)((int)sky2->tx_ring_size + -1);
  }
  #line 4600 
  ;
  #line 4600 
  seq_printf(seq,(char *)"\nRx ring hw get=%d put=%d last=%d\n",(int)sky2_read16(hw,rxqaddr[port] + 1120U),(int)sky2_read16(hw,rxqaddr[port] + 1124U),(int)sky2_read16(hw,rxqaddr[port] + 1108U));
  #line 4605 
  sky2_read32(hw,40U);
  #line 4606 
  napi_enable(& hw->napi);
  #line 4607 
  return 0;
}

#line 4609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_debug_open(struct inode *inode, struct file *file)
{
  #line 4609 
  return single_open(file,& sky2_debug_show,inode->i_private);
}

#line 4609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct file_operations sky2_debug_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & sky2_debug_open, .release = & single_release};
#line 4615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_device_event(struct notifier_block *unused, unsigned long event, void *ptr)
{
  #line 4618 
  struct net_device *dev = netdev_notifier_info_to_dev((struct netdev_notifier_info *)ptr);
  #line 4619 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4621 
  if ((dev->netdev_ops)->ndo_open != & sky2_open || sky2_debug == (struct dentry *)0) 
    #line 4622 
    return 0;
  #line 4624 
  switch (event) {
    #line 4625 
    case (unsigned long)11: 
                            #line 4625 
    ;
    #line 4626 
    if (sky2->debugfs != (struct dentry *)0) 
                                             #line 4627 
                                             sky2->debugfs = debugfs_rename(sky2_debug,sky2->debugfs,sky2_debug,(char *)(& dev->name));
    #line 4630 
    break;
    #line 4632 
    case (unsigned long)10: 
                            #line 4632 
    ;
    #line 4633 
    if (sky2->debugfs != (struct dentry *)0) {
      #line 4634 
      netdev_printk((char *)"\001",dev,(char *)"remove debugfs\n");
      #line 4635 
      cif_debugfs_remove(sky2->debugfs);
      #line 4636 
      sky2->debugfs = (struct dentry *)0;
    }
    #line 4638 
    break;
    #line 4640 
    case (unsigned long)1: 
                           #line 4640 
    ;
    #line 4641 
    sky2->debugfs = cif_debugfs_create_file((char *)(& dev->name),(unsigned short)292,sky2_debug,(void *)dev,& sky2_debug_fops);
    #line 4644 
    if ((int)IS_ERR((void *)sky2->debugfs) != 0) 
                                                 #line 4645 
                                                 sky2->debugfs = (struct dentry *)0;
  }
  #line 4648 
  return 0;
}

#line 4651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct notifier_block sky2_notifier = {.notifier_call = & sky2_device_event};
#line 4656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_debug_init(void)
{
  #line 4658 
  struct dentry *ent;
  #line 4660 
  ent = cif_debugfs_create_dir((char *)"sky2",(struct dentry *)0);
  #line 4661 
  if (ent == (struct dentry *)0) 
                                 #line 4662 
                                 return;
  else {
    #line 4661 
    if ((int)IS_ERR((void *)ent) != 0) 
                                       #line 4662 
                                       return;
  }
  #line 4664 
  sky2_debug = ent;
  #line 4665 
  register_netdevice_notifier(& sky2_notifier);
  #line 4666 
  return;
}

#line 4668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_debug_cleanup(void)
{
  #line 4670 
  if (sky2_debug != (struct dentry *)0) {
    #line 4671 
    unregister_netdevice_notifier(& sky2_notifier);
    #line 4672 
    cif_debugfs_remove(sky2_debug);
    #line 4673 
    sky2_debug = (struct dentry *)0;
  }
  #line 4675 
  return;
}

#line 4684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct net_device_ops sky2_netdev_ops[2U] = {{.ndo_open = & sky2_open, .ndo_stop = & sky2_close, .ndo_start_xmit = & sky2_xmit_frame, .ndo_set_rx_mode = & sky2_set_multicast, .ndo_set_mac_address = & sky2_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & sky2_ioctl, .ndo_change_mtu = & sky2_change_mtu, .ndo_tx_timeout = & sky2_tx_timeout, .ndo_get_stats64 = & sky2_get_stats, .ndo_poll_controller = & sky2_netpoll, .ndo_fix_features = & sky2_fix_features, .ndo_set_features = & sky2_set_features}, {.ndo_open = & sky2_open, .ndo_stop = & sky2_close, .ndo_start_xmit = & sky2_xmit_frame, .ndo_set_rx_mode = & sky2_set_multicast, .ndo_set_mac_address = & sky2_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & sky2_ioctl, .ndo_change_mtu = & sky2_change_mtu, .ndo_tx_timeout = & sky2_tx_timeout, .ndo_get_stats64 = & sky2_get_stats, .ndo_fix_features = & sky2_fix_features, .ndo_set_features = & sky2_set_features}};
#line 4719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct net_device *sky2_init_netdev(struct sky2_hw *hw, unsigned int port, int highmem, int wol)
{
  #line 4722 
  struct sky2_port *sky2;
  #line 4724 
  void *iap;
  #line 4723 
  struct net_device *dev = cif_alloc_etherdev_mqs(320,1U,1U);
  #line 4726 
  if (dev == (struct net_device *)0) 
                                     #line 4727 
                                     return (struct net_device *)0;
  #line 4729 
  dev->dev.parent = & (hw->pdev)->dev;
  #line 4730 
  dev->irq = (int)(hw->pdev)->irq;
  #line 4731 
  dev->ethtool_ops = & sky2_ethtool_ops;
  #line 4732 
  dev->watchdog_timeo = 1250;
  #line 4733 
  dev->netdev_ops = & sky2_netdev_ops[port];
  #line 4735 
  sky2 = (struct sky2_port *)netdev_priv(dev);
  #line 4736 
  sky2->netdev = dev;
  #line 4737 
  sky2->hw = hw;
  #line 4738 
  sky2->msg_enable = netif_msg_init(debug,255);
  #line 4740 
  u64_stats_init(& sky2->tx_stats.syncp);
  #line 4741 
  u64_stats_init(& sky2->rx_stats.syncp);
  #line 4744 
  sky2->flags = (unsigned short)6U;
  #line 4745 
  if ((unsigned int)hw->chip_id != 179U) 
                                         #line 4746 
                                         dev->hw_features |= 549755813888ULL;
  #line 4748 
  sky2->flow_mode = FC_BOTH;
  #line 4750 
  sky2->duplex = (unsigned char)255U;
  #line 4751 
  sky2->speed = (unsigned short)65535U;
  #line 4752 
  sky2->advertising = (unsigned short)sky2_supported_modes(hw);
  #line 4753 
  sky2->wol = (unsigned char)wol;
  #line 4755 
  spinlock_check(& sky2->phy_lock);
  {
    #line 4755 
    struct lock_class_key __key;
    #line 4755 
    __raw_spin_lock_init(& sky2->phy_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&sky2->phy_lock)->rlock",& __key);
  }
  #line 4757 
  sky2->tx_pending = (unsigned short)63U;
  #line 4758 
  sky2->tx_ring_size = (unsigned short)roundup_ring_size(63UL);
  #line 4759 
  sky2->rx_pending = (unsigned short)168U;
  #line 4761 
  hw->dev[port] = dev;
  #line 4763 
  sky2->port = port;
  #line 4765 
  dev->hw_features |= 65539ULL;
  #line 4767 
  if (highmem != 0) 
                    #line 4768 
                    dev->features |= 32ULL;
  #line 4771 
  if ((hw->flags & 256UL) == 0UL) 
                                  #line 4772 
                                  dev->hw_features |= 274877906944ULL;
  #line 4774 
  if ((hw->flags & 512UL) == 0UL) {
    #line 4775 
    dev->hw_features |= 384ULL;
    #line 4777 
    dev->vlan_features |= 65539ULL;
  }
  #line 4780 
  dev->features |= dev->hw_features;
  #line 4783 
  dev->min_mtu = 60U;
  #line 4784 
  if ((unsigned int)hw->chip_id + 73U <= 1U) 
                                             #line 4786 
                                             dev->max_mtu = 1500U; else 
                                                                    #line 4788 
                                                                    dev->max_mtu = 9000U;
  #line 4794 
  iap = of_get_mac_address((hw->pdev)->dev.of_node);
  #line 4795 
  if (IS_ERR(iap)) 
                   #line 4798 
                   memcpy_fromio((void *)dev->dev_addr,hw->regs + ((unsigned long)(port * 8U) + (unsigned long)256U),6UL); else 
                                                                    #line 4796 
                                                                    ether_addr_copy(dev->dev_addr,(u8 *)iap);
  #line 4802 
  if (! is_valid_ether_addr(dev->dev_addr)) {
    #line 4803 
    struct sockaddr sa = {.sa_family = (unsigned short)0U, .sa_data = {(char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0}};
    #line 4805 
    netdev_warn(dev,(char *)"Invalid MAC address, defaulting to random\n");
    #line 4807 
    eth_hw_addr_random(dev);
    #line 4808 
    memcpy((void *)(& sa.sa_data),(void *)dev->dev_addr,6UL);
    #line 4809 
    if (sky2_set_mac_address(dev,(void *)(& sa)) != 0) 
                                                       #line 4810 
                                                       netdev_warn(dev,(char *)"Failed to set MAC address.\n");
  }
  #line 4813 
  return dev;
}

#line 4816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_show_addr(struct net_device *dev)
{
  #line 4818 
  struct sky2_port *sky2 = netdev_priv(dev);
  #line 4820 
  if ((sky2->msg_enable & 2U) != 0U) 
                                     #line 4820 
                                     netdev_info(dev,(char *)"addr %pM\n",dev->dev_addr);
  #line 4821 
  return;
}

#line 4824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static irqreturn_t sky2_test_intr(int irq, void *dev_id)
{
  #line 4826 
  struct sky2_hw *hw = (struct sky2_hw *)dev_id;
  #line 4827 
  u32 status = sky2_read32(hw,28U);
  #line 4829 
  if (status == 0U) 
                    #line 4830 
                    return IRQ_NONE;
  #line 4832 
  if ((status & 33554432U) != 0U) {
    #line 4833 
    hw->flags |= 1UL;
    #line 4834 
    __wake_up(& hw->msi_wait,3U,1,(void *)0);
    #line 4835 
    sky2_write8(hw,4U,(unsigned char)64);
  }
  #line 4837 
  sky2_write32(hw,44U,2U);
  #line 4839 
  return IRQ_HANDLED;
}

#line 4843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_test_msi(struct sky2_hw *hw)
{
  #line 4846 
  int err;
  #line 4845 
  struct pci_dev *pdev = hw->pdev;
  {
    #line 4848 
    struct lock_class_key __key;
    #line 4848 
    __init_waitqueue_head(& hw->msi_wait,(char *)"&hw->msi_wait",& __key);
  }
  #line 4850 
  err = cif_request_irq(pdev->irq,& sky2_test_intr,0UL,(char *)"sky2",(void *)hw);
  #line 4851 
  if (err != 0) {
    #line 4852 
    _dev_err(& pdev->dev,(char *)"cannot assign irq %d\n",pdev->irq);
    #line 4853 
    return err;
  }
  #line 4856 
  sky2_write32(hw,12U,33554432U);
  #line 4858 
  sky2_write8(hw,4U,(unsigned char)128);
  #line 4859 
  sky2_read8(hw,4U);
  {
    #line 4861 
    long __ret = 25L;
    #line 4861 
    __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c",4861,0);
    {
      #line 4861 
      bool __cond_0;
      #line 4861 
      __cond_0 = (_Bool)((hw->flags & 1UL) != 0UL);
      #line 4861 
      if ((int)__cond_0 != 0 && __ret == 0L) 
                                             #line 4861 
                                             __ret = 1L;
      #line 4861 
      if ((((int)__cond_0 != 0 || __ret == 0L) != 0) == 0) {
        #line 4861 
        long __ret_0;
        {
          #line 4861 
          struct wait_queue_entry __wq_entry;
          #line 4861 
          __ret_0 = 25L;
          #line 4861 
          init_wait_entry(& __wq_entry,0);
          #line 4861 
          while (1) {
            #line 4861 
            bool __cond;
            #line 4861 
            long __int = prepare_to_wait_event(& hw->msi_wait,& __wq_entry,2);
            #line 4861 
            __cond = (_Bool)((hw->flags & 1UL) != 0UL);
            #line 4861 
            if ((int)__cond != 0 && __ret_0 == 0L) 
                                                   #line 4861 
                                                   __ret_0 = 1L;
            #line 4861 
            if ((((int)__cond != 0 || __ret_0 == 0L) != 0) != 0) 
                                                                 #line 4861 
                                                                 break;
            #line 4861 
            __ret_0 = schedule_timeout(__ret_0);
          }
          #line 4861 
          finish_wait(& hw->msi_wait,& __wq_entry);
          #line 4861 
          __out_0: 
                   #line 4861 
          ;
          }
        #line 4861 
        __ret = __ret_0;
      }
    }
    #line 4861 
    long tmp_3 = __ret;
  }
  #line 4863 
  if ((hw->flags & 1UL) == 0UL) {
    #line 4865 
    _dev_info(& pdev->dev,(char *)"No interrupt generated using MSI, ");
    #line 4868 
    err = -95;
    #line 4869 
    sky2_write8(hw,4U,(unsigned char)64);
  }
  #line 4872 
  sky2_write32(hw,12U,0U);
  #line 4873 
  sky2_read32(hw,12U);
  #line 4875 
  cif_free_irq(pdev->irq,(void *)hw);
  #line 4877 
  return err;
}

#line 4881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static char *sky2_name(u8 chipid, char *buf, int sz)
{
  #line 4883 
  char *name[12U] = {(char *)"XL", (char *)"EC Ultra", (char *)"Extreme", (char *)"EC", (char *)"FE", (char *)"FE+", (char *)"Supreme", (char *)"UL 2", (char *)"Unknown", (char *)"Optima", (char *)"OptimaEEE", (char *)"Optima 2"};
  #line 4898 
  if ((unsigned int)chipid + 77U <= 11U) 
                                         #line 4899 
                                         strncpy(buf,name[(int)chipid + -179],(unsigned long)sz); else 
                                                                    #line 4901 
                                                                    snprintf(buf,(unsigned long)sz,(char *)"(chip %#x)",(int)chipid);
  #line 4902 
  return buf;
}

#line 4905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct dmi_system_id msi_blacklist[6U] = {{.ident = (char *)"Dell Inspiron 1545", .matches = {{.slot = (unsigned char)4U, .substr = {(char)'D', (char)'e', (char)'l', (char)'l', (char)' ', (char)'I', (char)'n', (char)'c', (char)'.'}}, {.slot = (unsigned char)5U, .substr = {(char)'I', (char)'n', (char)'s', (char)'p', (char)'i', (char)'r', (char)'o', (char)'n', (char)' ', (char)'1', (char)'5', (char)'4', (char)'5'}}}}, {.ident = (char *)"Gateway P-79", .matches = {{.slot = (unsigned char)4U, .substr = {(char)'G', (char)'a', (char)'t', (char)'e', (char)'w', (char)'a', (char)'y'}}, {.slot = (unsigned char)5U, .substr = {(char)'P', (char)'-', (char)'7', (char)'9'}}}}, {.ident = (char *)"ASUS P5W DH Deluxe", .matches = {{.slot = (unsigned char)4U, .substr = {(char)'A', (char)'S', (char)'U', (char)'S', (char)'T', (char)'E', (char)'K', (char)' ', (char)'C', (char)'O', (char)'M', (char)'P', (char)'U', (char)'T', (char)'E', (char)'R', (char)' ', (char)'I', (char)'N', (char)'C'}}, {.slot = (unsigned char)5U, .substr = {(char)'P', (char)'5', (char)'W', (char)' ', (char)'D', (char)'H', (char)' ', (char)'D', (char)'e', (char)'l', (char)'u', (char)'x', (char)'e'}}}}, {.ident = (char *)"ASUS P6T", .matches = {{.slot = (unsigned char)11U, .substr = {(char)'A', (char)'S', (char)'U', (char)'S', (char)'T', (char)'e', (char)'K', (char)' ', (char)'C', (char)'o', (char)'m', (char)'p', (char)'u', (char)'t', (char)'e', (char)'r', (char)' ', (char)'I', (char)'N', (char)'C', (char)'.'}}, {.slot = (unsigned char)12U, .substr = {(char)'P', (char)'6', (char)'T'}}}}, {.ident = (char *)"ASUS P6X", .matches = {{.slot = (unsigned char)11U, .substr = {(char)'A', (char)'S', (char)'U', (char)'S', (char)'T', (char)'e', (char)'K', (char)' ', (char)'C', (char)'o', (char)'m', (char)'p', (char)'u', (char)'t', (char)'e', (char)'r', (char)' ', (char)'I', (char)'N', (char)'C', (char)'.'}}, {.slot = (unsigned char)12U, .substr = {(char)'P', (char)'6', (char)'X'}}}}};
#line 4944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 4946 
  struct net_device *dev;
  #line 4946 
  struct net_device *dev1;
  #line 4947 
  struct sky2_hw *hw;
  #line 4948 
  int err;
  #line 4948 
  int wol_default;
  #line 4949 
  u32 reg;
  #line 4950 
  char buf1[16U];
  #line 4948 
  int using_dac = 0;
  #line 4952 
  err = pci_enable_device(pdev);
  #line 4953 
  if (err != 0) {
    #line 4954 
    _dev_err(& pdev->dev,(char *)"cannot enable PCI device\n");
    #line 4955 
    goto err_out;
  }
  #line 4963 
  err = pci_read_config_dword(pdev,68,& reg);
  #line 4964 
  if (err != 0) {
    #line 4965 
    _dev_err(& pdev->dev,(char *)"PCI read config failed\n");
    #line 4966 
    goto err_out_disable;
  }
  #line 4969 
  if (reg == 4294967295U) {
    #line 4970 
    _dev_err(& pdev->dev,(char *)"PCI configuration read error\n");
    #line 4971 
    err = -5;
    #line 4972 
    goto err_out_disable;
  }
  #line 4975 
  err = pci_request_regions(pdev,(char *)"sky2");
  #line 4976 
  if (err != 0) {
    #line 4977 
    _dev_err(& pdev->dev,(char *)"cannot obtain PCI resources\n");
    #line 4978 
    goto err_out_disable;
  }
  #line 4981 
  pci_set_master(pdev);
  #line 4984 
  err = pci_set_dma_mask(pdev,18446744073709551615ULL);
  #line 4983 
  if (err == 0) {
    #line 4985 
    using_dac = 1;
    #line 4986 
    err = pci_set_consistent_dma_mask(pdev,18446744073709551615ULL);
    #line 4987 
    if (err < 0) {
      #line 4988 
      _dev_err(& pdev->dev,(char *)"unable to obtain 64 bit DMA ");
      #line 4990 
      goto err_out_free_regions;
    }
  }
  else {
    #line 4993 
    err = pci_set_dma_mask(pdev,4294967295ULL);
    #line 4994 
    if (err != 0) {
      #line 4995 
      _dev_err(& pdev->dev,(char *)"no usable DMA configuration\n");
      #line 4996 
      goto err_out_free_regions;
    }
  }
  #line 5013 
  if ((int)device_may_wakeup(& pdev->dev) != 0) 
                                                #line 5013 
                                                wol_default = 32; else 
                                                                    #line 5013 
                                                                    wol_default = 0;
  #line 5015 
  err = -12;
  #line 5017 
  hw = (struct sky2_hw *)kzalloc((cif_strlen((char *)"sky2") + cif_strlen(pci_name(pdev))) + 721UL,
                3264U);
  #line 5019 
  if (hw == (struct sky2_hw *)0) 
                                 #line 5020 
                                 goto err_out_free_regions;
  #line 5022 
  hw->pdev = pdev;
  #line 5023 
  ;
  #line 5023 
  sprintf((char *)(& hw->irq_name),(char *)"sky2",pci_name(pdev));
  #line 5025 
  hw->regs = ioremap(pdev->resource[0].start,16384UL);
  #line 5026 
  if (hw->regs == (void *)0) {
    #line 5027 
    _dev_err(& pdev->dev,(char *)"cannot map device registers\n");
    #line 5028 
    goto err_out_free_hw;
  }
  #line 5031 
  err = sky2_init(hw);
  #line 5032 
  if (err != 0) 
                #line 5033 
                goto err_out_iounmap;
  #line 5036 
  hw->st_size = (unsigned int)hw->ports * 2048U;
  #line 5037 
  hw->st_le = (struct sky2_status_le *)pci_alloc_consistent(pdev,(unsigned long)hw->st_size * 8UL,& hw->st_dma);
  #line 5039 
  if (hw->st_le == (struct sky2_status_le *)0) {
    #line 5040 
    err = -12;
    #line 5041 
    goto err_out_reset;
  }
  #line 5044 
  ;
  #line 5044 
  ;
  #line 5044 
  _dev_info(& pdev->dev,(char *)"Yukon-2 %s chip revision %d\n",sky2_name((unsigned char)((int)hw->chip_id),(char *)(& buf1),16),(int)hw->chip_rev);
  #line 5047 
  sky2_reset(hw);
  #line 5049 
  dev = sky2_init_netdev(hw,0U,using_dac,wol_default);
  #line 5050 
  if (dev == (struct net_device *)0) {
    #line 5051 
    err = -12;
    #line 5052 
    goto err_out_free_pci;
  }
  #line 5055 
  if (disable_msi == -1) {
    #line 5056 
    disable_msi = dmi_check_system((struct dmi_system_id *)(& msi_blacklist)) != 0;
  }
  #line 5058 
  if (disable_msi == 0) {
    #line 5058 
    if (pci_enable_msi(pdev) == 0) {
      #line 5059 
      err = sky2_test_msi(hw);
      #line 5060 
      if (err != 0) {
        #line 5061 
        pci_disable_msi(pdev);
        #line 5062 
        if (err != -95) 
                        #line 5063 
                        goto err_out_free_netdev;
      }
    }
  }
  #line 5067 
  netif_napi_add(dev,& hw->napi,& sky2_poll,64);
  #line 5069 
  err = cif_register_netdev(dev);
  #line 5070 
  if (err != 0) {
    #line 5071 
    _dev_err(& pdev->dev,(char *)"cannot register net device\n");
    #line 5072 
    goto err_out_free_netdev;
  }
  #line 5075 
  netif_carrier_off(dev);
  #line 5077 
  sky2_show_addr(dev);
  #line 5079 
  if ((unsigned int)hw->ports > 1U) {
    #line 5080 
    dev1 = sky2_init_netdev(hw,1U,using_dac,wol_default);
    #line 5081 
    if (dev1 == (struct net_device *)0) {
      #line 5082 
      err = -12;
      #line 5083 
      goto err_out_unregister;
    }
    #line 5086 
    err = cif_register_netdev(dev1);
    #line 5087 
    if (err != 0) {
      #line 5088 
      _dev_err(& pdev->dev,(char *)"cannot register second net device\n");
      #line 5089 
      goto err_out_free_dev1;
    }
    #line 5092 
    err = sky2_setup_irq(hw,(char *)(& hw->irq_name));
    #line 5093 
    if (err != 0) 
                  #line 5094 
                  goto err_out_unregister_dev1;
    #line 5096 
    sky2_show_addr(dev1);
  }
  {
    #line 5099 
    struct lock_class_key __key;
    #line 5099 
    init_timer_key(& hw->watchdog_timer,& sky2_watchdog,0U,(char *)"(&hw->watchdog_timer)",& __key);
  }
  {
    #line 5100 
    struct lock_class_key __key_0;
    #line 5100 
    __init_work(& hw->restart_work,0);
    #line 5100 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 5100 
    hw->restart_work.data = __constr_expr_44;
    #line 5100 
    lockdep_init_map(& hw->restart_work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 5100 
    INIT_LIST_HEAD(& hw->restart_work.entry);
    #line 5100 
    hw->restart_work.func = & sky2_restart;
  }
  #line 5102 
  pci_set_drvdata(pdev,(void *)hw);
  #line 5103 
  pdev->d3_delay = 300U;
  #line 5105 
  return 0;
  #line 5107 
  err_out_unregister_dev1: 
                           #line 5107 
  ;
  #line 5108 
  cif_unregister_netdev(dev1);
  #line 5109 
  err_out_free_dev1: 
                     #line 5109 
  ;
  #line 5110 
  cif_free_netdev(dev1);
  #line 5111 
  err_out_unregister: 
                      #line 5111 
  ;
  #line 5112 
  cif_unregister_netdev(dev);
  #line 5113 
  err_out_free_netdev: 
                       #line 5113 
  ;
  #line 5114 
  if ((hw->flags & 1UL) != 0UL) 
                                #line 5115 
                                pci_disable_msi(pdev);
  #line 5116 
  cif_free_netdev(dev);
  #line 5117 
  err_out_free_pci: 
                    #line 5117 
  ;
  #line 5118 
  pci_free_consistent(pdev,(unsigned long)hw->st_size * 8UL,(void *)hw->st_le,hw->st_dma);
  #line 5120 
  err_out_reset: 
                 #line 5120 
  ;
  #line 5121 
  sky2_write8(hw,4U,(unsigned char)1);
  #line 5122 
  err_out_iounmap: 
                   #line 5122 
  ;
  #line 5123 
  iounmap(hw->regs);
  #line 5124 
  err_out_free_hw: 
                   #line 5124 
  ;
  #line 5125 
  kfree((void *)hw);
  #line 5126 
  err_out_free_regions: 
                        #line 5126 
  ;
  #line 5127 
  pci_release_regions(pdev);
  #line 5128 
  err_out_disable: 
                   #line 5128 
  ;
  #line 5129 
  pci_disable_device(pdev);
  #line 5130 
  err_out: 
           #line 5130 
  ;
  #line 5131 
  return err;
}

#line 5134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_remove(struct pci_dev *pdev)
{
  #line 5137 
  int i;
  #line 5136 
  struct sky2_hw *hw = pci_get_drvdata(pdev);
  #line 5139 
  if (hw == (struct sky2_hw *)0) 
                                 #line 5140 
                                 return;
  #line 5142 
  cif_del_timer_sync(& hw->watchdog_timer);
  #line 5143 
  cancel_work_sync(& hw->restart_work);
  #line 5145 
  i = (int)hw->ports + -1;
  #line 5145 
  while (i >= 0) {
    #line 5146 
    cif_unregister_netdev(hw->dev[i]);
    #line 5145 
    i --;
  }
  #line 5148 
  sky2_write32(hw,12U,0U);
  #line 5149 
  sky2_read32(hw,12U);
  #line 5151 
  sky2_power_aux(hw);
  #line 5153 
  sky2_write8(hw,4U,(unsigned char)1);
  #line 5154 
  sky2_read8(hw,4U);
  #line 5156 
  if ((unsigned int)hw->ports > 1U) {
    #line 5157 
    napi_disable(& hw->napi);
    #line 5158 
    cif_free_irq(pdev->irq,(void *)hw);
  }
  #line 5161 
  if ((hw->flags & 1UL) != 0UL) 
                                #line 5162 
                                pci_disable_msi(pdev);
  #line 5163 
  pci_free_consistent(pdev,(unsigned long)hw->st_size * 8UL,(void *)hw->st_le,hw->st_dma);
  #line 5165 
  pci_release_regions(pdev);
  #line 5166 
  pci_disable_device(pdev);
  #line 5168 
  i = (int)hw->ports + -1;
  #line 5168 
  while (i >= 0) {
    #line 5169 
    cif_free_netdev(hw->dev[i]);
    #line 5168 
    i --;
  }
  #line 5171 
  iounmap(hw->regs);
  #line 5172 
  kfree((void *)hw);
  #line 5173 
  return;
}

#line 5175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_suspend(struct device *dev)
{
  #line 5178 
  int i;
  #line 5177 
  struct sky2_hw *hw = dev_get_drvdata(dev);
  #line 5180 
  if (hw == (struct sky2_hw *)0) 
                                 #line 5181 
                                 return 0;
  #line 5183 
  cif_del_timer_sync(& hw->watchdog_timer);
  #line 5184 
  cancel_work_sync(& hw->restart_work);
  #line 5186 
  rtnl_lock();
  #line 5188 
  sky2_all_down(hw);
  #line 5189 
  i = 0;
  #line 5189 
  while ((int)hw->ports > i) {
    {
      #line 5190 
      struct net_device *dev_0 = hw->dev[i];
      #line 5191 
      struct sky2_port *sky2 = netdev_priv(dev_0);
      #line 5193 
      if ((unsigned int)sky2->wol != 0U) 
                                         #line 5194 
                                         sky2_wol_init(sky2);
    }
    #line 5189 
    i ++;
  }
  #line 5197 
  sky2_power_aux(hw);
  #line 5198 
  rtnl_unlock();
  #line 5200 
  return 0;
}

#line 5204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_resume(struct device *dev)
{
  #line 5206 
  void *__mptr;
  #line 5208 
  int err;
  #line 5206 
  __mptr = (void *)dev;
  #line 5206 
  struct pci_dev *pdev = ((struct pci_dev *)(__mptr + 18446744073709551440U));
  #line 5207 
  struct sky2_hw *hw = pci_get_drvdata(pdev);
  #line 5210 
  if (hw == (struct sky2_hw *)0) 
                                 #line 5211 
                                 return 0;
  #line 5214 
  err = pci_write_config_dword(pdev,128,0U);
  #line 5215 
  if (err != 0) {
    #line 5216 
    _dev_err(& pdev->dev,(char *)"PCI write config failed\n");
    #line 5217 
    goto out;
  }
  #line 5220 
  rtnl_lock();
  #line 5221 
  sky2_reset(hw);
  #line 5222 
  sky2_all_up(hw);
  #line 5223 
  rtnl_unlock();
  #line 5225 
  return 0;
  #line 5226 
  out: 
       #line 5226 
  ;
  #line 5228 
  _dev_err(& pdev->dev,(char *)"resume failed (%d)\n",err);
  #line 5229 
  pci_disable_device(pdev);
  #line 5230 
  return err;
}

#line 5233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct dev_pm_ops sky2_pm_ops = {.suspend = & sky2_suspend, .resume = & sky2_resume, .freeze = & sky2_suspend, .thaw = & sky2_resume, .poweroff = & sky2_suspend, .restore = & sky2_resume};
#line 5241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_shutdown(struct pci_dev *pdev)
{
  #line 5244 
  int port;
  #line 5243 
  struct sky2_hw *hw = pci_get_drvdata(pdev);
  #line 5246 
  port = 0;
  #line 5246 
  while ((int)hw->ports > port) {
    {
      #line 5247 
      struct net_device *ndev = hw->dev[port];
      #line 5249 
      rtnl_lock();
      #line 5250 
      if ((int)netif_running(ndev) != 0) {
        #line 5251 
        dev_close(ndev);
        #line 5252 
        netif_device_detach(ndev);
      }
      #line 5254 
      rtnl_unlock();
    }
    #line 5246 
    port ++;
  }
  #line 5256 
  sky2_suspend(& pdev->dev);
  #line 5257 
  ;
  #line 5257 
  pci_wake_from_d3(pdev,(_Bool)((bool)((int)device_may_wakeup(& pdev->dev)) != 0));
  #line 5258 
  pci_set_power_state(pdev,3);
  #line 5259 
  return;
}

#line 5261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static struct pci_driver sky2_driver = {.name = (char *)"sky2", .id_table = (struct pci_device_id *)(& sky2_id_table), .probe = & sky2_probe, .remove = & sky2_remove, .shutdown = & sky2_shutdown, .driver = {.pm = & sky2_pm_ops}};
#line 5270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static int sky2_init_module(void)
{
  #line 5272 
  printk((char *)"\001");
  #line 5274 
  sky2_debug_init();
  #line 5275 
  return cif___pci_register_driver(& sky2_driver,& __this_module,(char *)"sky2");
}

#line 5278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/sky2.c"
static void sky2_cleanup_module(void)
{
  #line 5280 
  cif_pci_unregister_driver(& sky2_driver);
  #line 5281 
  sky2_debug_cleanup();
  #line 5282 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int (*emg_alias_single_release)(struct inode *, struct file *) = & single_release;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
struct file_operations *emg_alias_sky2_debug_fops = & sky2_debug_fops;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
struct pci_driver *emg_alias_sky2_driver = & sky2_driver;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
struct pci_device_id (*emg_alias_sky2_id_table)[43U] = & sky2_id_table;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
struct dev_pm_ops *emg_alias_sky2_pm_ops = & sky2_pm_ops;
#line 100 
#line 100 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 101 
#line 101 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 102 
#line 102 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 103 
#line 103 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 104 
#line 104 
void emg_debugfs_remove(struct dentry *arg0);
#line 105 
#line 105 
int emg_del_timer_sync(struct timer_list *arg0);
#line 106 
#line 106 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 107 
#line 107 
void emg_free_netdev(struct net_device *arg0);
#line 108 
#line 108 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 109 
#line 109 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 110 
#line 110 
int emg_register_netdev(struct net_device *arg0);
#line 111 
#line 111 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 112 
#line 112 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 113 
#line 113 
void emg_unregister_netdev(struct net_device *arg0);
#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_change_mtu(struct net_device *arg0, int arg1)
{
  #line 118 
  return sky2_change_mtu(arg0,arg1);
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_close(struct net_device *arg0)
{
  #line 123 
  return sky2_close(arg0);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_debug_open(struct inode *arg0, struct file *arg1)
{
  #line 128 
  return sky2_debug_open(arg0,arg1);
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
unsigned long long emg_wrapper_sky2_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 133 
  return sky2_fix_features(arg0,arg1);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 138 
  return sky2_get_coalesce(arg0,arg1);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 143 
  sky2_get_drvinfo(arg0,arg1);
  #line 144 
  return;
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 148 
  return sky2_get_eeprom(arg0,arg1,arg2);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_get_eeprom_len(struct net_device *arg0)
{
  #line 153 
  return sky2_get_eeprom_len(arg0);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 158 
  sky2_get_ethtool_stats(arg0,arg1,arg2);
  #line 159 
  return;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 163 
  return sky2_get_link_ksettings(arg0,arg1);
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
unsigned int emg_wrapper_sky2_get_msglevel(struct net_device *arg0)
{
  #line 168 
  return sky2_get_msglevel(arg0);
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 173 
  sky2_get_pauseparam(arg0,arg1);
  #line 174 
  return;
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 178 
  sky2_get_regs(arg0,arg1,arg2);
  #line 179 
  return;
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_get_regs_len(struct net_device *arg0)
{
  #line 183 
  return sky2_get_regs_len(arg0);
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 188 
  sky2_get_ringparam(arg0,arg1);
  #line 189 
  return;
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 193 
  return sky2_get_sset_count(arg0,arg1);
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_get_stats(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 198 
  sky2_get_stats(arg0,arg1);
  #line 199 
  return;
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 203 
  sky2_get_strings(arg0,arg1,arg2);
  #line 204 
  return;
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 208 
  sky2_get_wol(arg0,arg1);
  #line 209 
  return;
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
enum irqreturn emg_wrapper_sky2_intr(int arg0, void *arg1)
{
  #line 213 
  return sky2_intr(arg0,arg1);
}

#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 218 
  return sky2_ioctl(arg0,arg1,arg2);
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_netpoll(struct net_device *arg0)
{
  #line 223 
  sky2_netpoll(arg0);
  #line 224 
  return;
}

#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_nway_reset(struct net_device *arg0)
{
  #line 228 
  return sky2_nway_reset(arg0);
}

#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_open(struct net_device *arg0)
{
  #line 233 
  return sky2_open(arg0);
}

#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 238 
  return sky2_probe(arg0,arg1);
}

#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_remove(struct pci_dev *arg0)
{
  #line 243 
  sky2_remove(arg0);
  #line 244 
  return;
}

#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_resume(struct device *arg0)
{
  #line 248 
  return sky2_resume(arg0);
}

#line 252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 253 
  return sky2_set_coalesce(arg0,arg1);
}

#line 257  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_set_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 258 
  return sky2_set_eeprom(arg0,arg1,arg2);
}

#line 262  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 263 
  return sky2_set_features(arg0,arg1);
}

#line 267  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 268 
  return sky2_set_link_ksettings(arg0,arg1);
}

#line 272  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 273 
  return sky2_set_mac_address(arg0,arg1);
}

#line 277  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 278 
  sky2_set_msglevel(arg0,arg1);
  #line 279 
  return;
}

#line 282  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_set_multicast(struct net_device *arg0)
{
  #line 283 
  sky2_set_multicast(arg0);
  #line 284 
  return;
}

#line 287  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 288 
  return sky2_set_pauseparam(arg0,arg1);
}

#line 292  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 293 
  return sky2_set_phys_id(arg0,arg1);
}

#line 297  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 298 
  return sky2_set_ringparam(arg0,arg1);
}

#line 302  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 303 
  return sky2_set_wol(arg0,arg1);
}

#line 307  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_shutdown(struct pci_dev *arg0)
{
  #line 308 
  sky2_shutdown(arg0);
  #line 309 
  return;
}

#line 312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_wrapper_sky2_suspend(struct device *arg0)
{
  #line 313 
  return sky2_suspend(arg0);
}

#line 317  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
enum irqreturn emg_wrapper_sky2_test_intr(int arg0, void *arg1)
{
  #line 318 
  return sky2_test_intr(arg0,arg1);
}

#line 322  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_wrapper_sky2_tx_timeout(struct net_device *arg0)
{
  #line 323 
  sky2_tx_timeout(arg0);
  #line 324 
  return;
}

#line 327  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
enum netdev_tx emg_wrapper_sky2_xmit_frame(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 328 
  return sky2_xmit_frame(arg0,arg1);
}

#line 332  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
void emg_sky2_cleanup_module(void)
{
  #line 333 
  sky2_cleanup_module();
  #line 334 
  return;
}

#line 336  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
int emg_sky2_init_module(void)
{
  #line 337 
  return sky2_init_module();
}

#line 355  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 358 
  ldv_set_bit(nr,addr);
  #line 359 
  return;
}

#line 362  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 365 
  ldv_clear_bit(nr,addr);
  #line 366 
  return;
}

#line 369  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 372 
  ldv_init_list_head(list);
  #line 373 
  return;
}

#line 383  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static size_t cif_strlen(char *s)
{
  #line 386 
  return ldv_strlen(s);
}

#line 453  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 456 
  return ldv_is_err(ptr);
}

#line 611  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 614 
  return ldv_kmalloc(size,flags);
}

#line 625  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 628 
  return ldv_kcalloc(n,size,flags);
}

#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 649 
  return ldv_kzalloc(size,flags);
}

#line 773  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 776 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 778 
  spin_lock(lock);
  #line 779 
  return;
}

#line 813  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 816 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 818 
  spin_unlock(lock);
  #line 819 
  return;
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_lock_tx_global_lock_of_net_device(spinlock_t *lock)
{
  #line 834 
  ldv_spin_model_lock((char *)"tx_global_lock_of_net_device");
  #line 836 
  spin_lock(lock);
  #line 837 
  return;
}

#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_unlock_tx_global_lock_of_net_device(spinlock_t *lock)
{
  #line 843 
  ldv_spin_model_unlock((char *)"tx_global_lock_of_net_device");
  #line 845 
  spin_unlock(lock);
  #line 846 
  return;
}

#line 919  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 923 
  return emg_schedule_work(work);
}

#line 1069  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_lock_bh_phy_lock_of_sky2_port(spinlock_t *lock)
{
  #line 1072 
  ldv_spin_model_lock((char *)"phy_lock_of_sky2_port");
  #line 1074 
  spin_lock_bh(lock);
  #line 1075 
  return;
}

#line 1078  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_unlock_bh_phy_lock_of_sky2_port(spinlock_t *lock)
{
  #line 1081 
  ldv_spin_model_unlock((char *)"phy_lock_of_sky2_port");
  #line 1083 
  spin_unlock_bh(lock);
  #line 1084 
  return;
}

#line 1087  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 1091 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 1095  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 1099 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 1103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 1107 
  return emg_mod_timer(timer,expires);
}

#line 1111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_lock_phy_lock_of_sky2_port(spinlock_t *lock)
{
  #line 1114 
  ldv_spin_model_lock((char *)"phy_lock_of_sky2_port");
  #line 1116 
  spin_lock(lock);
  #line 1117 
  return;
}

#line 1120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_spin_unlock_phy_lock_of_sky2_port(spinlock_t *lock)
{
  #line 1123 
  ldv_spin_model_unlock((char *)"phy_lock_of_sky2_port");
  #line 1125 
  spin_unlock(lock);
  #line 1126 
  return;
}

#line 1129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_debugfs_remove(struct dentry *dentry)
{
  #line 1133 
  emg_debugfs_remove(dentry);
  #line 1134 
  return;
}

#line 1137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 1141 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 1145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 1149 
  return emg_debugfs_create_dir(name,parent);
}

#line 1153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 1157 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 1161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1165 
  return emg_register_netdev(dev);
}

#line 1169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1173 
  emg_unregister_netdev(dev);
  #line 1174 
  return;
}

#line 1177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1181 
  emg_free_netdev(dev);
  #line 1182 
  return;
}

#line 1185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 1189 
  return emg_del_timer_sync(timer);
}

#line 1193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1197 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/0/concurrency safety/weaver/sky2.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1205 
  emg_pci_unregister_driver(dev);
  #line 1206 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  #line 26 
  return (void *)error;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static bool IS_ERR_OR_NULL(void *ptr)
{
  #line 41 
  return (_Bool)(((long)(ptr == (void *)0) != 0L || (long)((unsigned long)ptr > 18446744073709547520UL) != 0L) != 0);
}

#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 119 
#line 225 
void emg_dispatch_deregister_11(struct pci_driver *arg0);
#line 120 
#line 271 
void emg_dispatch_deregister_15(struct net_device *arg0);
#line 121 
#line 180 
void emg_dispatch_deregister_6(struct file_operations *arg0);
#line 122 
#line 189 
void emg_dispatch_instance_deregister_7(struct timer_list *arg0);
#line 123 
#line 214 
void emg_dispatch_instance_register_10(struct timer_list *arg0);
#line 124 
#line 198 
void emg_dispatch_irq_deregister_8(int arg0);
#line 125 
#line 245 
void emg_dispatch_irq_register_13(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 126 
#line 234 
void emg_dispatch_register_12(struct net_device *arg0);
#line 127 
#line 158 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 128 
#line 169 
void emg_dispatch_register_5(struct file_operations *arg0);
#line 129 
#line 2734 
void *emg_entry_point_insmod(void *arg0);
#line 130 
#line 280 
void *emg_file_operations_character_driver_scenario_sky2_debug_fops(void *arg0);
#line 133 
#line 457 
void *emg_interrupt_interrupt_scenario_sky2_intr(void *arg0);
#line 134 
#line 520 
void *emg_interrupt_interrupt_scenario_sky2_test_intr(void *arg0);
#line 136 
#line 583 
void *emg_net_random_allocationless_scenario_sky2_change_mtu(void *arg0);
#line 137 
#line 1146 
void *emg_pci_pci_scenario_sky2_driver(void *arg0);
#line 139 
#line 1322 
void *emg_pm_pm_ops_scenario_sky2_pm_ops(void *arg0);
#line 143 
#line 2317 
void *emg_timer_timer_scenario_6(void *arg0);
#line 145 
#line 2763 
int main(void);
#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 159 
  int ret;
  #line 160 
  struct emg_struct_pci_scenario_sky2_driver_20 *cf_arg_20;
  #line 161 
  cf_arg_20 = (struct emg_struct_pci_scenario_sky2_driver_20 *)ldv_xmalloc(16UL);
  #line 162 
  cf_arg_20->arg0 = arg0;
  #line 163 
  ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_pci_pci_scenario_sky2_driver,(void *)cf_arg_20);
  #line 164 
  __VERIFIER_assume(ret == 0);
  #line 165 
  return;
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct file_operations *arg0)
{
  #line 170 
  int ret;
  #line 171 
  struct emg_struct_character_driver_scenario_sky2_debug_fops_16 *cf_arg_16;
  #line 172 
  cf_arg_16 = (struct emg_struct_character_driver_scenario_sky2_debug_fops_16 *)ldv_xmalloc(16UL);
  #line 173 
  cf_arg_16->arg0 = arg0;
  #line 174 
  ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_sky2_debug_fops,(void *)cf_arg_16);
  #line 175 
  __VERIFIER_assume(ret == 0);
  #line 176 
  return;
}

#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_6(struct file_operations *arg0)
{
  #line 181 
  int ret;
  #line 182 
  struct emg_struct_character_driver_scenario_sky2_debug_fops_16 *cf_arg_16;
  #line 183 
  ret = pthread_join(emg_thread_16,(void **)0);
  #line 184 
  __VERIFIER_assume(ret == 0);
  #line 185 
  return;
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_7(struct timer_list *arg0)
{
  #line 190 
  int ret;
  #line 191 
  struct emg_struct_timer_scenario_6_22 *cf_arg_22;
  #line 192 
  ret = pthread_join(emg_thread_22,(void **)0);
  #line 193 
  __VERIFIER_assume(ret == 0);
  #line 194 
  return;
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_8(int arg0)
{
  #line 199 
  int ret;
  #line 200 
  struct emg_struct_free_irq_8 *cf_arg_17;
  #line 201 
  struct emg_struct_free_irq_8 *cf_arg_18;
  #line 202 
  if (ldv_undef_int() != 0) {
    #line 203 
    ret = pthread_join(emg_thread_17,(void **)0);
    #line 204 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 207 
    ret = pthread_join(emg_thread_18,(void **)0);
    #line 208 
    __VERIFIER_assume(ret == 0);
  }
  #line 210 
  return;
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_10(struct timer_list *arg0)
{
  #line 215 
  int ret;
  #line 216 
  struct emg_struct_timer_scenario_6_22 *cf_arg_22;
  #line 217 
  cf_arg_22 = (struct emg_struct_timer_scenario_6_22 *)ldv_xmalloc(16UL);
  #line 218 
  cf_arg_22->arg0 = arg0;
  #line 219 
  ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_timer_timer_scenario_6,(void *)cf_arg_22);
  #line 220 
  __VERIFIER_assume(ret == 0);
  #line 221 
  return;
}

#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_11(struct pci_driver *arg0)
{
  #line 226 
  int ret;
  #line 227 
  struct emg_struct_pci_scenario_sky2_driver_20 *cf_arg_20;
  #line 228 
  ret = pthread_join(emg_thread_20,(void **)0);
  #line 229 
  __VERIFIER_assume(ret == 0);
  #line 230 
  return;
}

#line 234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_12(struct net_device *arg0)
{
  #line 235 
  int ret;
  #line 236 
  struct emg_struct_random_allocationless_scenario_sky2_change_mtu_19 *cf_arg_19;
  #line 237 
  cf_arg_19 = (struct emg_struct_random_allocationless_scenario_sky2_change_mtu_19 *)ldv_xmalloc(16UL);
  #line 238 
  cf_arg_19->arg0 = arg0;
  #line 239 
  ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_sky2_change_mtu,(void *)cf_arg_19);
  #line 240 
  __VERIFIER_assume(ret == 0);
  #line 241 
  return;
}

#line 245  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_13(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 246 
  int ret;
  #line 247 
  struct emg_struct_interrupt_scenario_sky2_intr_17 *cf_arg_17;
  #line 248 
  struct emg_struct_interrupt_scenario_sky2_intr_17 *cf_arg_18;
  #line 249 
  if (ldv_undef_int() != 0) {
    #line 250 
    cf_arg_17 = (struct emg_struct_interrupt_scenario_sky2_intr_17 *)ldv_xmalloc(40UL);
    #line 251 
    cf_arg_17->arg0 = arg0;
    #line 252 
    cf_arg_17->arg1 = arg1;
    #line 253 
    cf_arg_17->arg2 = arg2;
    #line 254 
    cf_arg_17->arg3 = arg3;
    #line 255 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_sky2_intr,(void *)cf_arg_17);
    #line 256 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 259 
    cf_arg_18 = (struct emg_struct_interrupt_scenario_sky2_intr_17 *)ldv_xmalloc(40UL);
    #line 260 
    cf_arg_18->arg0 = arg0;
    #line 261 
    cf_arg_18->arg1 = arg1;
    #line 262 
    cf_arg_18->arg2 = arg2;
    #line 263 
    cf_arg_18->arg3 = arg3;
    #line 264 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_sky2_test_intr,(void *)cf_arg_18);
    #line 265 
    __VERIFIER_assume(ret == 0);
  }
  #line 267 
  return;
}

#line 271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_15(struct net_device *arg0)
{
  #line 272 
  int ret;
  #line 273 
  struct emg_struct_random_allocationless_scenario_sky2_change_mtu_19 *cf_arg_19;
  #line 274 
  ret = pthread_join(emg_thread_19,(void **)0);
  #line 275 
  __VERIFIER_assume(ret == 0);
  #line 276 
  return;
}

#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_sky2_debug_fops(void *arg0)
{
  #line 283 
  struct file_operations *emg_16_container;
  #line 284 
  long long emg_16_emg_param_1_0;
  #line 285 
  char *emg_16_emg_param_1_2;
  #line 286 
  char *emg_16_emg_param_1_4;
  #line 287 
  int emg_16_emg_param_2_1;
  #line 288 
  long long *emg_16_emg_param_3_3;
  #line 289 
  long long *emg_16_emg_param_3_5;
  #line 290 
  struct file *emg_16_resource_0;
  #line 291 
  struct inode *emg_16_resource_1;
  #line 292 
  int emg_16_ret;
  #line 293 
  unsigned long emg_16_size_cnt;
  #line 294 
  int emg_repeat_cnt_main_16_0 = 1;
  #line 295 
  int emg_repeat_cnt_main_16_1 = 1;
  #line 296 
  int emg_repeat_cnt_call_16 = 1;
  #line 298 
  struct emg_struct_character_driver_scenario_sky2_debug_fops_16 *data = (struct emg_struct_character_driver_scenario_sky2_debug_fops_16 *)arg0;
  #line 302 
  emg_16_ret = ldv_undef_int();
  #line 303 
  emg_16_container = emg_alias_sky2_debug_fops;
  #line 304 
  emg_16_ret = ldv_undef_int();
  #line 306 
  __VERIFIER_assume(data->arg0 == emg_alias_sky2_debug_fops);
  #line 308 
  if (data != (struct emg_struct_character_driver_scenario_sky2_debug_fops_16 *)0) {
    #line 309 
    emg_16_container = data->arg0;
    #line 310 
    ldv_free((void *)data);
  }
  #line 315 
  emg_16_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 316 
  emg_16_size_cnt = (unsigned long)ldv_undef_int();
  #line 320 
  goto emg_main_16;
  #line 324 
  return (void *)0;
  #line 327 
  emg_call_16: 
               #line 327 
  ;
  #line 328 
  if (ldv_undef_int() != 0) {
    #line 329 
    switch (ldv_undef_int()) {
      #line 330 
      case 0: 
              #line 330 
      ;
      #line 332 
      emg_16_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 332 
      emg_16_emg_param_1_2 = emg_16_emg_param_1_2;
      #line 333 
      emg_16_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 333 
      emg_16_emg_param_3_3 = emg_16_emg_param_3_3;
      #line 337 
      seq_read(emg_16_resource_0,emg_16_emg_param_1_2,emg_16_size_cnt,emg_16_emg_param_3_3);
      #line 341 
      ldv_free((void *)emg_16_emg_param_1_2);
      #line 342 
      ldv_free((void *)emg_16_emg_param_3_3);
      #line 344 
      break;
      #line 346 
      case 1: 
              #line 346 
      ;
      #line 348 
      seq_lseek(emg_16_resource_0,emg_16_emg_param_1_0,emg_16_emg_param_2_1);
      #line 350 
      break;
      #line 352 
      case 2: 
              #line 352 
      ;
      #line 359 
      __VERIFIER_assume(emg_16_size_cnt <= 2147479552UL);
      #line 360 
      emg_16_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 360 
      emg_16_emg_param_1_4 = emg_16_emg_param_1_4;
      #line 361 
      emg_16_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 361 
      emg_16_emg_param_3_5 = emg_16_emg_param_3_5;
      #line 365 
      if (emg_16_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 366 
        (*(emg_16_container->write))(emg_16_resource_0,emg_16_emg_param_1_4,emg_16_size_cnt,emg_16_emg_param_3_5);
      #line 371 
      ldv_free((void *)emg_16_emg_param_1_4);
      #line 372 
      ldv_free((void *)emg_16_emg_param_3_5);
      #line 374 
      break;
      #line 376 
      default: 
               #line 376 
      ;
      #line 376 
      __VERIFIER_assume(0);
    }
    #line 379 
    if (emg_repeat_cnt_call_16 > 0) {
      #line 380 
      emg_repeat_cnt_call_16 --;
      #line 382 
      goto emg_call_16;
    }
    else 
         #line 384 
         __VERIFIER_assume(0);
  }
  else {
    #line 390 
    (*emg_alias_single_release)(emg_16_resource_1,emg_16_resource_0);
    #line 393 
    if (emg_repeat_cnt_main_16_0 > 0) {
      #line 394 
      emg_repeat_cnt_main_16_0 --;
      #line 396 
      goto emg_main_16;
    }
    else 
         #line 398 
         __VERIFIER_assume(0);
  }
  #line 404 
  return (void *)0;
  #line 407 
  emg_main_16: 
               #line 407 
  ;
  #line 408 
  if (ldv_undef_int() != 0) {
    #line 410 
    emg_16_ret = emg_wrapper_sky2_debug_open(emg_16_resource_1,emg_16_resource_0);
    #line 415 
    emg_16_ret = ldv_filter_err_code(emg_16_ret);
    #line 418 
    if (ldv_undef_int() != 0) {
      #line 420 
      __VERIFIER_assume(emg_16_ret == 0);
      #line 424 
      goto emg_call_16;
    }
    else {
      #line 429 
      __VERIFIER_assume(emg_16_ret != 0);
      #line 432 
      if (emg_repeat_cnt_main_16_1 > 0) {
        #line 433 
        emg_repeat_cnt_main_16_1 --;
        #line 435 
        goto emg_main_16;
      }
      else 
           #line 437 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 444 
       ldv_free((void *)emg_16_resource_0);
  #line 452 
  return (void *)0;
}

#line 457  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_sky2_intr(void *arg0)
{
  #line 460 
  enum irqreturn (*emg_17_callback)(int , void *);
  #line 461 
  void *emg_17_data;
  #line 462 
  int emg_17_line;
  #line 463 
  enum irqreturn emg_17_ret_val;
  #line 464 
  enum irqreturn (*emg_17_thread)(int , void *);
  #line 466 
  struct emg_struct_interrupt_scenario_sky2_intr_17 *data = (struct emg_struct_interrupt_scenario_sky2_intr_17 *)arg0;
  #line 469 
  emg_17_callback = & emg_wrapper_sky2_intr;
  #line 472 
  if (data != (struct emg_struct_interrupt_scenario_sky2_intr_17 *)0) {
    #line 473 
    emg_17_line = data->arg0;
    #line 474 
    emg_17_callback = data->arg1;
    #line 475 
    emg_17_thread = data->arg2;
    #line 476 
    emg_17_data = data->arg3;
    #line 477 
    ldv_free((void *)data);
  }
  #line 483 
  ldv_switch_to_interrupt_context();
  #line 487 
  emg_17_ret_val = emg_wrapper_sky2_intr(emg_17_line,emg_17_data);
  #line 492 
  ldv_switch_to_process_context();
  #line 495 
  if (ldv_undef_int() != 0) {
    #line 497 
    __VERIFIER_assume(emg_17_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 501 
    if (emg_17_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 502 
                                                              (*emg_17_thread)(emg_17_line,emg_17_data);
  }
  else 
       #line 507 
       __VERIFIER_assume(emg_17_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 515 
  return (void *)0;
}

#line 520  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_sky2_test_intr(void *arg0)
{
  #line 523 
  enum irqreturn (*emg_18_callback)(int , void *);
  #line 524 
  void *emg_18_data;
  #line 525 
  int emg_18_line;
  #line 526 
  enum irqreturn emg_18_ret_val;
  #line 527 
  enum irqreturn (*emg_18_thread)(int , void *);
  #line 529 
  struct emg_struct_interrupt_scenario_sky2_intr_17 *data = (struct emg_struct_interrupt_scenario_sky2_intr_17 *)arg0;
  #line 532 
  emg_18_callback = & emg_wrapper_sky2_test_intr;
  #line 535 
  if (data != (struct emg_struct_interrupt_scenario_sky2_intr_17 *)0) {
    #line 536 
    emg_18_line = data->arg0;
    #line 537 
    emg_18_callback = data->arg1;
    #line 538 
    emg_18_thread = data->arg2;
    #line 539 
    emg_18_data = data->arg3;
    #line 540 
    ldv_free((void *)data);
  }
  #line 546 
  ldv_switch_to_interrupt_context();
  #line 550 
  emg_18_ret_val = emg_wrapper_sky2_test_intr(emg_18_line,emg_18_data);
  #line 555 
  ldv_switch_to_process_context();
  #line 558 
  if (ldv_undef_int() != 0) {
    #line 560 
    __VERIFIER_assume(emg_18_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 564 
    if (emg_18_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 565 
                                                              (*emg_18_thread)(emg_18_line,emg_18_data);
  }
  else 
       #line 570 
       __VERIFIER_assume(emg_18_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 578 
  return (void *)0;
}

#line 583  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_sky2_change_mtu(void *arg0)
{
  #line 586 
  struct net_device *emg_19_container;
  #line 587 
  struct sk_buff *emg_19_emg_param_0_30;
  #line 588 
  struct sk_buff *emg_19_emg_param_0_4;
  #line 589 
  int emg_19_emg_param_1_0;
  #line 590 
  struct ifreq *emg_19_emg_param_1_1;
  #line 591 
  struct ethtool_eeprom *emg_19_emg_param_1_10;
  #line 592 
  struct ethtool_stats *emg_19_emg_param_1_12;
  #line 593 
  struct ethtool_link_ksettings *emg_19_emg_param_1_14;
  #line 594 
  struct ethtool_pauseparam *emg_19_emg_param_1_15;
  #line 595 
  struct ethtool_regs *emg_19_emg_param_1_16;
  #line 596 
  struct ethtool_ringparam *emg_19_emg_param_1_18;
  #line 597 
  int emg_19_emg_param_1_19;
  #line 598 
  unsigned int emg_19_emg_param_1_20;
  #line 599 
  struct ethtool_wolinfo *emg_19_emg_param_1_22;
  #line 600 
  int emg_19_emg_param_1_23;
  #line 601 
  struct ifreq *emg_19_emg_param_1_24;
  #line 602 
  unsigned long long emg_19_emg_param_1_26;
  #line 603 
  struct rtnl_link_stats64 *emg_19_emg_param_1_27;
  #line 604 
  unsigned long long emg_19_emg_param_1_28;
  #line 605 
  void *emg_19_emg_param_1_29;
  #line 606 
  void *emg_19_emg_param_1_3;
  #line 607 
  struct ethtool_coalesce *emg_19_emg_param_1_31;
  #line 608 
  struct ethtool_eeprom *emg_19_emg_param_1_32;
  #line 609 
  struct ethtool_link_ksettings *emg_19_emg_param_1_34;
  #line 610 
  unsigned int emg_19_emg_param_1_35;
  #line 611 
  struct ethtool_pauseparam *emg_19_emg_param_1_36;
  #line 612 
  enum ethtool_phys_id_state *emg_19_emg_param_1_37;
  #line 613 
  struct ethtool_ringparam *emg_19_emg_param_1_38;
  #line 614 
  struct ethtool_wolinfo *emg_19_emg_param_1_39;
  #line 615 
  unsigned long long emg_19_emg_param_1_5;
  #line 616 
  unsigned long long emg_19_emg_param_1_6;
  #line 617 
  struct rtnl_link_stats64 *emg_19_emg_param_1_7;
  #line 618 
  struct ethtool_coalesce *emg_19_emg_param_1_8;
  #line 619 
  struct ethtool_drvinfo *emg_19_emg_param_1_9;
  #line 620 
  unsigned char *emg_19_emg_param_2_11;
  #line 621 
  unsigned long long *emg_19_emg_param_2_13;
  #line 622 
  void *emg_19_emg_param_2_17;
  #line 623 
  int emg_19_emg_param_2_2;
  #line 624 
  unsigned char *emg_19_emg_param_2_21;
  #line 625 
  int emg_19_emg_param_2_25;
  #line 626 
  unsigned char *emg_19_emg_param_2_33;
  #line 627 
  int emg_repeat_cnt_call_19 = 1;
  #line 629 
  struct emg_struct_random_allocationless_scenario_sky2_change_mtu_19 *data = (struct emg_struct_random_allocationless_scenario_sky2_change_mtu_19 *)arg0;
  #line 634 
  if (data != (struct emg_struct_random_allocationless_scenario_sky2_change_mtu_19 *)0) {
    #line 635 
    emg_19_container = data->arg0;
    #line 636 
    ldv_free((void *)data);
  }
  #line 641 
  goto emg_call_19;
  #line 645 
  return (void *)0;
  #line 648 
  emg_call_19: 
               #line 648 
  ;
  #line 649 
  switch (ldv_undef_int()) {
    #line 650 
    case 0: 
            #line 650 
    ;
    #line 652 
    emg_19_emg_param_1_39 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 652 
    emg_19_emg_param_1_39 = emg_19_emg_param_1_39;
    #line 656 
    emg_wrapper_sky2_set_wol(emg_19_container,emg_19_emg_param_1_39);
    #line 660 
    ldv_free((void *)emg_19_emg_param_1_39);
    #line 662 
    break;
    #line 664 
    case 1: 
            #line 664 
    ;
    #line 666 
    emg_19_emg_param_1_38 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 666 
    emg_19_emg_param_1_38 = emg_19_emg_param_1_38;
    #line 670 
    emg_wrapper_sky2_set_ringparam(emg_19_container,emg_19_emg_param_1_38);
    #line 674 
    ldv_free((void *)emg_19_emg_param_1_38);
    #line 676 
    break;
    #line 678 
    case 2: 
            #line 678 
    ;
    #line 680 
    emg_19_emg_param_1_37 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 680 
    emg_19_emg_param_1_37 = emg_19_emg_param_1_37;
    #line 684 
    emg_wrapper_sky2_set_phys_id(emg_19_container,*emg_19_emg_param_1_37);
    #line 688 
    ldv_free((void *)emg_19_emg_param_1_37);
    #line 690 
    break;
    #line 692 
    case 3: 
            #line 692 
    ;
    #line 694 
    emg_19_emg_param_1_36 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 694 
    emg_19_emg_param_1_36 = emg_19_emg_param_1_36;
    #line 698 
    emg_wrapper_sky2_set_pauseparam(emg_19_container,emg_19_emg_param_1_36);
    #line 702 
    ldv_free((void *)emg_19_emg_param_1_36);
    #line 704 
    break;
    #line 706 
    case 4: 
            #line 706 
    ;
    #line 708 
    emg_wrapper_sky2_set_msglevel(emg_19_container,emg_19_emg_param_1_35);
    #line 710 
    break;
    #line 712 
    case 5: 
            #line 712 
    ;
    #line 714 
    emg_19_emg_param_1_34 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 714 
    emg_19_emg_param_1_34 = emg_19_emg_param_1_34;
    #line 718 
    emg_wrapper_sky2_set_link_ksettings(emg_19_container,emg_19_emg_param_1_34);
    #line 722 
    ldv_free((void *)emg_19_emg_param_1_34);
    #line 724 
    break;
    #line 726 
    case 6: 
            #line 726 
    ;
    #line 728 
    emg_19_emg_param_1_32 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 728 
    emg_19_emg_param_1_32 = emg_19_emg_param_1_32;
    #line 729 
    emg_19_emg_param_2_33 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 729 
    emg_19_emg_param_2_33 = emg_19_emg_param_2_33;
    #line 733 
    emg_wrapper_sky2_set_eeprom(emg_19_container,emg_19_emg_param_1_32,emg_19_emg_param_2_33);
    #line 737 
    ldv_free((void *)emg_19_emg_param_1_32);
    #line 738 
    ldv_free((void *)emg_19_emg_param_2_33);
    #line 740 
    break;
    #line 742 
    case 7: 
            #line 742 
    ;
    #line 744 
    emg_19_emg_param_1_31 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 744 
    emg_19_emg_param_1_31 = emg_19_emg_param_1_31;
    #line 748 
    emg_wrapper_sky2_set_coalesce(emg_19_container,emg_19_emg_param_1_31);
    #line 752 
    ldv_free((void *)emg_19_emg_param_1_31);
    #line 754 
    break;
    #line 756 
    case 8: 
            #line 756 
    ;
    #line 758 
    emg_wrapper_sky2_nway_reset(emg_19_container);
    #line 760 
    break;
    #line 762 
    case 9: 
            #line 762 
    ;
    #line 764 
    eth_validate_addr(emg_19_container);
    #line 766 
    break;
    #line 768 
    case 10: 
             #line 768 
    ;
    #line 770 
    emg_wrapper_sky2_tx_timeout(emg_19_container);
    #line 772 
    break;
    #line 774 
    case 11: 
             #line 774 
    ;
    #line 776 
    emg_19_emg_param_0_30 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 776 
    emg_19_emg_param_0_30 = emg_19_emg_param_0_30;
    #line 780 
    emg_wrapper_sky2_xmit_frame(emg_19_emg_param_0_30,emg_19_container);
    #line 784 
    ldv_free((void *)emg_19_emg_param_0_30);
    #line 786 
    break;
    #line 788 
    case 12: 
             #line 788 
    ;
    #line 790 
    emg_wrapper_sky2_set_multicast(emg_19_container);
    #line 792 
    break;
    #line 794 
    case 13: 
             #line 794 
    ;
    #line 796 
    emg_19_emg_param_1_29 = ldv_xmalloc_unknown_size(0UL);
    #line 796 
    emg_19_emg_param_1_29 = emg_19_emg_param_1_29;
    #line 800 
    emg_wrapper_sky2_set_mac_address(emg_19_container,emg_19_emg_param_1_29);
    #line 804 
    ldv_free(emg_19_emg_param_1_29);
    #line 806 
    break;
    #line 808 
    case 14: 
             #line 808 
    ;
    #line 810 
    emg_wrapper_sky2_set_features(emg_19_container,emg_19_emg_param_1_28);
    #line 812 
    break;
    #line 814 
    case 15: 
             #line 814 
    ;
    #line 816 
    emg_wrapper_sky2_netpoll(emg_19_container);
    #line 818 
    break;
    #line 820 
    case 16: 
             #line 820 
    ;
    #line 822 
    emg_19_emg_param_1_27 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 822 
    emg_19_emg_param_1_27 = emg_19_emg_param_1_27;
    #line 826 
    emg_wrapper_sky2_get_stats(emg_19_container,emg_19_emg_param_1_27);
    #line 830 
    ldv_free((void *)emg_19_emg_param_1_27);
    #line 832 
    break;
    #line 834 
    case 17: 
             #line 834 
    ;
    #line 836 
    emg_wrapper_sky2_fix_features(emg_19_container,emg_19_emg_param_1_26);
    #line 838 
    break;
    #line 840 
    case 18: 
             #line 840 
    ;
    #line 842 
    emg_19_emg_param_1_24 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 842 
    emg_19_emg_param_1_24 = emg_19_emg_param_1_24;
    #line 846 
    emg_wrapper_sky2_ioctl(emg_19_container,emg_19_emg_param_1_24,emg_19_emg_param_2_25);
    #line 850 
    ldv_free((void *)emg_19_emg_param_1_24);
    #line 852 
    break;
    #line 854 
    case 19: 
             #line 854 
    ;
    #line 856 
    emg_wrapper_sky2_change_mtu(emg_19_container,emg_19_emg_param_1_23);
    #line 858 
    break;
    #line 860 
    case 20: 
             #line 860 
    ;
    #line 862 
    emg_19_emg_param_1_22 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 862 
    emg_19_emg_param_1_22 = emg_19_emg_param_1_22;
    #line 866 
    emg_wrapper_sky2_get_wol(emg_19_container,emg_19_emg_param_1_22);
    #line 870 
    ldv_free((void *)emg_19_emg_param_1_22);
    #line 872 
    break;
    #line 874 
    case 21: 
             #line 874 
    ;
    #line 876 
    emg_19_emg_param_2_21 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 876 
    emg_19_emg_param_2_21 = emg_19_emg_param_2_21;
    #line 880 
    emg_wrapper_sky2_get_strings(emg_19_container,emg_19_emg_param_1_20,emg_19_emg_param_2_21);
    #line 884 
    ldv_free((void *)emg_19_emg_param_2_21);
    #line 886 
    break;
    #line 888 
    case 22: 
             #line 888 
    ;
    #line 890 
    emg_wrapper_sky2_get_sset_count(emg_19_container,emg_19_emg_param_1_19);
    #line 892 
    break;
    #line 894 
    case 23: 
             #line 894 
    ;
    #line 896 
    emg_19_emg_param_1_18 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 896 
    emg_19_emg_param_1_18 = emg_19_emg_param_1_18;
    #line 900 
    emg_wrapper_sky2_get_ringparam(emg_19_container,emg_19_emg_param_1_18);
    #line 904 
    ldv_free((void *)emg_19_emg_param_1_18);
    #line 906 
    break;
    #line 908 
    case 24: 
             #line 908 
    ;
    #line 910 
    emg_wrapper_sky2_get_regs_len(emg_19_container);
    #line 912 
    break;
    #line 914 
    case 25: 
             #line 914 
    ;
    #line 916 
    emg_19_emg_param_1_16 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 916 
    emg_19_emg_param_1_16 = emg_19_emg_param_1_16;
    #line 917 
    emg_19_emg_param_2_17 = ldv_xmalloc_unknown_size(0UL);
    #line 917 
    emg_19_emg_param_2_17 = emg_19_emg_param_2_17;
    #line 921 
    emg_wrapper_sky2_get_regs(emg_19_container,emg_19_emg_param_1_16,emg_19_emg_param_2_17);
    #line 925 
    ldv_free((void *)emg_19_emg_param_1_16);
    #line 926 
    ldv_free(emg_19_emg_param_2_17);
    #line 928 
    break;
    #line 930 
    case 26: 
             #line 930 
    ;
    #line 932 
    emg_19_emg_param_1_15 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 932 
    emg_19_emg_param_1_15 = emg_19_emg_param_1_15;
    #line 936 
    emg_wrapper_sky2_get_pauseparam(emg_19_container,emg_19_emg_param_1_15);
    #line 940 
    ldv_free((void *)emg_19_emg_param_1_15);
    #line 942 
    break;
    #line 944 
    case 27: 
             #line 944 
    ;
    #line 946 
    emg_wrapper_sky2_get_msglevel(emg_19_container);
    #line 948 
    break;
    #line 950 
    case 28: 
             #line 950 
    ;
    #line 952 
    emg_19_emg_param_1_14 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 952 
    emg_19_emg_param_1_14 = emg_19_emg_param_1_14;
    #line 956 
    emg_wrapper_sky2_get_link_ksettings(emg_19_container,emg_19_emg_param_1_14);
    #line 960 
    ldv_free((void *)emg_19_emg_param_1_14);
    #line 962 
    break;
    #line 964 
    case 29: 
             #line 964 
    ;
    #line 966 
    ethtool_op_get_link(emg_19_container);
    #line 968 
    break;
    #line 970 
    case 30: 
             #line 970 
    ;
    #line 972 
    emg_19_emg_param_1_12 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 972 
    emg_19_emg_param_1_12 = emg_19_emg_param_1_12;
    #line 973 
    emg_19_emg_param_2_13 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 973 
    emg_19_emg_param_2_13 = emg_19_emg_param_2_13;
    #line 977 
    emg_wrapper_sky2_get_ethtool_stats(emg_19_container,emg_19_emg_param_1_12,emg_19_emg_param_2_13);
    #line 981 
    ldv_free((void *)emg_19_emg_param_1_12);
    #line 982 
    ldv_free((void *)emg_19_emg_param_2_13);
    #line 984 
    break;
    #line 986 
    case 31: 
             #line 986 
    ;
    #line 988 
    emg_wrapper_sky2_get_eeprom_len(emg_19_container);
    #line 990 
    break;
    #line 992 
    case 32: 
             #line 992 
    ;
    #line 994 
    emg_19_emg_param_1_10 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 994 
    emg_19_emg_param_1_10 = emg_19_emg_param_1_10;
    #line 995 
    emg_19_emg_param_2_11 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 995 
    emg_19_emg_param_2_11 = emg_19_emg_param_2_11;
    #line 999 
    emg_wrapper_sky2_get_eeprom(emg_19_container,emg_19_emg_param_1_10,emg_19_emg_param_2_11);
    #line 1003 
    ldv_free((void *)emg_19_emg_param_1_10);
    #line 1004 
    ldv_free((void *)emg_19_emg_param_2_11);
    #line 1006 
    break;
    #line 1008 
    case 33: 
             #line 1008 
    ;
    #line 1010 
    emg_19_emg_param_1_9 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1010 
    emg_19_emg_param_1_9 = emg_19_emg_param_1_9;
    #line 1014 
    emg_wrapper_sky2_get_drvinfo(emg_19_container,emg_19_emg_param_1_9);
    #line 1018 
    ldv_free((void *)emg_19_emg_param_1_9);
    #line 1020 
    break;
    #line 1022 
    case 34: 
             #line 1022 
    ;
    #line 1024 
    emg_19_emg_param_1_8 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1024 
    emg_19_emg_param_1_8 = emg_19_emg_param_1_8;
    #line 1028 
    emg_wrapper_sky2_get_coalesce(emg_19_container,emg_19_emg_param_1_8);
    #line 1032 
    ldv_free((void *)emg_19_emg_param_1_8);
    #line 1034 
    break;
    #line 1036 
    case 35: 
             #line 1036 
    ;
    #line 1038 
    emg_wrapper_sky2_tx_timeout(emg_19_container);
    #line 1040 
    break;
    #line 1042 
    case 36: 
             #line 1042 
    ;
    #line 1044 
    emg_19_emg_param_1_7 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 1044 
    emg_19_emg_param_1_7 = emg_19_emg_param_1_7;
    #line 1048 
    emg_wrapper_sky2_get_stats(emg_19_container,emg_19_emg_param_1_7);
    #line 1052 
    ldv_free((void *)emg_19_emg_param_1_7);
    #line 1054 
    break;
    #line 1056 
    case 37: 
             #line 1056 
    ;
    #line 1058 
    emg_wrapper_sky2_fix_features(emg_19_container,emg_19_emg_param_1_6);
    #line 1060 
    break;
    #line 1062 
    case 38: 
             #line 1062 
    ;
    #line 1064 
    emg_wrapper_sky2_set_features(emg_19_container,emg_19_emg_param_1_5);
    #line 1066 
    break;
    #line 1068 
    case 39: 
             #line 1068 
    ;
    #line 1070 
    emg_19_emg_param_0_4 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1070 
    emg_19_emg_param_0_4 = emg_19_emg_param_0_4;
    #line 1074 
    emg_wrapper_sky2_xmit_frame(emg_19_emg_param_0_4,emg_19_container);
    #line 1078 
    ldv_free((void *)emg_19_emg_param_0_4);
    #line 1080 
    break;
    #line 1082 
    case 40: 
             #line 1082 
    ;
    #line 1084 
    emg_wrapper_sky2_set_multicast(emg_19_container);
    #line 1086 
    break;
    #line 1088 
    case 41: 
             #line 1088 
    ;
    #line 1090 
    emg_19_emg_param_1_3 = ldv_xmalloc_unknown_size(0UL);
    #line 1090 
    emg_19_emg_param_1_3 = emg_19_emg_param_1_3;
    #line 1094 
    emg_wrapper_sky2_set_mac_address(emg_19_container,emg_19_emg_param_1_3);
    #line 1098 
    ldv_free(emg_19_emg_param_1_3);
    #line 1100 
    break;
    #line 1102 
    case 42: 
             #line 1102 
    ;
    #line 1104 
    emg_19_emg_param_1_1 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 1104 
    emg_19_emg_param_1_1 = emg_19_emg_param_1_1;
    #line 1108 
    emg_wrapper_sky2_ioctl(emg_19_container,emg_19_emg_param_1_1,emg_19_emg_param_2_2);
    #line 1112 
    ldv_free((void *)emg_19_emg_param_1_1);
    #line 1114 
    break;
    #line 1116 
    case 43: 
             #line 1116 
    ;
    #line 1118 
    emg_wrapper_sky2_change_mtu(emg_19_container,emg_19_emg_param_1_0);
    #line 1121 
    if (emg_repeat_cnt_call_19 > 0) {
      #line 1122 
      emg_repeat_cnt_call_19 --;
      #line 1124 
      goto emg_call_19;
    }
    else 
         #line 1126 
         __VERIFIER_assume(0);
    #line 1130 
    break;
    #line 1132 
    case 44: 
             #line 1132 
    ;
    #line 1136 
    break;
    #line 1138 
    default: 
             #line 1138 
    ;
    #line 1138 
    __VERIFIER_assume(0);
  }
  #line 1141 
  return (void *)0;
}

#line 1146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_sky2_driver(void *arg0)
{
  #line 1149 
  int emg_20_choice;
  #line 1150 
  struct pci_driver *emg_20_container;
  #line 1151 
  struct pci_device_id *emg_20_device_id;
  #line 1152 
  struct pci_dev *emg_20_resource_0;
  #line 1153 
  struct pm_message emg_20_resource_1;
  #line 1154 
  int emg_20_ret;
  #line 1155 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 1156 
  int emg_repeat_cnt_call_20_1 = 1;
  #line 1157 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 1158 
  int emg_repeat_cnt_call_20_0 = 1;
  #line 1160 
  struct emg_struct_pci_scenario_sky2_driver_20 *data = (struct emg_struct_pci_scenario_sky2_driver_20 *)arg0;
  #line 1164 
  emg_20_choice = 0;
  #line 1165 
  emg_20_ret = ldv_undef_int();
  #line 1166 
  emg_20_choice = 0;
  #line 1167 
  emg_20_container = emg_alias_sky2_driver;
  #line 1168 
  emg_20_ret = ldv_undef_int();
  #line 1170 
  __VERIFIER_assume(data->arg0 == emg_alias_sky2_driver);
  #line 1172 
  if (data != (struct emg_struct_pci_scenario_sky2_driver_20 *)0) {
    #line 1173 
    emg_20_container = data->arg0;
    #line 1174 
    ldv_free((void *)data);
  }
  #line 1179 
  emg_20_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1180 
  emg_20_choice = __ldv_undef_int_range(0,42);
  #line 1181 
  emg_20_device_id = emg_20_container->id_table + (unsigned long)emg_20_choice;
  #line 1185 
  goto emg_main_20;
  #line 1189 
  return (void *)0;
  #line 1192 
  emg_call_20: 
               #line 1192 
  ;
  #line 1193 
  switch (ldv_undef_int()) {
    #line 1194 
    case 0: 
            #line 1194 
    ;
    #line 1199 
    if (emg_repeat_cnt_call_20_1 > 0) {
      #line 1200 
      emg_repeat_cnt_call_20_1 --;
      #line 1202 
      goto emg_call_20;
    }
    else 
         #line 1204 
         __VERIFIER_assume(0);
    #line 1208 
    break;
    #line 1210 
    case 1: 
            #line 1210 
    ;
    #line 1212 
    if (emg_20_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 1213 
      emg_20_ret = (*(emg_20_container->suspend))(emg_20_resource_0,emg_20_resource_1); else 
                                                                    #line 1215 
                                                                    emg_20_ret = ldv_undef_int();
    #line 1221 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 1225 
    if (emg_20_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1226 
                                                                  (*(emg_20_container->resume))(emg_20_resource_0);
    #line 1230 
    if (emg_repeat_cnt_call_20_0 > 0) {
      #line 1231 
      emg_repeat_cnt_call_20_0 --;
      #line 1233 
      goto emg_call_20;
    }
    else 
         #line 1235 
         __VERIFIER_assume(0);
    #line 1239 
    break;
    #line 1241 
    case 2: 
            #line 1241 
    ;
    #line 1243 
    emg_wrapper_sky2_shutdown(emg_20_resource_0);
    #line 1247 
    emg_wrapper_sky2_remove(emg_20_resource_0);
    #line 1250 
    if (emg_repeat_cnt_main_20_1 > 0) {
      #line 1251 
      emg_repeat_cnt_main_20_1 --;
      #line 1253 
      goto emg_main_20;
    }
    else 
         #line 1255 
         __VERIFIER_assume(0);
    #line 1259 
    break;
    #line 1261 
    default: 
             #line 1261 
    ;
    #line 1261 
    __VERIFIER_assume(0);
  }
  #line 1264 
  return (void *)0;
  #line 1267 
  emg_main_20: 
               #line 1267 
  ;
  #line 1268 
  if (ldv_undef_int() != 0) {
    #line 1271 
    ldv_pre_probe();
    #line 1275 
    emg_20_ret = emg_wrapper_sky2_probe(emg_20_resource_0,emg_20_device_id);
    #line 1280 
    emg_20_ret = ldv_post_probe(emg_20_ret);
    #line 1283 
    if (ldv_undef_int() != 0) {
      #line 1285 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 1289 
      goto emg_call_20;
    }
    else 
         #line 1294 
         __VERIFIER_assume(emg_20_ret != 0);
    #line 1298 
    if (emg_repeat_cnt_main_20_0 > 0) {
      #line 1299 
      emg_repeat_cnt_main_20_0 --;
      #line 1301 
      goto emg_main_20;
    }
    else 
         #line 1303 
         __VERIFIER_assume(0);
  }
  else 
       #line 1309 
       ldv_free((void *)emg_20_resource_0);
  #line 1317 
  return (void *)0;
}

#line 1322  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_sky2_pm_ops(void *arg0)
{
  #line 1325 
  struct device *emg_21_device;
  #line 1326 
  struct dev_pm_ops *emg_21_pm_ops;
  #line 1327 
  int emg_21_ret;
  #line 1328 
  int emg_repeat_cnt_slate_21 = 1;
  #line 1329 
  int emg_repeat_cnt_rest_21 = 1;
  #line 1330 
  int emg_repeat_cnt_resnoirq_21 = 1;
  #line 1331 
  int emg_repeat_cnt_no_irq_21 = 1;
  #line 1332 
  int emg_repeat_cnt_sus_21 = 1;
  #line 1333 
  int emg_repeat_cnt_pno_irq_21 = 1;
  #line 1334 
  int emg_repeat_cnt_reste_21 = 1;
  #line 1335 
  int emg_repeat_cnt_run_resume_21 = 1;
  #line 1336 
  int emg_repeat_cnt_thlate_21 = 1;
  #line 1337 
  int emg_repeat_cnt_tnoirq_21 = 1;
  #line 1338 
  int emg_repeat_cnt_res_21 = 1;
  #line 1339 
  int emg_repeat_cnt_plate_21 = 1;
  #line 1340 
  int emg_repeat_cnt_fnoirq_21 = 1;
  #line 1341 
  int emg_repeat_cnt_restnoirq_21 = 1;
  #line 1342 
  int emg_repeat_cnt_flate_21 = 1;
  #line 1343 
  int emg_repeat_cnt_th_21 = 1;
  #line 1344 
  int emg_repeat_cnt_reslate_21 = 1;
  #line 1345 
  int emg_repeat_cnt_poff_21 = 1;
  #line 1346 
  int emg_repeat_cnt_fr_21 = 1;
  #line 1349 
  emg_21_ret = ldv_undef_int();
  #line 1350 
  emg_21_pm_ops = emg_alias_sky2_pm_ops;
  #line 1351 
  emg_21_ret = ldv_undef_int();
  #line 1357 
  goto emg_do_21;
  #line 1361 
  return (void *)0;
  #line 1364 
  emg_compl_21: 
                #line 1364 
  ;
  #line 1366 
  if (emg_21_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 1367 
                                                               (*(emg_21_pm_ops->complete))(emg_21_device);
  #line 1375 
  return (void *)0;
  #line 1378 
  emg_do_21: 
             #line 1378 
  ;
  #line 1379 
  switch (ldv_undef_int()) {
    #line 1380 
    case 0: 
            #line 1380 
    ;
    #line 1382 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 1386 
    goto emg_runt_21;
    #line 1391 
    case 1: 
            #line 1391 
    ;
    #line 1393 
    goto emg_normal_21;
    #line 1398 
    case 2: 
            #line 1398 
    ;
    #line 1402 
    break;
    #line 1404 
    default: 
             #line 1404 
    ;
    #line 1404 
    __VERIFIER_assume(0);
  }
  #line 1407 
  return (void *)0;
  #line 1410 
  emg_flate_21: 
                #line 1410 
  ;
  #line 1412 
  if (emg_21_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 1413 
                                                                 emg_21_ret = (*(emg_21_pm_ops->freeze_late))(emg_21_device); else 
                                                                    #line 1415 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1421 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1424 
  if (ldv_undef_int() != 0) {
    #line 1426 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1430 
    goto emg_thlate_21;
  }
  else 
       #line 1435 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1439 
  if (emg_repeat_cnt_flate_21 > 0) {
    #line 1440 
    emg_repeat_cnt_flate_21 --;
    #line 1442 
    goto emg_flate_21;
  }
  else 
       #line 1444 
       __VERIFIER_assume(0);
  #line 1449 
  return (void *)0;
  #line 1452 
  emg_fnoirq_21: 
                 #line 1452 
  ;
  #line 1454 
  if (emg_21_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 1455 
                                                                  emg_21_ret = (*(emg_21_pm_ops->freeze_noirq))(emg_21_device); else 
                                                                    #line 1457 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1463 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1466 
  if (ldv_undef_int() != 0) {
    #line 1468 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1472 
    goto emg_tnoirq_21;
  }
  else 
       #line 1477 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1481 
  if (emg_repeat_cnt_fnoirq_21 > 0) {
    #line 1482 
    emg_repeat_cnt_fnoirq_21 --;
    #line 1484 
    goto emg_fnoirq_21;
  }
  else 
       #line 1486 
       __VERIFIER_assume(0);
  #line 1491 
  return (void *)0;
  #line 1494 
  emg_fr_21: 
             #line 1494 
  ;
  #line 1496 
  emg_21_ret = emg_wrapper_sky2_suspend(emg_21_device);
  #line 1501 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1504 
  if (ldv_undef_int() != 0) {
    #line 1506 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1509 
    if (ldv_undef_int() != 0) 
                              #line 1511 
                              goto emg_fnoirq_21; else 
                                                       #line 1516 
                                                       goto emg_flate_21;
  }
  else {
    #line 1522 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 1525 
    if (emg_repeat_cnt_fr_21 > 0) {
      #line 1526 
      emg_repeat_cnt_fr_21 --;
      #line 1528 
      goto emg_fr_21;
    }
    else 
         #line 1530 
         __VERIFIER_assume(0);
  }
  #line 1536 
  return (void *)0;
  #line 1539 
  emg_no_irq_21: 
                 #line 1539 
  ;
  #line 1541 
  if (emg_21_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 1542 
                                                                   emg_21_ret = (*(emg_21_pm_ops->suspend_noirq))(emg_21_device); else 
                                                                    #line 1544 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1550 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1553 
  if (ldv_undef_int() != 0) {
    #line 1555 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1559 
    goto emg_resnoirq_21;
  }
  else 
       #line 1564 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1568 
  if (emg_repeat_cnt_no_irq_21 > 0) {
    #line 1569 
    emg_repeat_cnt_no_irq_21 --;
    #line 1571 
    goto emg_no_irq_21;
  }
  else 
       #line 1573 
       __VERIFIER_assume(0);
  #line 1578 
  return (void *)0;
  #line 1581 
  emg_normal_21: 
                 #line 1581 
  ;
  #line 1583 
  if (emg_21_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 1584 
                                                             emg_21_ret = (*(emg_21_pm_ops->prepare))(emg_21_device); else 
                                                                    #line 1586 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1592 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1595 
  if (ldv_undef_int() != 0) {
    #line 1597 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1600 
    switch (ldv_undef_int()) {
      #line 1601 
      case 0: 
              #line 1601 
      ;
      #line 1603 
      goto emg_sus_21;
      #line 1608 
      case 1: 
              #line 1608 
      ;
      #line 1610 
      goto emg_fr_21;
      #line 1615 
      case 2: 
              #line 1615 
      ;
      #line 1617 
      goto emg_poff_21;
      #line 1622 
      default: 
               #line 1622 
      ;
      #line 1622 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 1626 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1634 
  return (void *)0;
  #line 1637 
  emg_plate_21: 
                #line 1637 
  ;
  #line 1639 
  if (emg_21_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 1640 
                                                                   emg_21_ret = (*(emg_21_pm_ops->poweroff_late))(emg_21_device); else 
                                                                    #line 1642 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1648 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1651 
  if (ldv_undef_int() != 0) {
    #line 1653 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1657 
    goto emg_reste_21;
  }
  else 
       #line 1662 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1666 
  if (emg_repeat_cnt_plate_21 > 0) {
    #line 1667 
    emg_repeat_cnt_plate_21 --;
    #line 1669 
    goto emg_plate_21;
  }
  else 
       #line 1671 
       __VERIFIER_assume(0);
  #line 1676 
  return (void *)0;
  #line 1679 
  emg_pno_irq_21: 
                  #line 1679 
  ;
  #line 1681 
  if (emg_21_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 1682 
                                                                    emg_21_ret = (*(emg_21_pm_ops->poweroff_noirq))(emg_21_device); else 
                                                                    #line 1684 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1690 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1693 
  if (ldv_undef_int() != 0) {
    #line 1695 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1699 
    goto emg_restnoirq_21;
  }
  else 
       #line 1704 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1708 
  if (emg_repeat_cnt_pno_irq_21 > 0) {
    #line 1709 
    emg_repeat_cnt_pno_irq_21 --;
    #line 1711 
    goto emg_pno_irq_21;
  }
  else 
       #line 1713 
       __VERIFIER_assume(0);
  #line 1718 
  return (void *)0;
  #line 1721 
  emg_poff_21: 
               #line 1721 
  ;
  #line 1723 
  emg_21_ret = emg_wrapper_sky2_suspend(emg_21_device);
  #line 1728 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1731 
  if (ldv_undef_int() != 0) {
    #line 1733 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1736 
    if (ldv_undef_int() != 0) 
                              #line 1738 
                              goto emg_pno_irq_21; else 
                                                        #line 1743 
                                                        goto emg_plate_21;
  }
  else {
    #line 1749 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 1752 
    if (emg_repeat_cnt_poff_21 > 0) {
      #line 1753 
      emg_repeat_cnt_poff_21 --;
      #line 1755 
      goto emg_poff_21;
    }
    else 
         #line 1757 
         __VERIFIER_assume(0);
  }
  #line 1763 
  return (void *)0;
  #line 1766 
  emg_res_21: 
              #line 1766 
  ;
  #line 1768 
  emg_21_ret = emg_wrapper_sky2_resume(emg_21_device);
  #line 1773 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1776 
  if (ldv_undef_int() != 0) {
    #line 1778 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1782 
    goto emg_compl_21;
  }
  else {
    #line 1787 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 1790 
    if (emg_repeat_cnt_res_21 > 0) {
      #line 1791 
      emg_repeat_cnt_res_21 --;
      #line 1793 
      goto emg_res_21;
    }
    else 
         #line 1795 
         __VERIFIER_assume(0);
  }
  #line 1801 
  return (void *)0;
  #line 1804 
  emg_reslate_21: 
                  #line 1804 
  ;
  #line 1806 
  if (emg_21_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 1807 
                                                                  emg_21_ret = (*(emg_21_pm_ops->resume_early))(emg_21_device); else 
                                                                    #line 1809 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1815 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1818 
  if (ldv_undef_int() != 0) {
    #line 1820 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1824 
    goto emg_res_21;
  }
  else 
       #line 1829 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1833 
  if (emg_repeat_cnt_reslate_21 > 0) {
    #line 1834 
    emg_repeat_cnt_reslate_21 --;
    #line 1836 
    goto emg_reslate_21;
  }
  else 
       #line 1838 
       __VERIFIER_assume(0);
  #line 1843 
  return (void *)0;
  #line 1846 
  emg_resnoirq_21: 
                   #line 1846 
  ;
  #line 1848 
  if (emg_21_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 1849 
                                                                  emg_21_ret = (*(emg_21_pm_ops->resume_noirq))(emg_21_device); else 
                                                                    #line 1851 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1857 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1860 
  if (ldv_undef_int() != 0) {
    #line 1862 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1866 
    goto emg_res_21;
  }
  else 
       #line 1871 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1875 
  if (emg_repeat_cnt_resnoirq_21 > 0) {
    #line 1876 
    emg_repeat_cnt_resnoirq_21 --;
    #line 1878 
    goto emg_resnoirq_21;
  }
  else 
       #line 1880 
       __VERIFIER_assume(0);
  #line 1885 
  return (void *)0;
  #line 1888 
  emg_rest_21: 
               #line 1888 
  ;
  #line 1890 
  emg_21_ret = emg_wrapper_sky2_resume(emg_21_device);
  #line 1895 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1898 
  if (ldv_undef_int() != 0) {
    #line 1900 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1904 
    goto emg_compl_21;
  }
  else {
    #line 1909 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 1912 
    if (emg_repeat_cnt_rest_21 > 0) {
      #line 1913 
      emg_repeat_cnt_rest_21 --;
      #line 1915 
      goto emg_rest_21;
    }
    else 
         #line 1917 
         __VERIFIER_assume(0);
  }
  #line 1923 
  return (void *)0;
  #line 1926 
  emg_reste_21: 
                #line 1926 
  ;
  #line 1928 
  if (emg_21_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 1929 
                                                                   emg_21_ret = (*(emg_21_pm_ops->restore_early))(emg_21_device); else 
                                                                    #line 1931 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1937 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1940 
  if (ldv_undef_int() != 0) {
    #line 1942 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1946 
    goto emg_rest_21;
  }
  else 
       #line 1951 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1955 
  if (emg_repeat_cnt_reste_21 > 0) {
    #line 1956 
    emg_repeat_cnt_reste_21 --;
    #line 1958 
    goto emg_reste_21;
  }
  else 
       #line 1960 
       __VERIFIER_assume(0);
  #line 1965 
  return (void *)0;
  #line 1968 
  emg_restnoirq_21: 
                    #line 1968 
  ;
  #line 1970 
  if (emg_21_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 1971 
                                                                   emg_21_ret = (*(emg_21_pm_ops->restore_noirq))(emg_21_device); else 
                                                                    #line 1973 
                                                                    emg_21_ret = ldv_undef_int();
  #line 1979 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 1982 
  if (ldv_undef_int() != 0) {
    #line 1984 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 1988 
    goto emg_rest_21;
  }
  else 
       #line 1993 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 1997 
  if (emg_repeat_cnt_restnoirq_21 > 0) {
    #line 1998 
    emg_repeat_cnt_restnoirq_21 --;
    #line 2000 
    goto emg_restnoirq_21;
  }
  else 
       #line 2002 
       __VERIFIER_assume(0);
  #line 2007 
  return (void *)0;
  #line 2010 
  emg_run_resume_21: 
                     #line 2010 
  ;
  #line 2012 
  if (emg_21_pm_ops->runtime_resume != (int (*)(struct device *))0) 
                                                                    #line 2013 
                                                                    emg_21_ret = (*(emg_21_pm_ops->runtime_resume))(emg_21_device); else 
                                                                    #line 2015 
                                                                    emg_21_ret = ldv_undef_int();
  #line 2021 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2022 
  if (emg_21_ret != 0) 
                       #line 2023 
                       emg_runtime_lowpower = 0;
  #line 2026 
  if (ldv_undef_int() != 0) 
                            #line 2028 
                            __VERIFIER_assume(emg_21_ret == 0);
  else {
    #line 2032 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 2035 
    if (emg_repeat_cnt_run_resume_21 > 0) {
      #line 2036 
      emg_repeat_cnt_run_resume_21 --;
      #line 2038 
      goto emg_run_resume_21;
    }
    else 
         #line 2040 
         __VERIFIER_assume(0);
  }
  #line 2050 
  return (void *)0;
  #line 2053 
  emg_runt_21: 
               #line 2053 
  ;
  #line 2054 
  if (ldv_undef_int() != 0) {
    #line 2056 
    if (emg_21_pm_ops->runtime_idle != (int (*)(struct device *))0) 
                                                                    #line 2057 
                                                                    emg_21_ret = (*(emg_21_pm_ops->runtime_idle))(emg_21_device); else 
                                                                    #line 2059 
                                                                    emg_21_ret = ldv_undef_int();
    #line 2065 
    emg_21_ret = ldv_post_probe(emg_21_ret);
  }
  else {
    #line 2069 
    if (emg_21_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      #line 2070 
      emg_21_ret = (*(emg_21_pm_ops->runtime_suspend))(emg_21_device); else 
                                                                    #line 2072 
                                                                    emg_21_ret = ldv_undef_int();
    #line 2078 
    emg_21_ret = ldv_post_probe(emg_21_ret);
    #line 2079 
    if (emg_21_ret != 0) 
                         #line 2080 
                         emg_runtime_lowpower = 1;
    #line 2083 
    if (ldv_undef_int() != 0) {
      #line 2085 
      __VERIFIER_assume(emg_21_ret == 0);
      #line 2089 
      goto emg_run_resume_21;
    }
    else 
         #line 2094 
         __VERIFIER_assume(emg_21_ret != 0);
  }
  #line 2103 
  return (void *)0;
  #line 2106 
  emg_slate_21: 
                #line 2106 
  ;
  #line 2108 
  if (emg_21_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 2109 
                                                                  emg_21_ret = (*(emg_21_pm_ops->suspend_late))(emg_21_device); else 
                                                                    #line 2111 
                                                                    emg_21_ret = ldv_undef_int();
  #line 2117 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2120 
  if (ldv_undef_int() != 0) {
    #line 2122 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2126 
    goto emg_reslate_21;
  }
  else 
       #line 2131 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 2135 
  if (emg_repeat_cnt_slate_21 > 0) {
    #line 2136 
    emg_repeat_cnt_slate_21 --;
    #line 2138 
    goto emg_slate_21;
  }
  else 
       #line 2140 
       __VERIFIER_assume(0);
  #line 2145 
  return (void *)0;
  #line 2148 
  emg_sus_21: 
              #line 2148 
  ;
  #line 2150 
  emg_21_ret = emg_wrapper_sky2_suspend(emg_21_device);
  #line 2155 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2158 
  if (ldv_undef_int() != 0) {
    #line 2160 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2163 
    if (ldv_undef_int() != 0) 
                              #line 2165 
                              goto emg_no_irq_21; else 
                                                       #line 2170 
                                                       goto emg_slate_21;
  }
  else {
    #line 2176 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 2179 
    if (emg_repeat_cnt_sus_21 > 0) {
      #line 2180 
      emg_repeat_cnt_sus_21 --;
      #line 2182 
      goto emg_sus_21;
    }
    else 
         #line 2184 
         __VERIFIER_assume(0);
  }
  #line 2190 
  return (void *)0;
  #line 2193 
  emg_th_21: 
             #line 2193 
  ;
  #line 2195 
  emg_21_ret = emg_wrapper_sky2_resume(emg_21_device);
  #line 2200 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2203 
  if (ldv_undef_int() != 0) {
    #line 2205 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2209 
    goto emg_compl_21;
  }
  else {
    #line 2214 
    __VERIFIER_assume(emg_21_ret != 0);
    #line 2217 
    if (emg_repeat_cnt_th_21 > 0) {
      #line 2218 
      emg_repeat_cnt_th_21 --;
      #line 2220 
      goto emg_th_21;
    }
    else 
         #line 2222 
         __VERIFIER_assume(0);
  }
  #line 2228 
  return (void *)0;
  #line 2231 
  emg_thlate_21: 
                 #line 2231 
  ;
  #line 2233 
  if (emg_21_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 2234 
                                                                emg_21_ret = (*(emg_21_pm_ops->thaw_early))(emg_21_device); else 
                                                                    #line 2236 
                                                                    emg_21_ret = ldv_undef_int();
  #line 2242 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2245 
  if (ldv_undef_int() != 0) {
    #line 2247 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2251 
    goto emg_th_21;
  }
  else 
       #line 2256 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 2260 
  if (emg_repeat_cnt_thlate_21 > 0) {
    #line 2261 
    emg_repeat_cnt_thlate_21 --;
    #line 2263 
    goto emg_thlate_21;
  }
  else 
       #line 2265 
       __VERIFIER_assume(0);
  #line 2270 
  return (void *)0;
  #line 2273 
  emg_tnoirq_21: 
                 #line 2273 
  ;
  #line 2275 
  if (emg_21_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 2276 
                                                                emg_21_ret = (*(emg_21_pm_ops->thaw_noirq))(emg_21_device); else 
                                                                    #line 2278 
                                                                    emg_21_ret = ldv_undef_int();
  #line 2284 
  emg_21_ret = ldv_post_probe(emg_21_ret);
  #line 2287 
  if (ldv_undef_int() != 0) {
    #line 2289 
    __VERIFIER_assume(emg_21_ret == 0);
    #line 2293 
    goto emg_th_21;
  }
  else 
       #line 2298 
       __VERIFIER_assume(emg_21_ret != 0);
  #line 2302 
  if (emg_repeat_cnt_tnoirq_21 > 0) {
    #line 2303 
    emg_repeat_cnt_tnoirq_21 --;
    #line 2305 
    goto emg_tnoirq_21;
  }
  else 
       #line 2307 
       __VERIFIER_assume(0);
  #line 2312 
  return (void *)0;
}

#line 2317  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_6(void *arg0)
{
  #line 2320 
  struct timer_list *emg_22_container;
  #line 2321 
  unsigned long emg_22_emg_param_0_0;
  #line 2323 
  struct emg_struct_timer_scenario_6_22 *data = (struct emg_struct_timer_scenario_6_22 *)arg0;
  #line 2328 
  if (data != (struct emg_struct_timer_scenario_6_22 *)0) {
    #line 2329 
    emg_22_container = data->arg0;
    #line 2330 
    ldv_free((void *)data);
  }
  #line 2336 
  ldv_switch_to_interrupt_context();
  #line 2340 
  if (emg_22_container->function != (void (*)(struct timer_list *))0) 
    #line 2341 
    (*(emg_22_container->function))((struct timer_list *)emg_22_emg_param_0_0);
  #line 2347 
  ldv_switch_to_process_context();
  #line 2354 
  return (void *)0;
}

#line 2359  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 2362 
  struct pci_driver *emg_2_pci_driver;
  #line 2364 
  emg_2_pci_driver = emg_alias_sky2_driver;
  #line 2365 
  if (ldv_undef_int() != 0) {
    #line 2367 
    emg_2_pci_driver = arg0;
    #line 2371 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 2375 
    return 0;
  }
  else {
    #line 2379 
    return ldv_undef_int_negative();
  }
}

#line 2387  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 2390 
  struct net_device *emg_3_netdev;
  #line 2392 
  if (ldv_undef_int() != 0) {
    #line 2394 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 2398 
    return emg_3_netdev;
  }
  else 
       #line 2402 
       return (struct net_device *)0;
}

#line 2410  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 2413 
  struct dentry *emg_4_dentry;
  #line 2414 
  struct inode *emg_4_inode;
  #line 2416 
  if (ldv_undef_int() != 0) {
    #line 2418 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 2419 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 2420 
    emg_4_inode->i_mode = (unsigned short)16877U;
    #line 2421 
    emg_4_dentry->d_parent = arg1;
    #line 2422 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 2423 
    return emg_4_dentry;
  }
  else {
    #line 2427 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 2435  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 2438 
  struct dentry *emg_5_dentry;
  #line 2439 
  struct file_operations *emg_5_file_operations;
  #line 2440 
  struct inode *emg_5_inode;
  #line 2442 
  emg_5_file_operations = emg_alias_sky2_debug_fops;
  #line 2443 
  if (ldv_undef_int() != 0) {
    #line 2445 
    emg_5_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 2446 
    emg_5_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 2447 
    emg_5_inode->i_mode = arg1;
    #line 2448 
    emg_5_dentry->d_parent = arg2;
    #line 2449 
    emg_5_inode->i_private = arg3;
    #line 2450 
    emg_5_file_operations = arg4;
    #line 2451 
    emg_5_dentry->d_inode = emg_5_inode;
    #line 2452 
    ldv_save_allocated_memory_to_list((void *)emg_5_dentry);
    #line 2456 
    emg_dispatch_register_5(emg_5_file_operations);
    #line 2460 
    return emg_5_dentry;
  }
  else {
    #line 2464 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 2472  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_debugfs_remove(struct dentry *arg0)
{
  #line 2475 
  struct dentry *emg_6_dentry;
  #line 2476 
  struct file_operations *emg_6_file_operations;
  #line 2477 
  struct inode *emg_6_inode;
  #line 2479 
  emg_6_file_operations = emg_alias_sky2_debug_fops;
  #line 2481 
  emg_6_dentry = arg0;
  #line 2484 
  if (ldv_undef_int() != 0) {
    #line 2486 
    int tmp_0;
    #line 2486 
    if (IS_ERR_OR_NULL((void *)emg_6_dentry)) 
                                              #line 2486 
                                              tmp_0 = 0; else 
                                                              #line 2486 
                                                              tmp_0 = 1;
    #line 2486 
    __VERIFIER_assume(tmp_0);
    #line 2487 
    emg_6_inode = emg_6_dentry->d_inode;
    #line 2488 
    ldv_free((void *)emg_6_inode);
    #line 2489 
    ldv_free((void *)emg_6_dentry);
    #line 2493 
    emg_dispatch_deregister_6(emg_6_file_operations);
  }
  else {
    #line 2497 
    __VERIFIER_assume((int)IS_ERR_OR_NULL((void *)emg_6_dentry));
  }
  #line 2501 
  return;
}

#line 2506  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 2509 
  struct timer_list *emg_7_timer_list;
  #line 2512 
  emg_7_timer_list = arg0;
  #line 2516 
  emg_dispatch_instance_deregister_7(emg_7_timer_list);
  #line 2517 
  ;
  #line 2517 
  return 0;
}

#line 2523  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 2526 
  int emg_8_line;
  #line 2529 
  emg_8_line = (int)arg0;
  #line 2533 
  emg_dispatch_irq_deregister_8(emg_8_line);
  #line 2534 
  ;
  #line 2534 
  return (void *)0;
}

#line 2540  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 2543 
  struct net_device *emg_9_netdev;
  #line 2546 
  emg_9_netdev = arg0;
  #line 2547 
  ldv_free((void *)emg_9_netdev);
  #line 2550 
  return;
}

#line 2555  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 2558 
  struct timer_list *emg_10_timer_list;
  #line 2560 
  if (ldv_undef_int() != 0) {
    #line 2562 
    emg_10_timer_list = arg0;
    #line 2566 
    emg_dispatch_instance_register_10(emg_10_timer_list);
    #line 2570 
    return 1;
  }
  else 
       #line 2574 
       return 0;
}

#line 2582  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 2585 
  struct pci_driver *emg_11_pci_driver;
  #line 2587 
  emg_11_pci_driver = emg_alias_sky2_driver;
  #line 2589 
  emg_11_pci_driver = arg0;
  #line 2593 
  emg_dispatch_deregister_11(emg_11_pci_driver);
  #line 2596 
  return;
}

#line 2601  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 2604 
  struct net_device *emg_12_netdev;
  #line 2605 
  int emg_12_ret;
  #line 2608 
  emg_12_ret = ldv_undef_int();
  #line 2609 
  emg_12_ret = ldv_undef_int();
  #line 2610 
  if (ldv_undef_int() != 0) {
    #line 2612 
    emg_12_netdev = arg0;
    #line 2616 
    emg_12_ret = emg_wrapper_sky2_open(emg_12_netdev);
    #line 2619 
    if (ldv_undef_int() != 0) {
      #line 2621 
      __VERIFIER_assume(emg_12_ret == 0);
      #line 2625 
      emg_dispatch_register_12(emg_12_netdev);
      #line 2629 
      return 0;
    }
    else {
      #line 2633 
      __VERIFIER_assume(emg_12_ret != 0);
      #line 2634 
      ldv_failed_register_netdev();
      #line 2635 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 2640 
    ldv_failed_register_netdev();
    #line 2641 
    return ldv_undef_int_negative();
  }
}

#line 2649  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 2652 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 2653 
  void *emg_13_data;
  #line 2654 
  int emg_13_line;
  #line 2655 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 2657 
  emg_13_callback = & emg_wrapper_sky2_intr;
  #line 2658 
  if (ldv_undef_int() != 0) {
    #line 2660 
    emg_13_line = (int)arg0;
    #line 2661 
    emg_13_callback = arg1;
    #line 2662 
    emg_13_thread = (enum irqreturn (*)(int , void *))0;
    #line 2663 
    emg_13_data = arg4;
    #line 2667 
    emg_dispatch_irq_register_13(emg_13_line,emg_13_callback,emg_13_thread,emg_13_data);
    #line 2671 
    return 0;
  }
  else {
    #line 2675 
    return ldv_undef_int_negative();
  }
}

#line 2683  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 2686 
  struct work_struct *emg_14_work_struct;
  #line 2688 
  if (ldv_undef_int() != 0) {
    #line 2690 
    emg_14_work_struct = arg0;
    #line 2694 
    if (emg_14_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 2695 
      (*(emg_14_work_struct->func))(emg_14_work_struct);
    #line 2700 
    return (_Bool)1;
  }
  else 
       #line 2704 
       return (_Bool)0;
}

#line 2712  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 2715 
  struct net_device *emg_15_netdev;
  #line 2718 
  emg_15_netdev = arg0;
  #line 2722 
  emg_wrapper_sky2_close(emg_15_netdev);
  #line 2726 
  emg_dispatch_deregister_15(emg_15_netdev);
  #line 2729 
  return;
}

#line 2734  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 2737 
  int emg_1_ret;
  #line 2740 
  emg_1_ret = emg_sky2_init_module();
  #line 2741 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 2744 
  if (ldv_undef_int() != 0) {
    #line 2746 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 2750 
    emg_sky2_cleanup_module();
  }
  else 
       #line 2754 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 2758 
  return (void *)0;
}

#line 2763  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/sky2.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 2765 
  ldv_initialize();
  #line 2767 
  emg_entry_point_insmod((void *)0);
  #line 2769 
  return 0;
}

